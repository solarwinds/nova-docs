import { Component, Inject, OnInit } from "@angular/core";
import {FormBuilder, FormGroup, Validators} from "@angular/forms";
import * as xui from "xui";

import { IToastService } from "../../../../../src/index";
import { CheckboxChangeEvent } from "../../../../../src/components/checkbox/checkbox.component";
import { IToastConfig } from "../../../../../src/components/toast/toast-config";

@Component({
    selector: "xui-toast-example",
    template: require<string>("./toast.example.component.html")
})
export class ToastExampleComponent implements OnInit {
    public toastExampleForm: FormGroup;
    public stickyError: boolean = false;
    public numberOfClicks: number = 0;
    public dataWithKeys: any[] = [
        {
            id: "firstId",
            data: "First record",
            checked: false
        },
        {
            id: "secondId",
            data: "Second record",
            checked: false
        },
        {
            id: "thirdId",
            data: "Third record",
            checked: false
        }
    ];
    public toastPositions = [{
        displayValue: "Top Right",
        className: "toast-top-right"
    }, {
        displayValue: "Top Left",
        className: "toast-top-left"
    }, {
        displayValue: "Bottom Right",
        className: "toast-bottom-right"
    }, {
        displayValue: "Bottom Left",
        className: "toast-bottom-left"
    }, {
        displayValue: "Top Full Width",
        className: "toast-top-full-width"
    }, {
        displayValue: "Bottom Full Width",
        className: "toast-bottom-full-width"
    }, {
        displayValue: "Top Center",
        className: "toast-top-center"
    }, {
        displayValue: "Bottom Center",
        className: "toast-bottom-center"
    }];
    public selectedPosition: string;

    constructor(@Inject(xui.ToastService) private toastService: IToastService,
                @Inject(FormBuilder) private formBuilder: FormBuilder) { }
    ngOnInit() {
        this.toastService.setConfig({}, "id");
        this.toastExampleForm = this.formBuilder.group({
            title: "Default title",
            body: "Default body",
            timeOut: [5000, Validators.pattern("\\d+")],
            extendedTimeOut: [2000, Validators.pattern("\\d+")]
        });
    }

    public fireToastSuccess(highlightMode: boolean): void {
        this.toastService
            .success(this.toastExampleForm.controls.body.value, this.toastExampleForm.controls.title.value,
                this.getOptions());
    }

    public fireToastWarning(highlightMode: boolean): void {
        this.toastService
            .warning(this.toastExampleForm.controls.body.value, this.toastExampleForm.controls.title.value,
                this.getOptions());
    }

    public fireToastError(highlightMode: boolean): void {
        this.toastService.error(this.toastExampleForm.controls.body.value, this.toastExampleForm.controls.title.value,
            this.getOptions());
    }

    public fireToastInfo(highlightMode: boolean): void {
        this.toastService.info(this.toastExampleForm.controls.body.value, this.toastExampleForm.controls.title.value,
            this.getOptions());
    }

    public highlightItem(): void {
        const checkedItems = _.filter(this.dataWithKeys, item => item.checked);
        this.toastService
            .warning("Body for highlight", "Title for highlight", {}, checkedItems);
    }

    public clear(): void {
        this.toastService.clear();
    }

    public onValueChange(checkboxEvent: CheckboxChangeEvent, checkbox: any): void {
        checkbox.checked = checkboxEvent.target.checked;
    }

    public onStickyErrorChange(checkboxEvent: CheckboxChangeEvent) {
        this.stickyError = checkboxEvent.target.checked;
    }

    public triggerCustomAction() {
        const toastInstance = this.toastService.success(this.toastExampleForm.controls.body.value,
            this.toastExampleForm.controls.title.value,
            this.getOptions());

        toastInstance.onClick.subscribe(() => {
            this.numberOfClicks++;
        });

        toastInstance.onHidden.subscribe(() => {
            this.numberOfClicks = 0;
        });
    }

    private getOptions(): IToastConfig {
        return {
            timeOut: this.toastExampleForm.controls.timeOut.value,
            extendedTimeOut: this.toastExampleForm.controls.extendedTimeOut.value,
            positionClass: this.selectedPosition,
            stickyError: this.stickyError
        };
    }
}
