import {
    Component,
    OnInit
} from "@angular/core";

import {
    AbstractControl,
    ValidationErrors,
    Validators
} from "@angular/forms";

import {
    IAugmentedObjValidator,
    IAugmentedObjValidatorAsync,
    CheckboxChangeEvent
} from "../../../../../src";
import { XuiValidators } from "../../../../../src/validators/xui-validators";

@Component({
    selector: "xui-textbox-example",
    template: require<string>("./textbox.example.component.html")
})

export class TextboxExampleComponent implements OnInit {
    public availabilityState: string;
    public boxWidth = "100px";
    public caption = "example-caption";
    public hint = "example-hint";
    public isDisabled = true;
    public isReadonly = true;
    public isRequired = true;
    public name = "example-name";
    public placeholder = "example-placeholder";
    public rows = 5;
    public suffix = "example-suffix";

    public validatorsAsyncCollection: { [key: string]: IAugmentedObjValidatorAsync } = {
        customNoDarthVader: {
            name: "customNoDarthVader",
            validator: (control: AbstractControl): Promise<ValidationErrors | null> => {
                return new Promise((resolve) => {
                    const result = (control.value === "Darth Vader")
                        ? {value: "Wrong value"} : null;
                    resolve(result);
                });
            },
            message: "User 'Darth Vader' already exists"
        } as IAugmentedObjValidatorAsync
    };

    public type = "text";
    public usedValidators = [] as IAugmentedObjValidator[];
    public usedValidatorsKeys = [] as string[];
    public validatorsCollection: { [key: string]: IAugmentedObjValidator } = {
        nativeMinLength: {
            name: "minLength4",
            validator: Validators.minLength(4),
            message: "Length is less than 4 symbols"
        } as IAugmentedObjValidator,
        nativeEmail: {
            name: "email",
            validator: Validators.email,
            message: "Doesn't follow email pattern"
        } as IAugmentedObjValidator,
        nativePatternDarth: {
            name: "nativeDarth",
            validator: Validators.pattern(/darth/i),
            message: "substring 'darth' is required (case-insensitive)"
        } as IAugmentedObjValidator,
        customNoVader: {
            name: "customNoVader",
            validator: (control: AbstractControl): ValidationErrors | null => {
                const errorObject = {
                    value: control.value
                };
                const invalid = control.value === "Vader";
                return invalid ? errorObject : null;
            },
            message: "value 'Vader' is restricted"
        } as IAugmentedObjValidator,
        customInteger: {
            name: "customInteger",
            validator: XuiValidators.integer(true),
            message: "Expected value type is integer"
        } as IAugmentedObjValidator
    };

    public usedValidatorAsync = null as IAugmentedObjValidatorAsync;
    public validatorAsync = {
        name: "async",
        validator: (control: any) => {
            return new Promise((resolve) => {
                setTimeout(() => {
                    if (control.value === "Ted") {
                        resolve(
                            {
                                value: "Ted",
                            }
                        );
                    } else {
                        resolve(null);
                    }
                }, 1000);
            });
        },
        message: "Ted's error"
    };

    public value = "example-value";
    public textAreaValue = "example-value text";

    ngOnInit() {
        this.usedValidators = [this.validatorsCollection.nativeMinLength];
        this.usedValidatorsKeys = ["nativeMinLength"];
    };

    public onOptionChange(optionName: "hint" | "caption" | "suffix" | "placeholder" | "rows",
                          value: string) {
        switch (optionName) {
            case "hint":
                this.hint = value;
                break;
            case "caption":
                this.caption = value;
                break;
            case "suffix":
                this.suffix = value;
                break;
            case "placeholder":
                this.placeholder = value;
                break;
            case "rows":
                this.rows = parseInt(value, 10);
                break;
        }
    }

    public onValueChange(changedValue: any) {
        this.value = changedValue;
    }

    public onTextareaValueChange(changedValue: any) {
        this.textAreaValue = changedValue;
    }

    public updateAvailabilityStates(state: "disabled" | "readonly" | "required" | "") {
        this.isDisabled = (state === "disabled");
        this.isReadonly = (state === "readonly");
        this.isRequired = (state === "required");
    }

    public validatorsSetChanged(validatorsId: string[]) {
        this.usedValidatorsKeys = validatorsId.slice(0);

        this.usedValidators = validatorsId.map((validatorId: string) => {
            return this.validatorsCollection[validatorId];
        });
    }

    public validatorAsyncToggle(event: CheckboxChangeEvent) {
        if (event.target.checked) {
            this.usedValidatorAsync = this.validatorAsync;
        } else {
            this.usedValidatorAsync = null;
        }
    }
}
