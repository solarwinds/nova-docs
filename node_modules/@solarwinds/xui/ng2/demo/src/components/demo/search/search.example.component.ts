import { Component, Inject, ChangeDetectorRef } from "@angular/core";
import { Logger } from "angular2-logger/app/core/logger";

@Component({
    selector: "xui-search-example",
    template: require<string>("./search.example.component.html")
})
export class SearchExampleComponent {
    public active: boolean = false;
    public busy: boolean = false;
    public caption: string = "Header";
    public captureFocus: boolean = true;
    public disabled: boolean = false;
    public name: string = "example-name";
    public placeholder: string = "Placeholder";
    public searchKey: string;
    public stringToSearch: string = `
        Lorem ipsum dolor sit amet, consectetur adipiscing elit. Donec efficitur rutrum lacus id vulputate. 
        Integer eu ex eu augue efficitur luctus quis ac elit. Nam odio est, iaculis nec varius id, congue erat. 
        Nullam mi lectus, gravida quis pretium sit amet, accumsan non elit. In tempus commodo sem ac vulputate.
        Sed vel sagittis purus. Integer non ornare felis. Sed aliquam, purus et euismod tincidunt, felis ligula 
        fermentum mi, eget commodo nisl orci efficitur dui. Etiam interdum justo magna consequat, vitae 
        hendrerit mi aliquam. Sed non ex eu purus ornare lobortis tempus id est. Aenean dictum at dui sit amet mollis.
        Phasellus mauris arcu, blandit id congue vitae, elementum amet enim. 
        Pellentesque et facilisis leo, sit amet rhoncus magna. Integer commodo lobortis arcu et bibendum. 
        Pellentesque sagittis magna sed tellus volutpat, sed eleifend justo ornare. 
        Fusce porttitor laoreet dui a mollis.
    `;
    public value: string;
    
    private interval: number = 2000;
    private timerHandler: number;

    public constructor(@Inject(Logger) private logger: Logger) {
        //TODO remove logging events to console after UIF-5801 Migrate 'toast' directive
    }

    public onCancel (value: string) {
        this.logger.warn("Example onCancel fired. Value passed: " + value);
        if (value === "") {
            this.value = "";
            this.searchKey = "";
        } else {
            this.doCancel();    
        }
    }
    
    public onCaptionValueChange(event: string) {
        this.caption = event;
    }

    public onFocusChange(event: boolean) {
        this.logger.warn("Example onFocusChange fired. Value passed: " + event);
        this.captureFocus = event;
    }
    
    public onInputChange(value: string) {
        this.logger.warn("Example onInputChange fired. Current input value: " + value);
        this.value = value;
        this.doCancel();
    }

    public onPlaceholderValueChange(event: string) {
        this.placeholder = event;
    }

    public onSearch(value: string) {
        this.logger.warn("Example onSearch fired. Current input value passed: " + value);
        this.doSearch(value);
    }

    public setFocus() {
        let _this = this;
        _this.captureFocus = true;
        setTimeout(function () {
            _this.captureFocus = false;
        }, _this.interval);
    }

    private doCancel () {
        clearTimeout(this.timerHandler);
        this.busy = false;
    }

    private doSearch (value: string) {
        this.logger.warn("Example search started.");
        let _this = this as SearchExampleComponent;
        clearTimeout(_this.timerHandler);
        _this.busy = true;
        _this.timerHandler = setTimeout(function() {
            _this.busy = false;
            _this.searchKey = value;
            this.logger.warn("Example search finished.");
        }, 2000);
    }
}
