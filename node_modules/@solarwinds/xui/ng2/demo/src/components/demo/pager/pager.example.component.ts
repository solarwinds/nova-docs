import { Component, Inject } from "@angular/core";
import { IToastService, IAugmentedObjValidator } from "../../../../../src/index";
import * as xui from "xui";
import { Validators } from "@angular/forms";

@Component({
    selector: "pager-example",
    template: require<string>("./pager.example.component.html")
})

export class PagerExampleComponent {
    public currentPageSize = 10;
    public currentPage = 1;
    public adjacent = 1;
    public constellationPages: any = [];
    public constellation: DemoConstellation;
    public displayQuantity: number = 1000;

    public usedValidators = [] as IAugmentedObjValidator[];
    public usedValidatorsKeys = [] as string[];

    ngOnInit(): void {
        this.usedValidators = [this.validatorsCollection.maxLength];
        this.usedValidatorsKeys = ["maxLength"];

        this.constellation = new DemoConstellation(this.displayQuantity);
        this.prepConstellationPages();
    }

    constructor(@Inject(xui.ToastService) private toastService: IToastService) {
    }

    public prepConstellationPages() {
        this.constellationPages = [];
        let chunks = _.chunk(this.constellation.get(this.displayQuantity), this.currentPageSize);
        for (let i = 0; i < chunks.length; ++i) {
            this.constellationPages.push(chunks[i]);
        }
    }

    public onPageChanged(event: any) {
        this.currentPageSize = event.pageSize;
        this.updatePager(event.page);
        this.toastService.info("current page: " + event.page + 
        ", items per page: " + event.pageSize);
    };

    public onTotalNumberChange(event: number) {
        this.displayQuantity = event;
        this.updatePager(1);
    };

    public onAdjacentChange(event: number) {
        this.adjacent = event;
        this.updatePager(1);
    };

    private updatePager(page: number) {
        this.currentPage = page;
        this.prepConstellationPages();
    }

    public validatorsCollection: { [key: string]: IAugmentedObjValidator } = {
        maxLength: {
            name: "maxLength",
            validator: Validators.maxLength(4),
            message: "Length is more than 4 symbols"
        } as IAugmentedObjValidator,
    };

    public validatorsSetChanged(validatorsId: string[]) {
        this.usedValidatorsKeys = validatorsId.slice(0);

        this.usedValidators = validatorsId.map((validatorId: string) => {
            return this.validatorsCollection[validatorId];
        });
    }
}

export class DemoConstellation {
    public constellationsSet: string[] = [];
    public constellations: string[] = [];

    constructor(total: number) {
        for (let i = 1; i <= total; i++) {
            this.constellationsSet.push("constellation #" + i);
        }
    }

    public get(val: number) {
        this.constellations = this.constellationsSet.slice(0, val);
        return this.constellations;
    };

    public count = function () {
        return this.constellations.length;
    };
}
