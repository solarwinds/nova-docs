import {Component, OnInit} from "@angular/core";
import {IEmptyData, ListSelectionMode} from "../../../../../src/index";

@Component({
    selector: "grid-example",
    template: require<string>("./grid.example.component.html")
})
export class GridExampleComponent implements OnInit {
    public emptySource: any[] = [];
    public selectedMode: ListSelectionMode;

    public items: any[];
    public selectedItems: any[] = [];

    public displayedData: "list-data" | "empty-data";

    public colors = [
        {color: "blue", disabled: true},
        {color: "green", disabled: false},
        {color: "yellow"},
        {color: "cyan "},
        {color: "magenta", disabled: true},
        {color: "black"}
    ];

    public selectedColors = [this.colors[1]];

    public customTemplateData: IEmptyData;

    private totalGridItemsCount = 10;

    private customTemplateViewModel = {
        image: "http://oriondemo.solarwinds.com/ui/modules/platform/images/404-Robot.svg",
        searchTerm: "Node134"
    };

    private customTemplate =
        `<div class="empty-container sample-custom-template">
            <img src="${this.customTemplateViewModel.image}"
                 alt="No items in the list" class="empty-pic"/>
            <p>
                 No result found for
                 <span class="sample-custom-template_bound-value">${this.customTemplateViewModel.searchTerm}</span>
            </p>
        </div>`;

    public ngOnInit(): void {
        this.items = this.createGridItems();

        this.customTemplateData = {
            template: this.customTemplate
        };
    }

    public onItemsSelectionChange(selection: any) {
        this.selectedItems = selection;
    }

    public onDisplayedData(displayedData: "list-data" | "empty-data") {
        this.displayedData = displayedData;
        this.selectedItems = [];

        if (displayedData === "list-data") {
            this.items = this.createGridItems();
        } else if (displayedData === "empty-data") {
            this.items = [];
        }

    }

    private createGridItems() {
        const items = [];

        for (let i = 0; i < this.totalGridItemsCount; i++) {
            items.push({
                name: "Item " + this.pad(i, 3),
                value: this.makeValue()
            });
        }

        return items;
    }

    private makeValue() {
        const possible = "abcdefghijklmnopqrstuvwxyz";
        let text = "";

        for (let i = 0; i < 10; i++) {
            text += possible.charAt(Math.floor(Math.random() * possible.length));
        }

        return text;
    }

    private pad(num: number, size: number) {
        let s = num + "";
        while (s.length < size) {
            s = "0" + s;
        }
        return s;
    }
}
