import {
    Directive,
    ElementRef,
    EventEmitter,
    HostListener,
    Input,
    Output
} from "@angular/core";
import { ScrollConstants } from "../../constants/dragdrop.constants";

export interface IXuiDropEvent {
    event: DragEvent;
    payload: any;
}
/**
 * Directive that provides behavior of droppable zone for an element
 *
 *  __Usage:__
 *
 * Bind this directive to an element that will be a zone for dropping elements there.
 *
 *        `<div xuiDroppable>Some content</div>`
 *
 * Make sure that this zone has some content, because droppable directive doesn't set any height
 * to the element. This won't work:
 *
 *        `<div xuiDroppable></div>`
 *
 * To subscribe to an event `onDragOver, onDragEnter, onDragLeave, onDrop` just transmit an attribute
 *
 *         `<div xuiDroppable (onDrop)="onDropObject($event)"></div>`
 *
 * And `onDropObject` method will look like that:
 *
 *         `public onDropObject(dropEvent: IXuiDropEvent) {
 *
 *              const extractedData = dropEvent.payload; //some data that you passed to draggable directive
 *
 *              const actualEvent = dropEvent.event; // an HTML 5 event (native)
 *
 *          };`
 *
 */
/**
 * <example-url>./../../../demo/index.html#/dragdrop</example-url>
 */
@Directive({
    selector: "[xuiDroppable]"
})
export class DroppableDirective {
    @Input() dragOverClass: string;

    @Output() onDragOver = new EventEmitter<DragEvent>();
    @Output() onDragEnter = new EventEmitter<DragEvent>();
    @Output() onDragLeave = new EventEmitter<DragEvent>();
    @Output() onDrop = new EventEmitter<IXuiDropEvent>();

    private dragElements: Array<HTMLElement> = [];

    @HostListener("dragenter", ["$event"])
    dragEnter(event: DragEvent) {
        const dragOverClass = this.dragOverClass || "xui-drag--over";
        if (this.dragElements.length === 0) {
            this.elRef.nativeElement.classList.add(dragOverClass);
            this.onDragEnter.emit(event);
        }

        this.dragElements.push(<HTMLElement>event.target);
        event.preventDefault();
    }

    @HostListener("dragover", ["$event"])
    dragOver(event: DragEvent) {
        event.preventDefault();
        this.dragThrottle(event);
    }

    @HostListener("dragleave", ["$event"])
    dragLeave(event: DragEvent) {
        this.dragElements = this.dragElements.filter(el => el !== event.target);

        if (this.dragElements.length === 0) {
            this.elRef.nativeElement.classList.remove(this.dragOverClass);
            this.onDragLeave.emit(event);
        }
    }

    @HostListener("drop", ["$event"])
    drop(event: DragEvent) {
        event.preventDefault();
        this.dragElements = [];

        if ((typeof DragEvent !== "undefined" && event instanceof DragEvent) || (<any>event).dataTransfer) {
            const payload = this.extractDragObject(event);
            this.onDrop.emit({event, payload});
        }
        this.elRef.nativeElement.classList.remove(this.dragOverClass);

        event.stopPropagation();
        return false;
    }

    constructor(private elRef: ElementRef) {}

    private extractDragObject = (event: DragEvent): any => {
        const payload = event.dataTransfer.getData("Text") || event.dataTransfer.getData("text/plain");
        try {
            return JSON.parse(payload);
        } catch (e) {
            return payload;
        }
    };

    private dragThrottle = _.throttle((dragEvent: any) => {
        this.onDragOver.emit(dragEvent);
    }, ScrollConstants.checkIntervalInMs, {trailing: false});
}
