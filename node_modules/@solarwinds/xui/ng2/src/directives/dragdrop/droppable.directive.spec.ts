import { async, ComponentFixture, TestBed } from "@angular/core/testing";
import { Component, CUSTOM_ELEMENTS_SCHEMA, DebugElement } from "@angular/core";
import { BrowserDynamicTestingModule, platformBrowserDynamicTesting } from "@angular/platform-browser-dynamic/testing";
import { DraggableDirective } from "./draggable.directive";
import { SwUtilService } from "../../services/sw-util.service";
import { By } from "@angular/platform-browser";
import {DroppableDirective, IXuiDropEvent} from "./droppable.directive";

describe("directives >", () => {
    describe("droppable >", () => {
        type DragEventType = "drag" |
            "dragstart" |
            "dragend" |
            "dragover" |
            "dragenter" |
            "dragleave" |
            "drop";
        const successStatus = "success";
        const highlightOnClass = "highlight-on";
        const highlightFadeOutClass = "highlight-fadeout";
        let subject: DraggableDirective;
        let fixture: ComponentFixture<DroppableTestingComponent>;
        let component: DroppableTestingComponent;
        let draggableElement: DebugElement;
        let droppableElement: DebugElement;
        let draggableDirective: DraggableDirective;
        let droppableDirective: DroppableDirective;

        const emitEvent = (eventType: DragEventType, element: HTMLElement) => {
            const event = new DragEvent(eventType);
            element.dispatchEvent(event);
        };

        beforeAll(() => {
            TestBed.initTestEnvironment(
                BrowserDynamicTestingModule,
                platformBrowserDynamicTesting()
            );
        });

        beforeEach(() => {
            TestBed.configureTestingModule({
                declarations: [DraggableDirective, DroppableDirective, DroppableTestingComponent],
                providers: [SwUtilService],
                schemas: [CUSTOM_ELEMENTS_SCHEMA]
            });
            fixture = TestBed.createComponent(DroppableTestingComponent);
            fixture.autoDetectChanges(true);
            component = fixture.componentInstance;
            draggableElement = fixture.debugElement.query(By.directive(DraggableDirective));
            droppableElement = fixture.debugElement.query(By.directive(DroppableDirective));
            draggableDirective = draggableElement.injector.get(DraggableDirective) as DraggableDirective;
            droppableDirective = droppableElement.injector.get(DroppableDirective) as DroppableDirective;

        });

        afterEach(() => {
            fixture = TestBed.createComponent(DroppableTestingComponent);
        });

        it("should trigger emission of drop event", async(() => {
            spyOn(component, "onDropString");
            const dataTransfer = new DataTransfer();
            dataTransfer.setData("Text", "This is a string");
            const event = new DragEvent("drop", {dataTransfer});
            droppableElement.nativeElement.dispatchEvent(event);
            fixture.whenStable().then(() => {
                expect(component.onDropString).toHaveBeenCalled();
            });
        }));

        it("should trigger emission of dragover event", () => {
            spyOn(component, "onDragOver");
            emitEvent("dragover", droppableElement.nativeElement);
            expect(component.onDragOver).toHaveBeenCalled();
        });

        it("should trigger emission of dragenter event", () => {
            spyOn(component, "onDragEnter");
            droppableElement.triggerEventHandler("dragenter", null);
            expect(component.onDragEnter).toHaveBeenCalled();
        });

        it("should trigger emission of dragleave event", () => {
            spyOn(component, "onDragLeave");
            droppableElement.triggerEventHandler("dragleave", null);
            expect(component.onDragLeave).toHaveBeenCalled();
        });

        it("should transfer correct data", () => {
            const dataTransfer = new DataTransfer();
            const payload = "This is a string";
            dataTransfer.setData("Text", payload);
            const event = new DragEvent("drop", {dataTransfer});
            droppableElement.nativeElement.dispatchEvent(event);
            fixture.whenStable().then(() => {
                expect(component.transferredString).toEqual(payload);
            });
        });

        it("should set default class on dragenter", () => {
            emitEvent("dragenter", droppableElement.nativeElement);
            const isDefaultClass = droppableElement.nativeElement.classList
                .contains("xui-drag--over");
        });

        it("should set transmitted class on dragenter", async() => {
            droppableDirective.dragOverClass = "my-class";
            emitEvent("dragenter", droppableElement.nativeElement);
            fixture.whenStable()
                .then(() => {
                    const haveClass = droppableElement.nativeElement.classList
                        .contains("my-class");
                    expect(haveClass).toBeTruthy();
                });
        });

        it("should remove drag over class on drop", async() => {
            emitEvent("dragenter", droppableElement.nativeElement);
            droppableDirective.dragOverClass = "my-class";
            emitEvent("dragleave", droppableElement.nativeElement);
            fixture.whenStable()
                .then(() => {
                    const haveClass = droppableElement.nativeElement.classList
                        .contains("my-class");
                    expect(haveClass).toBeFalsy();
                });
        });
    });
});

@Component({
    template: `<div xuiDraggable
                    id="test-draggable"
                    [payload]="draggableString"
                    [adornerDragClass]="'demoDragClass'"
                    (onDragStart)="onDragStart($event)"
                    (onDragEnd)="onDragEnd($event)"></div>
                <div xuiDroppable
                     id="test-droppable"
                     [dragOverClass]="dragOverClass"
                     (onDrop)="onDropString($event)"
                     (onDragOver)="onDragOver($event)"
                     (onDragEnter)="onDragEnter($event)"
                     (onDragLeave)="onDragLeave($event)"></div>`
})
class DroppableTestingComponent {
    public draggableString = "this is a string";
    public transferredString: any;
    public dragOverClass: string;

    public onDragStart (event: DragEvent) { _.noop();}
    public onDragEnd (event: DragEvent) { _.noop();}
    public onDropString (event: IXuiDropEvent) {
        this.transferredString = event.payload;
    }
    public onDragOver (event: DragEvent) { _.noop();}
    public onDragEnter (event: DragEvent) { _.noop();}
    public onDragLeave (event: DragEvent) { _.noop();}
}
