import {
    Directive,
    Input
} from "@angular/core";

import {
    AbstractControl,
    AsyncValidator,
    AsyncValidatorFn,
    NG_ASYNC_VALIDATORS,
    ValidationErrors
} from "@angular/forms";

export interface IAugmentedObjValidatorAsync {
    name: string;
    validator: AsyncValidatorFn;
    message: string;
}
/**
 * <example-url>./../../../demo/index.html#/textbox</example-url>
 * <br>
 */

/**
 * Directive provides with custom async validation.
 * It can be used separately. In most cases you should not do this. 'xuiValidationHandlerAsync' directive is
 * embedded into textbox component.
 *
 */
@Directive({
    selector: "[xuiValidationHandlerAsync]",
    providers: [{
        provide: NG_ASYNC_VALIDATORS,
        useExisting: ValidationHandlerAsyncDirective,
        multi: true
    }]
})
export class ValidationHandlerAsyncDirective implements AsyncValidator {
    @Input() xuiValidationHandlerAsync: IAugmentedObjValidatorAsync;

    validate(control: AbstractControl): any {
        if (!this.xuiValidationHandlerAsync) {
            return Promise.resolve(null);
        }

        const {name, validator, message} = this.xuiValidationHandlerAsync;

        return (validator(control) as  Promise<ValidationErrors | null>)
            .then((result: ValidationErrors | null) => {
                if (result) {
                    result.message = message;

                    return {[name]: result};
                }

                return null;
            });
    }
}
