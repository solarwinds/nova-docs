import {
    Directive,
    Input,
} from "@angular/core";

import {
    AbstractControl,
    NG_VALIDATORS,
    ValidationErrors,
    Validator,
    ValidatorFn
} from "@angular/forms";

export interface IAugmentedObjValidator {
    name: string;
    validator: ValidatorFn;
    message: string;
}

export interface IAugmentedValidationErrors extends ValidationErrors {
    message: string;
}

/**
 * <example-url>./../../../demo/index.html#/textbox</example-url>
 * <br>
 */

/**
 * Directive provides with custom validation.
 * It can be used separately. In most cases you should not do this. 'xuiValidationHandler' directive is
 * embedded into textbox component.
 *
 */
@Directive({
    selector: "[xuiValidationHandler]",
    providers: [{provide: NG_VALIDATORS, useExisting: ValidationHandlerDirective, multi: true}]
})
export class ValidationHandlerDirective implements Validator {
    @Input() xuiValidationHandler: Array<IAugmentedObjValidator>;

    public validate(control: AbstractControl): { [key: string]: any } {
        const initialErrorState: null = null;

        const handleValidator = (errorState: IAugmentedValidationErrors | null,
                                 item: IAugmentedObjValidator): IAugmentedValidationErrors | null => {
            const {name, validator, message} = item;

            const result = validator(control) as IAugmentedValidationErrors;
            if (result) {
                result.message = message;

                errorState = Object.assign(errorState || {} as IAugmentedValidationErrors, {[name]: result});
            }

            return errorState;
        };

        return this.xuiValidationHandler.reduce(handleValidator, initialErrorState);
    }
}
