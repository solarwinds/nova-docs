import {
    Directive,
    ElementRef,
    Input,
    OnDestroy,
    OnInit
} from "@angular/core";
import { NotificationService } from "../../services/notification-service";
import { IHighlightArgs, SwitchState } from "../../services/notification-args";
import { Subscription } from "rxjs/Subscription";

/**
 * <example-url>./../../../demo/index.html#/toast</example-url>
 */

@Directive({
    selector: "[xuiToast]"
})
/**
 * __Name :__
 * Toast Directive
 *
 * __Description :__
 * Is used for highlighting elements
 */
export class ToastDirective implements OnInit, OnDestroy {
    /**
     * sets model for directive to check whether corresponding element should be highlighted or not
     */
    @Input() public xuiToast: any;

    private notificationSubscription: Subscription;
    private get highlightOnClass() { return "highlight-on"; }
    private get highlightFadeOutClass() { return "highlight-fadeout"; }
    private isHighlighted: boolean;
    private status: string;

    constructor(private elRef: ElementRef,
                private notificationService: NotificationService) {}

    ngOnInit() {
        this.notificationSubscription = this.notificationService
            .subscribe("Highlight", this.onHighlight);
    }

    private onHighlight = (args: any): void => {
        if (!this.elRef) {
            return;
        }
        const highlightArgs = <IHighlightArgs>args;

        const currentItem = _.find(highlightArgs.items, (item) =>
            item[highlightArgs.itemIdentificator] === this.xuiToast[highlightArgs.itemIdentificator]);
        if (!_.isNil(currentItem)) {
            if (highlightArgs.highlightState === SwitchState.on) {
                if (this.isHighlighted) {
                    return;
                }
                this.isHighlighted = true;
                this.status = highlightArgs.status;
                this.elRef.nativeElement.classList.add(this.highlightOnClass);
                this.elRef.nativeElement.classList.add(this.status);
            } else if (this.isHighlighted) {
                this.elRef.nativeElement.classList.remove(this.highlightOnClass);
                this.elRef.nativeElement.classList.remove(this.status);
                this.elRef.nativeElement.classList.add(this.highlightFadeOutClass);
                this.isHighlighted = false;
            }
        }
    };

    ngOnDestroy() {
        this.notificationSubscription.unsubscribe();
    }
}
