import { ComponentFixture, TestBed } from "@angular/core/testing";
import { ToastDirective } from "./toast.directive";
import { INotificationService, default as NotificationService } from "../../services/notification-service";
import { Component } from "@angular/core";
import { BrowserDynamicTestingModule, platformBrowserDynamicTesting } from "@angular/platform-browser-dynamic/testing";
import { SwitchState} from "../../services/notification-args";
import { ToastService } from "../../services/toast.service";

describe("directives >", () => {
    describe("toast >", () => {
        const successStatus = "success";
        const highlightOnClass = "highlight-on";
        const highlightFadeOutClass = "highlight-fadeout";
        let subject: ToastDirective;
        let fixture: ComponentFixture<ToastTestingComponent>;
        let component: ToastTestingComponent;
        let element: HTMLElement;
        let notificationService: INotificationService;

        beforeEach(() => {
            TestBed
                .initTestEnvironment(
                    BrowserDynamicTestingModule,
                    platformBrowserDynamicTesting()
                )
                .configureTestingModule({
                    declarations: [ToastTestingComponent, ToastDirective],
                    providers: [ToastService, NotificationService]
                });
            fixture = TestBed.createComponent(ToastTestingComponent);
            fixture.autoDetectChanges(true);
            component = fixture.componentInstance;
            notificationService = TestBed.get(NotificationService);
            element = fixture.nativeElement.firstChild;
        });
        it("should highlight element", () => {
            const options = {
                highlightState: SwitchState.on,
                items: [{ id: "testId" }],
                itemIdentificator: "id",
                status: "success"
            };
            notificationService.post("Highlight", options);

            const spy = jasmine.createSpyObj("ToastDirective", ["onHighlight"]);
            expect(_.find(element.classList, (className: string) => className === successStatus))
                .not.toBeNull();
            expect(_.find(element.classList, (className: string) => className === highlightOnClass))
                .not.toBeNull();
        });
    });
});

@Component({
    template: `<div [xuiToast]="model"></div>`
})
class ToastTestingComponent {
    public model = {
        id: "testId"
    };
}
