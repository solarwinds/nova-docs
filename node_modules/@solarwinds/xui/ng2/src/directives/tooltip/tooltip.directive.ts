import {
    ComponentFactory,
    ComponentFactoryResolver,
    ComponentRef,
    Directive,
    HostListener,
    Input,
    OnInit,
    ViewContainerRef
} from "@angular/core";
import { TooltipContent } from "./tooltip-content.component";
import { tooltipPlacementType, tooltipTriggerType } from "../../constants/tooltip.constants";
/**
 * XUI Tooltip directive shows tooltip.
 *
 * __Usage:__
 *
 * General case for usage xuiTooltip:
 *
 *          `<span [xuiTooltip]="content">
 *
 *              Hello world!
 *
 *          </span>`
 *
 * Using xuiTooltip options:
 *
 *          `<span [xuiTooltip]="content"
 *                 [tooltipPlacement]="'bottom'"
 *                 [tooltipTrigger]="'focus'">
 *
 *              Hello world!
 *
 *          </span>`
 *
 * Using xuiTooltip's tooltipEnable option for your own conditions to show tooltip:
 *
 *          `<span [xuiTooltip]="content"
 *                 [tooltipEnable]="false">
 *
 *              Hello world!
 *
 *          </span>`
 */
/**
 * <example-url>./../../../demo/index.html#/tooltip</example-url>
 */
@Directive({
    selector: "[xuiTooltip]"
})
export class TooltipDirective implements OnInit {
    /**
     * Text for tooltip
     */
    @Input("xuiTooltip") public content: string;

    /**
     * Tooltip placement
     */
    @Input("tooltipPlacement") public placement: tooltipPlacementType = "top";

    /**
     * Custom trigger for tooltip;
     * Provided list:
     * -hover;
     * -focus;
     */
    @Input("tooltipTrigger") public trigger: tooltipTriggerType = "hover";

    /**
     * Whether to enable or disable the configured tooltip-trigger
     */
    @Input("tooltipEnable") public enable = true;

    private tooltip: ComponentRef<TooltipContent>;
    private visible: boolean;

    constructor(private viewContainerRef: ViewContainerRef,
                private resolver: ComponentFactoryResolver) {
    }

    public ngOnInit(): void {
        if (!_.isString(this.content) && this.content !== null) {
            throw new Error("Property xuiTooltip of directive xuiTooltip required and should be a string.");
        }
    }

    @HostListener("focusin")
    tooltipOnFocusin(): void {
        const factory = this.resolver.resolveComponentFactory(TooltipContent);
        if ( this.trigger === "focus") {
            this.tooltipSwitch(factory);
        }
    }

    @HostListener("mouseenter")
    tooltipOnMouseenter(): void {
        const factory = this.resolver.resolveComponentFactory(TooltipContent);
        if ( this.trigger === "hover") {
            this.tooltipSwitch(factory);
        }
    }

    @HostListener("focusout")
    tooltipOnFocusout(): void {
        if ( this.trigger === "focus") {
            this.tooltipSwitch();
        }
    }

    @HostListener("mouseleave")
    tooltipOnMouseleave(): void {
        if ( this.trigger === "hover") {
            this.tooltipSwitch();
        }
    }

    /**
     * Turn on/off tooltip
     */
    private tooltipSwitch(factory?: ComponentFactory<TooltipContent>): void {
        if (!this.enable) {
            return;
        }

        if (!this.visible) {
            this.visible = true;
            this.tooltip = this.viewContainerRef.createComponent(factory);
            this.tooltip.instance.hostElement = this.viewContainerRef.element.nativeElement;
            this.tooltip.instance.content = this.content;
            this.tooltip.instance.placement = this.placement;
        } else {
            this.visible = false;
            this.tooltip.destroy();
        }
    }
}
