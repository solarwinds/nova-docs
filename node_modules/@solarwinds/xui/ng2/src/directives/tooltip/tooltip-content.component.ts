import {
    Component,
    Input,
    AfterViewInit,
    ElementRef,
    ChangeDetectorRef
} from "@angular/core";
import { tooltipPositionService } from "./tooltip-position";
import { tooltipPlacementType } from "../../constants/tooltip.constants";

/**
 * Tooltip's dumb component with template
 */
@Component({
    selector: "tooltip-content",
    template: `
        <div class="xui-tooltip {{ placement }}"
             [style.top]="top + 'px'"
             [style.left]="left + 'px'"
             [class.active]="isActive">
            <div class="xui-tooltip__arrow"></div>
            <div class="xui-tooltip__inner">
                {{ content }}
            </div>
        </div>
    `
})
export class TooltipContent implements AfterViewInit {

    /**
     * Target element transferred from tooltip directive
     */
    @Input() hostElement: HTMLElement;

    /**
     * Content transferred from tooltip directive for populating view
     */
    @Input() content: string;

    /**
     * Placement transferred from tooltip directive for calculating tooltip's placement
     */
    @Input() placement: tooltipPlacementType;

    public top = -100000;
    public left = -100000;
    public isActive = false;

    constructor(private element: ElementRef,
                private changeDetectionRef: ChangeDetectorRef) {
    }

    public ngAfterViewInit(): void {
        this.showTooltip();
        this.changeDetectionRef.detectChanges();
    }

    /**
     * Showing tooltip
     */
    public showTooltip(): void {
        if (!this.hostElement) {
            return;
        }

        const positionCoordinates = tooltipPositionService
            .positionElements(this.hostElement, this.element.nativeElement.children[0], this.placement);
        this.top = positionCoordinates.top;
        this.left = positionCoordinates.left;
        this.isActive = true;
    }
}
