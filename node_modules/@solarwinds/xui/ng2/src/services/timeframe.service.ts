import { Injectable } from "@angular/core";
import * as moment from "moment";

export interface ITimeframePreset {
    name: string;
    startDatetimePattern: any;
    endDatetimePattern: any;
}

export interface ITimeframe {
    startDatetime: Date;
    endDatetime: Date;
    selectedPresetId: string;
    title?: string;
}
/**
 * __Name : __
 * Timeframe service
 *
 * __Usage :__
 * Used to get time frames via time patterns or presets
 */
@Injectable()
export class TimeframeService {

    defaultPresets:{[key: string]: ITimeframePreset} = {
        "lastHour": {
            name: "Last hour", // i18n "xui_timeframePicker_last_hour"
            startDatetimePattern: {hours: -1},
            endDatetimePattern: {}
        },
        "last12Hours": {
            name: "Last 12 hours", // i18n "xui_timeframePicker_last_12_hours"
            startDatetimePattern: {hours: -12},
            endDatetimePattern: {}
        },
        "last24Hours": {
            name: "Last 24 hours", // i18n "xui_timeframePicker_last_24_hours"
            startDatetimePattern: {hours: -24},
            endDatetimePattern: {}
        },
        "last5Days": {
            name: "Last 5 days", // i18n "xui_timeframePicker_last_5_days"
            startDatetimePattern: {days: -5},
            endDatetimePattern: {}
        },
        "last7Days": {
            name: "Last 7 days", // i18n "xui_timeframePicker_last_7_days"
            startDatetimePattern: {days: -7},
            endDatetimePattern: {}
        },
        "last30Days": {
            name: "Last 30 days", // i18n "xui_timeframePicker_last_30_days"
            startDatetimePattern: {days: -30},
            endDatetimePattern: {}
        }
    };

    currentPresets:{[key: string]: ITimeframePreset} = _.extend({}, this.defaultPresets);

    /**
     *
     * __Description:__ Get timeframe from patterns of start and end points in time
     * @param startDatetimePattern
     * @param endDatetimePattern
     * @param baseDatetime
     * @return {{startDatetime: Date, endDatetime: Date, selectedPresetId: null}}
     */
    public getTimeframe (startDatetimePattern: any,
                           endDatetimePattern: any, baseDatetime?: string): ITimeframe {
        // check input parameters
        if (_.isUndefined(startDatetimePattern)) {
            throw new Error("Parameter 'startDatetimePattern' is undefined");
        }

        if (_.isUndefined(endDatetimePattern)) {
            throw new Error("Parameter 'endDateTimePattern' is undefined");
        }

        const startDatetime = moment(baseDatetime).add(startDatetimePattern).toDate();
        const endDatetime = moment(baseDatetime).add(endDatetimePattern).toDate();

        return {
            startDatetime: startDatetime,
            endDatetime: endDatetime,
            selectedPresetId: null
        };
    };

    /**
     * __Description:__ Get timeframe by preset id, using the list of pre-defined presets
     * @param id {string}
     * @param baseDatetime {string}
     * @return {{startDatetime: Date, endDatetime: Date, selectedPresetId: string}}
     */
    public getTimeframeByPresetId (id: string, baseDatetime?: string): ITimeframe {
        // check input parameters
        if (_.isUndefined(id)) {
            throw new Error("Parameter 'id' is undefined");
        }

        const startDatetime = moment(baseDatetime).add(this.currentPresets[id].startDatetimePattern).toDate();
        const endDatetime = moment(baseDatetime).add(this.currentPresets[id].endDatetimePattern).toDate();

        return {
            startDatetime: startDatetime,
            endDatetime: endDatetime,
            selectedPresetId: id
        };
    };

    /**
     * __Description:__ Get the list of all default presets
     * @return {{}}
     */
    public getDefaultPresets ():{[key: string]: ITimeframePreset} {
        return this.defaultPresets;
    };

    /**
     * __Description:__ Add custom presets to existing list of default presets
     * @param presets
     */
    public extendCurrentPresets (presets:{[key: string]: ITimeframePreset}): void {
        _.extend(this.currentPresets, presets);
    };

    /**
     * __Description:__ Compare two timeframes, return false if they are not equal
     * @param tf1 {ITimeframe}
     * @param tf2 {ITimeframe}
     * @param units {string}
     * @return {boolean}
     */
    public isDifferent(tf1: ITimeframe, tf2: ITimeframe, units: string = "minutes"): boolean {
        return !tf1 || !tf2 ||
            Math.abs(moment(tf1.startDatetime).diff(
                moment(tf2.startDatetime), units)) > 0 ||
            Math.abs(moment(tf1.endDatetime).diff(
                moment(tf2.endDatetime), units)) > 0;
    }

}
