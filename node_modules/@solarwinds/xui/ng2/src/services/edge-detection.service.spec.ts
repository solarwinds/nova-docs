import { EdgeDetectionService } from "./edge-detection.service";
import { Logger } from "angular2-logger/app/core/logger";

describe("services >", () => {
    describe("edge-detection-service >", () => {
        let edgeDetectionService: EdgeDetectionService;
        const logger = new Logger();

        beforeEach(() => {
            edgeDetectionService = new EdgeDetectionService(document, logger);
        });

        describe("canBe", () => {
            it("logs errors if arguments were not passed", () => {
                spyOn(logger, "error");
                (edgeDetectionService as any).canBe();
                expect(logger.error)
                    .toHaveBeenCalledWith("basePoint: Element and placed: Element arguments are required!");
            });

            it("uses private 'offset' method to calculate element offset", () => {
                const basePoint = document.createElement("div");
                const placed = document.createElement("div");

                spyOn(edgeDetectionService, "offset").and.callThrough();
                edgeDetectionService.canBe(basePoint, placed);
                expect(edgeDetectionService["offset"]).toHaveBeenCalled();
            });

            it("uses private 'outer' method to calculate either element outerWith or outerHeight", () => {
                const basePoint = document.createElement("div");
                const placed = document.createElement("div");

                spyOn(edgeDetectionService, "outer");
                edgeDetectionService.canBe(basePoint, placed);
                expect(edgeDetectionService["outer"]).toHaveBeenCalled();
            });
        });

        describe("getEdgeDefinerMeasurements (private)", () => {
            it("returns window measurements if no edgeDefiner element passed", () => {
                const container = (edgeDetectionService as any).getEdgeDefinerMeasurements(null);

                expect(container.position.top).toBe(0);
                expect(container.position.left).toBe(0);
            });
        });
    });
});
