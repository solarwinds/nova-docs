import { Logger } from "angular2-logger/app/core/logger";
import { DatePipe } from "@angular/common";

import { SearchService } from "./search.service";

describe("services >", () => {
    describe("search >", () => {
        let bieberDate: Date = new Date("1994/03/01"); //The birth date of Justin Bieber
        let betterWorld: Date = new Date("1994/02/01");
        let punishedWorld: Date = new Date("1994/03/02");
        let items: any[] = [
            {
                stringValue: "abc789",
                extraStringField: "xxx",
                numValue: 123,
                dateValue: betterWorld
            },
            {
                stringValue: "abcdef",
                numValue: 123456,
                dateValue: bieberDate
            },
            {
                stringValue: "abcdefghi",
                numValue: 123456789,
                dateValue: punishedWorld
            }
        ];
        let subject: SearchService;

        beforeEach(() => {
            subject = new SearchService(new Logger(), new DatePipe("en"));
        });

        describe("search() ", () => {
            it("should return the whole array if no properties specified", () => {
                let result: any[] = subject.search(items, [], "abc");
                expect(result.length).toBe(3);
            });
            it("should return the whole array if null or empty searchValue specified", () => {
                let result: any[] = subject.search(items, ["stringValue"], "");
                expect(result.length).toBe(3);
            });
            it("should not throw error if property does not exist on the items and return empty result", () => {
                let result: any[] = subject.search(items, ["nonexisting"], "abc");
                expect(result.length).toBe(0);
            });
            it("should work also with only 1 property of 1 item contains the value", () => {
                let result: any[] = subject.search(items, ["extraStringField"], "xxx");
                expect(result.length).toBe(1);
            });
            it("should work also with only 1 property of 1 item contains the value and fields not specified", () => {
                let result: any[] = subject.search(items, [], "xxx");
                expect(result.length).toBe(1);
            });
            it("should return expected items searched by a string type prop", () => {
                let resultOf1: any[] = subject.search(items, ["stringValue"], "ghi");
                let resultOf2: any[] = subject.search(items, ["stringValue"], "def");
                let resultOf3: any[] = subject.search(items, ["stringValue"], "abc");

                expect(resultOf1.length).toBe(1);
                expect(resultOf2.length).toBe(2);
                expect(resultOf3.length).toBe(3);
            });
            it("should return expected items searched by a number type prop", () => {
                let resultOf1: any[] = subject.search(items, ["numValue"], 789);
                let resultOf2: any[] = subject.search(items, ["numValue"], 456);
                let resultOf3: any[] = subject.search(items, ["numValue"], 123);

                expect(resultOf1.length).toBe(1);
                expect(resultOf2.length).toBe(2);
                expect(resultOf3.length).toBe(3);
            });
            it("should return expected items searched by a date type prop", () => {
                let resultOf1: any[] = subject.search(items, ["dateValue"], bieberDate);
                let resultOf2: any[] = subject.search(items, ["dateValue"], "mar");
                let resultOf3: any[] = subject.search(items, ["dateValue"], 1994);

                expect(resultOf1.length).toBe(1);
                expect(resultOf2.length).toBe(2);
                expect(resultOf3.length).toBe(3);
            });
            it("should return expected items searched by combined props", () => {
                let resultOf0: any[] = subject.search(items, ["stringValue", "dateValue"], 123);
                let resultOf1: any[] = subject.search(items, ["stringValue", "numValue"], "ghi");
                let resultOf2: any[] = subject.search(items, ["stringValue", "numValue"], 789);
                let resultOf3: any[] = subject.search(items, ["dateValue", "numValue"], 1994);

                expect(resultOf0.length).toBe(0);
                expect(resultOf1.length).toBe(1);
                expect(resultOf2.length).toBe(2);
                expect(resultOf3.length).toBe(3);
            });
            it("should return expected items searched by a date type prop with custom set date format", () => {
                let resultOf0: any[] = subject.search(items, ["dateValue"], "march");
                let resultOf1: any[] = subject.search(items, ["dateValue"], bieberDate, "longDate");
                let resultOf2: any[] = subject.search(items, ["dateValue"], "march", "longDate");
                let resultOf3: any[] = subject.search(items, ["dateValue"], 1994, "longDate");

                expect(resultOf0.length).toBe(0);
                expect(resultOf1.length).toBe(1);
                expect(resultOf2.length).toBe(2);
                expect(resultOf3.length).toBe(3);
            });
        });
    });
});
