import { Injectable } from "@angular/core";

export interface IEventPropagationService {
    targetShouldPropagate(event: Event): boolean;
}

/**
 * <example-url>./../../../demo/index.html#/event-propagation-service</example-url>
 */

/**
 *  Service that provides event propagation rules for XUI components.
 *
 * __Name :__
 * Event Propagation service
 *
 */

@Injectable()
export class EventPropagationService implements IEventPropagationService {

    private preventedTargetSelectors: string[] = [
        "a",
        "xui-checkbox-mark",
        "xui-checkbox-glyph",
        "xui-checkbox-input",
        "input",
        "button"
    ];

    // xui-button uses transclusion and so we need to check the parent too
    private preventedTargetParentSelectors: string[] = [
        "button",
        "xui-button-content"
    ];

    private should: boolean;

    /**
     * __Description:__
     * Returns a boolean which indicates if event should propagate based on predefined list of selectors.
     * @param  {Event} event Event to handle propagation.
     * @returns {Boolean} Value indicating whether that event should be propagated.
     */
    public targetShouldPropagate(event: Event): boolean {
        const element = <Element>(event.target);
        const parentElement: Element = element.parentElement;
        this.should = true;

        this.compareElementSelector(this.preventedTargetSelectors, element);
        this.compareElementSelector(this.preventedTargetParentSelectors, parentElement);

        return this.should;
    };

    /**
     * __Description:__
     * Helper compare function
     * @param  {String[]} selectors Selectors list to compare with.
     * @param {Element} element Event's target element or its parent.
     * @returns {Boolean} Value indicating whether that event should be propagated.
     */
    private compareElementSelector(selectors: string[], element: Element) {
        selectors.forEach((selector: string) => {
            if (element.tagName.toLowerCase() === selector ||
                _.includes(element.classList, selector)) {
                return this.should = false;
            }
        });

    }
}
