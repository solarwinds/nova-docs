import {
    ApplicationRef,
    ComponentFactoryResolver,
    ComponentRef,
    EmbeddedViewRef,
    Injectable
} from "@angular/core";
import {ToastInjector} from "../components/toast/toast-injector";

interface IToastContainers {
    [positionClass: string]: HTMLElement;
}

@Injectable()
export class ToastContainerService {
    private containers: IToastContainers = {};
    private containerElement: HTMLElement;
    constructor(private componentFactoryResolver: ComponentFactoryResolver,
                private appRef: ApplicationRef) {}

    /**
     * Creates container element for position, if container already exists - returns it
     * @return the container element
     */
    public getContainerElement(positionClass: string = "toast-top-right"): HTMLElement {
        if (_.isNil(this.containers[positionClass])) {
            this.createContainer(positionClass);
        }
        return this.containerElement = this.containers[positionClass];
    }

    /**
     * Dynamically compiles toast component and attaches it to the toast container
     * @return reference to attached toast
     */
    public attachToast(component: any, injector: ToastInjector, newestOnTop: boolean): any {
        const componentFactory = this.componentFactoryResolver.resolveComponentFactory(component);
        const componentRef = componentFactory.create(injector);
        this.appRef.attachView(componentRef.hostView);
        if (newestOnTop) {
            this.containerElement.insertBefore(this.getComponentRootNode(componentRef),
                this.containerElement.firstChild);
        } else {
            this.containerElement.appendChild(this.getComponentRootNode(componentRef));
        }
        return componentRef;
    }

    /**
     * Destroyes component using reference to it's factory
     * @return reference to attached toast
     */
    public detachToast(component: any): void {
        component.destroy();
    }

    private getComponentRootNode(componentRef: ComponentRef<any>): HTMLElement {
        return (componentRef.hostView as EmbeddedViewRef<any>).rootNodes[0] as HTMLElement;
    }

    private createContainer(positionClass: string): void {
        const container = document.createElement("div");
        container.classList.add("toast-container");
        container.classList.add(positionClass);
        document.body.appendChild(container);
        this.containers[positionClass] = container;
    }
}
