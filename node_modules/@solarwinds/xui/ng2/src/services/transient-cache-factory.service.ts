import { Injectable } from "@angular/core";
import { TransientCacheService, ITransientCache } from "./transient-cache.service";
import { SwUtilService } from "./sw-util.service";

export interface IMap<T> {
    [key:string]:T;
}

@Injectable()
export class TransientCacheFactory {
    private cacheMap:IMap<ITransientCache> = {};

    constructor(private swUtilService: SwUtilService) {}

    /** @ngdoc method
     *  @name create
     *  @methodOf xui.services:TransientCacheFactory
     *  @description returns a newly created ITransientCache object for use.
     *  @param {string} cacheId unique identifier of the cache
     *  @returns {ITransientCache} newly created ITransientCache object.
     *
     * {@link https://github.com/solarwinds/Xui/blob/develop/typings/solarwinds-xui/xui.d.ts ITransientCache} interface
     *
     *      put(key:string, value:any, lifetime:number) => IPromise<void> -
     *          Puts a new key-value pair into the cache with the lifetime specified and returns it.
     *      get(key:string) => any - Returns cached value for key or undefined for cache miss.
     *      remove(key:string) - Removes pair from the cache identified by the key.
     *      removeAll() - Removes all cached pairs.
     *      destroy() - Removes references to this cache from xuiTransientCacheFactory.
     **/
    public create = (cacheId: string):ITransientCache => {

        if (this.cacheMap[cacheId] == null) {
            this.cacheMap[cacheId] = new TransientCacheService(this.swUtilService);
            return this.get(cacheId);
        } else {
            throw new Error("That cacheId already exists");
        }
    };

    /** @ngdoc method
     *  @name get
     *  @methodOf xui.services:TransientCacheFactory
     *  @description Get access to an ITransientCache object by the cacheId used when it was created.
     *  @param {string} cacheId Unique identifier of the cache.
     *  @returns {ITransientCache} cache Identified by cacheId. See
     *  {@link https://github.com/solarwinds/Xui/blob/develop/typings/solarwinds-xui/xui.d.ts ITransientCache}.
     **/
    public get = (cacheId: string): ITransientCache => {
        return this.cacheMap[cacheId];
    };

    /** @ngdoc method
     *  @name count
     *  @methodOf xui.services:TransientCacheFactory
     *  @description Return the count of ITransientCache objects.
     *  @param {string} cacheId Unique identifier of the cache.
     *  @returns {number} Count of ITransientCache objects.
     **/
    public count = (): number => {
        return _.size(this.cacheMap);
    };
}
