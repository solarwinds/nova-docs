import { Injectable } from "@angular/core";
import { Logger } from "angular2-logger/app/core/logger";
import { DatePipe } from "@angular/common";
export interface ISearchService {
    search(items: any[],
           properties: string[],
           searchValue: any,
           dateFormat?: string): any[];
}

/**
 * <example-url>./../../../demo/index.html#/search-service</example-url>
 */

/**
 *  Service that provides searching algorithms.
 *
 * __Name :__
 * Search service
 *
 */

@Injectable()
export class SearchService implements ISearchService {
    /**
     *  __Description :__
     * Search the value on the items within the given properties.
     *
     * __Parameters :__
     *
     * {any[]} items Items to search within.
     *
     *  {string[]} properties Properties where the search is applied. If no property specified, search is
     *  applied on all fields.
     *
     *  {string|number|date} searchValue The searched value that is used as a string or string fragment. Empty
     *  string returns the whole array.
     *
     *  {string} [dateFormat="mediumDate"] The Angular date format that is used for searching on Date type
     *  properties.
     *
     *  return {any[]} Items resulted after the search.
     *
     */
    constructor(private logger: Logger,
                private datePipe: DatePipe) {}

    public search = (items: any[], properties: string[], searchValue: any, dateFormat?: string): any[] => {
        // TODO: in case of interest, create options as object, put dateFormat in, put caseSensitive in
        if (!_.isArray(items)) {
            this.logger.error("xuiSearchService needs items parameter as an Array");
        }
        if (!_.isArray(properties)) {
            this.logger.error("xuiSearchService needs properties parameter as an Array");
        }
        if (_.isEmpty(properties)) {
            properties = this.getSearchableColumns(items);
            this.logger.warn("No properties specified to search on, so all of the fields will be used");
        }
        if (_.isUndefined(searchValue)) {
            this.logger.warn("No searchValue specified to search by, the whole list will be the result");
            return items;
        }

        return items.filter((item) => {
            if (_.isString(item) || _.isNumber(item)) {
                return item.toString().toLowerCase().indexOf(searchValue.toString().toLowerCase()) !== -1;
            }
            for (let prop of properties) {
                let value = _.isObject(item) ? item[prop] : item;

                if (_.isDate(value)) {
                    value = this.datePipe.transform(value, dateFormat);
                }
                if (_.isDate(searchValue)) {
                    searchValue = this.datePipe.transform(searchValue, dateFormat);
                }
                if (value && value.toString().toLowerCase().indexOf(searchValue.toString().toLowerCase()) !== -1) {
                    return true;
                }
            }
        });
    };

    private getSearchableColumns = (items: any[]): string[] => {
        let props: {[key: string]: boolean} = {};
        for (let item of items) {
            _.keys(item).map((key: any) => {
                if (!_.startsWith(key, "$")) {
                    props[key] = true;
                }
            });
        }
        return _.keys(props);
    };
}
