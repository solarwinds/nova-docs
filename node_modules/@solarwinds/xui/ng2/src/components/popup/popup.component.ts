import {
    Component,
    Input,
    HostBinding,
    ContentChild,
    AfterContentInit,
    OnDestroy,
    ElementRef
} from "@angular/core";

import { PopupToggleDirective } from "./popup-toggle.directive";
import { EdgeDetectionService } from "../../services/edge-detection.service";

/**
 * __Name :__
 * XUI Pop-up component.
 *
 * __Usage :__
 * Component represents basic functionality for dropdowns, popups, etc.
 * May be used directly. Use "popupToggle" attribute inside any layer of content
 * to define element that will toggle popover. Use "popupAreaContent" attribute inside
 * 1st layer of content to define "popup area". DO NOT USE "opened" WITH "popupToggle".
 * IT IS NEEDED TO CHOOSE ONE.
 */
@Component({
    selector: "xui-popup",
    host: {
        ["class"]: "xui-popup",
        "(document:click)": "closePopup($event)"
    },
    template: `
        <ng-content></ng-content>
        <div class="xui-popup__area" [class.xui-popup__area--top]="directionTop">
            <ng-content select="[popupAreaContent]"></ng-content>
        </div>
    `
})
export class PopupComponent implements AfterContentInit, OnDestroy {
    /**
     * Opens/closes popup area
     */
    @Input()
    @HostBinding("class.xui-popup--opened")
    public opened = false;
    /**
     * Defines in which direction popup area will be opened.
     */
    @Input()
    public directionTop = false;
    /**
     * Parent css element class used determining of popup direction.
     */
    @Input()
    public baseElementSelector: string;

    @ContentChild(PopupToggleDirective)
    public popupToggle: PopupToggleDirective;

    constructor(private elementRef: ElementRef, private edgeDetector: EdgeDetectionService) { }

    public ngAfterContentInit(): void {
        this.setPopupPosition();

        if (!this.popupToggle) {
            return;
        }

        this.popupToggle.toggle.subscribe(() => {
            this.toggleOpened();
        });
    }

    public ngOnDestroy(): void {
        this.popupToggle.toggle.unsubscribe();
    }

    public toggleOpened(): void {
        this.opened = !this.opened;
    }

    public closePopup(event: MouseEvent): void {
        let contains = this.popupToggle ? (this.popupToggle.host.nativeElement as HTMLElement)
            .contains(event.target as HTMLElement) : false;

        if (!contains) {
            this.opened = false;
        }
    }

    private setPopupPosition() {
        if (!this.baseElementSelector) {
            return;
        }

        const parentEl = document.querySelector(this.baseElementSelector);
        if (!parentEl) {
            return;
        }

        const canBe = this.edgeDetector.canBe(<HTMLElement>parentEl, this.elementRef.nativeElement);
        this.directionTop = !canBe.placed.bottom;
    }
}
