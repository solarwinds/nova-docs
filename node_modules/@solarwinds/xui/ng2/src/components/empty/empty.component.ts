import {
    Component,
    ChangeDetectionStrategy,
    OnInit,
    Input,
    Inject
} from "@angular/core";
import { DomSanitizer, SafeHtml } from "@angular/platform-browser";
import { Logger } from "angular2-logger/app/core/logger";

import { IEmptyData, IEmptyPreset, EmptyPresetToken } from "../../constants";

/**
 * <example-url>./../../../demo/index.html#/empty</example-url>
 */

/**
 *
 * __Name :__
 * XUI Empty component.
 *
 * __Usage :__
 *  The ultimate way to handle empty states throughout xui-based projects
 */

@Component({
    selector: "xui-empty",
    template: require<string>("./empty.component.html"),
    changeDetection: ChangeDetectionStrategy.OnPush
})
export class EmptyComponent implements OnInit {
    /**
     *  __Description :__
     * Empty data parameters object.
     *
     * __Parameters :__
     *
     * preset - One of basic empty presets: "dataNotAvailable",
     * "serverUnreachable", "dataNotApplicable", "emptyDataset".
     * In case it is specified, there is no need to indicate other parameters.
     *
     *  compact-mode - Switch to compact mode without title - type 'B' on mockups
     *  https://projects.invisionapp.com/share/9NAGTYRYD#/screens/228007966_Placeholder_Compositions)
     *
     *  image The image to be rendered(xui-image). Default is no-data-to-show
     *  Able to handle custom paths and default graphics library.
     *
     *  title Empty heading text.
     *
     *  description Empty description text.
     *
     *  template - Parameter specifying common URL for custom templates.
     * If none is provided the default template is used
     */
    @Input() public emptyData: IEmptyData;

    /**
     * __Description :__ Default empty data to be used if nothing else provided
     * */
    private defaultPreset: IEmptyData = {
        compactMode: false,
        image: "no-data-to-show",
        title: "",
        description: "No data to show",
        template: null
    };

    /**
     * __Description :__ Active empty preset to be used if preset is specified in input params
     * */
    private activeEmptyPreset: IEmptyData;

    constructor(@Inject(EmptyPresetToken) private emptyPresets: IEmptyPreset,
                private logger: Logger,
                private domSanitizer: DomSanitizer) {}

    public ngOnInit(): void {
        if (_.isUndefined(this.emptyData)) {
            this.emptyData = {};
        }

        if (!this.isValidEmptyDataInput()) {
            this.logger.error(
                `Invalid type of 'emptyData' parameter,
                should be of type IEmptyData or empty object for default empty state`
            );
            return;
        }

        const { preset } = this.emptyData;

        if (_.isString(preset) && !_.isEmpty(preset)) {
            if (!_.has(this.emptyPresets, preset)) {
                this.logger.error(
                    `Empty preset "${preset}" doesn't exist!
                Use one of the following: ${_.join(_.keys(this.emptyPresets), ", ")}`
                );
            } else {
                this.activeEmptyPreset = _.get<IEmptyPreset>(this.emptyPresets, preset);
            }
        } else {
            this.activeEmptyPreset = this.defaultPreset;
        }

        if (this.isTemplateProvided()) {
            this.emptyData = _.assign(this.emptyData,
                { template: this.domSanitizer.bypassSecurityTrustHtml(this.emptyData.template) as SafeHtml }
            );
        }
    }

    /**
     * __Description :__ Returns true if compact-mode is set to true, otherwise returns default value
     *
     * __Returns :__ boolean
     * */
    public isCompactMode = (): boolean => {
        const { compactMode } = this.emptyData;

        return _.isBoolean(compactMode) ? compactMode : this.activeEmptyPreset.compactMode;
    };

    /**
     * __Description :__ Returns true if the templateUrl was passed
     *
     * __Returns :__ boolean
     */
    public isTemplateProvided = (): boolean => {
        return !!this.emptyData.template;
    };

    /**
     * __Parameters :__
     * property - For example (image, title, description, template)
     *
     * __Description :__ returns given value, value from preset or default value of passed property
     *
     * __Returns :__ string
     */
    public getEmpty = (property: string): string => {
        if (!_.has(this.activeEmptyPreset, property)) {
            this.logger.error(
                `"${property}" doesn't exist on the controller's declaration!
                Use one of the following: ${_.join(_.keys(this.activeEmptyPreset), ", ")}`
            );
            return;
        }

        const presetValue = _.get<IEmptyData, string>(this.activeEmptyPreset, property);

        return _.get<IEmptyData, string>(this.emptyData, property, presetValue);
    };

    /**
     * __Description :__ returns true if the input empty data object is empty
     * (the default template will be used instead) and when
     * the object is of type 'IEmptyData', otherwise returns false
     *
     * __Returns :__ boolean
     * */
    private isValidEmptyDataInput = (): boolean => {
        const keysList = _.concat(["preset"], _.keys(this.defaultPreset));
        const actualKeysList = _.keys(this.emptyData);

        if (_.isEmpty(actualKeysList)) {
            return true;
        }

        return _.every<string>(actualKeysList, (key: string) => _.includes<string>(keysList, key));
    }
}
