import { EmptyComponent } from "./empty.component";
import { DomSanitizer, SafeHtml } from "@angular/platform-browser";
import { Logger } from "angular2-logger/app/core/logger";
import { IEmptyData } from "../../constants/empty.constants";

describe("components >", () => {
    describe("empty >", () => {
        let subject: EmptyComponent;
        let defaultEmpty: IEmptyData;
        const domSanitizer = {
            bypassSecurityTrustHtml: (code: string) => code as SafeHtml
        } as DomSanitizer;

        const testPreset = {
            test: {
                compactMode: true,
                description: "test title",
                image: "test image"
            } as IEmptyData
        };

        beforeEach(() => {
            subject = new EmptyComponent(testPreset, new Logger(), domSanitizer);
            subject.ngOnInit();
            defaultEmpty = <IEmptyData>(<any>subject).defaultPreset;  // private member
        });

        describe("isTemplateProvided", () => {
            it("returns false if no 'template' value provided'", () => {
                expect(subject.isTemplateProvided()).toBeFalsy();
            });

            it("returns true if string 'template' value was passed", () => {
                const emptyData = {
                    template: "empty-template-url"
                };
                subject.emptyData = emptyData;

                expect(subject.isTemplateProvided()).toBeTruthy();
            });
        });

        describe("isCompactMode", () => {
            it("returns false if false 'compactMode' value provided'", () => {
                expect(subject.isCompactMode()).toBeFalsy();
            });

            it("returns false if passed 'compactMode' is not boolean", () => {
                const emptyData = {
                    compactMode: "true"
                };
                subject.emptyData = emptyData as any;

                expect(subject.isCompactMode()).toBeFalsy();
            });

            it("returns true if compactMode true value was passed", () => {
                const emptyData = {
                    compactMode: true
                };
                subject.emptyData = emptyData;

                expect(subject.isCompactMode()).toBeTruthy();
            });
        });

        describe("getEmpty", () => {
            it ("returns default empty values for 'title', 'description', 'image' if nothing passed", () => {
                expect(subject.getEmpty("title")).toEqual(defaultEmpty.title);
                expect(subject.getEmpty("description")).toEqual(defaultEmpty.description);
                expect(subject.getEmpty("image")).toEqual(defaultEmpty.image);
            });

            it ("returns passed to the controller 'title', 'description', 'image' values", () => {
                const mockedTitle = "Custom title";
                const mockedDescription = "Custom description";
                const mockedImage = "Custom image";
                const emptyData = {
                    title: mockedTitle,
                    description: mockedDescription,
                    image: mockedImage
                };
                subject.emptyData = emptyData;

                expect(subject.getEmpty("title")).toEqual(mockedTitle);
                expect(subject.getEmpty("description")).toEqual(mockedDescription);
                expect(subject.getEmpty("image")).toEqual(mockedImage);
            });

            it ("returns correct empty data for injected preset constant", () => {
                subject.emptyData = { preset: "test" as any} as IEmptyData;
                subject.ngOnInit(); // Reinitialization after emptyData input changed to apply the appropriate preset

                expect(subject.getEmpty("description")).toEqual(testPreset.test.description);
                expect(subject.getEmpty("image")).toEqual(testPreset.test.image);
            });
        });
    });
});
