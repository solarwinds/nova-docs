import {
    Component,
    Input,
    OnChanges,
    OnDestroy,
    SimpleChanges
} from "@angular/core";
import { Logger } from "angular2-logger/app/core/logger";

export enum SpinnerSize {
    Small = "small", 
    Medium = "medium",
    Large = "large"
};

/**
 * <example-url>./../../../demo/index.html#/spinner</example-url>
 */
@Component({
    selector: "xui-spinner",
    template: `<span class="xui-icon-name-busy-cube xui-spinner xui-spinner-{{size}}"
                    [class.xui-spinner-show]="showSpinner"></span>`
})
export class SpinnerComponent implements OnChanges, OnDestroy {

    private static defaultSize: SpinnerSize = SpinnerSize.Small;
    private showTimer: any;
    private _size: SpinnerSize;
    
    public showSpinner = false;

    @Input() public show = false;
    @Input() public delay = 250;

    @Input() public set size(val: SpinnerSize) {
        const sizes: SpinnerSize[] = Object.keys(SpinnerSize).map((key: keyof typeof SpinnerSize) => SpinnerSize[key]);
        const index = sizes.indexOf(val);

        if (index < 0) {
            this.logger.warn(
                `Allowed sizes for xui-spinner are ${sizes.join(", ")}. ` +
                `Default is ${SpinnerComponent.defaultSize}.`);

            this._size = SpinnerComponent.defaultSize;
        } else {
            this._size = val;
        }
    }
    public get size() {
        return this._size || SpinnerComponent.defaultSize;
    }

    constructor(private logger: Logger) {}

    public ngOnChanges(changes: SimpleChanges) {
        if (!changes["show"]) {
            return;
        }

        this.cancelShowTimer();

        if (this.show) {
            this.showTimer = setTimeout(() => this.showSpinner = this.show, this.delay);
        } else {
            this.showSpinner = this.show;
        }
    }

    public ngOnDestroy() {
        this.cancelShowTimer();
    }

    private cancelShowTimer() {
        if (this.showTimer) {
            clearTimeout(this.showTimer);
        }
    }
};
