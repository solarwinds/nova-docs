import {ComponentFixture, TestBed} from "@angular/core/testing";
import {By} from "@angular/platform-browser";
import {Directive, Input, DebugElement, Component} from "@angular/core";
import initTestSuite from "../../spec-init";

import {ExpanderComponent} from "./expander.component";

const customHeaderHtml: string = `<div header=""><p>Custom Projected Header</p></div>`;
const customBodyHtml: string = `<div><span>Covfefe</span></div>`;

@Component({
    template: `<xui-expander [open]="open">${customHeaderHtml}${customBodyHtml}</xui-expander>`
})
class ExpanderUsageWithContentComponent {
    @Input() open: boolean = false;
}

@Directive({
    selector: "xui-icon"
})
class MockIconDirective {
    @Input() icon: string;
}

initTestSuite(TestBed);

describe("components >", () => {

    describe("expander >", () => {

        let subject: ExpanderComponent,
            fixture: ComponentFixture<ExpanderComponent>;

        beforeEach(() => {
            TestBed.configureTestingModule({
                declarations: [
                    ExpanderComponent,
                    ExpanderUsageWithContentComponent,
                    MockIconDirective
                ]
            });
        });

        describe("DOM >", () => {

            describe("sets expected header icon >", () => {

                let headerIconEl: DebugElement,
                    headerIcon: MockIconDirective;

                beforeEach(() => {
                    fixture = TestBed.createComponent(ExpanderComponent);
                    subject = fixture.componentInstance;
                    headerIconEl = fixture.debugElement.query(By.css("xui-icon[cssClass=xui-expander__header-icon]"));
                    headerIcon = headerIconEl.injector.get(MockIconDirective);
                });

                it("when open", () => {
                    subject.open = true;

                    fixture.detectChanges();

                    expect(headerIcon.icon).toBe("triangle-down");
                });

                it("when closed", () => {
                    subject.open = false;

                    fixture.detectChanges();

                    expect(headerIcon.icon).toBe("triangle-right");
                });

            });

            describe("sets expected header style >", () => {

                let headerEl: DebugElement;

                beforeEach(() => {
                    fixture = TestBed.createComponent(ExpanderComponent);
                    subject = fixture.componentInstance;
                    headerEl = fixture.debugElement.query(By.css(".xui-expander__header-content"));
                });

                it("when disabled", () => {
                    subject.disabled = true;

                    fixture.detectChanges();

                    expect(headerEl.classes["text-muted"]).toBeTruthy();
                });

                it("when enabled", () => {
                    subject.disabled = false;

                    fixture.detectChanges();

                    expect(headerEl.classes["text-muted"]).toBeFalsy();
                });

            });

            describe("when header content is specified >", () => {

                let usageFixture: ComponentFixture<ExpanderUsageWithContentComponent>,
                    headerContentEls: DebugElement[];

                beforeEach(() => {
                    usageFixture = TestBed.createComponent(ExpanderUsageWithContentComponent);
                    usageFixture.detectChanges();
                    headerContentEls = usageFixture.debugElement.queryAll(By.css(".xui-expander__header-content>*"));
                });

                it("projects expected content", () => {
                    expect(headerContentEls[0].nativeElement.innerHTML).toBe(customHeaderHtml);
                });

                it("removes default header content", () => {
                    expect(headerContentEls.length).toBe(1);
                });

            });

            describe("when header content is not specified >", () => {

                let getHeaderContentIconEl = () => fixture.debugElement.query(
                    By.css("[cssClass=xui-expander__header-content-icon]")
                );

                beforeEach(() => {
                    fixture = TestBed.createComponent(ExpanderComponent);
                    subject = fixture.componentInstance;
                });

                it("sets icon property of icon in default header if specified", () => {
                    subject.icon = "clown-shoes";

                    fixture.detectChanges();

                    let headerContentIconEl = getHeaderContentIconEl();
                    expect(headerContentIconEl).not.toBeNull();
                    let headerContentIcon = headerContentIconEl.injector.get(MockIconDirective);
                    expect(headerContentIcon.icon).toBe("clown-shoes");
                });

                it("hides icon in default header if icon is not specified", () => {
                    fixture.detectChanges();

                    expect(getHeaderContentIconEl()).toBeNull();
                });

                it("sets expected header text in default header", () => {
                    subject.header = "Scrunch Bunch";

                    fixture.detectChanges();

                    let headerTextEl = fixture.debugElement.query(By.css(".xui-expander__header-title"));
                    expect(headerTextEl.nativeElement.innerHTML).toBe("Scrunch Bunch");
                });

            });

            describe("when body content is specified", () => {

                let usageFixture: ComponentFixture<ExpanderUsageWithContentComponent>,
                    usageSubject: ExpanderUsageWithContentComponent,
                    getBodyContentEl = () => usageFixture.debugElement.query(By.css(".xui-expander__body"));

                beforeEach(() => {
                    usageFixture = TestBed.createComponent(ExpanderUsageWithContentComponent);
                    usageSubject = usageFixture.componentInstance;
                });

                xit("project content when when open", () => {
                    usageSubject.open = true;

                    usageFixture.detectChanges();

                    expect(getBodyContentEl().nativeElement.innerHTML).toContain(customBodyHtml);
                });

                it("does not project content when when closed", () => {
                    usageSubject.open = false;

                    usageFixture.detectChanges();

                    expect(getBodyContentEl().nativeElement.innerHTML).not.toContain(customBodyHtml);
                });

            });

            it("toggles open state when header is clicked", () => {
                fixture = TestBed.createComponent(ExpanderComponent);
                subject = fixture.componentInstance;

                let wasOpen = subject.open,
                    headerEl = fixture.debugElement.query(By.css(".xui-expander__header"));

                headerEl.triggerEventHandler("click", null);

                expect(subject.open).not.toEqual(wasOpen);
            });

        });

        describe("toggle >", () => {

            beforeEach(() => {
                subject = new ExpanderComponent();
            });

            describe("when enabled >", () => {

                describe("when closed >", () => {

                    beforeEach(() => {
                        subject.open = false;
                    });

                    it("sets open state to true", () => {
                        subject.toggle();

                        expect(subject.open).toBeTruthy();
                    });

                    it("emits open change event with expected value", (done: Function) => {
                        subject.openChange.subscribe((isOpen: Boolean) => {
                            expect(isOpen).toBeTruthy();
                            done();
                        });

                        subject.toggle();
                    });

                });

                describe("when open >", () => {

                    beforeEach(() => {
                        subject.open = true;
                    });

                    it("sets open state to false", () => {
                        subject.toggle();

                        expect(subject.open).toBeFalsy();
                    });

                    it("emits open change event with expected value", (done: Function) => {
                        subject.openChange.subscribe((isOpen: Boolean) => {
                            expect(isOpen).toBeFalsy();
                            done();
                        });

                        subject.toggle();
                    });

                });

            });

            describe("when disabled >", () => {

                it("does not change open state when it is false", () => {
                    subject.open = false;
                    subject.disabled = true;

                    subject.toggle();

                    expect(subject.open).toBeFalsy();
                });

                it("does not change open state when it is true", () => {
                    subject.open = true;
                    subject.disabled = true;

                    subject.toggle();

                    expect(subject.open).toBeTruthy();
                });

                it("does not emit open change event", (done: any) => {
                    subject.openChange.subscribe(done.fail);
                    subject.disabled = true;

                    subject.toggle();

                    done();
                });

            });

        });

    });

});
