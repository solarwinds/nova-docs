import { ComponentFixture, TestBed } from "@angular/core/testing";
import { Component, DebugElement } from "@angular/core";
import { By } from "@angular/platform-browser";
import { PageContentComponent,
         BusyComponent, 
         ProgressComponent, 
         SpinnerComponent,
         IconComponent, 
         HelpHintComponent 
} from "../index";
import { IconService } from "../../services/icon.service";
import { Logger } from "angular2-logger/app/core/logger";
import initTestSuite from "../../spec-init";

initTestSuite(TestBed);

@Component({
    selector: "test-app",
    template: `
    <html>
    <body>
    <xui-page-content id="xui-demo-components-page-content">
        <div xui-page-content__header>
            Transcluded header
        </div>
        <div class="column-container content-container-sm">
            Transcluded body
        </div>
        <div xui-page-content__footer>
            Transcluded footer
        </div>
    </xui-page-content>
    </body>
    </html>
    `
})
class TestApp { 
    public pageTitle: string = "Default page title";
}

describe("components >", () => {

    describe("page-content >", () => {

        it("should not render default Header if no custom element provided for transclusion", () => {

            TestBed.configureTestingModule({
                declarations: [
                    TestApp,
                    PageContentComponent,
                    BusyComponent,
                    ProgressComponent,
                    SpinnerComponent,
                    IconComponent,
                    HelpHintComponent
                ],
                providers: [
                    Logger,
                    IconService
                ]
            });

            let fixture: ComponentFixture<TestApp> = TestBed.createComponent(TestApp);
            let testAppComponent: TestApp = fixture.componentInstance;
            let subjectElement: DebugElement = fixture.debugElement.query(By.css("xui-page-content"));
            fixture.detectChanges();
            let headerElement: DebugElement = subjectElement.query(By.css("[xui-page-content__header]"));

            expect((headerElement.nativeElement as HTMLElement).innerText.indexOf(testAppComponent.pageTitle))
                .toBe(-1);
        });        
    });
});

@Component({
    selector: "test-app-default",
    template: `
    <html>
    <body>
    <xui-page-content id="xui-demo-components-page-content"
        [pageTitle]="pageTitle">
        <div class="column-container content-container-sm">
            Transcluded body
        </div>
        <div xui-page-content__footer>
            Transcluded footer
        </div>
    </xui-page-content>
    </body>
    </html>
    `
})
class TestAppDefault { 
    public pageTitle: string = "Default header template Page Title";
}

describe("components >", () => {

    describe("page-content >", () => {

        it("should display default Header template if no custom header provided for transclusion", () => {

            TestBed.configureTestingModule({
                declarations: [
                    TestAppDefault,
                    PageContentComponent,
                    BusyComponent,
                    ProgressComponent,
                    SpinnerComponent,
                    IconComponent,
                    HelpHintComponent
                ],
                providers: [
                    Logger,
                    IconService
                ]
            });

            let fixture: ComponentFixture<TestAppDefault> = TestBed.createComponent(TestAppDefault);
            let testAppComponent: TestAppDefault = fixture.componentInstance;
            let subjectElement: DebugElement = fixture.debugElement.query(By.css("xui-page-content"));
            fixture.detectChanges();
            let headerElement = subjectElement.query(By.css("[xui-page-content__header]"));
            
            expect((headerElement.nativeElement as HTMLElement).innerText.indexOf(testAppComponent.pageTitle))
                .toBeGreaterThan(-1);
        });        
    });
});

describe("components >", () => {
    
    describe("page-content >", () => {
    
        let subject: PageContentComponent;

        beforeEach(() => {
            subject = new PageContentComponent(document);
        });

        it("should indicate if the title link should be shown", () => {
            expect(subject.isLinkShown()).toBe(false);
            subject.linkText = "http://myLink.org";
            expect(subject.isLinkShown()).toBe(true);
        });

        it("should indicate if the title link-icon should be shown", () => {
            expect(subject.isIconShown()).toBe(false);
            subject.linkIcon = "http://myLink.org/myIcon.png";
            expect(subject.isIconShown()).toBe(true);
        });

        it("should have pageLayout='fullWidth' by default", () => {
            expect(subject.pageLayout).toBe("fullWidth");
        });
    });
});
