import {
    Component,
    Input,
    Output,
    EventEmitter,
    ContentChildren,
    AfterContentInit,
    QueryList,
    Renderer2,
    ChangeDetectionStrategy
} from "@angular/core";

import { CheckboxComponent, CheckboxChangeEvent } from "./checkbox.component";

@Component({
    selector: "xui-checkbox-group",
    template: require<string>("./checkbox-group.component.html"),
    changeDetection: ChangeDetectionStrategy.OnPush
})
/**
 * Component for combining of xui-checkbox components in to group
 * <example-url>./../../../demo/index.html#/checkbox-group</example-url>
 */
export class CheckboxGroupComponent implements AfterContentInit {

    /**
    * Sets "name" attribute for inner input element of xui-checkbox
    */
    @Input() public name: string;

    /**
     * Stores values from selected xui-checkboxes children components
     */
    @Input() public values: any[];

    /**
     * Is emitted when xui-checkbox is selected
     */
    @Output() public valuesChange = new EventEmitter<any[]>();

    /**
     * CheckboxGroupComponent children array from CheckboxComponent items
     */
    @ContentChildren(CheckboxComponent) private children: QueryList<CheckboxComponent>;

    /**
     * Component constructor used for Renderer2 service injection
     */
    constructor(private renderer: Renderer2) {}

    /**
     * Subscribe to xui-checkbox-group children values change
     */
    public ngAfterContentInit(): void {
        this.children.toArray().forEach((child: CheckboxComponent) => {
            this.renderer.setAttribute(child.inputViewContainer.element.nativeElement, "name", this.name);

            child.valueChange.subscribe((event: CheckboxChangeEvent) => {
                if (event.target.checked) {
                    this.values = [...this.values, event.target.value];
                } else {
                    _.remove(this.values, (x: any) => {
                        return x === event.target.value;
                    });
                }
                this.valuesChange.emit(this.values);
            });
        });
    }

    /**
     * Unsubscribe from valuesChange event
     */
    public ngOnDestroy(): void {
        this.valuesChange.unsubscribe();
    }

}
