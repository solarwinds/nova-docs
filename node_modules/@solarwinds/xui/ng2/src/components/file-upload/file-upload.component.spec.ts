import { ComponentFixture, TestBed } from "@angular/core/testing";
import { BrowserDynamicTestingModule, platformBrowserDynamicTesting } from "@angular/platform-browser-dynamic/testing";
import { FileUploadComponent } from "./file-upload.component";
import { IconComponent } from "../icon/icon.component";
import { ButtonComponent } from "../button/button.component";
import { By } from "@angular/platform-browser";
import { SwUtilService } from "../../services/sw-util.service";

describe("components >", () => {
    describe("file upload >", () => {
        let fixture: ComponentFixture<FileUploadComponent>;
        let componentInstance: FileUploadComponent;
        let mockFile = new File(["mock content"], "mockfile.txt");

        beforeAll(() => {
            TestBed.initTestEnvironment(
                    BrowserDynamicTestingModule,
                    platformBrowserDynamicTesting()
                );
        });

        beforeEach( () => {
            TestBed.configureTestingModule({
                declarations: [FileUploadComponent, IconComponent, ButtonComponent],
                providers: [SwUtilService]
            });
            fixture = TestBed.createComponent(FileUploadComponent);
            fixture.autoDetectChanges();
            componentInstance = fixture.componentInstance;
        });

        it("isFileSelected should be equal to false initially", () => {
            expect(componentInstance.isFileSelected).toBe(false);
        });

        it("remove function should clear information about file", () => {
            componentInstance.file = mockFile;
            componentInstance.isFileSelected = true;
            componentInstance.fileName = mockFile.name;
            componentInstance.remove();
            expect(componentInstance.file).toBeNull();
            expect(componentInstance.isFileSelected).toBe(false);
            expect(componentInstance.fileName).toBe("");
        });

        it("should have onchange listener which calls onFileRead", (done:()=>void) => {
            let inputElement = fixture.debugElement.query(By.css("input[type='file']"));
            spyOn(componentInstance, "onFileRead").and.callFake(() => {
                expect(componentInstance.onFileRead).toHaveBeenCalled();
                done();
            });
            inputElement.triggerEventHandler("change", new Event("change"));
        });
    });
});
