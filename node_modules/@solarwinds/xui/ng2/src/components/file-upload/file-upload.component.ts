import {
    Component,
    ElementRef,
    EventEmitter,
    Input,
    OnInit,
    Output,
    ViewChild
} from "@angular/core";
import { SwUtilService } from "../../services/sw-util.service";
/**
 * <example-url>./../../../demo/index.html#/file-upload</example-url>
 */

/**
 *
 * __Name :__
 * XUI File upload component.
 *
 * __Usage :__
 *  Component that handles file uploading behavior
 *
 *  To include file upload just use it as a component
 *
 *      `<xui-file-upload></xui-file-upload>`
 *
 *  To subscribe to `onChange` event pass a method to `onChange` property as in the example below
 *
 *      `<xui-file-upload (onChange)="onChangeHandler($event)"></xui-file-upload>`
 *
 *  Where `onChangeHandler` will look like. __Warning:__ Notice, that in `onChange` handler `File`
 *  will be received, not an `Event`
 *
 *      `onChangeHandler(file: File) {
 *          // Do whatever you want with the file
 *      }`
 *
 *  To adjust file type filtering pass a semicolon-separated value. Any MIME type can be passed
 *
 *      `<xui-file-upload [accept]="'text/plain;image/png;application/pdf'"></xui-file-upload>`
 *
 *  Validation can be implemented via passing `true` to `isRequired` property. Also, transmit a
 *  submitted state of a form to `submitted` property. This will trigger validation after
 *  user submits a form
 *
 *      `<form (submit)="onFormSubmit()">
 *          <xui-file-upload [isRequired]="true" [submitted]="formSubmitted"></xui-file-upload>
 *          <button xui-button type="submit">Submit form</button>
 *      </form>`
 *
 *  Where `onFormSubmit` in your component can look like in the example below:
 *
 *      `public onFormSubmit() {
 *          this.submitted = true;
 *      }`
 */

@Component({
    selector: "xui-file-upload",
    template: require<string>("./file-upload.component.html")
})
export class FileUploadComponent implements OnInit {
    //semicolon-separated value of MIME types. Filters files in file explorer
    @Input() accept: string;
    //to enable validation with required rule
    @Input() isRequired: boolean;
    //represents submitted state of a form
    @Input() submitted: boolean;
    //onChange will emit a file, not an event
    @Output() onChange =  new EventEmitter<File>();

    public file: File;
    public busy: boolean = false;
    public isFileSelected: boolean = false;
    public fileName: string;
    public isValid: boolean = false;
    public generatedId: string;

    @ViewChild("fileInput") private input: ElementRef;

    constructor(private swUtilService: SwUtilService) { }

    ngOnInit() {
        //Wrapping input with label doesn't work in Edge, so <label for...> is required
        this.generatedId = this.swUtilService.nextUid();
    }

    public triggerEvent(event: Event) {
        this.input.nativeElement.triggerEventHandler("change", new Event("change"));
    }

    public isInErrorState() {
        return this.submitted &&
               !this.isValid &&
               this.isRequired;
    }

    public onFileRead(event: Event) {
        event.preventDefault();
        this.busy = false;

        const input = <HTMLInputElement> event.target;
        //If user presses 'Cancel' in file selection dialog, previous file will be kept selected
        this.changeFile(input.files[0] || this.file);
    }

    private changeFile(newFile?: File) {
        this.file = newFile || null;
        this.isFileSelected = !!this.file;
        this.fileName = this.file ? this.file.name : "";
        this.validate();
        this.onChange.emit(this.file);
    }

    public remove() {
        this.input.nativeElement.value = "";
        event.preventDefault();
        this.changeFile();
    };

    public validate() {
        this.isValid = !_.isNil(this.file);
    }
}
