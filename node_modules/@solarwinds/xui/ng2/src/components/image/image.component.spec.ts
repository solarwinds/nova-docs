import { ImageComponent } from "./image.component";
import { IImagesPresetItem } from "../../constants";
import { DomSanitizer, SafeHtml } from "@angular/platform-browser";
import { Logger } from "angular2-logger/app/core/logger";

describe("components >", () => {
    describe("image >", () => {
        let subject: ImageComponent;
        const imagesPreset = [
            {
                svgFile: "sw-logo.svg",
                name: "sw-logo",
                brushType: "filled",
                code: "<svg>test svg</svg>"
            },
            {
                svgFile: "ok-robot.svg",
                name: "ok-robot",
                brushType: "filled",
                code: "<svg>ok robot</svg>"
            }
        ] as Array<IImagesPresetItem>;
        const domSanitizer = {
            bypassSecurityTrustHtml: (code: string) => code as SafeHtml
        } as DomSanitizer;

        beforeEach(() => {
            subject = new ImageComponent(new Logger(), imagesPreset, domSanitizer);
        });

        describe("getImageWidth", () => {
            it("returns 'auto' if 'width' property wasn't passed", () => {
               expect(subject.getImageWidth()).toBe("auto");
            });

            it("returns given 'width' in px", () => {
                const width = "200px";
                subject.size = width;

                expect(subject.getImageWidth()).toBe(width);
            });

            it("returns given 'width' in %", () => {
                const width = "200%";
                subject.size = width;

                expect(subject.getImageWidth()).toBe(width);
            });
        });

        describe("getImageTemplate", () => {
            it("returns image code by given image name", () => {
                const image = _.sample(imagesPreset);
                const imageName = image.name;
                const expectedImageCode = image.code as SafeHtml;

                subject.image = imageName;

                expect(subject.getImageTemplate()).toBe(expectedImageCode);
            });

            it("returns default image template if there is no image in the preset", () => {
                const imageName = "unavailableImage";
                const expectedImageTemplate = `<img src="${imageName}">`;

                subject.image = imageName;

                expect(subject.getImageTemplate()).toBe(expectedImageTemplate);
            });
        });
    });
});
