import {
    Component,
    ChangeDetectionStrategy,
    Input,
    Inject,
    OnInit
} from "@angular/core";
import { DomSanitizer, SafeHtml } from "@angular/platform-browser";

import { Logger } from "angular2-logger/app/core/logger";
import { IImagesPresetItem, ImagesPresetToken } from "../../constants";

/**
 * <example-url>./../../../demo/index.html#/image</example-url>
 */

@Component({
    selector: "xui-image",
    template: require<string>("./image.component.html"),
    changeDetection: ChangeDetectionStrategy.OnPush
})
export class ImageComponent implements OnInit {
    /**
     * Image name from xui image preset or external image url
     */
    @Input() public image: string;
    /**
     * Image width in 'px' or '%'. Default is 'auto'
     */
    @Input() public size: string;
    /**
     * Available values are: 'left' and 'right'
     */
    @Input() public float: string;
    /**
     * Available values are: 'centered', 'small', 'large'
     */
    @Input() public margin: string;
    @Input("class") public cssClass: string;

    constructor(private logger: Logger,
                @Inject(ImagesPresetToken) private images: Array<IImagesPresetItem>,
                private domSanitizer: DomSanitizer) {
    }

    public ngOnInit(): void {
        if (!_.isUndefined(this.size) && !this.isImageSizeValid()) {
            this.logger.error("Image size should be specified in 'px' or '%'");
        }
    }

    public getImageTemplate(): SafeHtml {
        const image = this.getImage(this.image);
        let imageHtml = `<img src="${this.image}">`;

        if (_.isObject(image) && _.isString(image.code)) {
            imageHtml = image.code;
        }

        return this.domSanitizer.bypassSecurityTrustHtml(imageHtml);
    }

    public getImageWidth(): string {
        return _.isUndefined(this.size) ? "auto" : this.size;
    }

    private getImage = (imageName: string): IImagesPresetItem => {
        return _.find(this.images, (img: IImagesPresetItem) => _.isEqual(img.name, imageName));
    };

    private isImageSizeValid(): boolean {
        return _.isNumber(parseFloat(this.size)) && (_.includes(this.size, "px") || _.includes(this.size, "%"));
    }
}
