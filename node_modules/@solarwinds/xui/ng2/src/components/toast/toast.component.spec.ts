import {BrowserDynamicTestingModule, platformBrowserDynamicTesting} from "@angular/platform-browser-dynamic/testing";
import {TestBed, fakeAsync} from "@angular/core/testing";
import NotificationService from "../../services/notification-service";
import {ToastContainerService} from "../../services/toast-container.service";
import {ToastComponent} from "./toast.component";
import {ToastService} from "../../services/toast.service";
import {ToastRef} from "./toast-ref";
import {IToastConfig} from "./toast-config";
import {ToastPackage} from "./toast-package";
import {IconComponent} from "../icon/icon.component";

describe("components >", () => {
    describe("toast >", () => {
        let toastService: any;
        let fixture: any;
        let toastContainerService: any;
        let toastComponent: any;
        let toastPackage: ToastPackage;
        let toastRef: ToastRef<ToastComponent>;

        const defaultToastConfig: IToastConfig = {
            maxOpened: 2,
            autoDismiss: false,
            newestOnTop: true,
            preventDuplicates: false,
            positionClass: "toast-top-right",
            titleClass: "toast-title",
            bodyClass: "toast-message",
            progressAnimation: "decreasing",
            timeOut: 5000,
            progressBar: true,
            toastClass: "xui-toast",
            extendedTimeOut: 2000,
            closeButton: true,
            iconClasses: {
                error: "xui-toast--error xui-icon-name-severity_error",
                info: "xui-toast--info xui-icon-name-severity_info",
                success: "xui-toast--success xui-icon-name-severity_ok",
                warning: "xui-toast--warning xui-icon-name-severity_warning"
            },
            clickToDismiss: false,
            enableHtml: true,
            stickyError: false
        };

        const setToastMetadata = () => {
            toastRef = new ToastRef(null);
            toastPackage = new ToastPackage(
                this.index,
                defaultToastConfig,
                "Test message",
                "Test title",
                "success",
                toastRef,
            );
        };

        beforeAll(() => {
            setToastMetadata();
            TestBed
                .initTestEnvironment(
                    BrowserDynamicTestingModule,
                    platformBrowserDynamicTesting()
                )
                .configureTestingModule({
                    declarations: [IconComponent],
                    providers: [NotificationService, ToastContainerService, ToastService],
                });

            toastService = TestBed.get(ToastService);
            toastContainerService = TestBed.get(ToastContainerService);
        });

        beforeEach(() => {
            setToastMetadata();
        });
        it("Title and body of a component should be correct", () => {
            const componentInstance = new ToastComponent(toastService, toastPackage);
            expect(componentInstance.body).toEqual("Test message");
            expect(componentInstance.title).toEqual("Test title");
        });
        it("Class 'success' should be put on success toast", () => {
            const componentInstance = new ToastComponent(toastService, toastPackage);
            expect(componentInstance.toastClasses.indexOf("success")).not.toEqual(-1);
        });
        it("Class 'info' should be put on info toast", () => {
            toastPackage.toastType = "info";
            const componentInstance = new ToastComponent(toastService, toastPackage);
            expect(componentInstance.toastClasses.indexOf("info")).not.toEqual(-1);
        });
        it("Class 'error' should be put on error toast", () => {
            toastPackage.toastType = "error";
            const componentInstance = new ToastComponent(toastService, toastPackage);
            expect(componentInstance.toastClasses.indexOf("error")).not.toEqual(-1);
        });
        it("Class 'warning' should be put on warning toast", () => {
            toastPackage.toastType = "warning";
            const componentInstance = new ToastComponent(toastService, toastPackage);
            expect(componentInstance.toastClasses.indexOf("warning")).not.toEqual(-1);
        });
        it("After activation toast should be shown", () => {
            fakeAsync(() => {
                const componentInstance = new ToastComponent(toastService, toastPackage);
                toastRef.activate();
                expect(componentInstance.display).toEqual("block");
                expect(componentInstance["state"]).toEqual("active");
            });
        });
        it("After remove toast should be removed", () => {
            fakeAsync(() => {
                const componentInstance = new ToastComponent(toastService, toastPackage);
                toastRef.activate();
                componentInstance.remove();
                expect(componentInstance["state"]).toEqual("removed");
            });
        });
    });
});
