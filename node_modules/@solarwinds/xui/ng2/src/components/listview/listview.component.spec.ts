import { ListViewComponent } from "./listview.component";
import { ListSelectionMode } from "./listview.component";
import { CUSTOM_ELEMENTS_SCHEMA } from "@angular/core";
import { TestBed, ComponentFixture } from "@angular/core/testing";
import initTestSuite from "../../spec-init";

initTestSuite(TestBed);

describe("components >", () => {
    describe("listview >", () => {
        let fixture: ComponentFixture<ListViewComponent>;
        let subject: ListViewComponent;

        beforeEach(() => {
            TestBed.configureTestingModule({
                declarations: [ListViewComponent],
                schemas: [CUSTOM_ELEMENTS_SCHEMA]
            });

            fixture = TestBed.createComponent(ListViewComponent);

            subject = fixture.componentInstance;
            subject.itemsSource = [{
                color: "blue"
            }, {
                color: "green"
            }, {
                color: "black"
            }];
        });

        it("correct list item should be selected on click when selection mode is 'single'", () => {
            subject.selectionMode = ListSelectionMode.single;
            subject.itemClicked(subject.itemsSource[1]);
            fixture.detectChanges();

            expect(expect(subject.selection[0].color).toBe("green"));
        });

        it("second list item should be selected when selection mode is 'single'", () => {
            subject.selection = [subject.itemsSource[1]];
            subject.selectionMode = ListSelectionMode.single;
            fixture.detectChanges();

            expect(subject.isItemSelected(subject.itemsSource[0]))
                .toBe(false);
            expect(subject.isItemSelected(subject.itemsSource[1]))
                .toBe(true);
        });

        it("second and third list item should be selected when selection mode is 'multi'", () => {
            subject.selection = [subject.itemsSource[1], subject.itemsSource[2]];
            subject.selectionMode = ListSelectionMode.multi;
            fixture.detectChanges();

            expect(subject.isItemSelected(subject.itemsSource[0]))
                .toBe(false);
            expect(subject.isItemSelected(subject.itemsSource[1]))
                .toBe(true);
            expect(subject.isItemSelected(subject.itemsSource[2]))
                .toBe(true);
        });

        it("no list items should be selected when selection mode is 'none'", () => {
            subject.selection = [subject.itemsSource[1]];
            fixture.detectChanges();

            expect(subject.isItemSelected(subject.itemsSource[1]))
                .toBe(false);
        });

        it("correct items should be selected/deselected when selection mode is 'multi'", () => {
            subject.selectionMode = ListSelectionMode.multi;
            subject.multiSelectionChanged(subject.itemsSource[2]);
            fixture.detectChanges();

            expect(subject.selection[0].color).toBe("black");

            subject.multiSelectionChanged(subject.itemsSource[2]);
            fixture.detectChanges();

            expect(JSON.stringify(subject.selection)).toBe(JSON.stringify([]));
        });
    });
});
