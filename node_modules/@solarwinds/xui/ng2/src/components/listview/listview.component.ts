import {
    Component,
    Input,
    Output,
    EventEmitter,
    ElementRef,
    TemplateRef,
    ContentChild,
    ChangeDetectionStrategy,
    ChangeDetectorRef
} from "@angular/core";

import { IEmptyData, PaddingOptions } from "../../index";

/**
 * Listview selection mode
 */
export enum ListSelectionMode {
    multi = "multi",
    single = "single",
    none = "none"
}

/**
 * Listview is used for displaying of continuous rows.
 * It can be used in "single" or "multi" selection mode
 * <example-url>./../../../demo/index.html#/listview</example-url>
 */
@Component({
    selector: "xui-listview",
    template: require<string>("./listview.component.html"),
    changeDetection: ChangeDetectionStrategy.OnPush
})
export class ListViewComponent {
    /**
     * List item template
     */
    @ContentChild("listItemTemplate") listItemTemplate: TemplateRef<ElementRef>;
    @Input() listItemTemplateRef: ElementRef;

    /**
     * Display stripes in xui-listview
     */
    @Input() public striped: boolean;

    /**
     * Possible values are 'single', 'multi' and 'none'
     */
    @Input() public selectionMode: ListSelectionMode = ListSelectionMode.none;

    /**
     * Listview rows padding. Possible values are:
     * 'regular', 'narrow', 'compact', 'none'
     */
    @Input() public paddingSize: PaddingOptions;

    /**
     * Selected listview objects
     */
    @Input() public selection: any[] = [];

    /**
     * List view objects array
     */
    @Input() public itemsSource: any[];

    /**
     * Data used in empty listview when itemsSource is empty
     */
    @Input() public emptyData: IEmptyData;

    /**
     * Is emitted when another item in the listview is selected
     */
    @Output() public selectionChange = new EventEmitter<any[]>();

    constructor(private changeDetector: ChangeDetectorRef) { }

    /**
     * Checks if listview item is selected
     * @param item selected list item in listview
     */
    public isItemSelected(item: any): boolean {
        switch (this.selectionMode) {
            case ListSelectionMode.single:
                return (this.selection && _.isEqual(item, this.selection[0]));
            case ListSelectionMode.multi:
                return (this.selection && this.selection.length && this.selection.indexOf(item) !== -1);
            default:
                return false;
        }
    }

    /**
     * List item is clicked
     * @param item value object that is used in xui-list-item
     */
    public itemClicked(item: any) {
        if (this.selectionMode === ListSelectionMode.single) {
            this.selection = [item];
            this.changeDetector.markForCheck();
            this.selectionChange.emit(this.selection);
        }
    }

    /**
     * xui-list-item selection change handler
     * @param item selected xui-list-item
     */
    public multiSelectionChanged(item: any) {
        if (this.selectionMode === ListSelectionMode.multi) {
            if (this.selection.indexOf(item) === -1) {
                this.selection = [...this.selection, item];
            } else {
                _.remove(this.selection, (x: any) => {
                    return x === item;
                });
            }
            this.selectionChange.emit(this.selection);
        }
    }

    /**
     * Unsubscribe from selectionChange event
     */
    public ngOnDestroy(): void {
        this.selectionChange.unsubscribe();
    }

}
