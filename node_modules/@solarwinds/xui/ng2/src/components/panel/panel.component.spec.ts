import {ComponentFixture, TestBed} from "@angular/core/testing";
import initTestSuite from "../../spec-init";

import {Component, DebugElement} from "@angular/core";
import {By} from "@angular/platform-browser";
import {PanelComponent} from "./panel.component";
import {IconComponent} from "../icon/icon.component";
import {AnimationBuilder} from "@angular/animations";
import {IconService} from "../../services/icon.service";

initTestSuite(TestBed);

const PANE_WIDTH = 500;
const LEFT_PANE_CONTENT = "Left Pane Content";
const CENTER_PANE_CONTENT = "Center Pane Content";

@Component({
    selector: "test-app",
    template: `
        <xui-panel [paneWidth]="paneWidth" [isCollapsible]="isCollapsible" [panelLayout]="panelLayout"
                   [isCollapsed]="isCollapsed" [headerIcon]="headerIcon"
        >
            <div leftPane>
                ${LEFT_PANE_CONTENT}
            </div>
            <div centerPane>
                ${CENTER_PANE_CONTENT}
            </div>
        </xui-panel>
    `
})
class TestApp {
    paneWidth: string;
    isCollapsible: boolean;
    panelLayout: string;
    isCollapsed: boolean;
    headerIcon: string;
}

describe("components >", () => {
    let fixture: ComponentFixture<TestApp>;
    let testComponent: TestApp;

    describe("panel >", () => {
        beforeEach(() => {
            TestBed.configureTestingModule({
                declarations: [IconComponent, PanelComponent, TestApp],
                providers: [AnimationBuilder, IconService]
            });

            fixture = TestBed.createComponent(TestApp);
            testComponent = fixture.componentInstance;
        });

        it("should have content in left pane and center pane", () => {
            const leftPaneBody =
                fixture.debugElement.query(By.css(".xui-panel__left-pane .xui-panel__body")).nativeElement;
            expect(leftPaneBody.textContent).toContain(LEFT_PANE_CONTENT);

            const centerPaneBody =
                fixture.debugElement.query(By.css(".xui-panel__center-pane .xui-panel__body")).nativeElement;
            expect(centerPaneBody.textContent).toContain(CENTER_PANE_CONTENT);
        });

        it("should have set width in left pane container and left pane body if not collapsible", () => {
            fixture.detectChanges();

            const leftPaneContainer =
                fixture.debugElement.query(By.css(".xui-panel__left-pane .xui-panel__container")).nativeElement;
            const leftPaneBody =
                fixture.debugElement.query(By.css(".xui-panel__left-pane .xui-panel__body")).nativeElement;
            expect(leftPaneContainer.style.width).toBe(`${PanelComponent.DEFAULT_PANE_WIDTH}px`);
            expect(leftPaneBody.style.width).toBe(`${PanelComponent.DEFAULT_PANE_WIDTH}px`);

            testComponent.paneWidth = PANE_WIDTH.toString();
            fixture.detectChanges();

            expect(leftPaneContainer.style.width).toBe(`${PANE_WIDTH}px`);
            expect(leftPaneBody.style.width).toBe(`${PANE_WIDTH}px`);
        });

        it("should not change width in left pane container and left pane body if collapsible and expanded", () => {
            fixture.detectChanges();
            testComponent.isCollapsible = true;
            testComponent.paneWidth = PANE_WIDTH.toString();
            fixture.detectChanges();

            const leftPaneContainer =
                fixture.debugElement.query(By.css(".xui-panel__left-pane .xui-panel__container")).nativeElement;
            const leftPaneBody =
                fixture.debugElement.query(By.css(".xui-panel__left-pane .xui-panel__body")).nativeElement;
            expect(leftPaneContainer.style.width).toBe(`${PANE_WIDTH}px`);
            expect(leftPaneBody.style.width).toBe(`${PANE_WIDTH}px`);
        });

        it("should change width in left pane container and left pane body if collapsible and collapsed", () => {
            fixture.detectChanges();
            testComponent.isCollapsible = true;
            testComponent.isCollapsed = true;
            testComponent.paneWidth = PANE_WIDTH.toString();
            fixture.detectChanges();

            const leftPaneContainer =
                fixture.debugElement.query(By.css(".xui-panel__left-pane .xui-panel__container")).nativeElement;
            const leftPaneBody =
                fixture.debugElement.query(By.css(".xui-panel__left-pane .xui-panel__body")).nativeElement;
            expect(leftPaneContainer.style.width).toBe(`${PanelComponent.DEFAULT_PANE_WIDTH}px`);
            expect(leftPaneBody.style.width).toBe(`${PANE_WIDTH}px`);
        });

        it("should have set width in left pane container and left pane body", () => {
            testComponent.paneWidth = PANE_WIDTH.toString();
            fixture.detectChanges();

            const leftPaneContainer =
                fixture.debugElement.query(By.css(".xui-panel__left-pane .xui-panel__container")).nativeElement;
            const leftPaneBody =
                fixture.debugElement.query(By.css(".xui-panel__left-pane .xui-panel__body")).nativeElement;
            expect(leftPaneBody.style.width).toBe(`${PANE_WIDTH}px`);
            expect(leftPaneContainer.style.width).toBe(`${PANE_WIDTH}px`);
        });

        it("should have fill panel layout only when set correctly", () => {
            fixture.detectChanges();
            const panelContainer =
                fixture.debugElement.query(By.css(".xui-panel.media")).nativeElement;
            expect(panelContainer.className).not.toContain("xui-panel--fill");

            testComponent.panelLayout = "unknown";
            fixture.detectChanges();
            expect(panelContainer.className).not.toContain("xui-panel--fill");

            testComponent.panelLayout = "fill";
            fixture.detectChanges();
            expect(panelContainer.className).toContain("xui-panel--fill");
        });

        it("should have collapse button when collapsible", () => {
            fixture.detectChanges();
            let collapseButtonDebugElement =
                fixture.debugElement.query(By.css(".xui-panel__heading-btn .xui-panel__heading-icon"));
            expect(collapseButtonDebugElement).toBeNull();

            testComponent.isCollapsible = true;
            fixture.detectChanges();
            collapseButtonDebugElement =
                fixture.debugElement.query(By.css(".xui-panel__heading-btn .xui-panel__heading-icon"));
            expect(collapseButtonDebugElement).not.toBeNull();
        });

        describe("should be expanded >", () => {
            let panelContainer: any;
            let collapseIconDebugElement: DebugElement,
                headingIconDebugElement: DebugElement;

            beforeEach(() => {
                testComponent.headerIcon = "filter";
            });

            it("when not collapsible and not collapsed", () => {
                fixture.detectChanges();

                panelContainer =
                    fixture.debugElement.query(By.css(".xui-panel.media")).nativeElement;
                collapseIconDebugElement =
                    fixture.debugElement.query(By.css(".xui-panel__heading-btn .xui-panel__heading-icon"));
                headingIconDebugElement =
                    fixture.debugElement.query(By.css(".xui-panel__heading-icon--collapsed"));

                expect(panelContainer.classList).not.toContain("xui-is-collapsed");
                expect(panelContainer.getAttribute("aria-expanded")).toBe("true");
                expect(panelContainer.getAttribute("aria-hidden")).toBeNull();
                expect(collapseIconDebugElement).toBeNull();
                expect(headingIconDebugElement).toBeNull();
            });

            it("when not collapsible and collapsed", () => {
                testComponent.isCollapsed = true;
                fixture.detectChanges();

                collapseIconDebugElement =
                    fixture.debugElement.query(By.css(".xui-panel__heading-btn .xui-panel__heading-icon"));
                headingIconDebugElement =
                    fixture.debugElement.query(By.css(".xui-panel__heading-icon--collapsed"));

                expect(panelContainer.classList).not.toContain("xui-is-collapsed");
                expect(panelContainer.getAttribute("aria-expanded")).toBe("true");
                expect(panelContainer.getAttribute("aria-hidden")).toBeNull();
                expect(collapseIconDebugElement).toBeNull();
                expect(headingIconDebugElement).toBeNull();
            });

            it("when collapsible and not collapsed", () => {
                testComponent.isCollapsed = false;
                testComponent.isCollapsible = true;
                fixture.detectChanges();

                collapseIconDebugElement =
                    fixture.debugElement.query(By.css(".xui-panel__heading-btn .xui-panel__heading-icon"));
                headingIconDebugElement =
                    fixture.debugElement.query(By.css(".xui-panel__heading-icon--collapsed"));

                expect(panelContainer.classList).not.toContain("xui-is-collapsed");
                expect(panelContainer.getAttribute("aria-expanded")).toBe("true");
                expect(panelContainer.getAttribute("aria-hidden")).toBeNull();
                expect(collapseIconDebugElement).not.toBeNull();
                expect(collapseIconDebugElement.context.icon).toBe("double-caret-left");
                expect(headingIconDebugElement).toBeNull();
            });
        });

        describe("should be collapsed >", () => {
            let panelContainer: any;
            let collapseIconDebugElement: DebugElement,
                headingIconDebugElement: DebugElement;

            it("when collapsible and collapsed", () => {
                testComponent.headerIcon = "filter";
                testComponent.isCollapsible = true;
                testComponent.isCollapsed = true;
                fixture.detectChanges();

                panelContainer =
                    fixture.debugElement.query(By.css(".xui-panel.media")).nativeElement;
                collapseIconDebugElement =
                    fixture.debugElement.query(By.css(".xui-panel__heading-btn .xui-panel__heading-icon"));
                headingIconDebugElement =
                    fixture.debugElement.query(By.css(".xui-panel__heading-icon--collapsed"));

                expect(panelContainer.classList).toContain("xui-is-collapsed");
                expect(panelContainer.getAttribute("aria-expanded")).toBe("false");
                expect(panelContainer.getAttribute("aria-hidden")).toBe("true");
                expect(collapseIconDebugElement).not.toBeNull();
                expect(collapseIconDebugElement.context.icon).toBe("double-caret-right");
                expect(headingIconDebugElement).not.toBeNull();
            });
        });

        it("should have embedded heading icon only when set", () => {
            fixture.detectChanges();
            let embeddedHeadingIconDebugElement =
                fixture.debugElement.query(By.css(".xui-panel__heading-icon--expanded"));
            expect(embeddedHeadingIconDebugElement).toBeNull();

            testComponent.headerIcon = "filter";
            fixture.detectChanges();
            embeddedHeadingIconDebugElement =
                fixture.debugElement.query(By.css(".xui-panel__heading-icon--expanded"));
            expect(embeddedHeadingIconDebugElement).not.toBeNull();
        });
    });
});
