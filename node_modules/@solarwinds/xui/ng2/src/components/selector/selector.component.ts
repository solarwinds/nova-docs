import {
    Component,
    Input,
    Output,
    EventEmitter,
    ViewChild,
    SimpleChanges,
    OnChanges,
    AfterContentInit,
    OnDestroy
} from "@angular/core";

import {
    CheckboxComponent,
    CheckboxChangeEvent,
    ListViewComponent
} from "../../components";

export enum SelectionType {
    All = "All",
    None = "None",
    AllPages = "All pages",
    Indeterminate = "Indeterminate"
}

/**
 * <example-url>./../../../demo/index.html#/selector</example-url>
 */

/**
 * __Name :__
 * XUI Selector component.
 *
 * __Usage :__
 * Component provides different options to select elements
 * by emmiting appropriate event.
 * Checkbox and droplist allow to select "All" or "None" items.
 * Droplist has additional option to select "All pages". Component
 * has indication about which selection option is active now and
 * binding property to set indeterminate state.
 */
@Component({
    selector: "xui-selector",
    host: {
        ["class"]: "xui-selector"
    },
    template: require<string>("./selector.component.html")
})
export class SelectorComponent implements OnChanges, AfterContentInit, OnDestroy {
    /**
     * resets selection, makes component appearance indeterminate
     */
    @Input()
    public indeterminate: boolean;

    @Output()
    public indeterminateChange = new EventEmitter<boolean>();

    /**
     * emits event which tells about component selection,
     * take a look on ListViewSelection enumaration
     */
    @Output()
    public selectionChange = new EventEmitter<string>();

    @ViewChild("checkbox")
    public checkbox: CheckboxComponent;

    @ViewChild("listview")
    public listview: ListViewComponent;

    public checkboxChecked = false;

    public ngOnChanges(changes: SimpleChanges): void {
        const change = changes["indeterminate"];

        if (change && change.currentValue) {
            // gives control to "selectionChange" stream
            this.listview.itemClicked(SelectionType.Indeterminate);
        }
    }

    public ngAfterContentInit(): void {
        const debounceTimeValue = 10;

        this.checkbox.valueChange.debounceTime(debounceTimeValue)
            .subscribe(this.onChecboxValueChange.bind(this));

        // selectionChange stream
        this.listview.selectionChange.debounceTime(debounceTimeValue)
            .subscribe(this.onListviewSelectionChange.bind(this));

        if (this.indeterminate) {
            this.selectionChange.emit(SelectionType.Indeterminate);
        }
    }

    public ngOnDestroy(): void {
        this.checkbox.valueChange.unsubscribe();
        this.listview.selectionChange.unsubscribe();
    }

    private onChecboxValueChange(event: CheckboxChangeEvent): void {
        if (event.target.checked) {
            // gives control to "selectionChange" stream
            this.listview.itemClicked(SelectionType.All);
        } else {
            // gives control to "selectionChange" stream
            this.listview.itemClicked(SelectionType.None);
        }
    }

    private onListviewSelectionChange(selectionArr: string[]): void {
        const selection = selectionArr[0];

        if (selection !== SelectionType.Indeterminate) {
            this.indeterminate = false;
            this.indeterminateChange.emit(false);
        }

        if (selection === SelectionType.All || selection === SelectionType.AllPages) {
            this.checkboxChecked = true;
        } else {
            this.checkboxChecked = false;
        }

        // propagate selection
        this.selectionChange.emit(selection);
    }

}
