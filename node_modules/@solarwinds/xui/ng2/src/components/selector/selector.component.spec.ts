import { SelectionType, SelectorComponent } from "./selector.component";
import { ListViewComponent, CheckboxChangeEvent, CheckboxComponent } from "../";

interface IOnListviewSelectionChangeFunc {
    (selectionArr: string[]): void;
}

interface IOnChecboxValueChangeFunc {
    (event: CheckboxChangeEvent): void;
}

describe("components >", () => {

    describe("selector >", () => {

        let subject: SelectorComponent;
        let onListviewSelectionChange: IOnListviewSelectionChangeFunc;
        let onChecboxValueChange: IOnChecboxValueChangeFunc;

        beforeEach(() => {
            subject = new SelectorComponent();
            subject.listview = new ListViewComponent(null);
            subject.checkbox = new CheckboxComponent();

            const getPrivateFuncOf = <T extends Function>(object: any, funcName: string): T => {
                return (object[funcName] as T).bind(subject);
            };

            onListviewSelectionChange = getPrivateFuncOf(subject, "onListviewSelectionChange");
            onChecboxValueChange = getPrivateFuncOf(subject, "onChecboxValueChange");
        });

        describe("onListviewSelectionChange", () => {

            it("should mark checkboxChecked, unmark indeterminate ([SelectionType.All])", () => {
                onListviewSelectionChange([SelectionType.All]);

                expect(subject.checkboxChecked).toBe(true);
                expect(subject.indeterminate).toBe(false);
            });

            it("should mark checkboxChecked, unmark indeterminate ([SelectionType.AllPages])", () => {
                onListviewSelectionChange([SelectionType.AllPages]);

                expect(subject.checkboxChecked).toBe(true);
                expect(subject.indeterminate).toBe(false);
            });

            it("should unmark checkboxChecked, unmark indeterminate ([SelectionType.None])", () => {
                onListviewSelectionChange([SelectionType.None]);

                expect(subject.checkboxChecked).toBe(false);
                expect(subject.indeterminate).toBe(false);
            });

        });

        describe("onChecboxValueChange", () => {

            it("should call listview.itemClicked function", () => {
                subject.listview.itemClicked = jasmine.createSpy("itemClicked", () => { /* mock */ });

                onChecboxValueChange({ target: subject.checkbox });

                expect(subject.listview.itemClicked).toHaveBeenCalled();
            });

        });

    });

});
