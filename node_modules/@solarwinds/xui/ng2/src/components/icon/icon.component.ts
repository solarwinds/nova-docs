import {ChangeDetectionStrategy, Component, Input} from "@angular/core";
import * as _ from "lodash";
import {DomSanitizer} from "@angular/platform-browser";
import {IconData, IconService} from "../../services/icon.service";

/**
 * <example-url>./../../../demo/index.html#/icon</example-url>
 */
@Component({
    selector: "xui-icon",
    template: require<string>("./icon.component.html"),
    changeDetection: ChangeDetectionStrategy.OnPush
})
export class IconComponent {
    public static SIZE_MAP: { [key: string]: string } = {
        "xlarge": "xui-icon-size-xlg",
        "large": "xui-icon-size-lg",
        "small": "xui-icon-size-sm",
        "xsmall": "xui-icon-size-xsm"
    };

    private _icon: string;
    @Input()
    iconColor: string;
    @Input()
    iconHoverColor: string;
    @Input()
    iconSize: string;
    @Input()
    cssClass: string;
    @Input()
    fillContainer: boolean = false;
    private _counter: number;
    @Input()
    status: string;

    private iconFound: boolean;
    private iconData: IconData;

    constructor(private iconService: IconService,
                private sanitizer: DomSanitizer) {
    }

    @Input()
    set icon(value: string) {
        this._icon = value;
        this.iconData = this.iconService.getIconData(this._icon);
        this.iconFound = !!this.iconData;
    }

    get icon() {
        return this._icon;
    }

    get iconClass() {
        let iconClass: string[] = ["xui-icon"];

        if (this.iconFound) {
            if (this.iconData.brushType) {
                iconClass.push(this.iconData.brushType);
            }
            if (this.iconData.cssAmendments) {
                iconClass.push(this.iconData.cssAmendments);
            }
        } else {
            iconClass.push("xui-icon-not-found");
        }

        if (this.iconColor) {
            iconClass.push(`${this.iconColor}-icon`);
        }

        if (this.iconHoverColor) {
            iconClass.push(`${this.iconHoverColor}-hover-icon`);
        }

        let sizeClass = IconComponent.SIZE_MAP[this.iconSize];
        if (sizeClass) {
            iconClass.push(sizeClass);
        }

        if (this.cssClass) {
            iconClass.push(this.cssClass);
        }

        if (this.fillContainer) {
            iconClass.push("xui-icon--fill-container");
        }

        return iconClass.join(" ");
    }

    @Input()
    set counter(value: string) {
        const counterAttrValue = +value;
        if (_.isInteger(counterAttrValue)) {
            this._counter = counterAttrValue;
        } else {
            this._counter = undefined;
        }
    }

    get counter() {
        return this._counter === undefined ? undefined : this._counter.toString();
    }

    get iconCode() {
        // Icon code is not user input
        return this.iconData ? this.sanitizer.bypassSecurityTrustHtml(this.iconData.code) : undefined;
    }
}
