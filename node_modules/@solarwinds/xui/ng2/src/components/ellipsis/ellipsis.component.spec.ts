import { EllipsisComponent } from "./ellipsis.component";

describe("components >", () => {

    describe("ellipsis >", () => {

        let subject: EllipsisComponent;
        let mockNativeElement: HTMLElement;
        let childElement: HTMLElement;
        let mockOriginalText: string;

        beforeEach(() => {
            mockNativeElement = document.createElement("div");
            childElement = document.createElement("span");
            childElement.className = "xui-ellipsis__text";
            mockOriginalText = "mockOriginalText";
            childElement.innerText = mockOriginalText;
            mockNativeElement.appendChild(childElement);
            subject = new EllipsisComponent({ nativeElement: mockNativeElement });
        });

        describe("toggleTooltip >", () => {

            it("should set title on tooltip is enabled", () => {
                subject.tooltipText = mockOriginalText;
                subject.isTooltipEnabled = true;
                subject.toggleTooltip();
                expect(mockNativeElement.getAttribute("title")).toEqual(mockOriginalText);
            });

            it("should set title on ellipsis text is larger than parent", () => {
                subject.tooltipText = mockOriginalText;
                expect(mockNativeElement.getAttribute("title")).toBe(null);
                mockNativeElement.style.width = "100px";
                childElement.style.width = "150px";
                subject.toggleTooltip();
                expect(mockNativeElement.getAttribute("title")).toEqual(mockOriginalText);
            });

            it("should remove title on tooltip is disabled", () => {
                subject.tooltipText = mockOriginalText;
                subject.isTooltipEnabled = false;
                subject.toggleTooltip();
                expect(mockNativeElement.getAttribute("title")).toBe(null);
            });
        });
    });

});
