import {
    Component,
    Input,
    ElementRef,
    SimpleChanges,
    OnInit,
    OnChanges,
} from "@angular/core";

/**
 * XUI Ellipsis component wraps text of its target and create ellipsis effect
 * if text is larger then it's parent element.
 *
 * __Usage:__
 *
 * General case and automatic check if tooltip should be shown:
 *
 *          `<xui-ellipsis [tooltipText]="'Some random text for tooltip'">
 *
 *              Hello world!
 *
 *          </xui-ellipsis>`
 *
 * isTooltipEnabled property is for triggering tooltip from the outer controller.
 * So it means that you need to figure out when you want to turn tooltip on/off
 *
 *          `<xui-ellipsis [isTooltipEnabled]="true/false"
 *                         [tooltipText]="'Some random text for tooltip'">
 *
 *              Hello world!
 *
 *           </xui-ellipsis>`
 *
 * With xuiHighlight you need to add title right to contentHTML input because of Angular limitations of SafeHtml
 * While using ellipsis with that property you should be aware that it will overwrite content inside.
 * Better to use it only with plain text
 *
 *          `<xui-ellipsis [contentHTML]="Hello world! | xuiHighlight:'hello'"
 *                         [tooltipText]="'Some random text for tooltip'">
 *
 *           </xui-ellipsis>`
 */
/**
 * <example-url>./../../../demo/index.html#/ellipsis</example-url>
 */
@Component({
    selector: "xui-ellipsis",
    template: require<string>("./ellipsis.component.html")
})
export class EllipsisComponent implements OnInit, OnChanges {
    /**
     * This property is used for outer controller tooltip switching
     */
    @Input() public isTooltipEnabled: boolean;

    /**
     * Property used for xui-ellipsis tooltip text
     */
    @Input() public tooltipText: string;

    /**
     * For using htmlBind.
     */
    @Input() public contentHTML: string;

    /**
     * Class to compare width with.
     */
    @Input() public parentClass: string;

    constructor(private element: ElementRef) {}

    public ngOnChanges(changes: SimpleChanges): void {
        setTimeout(() => this.toggleTooltip());
    }

    public ngOnInit(): void {
        const nativeElement = this.element.nativeElement;

        nativeElement.classList.add("xui-ellipsis");
        if (_.includes(window.navigator.userAgent, "Trident")) {
            nativeElement.querySelector(".xui-ellipsis-inner").classList.add("text-overflow-ie");
        }
    }

    /**
     * Turns tooltip on or off
     */
    public toggleTooltip(): void {
        const nativeElement = this.element.nativeElement;
        const parentElement = this.parentClass ?
            this.findParentByClass(nativeElement, this.parentClass) : nativeElement;
        const childIsWider = nativeElement.querySelector(".xui-ellipsis__text")
            .getBoundingClientRect().width >= parentElement.getBoundingClientRect().width;
        let showTitle = this.isTooltipEnabled;

        if (!_.isBoolean(this.isTooltipEnabled)) {
            showTitle = childIsWider;
        }

        if (showTitle) {
            nativeElement.setAttribute("title", this.tooltipText);
        } else {
            nativeElement.removeAttribute("title");
        }
    };

    /**
     * Get closest element by class
     */
    private findParentByClass(element: HTMLElement, classMatching: string): HTMLElement {
        while (!element.classList.contains(classMatching)) {
            element = element.parentElement;
        }
        return element;
    };
}
