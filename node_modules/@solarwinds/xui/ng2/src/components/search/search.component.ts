import { Component, Input, Output, EventEmitter } from "@angular/core";

import { KEY_CODE } from "../../constants";

@Component({
    selector: "xui-search",
    template: require<string>("./search.component.html")
})

/**
 * <example-url>./../../../demo/index.html#/search</example-url>
 * 
 * 
 * Search component provides input box with 'search' and 'cancel' buttons on the right side of the box.
 * Handles setting focus to its inner input fiels on cancel.
 * Fires 'search', 'cancel', 'inputChanged' and 'focusChange' events. 
 * Indicates spinner to the left of input text depending on 'busy' property.
 */
export class SearchComponent {
    /**
     * default text of placeholder if no custom ones is provided
     */
    // i18n "xui_search_placeholder"
    public static defaultPlaceholder = "Search";
    /**
     * Changes styling via applying of 'xui-search--active' class.
     */
    @Input() active: boolean;
    /**
     * Controls whether component is busy (e.g. during long async search). 
     * If true, spinner is displayed to the left of input text.
     */
    @Input() busy: boolean;
    /**
     * A string that will be used as the label. Label is not shown if empty.
     */
    @Input() caption: string;
    /**
     * Controls focus of input field (true means focused).
     */
    @Input() captureFocus: boolean;
    /**
     * Determines whether input field is disabled or not.
     */
    @Input() disabled: boolean;
    /**
     * User friendly name of control ('id' attrs of inner \<label\> and \<input\> elements are "{{name}}_label" and
     * "{{name}}_input" accordingly).
     */
    @Input() name: string;
    /**
     * A string that will be placed as a watermark inside of the search when it's empty.
     */
    @Input() placeholder: string;
    /**
     * Initial value of input field.
     */
    @Input() value: string;
    /**
     * Event fired on each 'cancel' button click. Status 'busy' is cleared on this event.
     * String parameter passed indicates a current busy status of component:
     * - if 'cancel' button was pressed when busy 
     * - if pressed when not busy, input field is not being cleared and empty string passed out
     * Pay attention, that input field is not being cleared by component on this event, it is the 
     * responsibility of host component. 
     */
    @Output() public cancel = new EventEmitter<string>();
    /**
    * Event fired on external focus changes (e.g. initiated by user via UI). 
    * Use it if you bind an external input to 'captureFocus' property for matching them both.
    */
    @Output() public focusChange = new EventEmitter<boolean>();
    /**
     * Event fired when input field value is changed (via either keyboard or typeahead select item).
     * Pay attention, that host property bound to 'value' is not being changed by component on this event, 
     * it is the responsibility of host component. The same with clearing of 'busy' status - if you want 
     * to clear it on inputCnahge - handle it in host component
     */
    @Output() public inputChange = new EventEmitter<string>();
    /**
     * Event fired on 'search' button click or 'ENTER' key pressed
     */
    @Output() public search = new EventEmitter<string>();

    public getPlaceholder(): string {
        return this.placeholder || SearchComponent.defaultPlaceholder + "...";
    }

    public onCancel(): void {
        if (this.busy) {
            this.busy = false;
            this.cancel.emit(this.value);
        } else {
            this.cancel.emit("");
        }
        this.captureFocus = true;
        this.focusChange.emit(true);
    }

    public onFocusChange(event: boolean) {
        this.captureFocus = event;
        this.focusChange.emit(event);
    }

    public onInputChange(): void {        
        this.inputChange.emit(this.value);
    }

    public onKeyup(event:KeyboardEvent): void {
        if (event.keyCode === KEY_CODE.ENTER) {
            this.onSearch();
        };
    }

    public onSearch(): void {
        this.search.emit(this.value);
    }
}
