import { ButtonComponent } from "./button.component";
import { ComponentFixture, TestBed } from "@angular/core/testing";
import { DebugElement, CUSTOM_ELEMENTS_SCHEMA } from "@angular/core";
import initTestSuite from "../../spec-init";

initTestSuite(TestBed);

describe("components >", () => {
    describe("button >", () => {
        const SIZE_LARGE = "large";
        const SIZE_SMALL = "small";
        const STYLE_PRIMARY = "primary";
        const STYLE_SECONDARY = "secondary";
        const PRIMARY_DEFAULT_ICON_COLOR = "white";

        let fixture: ComponentFixture<ButtonComponent>;
        let subject: ButtonComponent;
        let de:      DebugElement;

        beforeEach(() => {
            TestBed.configureTestingModule({
                declarations: [ ButtonComponent ],
                schemas: [CUSTOM_ELEMENTS_SCHEMA]
              });
            fixture = TestBed.createComponent(ButtonComponent);
            subject = fixture.componentInstance;
            de = fixture.debugElement;
        });

        it("should remap 'iconSize' prop depending on 'size' prop value", () => {
            subject.size = SIZE_LARGE;
            expect(subject.iconSize).toEqual("", "size:" + SIZE_LARGE + " -> empty string");
            subject.size = "";
            expect(subject.iconSize).toEqual("", "size: empty -> empty string");
            subject.size = SIZE_SMALL;
            expect(subject.iconSize).toEqual("small", "size:" + SIZE_SMALL + " -> 'small'");
        });

        it(`should remap 'iconColor' to '${PRIMARY_DEFAULT_ICON_COLOR}' as default for primary buttons`, () => {
            subject.displayStyle = STYLE_SECONDARY;
            expect(subject.iconColor).not.toEqual(PRIMARY_DEFAULT_ICON_COLOR);
            subject.displayStyle = STYLE_PRIMARY;
            expect(subject.iconColor).toEqual(PRIMARY_DEFAULT_ICON_COLOR);
            subject.iconColor = "green";
            expect(subject.iconColor).not.toEqual(PRIMARY_DEFAULT_ICON_COLOR);
        });
    });
});
