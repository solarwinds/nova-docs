import {
    Component,
    Input,
    Output,
    EventEmitter,
    Renderer2,
    ElementRef,
    OnInit,
    OnDestroy
} from "@angular/core";

import {
    trigger,
    state,
    style,
    animate,
    transition
} from "@angular/animations";

/**
 * <example-url>./../../../demo/index.html#/message</example-url>
 */
@Component({
    selector: "xui-message",
    template: require<string>("./message.component.html"),
    animations: [
        trigger("dismiss", [
            state("initial", style({})),
            state("dismissed", style({
                height: 0,
                margin: 0,
                border: 0,
                opacity: 0
            })),
            transition("initial => dismissed", animate(`${MessageComponent.getAnimationDuration(true)} linear`))
        ])]
})
export class MessageComponent implements OnInit, OnDestroy {

    constructor(private element: ElementRef,
                private renderer: Renderer2) { }

    public static ICON_MAP: { [id: string]: string } = {
        "ok": "severity_ok",
        "success": "severity_ok",
        "error": "severity_error",
        "warning": "severity_warning",
        "critical": "severity_critical",
        "info": "severity_info",
        "hint": "severity_tip"
    };

    public static UNKNOWN_ICON = "severity_unknown";

    @Input() public type: null | "success" | "ok" | "error" | "info" | "hint" | "critical" | "warning";

    @Input() public allowDismiss: boolean;

    @Output() public dismiss = new EventEmitter();

    public dismissState: "initial" | "dismissed" = "initial";

    private static readonly animationDuration = 300;

    private timeoutId: any;

    public static getAnimationDuration(stringFormat?: boolean): string | number {
        if (stringFormat) {
            return `${MessageComponent.animationDuration / 1000}s`;
        }

        return MessageComponent.animationDuration;
    }

    public emitDismiss() {
        this.dismiss.emit(this.dismiss);
    }

    public ngOnInit() {
        this.dismiss.subscribe((event: EventEmitter<undefined>) => {
            this.dismissState = "dismissed";

            this.timeoutId = setTimeout(() => {
                this.renderer.removeChild(this.element.nativeElement.parentNode, this.element.nativeElement);
            }, <number>MessageComponent.getAnimationDuration());
        });
    }

    public ngOnDestroy() {
        this.dismiss.complete();
        this.dismiss.unsubscribe();
        clearTimeout(this.timeoutId);
    }

    public get messageClass(): string {
        return this.type ? `xui-message-${this.type.toLowerCase()}` : "";
    }

    public get icon() {
        let icon = MessageComponent.ICON_MAP[this.type];
        return icon ? icon : MessageComponent.UNKNOWN_ICON;
    }

}
