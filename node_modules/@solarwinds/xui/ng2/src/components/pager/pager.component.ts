import {
    Component, 
    Input, 
    Output, 
    EventEmitter,
    SimpleChanges,
    ChangeDetectionStrategy
} from "@angular/core";
import { Logger } from "angular2-logger/app/core/logger";

export interface IPagerItem {
    title: string;
    value?: any;
    page?: number;
    iconName?: string;
    pageRows?: number[][];
    style?: string;
    action?: (event: any) => boolean;
}

export const defaultPageSizeSet = [10, 25, 50, 100];

/**
 * Component used for pagination of data
 * <example-url>./../../../demo/index.html#/pager</example-url>
 */
@Component({
    selector: "xui-pager",
    template: require<string>("./pager.component.html"),
    changeDetection: ChangeDetectionStrategy.OnPush
})

export class PagerComponent {
    @Input() public itemsList: Array<IPagerItem> = [];
    /**
     * Current page number
     */
    @Input() public page = 1;
    /**
     * Size of the page. For example: 10, 25, 50, 100;
     */
    @Input() public pageSize: number;
    /**
     * Array of page numbers
     */
    @Input() public pageSizeSet: number[] = [];
    /**
     * Total number of pages
     */
    @Input() public total = 0;
    /**
     * Pager separator symbol.
     */
    @Input() public dots = "...";
    /**
     * Hide pager if all items of data can be displayed on one page
     */
    @Input() public hideIfEmpty = false;
    /**
     * Make parer hidden
     */
    @Input() public hide: boolean;
    /**
     * Pager <ul> element class
     */
    @Input() public ulClass = "pagination";
    /**
     * Pager active item class
     */
    @Input() public activeClass = "active";
    /**
     * Pager disabled item class
     */
    @Input() public disabledClass = "disabled";
    /**
     * Number of items displayed before separator
     */
    @Input() public adjacent = 1;
    /**
     * Maximum number of items in pager
     */
    @Input() public maxElements = this.adjacent * 2 + 5;
    /**
     * Show previous and next buttons
     */
    @Input() public showPrevNext: boolean;
    /**
     * Display popup above pager if equals to 'true'
     */
    @Input() public popupDirectionTop: boolean = false;
    /**
     * Popup parent element css class used determining of popup direction
     */
    @Input() public popupBaseElementSelector: string;
    /**
     * Action occurs on page change
     */
    @Output() public pagerAction = new EventEmitter<any>();

    private dotsPagesPerRow = 5;
    private mainRangeStart: number;
    private mainRangeEnd: number;
    
    public constructor(private logger: Logger) {}

    /**
    * Component initialization
    */
    ngOnInit(): void {
        this.initPageSizeSet();
        const pageCount = this.getPageCount();
        if (this.page > pageCount) {
            this.page = pageCount;
        }
        if (this.page <= 0) {
            this.page = 1;
        }
    };

    /**
     * Redraw component when 'total' or 'page' propery was changed
     * @param changes Changed properties
     */
    ngOnChanges(changes: SimpleChanges) {
        if (changes["total"] 
        || changes["page"]
        || changes["adjacent"]) {
            this.assemble();
        }
    }

    /**
     * Initialize set of pages
     */
    public initPageSizeSet() {
        if (!this.pageSize || this.pageSize <= 0) {
            this.pageSize = defaultPageSizeSet[0];
        }

        let set = _.clone(defaultPageSizeSet);

        if (!_.includes(set, this.pageSize)) {
            set.push(this.pageSize);
            set.sort((a, b) => a - b);
        }

        this.pageSizeSet = set;
    };

    /**
     * Change page number
     * @param page Page number
     */
    public goToPage(page: number) {
        this.page = page;

        if (this.pagerAction) {
            let result = {
                page: this.page,
                pageSize: this.pageSize,
                total: this.total
            };
            this.pagerAction.emit(result);
        }

        this.assemble();
    };

    /**
     * Set items per page that should displayed
     * @param newValue new number of items per page
     */
    public setItemsPerPage(newValue: number) {
        if (newValue < 1) {
            this.logger.warn("pager-controller.setItemsPerPage - invalid newValue: " + newValue);
            return;
        }

        this.pageSize = newValue;
        this.goToPage(1);
    };

    /**
     * Get number of pages
     */
    public getPageCount() {
        if (this.total <= 0) {
            return 1;
        }
        return Math.ceil(this.total / this.pageSize);
    };

    /**
     * Display pager component
     */
    public showPager() {
        const count: number = this.getPageCount();
        return isFinite(count) && (this.hideIfEmpty === false || count > 1);
    };

    /**
     * Get sequence number of first item of currently displayed paginated list
    */
    public getFirstItemOnPage(): number {
        return this.pageSize * (this.page - 1) + 1;
    };

    /**
     * Get sequence number of last item of currently displayed paginated list
    */
    public getLastItemOnPage(): number {
        return _.min([this.pageSize * this.page, this.total]);
    };

    /**
     * Add items to pager component
     */
    private assemble() {
        this.itemsList = [];
        if (this.getPageCount() <= 0) {
            return;
        }

        const pageCount = this.getPageCount();

        this.prepareSeparators();

        this.addPrev();

        if (this.mainRangeStart !== 1) {
            // add starting separator and the first page
            this.add(1);
            this.addSeparator(2, this.mainRangeStart - 1);
        }

        this.addRange(this.mainRangeStart, this.mainRangeEnd);

        if (this.mainRangeEnd !== pageCount) {
            // add ending separator and the last page
            this.addSeparator(this.mainRangeEnd + 1, pageCount - 1);
            this.add(pageCount);
        }

        this.addNext();
    };

    /**
     * Fills mainRangeStart and mainRangeEnd properties with proper values. Those properties 
     * are used for displaying of page numbers between 'dots' separators.
     */
    private prepareSeparators() {
        // the only 2 variables that are needed to display everything are:
        //      mainRangeStart      mainRangeEnd
        //            |                   |
        //  < 1  ... 100  101  102  103  104 >
        const pageCount = this.getPageCount();
        const page = +this.page;
        const adjacent = +this.adjacent;

        // case when there are few items
        if (pageCount <= this.maxElements) {
            this.mainRangeStart = 1;
            this.mainRangeEnd = pageCount;
            return;
        }

        // set main range to
        this.mainRangeStart = (page - adjacent < 1) ? 1 : page - adjacent;
        this.mainRangeEnd = (page + adjacent > pageCount) ? pageCount : page + adjacent;

        // case where starting separator is not shown
        if ((this.mainRangeStart - 1) // end of possible starting separator
            - 2 // start of possible starting separator
            < 1) {
            this.mainRangeStart = 1;
        }

        // case where ending separator is not shown
        if ((pageCount - 1) // end of possible ending separator
            - (this.mainRangeEnd + 1) // start of possible ending separator
            < 1) {
            this.mainRangeEnd = pageCount;
        }

        // case where we have one of the first pages selected and the ending separator
        if (this.mainRangeEnd !== pageCount && page < this.maxElements - 2 - adjacent) {
            this.mainRangeStart = 1;
            this.mainRangeEnd = this.mainRangeStart + this.maxElements - 3;
        }

        // case where we have one of the last pages selected and the starting separator
        if (this.mainRangeStart !== 1 && page > pageCount - this.maxElements + 2 + adjacent) {
            this.mainRangeEnd = pageCount;
            this.mainRangeStart = this.mainRangeEnd - this.maxElements + 3;
        }
    };

    private addSeparator(from: number, to: number) {
        const tooltip = [
            "Pages",
            " ",
            from.toString(),
            " - ",
            to.toString()
        ].join("");
        this.itemsList.push({
            title: tooltip,
            value: this.dots,
            pageRows: _.chunk(_.range(from, to + 1),
                this.dotsPagesPerRow)
        });
    };

    private addPrev() {
        const pageCount = this.getPageCount();
        if (!this.showPrevNext || pageCount < 1) {
            return;
        }

        const prevBtn = {
            iconName: "caret-left",
            title: "Previous Page",
            page: this.page - 1 <= 0 ? 1 : this.page - 1
        };
        const isDisabled = this.page - 1 <= 0;
        this.addItem(prevBtn, isDisabled);
    };

    private addNext() {
        const pageCount = this.getPageCount();
        if (!this.showPrevNext || pageCount < 1) {
            return;
        }

        const nextBtn = {
            iconName: "caret-right",
            title: "Next Page",
            page: this.page + 1 >= pageCount ? pageCount : this.page + 1
        };
        const isDisabled = this.page + 1 > pageCount;
        this.addItem(nextBtn, isDisabled);
    };

    private addItem(item: IPagerItem, isDisabled: boolean) {
        this.itemsList.push({
            iconName: item.iconName,
            value: item.value,
            title: item.title,
            style: isDisabled ? this.disabledClass : "",
            action: (event: any) => {
                if (!isDisabled) {
                    this.goToPage(item.page);
                }
                return false;
            }
        });
    };

    private add(page: number) {
        const inst = this;
        this.itemsList.push({
            value: page,
            title: `Page ${page}`,
            style: this.page === page ? this.activeClass : "",
            action: function (event: any) {
                inst.goToPage(this.value);
                return false;
            }
        });
    };

    private addRange(start: number, finish: number) {
        for (let index = start; index <= finish; index++) {
            this.add(index);
        }
    };
}
