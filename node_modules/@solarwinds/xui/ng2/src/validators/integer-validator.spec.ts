import { TestBed } from "@angular/core/testing";
import { BrowserDynamicTestingModule, platformBrowserDynamicTesting } from "@angular/platform-browser-dynamic/testing";
import { XuiValidators } from "./xui-validators";
import { FormBuilder, ReactiveFormsModule, ValidatorFn } from "@angular/forms";

describe("validators >", () => {
    describe("integerValidator >", () => {
        let formBuilder: FormBuilder;
        let commonTestCases = [
            { num: "0", result: true },
            { num: "108", result: true },
            { num: "0108", result: false },
            { num: "10.8", result: false },
            { num: "-10.8", result: false },
            { num: "0.8", result: false }
        ];
        beforeAll(() => {
            TestBed
                .initTestEnvironment(
                    BrowserDynamicTestingModule,
                    platformBrowserDynamicTesting()
                )
                .configureTestingModule({
                    imports: [ReactiveFormsModule]
                });
            formBuilder = TestBed.get(FormBuilder);
        });

        let executeTestCases = (testCases: Array<{num: string, result:boolean}>, validatorFn: ValidatorFn) => {
            testCases.forEach((test, idx) => {
                it(`integer validation test case ${test.num} should be ${test.result}`, () => {
                    const control = formBuilder.control(test.num, validatorFn);
                    expect(control.valid).toEqual(test.result);
                });
            });
        };

        describe("signed integer validation >", () => {
            let testCases = [
                { num: "-108", result: true }
            ].concat(commonTestCases);
            const validatorFn = XuiValidators.integer();
            executeTestCases(testCases, validatorFn);
        });

        describe("unsigned integer validation >", () => {
            let testCases = [
                { num: "-108", result: false }
            ].concat(commonTestCases);
            const validatorFn = XuiValidators.integer(true);
            executeTestCases(testCases, validatorFn);
        });
    });
});
