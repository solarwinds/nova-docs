import {by, ElementFinder, promise} from "@solarwinds/uzi/protractor";
import {Atom} from "@solarwinds/uzi";

export class PagerAtom extends Atom {
    public static CSS_CLASS = "xui-pager";

    private prevNextClass = "move-icon";

    public isDisplayed = (): promise.Promise<boolean> => {
        return super.getElement().isDisplayed();
    };

    public itemCountText = (): promise.Promise<string> => {
        return super.getElement().all(by.className("xui-pager__items-total")).get(0).getText();
    };

    public setItemsPerPage = (itemsPerPage: number): promise.Promise<void> => {
        super.getElement().all(by.className("xui-pager__items-shown")).get(0).click();
        return super.getElement().element(by.className("xui-pager__item-per-page"))
            .element(by.xpath(".//button[.=" + itemsPerPage + "]")).click();
    };

    public itemsPerPageSelection = (): promise.Promise<string> => {
        return super.getElement().all(by.className("xui-pager__items-shown")).get(0).getText().then((test) => {
            let pages = test.split("-");
            let start = parseInt(pages[0], 10);
            let end = parseInt(pages[1], 10);
            return (end - start + 1).toString();
        });
    };

    public itemsDisplayedText = (): promise.Promise<string> => {
        return super.getElement().all(by.className("xui-pager__items-shown")).get(0).getText();
    };

    public pageLinkClick = (pageNumber: number): promise.Promise<void> => {
        return super.getElement().all(by.className("xui-pager__item-" + pageNumber)).get(0).click();
    };

    public pageLinkVisible = (pageNumber: number): promise.Promise<boolean> => {
        return super.getElement()
            .all(by.css(".pagination li[value='" + pageNumber + "'] .xui-pager__item"))
            .then((elements: ElementFinder[]) => {
                return elements.length === 1;
            });
    };

    public ellipsedPageLink = (pageNumber: number): ElementFinder => {
        return super.getElement().all(by.className("xui-pager__item-" + pageNumber)).get(0);
    };

    public ellipsisLink = (index: number): ElementFinder => {
        return super.getElement().all(by.className("xui-pager__dots")).get(index);
    };

    public ellipsisLinkClick = (index: number): promise.Promise<void> => {
        return this.ellipsisLink(index).click();
    };

    public ellipsisLinkDisplayed = (index: number): promise.Promise<boolean> => {
        return super.getElement()
            .all(by.className("xui-pager__dots"))
            .count()
            .then((count: number) => {
                return count > index;
            });
    };

    public prevLink = (): ElementFinder => {
        return super.getElement().all(by.className(this.prevNextClass)).get(0);
    };

    public nextLink = (): ElementFinder => {
        return super.getElement().all(by.className(this.prevNextClass)).get(1);
    };

    public arePrevNextLinksDisplayed = (): promise.Promise<boolean> => {
        return super.getElement()
            .all(by.css(".pagination li .move-icon"))
            .then((elements: ElementFinder[]) => {
                return elements.length === 2;
            });
    };

    public activePage = (): promise.Promise<number> => {
        return super.getElement()
            .all(by.css(".pagination li.active"))
            .get(0)
            .getText()
            .then((text: string) => {
                return parseInt(text, 10);
            });
    };

    public isActivePage = (page: number): promise.Promise<boolean> => {
        return this.activePage().then((activePage: number) => {
            return activePage === page;
        });
    };

    public pageCount = (): promise.Promise<number> => {
        return super.getElement().all(by.css(".pagination li .xui-pager__item")).count();
    };

    public async ellipsisHasTopClass(): Promise<boolean> {
        await this.ellipsisLinkClick(0);
        const dropdownElement = await super.getElement()
            .all(by.css(".xui-popup__area")).get(0);

        return await Atom.hasClass(dropdownElement, "xui-popup__area--top");
    }

    public async itemsDispHasTopClass(): Promise<boolean> {
        const itemsShownElem = await super.getElement()
            .all(by.css(".xui-pager__items-shown")).get(0);
        await itemsShownElem.click();

        const dropdownElement = await super.getElement()
                .all(by.css(".xui-popup__area")).get(0);
        return await Atom.hasClass(dropdownElement, "xui-popup__area--top");
    };
}
