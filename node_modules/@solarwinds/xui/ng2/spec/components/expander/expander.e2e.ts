import {browser, promise} from "@solarwinds/uzi/protractor";
import {ExpanderAtom} from "../index.atom";
import Helpers from "../helpers";
import {Atom} from "@solarwinds/uzi";

describe("USERCONTROL expander", () => {

    let basicExpander: ExpanderAtom;
    let headerTextAndIconExpander: ExpanderAtom;
    let headerContentExpander: ExpanderAtom;

    beforeEach(() => {
        Helpers.prepareBrowser("expander");
        basicExpander = Atom.find(ExpanderAtom, "basic-expander");
        headerTextAndIconExpander = Atom.find(ExpanderAtom, "header-text-and-icon-expander");
        headerContentExpander = Atom.find(ExpanderAtom, "header-content-expander");
    });

    it("should exist", () => {
        expect(basicExpander).toBeDefined();
        expect(headerTextAndIconExpander).toBeDefined();
        expect(headerContentExpander).toBeDefined();
    });

    it("should correctly default expanded/collapsed", () => {
        expect(basicExpander.isExpanded()).toBe(true);
        expect(headerTextAndIconExpander.isExpanded()).toBe(false);
        expect(headerContentExpander.isExpanded()).toBe(false);
    });

    it("should toggle expanded/collapsed", () => {
        expect(basicExpander.isExpanded()).toBe(true, "'basic' expander is NOT expanded before toggle");
        basicExpander.toggle();
        browser.wait(() => {
            return basicExpander.isCollapsed();
        }, 1000);
        expect(basicExpander.isExpanded()).toBe(false, "'basic' expander is expanded on toggle");

        expect(headerTextAndIconExpander.isExpanded())
            .toBe(false, "'header text and icon' expander is expanded before toggle");
        headerTextAndIconExpander.toggle();
        browser.wait(() => {
            return headerTextAndIconExpander.isExpanded();
        }, 1000);
        expect(headerTextAndIconExpander.isExpanded())
            .toBe(true, "'header text and icon' expander is NOT expanded on toggle");
    });

    it("should display content when expanded", () => {
        const contentSelectors = ["#basic-expander__dynamic-content", "#basic-expander__button-panel"];
        expect(basicExpander.isExpanded()).toBe(true);
        expect(basicExpander.isContentAttachedToDOM(contentSelectors)).toBe(true);
        expect(basicExpander.isContentDisplayed(contentSelectors)).toBe(true);
    });

    it("should remove the content from DOM when collapsed", () => {
        const contentSelectors = ["#basic-expander__dynamic-content", "#basic-expander__button-panel"];

        basicExpander.toggle();
        browser.wait(() => {
            return basicExpander.isCollapsed();
        }, 1000);
        expect(basicExpander.isExpanded()).toBe(false);
        expect(basicExpander.isContentAttachedToDOM(contentSelectors)).toBe(false);
    });

    it("should transclude the heading", () => {
        expect(basicExpander.getHeadingText()).toBe("Advanced Options");

        expect(headerContentExpander.getHeadingText())
            .toBe(["This is the content projection", "Dynamic value: 00000000"].join(" "));
    });
});
