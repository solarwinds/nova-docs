import Helpers from "../helpers";
import { by, browser } from "@solarwinds/uzi/protractor";
import { PageContentAtom, ButtonAtom } from "../index.atom";
import { Atom } from "@solarwinds/uzi";

describe("USERCONTROL pageContent", () => {
    let atom: PageContentAtom;
    let buttonAtom: ButtonAtom;

    beforeAll(() => {
        browser.ignoreSynchronization = true;
    });

    afterAll(() => {
        browser.ignoreSynchronization = false;
    });

    beforeEach(() => {
        Helpers.prepareBrowser("page-content");
        atom = Atom.find(PageContentAtom, "xui-demo-components-page-content");
        buttonAtom = Atom.find(ButtonAtom, "xui-demo-make-me-busy-button");
    });

    const expectedTitle = "Default Header Title";
    const expectedLinkText = "what is Firefly?";
    const expectedLinkTarget = "_self";
    const expectedUrl = "http://en.wikipedia.org/";
    const transcludedFooterText = "Find a crew. Find a job. Keep flying.";

    it("should use default header when no other is specified for transclusion", () => {
        expect(atom.isDefaultHeader()).toBe(true);
        const transcludedHeader = atom.getHeader();
        const title = transcludedHeader.element(by.css(".xui-page-content__header-title"));
        expect(title.getText()).toBe("Default Header Title");
    });

    it("should display title in default the header", () => {
        expect(atom.getTitle()).toBe(expectedTitle);
    });

    it("should display the link text in the default header", () => {
        expect(atom.getLinkText()).toBe(expectedLinkText);
    });

    it("should have link target", () => {
        expect(atom.getLinkTarget()).toBe(expectedLinkTarget);
    });

    it("should associate the url with the link text", () => {
        expect(atom.getLinkUrl()).toBe(expectedUrl);
    });
    
    it("should display correct icon depending on 'icon' prop", () => {
        expect(atom.isIconDisplayed("help")).toBe(true, "help");
    });

    it("should not be busy by default", () => {
        expect(atom.isBusyIndicatorDisplayed()).toBe(false);
    });

    it("should be busy after clicking 'make me busy' button", () => {
        buttonAtom.click();
        expect(atom.isBusyIndicatorDisplayed()).toBe(true);
    });

    it("should include a busy indicator with message", () => {
        buttonAtom.click();
        expect(atom.getBusyMessage()).toBe("I'm busy for a while...");
    });

    it("should show correctly transcluded footer", () => {
        expect(atom.getFooter().isDisplayed()).toBe(true);
        expect(atom.getFooter().getText()).toBe(transcludedFooterText);
    });
});
