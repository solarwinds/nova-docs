import { by, element, browser } from "@solarwinds/uzi/protractor";
import Helpers from "../helpers";
import { CodeItemAtom, ListViewAtom } from "../index.atom";
import { Atom } from "@solarwinds/uzi";

describe("USERCONTROL code item: ", () => {
    let listView_case1: ListViewAtom;
    let listView_case2: ListViewAtom;
    let listView_case3: ListViewAtom;
    let firstCodeItem: CodeItemAtom;
    let secondCodeItem: CodeItemAtom;
    let transcludedCodeItem: CodeItemAtom;
    let noLineNumberCodeItem: CodeItemAtom;

    beforeEach(() => {
        Helpers.prepareBrowser("code-item");

        listView_case1 = Atom.find(ListViewAtom, "xui-demo-listview_1");
        listView_case2 = Atom.find(ListViewAtom, "xui-demo-listview_2");
        listView_case3 = Atom.find(ListViewAtom, "xui-demo-listview_3");

        firstCodeItem = Atom.findIn(CodeItemAtom, listView_case1.getItem(0));
        secondCodeItem = Atom.findIn(CodeItemAtom, listView_case1.getItem(1));
        noLineNumberCodeItem = Atom.findIn(CodeItemAtom, listView_case2.getItem(1));
        transcludedCodeItem = Atom.findIn(CodeItemAtom, listView_case3.getItem(1));

    });

    it("should display line numbers", async () => {
        let lineNumberText = await firstCodeItem.getTextFromLineNumber("xui-code-item__line-number-text");
        //getTextFromLineNumber uses getComputedStyles to get pseudo-element's content
        // and it returns string with extra double-quotes, so it was decided to remove them
        return expect(lineNumberText.replace(/["]+/g, "")).toBe("1");
    });

    it("should not display line numbers if 'line-number' is not set", () => {
        let lineNumberText = secondCodeItem.getTextByClassName("xui-code-item__line-number");
        return expect(lineNumberText).not.toBe("1");
    });

    it("should have a black-colored background", () => {
        return expect(firstCodeItem.getBgColorAndHexIt()).toBe("#1d1d1d");
    });

    it("should have a correct number color", () => {
        return expect(secondCodeItem.getTextColorAndHexIt("hljs-number")).toBe("#d36363");
    });

    it("should have a correct text color", () => {
        return expect(firstCodeItem.getTextColorAndHexIt("hljs-built_in")).toBe("#ffffaa");
    });

    it("should have a correct color of the transcluded text", ()=> {
        return expect(transcludedCodeItem.getTranscludedColorAndHexIt()).toBe("#0079aa");
    });

    it("should not be able to select line numbers (checked using ctrl+a)", async ()=> {
        //This component has a problem with protractor's mouse movement, so it was decided to use CTRL+A,
        // hence we need to remove all except one example pages, to select less text.
        browser.executeScript(() => {
            _.each(document.querySelectorAll("h3"), (el: any, index: number) => {
                if (index !== 0) {
                    el.remove();
                }
            });
            document.querySelectorAll("h5")[0].remove();
            _.each(document.querySelectorAll("xui-listview"),
                ((element: any, index: number) => {
                    if (index !== 0) {
                        element.remove();
                    }
                })
            );
        });
        //hardcoded string to be selected with one listview element
        let hardcodedString = `EXAMPLE LISTVIEW WITH SOURCE CODE

 deny IP anti-spoofing PRIVATE-IP any log
777
 permit TCP any host 10.12.3.76 eq 80
130456
 permit TCP any host 10.12.3.76 eq 443
133
 permit TCP any host 10.12.3.231 eq 21
0
 deny IP any any log
15`;
        let selectedText = await firstCodeItem.getSelectedText();
        expect(selectedText).toEqual(hardcodedString);
    });

});
