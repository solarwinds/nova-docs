import {by, element, promise} from "@solarwinds/uzi/protractor";
import {IconAtom} from "../index.atom";
import Helpers from "../helpers";
import {Atom} from "@solarwinds/uzi";

describe("USERCONTROL icon", () => {

    beforeEach(() => {
        Helpers.prepareBrowser("icon");
    });

    it("should show each available icon size on the page", () => {
        let xSmallIcon = Atom.find(IconAtom, "xui-demo-icon-xsmall");
        expect(xSmallIcon.getSize()).toEqual(IconAtom.iconSize.xsmall);

        let smallIcon = Atom.find(IconAtom, "xui-demo-icon-small");
        expect(smallIcon.getSize()).toEqual(IconAtom.iconSize.small);

        let defaultIcon = Atom.find(IconAtom, "xui-demo-icon-default-size");
        expect(defaultIcon.getSize()).toEqual(IconAtom.iconSize.default);

        let largeIcon = Atom.find(IconAtom, "xui-demo-icon-large");
        expect(largeIcon.getSize()).toEqual(IconAtom.iconSize.large);

        let xlargeIcon = Atom.find(IconAtom, "xui-demo-icon-xlarge");
        expect(xlargeIcon.getSize()).toEqual(IconAtom.iconSize.xlarge);
    });

    it("should show icons with status on the page", () => {
        let atom = Atom.find(IconAtom, "xui-demo-icon-with-status-up");
        expect(atom.getStatus()).toEqual("up");
    });

    it("should show icons with valid counters on the page", () => {
        const atom = Atom.find(IconAtom, "xui-demo-icon-with-counter");
        expect(atom.getCounter()).toEqual("3");
    });

    it("should not show counter label if value passed to the counter attribute is not integer", () => {
        const atom = Atom.find(IconAtom, "xui-demo-icon-with-failed-counter");
        expect(atom.getCounter()).toBeNull();
    });

    it("should accept additional CSS classes", () => {
        let atom = Atom.find(IconAtom, "xui-demo-small-icon-with-extra-styling");
        expect(atom.hasClass("icon-test-style")).toBe(true);
    });

    it("should update when is-dynamic is true", () => {
        let icon = Atom.find(IconAtom, "xui-demo-dynamic-icon");
        let icon2 = element(by.id("xui-demo-dynamic-icon"));

        expect(icon.getSize()).toBe(IconAtom.iconSize.small);
        expect(icon.getStatus()).toBe("");
        expect(icon2.getAttribute("ng-reflect-icon")).toBe("add");

        return element(by.id("xui-demo-caret-down-radio")).click()
            .then(element(by.id("xui-demo-icon-size-large-radio")).click)
            .then(element(by.id("xui-demo-status-up-radio")).click)
            .then(() => {
                expect(icon.getSize()).toBe(IconAtom.iconSize.large);
                expect(icon.getStatus()).toBe("up");
                expect(icon2.getAttribute("ng-reflect-icon")).toBe("caret-down");
            });
    });

    it("should have 'icon' attr congruent to the 'icon' prop binding", () => {
        let printerIcon = Atom.find(IconAtom, "xui-demo-icon-with-status-up");
        expect(printerIcon.getName()).toEqual("printer");
        let addIcon = Atom.find(IconAtom, "xui-demo-icon-xsmall");
        expect(addIcon.getName()).toEqual("add");
    });
});
