import { by, ElementFinder, promise } from "@solarwinds/uzi/protractor";
import { Atom } from "@solarwinds/uzi";

export enum IconSize {
    small,
    default,
    large,
    xlarge
}

export class IconAtom extends Atom {
    public static CSS_CLASS = "xui-icon";

    public static iconSize = {
        xsmall: "xsm",
        small: "sm",
        default: "default",
        large: "lg",
        xlarge: "xlg"
    };

    static count(element: ElementFinder, extStyle = ""): promise.Promise<number> {
        return element.all(by.css(".xui-icon" + extStyle)).count();
    }

    public getName = (): promise.Promise<string> => {
        return super.getElement().getAttribute("icon");
    };

    public getSize(): promise.Promise<string> {
        return super.getElement().getAttribute("class").then((css: string) => {
            if (css.search(IconAtom.iconSize.xsmall) !== -1) {
                return IconAtom.iconSize.xsmall;
            } else if (css.search(IconAtom.iconSize.small) !== -1) {
                return IconAtom.iconSize.small;
            } else if (css.search(IconAtom.iconSize.xlarge) !== -1) {    // order is important here
                return IconAtom.iconSize.xlarge;
            } else if (css.search(IconAtom.iconSize.large) !== -1) {
                return IconAtom.iconSize.large;
            } else {
                return IconAtom.iconSize.default;
            }
        });
    }

    public getStatus(): promise.Promise<string> {
        return super.getElement().getAttribute("status");
    }

    public getCounter(): promise.Promise<string> {
        return super.getElement().getAttribute("counter");
    }
}
