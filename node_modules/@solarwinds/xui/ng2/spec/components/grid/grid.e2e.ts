import {promise} from "@solarwinds/uzi/protractor";
import {Atom} from "@solarwinds/uzi";
import Helpers from "../helpers";
import {GridAtom, ListViewAtom, RadioGroupAtom} from "../index.atom";

describe("USERCONTROL Grid >", () => {
    describe("simple >", () => {
        let grid: GridAtom;
        let listView: ListViewAtom;
        let selectedMode: RadioGroupAtom;
        let displayedData: RadioGroupAtom;

        beforeEach(() => {
            Helpers.prepareBrowser("grid");

            grid = Atom.find(GridAtom, "xui-demo-grid");
            listView = grid.getListView();

            selectedMode = Atom.find(RadioGroupAtom, "xui-demo-selection-mode");
            displayedData = Atom.find(RadioGroupAtom, "xui-demo-displayed-data");
        });

        describe("empty data >", () => {
            beforeEach(() => {
                displayedData.getRadioByValue("empty-data").click();
            });

            it("should display empty data by given template", () => {
                const templateTextSelector = ".empty-container.sample-custom-template p";
                const templateText = Helpers.getElementByCSS(templateTextSelector).getText();

                expect(templateText).toEqual("No result found for Node134");
            });
        });

        describe("list data >", () => {
            const selectedElementsSelector = "#xui-demo-selected-items";

            beforeEach(() => {
                displayedData.getRadioByValue("list-data").click();
            });

            it("should show list of items", () => {
                expect(listView.getItems().count()).toBe(10);
                expect(listView.getItem(5).getText()).toContain("Item 005");
            });

            describe("'multi' selection mode >", () => {
                beforeEach(async () => {
                    selectedMode.getRadioByValue("multi").click();

                    await listView.selectCheckbox(2);
                    await listView.selectCheckbox(5);
                });

                it("should mark clicked elements as selected", async () => {
                    expect(await listView.isItemSelected(2)).toBe(true);
                    expect(await listView.isItemSelected(5)).toBe(true);
                });

                it("should add clicked elements to selected", async () => {
                    const selectedElementsText = await Helpers.getElementByCSS(selectedElementsSelector).getText();
                    const selectedElements = JSON.parse(selectedElementsText);

                    expect(selectedElements.length).toBe(2);
                    expect(selectedElements[0].name).toBe("Item 002");
                    expect(selectedElements[1].name).toBe("Item 005");
                    // We can check 'value' explicitly as it is generated randomly basing on abc.
                    expect(selectedElements[0].value).toMatch(/\w{10}/);
                    expect(selectedElements[1].value).toMatch(/\w{10}/);
                });

                it("should unmark already selected element on next click", async () => {
                    await listView.selectCheckbox(2);

                    expect(await listView.isItemSelected(2)).toBe(false);
                });

                it("should remove already selected element from selected on next click", async () => {
                    await listView.selectCheckbox(2);

                    const selectedElementsText = await Helpers.getElementByCSS(selectedElementsSelector).getText();
                    const selectedElements = JSON.parse(selectedElementsText);

                    expect(selectedElements.length).toBe(1);
                    expect(selectedElements[0].name).toBe("Item 005");
                    // We can check 'value' explicitly as it is generated randomly basing on abc.
                    expect(selectedElements[0].value).toMatch(/\w{10}/);
                });
            });

            describe("'single' selection mode", () => {
                beforeEach(async () => {
                    selectedMode.getRadioByValue("single").click();

                    await listView.selectRow(2);
                });

                it("should mark clicked element as selected", async () => {
                    expect(await listView.isItemSelected(2)).toBe(true);
                });

                it("should set clicked element to selected", async () => {
                    const selectedElementsText = await Helpers.getElementByCSS(selectedElementsSelector).getText();
                    const selectedElements = JSON.parse(selectedElementsText);

                    expect(selectedElements.length).toBe(1);
                    expect(selectedElements[0].name).toBe("Item 002");
                    // We can check 'value' explicitly as it is generated randomly basing on abc.
                    expect(selectedElements[0].value).toMatch(/\w{10}/);
                });

                it("should unmark previously selected element on selection of different one", async () => {
                    await listView.selectRow(5);

                    expect(await listView.isItemSelected(2)).toBe(false);
                });

                it("should move out previously selected element from selected on selection of different one",
                    async () => {
                        await listView.selectRow(5);

                        const selectedElementsText = await Helpers.getElementByCSS(selectedElementsSelector).getText();
                        const selectedElements = JSON.parse(selectedElementsText);

                        expect(selectedElements.length).toBe(1);
                        expect(selectedElements[0].name).toBe("Item 005");
                        // We can check 'value' explicitly as it is generatclsed randomly basing on abc.
                        expect(selectedElements[0].value).toMatch(/\w{10}/);
                    });
            });

            describe("'none' selection mode", () => {
                beforeEach(async () => {
                    selectedMode.getRadioByValue("none").click();
                    await listView.selectRow(2);
                });

                it("should ignore selection on click", async () => {
                    expect(await listView.isItemSelected(2)).toBe(false);

                    const selectedElementsText = await Helpers.getElementByCSS(selectedElementsSelector).getText();
                    const selectedElements = JSON.parse(selectedElementsText);

                    expect(selectedElements.length).toBe(0);
                });
            });
        });
    });
});
