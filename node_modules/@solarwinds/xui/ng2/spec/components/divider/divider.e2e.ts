import {promise, by} from "@solarwinds/uzi/protractor";
import {DividerAtom} from "../index.atom";
import Helpers from "../helpers";
import {Atom} from "@solarwinds/uzi";

describe("USERCONTROL divider", () => { 
    let dividerHorizontalDefault: DividerAtom;
    let dividerHorizontalZeroMargin: DividerAtom;
    let dividerHorizontalCustomMargin: DividerAtom;
    let dividerVerticalDefault: DividerAtom;
    let dividerVerticalZeroMargin: DividerAtom;
    let dividerVerticalCustomMargin: DividerAtom;

    beforeEach(() => {
        Helpers.prepareBrowser("divider");
        dividerHorizontalDefault = Atom.find(DividerAtom, "xui-demo-divider-horizontal-default");
        dividerHorizontalZeroMargin = Atom.find(DividerAtom, "xui-demo-divider-horizontal-zero-margin");
        dividerHorizontalCustomMargin = Atom.find(DividerAtom, "xui-demo-divider-horizontal-custom-margin");
        dividerVerticalDefault = Atom.find(DividerAtom, "xui-demo-divider-vertical-default");
        dividerVerticalZeroMargin = Atom.find(DividerAtom, "xui-demo-divider-vertical-zero-margin");
        dividerVerticalCustomMargin = Atom.find(DividerAtom, "xui-demo-divider-vertical-custom-margin");
    });

    it("should apply css class depending on 'vertical' prop", () => {
        expect(dividerHorizontalDefault.isVertical()).toEqual(false);
        expect(dividerVerticalDefault.isVertical()).toEqual(true);
    });

    it("should contain <hr> element if horizontal", () => {
        expect(dividerHorizontalDefault.isChildElementPresent(by.tagName("hr"))).toEqual(true);
    });

    it("should not contain <hr> element if vertical", () => {
        expect(dividerVerticalDefault.isChildElementPresent(by.tagName("hr"))).toEqual(false);
    });

    it("should have inner <hr> element with height of 1px if horizontal", () => {
        let el = dividerHorizontalDefault.getElement().element(by.tagName("hr"));
        expect(el.getCssValue("height")).toEqual("1px");
    });

    it("should have inner <hr> element with default margin '15px 0px' if horizontal", () => {
        expect(dividerHorizontalDefault.getCssMarginValue()).toEqual("15px 0px");
    });

    it("should have custom margin of inner <hr> element if horizontal", () => {
        expect(dividerHorizontalZeroMargin.getCssMarginValue()).toEqual("0px");
        expect(dividerHorizontalCustomMargin.getCssMarginValue()).toEqual("5px 0px");
    });

    it("should have width 1px if vertical", () => {
        let el = dividerVerticalDefault.getElement();
        expect(el.getCssValue("width")).toEqual("1px");
    });

    it("should have default '5px 0px' margin if vertical", () => {
        expect(dividerVerticalDefault.getCssMarginValue()).toEqual("0px 5px");
    });

    it("should have custom margin if vertical", () => {
        expect(dividerVerticalZeroMargin.getCssMarginValue()).toEqual("0px");
        expect(dividerVerticalCustomMargin.getCssMarginValue()).toEqual("0px 15px");
    });
    
});
