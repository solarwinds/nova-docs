import { Atom } from "@solarwinds/uzi";
import { IconAtom } from "../index.atom";
import { by, ElementFinder, promise } from "@solarwinds/uzi/protractor";

export class PanelAtom extends Atom {
    public static CSS_CLASS = "xui-panel";
    public static COLLAPSED_CSS = "xui-is-collapsed";
    public static EXPANDED_ICON_VALUE = "double-caret-left";
    public static COLLAPSED_ICON_VALUE = "double-caret-right";
    public static ICON_CSS = "xui-panel__heading-icon";

    public getToggleButtonElement = (): ElementFinder => 
        super.getElement().element(by.css(".xui-panel__heading-btn:nth-child(1)"));

    public getToggleIconAtom = (): IconAtom => 
        Atom.findIn(IconAtom, this.getToggleButtonElement().element(by.className("xui-panel__heading-icon")));

    public getHeaderIconAtom = (state: "collapsed" | "expanded"): IconAtom => {
        const selector = `${PanelAtom.ICON_CSS}--${state}`;
        return Atom.findIn(IconAtom, super.getElement().element(by.className(selector)));
    };

    public isCollapsed = (): Promise<boolean> => super.hasClass(PanelAtom.COLLAPSED_CSS);

    public isExpanded = (): Promise<boolean> => 
        super.hasClass(PanelAtom.COLLAPSED_CSS).then((value: boolean) => !value);

    public isIconShowsCollapsed = (): promise.Promise<boolean> => 
        this.getToggleIconAtom().getName().then((val) => val === PanelAtom.COLLAPSED_ICON_VALUE);

    public isIconShowsExpanded = (): promise.Promise<boolean> => 
        this.getToggleIconAtom().getName().then((val) => val === PanelAtom.EXPANDED_ICON_VALUE);

    public headingText = (): promise.Promise<string> => 
        super.getElement().element(by.css(".xui-panel__heading-content h4")).getText();
}
