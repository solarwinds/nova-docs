import Helpers from "../helpers";
import { PanelAtom, IconAtom } from "../index.atom";
import { Atom } from "@solarwinds/uzi";
import { by, element, browser, ElementFinder, promise } from "@solarwinds/uzi/protractor";

describe("USERCONTROL Panel", () => {
    let panelAtom: PanelAtom;
    let headerIconAtom: IconAtom;

    beforeEach(() => {
        Helpers.prepareBrowser("panel");
        panelAtom = Atom.find(PanelAtom, "xui-demo-components-panel");
    });

    it("Should have button with correct icon when not collapsed and isCollapsible is true", async () => {
        const headingBtnEl: ElementFinder = panelAtom.getToggleButtonElement();
        expect(await headingBtnEl.isDisplayed()).toBe(true);
        expect(await panelAtom.isIconShowsCollapsed()).toEqual(false);
        expect(await panelAtom.isIconShowsExpanded()).toEqual(true);
    });

    it("Should change icon when collapsed", async () => {
        const headingBtnEl: ElementFinder = panelAtom.getToggleButtonElement();
        await headingBtnEl.click();
        expect(await panelAtom.isIconShowsCollapsed()).toEqual(true);
        expect(await panelAtom.isIconShowsExpanded()).toEqual(false);
    });

    it("Should not be button when isCollapsible is false", async () => {
        const isCollapsibleFalseRadioBtn: ElementFinder = element(by.id("xui-demo-is-collapsible-false"));
        await isCollapsibleFalseRadioBtn.click();
        const headingBtnEl: ElementFinder = panelAtom.getToggleButtonElement();
        expect(await headingBtnEl.isPresent()).toBe(false);
    });

    it("Should toggle panel css class upon icon click ", async () => {
        const headingBtnEl: ElementFinder = panelAtom.getToggleButtonElement();
        expect(await panelAtom.isExpanded()).toBe(true, "initial state of panel to be expanded");
        expect(await panelAtom.isCollapsed()).toBe(false, "initial state of panel to be expanded");
        await headingBtnEl.click();
        await browser.sleep(400);
        expect(await panelAtom.isCollapsed()).toBe(true, "check if panel is collapsed upon click");
        expect(await panelAtom.isExpanded()).toBe(false, "check if panel is collapsed upon click");
        await headingBtnEl.click();
        await browser.sleep(400);
        expect(await panelAtom.isCollapsed()).toBe(false, "check if panel is expanded upon second click");
        expect(await panelAtom.isExpanded()).toBe(true, "check if panel is expanded upon second click");
    });

    it("Check that correct page heading is shown", async () => {
        expect(await panelAtom.headingText()).toBe("HEADER");
    });

    it("Check that components are correctly transcluded into the panel", async () => {
        expect(await element(by.id("xui-demo-left-pane-transcluded")).isDisplayed()).toBe(true);
    });

    it("should show icon counter only if the panel is collapsed", async () => {
        const headingBtnEl: ElementFinder = panelAtom.getToggleButtonElement();
        await headingBtnEl.click();
        await browser.sleep(400);
        expect(await panelAtom.getHeaderIconAtom("collapsed").getCounter()).toEqual("7");
        await headingBtnEl.click();
        await browser.sleep(400);
        expect(await panelAtom.getHeaderIconAtom("expanded").getCounter()).toBeNull();
    });
});
