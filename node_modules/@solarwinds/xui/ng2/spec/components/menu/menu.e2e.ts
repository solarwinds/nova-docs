import { browser, by, ElementFinder } from "@solarwinds/uzi/protractor";
import { Atom } from "@solarwinds/uzi";

import { MenuAtom } from "./menu.atom";
import Helpers from "../helpers";

describe("USERCONTROL Menu", () => {

    let defaultMenu: MenuAtom;
    let tertiaryMenu: MenuAtom;
    let primaryMenu: MenuAtom;
    let jsonMenu: MenuAtom;

    let optionDisabled: ElementFinder;

    beforeEach(() => {
        Helpers.prepareBrowser("menu");

        defaultMenu = Atom.find(MenuAtom, "xui-demo-default-menu");
        tertiaryMenu = Atom.find(MenuAtom, "xui-demo-tertiary-menu");
        primaryMenu = Atom.find(MenuAtom, "xui-demo-primary-menu");
        jsonMenu = Atom.find(MenuAtom, "xui-demo-json-menu");

        optionDisabled = defaultMenu.getItemByText("Disabled");
    });

    describe("> action, option items", () => {

        let resultEl: ElementFinder;
        let actionItem: ElementFinder;

        beforeEach(() => {
            resultEl = browser.element(by.id("xui-demo-action-clicks-res"));
            actionItem = defaultMenu.getItemByText("Action");
        });

        it("should perform action on click", () => {
            defaultMenu.toggleMenu();
            expect(resultEl.getText()).toEqual("0");

            actionItem.click();
            expect(resultEl.getText()).toEqual("1");
        });

        it("should not perform action on click when disabled", () => {
            defaultMenu.toggleMenu();
            expect(resultEl.getText()).toEqual("0");

            optionDisabled.click();
            actionItem.click();
            expect(resultEl.getText()).toEqual("0");
        });

    });

    describe("> link, option items", () => {

        let linkItem: ElementFinder;

        beforeEach(() => {
            linkItem = defaultMenu.getItemByText("Button");
        });

        it("should redirect to xui-button on click", async () => {
            defaultMenu.toggleMenu();
            linkItem.click();

            const hash = await browser.executeScript<string>(() => {
                return location.hash;
            }, 3000);

            expect(hash).toEqual("#/button");
        });

        it("should not redirect to xui-button on click", async () => {
            defaultMenu.toggleMenu();
            optionDisabled.click();
            linkItem.click();

            const hash = await browser.executeScript<string>(() => {
                return location.hash;
            }, 3000);

            expect(hash).toEqual("#/menu");
        });

    });

    describe("> menu filled by json data", () => {

        let linkMenu: ElementFinder;
        let actionMenu: ElementFinder;
        let headerMenu: ElementFinder;

        beforeEach(() => {
            jsonMenu.toggleMenu();
        });

        it("should find menu-link", () => {
            linkMenu = browser.element(by.css("xui-menu-link"));
            expect(linkMenu.isPresent()).toBeTruthy();
        });

        it("should find menu-action", () => {
            actionMenu = browser.element(by.css("xui-menu-action"));
            expect(actionMenu.isPresent()).toBeTruthy();
        });

        it("should find menu-header", () => {
            headerMenu = browser.element(by.css("xui-menu-header"));
            expect(headerMenu.isPresent()).toBeTruthy();
        });

        it("should find all menu-item in menu filled by json data", () => {
            expect(jsonMenu.itemCount()).toEqual(13);
        });
    });

});
