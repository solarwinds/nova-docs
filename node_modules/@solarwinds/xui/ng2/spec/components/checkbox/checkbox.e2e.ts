import {by, element, promise} from "@solarwinds/uzi/protractor";
import Helpers from "../helpers";
import {CheckboxAtom} from "../index.atom";
import {Atom} from "@solarwinds/uzi";

describe("USERCONTROL Checkbox", () => {
    let atom: CheckboxAtom;
    let atomDisabled: CheckboxAtom;
    let atomIndeterminate: CheckboxAtom;
    
    beforeEach(() => {
        Helpers.prepareBrowser("checkbox");
        atom = Atom.find(CheckboxAtom, "xui-demo-checkbox");
        atomDisabled = Atom.find(CheckboxAtom, "xui-demo-checkbox-disabled");
        atomIndeterminate = Atom.find(CheckboxAtom, "xui-demo-checkbox-indeterminate");
    });

    describe("Value section:", () => {
        it("should check and uncheck when clicked", () => {
            expect(atom.isChecked()).toBe(false);

            atom.click();
            expect(atom.isChecked()).toBe(true);

            atom.click();
            expect(atom.isChecked()).toBe(false);
        });
    });

    describe("Disable section:", () => {
        it("should disable and enable when the model changes", () => {
            expect(atomDisabled.isDisabled()).toBe(true);
        });
    });

    describe("Attribute section:", () => {
        it("should have title based on 'title' attribute", () => {
            const label = atom.getLabel();
            expect(label.getAttribute("title")).toEqual("Check box with help text");
        });

        it("should use help text based 'help-text' attribute", () => {
            expect(atom.getHelpHintText()).toEqual("This is some help text");
        });

        it("should be required", () => {
            expect(atom.isRequired()).toBe(true);
        });

        it("should set indeterminate value on script object from 'is-indeterminate' attribute", () => {
            expect(atomIndeterminate.isIndeterminate()).toEqual(true);
        });
    });

    describe("Content section:", () => {
        it("content should be transcluded", async () => {
            expect(atom.getContent()).toEqual("Check box with help text");
        });
    });
});
