import { browser, by } from "@solarwinds/uzi/protractor";
import { ElementFinder } from "@solarwinds/uzi/protractor";
import { Atom } from "@solarwinds/uzi";

import { SelectorAtom } from "./selector.atom";
import Helpers from "../helpers";

enum SelectionType {
    All = "All",
    None = "None",
    AllPages = "All pages",
    Indeterminate = "Indeterminate"
}

describe("USERCONTROL Selector", () => {

    const demoElementId = "xui-demo-selector";

    let subject: SelectorAtom;
    let selectionElement: ElementFinder;
    let tempSelectionText: string;

    const getSelectionElement = (): ElementFinder => {
        return browser.element(by.id("xui-demo-selection-type"));
    };

    const isIndeterminate = async (): Promise<boolean> => {
        return (await browser.element(by.id("xui-demo-indeterminate")).getText()) === "true";
    };

    const makeIndeterminate = async (): Promise<void> => {
        return browser.element(by.id("xui-demo-make-indeterminate")).click();
    };

    beforeEach(() => {
        browser.ignoreSynchronization = true;

        Helpers.prepareBrowser("selector");
        browser.wait(() => subject.getElement().isDisplayed(), 3000);

        subject = Atom.find(SelectorAtom, demoElementId);
        selectionElement = getSelectionElement();
    });

    it("should get appropriate 'SelectionType' state by clicking list item", async () => {
        tempSelectionText = await selectionElement.getText();
        await subject.select(SelectionType.All);
        await Helpers.waitForTextChanges(selectionElement, tempSelectionText);
        expect(await selectionElement.getText()).toEqual(SelectionType.All);

        tempSelectionText = await selectionElement.getText();
        await subject.select(SelectionType.None);
        await Helpers.waitForTextChanges(selectionElement, tempSelectionText);
        expect(await selectionElement.getText()).toEqual(SelectionType.None);

        tempSelectionText = await selectionElement.getText();
        await subject.select(SelectionType.All);
        await subject.select(SelectionType.AllPages);
        expect(await selectionElement.getText()).toEqual(SelectionType.AllPages);
    });

    it("should get 'SelectionType' (All, None) by changing checkbox state", async () => {
        const selectorCheckbox = await subject.getCheckbox(demoElementId);

        tempSelectionText = await selectionElement.getText();
        selectorCheckbox.click();
        await Helpers.waitForTextChanges(selectionElement, tempSelectionText);
        expect(await selectionElement.getText()).toEqual(SelectionType.All);

        tempSelectionText = await selectionElement.getText();
        selectorCheckbox.click();
        await Helpers.waitForTextChanges(selectionElement, tempSelectionText);
        expect(await selectionElement.getText()).toEqual(SelectionType.None);
    });

    it("should get 'SelectionType' state equal to 'Indeterminate'", async () => {
        tempSelectionText = await selectionElement.getText();
        await subject.select(SelectionType.AllPages);
        await Helpers.waitForTextChanges(selectionElement, tempSelectionText);
        expect(await isIndeterminate()).toBe(false);

        tempSelectionText = await selectionElement.getText();
        await makeIndeterminate();
        await Helpers.waitForTextChanges(selectionElement, tempSelectionText);
        expect(await getSelectionElement().getText()).toEqual(SelectionType.Indeterminate);
        expect(await isIndeterminate()).toBe(true);
    });

});
