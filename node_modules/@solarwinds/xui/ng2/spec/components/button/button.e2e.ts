import { promise, 
         Key, 
         by, 
         element, 
         browser 
        } from "@solarwinds/uzi/protractor";
import Helpers from "../helpers";
import { ButtonAtom } from "../index.atom";
import { Atom } from "@solarwinds/uzi";

describe("USERCONTROL Button", () => {
    let primarySmallBtn: ButtonAtom;
    let primaryLargePlusIconBtn: ButtonAtom;
    let primaryLargePlusIconDisabledBtn: ButtonAtom;
    let primaryLargePlusIconBusyBtn: ButtonAtom;
    let secondarySmallBtn: ButtonAtom;
    let secondaryBtn: ButtonAtom;
    let secondaryLargeBtn: ButtonAtom;
    let tertiarySmallBtn: ButtonAtom;
    let linkSmallBtn: ButtonAtom;
    let upBtn: ButtonAtom;
    let dynamicBtn: ButtonAtom;

    beforeEach(() => {
        Helpers.prepareBrowser("button");
        primarySmallBtn = Atom.find(ButtonAtom, "xui-demo-primary-small-btn");
        primaryLargePlusIconBtn = Atom.find(ButtonAtom, "xui-demo-primary-large-plus-icon-btn");
        primaryLargePlusIconDisabledBtn = Atom.find(ButtonAtom, "xui-demo-primary-large-plus-icon-disabled-btn");
        primaryLargePlusIconBusyBtn = Atom.find(ButtonAtom, "xui-demo-primary-large-plus-icon-busy-btn");
        secondarySmallBtn = Atom.find(ButtonAtom, "xui-demo-secondary-small-btn");
        secondaryBtn = Atom.find(ButtonAtom, "xui-demo-secondary-btn");
        secondaryLargeBtn = Atom.find(ButtonAtom, "xui-secondary-large-btn");
        tertiarySmallBtn = Atom.find(ButtonAtom, "xui-demo-tertiary-small-btn");
        linkSmallBtn = Atom.find(ButtonAtom, "xui-demo-link-small-btn");
        upBtn = Atom.find(ButtonAtom, "xui-demo-up-btn");
        dynamicBtn = Atom.find(ButtonAtom, "xui-demo-dynamic-btn");
    });

    describe("USERCONTROL Button", () => {

        it("should be visible", () => {
            expect(primarySmallBtn.isVisible()).toBe(true, "xui-demo-primary-small-btn");
        });

        it("should always have .xui-button class", () => {
            expect(primarySmallBtn.hasClass("xui-button")).toBe(true);
            expect(secondaryLargeBtn.hasClass("xui-button")).toBe(true);
        });

        it("should always have .btn class", () => {
            expect(primarySmallBtn.hasClass("btn")).toBe(true);
            expect(secondaryLargeBtn.hasClass("btn")).toBe(true);
        });

        it("should have textColor depending on 'displayStyle' attribute", () => {
            expect(primarySmallBtn.getTextColor()).toBe("rgba(255, 255, 255, 1)", "xui-demo-primary-small-btn");
        });

        it("should have background color depending on 'displayStyle' attribute", () => {
            expect(primarySmallBtn.getBackgroundColor()).toBe("rgba(41, 121, 148, 1)", "xui-demo-primary-small-btn");
        });

        it("should have border style depending on 'displayStyle' attribute", () => {
            expect(primarySmallBtn.getBorderStyle()).toBe("rgb(41, 121, 148)", "xui-demo-primary-small-btn");
        });

        it("should have type class based on 'size' attribute", () => {
            expect(primarySmallBtn.hasClass("btn-sm")).toBe(true, "xui-demo-primary-small-btn");
            expect(secondaryLargeBtn.hasClass("btn-lg")).toBe(true, "xui-secondary-large-btn");
        });

        it("should have type class based on 'displayStyle' attribute", () => {
            expect(primarySmallBtn.hasClass("btn-primary")).toBe(true, "xui-demo-primary-small-btn");
            expect(secondaryLargeBtn.hasClass("btn-secondary")).toBe(true, "xui-secondary-large-btn");
            expect(tertiarySmallBtn.hasClass("xui-btn-tertiary")).toBe(true, "xui-demo-tertiary-small-btn");
            expect(linkSmallBtn.hasClass("xui-btn-link")).toBe(true, "xui-demo-link-small-btn");
        });

        it("should have 'btn-default' css class if 'displayStyle' prop is not defined", () => {
            expect(secondaryBtn.hasClass("btn-default")).toBe(true, "xui-demo-secondary-btn");
        });

        it("should not override user classes in host element with its own classes", () => {
            expect(secondaryBtn.hasClass("testClass")).toBe(true, ".testClass at xui-demo-secondary-btn");
            expect(secondaryLargeBtn.hasClass("testClass")).toBe(true, ".testClass at xui-secondary-large-btn");
        });

        it("should not display icon by default", () => {
            primarySmallBtn.getIcon().then((icon) => {
                expect(icon).toBeUndefined();
            });
        });

        it("should display icon when configured", () => {
            expect(primaryLargePlusIconBtn.isIconShown()).toBe(true, "xui-demo-primary-large-plus-icon-btn");
            expect(secondaryBtn.isIconShown()).toBe(true, "xui-demo-secondary-btn");
        });

        it("should have appropriate icon size depending on button size", () => {
            primaryLargePlusIconBtn.getIcon().then((icon) => {
                expect(icon.getSize()).toBe("default");
            });
            secondaryBtn.getIcon().then((icon) => {
                expect(icon.getSize()).toBe("default");
            });
            secondarySmallBtn.getIcon().then((icon) => {
                expect(icon.getSize()).toBe("sm");
            });
        });

        it("should be disabled with 'disabled' DOM property", () => {
            expect(primaryLargePlusIconDisabledBtn.isDisabled())
                .toBe(true, "xui-demo-primary-large-plus-icon-disabled-btn");
        });

        it("should show icon with 'icon' prop", () => {
            expect(primaryLargePlusIconBtn.isIconShown())
                .toBe(true, "xui-demo-primary-large-plus-icon-btn");
            expect(primaryLargePlusIconDisabledBtn.isIconShown())
                .toBe(true, "xui-demo-primary-large-plus-icon-disabled-btn false");
        });

        it("should not show icon when not configured 'icon' prop", () => {
            expect(primarySmallBtn.isIconShown()).toBe(false, "xui-demo-primary-small-btn");
        });

        it("should be busy showed depending on 'isBusy' prop", () => {
            expect(primaryLargePlusIconBusyBtn.isBusy()).toBe(true, "xui-demo-primary-large-plus-icon-busy-btn");
            expect(primaryLargePlusIconBtn.isBusy()).toBe(false, "xui-demo-primary-large-plus-icon-busy-btn");
        });

        it("should accept mouse and keyboard events", () => {
            const resultSpan = Helpers.getElementByCSS("#xui-demo-click-results");
            resultSpan.getText().then((value) => {
                let count: number = parseInt(value, 10);
                upBtn.click();
                upBtn.getElement().sendKeys(Key.ENTER);
                expect(resultSpan.getText()).toBe(String(count + 2));
            });
        });

        it("should have left/right icon css class depending on 'iconRight' prop", async () => {
            await expect(dynamicBtn.hasClass("icon-left")).toEqual(true, ".icon-left if false");
            await expect(dynamicBtn.hasClass("icon-right")).toEqual(false, ".icon-right if true");
            let iconRightInput = element(by.id("xui-demo-button-icon-right"));
            iconRightInput.click();
            await expect(dynamicBtn.hasClass("icon-right")).toEqual(true, ".icon-left if false");
            await expect(dynamicBtn.hasClass("icon-left")).toEqual(false, ".icon-right if true");
        });

        it("should have .is-empty class if host's innerHTML is empty", () => {
            expect(upBtn.hasClass("is-empty")).toEqual(true);
        });

        it("should not have .is-empty class if host's innerHTML is not empty", () => {
            expect(primarySmallBtn.hasClass("is-empty")).toEqual(false);
        });

        it("should fire event twice when clicking twice", () => {
            const resultSpan = Helpers.getElementByCSS("#xui-demo-click-results");
            resultSpan.getText().then((value) => {
                let count: number = parseInt(value, 10);
                upBtn.click();
                upBtn.click();
                expect(resultSpan.getText()).toBe(String(count + 2));
            });
        });

        it("should keep firing event when mousekey is hold if 'isRepeat' is true", () => {
            const isRepeatOn = Helpers.getElementByCSS("#is-repeat-on");
            isRepeatOn.click();
            const resultSpan = Helpers.getElementByCSS("#xui-demo-click-results");
            resultSpan.getText().then((value) => {
                let count: number = parseInt(value, 10);
                upBtn.mouseClickHold(1000);
                expect(resultSpan.getText()).toBeGreaterThan(count + 3);
            });
        });

        it("should fire event once even when mousekey is hold if 'isRepeat' is false", () => {
            const isRepeatOff = Helpers.getElementByCSS("#is-repeat-off");
            isRepeatOff.click();
            const resultSpan = Helpers.getElementByCSS("#xui-demo-click-results");
            resultSpan.getText().then((value) => {
                let count: number = parseInt(value, 10);
                upBtn.mouseClickHold(700);
                expect(resultSpan.getText()).toBe(String(count + 1));
            });
        });
    });
});
