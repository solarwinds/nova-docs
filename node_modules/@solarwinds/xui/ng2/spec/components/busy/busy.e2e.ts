import {browser, by, element, ExpectedConditions, promise} from "@solarwinds/uzi/protractor";
import Helpers from "../helpers";
import {BusyAtom, ButtonAtom, ProgressAtom} from "../index.atom";
import {Atom} from "@solarwinds/uzi";

describe("USERCONTROL Busy", () => {
    let busyAtom: BusyAtom;
    let saveNotesBtn: ButtonAtom;

    beforeAll(() => {
        browser.ignoreSynchronization = true;
    });

    afterAll(() => {
        browser.ignoreSynchronization = false;
    });

    beforeEach(() => {
        Helpers.prepareBrowser("busy");
        busyAtom = Atom.findIn(BusyAtom, element(by.id("xui-demo-busy-host")));
        saveNotesBtn = Atom.find(ButtonAtom, "xui-demo-save-button");
    });

    it("should append container to the attached element", () => {
        expect(busyAtom.isAppended()).toBe(true);
    });

    it("should not container be visible when inactive", () => {
        expect(busyAtom.isDisplayed()).toBe(false);
    });

    it("should container be visible when active", () => {
        saveNotesBtn.click();
        expect(busyAtom.isDisplayed()).toBe(true);
    });

    it("should have wrapping div with xui-busy__overlay css class when active", () => {
        saveNotesBtn.click();
        expect(busyAtom.isBusy()).toBe(true);
    });

    it("should display progress bar when showProgress is true", () => {
        saveNotesBtn.click();
        expect(busyAtom.isBusy()).toBe(true);
        expect(busyAtom.isProgressBarDisplayed()).toBe(true);
    });

    it("should be cancellable when allowCancel is true", () => {
        saveNotesBtn.click();
        let progressAtom: ProgressAtom = busyAtom.getProgress();
        expect(progressAtom.canCancel()).toBe(true);
    });

    it("should be inactive when cancelled", () => {
        saveNotesBtn.click();
        let progressAtom: ProgressAtom = busyAtom.getProgress();
        progressAtom.cancelProgress();
        let EC = ExpectedConditions;
        let isProgressDisappeared = EC.invisibilityOf(progressAtom.getElement());
        browser.wait(isProgressDisappeared, 1000);
        expect(busyAtom.isBusy()).toBe(false);
    });

    it("should set busy message when busy", () => {
        saveNotesBtn.click();
        let progressAtom: ProgressAtom = busyAtom.getProgress();
        expect(progressAtom.getMessage()).toEqual("Saving...");
    });

    it("should set busy message when busy", () => {
        saveNotesBtn.click();
        let progressAtom: ProgressAtom = busyAtom.getProgress();
        expect(progressAtom.getMessage()).toEqual("Saving...");
    });
});
