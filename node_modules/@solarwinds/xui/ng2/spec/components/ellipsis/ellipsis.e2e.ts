import {browser, by, promise} from "@solarwinds/uzi/protractor";
import {Atom} from "@solarwinds/uzi";
import {EllipsisAtom} from "./ellipsis.atom";
import Helpers from "../helpers";

// issue with browser.manage().window().setSize(x, y)
// https://jira.solarwinds.com/browse/UIF-6867
xdescribe("USERCONTROL ellipsis", () => {

    beforeEach(() => {
        Helpers.prepareBrowser("ellipsis");
    });

    const defaultEllipsis = Atom.find(EllipsisAtom, "xui-demo-default-ellipsis");
    const htmlBindEllipsis = Atom.find(EllipsisAtom, "xui-demo-htmlBind-ellipsis");
    const nestedFlexEllipsis = Atom.find(EllipsisAtom, "xui-demo-nestedFlex-ellipsis");
    const isTooltipEnabledEllipsis = Atom.find(EllipsisAtom, "xui-demo-isTooltipEnabled-ellipsis");

    const defaultTitle = "XUI Ellipsis component wraps text of its target and create ellipsis effect.";

    it("should properly populate 'title'", () => {
        expect(defaultEllipsis.getTitle()).toBe(defaultTitle);
        browser.manage().window().setSize(340, 880);
        defaultEllipsis.moveMouseToTarget();
        expect(defaultEllipsis.getEllipsedAttribute("title")).toBe(defaultTitle);
    });

    it("should remove 'title' while text is full length", () => {
        browser.manage().window().setSize(1540, 880);
        expect(defaultEllipsis.getEllipsedAttribute("title")).toBe("");
    });

    xit("should bindHtml with xuiHighlight:'highlighted' filter", () => {
        expect(htmlBindEllipsis.getElement().element(by.css(".xui-highlighted")).getText()).toBe("highlighted");
    });

    it("should properly populate 'title' in nested flexbox structure", () => {
        expect(nestedFlexEllipsis.getTitle()).toBe(defaultTitle);
        browser.manage().window().setSize(340, 880);
        nestedFlexEllipsis.moveMouseToTarget();
        expect(nestedFlexEllipsis.getEllipsedAttribute("title")).toBe(defaultTitle);
    });

    it("should remove 'title' while text is full length in nested flexbox structure", () => {
        browser.manage().window().setSize(1540, 880);
        expect(nestedFlexEllipsis.getEllipsedAttribute("title")).toBe("");
    });

    it("should toggle tooltip while switching isTooltipEnabled", () => {
        const checkBox = browser.element(by.id("xui-demo-enableTooltip-ellipsis"));
        checkBox.click();
        expect(isTooltipEnabledEllipsis.getEllipsedAttribute("title")).toBe(defaultTitle);
        checkBox.click();
        expect(isTooltipEnabledEllipsis.getEllipsedAttribute("title")).toBe("");
    });

});
