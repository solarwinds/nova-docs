import { promise, browser, by } from "@solarwinds/uzi/protractor";
/* Temporary solution for getting absolute file path */
import * as path from "path";

import Helpers from "../helpers";
import { Atom } from "@solarwinds/uzi";
import { FileUploadAtom } from "./file-upload.atom";
import {ButtonAtom} from "../button/button.atom";

describe("USERCONTROL file-upload: ", () => {
    let atom: FileUploadAtom;

    beforeEach(() => {
        Helpers.prepareBrowser("file-upload");
        atom = Atom.find(FileUploadAtom, "xui-demo-file-upload");
        browser.ignoreSynchronization = true;
    });

    afterEach(() => {
        browser.ignoreSynchronization = false;
    });

    it("has only 'Browse' and hint visible by default", () => {
        expect(atom.getBrowseButton().isDisplayed()).toBeTruthy();
        expect(atom.getNofileHint().isDisplayed()).toBeTruthy();
        expect(atom.getChangeButton().isPresent()).toBeFalsy();
        expect(atom.getRemoveButton().isPresent()).toBeFalsy();
        expect(atom.getDisplayedFileName()).toBe("");
    });

    it("changes state after file was selected", async () => {
        const fileToUpload = __filename;

        //Set file's path as input (file type) value
        await atom.selectFile(fileToUpload);

        expect(await atom.getBrowseButton().isPresent()).toBeFalsy();
        expect(await atom.getNofileHint().isPresent()).toBeFalsy();
        expect(await atom.getChangeButton().isDisplayed()).toBeTruthy();
        expect(await atom.getRemoveButton().isDisplayed()).toBeTruthy();
        expect(await atom.getDisplayedFileName()).toBe(path.basename(fileToUpload));
    });

    it("returns to default state on clicking 'Remove'", async () => {
        const fileToUpload = __filename;

        await atom.selectFile(fileToUpload);
        expect(await atom.getRemoveButton().isDisplayed()).toBeTruthy();
        await atom.getRemoveButton().click();
        expect(await atom.getBrowseButton().isDisplayed()).toBeTruthy();
        expect(await atom.getNofileHint().isDisplayed()).toBeTruthy();
        expect(await atom.getChangeButton().isPresent()).toBeFalsy();
        expect(await atom.getRemoveButton().isPresent()).toBeFalsy();
        expect(await atom.getDisplayedFileName()).toBe("");
    });

    it("validation state by default is disabled", async () => {
        const id = "xui-demo-file-upload-validation";
        const atomWithValidation = Atom.find(FileUploadAtom, id);
        expect (await atomWithValidation.getInvalidLabel().isPresent()).toBeFalsy();
    });

    it("triggers validation if form submitted without file", async () => {
        const id = "xui-demo-file-upload-validation";
        const submitButtonId = "xui-demo-file-submit-button";
        const atomWithValidation = Atom.find(FileUploadAtom, id);
        const submitButton = Atom.find(ButtonAtom, submitButtonId);
        await submitButton.click();
        expect(await atomWithValidation.getInvalidLabel().isDisplayed()).toBeTruthy();
    });
});
