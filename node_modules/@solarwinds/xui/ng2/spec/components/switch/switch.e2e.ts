import {browser, by, element, promise, Key} from "@solarwinds/uzi/protractor";
import Helpers from "../helpers";
import {Atom} from "@solarwinds/uzi";
import {ButtonAtom, SwitchAtom} from "../index.atom";

describe("USERCONTROL switch", () => {
    let switchComponent: SwitchAtom;
    let disabledSwitchComponent: SwitchAtom;
    let button: ButtonAtom;

    beforeEach(() => {
        Helpers.prepareBrowser("switch");
        switchComponent = Atom.find(SwitchAtom, "xui-demo-switch-basic");
        disabledSwitchComponent = Atom.find(SwitchAtom, "xui-demo-switch-disabled");
        button = Atom.find(ButtonAtom, "xui-demo-switch-button");
    });

    it("should be switched on by default ", () => {
        expect(switchComponent.isOn()).toBe(true);
    });

    it("should toggle css class on click ", () => {
        expect(switchComponent.isOn()).toBe(true);

        switchComponent.slider().click();
        expect(switchComponent.isOn()).toBe(false);
    });

    it("should change value on click of the switch", () => {
        const modelValue = element(by.id("xui-demo-switch-basic-value"));
        expect(modelValue.getText()).toBe("On");

        switchComponent.slider().click();

        expect(modelValue.getText()).toBe("Off");
    });

    it("should not change value on click if disabled (inactive)", () => {
        const modelValue = element(by.id("xui-demo-switch-disabled-value"));

        expect(modelValue.getText()).toEqual("On");

        //webdriver does not allow clicking on disabled elements, so we have to use browser action
        const webElem = disabledSwitchComponent.slider().getWebElement();

        webElem.getSize()
            .then(({width, height}) => {
                browser.actions().mouseMove(webElem, {x: width/2, y: height/2})
                    .click()
                    .perform();
                browser.sleep(500);
            });

        expect(modelValue.getText()).toEqual("On");
    });

    it("should retain value after disable twiddle", () => {
        switchComponent.slider().click();
        expect(switchComponent.isOn()).toBe(false);
        button.click();
        button.click();
        expect(switchComponent.isOn()).toBe(false);
    });

    it("should change value with spacebar", () => {
        expect(switchComponent.isOn()).toBe(true);
        switchComponent.slider().sendKeys(Key.SPACE);
        expect(switchComponent.isOn()).toBe(false);
    });

});
