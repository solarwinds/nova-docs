import { promise, browser, by, element } from "@solarwinds/uzi/protractor";
import { Atom } from "@solarwinds/uzi";
import Helpers from "../../helpers";
import { ToastAtom } from "./toast.atom";
import { ButtonAtom } from "../../components/button/button.atom";

describe("USERCONTROL toast", () => {
    const animationLength = 300;
    let toastAtom: ToastAtom;

    beforeAll(() => {
        browser.ignoreSynchronization = true;
    });

    beforeEach(() => {
        Helpers.prepareBrowser("toast");
    });

    afterAll(() => {
        browser.ignoreSynchronization = false;
    });

    const validateToast = (button: ButtonAtom, type: String) => {
        it(`shows toast with type of ${type}`, () => {
            toastAtom = ToastAtom.get(0);
            button.click();
            toastAtom.waitUntilDisplayed();
            switch (type) {
                case "success":
                    expect(toastAtom.isSuccessType()).toBe(true);
                    break;
                case "warning":
                    expect(toastAtom.isWarningType()).toBe(true);
                    break;
                case "info":
                    expect(toastAtom.isInfoType()).toBe(true);
                    break;
                case "error":
                    expect(toastAtom.isErrorType()).toBe(true);
                    break;
            }
        });
    };

    const validateToastContainerPosition = (positionClass: string,
                                            button: ButtonAtom, changeContainerPosition: boolean = true): void => {
        it(`toast is attached to container with class ${positionClass}`, () => {
            if (changeContainerPosition) {
                const containerButton: any = element(by.id(`xui-demo-toast-position-${positionClass}`));
                containerButton.click();
            }
            button.click();
            toastAtom = ToastAtom.get(0);
            toastAtom.waitUntilDisplayed()
                .then(() => {
                    const toastContainer = toastAtom.getElement().element(by.xpath(".."));
                    expect(Atom.hasClass(toastContainer, positionClass)).toBeTruthy();
                });
        });
    };
    describe("when Success toast is displayed", () => {
        const button: ButtonAtom = Atom.find(ButtonAtom, "xui-demo-toast-show-success");
        validateToast(button, "success");
    });
    describe("when Warning toast is displayed", () => {
        const button: ButtonAtom = Atom.find(ButtonAtom, "xui-demo-toast-show-warning");
        validateToast(button, "warning");
    });
    describe("when Info toast is displayed", () => {
        const button: ButtonAtom = Atom.find(ButtonAtom, "xui-demo-toast-show-info");
        validateToast(button, "info");
    });
    describe("when Error toast is displayed", () => {
        const button: ButtonAtom = Atom.find(ButtonAtom, "xui-demo-toast-show-error");
        validateToast(button, "error");
    });

    it("should close when cross button is clicked", () => {
        const button: ButtonAtom = Atom.find(ButtonAtom, "xui-demo-toast-show-success");
        button.click();
        toastAtom = ToastAtom.get(0);
        toastAtom.waitUntilDisplayed().then(() => {
            const closeButton = toastAtom.getElement().element(by.tagName("i"));
            closeButton.click();
            toastAtom.waitUntilNotDisplayed()
                .then(() => {
                    expect(toastAtom.getElement().isPresent()).toBeFalsy();
                });
        });
    });

    it("shouldn't close when user hovers over a toast", () => {
        const button: ButtonAtom = Atom.find(ButtonAtom, "xui-demo-toast-show-success");
        const timeoutInput: any = element(by.id("xui-demo-toast-timeout"));
        timeoutInput.clear();
        timeoutInput.sendKeys("500");
        button.click();
        toastAtom = ToastAtom.get(0);
        toastAtom.waitUntilDisplayed().then(() => {
            browser.actions().mouseMove(toastAtom.getElement(), {x: 1, y: 1}).perform();
            browser.sleep(600);
            expect(toastAtom.getElement().isPresent()).toBeTruthy();
        });
    });

    it("when timeout is specified", () => {
        const button: ButtonAtom = Atom.find(ButtonAtom, "xui-demo-toast-show-success");
        const timeoutInput: any = element(by.id("xui-demo-toast-timeout"));
        timeoutInput.clear();
        timeoutInput.sendKeys("1000");
        button.click();
        toastAtom = ToastAtom.get(0);
        let firstPoint: number;
        toastAtom.waitUntilDisplayed()
            .then(() => {
                firstPoint = Date.now();
                return toastAtom.waitUntilNotDisplayed();
            })
            .then(() => {
                const secondPoint: number = Date.now();
                const timeBenchmark = secondPoint - firstPoint - animationLength;
                expect(timeBenchmark).toBeGreaterThan(900);
                expect(timeBenchmark).toBeLessThan(1100);
            });
    });
    it("when extended timeout is specified", () => {
        const button: ButtonAtom = Atom.find(ButtonAtom, "xui-demo-toast-show-success");
        const extendedTimeoutInput: any = element(by.id("xui-demo-toast-extended-timeout"));
        extendedTimeoutInput.clear();
        extendedTimeoutInput.sendKeys("1000");
        button.click();
        toastAtom = ToastAtom.get(0);
        let firstPoint: number;
        toastAtom.waitUntilDisplayed()
            .then(() => {
                browser.actions().mouseMove(toastAtom.getElement(), {x: 1, y: 1}).perform()
                    .then(() => browser.actions().mouseMove(toastAtom.getElement(), {x: -1, y: -1}).perform())
                    .then(() => firstPoint = Date.now());
            });
        toastAtom.waitUntilNotDisplayed()
            .then((value) => {
                const secondPoint: number = Date.now();
                const timeBenchmark = secondPoint - firstPoint - animationLength;
                expect(timeBenchmark).toBeGreaterThan(900);
                expect(timeBenchmark).toBeLessThan(1100);
            });
    });
    describe("when toast container position is not specified", () => {
        const button: ButtonAtom = Atom.find(ButtonAtom, "xui-demo-toast-show-success");
        validateToastContainerPosition("toast-top-right", button, false);
    });
    describe("when toast container position is specified >", () => {
        describe("top left", () => {
            const button: ButtonAtom = Atom.find(ButtonAtom, "xui-demo-toast-show-success");
            validateToastContainerPosition("toast-top-left", button);
        });
        describe("bottom left", () => {
            const button: ButtonAtom = Atom.find(ButtonAtom, "xui-demo-toast-show-success");
            validateToastContainerPosition("toast-bottom-left", button);
        });
        describe("bottom right", () => {
            const button: ButtonAtom = Atom.find(ButtonAtom, "xui-demo-toast-show-success");
            validateToastContainerPosition("toast-bottom-right", button);
        });
        describe("top center", () => {
            const button: ButtonAtom = Atom.find(ButtonAtom, "xui-demo-toast-show-success");
            validateToastContainerPosition("toast-top-center", button);
        });
        describe("bottom center", () => {
            const button: ButtonAtom = Atom.find(ButtonAtom, "xui-demo-toast-show-success");
            validateToastContainerPosition("toast-bottom-center", button);
        });
        describe("top full width", () => {
            const button: ButtonAtom = Atom.find(ButtonAtom, "xui-demo-toast-show-success");
            validateToastContainerPosition("toast-top-full-width", button);
        });
        describe("bottom full width", () => {
            const button: ButtonAtom = Atom.find(ButtonAtom, "xui-demo-toast-show-success");
            validateToastContainerPosition("toast-bottom-full-width", button);
        });
    });
    it("all visible toasts are vanished", () => {
        const button: ButtonAtom = Atom.find(ButtonAtom, "xui-demo-toast-show-error");
        const clearButton = element(by.id("xui-demo-toast-clear-all"));
        button.click();
        toastAtom = ToastAtom.get(0);
        toastAtom.toastTimeout = 1000;
        toastAtom.waitUntilDisplayed().then(() => {
            clearButton.click();
            toastAtom.waitUntilNotDisplayed();
            expect(toastAtom.getElement().isPresent()).toBeFalsy();
        });
    });
    it("when sticky error is selected", () => {
        const button: ButtonAtom = Atom.find(ButtonAtom, "xui-demo-toast-show-error");
        const clearButton = element(by.id("xui-demo-toast-clear-all"));
        const stickyErrorControl = element(by.css("#xui-demo-toast-sticky-error .xui-checkbox__label"));
        stickyErrorControl.click();
        button.click();
        toastAtom = ToastAtom.get(0);
        toastAtom.waitUntilDisplayed().then(() => {
            const closeButton = toastAtom.getElement().element(by.tagName("i"));
            expect(closeButton.isPresent()).toBeFalsy();
        });
    });
    it("when title and body specified", () => {
        const customTitle = "My title";
        const customBody = "My body";
        const button: ButtonAtom = Atom.find(ButtonAtom, "xui-demo-toast-show-success");
        const clearButton = element(by.id("xui-demo-toast-clear-all"));
        const titleInput: any = element(by.id("xui-demo-toast-title"));
        const bodyInput: any = element(by.id("xui-demo-toast-body"));

        titleInput.clear();
        titleInput.sendKeys(customTitle);
        bodyInput.clear();
        bodyInput.sendKeys(customBody);
        button.click();
        toastAtom = ToastAtom.get(0);
        toastAtom.waitUntilDisplayed().then(() => {
            const toastTitle = toastAtom.getTitle();
            const toastBody = toastAtom.getBody();
            expect(toastTitle).toEqual(customTitle);
            expect(toastBody).toEqual(customBody);
        });
    });
    it("when elements are highlighted", () => {
        const highlightButton = element(by.id("xui-demo-toast-highlight"));
        const itemsForHighlightContainer = element(by.id("xui-demo-toast-data-container"));
        const selectedItem = itemsForHighlightContainer.all(by.tagName("div")).get(0);
        selectedItem.element(by.css(".xui-checkbox__label")).click();
        highlightButton.click();
        toastAtom = ToastAtom.get(0);
        toastAtom.waitUntilDisplayed().then(() => {
            expect(Atom.hasClass(selectedItem, "highlight-on")).toBeTruthy();
            const notSelectedItem = itemsForHighlightContainer.all(by.tagName("div")).get(1);
            expect(Atom.hasClass(notSelectedItem, "highlight-on")).toBeFalsy();
        });
    });
    it("when custom action on toast click is assigned", () => {
        const button: ButtonAtom = Atom.find(ButtonAtom, "xui-demo-toast-custom-action");
        const clickCounterElement = element(by.id("xui-demo-toast-number-of-clicks"));
        clickCounterElement.getText().then(text => {
            expect(parseInt(text, 10)).toEqual(0);
        });
        button.click();
        toastAtom = ToastAtom.get(0);
        toastAtom.waitUntilDisplayed()
            .then(() => {
                browser.actions().mouseMove(toastAtom.getElement(), {x: 1, y: 1})
                    .click().perform();
                clickCounterElement.getText().then(text => {
                    expect(parseInt(text, 10)).toEqual(1);
                });
            });
    });
});
