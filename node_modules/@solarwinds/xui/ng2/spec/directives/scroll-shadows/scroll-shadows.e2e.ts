import {browser, by, ElementFinder, promise} from "@solarwinds/uzi/protractor";
import {Atom} from "@solarwinds/uzi";
import Helpers from "../../helpers";

describe("USERCONTROL Scroll-shadows", () => {

    beforeAll(() => {
        browser.ignoreSynchronization = true;
    });

    afterAll(() => {
        browser.ignoreSynchronization = false;
    });

    beforeEach(() => {
        Helpers.prepareBrowser("scroll-shadows");
    });

    const SELECTOR = "[class*='xui-scroll-shadow']";

    function getShadowsElement(): ElementFinder {
        return browser.element(by.css(SELECTOR));
    }

    function scrollTop(value: number): promise.Promise<any> {
        return browser.executeScript(`arguments[0].scrollTop = ${value};`, getShadowsElement());
    }

    function hasTopShadow(): Promise<boolean> {
        return Atom.hasClass(getShadowsElement(), "xui-scroll-shadow-top");
    }

    function hasBottomShadow(): Promise<boolean> {
        return Atom.hasClass(getShadowsElement(), "xui-scroll-shadow-bottom");
    }

    describe("USERCONTROL Scroll shadows", () => {

        it("should have shadow only at the top", async () => {
            await scrollTop(100000);

            browser.wait(hasTopShadow);
            expect(await hasTopShadow()).toBe(true);
            expect(await hasBottomShadow()).toBe(false);
        });

        it("should have shadow only at the bottom", async () => {
            await scrollTop(0);

            browser.wait(hasBottomShadow);
            expect(await hasTopShadow()).toBe(false);
            expect(await hasBottomShadow()).toBe(true);
        });

        it("should have both shadows, at the top and bottom", async () => {
            await scrollTop(250);

            browser.wait(hasTopShadow);
            expect(await hasTopShadow()).toBe(true);
            expect(await hasBottomShadow()).toBe(true);
        });

    });

});
