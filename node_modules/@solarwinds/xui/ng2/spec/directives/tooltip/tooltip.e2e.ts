import { promise } from "@solarwinds/uzi/protractor";
import { Atom } from "@solarwinds/uzi";
import { TooltipAtom } from "./tooltip.atom";
import Helpers from "../../helpers";

describe("USERCONTROL tooltip", () => {

    beforeEach(() => {
        Helpers.prepareBrowser("tooltip");
    });

    const defaultTooltip = Atom.find(TooltipAtom, "xui-demo-tooltip");
    const tooltiRight = Atom.find(TooltipAtom, "xui-demo-tooltip-placement-right");
    const tooltipBottom = Atom.find(TooltipAtom, "xui-demo-tooltip-placement-bottom");
    const tooltipLeft = Atom.find(TooltipAtom, "xui-demo-tooltip-placement-left");
    const tooltipOnFocus = Atom.find(TooltipAtom, "xui-demo-tooltip-on-focus");
    const tooltipDisabled = Atom.find(TooltipAtom, "xui-demo-tooltip-disabled");
    const defaultTitle = "Hey you";

    it("should properly populate tooltip's content", () => {
        defaultTooltip.moveMouseToTarget();
        expect(defaultTooltip.isTooltipDisplayed()).toBeTruthy();
        expect(defaultTooltip.getTooltipText()).toBe(defaultTitle);
    });

    it("should add 'active' class to tooltip", () => {
        defaultTooltip.moveMouseToTarget();
        expect(defaultTooltip.isTooltipDisplayed()).toBeTruthy();
        expect(defaultTooltip.checkTooltipClasses()).toContain("active");
    });

    it("should use different positioning", () => {
        defaultTooltip.moveMouseToTarget();
        expect(defaultTooltip.isTooltipDisplayed()).toBeTruthy();
        expect(defaultTooltip.checkTooltipClasses()).toContain("top");
        tooltipBottom.moveMouseToTarget();
        expect(tooltipBottom.isTooltipDisplayed()).toBeTruthy();
        expect(tooltipBottom.checkTooltipClasses()).toContain("bottom");
        tooltiRight.moveMouseToTarget();
        expect(tooltiRight.isTooltipDisplayed()).toBeTruthy();
        expect(tooltiRight.checkTooltipClasses()).toContain("right");
        tooltipLeft.moveMouseToTarget();
        expect(tooltipLeft.isTooltipDisplayed()).toBeTruthy();
        expect(tooltipLeft.checkTooltipClasses()).toContain("left");
    });

    it("should trigger tooltip on focus", () => {
        tooltipOnFocus.clickOnTarget();
        expect(tooltipOnFocus.isTooltipDisplayed()).toBeTruthy();
        expect(tooltipOnFocus.checkTooltipClasses()).toContain("active");
    });

    it("should not show tooltip", () => {
        tooltipDisabled.moveMouseToTarget();
        expect(tooltipDisabled.isTooltipDisplayed()).toBeFalsy();
    });

});
