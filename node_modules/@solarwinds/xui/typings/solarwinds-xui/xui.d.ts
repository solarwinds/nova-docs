// Type definitions for SolarWinds Xui 1.0+
// Project: http://github.com/solarwinds/Xui
// Definitions by: UIF Team <http://github.com/solarwinds/Xui>

/// <reference path="../index.d.ts" />

declare module "@solarwinds/xui" {
    export = xui;
}

declare namespace xui {
    interface IMap<T> {
        [key:string]:T;
    }

    interface IModule {
        app():ng.IModule;
        config(fn:Function, require?:string[]):ng.IModule;
        component(name:string, fn:IComponentConstructor, require?:string[]):IModule;
        directive(name:string, fn:IComponentConstructor, require?:string[]):IModule;
        service(name:string, fn:Function, require?:string[]):IModule;
        factory(name:string, fn:Function, require?:string[]):IModule;
        filter(name:string, fn:Function, require?:string[]):IModule;
        provider (name:string, fn:ng.IServiceProviderClass, require?:string[]):IModule;
        controller (name:string, fn:Function, require?:string[]):IModule;
    }

    interface IXuiStatic {
        apiKey:string;
        translations:{[key:string]:string};
        region:string;
        module:IModule;
        version:any;
        registerModule(name:string):IModule;
        registerTranslations(translations:{[key:string]:string}):()=>void;
        minErr(module:string):((...templateArgs:any[])=>Error);
    }

    interface IRootScope extends ng.IScope {
        title:string;
        fullpage:boolean;
        $state:angular.ui.IState;
        $stateParams:any;

        goto(state:string, args?:{}, updateLocation?:boolean):void;
        gotoPage(page:string, args?:{}, replace?:boolean):void;
    }

    interface IComponentConstructor {
        new (...args:any[]):ng.IDirective;
    }

    interface IPopoverOptions {
        attachTo?: string;
    }

    interface IPopoverProvider {
        options:IPopoverOptions;
    }

    interface IDialogButton {
        name:string;
        isDisabled?:boolean;
        isPrimary?:boolean;
        displayStyle?:string;
        cssClass?:string;
        isHidden?:boolean;
        pullLeft?:boolean;
        text:string;
        actionText?:string;
        icon?:string;
        iconRight?:boolean;
        action?(dialog:ng.IFormController):boolean|ng.IPromise<boolean>;
        cancelAction?():void;
    }

    interface IDialogText {
        title?:string; // TODO: not optional once headerText is removed
        resolveTitle?: () => ng.IPromise<string>;
        message?:string;
    }

    interface IDialogOptions extends IDialogText {
        status?:string;
        hideCancel?:boolean;
        hideTopCancel?:boolean;
        headerText?:string; // deprecated
        bodyText?:string; // deprecated
        actionButtonText?:string;
        cancelButtonText?:string;
        closeButtonText?:string; // deprecated
        buttons?:IDialogButton[];
        viewModel?:any;
        validate?(dialogResult:any):boolean;
    }

    interface IDialogService {
        showMessage(dialogText:IDialogText):ng.IPromise<any>;
        showWarning(dialogText:IDialogText, actionButton?:IDialogButton):ng.IPromise<any>;
        showError(dialogText:IDialogText):ng.IPromise<any>;
        showModal(customSettings:angular.ui.bootstrap.IModalSettings,
                  dialogOptions:IDialogOptions):ng.IPromise<any>;
    }

    interface IStatusInfo {
        icon: string;
        style: string;
    }

    interface IDialogController {
        dialogOptions: IDialogOptions;
        cancel(): void;
        close(result: any): void;
    }

    interface IEdgeDetectionResult {
        placed: {
            top: boolean;
            right: boolean;
            bottom: boolean;
            left: boolean;
        };
        aligned: {
            top: boolean;
            right: boolean;
            bottom: boolean;
            left: boolean;
        }
    }
    interface IEdgeDetectionService {
        canBe(basePointElement: ng.IAugmentedJQuery, placedElement: ng.IAugmentedJQuery):IEdgeDetectionResult;
    }

    interface ISortingService {
        sortBy(items:any[], column:string, direction?:string):any[];
    }

    interface ISearchingService {
        search(items: any[], properties: string[], searchValue: any, dateFormat?: string):any[];
    }

    interface ISelectorItem {
        name: string;
        value: string;
    }

    interface ISelectorService {
        getDefaultItems(allowSelectAllPages:boolean):ISelectorItem[];
    }

    interface ITimeframePreset {
        name:string;
        startDatetimePattern:any;
        endDatetimePattern:any;
    }

    interface ITimeframe {
        startDatetime:Date;
        endDatetime:Date;
        selectedPresetId: string;
        title?: string;
    }

    interface ITimeframeService {
        getTimeframe(startDatetimePattern:any, endDatetimePattern:any, baseDatetime?:string):ITimeframe;
        getTimeframeByPresetId(id:string, baseDatetime?:string):ITimeframe;
        getDefaultPresets():any;
        extendCurrentPresets(presets:{[key:string]:xui.ITimeframePreset}):void;
        isDifferent(tf1:xui.ITimeframe, tf2:xui.ITimeframe, units?:string):boolean;
    }

    type NotificationHandler = (args:any) => void;
    interface INotificationService {
        subscribe(channel:string, handler:NotificationHandler): void;
        unsubscribe(channel:string, handler:NotificationHandler): void;
        post(channel:string, args:any): void;

        Channel: {
            highlight:string,
        };
    }

    interface IWizardDialogOptions {
        title:string;
        template?:string;
        templateUrl?:string;
        size?:DialogSizeEnum;
        viewModel?:any;
    }

    interface IWizardDialogService {
        show(options:IWizardDialogOptions):ng.IPromise<boolean>;
        showModal(options:IWizardDialogOptions):ng.IPromise<boolean>;
    }

    type WizardNavigationOption = "enabled" | "disabled" | "headerDisabled";

    interface IWizard {
        canGoNext:() => boolean;
        canGoBack:() => boolean;
        canFinish:() => boolean;
        canCancel:() => boolean;
        currentStep:IWizardStep;
        currentStepIndex:number;
        steps:IWizardStep[];
        hasSummaryStep:boolean;
        finishText:string;
        nextBusyText:string;
        allowNavigation:boolean;
        disableHeaderNav:boolean;
        additionalButtons: IDialogButton[];
        addStep(step:IWizardStep, index:number):void;
        removeStep(step:IWizardStep):void;
        next():ng.IPromise<boolean>;
        goToStep(step:IWizardStep):void;
        cancelStepAction():void;
        back():void;
        finish():ng.IPromise<boolean>;
        showBack():boolean;
        showFinish():boolean;
        showNext():boolean;
        showCancel():boolean;
        cancel():boolean;
        setSummaryStep(content:ng.IAugmentedJQuery):void;
    }

    interface IWizardStep {
        visited:boolean;
        active:boolean;
        complete:boolean;
        label:string;
        title:string;
        shortTitle:string;
        description:string;
        nextText:string;
        enter:() => void;
        exit:() => void;
    }

    interface IGridPagination {
        page: number;
        pageSize: number;
        total?: number;
    }

    interface IGridSorting {
        sortableColumns?: ISortableColumn[];
        sortBy: any;
        direction: string; // "asc" / "desc"
    }

    interface IGridSelector {
        indeterminate: boolean;
        checked: boolean;
        allowSelectAllPages: boolean;
        onItemsClick(item:any): void;
        onCheckboxClick(): void;
    }

    interface IGridSelection {
        items: any[];
        blacklist?: boolean;
    }

    interface IGridOptions {
        hidePagination?: boolean;
        hideSearch?: boolean;
        searchDebounce?: number;
        triggerSearchOnChange?: boolean;
        searchableColumns?: string[];
        searchTerm?: string;
        searchPlaceholder?: string;
        pagerAdjacent?: number;
    }

    interface ISortableColumn {
        id: any;
        label: string;
    }

    interface IToastOptions {
        /**
         * Should a close button be shown
         */
        closeButton?: boolean;
        /**
         * CSS class the toast element will be given
         */
        toastClass?: string;
        /**
         * Time in milliseconds the toast should take to show
         */
        showDuration?: number;
        /**
         * onShown function callback
         **/
        onShown?: () => void;
        /**
         * Time in milliseconds the toast should take to hide
         */
        hideDuration?: number;
        /**
         * onHidden function callback
         **/
        onHidden?: () => void;
        /**
         * Time in milliseconds the toast should be displayed after mouse over
         */
        extendedTimeOut?: number;
        /**
         * Where toast should be displayed
         */
        positionClass?: string;
        /**
         * Time in milliseconds that the toast should be displayed
         */
        timeOut?: number;
        /**
         * Function to execute on toast click
         */
        onclick?: () => void;

        /**
         * False by default, set to true when an error message should appear indefinitely until explicitly cleared.
         */
        stickyError?: boolean
    }

    interface IToastService {
        clear:{
            ():void;
            (toast:JQuery):void;
        };
        error(message:string, title?:string, options?:IToastOptions, itemsToHighlight?:any[]):void;
        info(message:string, title?:string, options?:IToastOptions, itemsToHighlight?:any[]):void;
        success(message:string, title?:string, options?:IToastOptions, itemsToHighlight?:any[]):void;
        warning(message:string, title?:string, options?:IToastOptions, itemsToHighlight?:any[]):void;
    }

    interface IUtility {
        formatString(source: string, ...params: Array<any>): string;
        initComponent(attrs:ng.IAttributes, type:string):void;
        cachePromise(fn:Function, key:string, options:{}):ng.IPromise<any>;
        countAngularWatchers(element?:ng.IAugmentedJQuery):number;
        fakeNgModel():ng.INgModelController;
        nextUid():string;
        watchBoolean(attrs:ng.IAttributes, property:string,
                     controller?:any, onChanged?:(newValue:boolean) => void):void;
        dateEquals(date1?: Date, date2?: Date): boolean;
    }

    interface IVirtualNode {
        $model:any;
        $parent:IVirtualNode;
        $children:IVirtualNode[];
        $level:number;
        $hasChildren:boolean;
        $hasGrandChildren:boolean;
        collapsed:boolean;
        checked:boolean;
        indeterminate:boolean;
        loading:boolean;
        /**
         * Limit on VirtualNode is a multiple of limit on ITreeviewOptions
         */
        limitMultiplier:number;
    }

    interface ITreeviewOptions {
        childrenKey: string;
        hasChildrenKey: string;
        selectionMode: string;
        limit: number;
        onExpand($event:any, node:IVirtualNode, context:any):void;
        onCollapse($event:any, node:IVirtualNode, context:any):void;
        onSelect($event:any, node:IVirtualNode, context:any):void;
        onDblClick($event:any, node:IVirtualNode, context:any):void;
        load?(parent:IVirtualNode):ng.IPromise<any[]>;
        trackBy?: string;
        isAlwaysSelected?: boolean;
    }

    interface ITreeviewContext {
        focusedNode: IVirtualNode;
        selectedNode: IVirtualNode;
        selectedNodes: IVirtualNode[];
        rootNode: IVirtualNode;
    }

    interface ITreeviewState {
        id: string;
        path: string[];
        expanded: boolean;
        checked: boolean;
    }

    interface ITreeviewScope extends ng.IScope {
        node: IVirtualNode;
    }

    interface ITreeviewController {
        $scope: ITreeviewScope;
        model: any;
        options: ITreeviewOptions;
        context: ITreeviewContext;
        nodeIdentifier: string;
        state: string;
        onStateChanged:(params:{newState: string, oldState: string}) => void;
        transcludeFn: any;
        toggle($event:JQueryEventObject, node:IVirtualNode):void;
        expand($event:JQueryEventObject, node:IVirtualNode):void;
        collapse($event:JQueryEventObject, node:IVirtualNode):void;
        onNodeClick($event:JQueryEventObject, node:IVirtualNode):void;
        onNodeDblClick($event:JQueryEventObject, node:IVirtualNode):void;
        checkNode($event:JQueryEventObject, node:IVirtualNode):void;
        expandAll($event:JQueryEventObject, node?:IVirtualNode):void;
        collapseAll($event:JQueryEventObject):void;
        showMore($event:JQueryEventObject, node:IVirtualNode):boolean;
        showAll($event:JQueryEventObject, node:IVirtualNode):boolean;
        showLimitLinks(node:IVirtualNode):boolean;
        trackByFunction(node: IVirtualNode, index: number): any;
        applySelection($event:JQueryEventObject, node:IVirtualNode):void;
    }

    /**
     * @ngdoc interface
     *
     * @name xui:ITransientCache
     *
     * @description
     * Cache object with a specified lifetime
     */
    interface ITransientCache {
        /** @ngdoc method
         *  @name put
         *  @methodOf xui:ITransientCache
         *  @description puts a new key-value pair into the cache and returns it
         *  @param {string} key unique identifier of the pair
         *  @param {any} value cached data
         *  @param {number} lifetime duration the pair will be held in the cache
         *  @returns {ng.IPromise<void>} promise
         **/
        put:(key:string, value:any, lifetime:number) => ng.IPromise<void>;

        /** @ngdoc method
         *  @name get
         *  @methodOf xui:ITransientCache
         *  @description get the value from the cache identified by the key
         *  @param {string} key unique identifier of the pair
         *  @returns {any} cached data
         **/
        get:(key:string) => any;

        /** @ngdoc method
         *  @name remove
         *  @methodOf xui:ITransientCache
         *  @description removes the pair from the cache identified by the key
         *  @param {string} key unique identifier of the pair
         **/
        remove:(key:string) => void;

        /** @ngdoc method
         *  @name removeAll
         *  @methodOf xui:ITransientCache
         *  @description removes all pairs from the cache
         **/
        removeAll:() => void;

        /** @ngdoc method
         *  @name destroy
         *  @methodOf xui:ITransientCache
         *  @description removes references to this cache from xuiTransientCacheFactory
         **/
        destroy:() => void;

        /** @ngdoc method
         *  @name entryCount
         *  @methodOf xui:ITransientCache
         *  @description returns the count of pairs in the cache
         *  @returns {number} count of pairs in the cache
         **/
        entryCount:() => number;

        /** @ngdoc method
         *  @name size
         *  @methodOf xui:ITransientCache
         *  @description returns the memory footprint (byte count) of the cache
         *  @returns {number} memory footprint (byte count) of the cache
         **/
        size:() => number;
    }

    interface IEventPropagationService {
        targetShouldPropagate:($event:JQueryEventObject) => boolean;
    }

    interface IListViewItem {
        /**
         * Optional custom item template url
         */
        $templateUrl?: string;

        /**
         * Optional custom item template url
         */
        templateUrl?: string;
    }

    interface ITemplateRef {
        url?:string;
        source?:string;
    }

    interface IContentProvider {
        (): string | ITemplateRef;
    }

    interface IScrollCallback {
        (): void;
    }

    interface IScrollService {
        bind:(scrollCallback: IScrollCallback) => void;
        unbind:(scrollCallback: IScrollCallback) => void;
    }

    interface IDragScrollConstants {
        /**
         * The percentage of top and bottom of the screen that will trigger a scroll
         */
        verticalScrollPercentage: number;
        /**
         * The percentage of left and right of the screen that will trigger a scroll
         */
        horizontalScrollPercentage: number;
        /**
         * The ms delay between checking where the mouse is positioned.  Less delay is a faster check
         */
        checkIntervalInMs: number;
        /**
         * How fast the scroll accelerates when dragged into the scroll area
         */
        accelerationFactor: number;
        /**
         * How often the directive will publish the drag over event.  Higher means less often.
         */
        dragOverThrottleInMs : number
        /**
         * How often the adorner position will update.  Higher means less often.
         */
        adornerUpdateThrottleInMs: number
    }

    type xuiDragEvent = JQueryEventObject | DragEvent;
    interface IDraggableController {
        onDragStart:(params:{event: xuiDragEvent}) => void;
        onDragEnd:(params:{event: xuiDragEvent}) => void;
    }

    interface IDroppableController {
        onDragOver:(params:{event: xuiDragEvent}) => void;
        onDragEnter:(params:{event: xuiDragEvent}) => void;
        onDragLeave:(params:{event: xuiDragEvent}) => void;
        onDrop:(params:{event:xuiDragEvent, transferObject:any}) => ng.IPromise<boolean>;
    }

    type DialogSizeEnum = "lg" | "md" | "sm";

    /**
     * Emun for possible values of selection-mode property in ListView and Grid
     */
    type ListSelectionModeEnum = "multi" | "single" | "radio" | "";

    type SliderType = "range" | "single";

    interface IDraggingPosition {
        top: number;
        left: number;
    }

    /**
     * angular.ui.bootstrap.ITooltipOptions props with prefix tooltip and dash-case instead of camelCase;
     * example: "tooltip-placement": true
     */
    interface IEllipsisTooltipOptions {
        [key: string]: any;
    }

    interface IEllipsisOptions {
        tooltipText: string;
        tooltipOptions: IEllipsisTooltipOptions;
        htmlBindTemplate?: string;
    }

    interface IEllipsisData {
        isEllipsisEnabled: boolean;
        ellipsisOptions: IEllipsisOptions;
        findParentClass?: string;
        parentElementWidth?: number;
        ellipsisTextWidth?: number;
    }

    type IEllipsisScope = ng.IScope & IEllipsisData;

    type SlidingPositionType = PositionType;

    interface IActionDrawerIcon {
        name: string;
        color?: string;
        tooltipText: string;
        hideIcon?: string;
        action(): void;
    }

    interface IActionDrawerController {
        itemSource: IActionDrawerIcon[];
        positionDirection: SlidingPositionType;
    }

    interface ISlidableController {
        onDragStart?(args: {event:JQueryMouseEventObject}):void;
        onDragStop?(args: {event:JQueryMouseEventObject}):void;
        onDrag?(args: {event:JQueryMouseEventObject, position: IDraggingPosition}):IDraggingPosition;
        isDragDisabled?: boolean;
        horizontalStep?: number;
        verticalStep?: number;
        horizontalStepShift?: number;
        verticalStepShift?: number;
    }

    interface ISidebarSettings {
        display: boolean;
        position: SidebarPositionType;
        shrink: boolean;
        expandable?: boolean;
    }

    type PositionType = "left" | "right";

    type SidebarPositionType = PositionType;

    type IEmptyViewModel <T extends Object> = T;

    interface IEmptyData {
        preset?: string;
        compactMode?: boolean;
        image?: string;
        title?: string;
        description?: string;
        templateUrl?: string;
        viewModel?: IEmptyViewModel<any>;
    }

    type EmptyVariant = "dataNotAvailable" | "serverUnreachable" | "dataNotApplicable" | "emptyDataset";

    type UnitOption = "bytes" | "bytesPerSecond" | "bitsPerSecond" | "hertz";

    interface IUnitConversionResult {
        order: number;
        value: string;
    }

    interface IUnitConversionConstants {
        bytes: string[];
        bytesPerSecond: string[];
        bitsPerSecond: string[];
        hertz: string[];
    }

    interface IUnitConversionService {
        convert(value:number, base?:number, precision?:number): IUnitConversionResult;
    }

    interface IPercentFilter {
        /**
         * Converts given value of percentage to string form
         *
         * @param {number} input Percentage value
         * @param {number} [decimals] Number of decimals to preserve
         * @param {string} [suffix] Percentage character, "%" is default
         */
        (input: number, decimals?: number, suffix?: string): string;
    }

    interface IStatusFilter {
        name: string,
        value: number,
        tooltip?: string,
        tooltipAppendToBody?: boolean,
        emphasize?: string,
        icon?: string
    }

    interface IBreadcrumb {
        title:string,
        url:string
    }
}
