"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const protractor_1 = require("@solarwinds/uzi/protractor");
const index_atom_1 = require("../index.atom");
const uzi_1 = require("@solarwinds/uzi");
const helpers_1 = require("../helpers");
describe("Visual tests", function () {
    let eyes;
    let busyAtom;
    let busyAtomNotes;
    let busyListView;
    let saveButtonAtom;
    let saveWithProgressButtonAtom;
    let makeBusyButtonAtom;
    let makeIdleButtonAtom;
    let fillInForms = () => __awaiter(this, void 0, void 0, function* () {
        // Filling in first and last names
        yield protractor_1.browser.findElement(protractor_1.by.xpath("//*[@id=\"firstname\"]/div[2]/input")).sendKeys("Chester");
        yield protractor_1.browser.findElement(protractor_1.by.xpath("//*[@id=\"lastname\"]/div[2]/input")).sendKeys("Bennington");
        // Filling in notes
        yield protractor_1.browser.findElement(protractor_1.by.xpath("//*[@id=\"textarea\"]/div[2]/textarea")).sendKeys("What is Lorem Ipsum?\n" +
            "Lorem Ipsum is simply dummy text of the printing and typesetting industry. " +
            "Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, " +
            "when an unknown printer took a galley of type and scrambled it to make a type specimen book. " +
            "It has survived not only five centuries, but also the leap into electronic typesetting, " +
            "remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset " +
            "sheets containing Lorem Ipsum passages, and more recently with desktop publishing software " +
            "like Aldus PageMaker including versions of Lorem Ipsum.");
        // Removing focus from the textarea to prevent Eyes from capturing
        // text cursor which can affect the result of the test.
        yield protractor_1.browser.findElement(protractor_1.by.className("xui-divider")).click();
    });
    beforeAll(() => __awaiter(this, void 0, void 0, function* () {
        eyes = helpers_1.default.prepareEyes();
        helpers_1.default.prepareBrowser("busy");
        busyAtom = uzi_1.Atom.find(index_atom_1.BusyAtom, "xuiBusyElement");
        busyAtomNotes = uzi_1.Atom.find(index_atom_1.BusyAtom, "xuiBusyElementNotes");
        busyListView = uzi_1.Atom.find(index_atom_1.BusyAtom, "xuiListViewBusy");
        saveButtonAtom = uzi_1.Atom.find(index_atom_1.ButtonAtom, "saveButton");
        saveWithProgressButtonAtom = uzi_1.Atom.find(index_atom_1.ButtonAtom, "saveButtonNotes");
        makeBusyButtonAtom = uzi_1.Atom.find(index_atom_1.ButtonAtom, "makeBusyButton");
        makeIdleButtonAtom = uzi_1.Atom.find(index_atom_1.ButtonAtom, "makeIdleButton");
        yield fillInForms();
    }));
    it("for busy", () => __awaiter(this, void 0, void 0, function* () {
        //Case 1        
        // Checking the default state
        eyes.open(protractor_1.browser, "XUI", "Busy");
        eyes.checkWindow("Default");
        //Case 2        
        // Clicking the SAVE button to trigger the Busy component
        yield saveButtonAtom.click();
        eyes.checkWindow("Busy element appears on SAVE button click");
        // Busy layout disappears on progress CANCEL
        yield busyAtom.getProgress().cancelProgress();
        eyes.checkWindow("Busy element disappears on CANCEL");
        //Case 3        
        // Clicking the SAVE WITH PROGRESS button to trigger the Busy component
        yield saveWithProgressButtonAtom.click();
        eyes.checkWindow("Busy element appears on SAVE WITH PROGRESS button click");
        // Busy layout disappears on progress CANCEL
        yield busyAtomNotes.getProgress().cancelProgress();
        eyes.checkWindow("Busy element disappears on CANCEL");
        //Case 4        
        // Selecting the listView item and triggering the busy layout
        let listView = uzi_1.Atom.find(index_atom_1.ListViewAtom, "xui-demo-listview-single-selection");
        yield listView.getItem(0).click();
        yield makeBusyButtonAtom.click();
        eyes.checkWindow("Busy element appears on MAKE BUSY button click");
        // Busy layout disappears on MAKE IDLE button click.
        yield makeIdleButtonAtom.click();
        eyes.checkWindow("Busy element appears on MAKE BUSY button click");
        // Tear down                
        eyes.close();
    }));
});

//# sourceMappingURL=data:application/json;base64,
