"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const protractor_1 = require("@solarwinds/uzi/protractor");
const helpers_1 = require("../helpers");
const index_atom_1 = require("../index.atom");
const uzi_1 = require("@solarwinds/uzi");
describe("USERCONTROL Grid >", () => {
    describe("simple >", () => {
        let grid;
        let pager;
        let listView;
        let toolbar;
        let sorter;
        let selector;
        let defaultPageSize;
        beforeEach((done) => {
            helpers_1.default.prepareBrowser("grid");
            grid = uzi_1.Atom.findIn(index_atom_1.GridAtom, protractor_1.element(protractor_1.by.id("grid-page")));
            listView = grid.getListView();
            toolbar = grid.getToolbar();
            sorter = grid.getSorter();
            selector = grid.getSelector();
            pager = grid.getPager();
            grid.getPager().itemsPerPageSelection().then((defaultPageSizeText) => {
                defaultPageSize = 10;
                done();
            });
        });
        it("shows list of items", () => {
            expect(listView.getItems().count()).toBe(10);
            expect(listView.getItem(5).getText()).toContain("Item 005");
        });
        it("shows toolbar if it is defined", () => {
            expect(toolbar.isVisible()).toBe(true);
        });
        it("shows correct total items on pager", () => {
            expect(grid.getPager().itemCountText()).toBe("200");
        });
        it("supports changing page", () => {
            pager.pageLinkClick(2);
            expect(listView.getItem(0).getText()).toContain("Item 010");
        });
        it("shows correct items in grid according to pager", () => {
            expect(grid.getPager().itemsPerPageSelection()).toBe("10");
            pager.setItemsPerPage(25);
            expect(grid.getListView().getItems().count()).toBe(25);
            expect(protractor_1.element(protractor_1.by.id("pagination-page")).getText()).toBe("1");
        });
        it("allows selection of items across pages", () => {
            // initially the first checkbox isn't checked
            expect(listView.getCheckbox(0).isChecked()).toBe(false);
            // check it
            listView.selectCheckbox(0);
            expect(listView.getCheckbox(0).isChecked()).toBe(true);
            // switch to next page and expect that the checkbox isn't checked anymore
            pager.pageLinkClick(2);
            expect(listView.getCheckbox(0).isChecked()).toBe(false);
            // go back to original page (3rd page is chosen initially) and the checkbox should be checked again
            pager.pageLinkClick(1);
            expect(listView.getCheckbox(0).isChecked()).toBe(true);
        });
        it("shows selection title when some item is selected", () => {
            expect(grid.getSelectionTitleElement().isPresent()).toBe(false);
            expect(listView.getCheckbox(0).isChecked()).toBe(false);
            grid.getListView().selectCheckbox(0);
            expect(grid.getSelectionTitleElement().isDisplayed()).toBe(true);
        });
        it("sorts listview properly when sorter component is used", () => {
            const firstItem = listView.getItem(0);
            const secondItem = listView.getItem(1);
            expect(firstItem.getText()).toContain("Item 000");
            expect(secondItem.getText()).toContain("Item 001");
            sorter.clickSortToggle();
            expect(firstItem.getText()).toContain("Item 009");
            expect(secondItem.getText()).toContain("Item 008");
        });
        describe("selector related", () => {
            it("selects all items on a current page when selector option 'all' is used", () => {
                // check initial state
                for (let i = 0; i < defaultPageSize; i++) {
                    expect(listView.getCheckbox(i).isChecked()).toBe(false);
                }
                pager.pageLinkClick(2);
                expect(listView.getCheckbox(0).isChecked()).toBe(false);
                pager.pageLinkClick(1);
                // click on 'all' option
                selector.clickOnDropdownItem(0);
                // verify changes
                for (let i = 0; i < defaultPageSize; i++) {
                    expect(listView.getCheckbox(i).isChecked()).toBe(true);
                }
                pager.pageLinkClick(2);
                expect(listView.getCheckbox(0).isChecked()).toBe(false);
            });
            it("un-selects all items on all pages when selector option 'none' is used", () => {
                // check initial state
                listView.selectCheckbox(0);
                expect(listView.getCheckbox(0).isChecked()).toBe(true);
                pager.pageLinkClick(2);
                listView.selectCheckbox(0);
                expect(listView.getCheckbox(0).isChecked()).toBe(true);
                // click on 'none' option
                selector.clickOnDropdownItem(1);
                // verify changes
                expect(listView.getCheckbox(0).isChecked()).toBe(false);
                pager.pageLinkClick(1);
                expect(listView.getCheckbox(0).isChecked()).toBe(false);
            });
            it("selects all items across all pages when selector option 'all pages' is used", () => {
                // click on 'all pages' option
                selector.clickOnDropdownItem(2);
                // verify state
                for (let i = 0; i < defaultPageSize; i++) {
                    expect(listView.getCheckbox(i).isChecked()).toBe(true);
                }
                pager.pageLinkClick(2);
                for (let i = 0; i < defaultPageSize; i++) {
                    expect(listView.getCheckbox(i).isChecked()).toBe(true);
                }
            });
            it("has selector in indeterminate state when some items are selected", () => {
                // initialization
                expect(selector.isChecked()).toBe(false);
                expect(selector.isIndeterminate()).toBe(false);
                // select an item
                listView.selectCheckbox(0);
                // verify selector state
                expect(selector.isChecked()).toBe(true);
                expect(selector.isIndeterminate()).toBe(true);
            });
            it("has selector in checked state when all items are selected", () => {
                // initialization
                expect(selector.isChecked()).toBe(false);
                expect(selector.isIndeterminate()).toBe(false);
                // select an item
                for (let i = 0; i < defaultPageSize; i++) {
                    listView.selectCheckbox(i);
                }
                // verify selector state
                expect(selector.isChecked()).toBe(true);
                expect(selector.isIndeterminate()).toBe(false);
            });
            it("selects all items when click on selector in unchecked state", () => {
                // initialization
                expect(selector.isChecked()).toBe(false);
                expect(selector.isIndeterminate()).toBe(false);
                // select an item
                selector.getCheckboxButton().click();
                // verify selector state
                for (let i = 0; i < defaultPageSize; i++) {
                    expect(listView.getCheckbox(i).isChecked()).toBe(true);
                }
                expect(selector.isChecked()).toBe(true);
                expect(selector.isIndeterminate()).toBe(false);
                pager.pageLinkClick(2);
                expect(listView.getCheckbox(0).isChecked()).toBe(false);
            });
            it("selects all items when click on selector in indeterminate state", () => {
                // initialization
                listView.selectCheckbox(0);
                expect(selector.isChecked()).toBe(true);
                expect(selector.isIndeterminate()).toBe(true);
                // select an item
                selector.getCheckboxButton().click();
                // verify selector state
                for (let i = 0; i < defaultPageSize; i++) {
                    expect(listView.getCheckbox(i).isChecked()).toBe(true);
                }
                expect(selector.isChecked()).toBe(true);
                expect(selector.isIndeterminate()).toBe(false);
                pager.pageLinkClick(2);
                expect(listView.getCheckbox(0).isChecked()).toBe(false);
            });
            it("un-selects all items when click on selector in checked state", () => {
                // initialization
                selector.clickOnDropdownItem(2);
                expect(selector.isChecked()).toBe(true);
                expect(selector.isIndeterminate()).toBe(false);
                // select an item
                selector.getCheckboxButton().click();
                // verify selector state
                for (let i = 0; i < defaultPageSize; i++) {
                    expect(listView.getCheckbox(i).isChecked()).toBe(false);
                }
                expect(selector.isChecked()).toBe(false);
                expect(selector.isIndeterminate()).toBe(false);
                pager.pageLinkClick(2);
                expect(listView.getCheckbox(0).isChecked()).toBe(false);
            });
        });
        describe("search functionalities should work as ", () => {
            it("grid should react on keyinput", () => {
                grid.writeIntoSearch("020");
                let list = grid.getListView().getItems();
                expect(list.count()).toBe(1);
            });
            it("grid should react on clearing search", () => {
                grid.writeIntoSearch("xxxx");
                let list = grid.getListView().getItems();
                expect(list.count()).toBe(0);
                grid.clickSearchClearButton();
                let list2 = grid.getListView().getItems();
                expect(list2.count()).toBeGreaterThan(0);
            });
            it("pager should react on search execution", () => {
                // UIF-2579 Pager is not update when selected page has been reset
                grid.writeIntoSearch("ite");
                pager.pageLinkClick(2);
                expect(pager.activePage()).toBe(2);
                grid.writeIntoSearch("m");
                expect(pager.activePage()).toBe(1);
            });
            it("calling clickSearchClearButton should not fail if search already cleared", () => {
                // UIF-5070 - GridAtom search methods not useable in production tests
                grid.writeIntoSearch("xxxx");
                grid.clickSearchClearButtonIfPresent();
                grid.clickSearchClearButtonIfPresent();
                let list = grid.getListView().getItems();
                expect(list.count()).toBeGreaterThan(0);
            });
        });
    });
    describe("smart >", () => {
        let smartGrid;
        let smartPager;
        let smartListView;
        let smartSorter;
        let smartSelector;
        let defaultPageSize;
        let searchOnChangeSwitch;
        beforeEach((done) => {
            helpers_1.default.prepareBrowser("grid-smart");
            smartGrid = uzi_1.Atom.findIn(index_atom_1.GridAtom, protractor_1.element(protractor_1.by.id("grid-smart-page")));
            smartPager = smartGrid.getPager();
            smartListView = smartGrid.getListView();
            smartSorter = smartGrid.getSorter();
            smartSelector = smartGrid.getSelector();
            smartGrid.getPager().itemsPerPageSelection().then((defaultPageSizeText) => {
                defaultPageSize = parseInt(defaultPageSizeText, 10);
                done();
            });
            searchOnChangeSwitch = uzi_1.Atom.findIn(index_atom_1.SwitchAtom, protractor_1.element(protractor_1.by.id("grid-smart-page")), 0);
        });
        it("shows correct items in grid according to pager", () => {
            expect(smartPager.itemsPerPageSelection()).toBe("10");
            smartPager.setItemsPerPage(25);
            expect(smartListView.getItems().count()).toBe(25);
        });
        it("supports changing page", () => {
            smartPager.pageLinkClick(2);
            expect(smartListView.getItem(0).getText()).toContain("Item 010");
        });
        it("allows selection of items across pages", () => {
            // initially the first checkbox isn't checked
            expect(smartListView.getCheckbox(0).isChecked()).toBe(false);
            // check it
            smartListView.selectCheckbox(0);
            expect(smartListView.getCheckbox(0).isChecked()).toBe(true);
            // switch to next page and expect that the checkbox isn't checked anymore
            smartPager.pageLinkClick(2);
            expect(smartListView.getCheckbox(0).isChecked()).toBe(false);
            // go back to original page (3rd page is chosen initially) and the checkbox should be checked again
            smartPager.pageLinkClick(1);
            expect(smartListView.getCheckbox(0).isChecked()).toBe(true);
        });
        describe("when sorter component is used", () => {
            it("sorts listView properly", () => {
                const firstItem = smartListView.getItem(0);
                const secondItem = smartListView.getItem(1);
                expect(firstItem.getText()).toContain("Item 000");
                expect(secondItem.getText()).toContain("Item 001");
                smartSorter.clickSortToggle();
                expect(firstItem.getText()).toContain("Item 199");
                expect(secondItem.getText()).toContain("Item 198");
            });
        });
        describe("selector related", () => {
            it("selects all items on a current page when selector option 'all' is used", () => {
                // check initial state
                for (let i = 0; i < defaultPageSize; i++) {
                    expect(smartListView.getCheckbox(i).isChecked()).toBe(false);
                }
                smartPager.pageLinkClick(2);
                expect(smartListView.getCheckbox(0).isChecked()).toBe(false);
                smartPager.pageLinkClick(1);
                // click
                smartSelector.clickOnDropdownItem(0);
                // verify changes
                for (let i = 0; i < defaultPageSize; i++) {
                    expect(smartListView.getCheckbox(i).isChecked()).toBe(true);
                }
                smartPager.pageLinkClick(2);
                expect(smartListView.getCheckbox(0).isChecked()).toBe(false);
            });
            it("un-selects all items on all pages when selector option 'none' is used", () => {
                // check initial state
                smartListView.selectCheckbox(0);
                expect(smartListView.getCheckbox(0).isChecked()).toBe(true);
                smartPager.pageLinkClick(2);
                smartListView.selectCheckbox(0);
                expect(smartListView.getCheckbox(0).isChecked()).toBe(true);
                // click
                smartSelector.clickOnDropdownItem(1);
                // verify changes
                expect(smartListView.getCheckbox(0).isChecked()).toBe(false);
                smartPager.pageLinkClick(1);
                expect(smartListView.getCheckbox(0).isChecked()).toBe(false);
            });
            it("selects all items across all pages when selector option 'all pages' is used", () => {
                // click
                smartSelector.clickOnDropdownItem(2);
                // verify state
                for (let i = 0; i < defaultPageSize; i++) {
                    expect(smartListView.getCheckbox(i).isChecked()).toBe(true);
                }
                smartPager.pageLinkClick(2);
                for (let i = 0; i < defaultPageSize; i++) {
                    expect(smartListView.getCheckbox(i).isChecked()).toBe(true);
                }
            });
            it("has selector in indeterminate state when some items are selected", () => {
                // initialization
                expect(smartSelector.isChecked()).toBe(false);
                expect(smartSelector.isIndeterminate()).toBe(false);
                // select an item
                smartListView.selectCheckbox(0);
                // verify smartSelector state
                expect(smartSelector.isChecked()).toBe(true);
                expect(smartSelector.isIndeterminate()).toBe(true);
            });
            it("has selector in checked state when all items are selected", () => {
                // initialization
                expect(smartSelector.isChecked()).toBe(false);
                expect(smartSelector.isIndeterminate()).toBe(false);
                // select an item
                for (let i = 0; i < defaultPageSize; i++) {
                    smartListView.selectCheckbox(i);
                }
                // verify smartSelector state
                expect(smartSelector.isChecked()).toBe(true);
                expect(smartSelector.isIndeterminate()).toBe(false);
            });
            it("selects all items when click on selector in unchecked state", () => {
                // initialization
                expect(smartSelector.isChecked()).toBe(false);
                expect(smartSelector.isIndeterminate()).toBe(false);
                // select an item
                smartSelector.getCheckboxButton().click();
                // verify smartSelector state
                for (let i = 0; i < defaultPageSize; i++) {
                    expect(smartListView.getCheckbox(i).isChecked()).toBe(true);
                }
                expect(smartSelector.isChecked()).toBe(true);
                expect(smartSelector.isIndeterminate()).toBe(false);
                smartPager.pageLinkClick(2);
                expect(smartListView.getCheckbox(0).isChecked()).toBe(false);
            });
            it("selects all items when click on selector in indeterminate state", () => {
                // initialization
                smartListView.selectCheckbox(0);
                expect(smartSelector.isChecked()).toBe(true);
                expect(smartSelector.isIndeterminate()).toBe(true);
                // select an item
                smartSelector.getCheckboxButton().click();
                // verify smartSelector state
                for (let i = 0; i < defaultPageSize; i++) {
                    expect(smartListView.getCheckbox(i).isChecked()).toBe(true);
                }
                expect(smartSelector.isChecked()).toBe(true);
                expect(smartSelector.isIndeterminate()).toBe(false);
                smartPager.pageLinkClick(2);
                expect(smartListView.getCheckbox(0).isChecked()).toBe(false);
            });
        });
        describe("search functionalities should work as ", () => {
            it("grid should search just after changes on search text", () => {
                searchOnChangeSwitch.slider().click();
                smartGrid.writeIntoSearch("020");
                let list = smartGrid.getListView().getItems();
                expect(list.count()).toBe(1);
            });
            it("grid should search on search click", () => {
                smartGrid.writeIntoSearch("020");
                smartGrid.clickSearchButton();
                let list = smartGrid.getListView().getItems();
                expect(list.count()).toBe(1);
            });
            it("grid should react on clearing search", () => {
                smartGrid.writeIntoSearch("xxxx");
                smartGrid.clickSearchButton();
                let list = smartGrid.getListView().getItems();
                expect(list.count()).toBe(0);
                smartGrid.clickSearchClearButton();
                let list2 = smartGrid.getListView().getItems();
                expect(list2.count()).toBeGreaterThan(0);
            });
            it("pager should react on search execution", () => {
                // UIF-2579 Pager is not update when selected page has been reset
                smartGrid.writeIntoSearch("ite");
                smartGrid.clickSearchButton();
                smartPager.pageLinkClick(2);
                expect(smartPager.activePage()).toBe(2);
                smartGrid.writeIntoSearch("m");
                smartGrid.clickSearchButton();
                expect(smartPager.activePage()).toBe(1);
            });
        });
    });
});

//# sourceMappingURL=data:application/json;base64,
