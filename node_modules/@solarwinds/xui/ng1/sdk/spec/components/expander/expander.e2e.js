"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const protractor_1 = require("@solarwinds/uzi/protractor");
const index_atom_1 = require("../index.atom");
const helpers_1 = require("../helpers");
const uzi_1 = require("@solarwinds/uzi");
describe("USERCONTROL expander", () => {
    let buffyExpander;
    let solarwindsExpander;
    let utWinsExpander;
    beforeEach(() => {
        helpers_1.default.prepareBrowser("expander");
        buffyExpander = uzi_1.Atom.find(index_atom_1.ExpanderAtom, "buffyExpander");
        solarwindsExpander = uzi_1.Atom.find(index_atom_1.ExpanderAtom, "solarwindsExpander");
        utWinsExpander = uzi_1.Atom.find(index_atom_1.ExpanderAtom, "utWinsExpander");
    });
    it("should exist", () => {
        expect(buffyExpander).toBeDefined();
        expect(solarwindsExpander).toBeDefined();
        expect(utWinsExpander).toBeDefined();
    });
    it("should correctly default expanded/collapsed", () => {
        expect(buffyExpander.isExpanded()).toBe(true);
        expect(solarwindsExpander.isExpanded()).toBe(false);
        expect(utWinsExpander.isExpanded()).toBe(false);
    });
    it("should toggle expanded/collapsed", () => {
        expect(buffyExpander.isExpanded()).toBe(true);
        buffyExpander.toggle();
        expect(buffyExpander.isExpanded()).toBe(false);
        expect(solarwindsExpander.isExpanded()).toBe(false);
        solarwindsExpander.toggle();
        protractor_1.browser.wait(() => solarwindsExpander.isExpanded(), 5000);
        expect(solarwindsExpander.isExpanded()).toBe(true);
    });
    it("should display content when expanded", () => {
        expect(buffyExpander.isExpanded()).toBe(true);
        expect(buffyExpander.isContentDisplayed()).toBe(true);
        buffyExpander.toggle();
        expect(buffyExpander.isExpanded()).toBe(false);
        expect(buffyExpander.isContentDisplayed()).toBe(false);
    });
    it("should remove the content from DOM when collapsed", () => {
        expect(solarwindsExpander.isExpanded()).toBe(false);
        expect(solarwindsExpander.isContentAttachedToDOM()).toBe(false);
    });
    it("should transclude the heading", () => {
        expect(buffyExpander.getHeadingText()).toBe("Click Me!");
        expect(solarwindsExpander.getHeadingText())
            .toBe("Heading with xui-radio\nand link\n100\nAND EVEN SMALL BUTTON");
    });
});

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbXBvbmVudHMvZXhwYW5kZXIvZXhwYW5kZXIuZTJlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsMkRBQTREO0FBQzVELDhDQUEyQztBQUMzQyx3Q0FBaUM7QUFDakMseUNBQXFDO0FBRXJDLFFBQVEsQ0FBQyxzQkFBc0IsRUFBRSxHQUFHLEVBQUU7SUFFbEMsSUFBSSxhQUEyQixDQUFDO0lBQ2hDLElBQUksa0JBQWdDLENBQUM7SUFDckMsSUFBSSxjQUE0QixDQUFDO0lBRWpDLFVBQVUsQ0FBQyxHQUFHLEVBQUU7UUFDWixpQkFBTyxDQUFDLGNBQWMsQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUNuQyxhQUFhLEdBQUcsVUFBSSxDQUFDLElBQUksQ0FBQyx5QkFBWSxFQUFFLGVBQWUsQ0FBQyxDQUFDO1FBQ3pELGtCQUFrQixHQUFHLFVBQUksQ0FBQyxJQUFJLENBQUMseUJBQVksRUFBRSxvQkFBb0IsQ0FBQyxDQUFDO1FBQ25FLGNBQWMsR0FBRyxVQUFJLENBQUMsSUFBSSxDQUFDLHlCQUFZLEVBQUUsZ0JBQWdCLENBQUMsQ0FBQztJQUMvRCxDQUFDLENBQUMsQ0FBQztJQUVILEVBQUUsQ0FBQyxjQUFjLEVBQUUsR0FBRyxFQUFFO1FBQ3BCLE1BQU0sQ0FBQyxhQUFhLENBQUMsQ0FBQyxXQUFXLEVBQUUsQ0FBQztRQUNwQyxNQUFNLENBQUMsa0JBQWtCLENBQUMsQ0FBQyxXQUFXLEVBQUUsQ0FBQztRQUN6QyxNQUFNLENBQUMsY0FBYyxDQUFDLENBQUMsV0FBVyxFQUFFLENBQUM7SUFDekMsQ0FBQyxDQUFDLENBQUM7SUFFSCxFQUFFLENBQUMsNkNBQTZDLEVBQUUsR0FBRyxFQUFFO1FBQ25ELE1BQU0sQ0FBQyxhQUFhLENBQUMsVUFBVSxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDOUMsTUFBTSxDQUFDLGtCQUFrQixDQUFDLFVBQVUsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ3BELE1BQU0sQ0FBQyxjQUFjLENBQUMsVUFBVSxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDcEQsQ0FBQyxDQUFDLENBQUM7SUFFSCxFQUFFLENBQUMsa0NBQWtDLEVBQUUsR0FBRyxFQUFFO1FBQ3hDLE1BQU0sQ0FBQyxhQUFhLENBQUMsVUFBVSxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDOUMsYUFBYSxDQUFDLE1BQU0sRUFBRSxDQUFDO1FBQ3ZCLE1BQU0sQ0FBQyxhQUFhLENBQUMsVUFBVSxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7UUFFL0MsTUFBTSxDQUFDLGtCQUFrQixDQUFDLFVBQVUsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ3BELGtCQUFrQixDQUFDLE1BQU0sRUFBRSxDQUFDO1FBQzVCLG9CQUFPLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDLGtCQUFrQixDQUFDLFVBQVUsRUFBRSxFQUFFLElBQUksQ0FBQyxDQUFDO1FBQzFELE1BQU0sQ0FBQyxrQkFBa0IsQ0FBQyxVQUFVLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUN2RCxDQUFDLENBQUMsQ0FBQztJQUVILEVBQUUsQ0FBQyxzQ0FBc0MsRUFBRSxHQUFHLEVBQUU7UUFDNUMsTUFBTSxDQUFDLGFBQWEsQ0FBQyxVQUFVLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUM5QyxNQUFNLENBQUMsYUFBYSxDQUFDLGtCQUFrQixFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDdEQsYUFBYSxDQUFDLE1BQU0sRUFBRSxDQUFDO1FBQ3ZCLE1BQU0sQ0FBQyxhQUFhLENBQUMsVUFBVSxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDL0MsTUFBTSxDQUFDLGFBQWEsQ0FBQyxrQkFBa0IsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQzNELENBQUMsQ0FBQyxDQUFDO0lBRUgsRUFBRSxDQUFDLG1EQUFtRCxFQUFFLEdBQUcsRUFBRTtRQUN6RCxNQUFNLENBQUMsa0JBQWtCLENBQUMsVUFBVSxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDcEQsTUFBTSxDQUFDLGtCQUFrQixDQUFDLHNCQUFzQixFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDcEUsQ0FBQyxDQUFDLENBQUM7SUFFSCxFQUFFLENBQUMsK0JBQStCLEVBQUUsR0FBRyxFQUFFO1FBQ3JDLE1BQU0sQ0FBQyxhQUFhLENBQUMsY0FBYyxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUM7UUFDekQsTUFBTSxDQUFDLGtCQUFrQixDQUFDLGNBQWMsRUFBRSxDQUFDO2FBQ3RDLElBQUksQ0FBQyw4REFBOEQsQ0FBQyxDQUFDO0lBQzlFLENBQUMsQ0FBQyxDQUFDO0FBQ1AsQ0FBQyxDQUFDLENBQUMiLCJmaWxlIjoiY29tcG9uZW50cy9leHBhbmRlci9leHBhbmRlci5lMmUuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge2Jyb3dzZXIsIHByb21pc2V9IGZyb20gXCJAc29sYXJ3aW5kcy91emkvcHJvdHJhY3RvclwiO1xuaW1wb3J0IHtFeHBhbmRlckF0b219IGZyb20gXCIuLi9pbmRleC5hdG9tXCI7XG5pbXBvcnQgSGVscGVycyBmcm9tIFwiLi4vaGVscGVyc1wiO1xuaW1wb3J0IHtBdG9tfSBmcm9tIFwiQHNvbGFyd2luZHMvdXppXCI7XG5cbmRlc2NyaWJlKFwiVVNFUkNPTlRST0wgZXhwYW5kZXJcIiwgKCkgPT4ge1xuXG4gICAgbGV0IGJ1ZmZ5RXhwYW5kZXI6IEV4cGFuZGVyQXRvbTtcbiAgICBsZXQgc29sYXJ3aW5kc0V4cGFuZGVyOiBFeHBhbmRlckF0b207XG4gICAgbGV0IHV0V2luc0V4cGFuZGVyOiBFeHBhbmRlckF0b207XG5cbiAgICBiZWZvcmVFYWNoKCgpID0+IHtcbiAgICAgICAgSGVscGVycy5wcmVwYXJlQnJvd3NlcihcImV4cGFuZGVyXCIpO1xuICAgICAgICBidWZmeUV4cGFuZGVyID0gQXRvbS5maW5kKEV4cGFuZGVyQXRvbSwgXCJidWZmeUV4cGFuZGVyXCIpO1xuICAgICAgICBzb2xhcndpbmRzRXhwYW5kZXIgPSBBdG9tLmZpbmQoRXhwYW5kZXJBdG9tLCBcInNvbGFyd2luZHNFeHBhbmRlclwiKTtcbiAgICAgICAgdXRXaW5zRXhwYW5kZXIgPSBBdG9tLmZpbmQoRXhwYW5kZXJBdG9tLCBcInV0V2luc0V4cGFuZGVyXCIpO1xuICAgIH0pO1xuXG4gICAgaXQoXCJzaG91bGQgZXhpc3RcIiwgKCkgPT4ge1xuICAgICAgICBleHBlY3QoYnVmZnlFeHBhbmRlcikudG9CZURlZmluZWQoKTtcbiAgICAgICAgZXhwZWN0KHNvbGFyd2luZHNFeHBhbmRlcikudG9CZURlZmluZWQoKTtcbiAgICAgICAgZXhwZWN0KHV0V2luc0V4cGFuZGVyKS50b0JlRGVmaW5lZCgpO1xuICAgIH0pO1xuXG4gICAgaXQoXCJzaG91bGQgY29ycmVjdGx5IGRlZmF1bHQgZXhwYW5kZWQvY29sbGFwc2VkXCIsICgpID0+IHtcbiAgICAgICAgZXhwZWN0KGJ1ZmZ5RXhwYW5kZXIuaXNFeHBhbmRlZCgpKS50b0JlKHRydWUpO1xuICAgICAgICBleHBlY3Qoc29sYXJ3aW5kc0V4cGFuZGVyLmlzRXhwYW5kZWQoKSkudG9CZShmYWxzZSk7XG4gICAgICAgIGV4cGVjdCh1dFdpbnNFeHBhbmRlci5pc0V4cGFuZGVkKCkpLnRvQmUoZmFsc2UpO1xuICAgIH0pO1xuXG4gICAgaXQoXCJzaG91bGQgdG9nZ2xlIGV4cGFuZGVkL2NvbGxhcHNlZFwiLCAoKSA9PiB7XG4gICAgICAgIGV4cGVjdChidWZmeUV4cGFuZGVyLmlzRXhwYW5kZWQoKSkudG9CZSh0cnVlKTtcbiAgICAgICAgYnVmZnlFeHBhbmRlci50b2dnbGUoKTtcbiAgICAgICAgZXhwZWN0KGJ1ZmZ5RXhwYW5kZXIuaXNFeHBhbmRlZCgpKS50b0JlKGZhbHNlKTtcblxuICAgICAgICBleHBlY3Qoc29sYXJ3aW5kc0V4cGFuZGVyLmlzRXhwYW5kZWQoKSkudG9CZShmYWxzZSk7XG4gICAgICAgIHNvbGFyd2luZHNFeHBhbmRlci50b2dnbGUoKTtcbiAgICAgICAgYnJvd3Nlci53YWl0KCgpID0+IHNvbGFyd2luZHNFeHBhbmRlci5pc0V4cGFuZGVkKCksIDUwMDApO1xuICAgICAgICBleHBlY3Qoc29sYXJ3aW5kc0V4cGFuZGVyLmlzRXhwYW5kZWQoKSkudG9CZSh0cnVlKTtcbiAgICB9KTtcblxuICAgIGl0KFwic2hvdWxkIGRpc3BsYXkgY29udGVudCB3aGVuIGV4cGFuZGVkXCIsICgpID0+IHtcbiAgICAgICAgZXhwZWN0KGJ1ZmZ5RXhwYW5kZXIuaXNFeHBhbmRlZCgpKS50b0JlKHRydWUpO1xuICAgICAgICBleHBlY3QoYnVmZnlFeHBhbmRlci5pc0NvbnRlbnREaXNwbGF5ZWQoKSkudG9CZSh0cnVlKTtcbiAgICAgICAgYnVmZnlFeHBhbmRlci50b2dnbGUoKTtcbiAgICAgICAgZXhwZWN0KGJ1ZmZ5RXhwYW5kZXIuaXNFeHBhbmRlZCgpKS50b0JlKGZhbHNlKTtcbiAgICAgICAgZXhwZWN0KGJ1ZmZ5RXhwYW5kZXIuaXNDb250ZW50RGlzcGxheWVkKCkpLnRvQmUoZmFsc2UpO1xuICAgIH0pO1xuXG4gICAgaXQoXCJzaG91bGQgcmVtb3ZlIHRoZSBjb250ZW50IGZyb20gRE9NIHdoZW4gY29sbGFwc2VkXCIsICgpID0+IHtcbiAgICAgICAgZXhwZWN0KHNvbGFyd2luZHNFeHBhbmRlci5pc0V4cGFuZGVkKCkpLnRvQmUoZmFsc2UpO1xuICAgICAgICBleHBlY3Qoc29sYXJ3aW5kc0V4cGFuZGVyLmlzQ29udGVudEF0dGFjaGVkVG9ET00oKSkudG9CZShmYWxzZSk7XG4gICAgfSk7XG5cbiAgICBpdChcInNob3VsZCB0cmFuc2NsdWRlIHRoZSBoZWFkaW5nXCIsICgpID0+IHtcbiAgICAgICAgZXhwZWN0KGJ1ZmZ5RXhwYW5kZXIuZ2V0SGVhZGluZ1RleHQoKSkudG9CZShcIkNsaWNrIE1lIVwiKTtcbiAgICAgICAgZXhwZWN0KHNvbGFyd2luZHNFeHBhbmRlci5nZXRIZWFkaW5nVGV4dCgpKVxuICAgICAgICAgICAgLnRvQmUoXCJIZWFkaW5nIHdpdGggeHVpLXJhZGlvXFxuYW5kIGxpbmtcXG4xMDBcXG5BTkQgRVZFTiBTTUFMTCBCVVRUT05cIik7XG4gICAgfSk7XG59KTtcbiJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==
