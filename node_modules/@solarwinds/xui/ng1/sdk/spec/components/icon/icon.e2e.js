"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const protractor_1 = require("@solarwinds/uzi/protractor");
const index_atom_1 = require("../index.atom");
const helpers_1 = require("../helpers");
const uzi_1 = require("@solarwinds/uzi");
describe("USERCONTROL icon", () => {
    beforeEach(() => {
        helpers_1.default.prepareBrowser("icon");
    });
    it("should show each available icon size on the page", () => {
        let smallIcon = uzi_1.Atom.find(index_atom_1.IconAtom, "mockIconSmall");
        expect(smallIcon.getSize()).toEqual(index_atom_1.IconAtom.iconSize.small);
        let defaultIcon = uzi_1.Atom.find(index_atom_1.IconAtom, "mockIconDefault");
        expect(defaultIcon.getSize()).toEqual(index_atom_1.IconAtom.iconSize.default);
        let largeIcon = uzi_1.Atom.find(index_atom_1.IconAtom, "mockIconLarge");
        expect(largeIcon.getSize()).toEqual(index_atom_1.IconAtom.iconSize.large);
        let xlargeIcon = uzi_1.Atom.find(index_atom_1.IconAtom, "mockIconXLarge");
        expect(xlargeIcon.getSize()).toEqual(index_atom_1.IconAtom.iconSize.xlarge);
    });
    it("should show icons with status on the page", () => {
        let atom = uzi_1.Atom.find(index_atom_1.IconAtom, "mockIconSmallWithStatus");
        expect(atom.getStatus()).toEqual("up");
    });
    it("should show icons with valid counters on the page", () => {
        const atom = uzi_1.Atom.find(index_atom_1.IconAtom, "mockIconLargeWithValidCounter");
        expect(atom.getCounter()).toEqual("5");
    });
    it("should not show counter label if value passed to the counter attribute is not integer", () => {
        const atom = uzi_1.Atom.find(index_atom_1.IconAtom, "mockIconLargeWithInvalidCounter");
        expect(atom.getCounter()).toBeNull();
    });
    it("should accept additional CSS classes", () => {
        let atom = uzi_1.Atom.find(index_atom_1.IconAtom, "mockIconSmallWithExtraStyling");
        expect(atom.getExtraStyling()).toEqual("icon-test-style");
    });
    it("should update when is-dynamic is true", () => {
        const icon = uzi_1.Atom.find(index_atom_1.IconAtom, "mockIconDynamic");
        expect(icon.hasClass("xui-icon-add")).toBe(true);
        expect(icon.getSize()).toBe(index_atom_1.IconAtom.iconSize.small);
        expect(icon.getStatus()).toBe("");
        const btn = uzi_1.Atom.find(index_atom_1.ButtonAtom, "updateIconButton");
        btn.click();
        expect(icon.hasClass("xui-icon-delete")).toBe(true);
        expect(icon.getSize()).toBe(index_atom_1.IconAtom.iconSize.large);
        expect(icon.getStatus()).toBe("up");
    });
    it("shows tooltip when mouse is moved over", (done) => {
        const icon = uzi_1.Atom.find(index_atom_1.IconAtom, "iconWithTooltip");
        protractor_1.browser.actions().mouseMove(icon.getElement()).perform().then(() => {
            icon.getTooltip().then(tooltip => {
                expect(tooltip).toBe("My custom tooltip");
                done();
            });
        });
    });
});

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbXBvbmVudHMvaWNvbi9pY29uLmUyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLDJEQUFxRjtBQUNyRiw4Q0FBbUQ7QUFDbkQsd0NBQWlDO0FBQ2pDLHlDQUFxQztBQUVyQyxRQUFRLENBQUMsa0JBQWtCLEVBQUUsR0FBRyxFQUFFO0lBRTlCLFVBQVUsQ0FBQyxHQUFHLEVBQUU7UUFDWixpQkFBTyxDQUFDLGNBQWMsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUNuQyxDQUFDLENBQUMsQ0FBQztJQUVILEVBQUUsQ0FBQyxrREFBa0QsRUFBRSxHQUFHLEVBQUU7UUFDeEQsSUFBSSxTQUFTLEdBQUcsVUFBSSxDQUFDLElBQUksQ0FBQyxxQkFBUSxFQUFFLGVBQWUsQ0FBQyxDQUFDO1FBQ3JELE1BQU0sQ0FBQyxTQUFTLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQyxPQUFPLENBQUMscUJBQVEsQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLENBQUM7UUFFN0QsSUFBSSxXQUFXLEdBQUcsVUFBSSxDQUFDLElBQUksQ0FBQyxxQkFBUSxFQUFFLGlCQUFpQixDQUFDLENBQUM7UUFDekQsTUFBTSxDQUFDLFdBQVcsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxxQkFBUSxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUVqRSxJQUFJLFNBQVMsR0FBRyxVQUFJLENBQUMsSUFBSSxDQUFDLHFCQUFRLEVBQUUsZUFBZSxDQUFDLENBQUM7UUFDckQsTUFBTSxDQUFDLFNBQVMsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxxQkFBUSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUU3RCxJQUFJLFVBQVUsR0FBRyxVQUFJLENBQUMsSUFBSSxDQUFDLHFCQUFRLEVBQUUsZ0JBQWdCLENBQUMsQ0FBQztRQUN2RCxNQUFNLENBQUMsVUFBVSxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUMsT0FBTyxDQUFDLHFC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QUFFLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxFQUFFO2dCQUM3QixNQUFNLENBQUMsT0FBTyxDQUFDLENBQUMsSUFBSSxDQUFDLG1CQUFtQixDQUFDLENBQUM7Z0JBQzFDLElBQUksRUFBRSxDQUFDO1lBQ1gsQ0FBQyxDQUFDLENBQUM7UUFDUCxDQUFDLENBQUMsQ0FBQztJQUNQLENBQUMsQ0FBQyxDQUFDO0FBQ1AsQ0FBQyxDQUFDLENBQUMiLCJmaWxlIjoiY29tcG9uZW50cy9pY29uL2ljb24uZTJlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHticm93c2VyLCBlbGVtZW50LCBwcm90cmFjdG9yLCBieSwgcHJvbWlzZX0gZnJvbSBcIkBzb2xhcndpbmRzL3V6aS9wcm90cmFjdG9yXCI7XG5pbXBvcnQge0J1dHRvbkF0b20sIEljb25BdG9tfSBmcm9tIFwiLi4vaW5kZXguYXRvbVwiO1xuaW1wb3J0IEhlbHBlcnMgZnJvbSBcIi4uL2hlbHBlcnNcIjtcbmltcG9ydCB7QXRvbX0gZnJvbSBcIkBzb2xhcndpbmRzL3V6aVwiO1xuXG5kZXNjcmliZShcIlVTRVJDT05UUk9MIGljb25cIiwgKCkgPT4ge1xuXG4gICAgYmVmb3JlRWFjaCgoKSA9PiB7XG4gICAgICAgIEhlbHBlcnMucHJlcGFyZUJyb3dzZXIoXCJpY29uXCIpO1xuICAgIH0pO1xuXG4gICAgaXQoXCJzaG91bGQgc2hvdyBlYWNoIGF2YWlsYWJsZSBpY29uIHNpemUgb24gdGhlIHBhZ2VcIiwgKCkgPT4ge1xuICAgICAgICBsZXQgc21hbGxJY29uID0gQXRvbS5maW5kKEljb25BdG9tLCBcIm1vY2tJY29uU21hbGxcIik7XG4gICAgICAgIGV4cGVjdChzbWFsbEljb24uZ2V0U2l6ZSgpKS50b0VxdWFsKEljb25BdG9tLmljb25TaXplLnNtYWxsKTtcblxuICAgICAgICBsZXQgZGVmYXVsdEljb24gPSBBdG9tLmZpbmQoSWNvbkF0b20sIFwibW9ja0ljb25EZWZhdWx0XCIpO1xuICAgICAgICBleHBlY3QoZGVmYXVsdEljb24uZ2V0U2l6ZSgpKS50b0VxdWFsKEljb25BdG9tLmljb25TaXplLmRlZmF1bHQpO1xuXG4gICAgICAgIGxldCBsYXJnZUljb24gPSBBdG9tLmZpbmQoSWNvbkF0b20sIFwibW9ja0ljb25MYXJnZVwiKTtcbiAgICAgICAgZXhwZWN0KGxhcmdlSWNvbi5nZXRTaXplKCkpLnRvRXF1YWwoSWNvbkF0b20uaWNvblNpemUubGFyZ2UpO1xuXG4gICAgICAgIGxldCB4bGFyZ2VJY29uID0gQXRvbS5maW5kKEljb25BdG9tLCBcIm1vY2tJY29uWExhcmdlXCIpO1xuICAgICAgICBleHBlY3QoeGxhcmdlSWNvbi5nZXRTaXplKCkpLnRvRXF1YWwoSWNvbkF0b20uaWNvblNpemUueGxhcmdlKTtcbiAgICB9KTtcblxuICAgIGl0KFwic2hvdWxkIHNob3cgaWNvbnMgd2l0aCBzdGF0dXMgb24gdGhlIHBhZ2VcIiwgKCkgPT4ge1xuICAgICAgICBsZXQgYXRvbSA9IEF0b20uZmluZChJY29uQXRvbSwgXCJtb2NrSWNvblNtYWxsV2l0aFN0YXR1c1wiKTtcbiAgICAgICAgZXhwZWN0KGF0b20uZ2V0U3RhdHVzKCkpLnRvRXF1YWwoXCJ1cFwiKTtcbiAgICB9KTtcblxuICAgIGl0KFwic2hvdWxkIHNob3cgaWNvbnMgd2l0aCB2YWxpZCBjb3VudGVycyBvbiB0aGUgcGFnZVwiLCAoKSA9PiB7XG4gICAgICAgIGNvbnN0IGF0b20gPSBBdG9tLmZpbmQoSWNvbkF0b20sIFwibW9ja0ljb25MYXJnZVdpdGhWYWxpZENvdW50ZXJcIik7XG4gICAgICAgIGV4cGVjdChhdG9tLmdldENvdW50ZXIoKSkudG9FcXVhbChcIjVcIik7XG4gICAgfSk7XG5cbiAgICBpdChcInNob3VsZCBub3Qgc2hvdyBjb3VudGVyIGxhYmVsIGlmIHZhbHVlIHBhc3NlZCB0byB0aGUgY291bnRlciBhdHRyaWJ1dGUgaXMgbm90IGludGVnZXJcIiwgKCkgPT4ge1xuICAgICAgICBjb25zdCBhdG9tID0gQXRvbS5maW5kKEljb25BdG9tLCBcIm1vY2tJY29uTGFyZ2VXaXRoSW52YWxpZENvdW50ZXJcIik7XG4gICAgICAgIGV4cGVjdChhdG9tLmdldENvdW50ZXIoKSkudG9CZU51bGwoKTtcbiAgICB9KTtcblxuICAgIGl0KFwic2hvdWxkIGFjY2VwdCBhZGRpdGlvbmFsIENTUyBjbGFzc2VzXCIsICgpID0+IHtcbiAgICAgICAgbGV0IGF0b20gPSBBdG9tLmZpbmQoSWNvbkF0b20sIFwibW9ja0ljb25TbWFsbFdpdGhFeHRyYVN0eWxpbmdcIik7XG4gICAgICAgIGV4cGVjdChhdG9tLmdldEV4dHJhU3R5bGluZygpKS50b0VxdWFsKFwiaWNvbi10ZXN0LXN0eWxlXCIpO1xuICAgIH0pO1xuXG4gICAgaXQoXCJzaG91bGQgdXBkYXRlIHdoZW4gaXMtZHluYW1pYyBpcyB0cnVlXCIsICgpID0+IHtcbiAgICAgICAgY29uc3QgaWNvbiA9IEF0b20uZmluZChJY29uQXRvbSwgXCJtb2NrSWNvbkR5bmFtaWNcIik7XG4gICAgICAgIGV4cGVjdChpY29uLmhhc0NsYXNzKFwieHVpLWljb24tYWRkXCIpKS50b0JlKHRydWUpO1xuICAgICAgICBleHBlY3QoaWNvbi5nZXRTaXplKCkpLnRvQmUoSWNvbkF0b20uaWNvblNpemUuc21hbGwpO1xuICAgICAgICBleHBlY3QoaWNvbi5nZXRTdGF0dXMoKSkudG9CZShcIlwiKTtcblxuICAgICAgICBjb25zdCBidG4gPSBBdG9tLmZpbmQoQnV0dG9uQXRvbSwgXCJ1cGRhdGVJY29uQnV0dG9uXCIpO1xuICAgICAgICBidG4uY2xpY2soKTtcblxuICAgICAgICBleHBlY3QoaWNvbi5oYXNDbGFzcyhcInh1aS1pY29uLWRlbGV0ZVwiKSkudG9CZSh0cnVlKTtcbiAgICAgICAgZXhwZWN0KGljb24uZ2V0U2l6ZSgpKS50b0JlKEljb25BdG9tLmljb25TaXplLmxhcmdlKTtcbiAgICAgICAgZXhwZWN0KGljb24uZ2V0U3RhdHVzKCkpLnRvQmUoXCJ1cFwiKTtcbiAgICB9KTtcblxuICAgIGl0KFwic2hvd3MgdG9vbHRpcCB3aGVuIG1vdXNlIGlzIG1vdmVkIG92ZXJcIiwgKGRvbmU6IERvbmVGbikgPT4ge1xuICAgICAgICBjb25zdCBpY29uID0gQXRvbS5maW5kKEljb25BdG9tLCBcImljb25XaXRoVG9vbHRpcFwiKTtcbiAgICAgICAgYnJvd3Nlci5hY3Rpb25zKCkubW91c2VNb3ZlKGljb24uZ2V0RWxlbWVudCgpKS5wZXJmb3JtKCkudGhlbigoKSA9PiB7XG4gICAgICAgICAgICBpY29uLmdldFRvb2x0aXAoKS50aGVuKHRvb2x0aXAgPT4ge1xuICAgICAgICAgICAgICAgIGV4cGVjdCh0b29sdGlwKS50b0JlKFwiTXkgY3VzdG9tIHRvb2x0aXBcIik7XG4gICAgICAgICAgICAgICAgZG9uZSgpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH0pO1xufSk7XG4iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=
