"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const protractor_1 = require("@solarwinds/uzi/protractor");
const uzi_1 = require("@solarwinds/uzi");
class CodeItemAtom extends uzi_1.Atom {
    toHex(rgb_color) {
        let rgb = rgb_color.match(/^rgba?[\s+]?\([\s+]?(\d+)[\s+]?,[\s+]?(\d+)[\s+]?,[\s+]?(\d+)[\s+]?/i);
        return (rgb && rgb.length === 4) ? "#" +
            ("0" + parseInt(rgb[1], 10).toString(16)).slice(-2) +
            ("0" + parseInt(rgb[2], 10).toString(16)).slice(-2) +
            ("0" + parseInt(rgb[3], 10).toString(16)).slice(-2) : "";
    }
    getTextByClassName(selector) {
        return super.getElement().element(protractor_1.by.className(selector)).getText();
    }
    getTextFromLineNumber(selector) {
        //Since text from line-numbers can no longer be selected, we need to select content from 'before' pseudo element
        let script = `window.getComputedStyle(document.querySelectorAll(".${selector}")[0], ":before").content`;
        return protractor_1.browser.executeScript(`return ${script}`);
    }
    getBackgroundColor() {
        return super.getElement().getCssValue("background-color");
    }
    getBgColorAndHexIt() {
        const _super = name => super[name];
        return __awaiter(this, void 0, void 0, function* () {
            let color = yield _super("getElement").call(this).getCssValue("background-color");
            return this.toHex(color);
        });
    }
    getTextColor(className) {
        const _super = name => super[name];
        return __awaiter(this, void 0, void 0, function* () {
            return yield _super("getElement").call(this).element(protractor_1.by.className(className)).getCssValue("color");
        });
    }
    getTextColorAndHexIt(className) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.toHex(yield this.getTextColor(className));
        });
    }
    getTranscludedColorAndHexIt() {
        const _super = name => super[name];
        return __awaiter(this, void 0, void 0, function* () {
            return this.toHex(yield _super("getElement").call(this).element(protractor_1.by.tagName("strong")).getCssValue("color"));
        });
    }
    getSelectedText() {
        return this.doSelect()
            .then(() => {
            return protractor_1.browser.executeScript(() => {
                let text = "";
                if (window.getSelection) {
                    text = window.getSelection().toString();
                }
                return text;
            });
        });
    }
    doSelect() {
        return protractor_1.browser.actions()
            .sendKeys(protractor_1.protractor.Key.chord(protractor_1.protractor.Key.CONTROL, "a"))
            .perform();
    }
}
CodeItemAtom.CSS_CLASS = "xui-code-item";
exports.CodeItemAtom = CodeItemAtom;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbXBvbmVudHMvY29kZUl0ZW0vY29kZUl0ZW0uYXRvbS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBQUEsMkRBQThFO0FBQzlFLHlDQUF1QztBQUV2QyxrQkFBMEIsU0FBUSxVQUFJO0lBRzFCLEtBQUssQ0FBQyxTQUFpQjtRQUMzQixJQUFJLEdBQUcsR0FBRyxTQUFTLENBQUMsS0FBSyxDQUFDLHNFQUFzRSxDQUFDLENBQUM7UUFDbEcsTUFBTSxDQUFDLENBQUMsR0FBRyxJQUFJLEdBQUcsQ0FBQyxNQUFNLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUc7WUFDdEMsQ0FBQyxHQUFHLEdBQUcsUUFBUSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDbEQsQ0FBQyxHQUFHLEdBQUcsUUFBUSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDbEQsQ0FBQyxHQUFHLEdBQUcsUUFBUSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO0lBQzVELENBQUM7SUFFTSxrQkFBa0IsQ0FBQyxRQUFnQjtRQUN0QyxNQUFNLENBQUMsS0FBSyxDQUFDLFVBQVUsRUFBRSxDQUFDLE9BQU8sQ0FBQyxlQUFFLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsT0FBTyxFQUFFLENBQUM7SUFDeEUsQ0FBQztJQUVNLHFCQUFxQixDQUFDLFFBQWdCO1FBQ3pDLGdIQUFnSDtRQUNoSCxJQUFJLE1BQU0sR0FBSSx1REFBdUQsUUFBUSwyQkFBMkIsQ0FBQztRQUN6RyxNQUFNLENBQUMsb0JBQU8sQ0FBQyxhQUFhLENBQUMsVUFBVSxNQUFNLEVBQUUsQ0FBQyxDQUFDO0lBQ3JELENBQUM7SUFFTSxrQkFBa0I7UUFDckIsTUFBTSxDQUFDLEtBQUssQ0FBQyxVQUFVLEVBQUUsQ0FBQyxXQUFXLENBQUMsa0JBQWtCLENBQUMsQ0FBQztJQUM5RCxDQUFDO0lBRVksa0JBQWtCOzs7WUFDM0IsSUFBSSxLQUFLLEdBQVcsTUFBTSxvQkFBZ0IsWUFBRyxXQUFXLENBQUMsa0JBQWtCLENBQUMsQ0FBQztZQUM3RSxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUM3QixDQUFDO0tBQUE7SUFFWSxZQUFZLENBQUMsU0FBaUI7OztZQUN2QyxNQUFNLENBQUMsTUFBTSxvQkFBZ0IsWUFBRyxPQUFPLENBQUMsZUFBRSxDQUFDLFNBQVMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUMxRixDQUFDO0tBQUE7SUFFWSxvQkFBb0IsQ0FBQyxTQUFpQjs7WUFDL0MsTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxJQUFJLENBQUMsWUFBWSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUM7UUFDMUQsQ0FBQztLQUFBO0lBRVksMkJBQTJCOzs7WUFDcEMsTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxvQkFBZ0IsWUFBRyxPQUFPLENBQUMsZUFBRSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO1FBQ25HLENBQUM7S0FBQTtJQUVNLGVBQWU7UUFDbEIsTUFBTSxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUU7YUFDakIsSUFBSSxDQUFDLEdBQUcsRUFBRTtZQUNQLE1BQU0sQ0FBQyxvQkFBTyxDQUFDLGFBQWEsQ0FBQyxHQUFHLEVBQUU7Z0JBQzlCLElBQUksSUFBSSxHQUFHLEVBQUUsQ0FBQztnQkFDZCxFQUFFLENBQUMsQ0FBQyxNQUFNLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQztvQkFDdEIsSUFBSSxHQUFHLE1BQU0sQ0FBQyxZQUFZLEVBQUUsQ0FBQyxRQUFRLEVBQUUsQ0FBQztnQkFDNUMsQ0FBQztnQkFDRCxNQUFNLENBQUMsSUFBSSxDQUFDO1lBQ2hCLENBQUMsQ0FBQyxDQUFDO1FBQ1AsQ0FBQyxDQUFDLENBQUM7SUFDWCxDQUFDO0lBRU8sUUFBUTtRQUNaLE1BQU0sQ0FBQyxvQkFBTyxDQUFDLE9BQU8sRUFBRTthQUNuQixRQUFRLENBQUMsdUJBQVUsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLHVCQUFVLENBQUMsR0FBRyxDQUFDLE9BQU8sRUFBRSxHQUFHLENBQUMsQ0FBQzthQUMzRCxPQUFPLEVBQUUsQ0FBQztJQUNuQixDQUFDOztBQTFEYSxzQkFBUyxHQUFHLGVBQWUsQ0FBQztBQUQ5QyxvQ0E2REMiLCJmaWxlIjoiY29tcG9uZW50cy9jb2RlSXRlbS9jb2RlSXRlbS5hdG9tLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgcHJvbWlzZSwgYnksIGJyb3dzZXIsIHByb3RyYWN0b3IgfSBmcm9tIFwiQHNvbGFyd2luZHMvdXppL3Byb3RyYWN0b3JcIjtcbmltcG9ydCB7IEF0b20gfSBmcm9tIFwiQHNvbGFyd2luZHMvdXppXCI7XG5cbmV4cG9ydCBjbGFzcyBDb2RlSXRlbUF0b20gZXh0ZW5kcyBBdG9tIHtcbiAgICBwdWJsaWMgc3RhdGljIENTU19DTEFTUyA9IFwieHVpLWNvZGUtaXRlbVwiO1xuXG4gICAgcHJpdmF0ZSB0b0hleChyZ2JfY29sb3I6IHN0cmluZyk6IHN0cmluZyB7XG4gICAgICAgIGxldCByZ2IgPSByZ2JfY29sb3IubWF0Y2goL15yZ2JhP1tcXHMrXT9cXChbXFxzK10/KFxcZCspW1xccytdPyxbXFxzK10/KFxcZCspW1xccytdPyxbXFxzK10/KFxcZCspW1xccytdPy9pKTtcbiAgICAgICAgcmV0dXJuIChyZ2IgJiYgcmdiLmxlbmd0aCA9PT0gNCkgPyBcIiNcIiArXG4gICAgICAgIChcIjBcIiArIHBhcnNlSW50KHJnYlsxXSwxMCkudG9TdHJpbmcoMTYpKS5zbGljZSgtMikgK1xuICAgICAgICAoXCIwXCIgKyBwYXJzZUludChyZ2JbMl0sMTApLnRvU3RyaW5nKDE2KSkuc2xpY2UoLTIpICtcbiAgICAgICAgKFwiMFwiICsgcGFyc2VJbnQocmdiWzNdLDEwKS50b1N0cmluZygxNikpLnNsaWNlKC0yKSA6IFwiXCI7XG4gICAgfVxuXG4gICAgcHVibGljIGdldFRleHRCeUNsYXNzTmFtZShzZWxlY3Rvcjogc3RyaW5nKTogcHJvbWlzZS5Qcm9taXNlPHN0cmluZz4ge1xuICAgICAgICByZXR1cm4gc3VwZXIuZ2V0RWxlbWVudCgpLmVsZW1lbnQoYnkuY2xhc3NOYW1lKHNlbGVjdG9yKSkuZ2V0VGV4dCgpO1xuICAgIH1cblxuICAgIHB1YmxpYyBnZXRUZXh0RnJvbUxpbmVOdW1iZXIoc2VsZWN0b3I6IHN0cmluZyk6IHByb21pc2UuUHJvbWlzZTxzdHJpbmc+IHtcbiAgICAgICAgLy9TaW5jZSB0ZXh0IGZyb20gbGluZS1udW1iZXJzIGNhbiBubyBsb25nZXIgYmUgc2VsZWN0ZWQsIHdlIG5lZWQgdG8gc2VsZWN0IGNvbnRlbnQgZnJvbSAnYmVmb3JlJyBwc2V1ZG8gZWxlbWVudFxuICAgICAgICBsZXQgc2NyaXB0ID0gIGB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiLiR7c2VsZWN0b3J9XCIpWzBdLCBcIjpiZWZvcmVcIikuY29udGVudGA7XG4gICAgICAgIHJldHVybiBicm93c2VyLmV4ZWN1dGVTY3JpcHQoYHJldHVybiAke3NjcmlwdH1gKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0QmFja2dyb3VuZENvbG9yKCk6IHByb21pc2UuUHJvbWlzZTxzdHJpbmc+IHtcbiAgICAgICAgcmV0dXJuIHN1cGVyLmdldEVsZW1lbnQoKS5nZXRDc3NWYWx1ZShcImJhY2tncm91bmQtY29sb3JcIik7XG4gICAgfVxuXG4gICAgcHVibGljIGFzeW5jIGdldEJnQ29sb3JBbmRIZXhJdCgpOiBQcm9taXNlPHN0cmluZz4ge1xuICAgICAgICBsZXQgY29sb3I6IHN0cmluZyA9IGF3YWl0IHN1cGVyLmdldEVsZW1lbnQoKS5nZXRDc3NWYWx1ZShcImJhY2tncm91bmQtY29sb3JcIik7XG4gICAgICAgIHJldHVybiB0aGlzLnRvSGV4KGNvbG9yKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgYXN5bmMgZ2V0VGV4dENvbG9yKGNsYXNzTmFtZTogc3RyaW5nKTogUHJvbWlzZTxzdHJpbmc+IHtcbiAgICAgICAgcmV0dXJuIGF3YWl0IHN1cGVyLmdldEVsZW1lbnQoKS5lbGVtZW50KGJ5LmNsYXNzTmFtZShjbGFzc05hbWUpKS5nZXRDc3NWYWx1ZShcImNvbG9yXCIpO1xuICAgIH1cblxuICAgIHB1YmxpYyBhc3luYyBnZXRUZXh0Q29sb3JBbmRIZXhJdChjbGFzc05hbWU6IHN0cmluZyk6IFByb21pc2U8c3RyaW5nPiB7XG4gICAgICAgIHJldHVybiB0aGlzLnRvSGV4KGF3YWl0IHRoaXMuZ2V0VGV4dENvbG9yKGNsYXNzTmFtZSkpO1xuICAgIH1cblxuICAgIHB1YmxpYyBhc3luYyBnZXRUcmFuc2NsdWRlZENvbG9yQW5kSGV4SXQoKTogUHJvbWlzZTxzdHJpbmc+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMudG9IZXgoYXdhaXQgc3VwZXIuZ2V0RWxlbWVudCgpLmVsZW1lbnQoYnkudGFnTmFtZShcInN0cm9uZ1wiKSkuZ2V0Q3NzVmFsdWUoXCJjb2xvclwiKSk7XG4gICAgfVxuXG4gICAgcHVibGljIGdldFNlbGVjdGVkVGV4dCgpOiBwcm9taXNlLlByb21pc2U8YW55PiB7XG4gICAgICAgIHJldHVybiB0aGlzLmRvU2VsZWN0KClcbiAgICAgICAgICAgIC50aGVuKCgpID0+IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gYnJvd3Nlci5leGVjdXRlU2NyaXB0KCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IHRleHQgPSBcIlwiO1xuICAgICAgICAgICAgICAgICAgICBpZiAod2luZG93LmdldFNlbGVjdGlvbikge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGV4dCA9IHdpbmRvdy5nZXRTZWxlY3Rpb24oKS50b1N0cmluZygpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0ZXh0O1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBkb1NlbGVjdCgpOiBwcm9taXNlLlByb21pc2U8dm9pZD4ge1xuICAgICAgICByZXR1cm4gYnJvd3Nlci5hY3Rpb25zKClcbiAgICAgICAgICAgIC5zZW5kS2V5cyhwcm90cmFjdG9yLktleS5jaG9yZChwcm90cmFjdG9yLktleS5DT05UUk9MLCBcImFcIikpXG4gICAgICAgICAgICAucGVyZm9ybSgpO1xuICAgIH1cblxufVxuIl0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9
