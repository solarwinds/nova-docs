"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const protractor_1 = require("@solarwinds/uzi/protractor");
const helpers_1 = require("../helpers");
const index_atom_1 = require("../index.atom");
const uzi_1 = require("@solarwinds/uzi");
describe("USERCONTROL code item: ", () => {
    let listView_case1;
    let listView_case2;
    let listView_case3;
    let firstCodeItem;
    let secondCodeItem;
    let transcludedCodeItem;
    let noLineNumberCodeItem;
    beforeEach(() => {
        helpers_1.default.prepareBrowser("codeItem");
        listView_case1 = uzi_1.Atom.findIn(index_atom_1.ListViewAtom, protractor_1.element(protractor_1.by.id("listview_004")));
        listView_case2 = uzi_1.Atom.findIn(index_atom_1.ListViewAtom, protractor_1.element(protractor_1.by.id("listview_006")));
        listView_case3 = uzi_1.Atom.findIn(index_atom_1.ListViewAtom, protractor_1.element(protractor_1.by.id("listview_008")));
        firstCodeItem = uzi_1.Atom.findIn(index_atom_1.CodeItemAtom, listView_case1.getItem(0));
        secondCodeItem = uzi_1.Atom.findIn(index_atom_1.CodeItemAtom, listView_case1.getItem(1));
        noLineNumberCodeItem = uzi_1.Atom.findIn(index_atom_1.CodeItemAtom, listView_case2.getItem(1));
        transcludedCodeItem = uzi_1.Atom.findIn(index_atom_1.CodeItemAtom, listView_case3.getItem(1));
    });
    it("should display line numbers", () => __awaiter(this, void 0, void 0, function* () {
        let lineNumberText = yield firstCodeItem.getTextFromLineNumber("xui-code-item__line-number-text");
        //getTextFromLineNumber uses getComputedStyles to get pseudo-element's content
        // and it returns string with extra double-quotes, so it was decided to remove them
        return expect(lineNumberText.replace(/["]+/g, "")).toBe("1");
    }));
    it("should not display line numbers if 'line-number' is not set", () => {
        let lineNumberText = secondCodeItem.getTextByClassName("xui-code-item__line-number");
        return expect(lineNumberText).not.toBe("1");
    });
    it("should have a black-colored background", () => {
        return expect(firstCodeItem.getBgColorAndHexIt()).toBe("#1d1d1d");
    });
    it("should have a correct number color", () => {
        return expect(secondCodeItem.getTextColorAndHexIt("hljs-number")).toBe("#d36363");
    });
    it("should have a correct text color", () => {
        return expect(firstCodeItem.getTextColorAndHexIt("hljs-built_in")).toBe("#ffffaa");
    });
    it("should have a correct color of the transcluded text", () => {
        return expect(transcludedCodeItem.getTranscludedColorAndHexIt()).toBe("#0079aa");
    });
    it("should not be able to select line numbers (checked using ctrl+a)", () => __awaiter(this, void 0, void 0, function* () {
        //This component has a problem with protractor's mouse movement, so it was decided to use CTRL+A,
        // hence we need to remove all except one example pages, to select less text.
        protractor_1.browser.executeScript(() => {
            document.querySelectorAll(".xui-page-content__header")[0].remove();
            _.each(document.querySelectorAll(".example"), ((element, index) => {
                if (index !== 0) {
                    element.remove();
                }
            }));
        });
        //hardcoded string to be selected with one listview element
        let hardcodedString = `Example listview with source code

 deny IP anti-spoofing PRIVATE-IP any log
777
 permit TCP any host 10.12.3.76 eq 80
130456
 permit TCP any host 10.12.3.76 eq 443
133
 permit TCP any host 10.12.3.231 eq 21
0
 deny IP any any log
15`;
        let selectedText = yield firstCodeItem.getSelectedText();
        expect(selectedText).toEqual(hardcodedString);
    }));
});

//# sourceMappingURL=data:application/json;base64,
