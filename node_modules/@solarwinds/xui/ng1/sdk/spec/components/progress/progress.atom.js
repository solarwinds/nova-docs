"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const protractor_1 = require("@solarwinds/uzi/protractor");
const uzi_1 = require("@solarwinds/uzi");
class ProgressAtom extends uzi_1.Atom {
    constructor() {
        super(...arguments);
        this.getWidth = () => {
            return super.getElement().getCssValue("width").then((widthVal) => {
                return parseFloat(widthVal.replace("px", ""));
            });
        };
        this.getActualHeight = () => {
            return super.getElement().getSize().then((size) => {
                return size.height;
            });
        };
        this.isDisplayed = () => {
            return super.getElement().isDisplayed();
        };
        this.isProgressBarDisplayed = () => {
            return super.getElement().element(protractor_1.by.className("xui-progress__bar")).isDisplayed();
        };
        this.getMessage = () => {
            const message = super.getElement().element(protractor_1.by.className("xui-progress__message"));
            return message.getText();
        };
        this.canCancel = () => {
            return super.getElement().element(protractor_1.by.className("xui-progress__cancel")).isPresent();
        };
        this.cancelProgress = () => {
            const cancelEl = super.getElement().element(protractor_1.by.className("xui-progress__cancel"));
            return cancelEl.click();
        };
        this.waitForProgressBarToComplete = (timeout) => __awaiter(this, void 0, void 0, function* () {
            let progressBarValueWidth = 0;
            let checkInterval = 100;
            let i = 0;
            const progressBarValue = yield protractor_1.browser.findElements(protractor_1.by.className("xui-progress__bar-value")).then((array) => {
                return array[0];
            });
            while (progressBarValueWidth < 100) {
                progressBarValueWidth = yield progressBarValue.getAttribute("style").then((value) => {
                    return parseFloat(value.replace("%", "") && value.replace("width: ", ""));
                });
                protractor_1.browser.sleep(checkInterval);
                if (i > timeout / checkInterval) {
                    console.log("Quit by timeout because of these possible reasons:");
                    console.log("1. It took progress bar too long to complete");
                    console.log("2. Progress bar wasn't triggered");
                    console.log("3. Progress bar is not visible");
                    console.log("4. The set timeout is too short");
                    return;
                }
                i++;
            }
            ;
        });
    }
}
ProgressAtom.CSS_CLASS = "xui-progress";
exports.ProgressAtom = ProgressAtom;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbXBvbmVudHMvcHJvZ3Jlc3MvcHJvZ3Jlc3MuYXRvbS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBQUEsMkRBQWtFO0FBQ2xFLHlDQUF1QztBQUV2QyxrQkFBMEIsU0FBUSxVQUFJO0lBQXRDOztRQUdXLGFBQVEsR0FBRyxHQUFHLEVBQUU7WUFDbkIsTUFBTSxDQUFDLEtBQUssQ0FBQyxVQUFVLEVBQUUsQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsUUFBUSxFQUFFLEVBQUU7Z0JBQzdELE1BQU0sQ0FBQyxVQUFVLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxJQUFJLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQztZQUNsRCxDQUFDLENBQUMsQ0FBQztRQUNQLENBQUMsQ0FBQztRQUVLLG9CQUFlLEdBQUcsR0FBRyxFQUFFO1lBQzFCLE1BQU0sQ0FBQyxLQUFLLENBQUMsVUFBVSxFQUFFLENBQUMsT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsSUFBSSxFQUFFLEVBQUU7Z0JBQzlDLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDO1lBQ3ZCLENBQUMsQ0FBQyxDQUFDO1FBQ1AsQ0FBQyxDQUFDO1FBRUssZ0JBQVcsR0FBRyxHQUFHLEVBQUU7WUFDdEIsTUFBTSxDQUFDLEtBQUssQ0FBQyxVQUFVLEVBQUUsQ0FBQyxXQUFXLEVBQUUsQ0FBQztRQUM1QyxDQUFDLENBQUM7UUFFSywyQkFBc0IsR0FBRyxHQUFHLEVBQUU7WUFDakMsTUFBTSxDQUFDLEtBQUssQ0FBQyxVQUFVLEVBQUUsQ0FBQyxPQUFPLENBQUMsZUFBRSxDQUFDLFNBQVMsQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDLENBQUMsV0FBVyxFQUFFLENBQUM7UUFDdkYsQ0FBQyxDQUFDO1FBRUssZUFBVSxHQUFHLEdBQUcsRUFBRTtZQUNyQixNQUFNLE9BQU8sR0FBRyxLQUFLLENBQUMsVUFBVSxFQUFFLENBQUMsT0FBTyxDQUFDLGVBQUUsQ0FBQyxTQUFTLENBQUMsdUJBQXVCLENBQUMsQ0FBQyxDQUFDO1lBQ2xGLE1BQU0sQ0FBQyxPQUFPLENBQUMsT0FBTyxFQUFFLENBQUM7UUFDN0IsQ0FBQyxDQUFDO1FBRUssY0FBUyxHQUFHLEdBQUcsRUFBRTtZQUNwQixNQUFNLENBQUMsS0FBSyxDQUFDLFVBQVUsRUFBRSxDQUFDLE9BQU8sQ0FBQyxlQUFFLENBQUMsU0FBUyxDQUFDLHNCQUFzQixDQUFDLENBQUMsQ0FBQyxTQUFTLEVBQUUsQ0FBQztRQUN4RixDQUFDLENBQUM7UUFFSyxtQkFBYyxHQUFHLEdBQTBCLEVBQUU7WUFDaEQsTUFBTSxRQUFRLEdBQUcsS0FBSyxDQUFDLFVBQVUsRUFBRSxDQUFDLE9BQU8sQ0FBQyxlQUFFLENBQUMsU0FBUyxDQUFDLHNCQUFzQixDQUFDLENBQUMsQ0FBQztZQUNsRixNQUFNLENBQUMsUUFBUSxDQUFDLEtBQUssRUFBRSxDQUFDO1FBQzVCLENBQUMsQ0FBQztRQUVLLGlDQUE0QixHQUFHLENBQU8sT0FBZSxFQUFFLEVBQUU7WUFDNUQsSUFBSSxxQkFBcUIsR0FBVyxDQUFDLENBQUM7WUFDdEMsSUFBSSxhQUFhLEdBQVcsR0FBRyxDQUFDO1lBQ2hDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztZQUNWLE1BQU0sZ0JBQWdCLEdBQUcsTUFBTSxvQkFBTyxDQUFDLFlBQVksQ0FBQyxlQUFFLENBQUMsU0FBUyxDQUFDLHlCQUF5QixDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxLQUFLLEVBQUUsRUFBRTtnQkFDeEcsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNwQixDQUFDLENBQUMsQ0FBQztZQUNILE9BQU8scUJBQXFCLEdBQUcsR0FBRyxFQUFFLENBQUM7Z0JBQ2pDLHFCQUFxQixHQUFHLE1BQU0sZ0JBQWdCLENBQUMsWUFBWSxDQUFDLE9BQU8sQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLEtBQUssRUFBRSxFQUFFO29CQUNoRixNQUFNLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsR0FBRyxFQUFFLEVBQUUsQ0FBQyxJQUFJLEtBQUssQ0FBQyxPQUFPLENBQUMsU0FBUyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUM7Z0JBQzlFLENBQUMsQ0FBQyxDQUFDO2dCQUNILG9CQUFPLENBQUMsS0FBSyxDQUFDLGFBQWEsQ0FBQyxDQUFDO2dCQUM3QixFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsT0FBTyxHQUFHLGFBQWEsQ0FBQyxDQUFDLENBQUM7b0JBQzlCLE9BQU8sQ0FBQyxHQUFHLENBQUMsb0RBQW9ELENBQUMsQ0FBQztvQkFDbEUsT0FBTyxDQUFDLEdBQUcsQ0FBQyw4Q0FBOEMsQ0FBQyxDQUFDO29CQUM1RCxPQUFPLENBQUMsR0FBRyxDQUFDLGtDQUFrQyxDQUFDLENBQUM7b0JBQ2hELE9BQU8sQ0FBQyxHQUFHLENBQUMsZ0NBQWdDLENBQUMsQ0FBQztvQkFDOUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxpQ0FBaUMsQ0FBQyxDQUFDO29CQUMvQyxNQUFNLENBQUM7Z0JBQ1gsQ0FBQztnQkFDRCxDQUFDLEVBQUUsQ0FBQztZQUNSLENBQUM7WUFBQSxDQUFDO1FBQ04sQ0FBQyxDQUFBLENBQUM7SUFDTixDQUFDOztBQTNEaUIsc0JBQVMsR0FBRyxjQUFjLENBQUM7QUFEN0Msb0NBNERDIiwiZmlsZSI6ImNvbXBvbmVudHMvcHJvZ3Jlc3MvcHJvZ3Jlc3MuYXRvbS5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGJ5LCBwcm9taXNlLCBicm93c2VyIH0gZnJvbSBcIkBzb2xhcndpbmRzL3V6aS9wcm90cmFjdG9yXCI7XG5pbXBvcnQgeyBBdG9tIH0gZnJvbSBcIkBzb2xhcndpbmRzL3V6aVwiO1xuXG5leHBvcnQgY2xhc3MgUHJvZ3Jlc3NBdG9tIGV4dGVuZHMgQXRvbSB7XG4gICAgcHVibGljIHN0YXRpYyBDU1NfQ0xBU1MgPSBcInh1aS1wcm9ncmVzc1wiO1xuXG4gICAgcHVibGljIGdldFdpZHRoID0gKCkgPT4ge1xuICAgICAgICByZXR1cm4gc3VwZXIuZ2V0RWxlbWVudCgpLmdldENzc1ZhbHVlKFwid2lkdGhcIikudGhlbigod2lkdGhWYWwpID0+IHtcbiAgICAgICAgICAgIHJldHVybiBwYXJzZUZsb2F0KHdpZHRoVmFsLnJlcGxhY2UoXCJweFwiLCBcIlwiKSk7XG4gICAgICAgIH0pO1xuICAgIH07XG5cbiAgICBwdWJsaWMgZ2V0QWN0dWFsSGVpZ2h0ID0gKCkgPT4ge1xuICAgICAgICByZXR1cm4gc3VwZXIuZ2V0RWxlbWVudCgpLmdldFNpemUoKS50aGVuKChzaXplKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gc2l6ZS5oZWlnaHQ7XG4gICAgICAgIH0pO1xuICAgIH07XG5cbiAgICBwdWJsaWMgaXNEaXNwbGF5ZWQgPSAoKSA9PiB7XG4gICAgICAgIHJldHVybiBzdXBlci5nZXRFbGVtZW50KCkuaXNEaXNwbGF5ZWQoKTtcbiAgICB9O1xuXG4gICAgcHVibGljIGlzUHJvZ3Jlc3NCYXJEaXNwbGF5ZWQgPSAoKSA9PiB7XG4gICAgICAgIHJldHVybiBzdXBlci5nZXRFbGVtZW50KCkuZWxlbWVudChieS5jbGFzc05hbWUoXCJ4dWktcHJvZ3Jlc3NfX2JhclwiKSkuaXNEaXNwbGF5ZWQoKTtcbiAgICB9O1xuXG4gICAgcHVibGljIGdldE1lc3NhZ2UgPSAoKSA9PiB7XG4gICAgICAgIGNvbnN0IG1lc3NhZ2UgPSBzdXBlci5nZXRFbGVtZW50KCkuZWxlbWVudChieS5jbGFzc05hbWUoXCJ4dWktcHJvZ3Jlc3NfX21lc3NhZ2VcIikpO1xuICAgICAgICByZXR1cm4gbWVzc2FnZS5nZXRUZXh0KCk7XG4gICAgfTtcblxuICAgIHB1YmxpYyBjYW5DYW5jZWwgPSAoKSA9PiB7XG4gICAgICAgIHJldHVybiBzdXBlci5nZXRFbGVtZW50KCkuZWxlbWVudChieS5jbGFzc05hbWUoXCJ4dWktcHJvZ3Jlc3NfX2NhbmNlbFwiKSkuaXNQcmVzZW50KCk7XG4gICAgfTtcblxuICAgIHB1YmxpYyBjYW5jZWxQcm9ncmVzcyA9ICgpOiBwcm9taXNlLlByb21pc2U8dm9pZD4gPT4ge1xuICAgICAgICBjb25zdCBjYW5jZWxFbCA9IHN1cGVyLmdldEVsZW1lbnQoKS5lbGVtZW50KGJ5LmNsYXNzTmFtZShcInh1aS1wcm9ncmVzc19fY2FuY2VsXCIpKTtcbiAgICAgICAgcmV0dXJuIGNhbmNlbEVsLmNsaWNrKCk7XG4gICAgfTtcblxuICAgIHB1YmxpYyB3YWl0Rm9yUHJvZ3Jlc3NCYXJUb0NvbXBsZXRlID0gYXN5bmMgKHRpbWVvdXQ6IG51bWJlcikgPT4ge1xuICAgICAgICBsZXQgcHJvZ3Jlc3NCYXJWYWx1ZVdpZHRoOiBudW1iZXIgPSAwO1xuICAgICAgICBsZXQgY2hlY2tJbnRlcnZhbDogbnVtYmVyID0gMTAwO1xuICAgICAgICBsZXQgaSA9IDA7XG4gICAgICAgIGNvbnN0IHByb2dyZXNzQmFyVmFsdWUgPSBhd2FpdCBicm93c2VyLmZpbmRFbGVtZW50cyhieS5jbGFzc05hbWUoXCJ4dWktcHJvZ3Jlc3NfX2Jhci12YWx1ZVwiKSkudGhlbigoYXJyYXkpID0+IHtcbiAgICAgICAgICAgIHJldHVybiBhcnJheVswXTtcbiAgICAgICAgfSk7XG4gICAgICAgIHdoaWxlIChwcm9ncmVzc0JhclZhbHVlV2lkdGggPCAxMDApIHtcbiAgICAgICAgICAgIHByb2dyZXNzQmFyVmFsdWVXaWR0aCA9IGF3YWl0IHByb2dyZXNzQmFyVmFsdWUuZ2V0QXR0cmlidXRlKFwic3R5bGVcIikudGhlbigodmFsdWUpID0+IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gcGFyc2VGbG9hdCh2YWx1ZS5yZXBsYWNlKFwiJVwiLCBcIlwiKSAmJiB2YWx1ZS5yZXBsYWNlKFwid2lkdGg6IFwiLCBcIlwiKSk7XG4gICAgICAgICAgICB9KTsgICAgICAgICAgICBcbiAgICAgICAgICAgIGJyb3dzZXIuc2xlZXAoY2hlY2tJbnRlcnZhbCk7XG4gICAgICAgICAgICBpZiAoaSA+IHRpbWVvdXQgLyBjaGVja0ludGVydmFsKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJRdWl0IGJ5IHRpbWVvdXQgYmVjYXVzZSBvZiB0aGVzZSBwb3NzaWJsZSByZWFzb25zOlwiKTtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIjEuIEl0IHRvb2sgcHJvZ3Jlc3MgYmFyIHRvbyBsb25nIHRvIGNvbXBsZXRlXCIpO1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiMi4gUHJvZ3Jlc3MgYmFyIHdhc24ndCB0cmlnZ2VyZWRcIik7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCIzLiBQcm9ncmVzcyBiYXIgaXMgbm90IHZpc2libGVcIik7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCI0LiBUaGUgc2V0IHRpbWVvdXQgaXMgdG9vIHNob3J0XCIpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGkrKztcbiAgICAgICAgfTtcbiAgICB9O1xufVxuIl0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9
