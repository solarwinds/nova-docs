"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const protractor_1 = require("@solarwinds/uzi/protractor");
const index_atom_1 = require("../index.atom");
const uzi_1 = require("@solarwinds/uzi");
const helpers_1 = require("../helpers");
describe("USERCONTROL sorter", () => {
    let sorter;
    beforeEach(() => {
        helpers_1.default.prepareBrowser("sorter");
        sorter = uzi_1.Atom.find(index_atom_1.SorterAtom, "testSorter");
    });
    it("should contain 4 items", () => {
        expect(sorter).toBeDefined();
        expect(sorter.getItemCount()).toBe(4);
        expect(sorter.getItemText(0)).toMatch("Animals");
        expect(sorter.getItemText(1)).toMatch("Stone");
        expect(sorter.getItemText(2)).toMatch("Fruit");
        expect(sorter.getItemText(3)).toMatch("Cars");
    });
    it("should default to desc", () => {
        expect(sorter.isAscendingSortActionDisplayed()).toEqual(false);
        expect(sorter.isDescendingSortActionDisplayed()).toEqual(true);
    });
    it("will notify reverse sort on click", () => {
        expect(sorter.isAscendingSortActionDisplayed()).toEqual(false);
        expect(sorter.isDescendingSortActionDisplayed()).toEqual(true);
        sorter.clickSortToggle();
        expect(sorter.isAscendingSortActionDisplayed()).toEqual(true);
        expect(sorter.isDescendingSortActionDisplayed()).toEqual(false);
        sorter.clickSortToggle();
        expect(sorter.isAscendingSortActionDisplayed()).toEqual(false);
        expect(sorter.isDescendingSortActionDisplayed()).toEqual(true);
        sorter.clickSortToggle();
        expect(sorter.isAscendingSortActionDisplayed()).toEqual(true);
        expect(sorter.isDescendingSortActionDisplayed()).toEqual(false);
    });
    it("will maintain current sort direction when new item clicked", () => {
        expect(sorter.getCurrentValue()).toBe("Fruit");
        expect(sorter.isAscendingSortActionDisplayed()).toEqual(false);
        expect(sorter.isDescendingSortActionDisplayed()).toEqual(true);
        sorter.clickSortToggle();
        expect(sorter.isAscendingSortActionDisplayed()).toEqual(true);
        expect(sorter.isDescendingSortActionDisplayed()).toEqual(false);
        sorter.select("Cars");
        expect(sorter.isAscendingSortActionDisplayed()).toEqual(true);
        expect(sorter.isDescendingSortActionDisplayed()).toEqual(false);
    });
    it("should do callback when sorting has changed", () => {
        let divShownInCallbackFn = protractor_1.element(protractor_1.by.id("sorterCallback"));
        expect(divShownInCallbackFn.isDisplayed()).toEqual(false);
        sorter.clickSortToggle();
        expect(divShownInCallbackFn.isDisplayed()).toEqual(true);
    });
});

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbXBvbmVudHMvc29ydGVyL3NvcnRlci5lMmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSwyREFBZ0U7QUFDaEUsOENBQXlDO0FBQ3pDLHlDQUFxQztBQUNyQyx3Q0FBaUM7QUFFakMsUUFBUSxDQUFDLG9CQUFvQixFQUFFLEdBQUcsRUFBRTtJQUNoQyxJQUFJLE1BQWtCLENBQUM7SUFFdkIsVUFBVSxDQUFDLEdBQUcsRUFBRTtRQUNaLGlCQUFPLENBQUMsY0FBYyxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQ2pDLE1BQU0sR0FBRyxVQUFJLENBQUMsSUFBSSxDQUFDLHVCQUFVLEVBQUUsWUFBWSxDQUFDLENBQUM7SUFDakQsQ0FBQyxDQUFDLENBQUM7SUFFSCxFQUFFLENBQUMsd0JBQXdCLEVBQUUsR0FBRyxFQUFFO1FBQzlCLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxXQUFXLEVBQUUsQ0FBQztRQUM3QixNQUFNLENBQUMsTUFBTSxDQUFDLFlBQVksRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3RDLE1BQU0sQ0FBQyxNQUFNLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBQ2pELE1BQU0sQ0FBQyxNQUFNLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQy9DLE1BQU0sQ0FBQyxNQUFNLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQy9DLE1BQU0sQ0FBQyxNQUFNLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQ2xELENBQUMsQ0FBQyxDQUFDO0lBRUgsRUFBRSxDQUFDLHdCQUF3QixFQUFFLEdBQUcsRUFBRTtRQUM5QixNQUFNLENBQUMsTUFB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SSxDQUFDLENBQUM7SUFDN0QsQ0FBQyxDQUFDLENBQUM7QUFDUCxDQUFDLENBQUMsQ0FBQyIsImZpbGUiOiJjb21wb25lbnRzL3NvcnRlci9zb3J0ZXIuZTJlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtieSwgZWxlbWVudCwgcHJvbWlzZX0gZnJvbSBcIkBzb2xhcndpbmRzL3V6aS9wcm90cmFjdG9yXCI7XG5pbXBvcnQge1NvcnRlckF0b219IGZyb20gXCIuLi9pbmRleC5hdG9tXCI7XG5pbXBvcnQge0F0b219IGZyb20gXCJAc29sYXJ3aW5kcy91emlcIjtcbmltcG9ydCBIZWxwZXJzIGZyb20gXCIuLi9oZWxwZXJzXCI7XG5cbmRlc2NyaWJlKFwiVVNFUkNPTlRST0wgc29ydGVyXCIsICgpID0+IHtcbiAgICBsZXQgc29ydGVyOiBTb3J0ZXJBdG9tO1xuXG4gICAgYmVmb3JlRWFjaCgoKSA9PiB7XG4gICAgICAgIEhlbHBlcnMucHJlcGFyZUJyb3dzZXIoXCJzb3J0ZXJcIik7XG4gICAgICAgIHNvcnRlciA9IEF0b20uZmluZChTb3J0ZXJBdG9tLCBcInRlc3RTb3J0ZXJcIik7XG4gICAgfSk7XG5cbiAgICBpdChcInNob3VsZCBjb250YWluIDQgaXRlbXNcIiwgKCkgPT4ge1xuICAgICAgICBleHBlY3Qoc29ydGVyKS50b0JlRGVmaW5lZCgpO1xuICAgICAgICBleHBlY3Qoc29ydGVyLmdldEl0ZW1Db3VudCgpKS50b0JlKDQpO1xuICAgICAgICBleHBlY3Qoc29ydGVyLmdldEl0ZW1UZXh0KDApKS50b01hdGNoKFwiQW5pbWFsc1wiKTtcbiAgICAgICAgZXhwZWN0KHNvcnRlci5nZXRJdGVtVGV4dCgxKSkudG9NYXRjaChcIlN0b25lXCIpO1xuICAgICAgICBleHBlY3Qoc29ydGVyLmdldEl0ZW1UZXh0KDIpKS50b01hdGNoKFwiRnJ1aXRcIik7XG4gICAgICAgIGV4cGVjdChzb3J0ZXIuZ2V0SXRlbVRleHQoMykpLnRvTWF0Y2goXCJDYXJzXCIpO1xuICAgIH0pO1xuXG4gICAgaXQoXCJzaG91bGQgZGVmYXVsdCB0byBkZXNjXCIsICgpID0+IHtcbiAgICAgICAgZXhwZWN0KHNvcnRlci5pc0FzY2VuZGluZ1NvcnRBY3Rpb25EaXNwbGF5ZWQoKSkudG9FcXVhbChmYWxzZSk7XG4gICAgICAgIGV4cGVjdChzb3J0ZXIuaXNEZXNjZW5kaW5nU29ydEFjdGlvbkRpc3BsYXllZCgpKS50b0VxdWFsKHRydWUpO1xuICAgIH0pO1xuXG4gICAgaXQoXCJ3aWxsIG5vdGlmeSByZXZlcnNlIHNvcnQgb24gY2xpY2tcIiwgKCkgPT4ge1xuICAgICAgICBleHBlY3Qoc29ydGVyLmlzQXNjZW5kaW5nU29ydEFjdGlvbkRpc3BsYXllZCgpKS50b0VxdWFsKGZhbHNlKTtcbiAgICAgICAgZXhwZWN0KHNvcnRlci5pc0Rlc2NlbmRpbmdTb3J0QWN0aW9uRGlzcGxheWVkKCkpLnRvRXF1YWwodHJ1ZSk7XG4gICAgICAgIHNvcnRlci5jbGlja1NvcnRUb2dnbGUoKTtcbiAgICAgICAgZXhwZWN0KHNvcnRlci5pc0FzY2VuZGluZ1NvcnRBY3Rpb25EaXNwbGF5ZWQoKSkudG9FcXVhbCh0cnVlKTtcbiAgICAgICAgZXhwZWN0KHNvcnRlci5pc0Rlc2NlbmRpbmdTb3J0QWN0aW9uRGlzcGxheWVkKCkpLnRvRXF1YWwoZmFsc2UpO1xuICAgICAgICBzb3J0ZXIuY2xpY2tTb3J0VG9nZ2xlKCk7XG4gICAgICAgIGV4cGVjdChzb3J0ZXIuaXNBc2NlbmRpbmdTb3J0QWN0aW9uRGlzcGxheWVkKCkpLnRvRXF1YWwoZmFsc2UpO1xuICAgICAgICBleHBlY3Qoc29ydGVyLmlzRGVzY2VuZGluZ1NvcnRBY3Rpb25EaXNwbGF5ZWQoKSkudG9FcXVhbCh0cnVlKTtcbiAgICAgICAgc29ydGVyLmNsaWNrU29ydFRvZ2dsZSgpO1xuICAgICAgICBleHBlY3Qoc29ydGVyLmlzQXNjZW5kaW5nU29ydEFjdGlvbkRpc3BsYXllZCgpKS50b0VxdWFsKHRydWUpO1xuICAgICAgICBleHBlY3Qoc29ydGVyLmlzRGVzY2VuZGluZ1NvcnRBY3Rpb25EaXNwbGF5ZWQoKSkudG9FcXVhbChmYWxzZSk7XG4gICAgfSk7XG5cbiAgICBpdChcIndpbGwgbWFpbnRhaW4gY3VycmVudCBzb3J0IGRpcmVjdGlvbiB3aGVuIG5ldyBpdGVtIGNsaWNrZWRcIiwgKCkgPT4ge1xuICAgICAgICBleHBlY3Qoc29ydGVyLmdldEN1cnJlbnRWYWx1ZSgpKS50b0JlKFwiRnJ1aXRcIik7XG4gICAgICAgIGV4cGVjdChzb3J0ZXIuaXNBc2NlbmRpbmdTb3J0QWN0aW9uRGlzcGxheWVkKCkpLnRvRXF1YWwoZmFsc2UpO1xuICAgICAgICBleHBlY3Qoc29ydGVyLmlzRGVzY2VuZGluZ1NvcnRBY3Rpb25EaXNwbGF5ZWQoKSkudG9FcXVhbCh0cnVlKTtcbiAgICAgICAgc29ydGVyLmNsaWNrU29ydFRvZ2dsZSgpO1xuICAgICAgICBleHBlY3Qoc29ydGVyLmlzQXNjZW5kaW5nU29ydEFjdGlvbkRpc3BsYXllZCgpKS50b0VxdWFsKHRydWUpO1xuICAgICAgICBleHBlY3Qoc29ydGVyLmlzRGVzY2VuZGluZ1NvcnRBY3Rpb25EaXNwbGF5ZWQoKSkudG9FcXVhbChmYWxzZSk7XG4gICAgICAgIHNvcnRlci5zZWxlY3QoXCJDYXJzXCIpO1xuICAgICAgICBleHBlY3Qoc29ydGVyLmlzQXNjZW5kaW5nU29ydEFjdGlvbkRpc3BsYXllZCgpKS50b0VxdWFsKHRydWUpO1xuICAgICAgICBleHBlY3Qoc29ydGVyLmlzRGVzY2VuZGluZ1NvcnRBY3Rpb25EaXNwbGF5ZWQoKSkudG9FcXVhbChmYWxzZSk7XG4gICAgfSk7XG5cbiAgICBpdChcInNob3VsZCBkbyBjYWxsYmFjayB3aGVuIHNvcnRpbmcgaGFzIGNoYW5nZWRcIiwgKCkgPT4ge1xuICAgICAgICBsZXQgZGl2U2hvd25JbkNhbGxiYWNrRm4gPSBlbGVtZW50KGJ5LmlkKFwic29ydGVyQ2FsbGJhY2tcIikpO1xuXG4gICAgICAgIGV4cGVjdChkaXZTaG93bkluQ2FsbGJhY2tGbi5pc0Rpc3BsYXllZCgpKS50b0VxdWFsKGZhbHNlKTtcblxuICAgICAgICBzb3J0ZXIuY2xpY2tTb3J0VG9nZ2xlKCk7XG5cbiAgICAgICAgZXhwZWN0KGRpdlNob3duSW5DYWxsYmFja0ZuLmlzRGlzcGxheWVkKCkpLnRvRXF1YWwodHJ1ZSk7XG4gICAgfSk7XG59KTtcbiJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==
