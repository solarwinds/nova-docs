"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const uzi_1 = require("@solarwinds/uzi");
const empty_atom_1 = require("./empty.atom");
const helpers_1 = require("../helpers");
describe("USERCONTROL empty", () => {
    beforeEach(() => {
        helpers_1.default.prepareBrowser("empty");
    });
    const defaultEmptyState = uzi_1.Atom.find(empty_atom_1.EmptyAtom, "defaultEmptyState");
    const customEmptyTemplate = uzi_1.Atom.find(empty_atom_1.EmptyAtom, "customEmptyTemplate");
    const customizedEmptyState = uzi_1.Atom.find(empty_atom_1.EmptyAtom, "customizedEmptyState");
    const customizedEmptyStateCompact = uzi_1.Atom.find(empty_atom_1.EmptyAtom, "customizedEmptyStateCompact");
    it("should properly render default 'title', 'description', 'image' values", () => {
        const defaultTitle = "";
        const defaultDescription = "No data to show";
        const defaultImage = "no-data-to-show";
        expect(defaultEmptyState.getTitle()).toEqual(defaultTitle);
        expect(defaultEmptyState.getDescription()).toEqual(defaultDescription);
        expect(defaultEmptyState.getImage()).toEqual(defaultImage);
    });
    it("should properly switch to compact mode", () => {
        expect(customizedEmptyStateCompact.isCompactModeEnabled()).toBeTruthy();
    });
    it("should properly render custom 'description' and 'image' but no 'title' in compact mode", () => {
        const customizedDescription = "There are no active alerts. Great job.";
        const customizedImage = "no-alerts";
        expect(customizedEmptyStateCompact.getDescription()).toEqual(customizedDescription);
        expect(customizedEmptyStateCompact.getImage()).toEqual(customizedImage);
        expect(customizedEmptyStateCompact.hasTitle()).toBeFalsy();
    });
    it("should properly render custom 'title', 'description', 'image' values", () => {
        const customizedTitle = "No alerts";
        const customizedDescription = "There are no active alerts! Great job!";
        const customizedImage = "ok-robot";
        expect(customizedEmptyState.getTitle()).toEqual(customizedTitle);
        expect(customizedEmptyState.getDescription()).toEqual(customizedDescription);
        expect(customizedEmptyState.getImage()).toEqual(customizedImage);
    });
    it("should render custom template instead of default if 'template-url' is passed", () => {
        expect(customEmptyTemplate.isCustomTemplateRendered()).toBeTruthy();
        expect(customEmptyTemplate.isDefaultTemplateRendered()).toBeFalsy();
    });
    it("should properly bind viewModel object to the empty controller's scope", () => {
        const boundValueText = "TestNode";
        expect(customEmptyTemplate.getCustomTemplateBoundValueText()).toEqual(boundValueText);
    });
});

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbXBvbmVudHMvZW1wdHkvZW1wdHkuZTJlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQ0EseUNBQXFDO0FBQ3JDLDZDQUF1QztBQUN2Qyx3Q0FBaUM7QUFFakMsUUFBUSxDQUFDLG1CQUFtQixFQUFFLEdBQUcsRUFBRTtJQUUvQixVQUFVLENBQUMsR0FBRyxFQUFFO1FBQ1osaUJBQU8sQ0FBQyxjQUFjLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDcEMsQ0FBQyxDQUFDLENBQUM7SUFFSCxNQUFNLGlCQUFpQixHQUFHLFVBQUksQ0FBQyxJQUFJLENBQUMsc0JBQVMsRUFBRSxtQkFBbUIsQ0FBQyxDQUFDO0lBQ3BFLE1BQU0sbUJBQW1CLEdBQUcsVUFBSSxDQUFDLElBQUksQ0FBQyxzQkFBUyxFQUFFLHFCQUFxQixDQUFDLENBQUM7SUFDeEUsTUFBTSxvQkFBb0IsR0FBRyxVQUFJLENBQUMsSUFBSSxDQUFDLHNCQUFTLEVBQUUsc0JBQXNCLENBQUMsQ0FBQztJQUMxRSxNQUFNLDJCQUEyQixHQUFHLFVBQUksQ0FBQyxJQUFJLENBQUMsc0JBQVMsRUFBRSw2QkFBNkIsQ0FBQyxDQUFDO0lBRXhGLEVBQUUsQ0FBQyx1RUFBdUUsRUFBRSxHQUFHLEVBQUU7UUFDN0UsTUFBTSxZQUFZLEdBQUcsRUFBRSxDQUFDO1FBQ3hCLE1BQU0sa0JBQWtCLEdBQUcsaUJBQWlCLENBQUM7UUFDN0MsTUFBTSxZQUFZLEdBQUcsaUJBQWlCLENBQUM7UUFFdkMsTUFBTSxDQUFDLGlCQUFpQixDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUMsT0FBTyxDQUFDLFlBQVksQ0FBQyxDQUFDO1FBQzNELE1BQU0sQ0FBQyxpQkFBaUIsQ0FBQyxjQUFjLEVBQUUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDO1FBQ3ZFLE1BQU0sQ0FBQyxpQkFBaUIsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQUMsQ0FBQztJQUMvRCxDQUFDLENBQUMsQ0FBQztJQUVILEVBQUUsQ0FBQyx3Q0FBd0MsRUFBRSxHQUFHLEVBQUU7UUFDOUMsTUFBTSxDQUFDLDJCQUEyQixDQUFDLG9CQUFvQixFQUFFLENBQUMsQ0FBQyxVQUFVLEVBQUUsQ0FBQztJQUM1RSxDQUFDLENBQUMsQ0FBQztJQUVILEVBQUUsQ0FBQyx3RkFBd0YsRUFBRSxHQUFHLEVBQUU7UUFDOUYsTUFBTSxxQkFBcUIsR0FBRyx3Q0FBd0MsQ0FBQztRQUN2RSxNQUFNLGVBQWUsR0FBRyxXQUFXLENBQUM7UUFFcEMsTUFBTSxDQUFDLDJCQUEyQixDQUFDLGNBQWMsRUFBRSxDQUFDLENBQUMsT0FBTyxDQUFDLHFCQUFxQixDQUFDLENBQUM7UUFDcEYsTUFBTSxDQUFDLDJCQUEyQixDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUMsT0FBTyxDQUFDLGVBQWUsQ0FBQyxDQUFDO1FBQ3hFLE1BQU0sQ0FBQywyQkFBMkIsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDLFNBQVMsRUFBRSxDQUFDO0lBQy9ELENBQUMsQ0FBQyxDQUFDO0lBRUgsRUFBRSxDQUFDLHNFQUFzRSxFQUFFLEdBQUcsRUFBRTtRQUM1RSxNQUFNLGVBQWUsR0FBRyxXQUFXLENBQUM7UUFDcEMsTUFBTSxxQkFBcUIsR0FBRyx3Q0FBd0MsQ0FBQztRQUN2RSxNQUFNLGVBQWUsR0FBRyxVQUFVLENBQUM7UUFFbkMsTUFBTSxDQUFDLG9CQUFvQixDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUMsT0FBTyxDQUFDLGVBQWUsQ0FBQyxDQUFDO1FBQ2pFLE1BQU0sQ0FBQyxvQkFBb0IsQ0FBQyxjQUFjLEVBQUUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDO1FBQzdFLE1BQU0sQ0FBQyxvQkFBb0IsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxlQUFlLENBQUMsQ0FBQztJQUNyRSxDQUFDLENBQUMsQ0FBQztJQUVILEVBQUUsQ0FBQyw4RUFBOEUsRUFBRSxHQUFHLEVBQUU7UUFDcEYsTUFBTSxDQUFDLG1CQUFtQixDQUFDLHdCQUF3QixFQUFFLENBQUMsQ0FBQyxVQUFVLEVBQUUsQ0FBQztRQUNwRSxNQUFNLENBQUMsbUJBQW1CLENBQUMseUJBQXlCLEVBQUUsQ0FBQyxDQUFDLFNBQVMsRUFBRSxDQUFDO0lBQ3hFLENBQUMsQ0FBQyxDQUFDO0lBRUgsRUFBRSxDQUFDLHVFQUF1RSxFQUFFLEdBQUcsRUFBRTtRQUM5RSxNQUFNLGNBQWMsR0FBRyxVQUFVLENBQUM7UUFFbEMsTUFBTSxDQUFDLG1CQUFtQixDQUFDLCtCQUErQixFQUFFLENBQUMsQ0FBQyxPQUFPLENBQUMsY0FBYyxDQUFDLENBQUM7SUFDekYsQ0FBQyxDQUFDLENBQUM7QUFDUCxDQUFDLENBQUMsQ0FBQyIsImZpbGUiOiJjb21wb25lbnRzL2VtcHR5L2VtcHR5LmUyZS5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7cHJvbWlzZX0gZnJvbSBcIkBzb2xhcndpbmRzL3V6aS9wcm90cmFjdG9yXCI7XG5pbXBvcnQge0F0b219IGZyb20gXCJAc29sYXJ3aW5kcy91emlcIjtcbmltcG9ydCB7RW1wdHlBdG9tfSBmcm9tIFwiLi9lbXB0eS5hdG9tXCI7XG5pbXBvcnQgSGVscGVycyBmcm9tIFwiLi4vaGVscGVyc1wiO1xuXG5kZXNjcmliZShcIlVTRVJDT05UUk9MIGVtcHR5XCIsICgpID0+IHtcblxuICAgIGJlZm9yZUVhY2goKCkgPT4ge1xuICAgICAgICBIZWxwZXJzLnByZXBhcmVCcm93c2VyKFwiZW1wdHlcIik7XG4gICAgfSk7XG5cbiAgICBjb25zdCBkZWZhdWx0RW1wdHlTdGF0ZSA9IEF0b20uZmluZChFbXB0eUF0b20sIFwiZGVmYXVsdEVtcHR5U3RhdGVcIik7XG4gICAgY29uc3QgY3VzdG9tRW1wdHlUZW1wbGF0ZSA9IEF0b20uZmluZChFbXB0eUF0b20sIFwiY3VzdG9tRW1wdHlUZW1wbGF0ZVwiKTtcbiAgICBjb25zdCBjdXN0b21pemVkRW1wdHlTdGF0ZSA9IEF0b20uZmluZChFbXB0eUF0b20sIFwiY3VzdG9taXplZEVtcHR5U3RhdGVcIik7XG4gICAgY29uc3QgY3VzdG9taXplZEVtcHR5U3RhdGVDb21wYWN0ID0gQXRvbS5maW5kKEVtcHR5QXRvbSwgXCJjdXN0b21pemVkRW1wdHlTdGF0ZUNvbXBhY3RcIik7XG5cbiAgICBpdChcInNob3VsZCBwcm9wZXJseSByZW5kZXIgZGVmYXVsdCAndGl0bGUnLCAnZGVzY3JpcHRpb24nLCAnaW1hZ2UnIHZhbHVlc1wiLCAoKSA9PiB7XG4gICAgICAgIGNvbnN0IGRlZmF1bHRUaXRsZSA9IFwiXCI7XG4gICAgICAgIGNvbnN0IGRlZmF1bHREZXNjcmlwdGlvbiA9IFwiTm8gZGF0YSB0byBzaG93XCI7XG4gICAgICAgIGNvbnN0IGRlZmF1bHRJbWFnZSA9IFwibm8tZGF0YS10by1zaG93XCI7XG5cbiAgICAgICAgZXhwZWN0KGRlZmF1bHRFbXB0eVN0YXRlLmdldFRpdGxlKCkpLnRvRXF1YWwoZGVmYXVsdFRpdGxlKTtcbiAgICAgICAgZXhwZWN0KGRlZmF1bHRFbXB0eVN0YXRlLmdldERlc2NyaXB0aW9uKCkpLnRvRXF1YWwoZGVmYXVsdERlc2NyaXB0aW9uKTtcbiAgICAgICAgZXhwZWN0KGRlZmF1bHRFbXB0eVN0YXRlLmdldEltYWdlKCkpLnRvRXF1YWwoZGVmYXVsdEltYWdlKTtcbiAgICB9KTtcblxuICAgIGl0KFwic2hvdWxkIHByb3Blcmx5IHN3aXRjaCB0byBjb21wYWN0IG1vZGVcIiwgKCkgPT4ge1xuICAgICAgICBleHBlY3QoY3VzdG9taXplZEVtcHR5U3RhdGVDb21wYWN0LmlzQ29tcGFjdE1vZGVFbmFibGVkKCkpLnRvQmVUcnV0aHkoKTtcbiAgICB9KTtcblxuICAgIGl0KFwic2hvdWxkIHByb3Blcmx5IHJlbmRlciBjdXN0b20gJ2Rlc2NyaXB0aW9uJyBhbmQgJ2ltYWdlJyBidXQgbm8gJ3RpdGxlJyBpbiBjb21wYWN0IG1vZGVcIiwgKCkgPT4ge1xuICAgICAgICBjb25zdCBjdXN0b21pemVkRGVzY3JpcHRpb24gPSBcIlRoZXJlIGFyZSBubyBhY3RpdmUgYWxlcnRzLiBHcmVhdCBqb2IuXCI7XG4gICAgICAgIGNvbnN0IGN1c3RvbWl6ZWRJbWFnZSA9IFwibm8tYWxlcnRzXCI7XG5cbiAgICAgICAgZXhwZWN0KGN1c3RvbWl6ZWRFbXB0eVN0YXRlQ29tcGFjdC5nZXREZXNjcmlwdGlvbigpKS50b0VxdWFsKGN1c3RvbWl6ZWREZXNjcmlwdGlvbik7XG4gICAgICAgIGV4cGVjdChjdXN0b21pemVkRW1wdHlTdGF0ZUNvbXBhY3QuZ2V0SW1hZ2UoKSkudG9FcXVhbChjdXN0b21pemVkSW1hZ2UpO1xuICAgICAgICBleHBlY3QoY3VzdG9taXplZEVtcHR5U3RhdGVDb21wYWN0Lmhhc1RpdGxlKCkpLnRvQmVGYWxzeSgpO1xuICAgIH0pO1xuXG4gICAgaXQoXCJzaG91bGQgcHJvcGVybHkgcmVuZGVyIGN1c3RvbSAndGl0bGUnLCAnZGVzY3JpcHRpb24nLCAnaW1hZ2UnIHZhbHVlc1wiLCAoKSA9PiB7XG4gICAgICAgIGNvbnN0IGN1c3RvbWl6ZWRUaXRsZSA9IFwiTm8gYWxlcnRzXCI7XG4gICAgICAgIGNvbnN0IGN1c3RvbWl6ZWREZXNjcmlwdGlvbiA9IFwiVGhlcmUgYXJlIG5vIGFjdGl2ZSBhbGVydHMhIEdyZWF0IGpvYiFcIjtcbiAgICAgICAgY29uc3QgY3VzdG9taXplZEltYWdlID0gXCJvay1yb2JvdFwiO1xuXG4gICAgICAgIGV4cGVjdChjdXN0b21pemVkRW1wdHlTdGF0ZS5nZXRUaXRsZSgpKS50b0VxdWFsKGN1c3RvbWl6ZWRUaXRsZSk7XG4gICAgICAgIGV4cGVjdChjdXN0b21pemVkRW1wdHlTdGF0ZS5nZXREZXNjcmlwdGlvbigpKS50b0VxdWFsKGN1c3RvbWl6ZWREZXNjcmlwdGlvbik7XG4gICAgICAgIGV4cGVjdChjdXN0b21pemVkRW1wdHlTdGF0ZS5nZXRJbWFnZSgpKS50b0VxdWFsKGN1c3RvbWl6ZWRJbWFnZSk7XG4gICAgfSk7XG5cbiAgICBpdChcInNob3VsZCByZW5kZXIgY3VzdG9tIHRlbXBsYXRlIGluc3RlYWQgb2YgZGVmYXVsdCBpZiAndGVtcGxhdGUtdXJsJyBpcyBwYXNzZWRcIiwgKCkgPT4ge1xuICAgICAgICBleHBlY3QoY3VzdG9tRW1wdHlUZW1wbGF0ZS5pc0N1c3RvbVRlbXBsYXRlUmVuZGVyZWQoKSkudG9CZVRydXRoeSgpO1xuICAgICAgICBleHBlY3QoY3VzdG9tRW1wdHlUZW1wbGF0ZS5pc0RlZmF1bHRUZW1wbGF0ZVJlbmRlcmVkKCkpLnRvQmVGYWxzeSgpO1xuICAgIH0pO1xuXG4gICAgaXQoXCJzaG91bGQgcHJvcGVybHkgYmluZCB2aWV3TW9kZWwgb2JqZWN0IHRvIHRoZSBlbXB0eSBjb250cm9sbGVyJ3Mgc2NvcGVcIiwgKCkgPT4ge1xuICAgICAgIGNvbnN0IGJvdW5kVmFsdWVUZXh0ID0gXCJUZXN0Tm9kZVwiO1xuXG4gICAgICAgZXhwZWN0KGN1c3RvbUVtcHR5VGVtcGxhdGUuZ2V0Q3VzdG9tVGVtcGxhdGVCb3VuZFZhbHVlVGV4dCgpKS50b0VxdWFsKGJvdW5kVmFsdWVUZXh0KTtcbiAgICB9KTtcbn0pO1xuIl0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9
