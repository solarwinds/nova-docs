"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const protractor = require("@solarwinds/uzi/protractor");
const protractor_1 = require("@solarwinds/uzi/protractor");
const helpers_1 = require("../helpers");
const index_atom_1 = require("../index.atom");
const uzi_1 = require("@solarwinds/uzi");
describe("USERCONTROL Button", () => {
    let button;
    let primaryButton;
    let secondaryButton;
    let tertiaryButton;
    let linkButton;
    let repeatButton;
    let withoutRepeatButton;
    let withTextButton;
    let withIconAndTextButton;
    beforeEach(() => {
        helpers_1.default.prepareBrowser("button");
        primaryButton = uzi_1.Atom.findIn(index_atom_1.ButtonAtom, protractor_1.element(protractor_1.by.id("primaryButton")));
        secondaryButton = uzi_1.Atom.findIn(index_atom_1.ButtonAtom, protractor_1.element(protractor_1.by.id("secondaryButton")));
        tertiaryButton = uzi_1.Atom.findIn(index_atom_1.ButtonAtom, protractor_1.element(protractor_1.by.id("tertiaryButton")));
        linkButton = uzi_1.Atom.findIn(index_atom_1.ButtonAtom, protractor_1.element(protractor_1.by.id("linkButton")));
        repeatButton = uzi_1.Atom.findIn(index_atom_1.ButtonAtom, protractor_1.element(protractor_1.by.id("repeatButton")));
        withoutRepeatButton = uzi_1.Atom.findIn(index_atom_1.ButtonAtom, protractor_1.element(protractor_1.by.id("withoutRepeatButton")));
        withTextButton = uzi_1.Atom.findIn(index_atom_1.ButtonAtom, protractor_1.element(protractor_1.by.id("withTextButton")));
        withIconAndTextButton = uzi_1.Atom.findIn(index_atom_1.ButtonAtom, protractor_1.element(protractor_1.by.id("withIconAndTextButton")));
    });
    /*
     on e2e testing page will be:
     * one primary button disabled
     * one secondary button with icon showed
     * one tertiary button  with busy state

     On each button verify the correct color, background, border,
     font, if it is disabled, if it has icon
     and if busy state working
     */
    // primary button
    it("should be primary button disabled", () => {
        expect(primaryButton.isDisabled()).toBe(true);
        expect(primaryButton.hasClass("btn-primary")).toBe(true);
    });
    // secondary button
    it("should be secondary button with icon showed", () => {
        expect(secondaryButton.isIconShown()).toBe(true);
        expect(secondaryButton.hasClass("btn-secondary")).toBe(true);
    });
    // tertiary button
    it("should be tertiary button with busy state", () => {
        expect(tertiaryButton.isBusy()).toBe(true);
        expect(tertiaryButton.hasClass("xui-btn-tertiary")).toBe(true);
    });
    it("should be link button", () => {
        expect(linkButton.hasClass("xui-btn-link")).toBe(true);
    });
    it("button should accept keyboard events", () => {
        const resultSpan = protractor_1.element(protractor_1.by.id("clickResults"));
        const btn = protractor_1.element(protractor_1.by.css("#secondaryButton button"));
        btn.click(); //one click sets focus, adds X
        btn.sendKeys(protractor.Key.ENTER); //should add one X
        expect(resultSpan.getText()).toBe("XX");
    });
    it("clicking twice should fire event twice", () => {
        const resultSpan = protractor_1.element(protractor_1.by.id("clickResults"));
        expect(resultSpan.getText()).toBe("");
        secondaryButton.click();
        secondaryButton.click();
        expect(resultSpan.getText()).toBe("XX");
    });
    it("clicking disabled button should throw", () => {
        const resultSpan = protractor_1.element(protractor_1.by.id("clickResults"));
        //webdriver does not allow clicking on disabled elements, so we have to use js
        protractor_1.browser.executeScript("document.querySelector(\"button[is-disabled=true]\").click()");
        expect(resultSpan.getText()).toBe("");
    });
    it("icon should not display by default", () => {
        primaryButton.getIcon().then((icon) => {
            expect(icon).toBeUndefined();
        });
    });
    it("icon should display when configured", () => {
        secondaryButton.getIcon().then((icon) => {
            expect(icon.getSize()).toBe("default");
        });
    });
    it("count should keep increasing when mousedown", () => {
        const resultSpan = protractor_1.element(protractor_1.by.id("repeatValue"));
        repeatButton.mouseClickHold();
        expect(resultSpan.getText()).toBeGreaterThan(155);
    });
    it("count should increase by 1 when clicked", () => {
        const resultSpan = protractor_1.element(protractor_1.by.id("withoutRepeatValue"));
        withoutRepeatButton.mouseClickHold();
        expect(resultSpan.getText()).toBe("151");
    });
    it("button with text should has valid text", () => {
        const expectedText = "TEST BUTTON";
        const buttonText = withTextButton.getText().then((text) => {
            expect(text).toBe(expectedText);
        });
    });
    it("button with icon and text should has valid text", () => {
        const expectedText = "BUTTON WITH ICON";
        const buttonText = withIconAndTextButton.getText().then((text) => {
            expect(text).toBe(expectedText);
        });
    });
});

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbXBvbmVudHMvYnV0dG9uL2J1dHRvbi5lMmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSx5REFBeUQ7QUFDekQsMkRBQXlFO0FBQ3pFLHdDQUFpQztBQUNqQyw4Q0FBeUM7QUFDekMseUNBQXFDO0FBRXJDLFFBQVEsQ0FBQyxvQkFBb0IsRUFBRSxHQUFHLEVBQUU7SUFDaEMsSUFBSSxNQUFXLENBQUM7SUFDaEIsSUFBSSxhQUF5QixDQUFDO0lBQzlCLElBQUksZUFBMkIsQ0FBQztJQUNoQyxJQUFJLGNBQTBCLENBQUM7SUFDL0IsSUFBSSxVQUFzQixDQUFDO0lBQzNCLElBQUksWUFBd0IsQ0FBQztJQUM3QixJQUFJLG1CQUErQixDQUFDO0lBQ3BDLElBQUksY0FBMEIsQ0FBQztJQUMvQixJQUFJLHFCQUFpQyxDQUFDO0lBRXRDLFVBQVUsQ0FBQyxHQUFHLEVBQUU7UUFDWixpQkFBTyxDQUFDLGNBQWMsQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUNqQyxhQUFhLEdBQUcsVUFBSSxDQUFDLE1BQU0sQ0FBQyx1QkFBVSxFQUFFLG9CQUFPLENBQUMsZUFBRSxDQUFDLEVBQUUsQ0FBQyxlQUFlLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDekUsZUFBZSxHQUFHLFVBQUksQ0FBQyxNQUFNLENBQUMsdUJBQVUsRUFBRSxvQkFBTyxDQUFDLGVBQUUsQ0FBQyxFQUFFLENBQUMsaUJBQWlCLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDN0UsY0FBYyxHQUFHLFVBQUksQ0FBQyxNQUFNLENBQUMsdUJBQVUsRUFBRSxvQkFBTyxDQUFDLGVBQUUsQ0FBQyxFQUFFLENBQUMsZ0JBQWdCLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDM0UsVUFBVSxHQUFHLFVBQUksQ0FBQyxNQUFNLENBQUMsdUJBQVUsRUFBRSxvQkFBTyxDQUFDLGVBQUUsQ0FBQyxFQUFFLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ25FLFlBQVksR0FBRyxVQUFJLENBQUMsTUFBTSxD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Y29tcG9uZW50cy9idXR0b24vYnV0dG9uLmUyZS5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIHByb3RyYWN0b3IgZnJvbSBcIkBzb2xhcndpbmRzL3V6aS9wcm90cmFjdG9yXCI7XG5pbXBvcnQge2Jyb3dzZXIsIGJ5LCBlbGVtZW50LCBwcm9taXNlfSBmcm9tIFwiQHNvbGFyd2luZHMvdXppL3Byb3RyYWN0b3JcIjtcbmltcG9ydCBIZWxwZXJzIGZyb20gXCIuLi9oZWxwZXJzXCI7XG5pbXBvcnQge0J1dHRvbkF0b219IGZyb20gXCIuLi9pbmRleC5hdG9tXCI7XG5pbXBvcnQge0F0b219IGZyb20gXCJAc29sYXJ3aW5kcy91emlcIjtcblxuZGVzY3JpYmUoXCJVU0VSQ09OVFJPTCBCdXR0b25cIiwgKCkgPT4ge1xuICAgIGxldCBidXR0b246IGFueTtcbiAgICBsZXQgcHJpbWFyeUJ1dHRvbjogQnV0dG9uQXRvbTtcbiAgICBsZXQgc2Vjb25kYXJ5QnV0dG9uOiBCdXR0b25BdG9tO1xuICAgIGxldCB0ZXJ0aWFyeUJ1dHRvbjogQnV0dG9uQXRvbTtcbiAgICBsZXQgbGlua0J1dHRvbjogQnV0dG9uQXRvbTtcbiAgICBsZXQgcmVwZWF0QnV0dG9uOiBCdXR0b25BdG9tO1xuICAgIGxldCB3aXRob3V0UmVwZWF0QnV0dG9uOiBCdXR0b25BdG9tO1xuICAgIGxldCB3aXRoVGV4dEJ1dHRvbjogQnV0dG9uQXRvbTtcbiAgICBsZXQgd2l0aEljb25BbmRUZXh0QnV0dG9uOiBCdXR0b25BdG9tO1xuXG4gICAgYmVmb3JlRWFjaCgoKSA9PiB7XG4gICAgICAgIEhlbHBlcnMucHJlcGFyZUJyb3dzZXIoXCJidXR0b25cIik7XG4gICAgICAgIHByaW1hcnlCdXR0b24gPSBBdG9tLmZpbmRJbihCdXR0b25BdG9tLCBlbGVtZW50KGJ5LmlkKFwicHJpbWFyeUJ1dHRvblwiKSkpO1xuICAgICAgICBzZWNvbmRhcnlCdXR0b24gPSBBdG9tLmZpbmRJbihCdXR0b25BdG9tLCBlbGVtZW50KGJ5LmlkKFwic2Vjb25kYXJ5QnV0dG9uXCIpKSk7XG4gICAgICAgIHRlcnRpYXJ5QnV0dG9uID0gQXRvbS5maW5kSW4oQnV0dG9uQXRvbSwgZWxlbWVudChieS5pZChcInRlcnRpYXJ5QnV0dG9uXCIpKSk7XG4gICAgICAgIGxpbmtCdXR0b24gPSBBdG9tLmZpbmRJbihCdXR0b25BdG9tLCBlbGVtZW50KGJ5LmlkKFwibGlua0J1dHRvblwiKSkpO1xuICAgICAgICByZXBlYXRCdXR0b24gPSBBdG9tLmZpbmRJbihCdXR0b25BdG9tLCBlbGVtZW50KGJ5LmlkKFwicmVwZWF0QnV0dG9uXCIpKSk7XG4gICAgICAgIHdpdGhvdXRSZXBlYXRCdXR0b24gPSBBdG9tLmZpbmRJbihCdXR0b25BdG9tLCBlbGVtZW50KGJ5LmlkKFwid2l0aG91dFJlcGVhdEJ1dHRvblwiKSkpO1xuICAgICAgICB3aXRoVGV4dEJ1dHRvbiA9IEF0b20uZmluZEluKEJ1dHRvbkF0b20sIGVsZW1lbnQoYnkuaWQoXCJ3aXRoVGV4dEJ1dHRvblwiKSkpO1xuICAgICAgICB3aXRoSWNvbkFuZFRleHRCdXR0b24gPSBBdG9tLmZpbmRJbihCdXR0b25BdG9tLCBlbGVtZW50KGJ5LmlkKFwid2l0aEljb25BbmRUZXh0QnV0dG9uXCIpKSk7XG4gICAgfSk7XG5cbiAgICAvKlxuICAgICBvbiBlMmUgdGVzdGluZyBwYWdlIHdpbGwgYmU6XG4gICAgICogb25lIHByaW1hcnkgYnV0dG9uIGRpc2FibGVkXG4gICAgICogb25lIHNlY29uZGFyeSBidXR0b24gd2l0aCBpY29uIHNob3dlZFxuICAgICAqIG9uZSB0ZXJ0aWFyeSBidXR0b24gIHdpdGggYnVzeSBzdGF0ZVxuXG4gICAgIE9uIGVhY2ggYnV0dG9uIHZlcmlmeSB0aGUgY29ycmVjdCBjb2xvciwgYmFja2dyb3VuZCwgYm9yZGVyLFxuICAgICBmb250LCBpZiBpdCBpcyBkaXNhYmxlZCwgaWYgaXQgaGFzIGljb25cbiAgICAgYW5kIGlmIGJ1c3kgc3RhdGUgd29ya2luZ1xuICAgICAqL1xuICAgIC8vIHByaW1hcnkgYnV0dG9uXG4gICAgaXQoXCJzaG91bGQgYmUgcHJpbWFyeSBidXR0b24gZGlzYWJsZWRcIiwgKCkgPT4ge1xuICAgICAgICBleHBlY3QocHJpbWFyeUJ1dHRvbi5pc0Rpc2FibGVkKCkpLnRvQmUodHJ1ZSk7XG4gICAgICAgIGV4cGVjdChwcmltYXJ5QnV0dG9uLmhhc0NsYXNzKFwiYnRuLXByaW1hcnlcIikpLnRvQmUodHJ1ZSk7XG4gICAgfSk7XG5cbiAgICAvLyBzZWNvbmRhcnkgYnV0dG9uXG4gICAgaXQoXCJzaG91bGQgYmUgc2Vjb25kYXJ5IGJ1dHRvbiB3aXRoIGljb24gc2hvd2VkXCIsICgpID0+IHtcbiAgICAgICAgZXhwZWN0KHNlY29uZGFyeUJ1dHRvbi5pc0ljb25TaG93bigpKS50b0JlKHRydWUpO1xuICAgICAgICBleHBlY3Qoc2Vjb25kYXJ5QnV0dG9uLmhhc0NsYXNzKFwiYnRuLXNlY29uZGFyeVwiKSkudG9CZSh0cnVlKTtcbiAgICB9KTtcblxuICAgIC8vIHRlcnRpYXJ5IGJ1dHRvblxuICAgIGl0KFwic2hvdWxkIGJlIHRlcnRpYXJ5IGJ1dHRvbiB3aXRoIGJ1c3kgc3RhdGVcIiwgKCkgPT4ge1xuICAgICAgICBleHBlY3QodGVydGlhcnlCdXR0b24uaXNCdXN5KCkpLnRvQmUodHJ1ZSk7XG4gICAgICAgIGV4cGVjdCh0ZXJ0aWFyeUJ1dHRvbi5oYXNDbGFzcyhcInh1aS1idG4tdGVydGlhcnlcIikpLnRvQmUodHJ1ZSk7XG4gICAgfSk7XG5cbiAgICBpdChcInNob3VsZCBiZSBsaW5rIGJ1dHRvblwiLCAoKSA9PiB7XG4gICAgICAgIGV4cGVjdChsaW5rQnV0dG9uLmhhc0NsYXNzKFwieHVpLWJ0bi1saW5rXCIpKS50b0JlKHRydWUpO1xuICAgIH0pO1xuXG4gICAgaXQoXCJidXR0b24gc2hvdWxkIGFjY2VwdCBrZXlib2FyZCBldmVudHNcIiwgKCkgPT4ge1xuICAgICAgICBjb25zdCByZXN1bHRTcGFuID0gZWxlbWVudChieS5pZChcImNsaWNrUmVzdWx0c1wiKSk7XG4gICAgICAgIGNvbnN0IGJ0biA9IGVsZW1lbnQoYnkuY3NzKFwiI3NlY29uZGFyeUJ1dHRvbiBidXR0b25cIikpO1xuICAgICAgICBidG4uY2xpY2soKTsgLy9vbmUgY2xpY2sgc2V0cyBmb2N1cywgYWRkcyBYXG4gICAgICAgIGJ0bi5zZW5kS2V5cyhwcm90cmFjdG9yLktleS5FTlRFUik7IC8vc2hvdWxkIGFkZCBvbmUgWFxuICAgICAgICBleHBlY3QocmVzdWx0U3Bhbi5nZXRUZXh0KCkpLnRvQmUoXCJYWFwiKTtcbiAgICB9KTtcblxuICAgIGl0KFwiY2xpY2tpbmcgdHdpY2Ugc2hvdWxkIGZpcmUgZXZlbnQgdHdpY2VcIiwgKCkgPT4ge1xuICAgICAgICBjb25zdCByZXN1bHRTcGFuID0gZWxlbWVudChieS5pZChcImNsaWNrUmVzdWx0c1wiKSk7XG4gICAgICAgIGV4cGVjdChyZXN1bHRTcGFuLmdldFRleHQoKSkudG9CZShcIlwiKTtcbiAgICAgICAgc2Vjb25kYXJ5QnV0dG9uLmNsaWNrKCk7XG4gICAgICAgIHNlY29uZGFyeUJ1dHRvbi5jbGljaygpO1xuICAgICAgICBleHBlY3QocmVzdWx0U3Bhbi5nZXRUZXh0KCkpLnRvQmUoXCJYWFwiKTtcbiAgICB9KTtcblxuICAgIGl0KFwiY2xpY2tpbmcgZGlzYWJsZWQgYnV0dG9uIHNob3VsZCB0aHJvd1wiLCAoKSA9PiB7XG4gICAgICAgIGNvbnN0IHJlc3VsdFNwYW4gPSBlbGVtZW50KGJ5LmlkKFwiY2xpY2tSZXN1bHRzXCIpKTtcbiAgICAgICAgLy93ZWJkcml2ZXIgZG9lcyBub3QgYWxsb3cgY2xpY2tpbmcgb24gZGlzYWJsZWQgZWxlbWVudHMsIHNvIHdlIGhhdmUgdG8gdXNlIGpzXG4gICAgICAgIGJyb3dzZXIuZXhlY3V0ZVNjcmlwdChcImRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXFxcImJ1dHRvbltpcy1kaXNhYmxlZD10cnVlXVxcXCIpLmNsaWNrKClcIik7XG4gICAgICAgIGV4cGVjdChyZXN1bHRTcGFuLmdldFRleHQoKSkudG9CZShcIlwiKTtcbiAgICB9KTtcblxuICAgIGl0KFwiaWNvbiBzaG91bGQgbm90IGRpc3BsYXkgYnkgZGVmYXVsdFwiLCAoKSA9PiB7XG4gICAgICAgIHByaW1hcnlCdXR0b24uZ2V0SWNvbigpLnRoZW4oKGljb24pID0+IHtcbiAgICAgICAgICAgIGV4cGVjdChpY29uKS50b0JlVW5kZWZpbmVkKCk7XG4gICAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgaXQoXCJpY29uIHNob3VsZCBkaXNwbGF5IHdoZW4gY29uZmlndXJlZFwiLCAoKSA9PiB7XG4gICAgICAgIHNlY29uZGFyeUJ1dHRvbi5nZXRJY29uKCkudGhlbigoaWNvbikgPT4ge1xuICAgICAgICAgICAgZXhwZWN0KGljb24uZ2V0U2l6ZSgpKS50b0JlKFwiZGVmYXVsdFwiKTtcbiAgICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBpdChcImNvdW50IHNob3VsZCBrZWVwIGluY3JlYXNpbmcgd2hlbiBtb3VzZWRvd25cIiwgKCkgPT4ge1xuICAgICAgICBjb25zdCByZXN1bHRTcGFuID0gZWxlbWVudChieS5pZChcInJlcGVhdFZhbHVlXCIpKTtcbiAgICAgICAgcmVwZWF0QnV0dG9uLm1vdXNlQ2xpY2tIb2xkKCk7XG4gICAgICAgIGV4cGVjdChyZXN1bHRTcGFuLmdldFRleHQoKSkudG9CZUdyZWF0ZXJUaGFuKDE1NSk7XG5cbiAgICB9KTtcblxuICAgIGl0KFwiY291bnQgc2hvdWxkIGluY3JlYXNlIGJ5IDEgd2hlbiBjbGlja2VkXCIsICgpID0+IHtcbiAgICAgICAgY29uc3QgcmVzdWx0U3BhbiA9IGVsZW1lbnQoYnkuaWQoXCJ3aXRob3V0UmVwZWF0VmFsdWVcIikpO1xuICAgICAgICB3aXRob3V0UmVwZWF0QnV0dG9uLm1vdXNlQ2xpY2tIb2xkKCk7XG4gICAgICAgIGV4cGVjdChyZXN1bHRTcGFuLmdldFRleHQoKSkudG9CZShcIjE1MVwiKTtcblxuICAgIH0pO1xuXG4gICAgaXQoXCJidXR0b24gd2l0aCB0ZXh0IHNob3VsZCBoYXMgdmFsaWQgdGV4dFwiLCAoKSA9PiB7XG4gICAgICAgIGNvbnN0IGV4cGVjdGVkVGV4dCA9IFwiVEVTVCBCVVRUT05cIjtcblxuICAgICAgICBjb25zdCBidXR0b25UZXh0ID0gd2l0aFRleHRCdXR0b24uZ2V0VGV4dCgpLnRoZW4oKHRleHQpID0+IHtcbiAgICAgICAgICAgIGV4cGVjdCh0ZXh0KS50b0JlKGV4cGVjdGVkVGV4dCk7XG4gICAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgaXQoXCJidXR0b24gd2l0aCBpY29uIGFuZCB0ZXh0IHNob3VsZCBoYXMgdmFsaWQgdGV4dFwiLCAoKSA9PiB7XG4gICAgICAgIGNvbnN0IGV4cGVjdGVkVGV4dCA9IFwiQlVUVE9OIFdJVEggSUNPTlwiO1xuXG4gICAgICAgIGNvbnN0IGJ1dHRvblRleHQgPSB3aXRoSWNvbkFuZFRleHRCdXR0b24uZ2V0VGV4dCgpLnRoZW4oKHRleHQpID0+IHtcbiAgICAgICAgICAgIGV4cGVjdCh0ZXh0KS50b0JlKGV4cGVjdGVkVGV4dCk7XG4gICAgICAgIH0pO1xuICAgIH0pO1xufSk7XG4iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=
