"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const protractor_1 = require("@solarwinds/uzi/protractor");
const helpers_1 = require("../helpers");
const index_atom_1 = require("../index.atom");
const uzi_1 = require("@solarwinds/uzi");
describe("USERCONTROL ifShow > ", () => {
    let atom1, atom2;
    let toggle1, toggle2;
    const text = "the content";
    beforeEach(() => {
        helpers_1.default.prepareBrowser("ifShow");
        const uc1 = protractor_1.element(protractor_1.by.className("uc1")), uc2 = protractor_1.element(protractor_1.by.className("uc2"));
        atom1 = uzi_1.Atom.findIn(index_atom_1.IfShowAtom, uc1);
        atom2 = uzi_1.Atom.findIn(index_atom_1.IfShowAtom, uc2);
        toggle1 = uc1.element(protractor_1.by.name("toggle"));
        toggle2 = uc2.element(protractor_1.by.name("toggle"));
    });
    describe("initially > ", () => {
        it("is visible if set to 'true'", () => {
            expect(atom1.ngIfIsDisplayed()).toBeTruthy();
            expect(atom1.ngShowIsDisplayed()).toBeTruthy();
            expect(atom1.getText()).toBe(text);
        });
        it("is invisible if set to 'false'", () => {
            expect(atom2.ngIfIsPresent()).toBeFalsy();
        });
    });
    describe("behavior > ", () => {
        const verifyAtom = (atom, ifPresent, ifDisplayed, showPresent, showDisplayed) => {
            expect(atom.ngIfIsPresent()).toBe(ifPresent);
            expect(atom.ngIfIsDisplayed()).toBe(ifDisplayed);
            expect(atom.ngShowIsPresent()).toBe(showPresent);
            expect(atom.ngShowIsDisplayed()).toBe(showDisplayed);
        };
        it("if initially visible and hidden ngShow is hidden", () => {
            toggle1.click();
            verifyAtom(atom1, true, true, true, false);
        });
        it("if initially invisible and shown everything is shown", () => {
            toggle2.click();
            verifyAtom(atom2, true, true, true, true);
        });
        it("if initially invisible, shown and hidden just ngShow is hidden", () => {
            toggle2.click();
            toggle2.click();
            verifyAtom(atom2, true, true, true, false);
        });
    });
});

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbXBvbmVudHMvaWZTaG93L2lmU2hvdy5lMmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSwyREFBK0U7QUFDL0Usd0NBQWlDO0FBQ2pDLDhDQUF5QztBQUN6Qyx5Q0FBcUM7QUFFckMsUUFBUSxDQUFDLHVCQUF1QixFQUFFLEdBQUcsRUFBRTtJQUNuQyxJQUFJLEtBQWlCLEVBQUUsS0FBaUIsQ0FBQztJQUN6QyxJQUFJLE9BQXNCLEVBQUUsT0FBc0IsQ0FBQztJQUVuRCxNQUFNLElBQUksR0FBRyxhQUFhLENBQUM7SUFFM0IsVUFBVSxDQUFDLEdBQUcsRUFBRTtRQUNaLGlCQUFPLENBQUMsY0FBYyxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBRWpDLE1BQU0sR0FBRyxHQUFHLG9CQUFPLENBQUMsZUFBRSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUNwQyxHQUFHLEdBQUcsb0JBQU8sQ0FBQyxlQUFFLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7UUFFdkMsS0FBSyxHQUFHLFVBQUksQ0FBQyxNQUFNLENBQUMsdUJBQVUsRUFBRSxHQUFHLENBQUMsQ0FBQztRQUNyQyxLQUFLLEdBQUcsVUFBSSxDQUFDLE1BQU0sQ0FBQyx1QkFBVSxFQUFFLEdBQUcsQ0FBQyxDQUFDO1FBRXJDLE9BQU8sR0FBRyxHQUFHLENBQUMsT0FBTyxDQUFDLGVBQUUsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQztRQUN6QyxPQUFPLEdBQUcsR0FBRyxDQUFDLE9BQU8sQ0FBQyxlQUFFLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7SUFDN0MsQ0FBQyxDQUFDLENBQUM7SUFFSCxRQUFRLENBQUMsY0FBYyxFQUFFLEdBQUcsRUFBRTtRQUMxQixFQUFFLENBQUMsNkJBQTZCLEVBQUUsR0FBRyxFQUFFO1lBQ25DLE1BQU0sQ0FBQyxLQUFLLENBQUMsZUFBZSxFQUFFLENBQUMsQ0FBQyxVQUFVLEVBQUUsQ0FBQztZQUM3QyxNQUFNLENBQUMsS0FBSyxDQUFDLGlCQUFpQixFQUFFLENBQUMsQ0FBQyxVQUFVLEVBQUUsQ0FBQztZQUMvQyxNQUFNLENBQUMsS0FBSyxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ3ZDLENBQUMsQ0FBQyxDQUFDO1FBRUgsRUFBRSxDQUFDLGdDQUFnQyxFQUFFLEdBQUcsRUFBRTtZQUN0QyxNQUFNLENBQUMsS0FBSyxDQUFDLGFBQWEsRUFBRSxDQUFDLENBQUMsU0FBUyxFQUFFLENBQUM7UUFDOUMsQ0FBQyxDQUFDLENBQUM7SUFDUCxDQUFDLENBQUMsQ0FBQztJQUVILFFBQVEsQ0FBQyxhQUFhLEVBQUUsR0FBRyxFQUFFO1FBRXpCLE1BQU0sVUFBVSxHQUFHLENBQUMsSUFBZ0IsRUFBRSxTQUFrQixFQUFFLFdBQW9CLEVBQzFELFdBQW9CLEVBQUUsYUFBc0IsRUFBUSxFQUFFO1lBRXRFLE1BQU0sQ0FBQyxJQUFJLENBQUMsYUFBYSxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7WUFDN0MsTUFBTSxDQUFDLElBQUksQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQztZQUNqRCxNQUFNLENBQUMsSUFBSSxDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDO1lBQ2pELE1BQU0sQ0FBQyxJQUFJLENBQUMsaUJBQWlCLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQztRQUN6RCxDQUFDLENBQUM7UUFFRixFQUFFLENBQUMsa0RBQWtELEVBQUUsR0FBRyxFQUFFO1lBQ3hELE9BQU8sQ0FBQyxLQUFLLEVBQUUsQ0FBQztZQUNoQixVQUFVLENBQUMsS0FBSyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLEtBQUssQ0FBQyxDQUFDO1FBQy9DLENBQUMsQ0FBQyxDQUFDO1FBRUgsRUFBRSxDQUFDLHNEQUFzRCxFQUFFLEdBQUcsRUFBRTtZQUM1RCxPQUFPLENBQUMsS0FBSyxFQUFFLENBQUM7WUFDaEIsVUFBVSxDQUFDLEtBQUssRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQztRQUM5QyxDQUFDLENBQUMsQ0FBQztRQUVILEVBQUUsQ0FBQyxnRUFBZ0UsRUFBRSxHQUFHLEVBQUU7WUFDdEUsT0FBTyxDQUFDLEtBQUssRUFBRSxDQUFDO1lBQ2hCLE9BQU8sQ0FBQyxLQUFLLEVBQUUsQ0FBQztZQUNoQixVQUFVLENBQUMsS0FBSyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLEtBQUssQ0FBQyxDQUFDO1FBQy9DLENBQUMsQ0FBQyxDQUFDO0lBQ1AsQ0FBQyxDQUFDLENBQUM7QUFDUCxDQUFDLENBQUMsQ0FBQyIsImZpbGUiOiJjb21wb25lbnRzL2lmU2hvdy9pZlNob3cuZTJlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtieSwgZWxlbWVudCwgRWxlbWVudEZpbmRlciwgcHJvbWlzZX0gZnJvbSBcIkBzb2xhcndpbmRzL3V6aS9wcm90cmFjdG9yXCI7XG5pbXBvcnQgSGVscGVycyBmcm9tIFwiLi4vaGVscGVyc1wiO1xuaW1wb3J0IHtJZlNob3dBdG9tfSBmcm9tIFwiLi4vaW5kZXguYXRvbVwiO1xuaW1wb3J0IHtBdG9tfSBmcm9tIFwiQHNvbGFyd2luZHMvdXppXCI7XG5cbmRlc2NyaWJlKFwiVVNFUkNPTlRST0wgaWZTaG93ID4gXCIsICgpID0+IHtcbiAgICBsZXQgYXRvbTE6IElmU2hvd0F0b20sIGF0b20yOiBJZlNob3dBdG9tO1xuICAgIGxldCB0b2dnbGUxOiBFbGVtZW50RmluZGVyLCB0b2dnbGUyOiBFbGVtZW50RmluZGVyO1xuXG4gICAgY29uc3QgdGV4dCA9IFwidGhlIGNvbnRlbnRcIjtcblxuICAgIGJlZm9yZUVhY2goKCkgPT4ge1xuICAgICAgICBIZWxwZXJzLnByZXBhcmVCcm93c2VyKFwiaWZTaG93XCIpO1xuXG4gICAgICAgIGNvbnN0IHVjMSA9IGVsZW1lbnQoYnkuY2xhc3NOYW1lKFwidWMxXCIpKSxcbiAgICAgICAgICAgIHVjMiA9IGVsZW1lbnQoYnkuY2xhc3NOYW1lKFwidWMyXCIpKTtcblxuICAgICAgICBhdG9tMSA9IEF0b20uZmluZEluKElmU2hvd0F0b20sIHVjMSk7XG4gICAgICAgIGF0b20yID0gQXRvbS5maW5kSW4oSWZTaG93QXRvbSwgdWMyKTtcblxuICAgICAgICB0b2dnbGUxID0gdWMxLmVsZW1lbnQoYnkubmFtZShcInRvZ2dsZVwiKSk7XG4gICAgICAgIHRvZ2dsZTIgPSB1YzIuZWxlbWVudChieS5uYW1lKFwidG9nZ2xlXCIpKTtcbiAgICB9KTtcblxuICAgIGRlc2NyaWJlKFwiaW5pdGlhbGx5ID4gXCIsICgpID0+IHtcbiAgICAgICAgaXQoXCJpcyB2aXNpYmxlIGlmIHNldCB0byAndHJ1ZSdcIiwgKCkgPT4ge1xuICAgICAgICAgICAgZXhwZWN0KGF0b20xLm5nSWZJc0Rpc3BsYXllZCgpKS50b0JlVHJ1dGh5KCk7XG4gICAgICAgICAgICBleHBlY3QoYXRvbTEubmdTaG93SXNEaXNwbGF5ZWQoKSkudG9CZVRydXRoeSgpO1xuICAgICAgICAgICAgZXhwZWN0KGF0b20xLmdldFRleHQoKSkudG9CZSh0ZXh0KTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaXQoXCJpcyBpbnZpc2libGUgaWYgc2V0IHRvICdmYWxzZSdcIiwgKCkgPT4ge1xuICAgICAgICAgICAgZXhwZWN0KGF0b20yLm5nSWZJc1ByZXNlbnQoKSkudG9CZUZhbHN5KCk7XG4gICAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgZGVzY3JpYmUoXCJiZWhhdmlvciA+IFwiLCAoKSA9PiB7XG5cbiAgICAgICAgY29uc3QgdmVyaWZ5QXRvbSA9IChhdG9tOiBJZlNob3dBdG9tLCBpZlByZXNlbnQ6IGJvb2xlYW4sIGlmRGlzcGxheWVkOiBib29sZWFuLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNob3dQcmVzZW50OiBib29sZWFuLCBzaG93RGlzcGxheWVkOiBib29sZWFuKTogdm9pZCA9PiB7XG5cbiAgICAgICAgICAgIGV4cGVjdChhdG9tLm5nSWZJc1ByZXNlbnQoKSkudG9CZShpZlByZXNlbnQpO1xuICAgICAgICAgICAgZXhwZWN0KGF0b20ubmdJZklzRGlzcGxheWVkKCkpLnRvQmUoaWZEaXNwbGF5ZWQpO1xuICAgICAgICAgICAgZXhwZWN0KGF0b20ubmdTaG93SXNQcmVzZW50KCkpLnRvQmUoc2hvd1ByZXNlbnQpO1xuICAgICAgICAgICAgZXhwZWN0KGF0b20ubmdTaG93SXNEaXNwbGF5ZWQoKSkudG9CZShzaG93RGlzcGxheWVkKTtcbiAgICAgICAgfTtcblxuICAgICAgICBpdChcImlmIGluaXRpYWxseSB2aXNpYmxlIGFuZCBoaWRkZW4gbmdTaG93IGlzIGhpZGRlblwiLCAoKSA9PiB7XG4gICAgICAgICAgICB0b2dnbGUxLmNsaWNrKCk7XG4gICAgICAgICAgICB2ZXJpZnlBdG9tKGF0b20xLCB0cnVlLCB0cnVlLCB0cnVlLCBmYWxzZSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGl0KFwiaWYgaW5pdGlhbGx5IGludmlzaWJsZSBhbmQgc2hvd24gZXZlcnl0aGluZyBpcyBzaG93blwiLCAoKSA9PiB7XG4gICAgICAgICAgICB0b2dnbGUyLmNsaWNrKCk7XG4gICAgICAgICAgICB2ZXJpZnlBdG9tKGF0b20yLCB0cnVlLCB0cnVlLCB0cnVlLCB0cnVlKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaXQoXCJpZiBpbml0aWFsbHkgaW52aXNpYmxlLCBzaG93biBhbmQgaGlkZGVuIGp1c3QgbmdTaG93IGlzIGhpZGRlblwiLCAoKSA9PiB7XG4gICAgICAgICAgICB0b2dnbGUyLmNsaWNrKCk7XG4gICAgICAgICAgICB0b2dnbGUyLmNsaWNrKCk7XG4gICAgICAgICAgICB2ZXJpZnlBdG9tKGF0b20yLCB0cnVlLCB0cnVlLCB0cnVlLCBmYWxzZSk7XG4gICAgICAgIH0pO1xuICAgIH0pO1xufSk7XG4iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=
