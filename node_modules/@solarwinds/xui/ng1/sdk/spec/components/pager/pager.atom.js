"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const protractor_1 = require("@solarwinds/uzi/protractor");
const uzi_1 = require("@solarwinds/uzi");
class PagerAtom extends uzi_1.Atom {
    constructor() {
        super(...arguments);
        this.prevNextClass = "move-icon";
        this.isDisplayed = () => {
            return super.getElement().isDisplayed();
        };
        this.itemCountText = () => {
            return super.getElement().all(protractor_1.by.className("xui-pager__items-total")).get(0).getText();
        };
        this.setItemsPerPage = (itemsPerPage) => {
            super.getElement().all(protractor_1.by.id("pageNumberMenu1")).get(0).click();
            return super.getElement().element(protractor_1.by.css('[aria-labelledby="pageNumberMenu1"] .xui-pager__item-per-page'))
                .element(protractor_1.by.xpath(".//button[.=" + itemsPerPage + "]")).click();
        };
        this.itemsPerPageSelection = () => {
            return super.getElement().all(protractor_1.by.id("pageNumberMenu1")).get(0).getText().then((test) => {
                let pages = test.split("-");
                let start = parseInt(pages[0], 10);
                let end = parseInt(pages[1], 10);
                return (end - start + 1).toString();
            });
        };
        this.itemsDisplayedText = () => {
            return super.getElement().all(protractor_1.by.className("xui-pager__items-shown")).get(0).getText();
        };
        this.pageLinkClick = (pageNumber) => {
            return super.getElement().all(protractor_1.by.className("xui-pager__item-" + pageNumber)).get(0).click();
        };
        this.isPageLinkVisible = (pageNumber) => {
            return super.getElement()
                .all(protractor_1.by.css(".pagination li[value='" + pageNumber + "'] .xui-pager__item"))
                .then((elements) => {
                return elements.length === 1;
            });
        };
        this.ellipsedPageLink = (pageNumber) => {
            return super.getElement().all(protractor_1.by.className("xui-pager__item-" + pageNumber)).get(0);
        };
        this.ellipsisLink = (index) => {
            return super.getElement().all(protractor_1.by.className("xui-pager__dots")).get(index);
        };
        this.ellipsisLinkClick = (index) => {
            return this.ellipsisLink(index).click();
        };
        this.isEllipsisLinkDisplayed = (index) => {
            return super.getElement()
                .all(protractor_1.by.className("xui-pager__dots"))
                .count()
                .then((count) => {
                return count > index;
            });
        };
        this.prevLink = () => {
            return super.getElement().all(protractor_1.by.className(this.prevNextClass)).get(0);
        };
        this.nextLink = () => {
            return super.getElement().all(protractor_1.by.className(this.prevNextClass)).get(1);
        };
        this.arePrevNextLinksDisplayed = () => {
            return super.getElement()
                .all(protractor_1.by.css(".pagination li .move-icon"))
                .then((elements) => {
                return elements.length === 2;
            });
        };
        this.activePage = () => {
            return super.getElement()
                .all(protractor_1.by.css(".pagination li.active"))
                .get(0)
                .getText()
                .then((text) => {
                return parseInt(text, 10);
            });
        };
        this.isActivePage = (page) => {
            return this.activePage().then((activePage) => {
                return activePage === page;
            });
        };
        this.pageCount = () => {
            return super.getElement().all(protractor_1.by.css(".pagination li .xui-pager__item")).count();
        };
    }
    isEllipsisHasDropupClass() {
        const _super = name => super[name];
        return __awaiter(this, void 0, void 0, function* () {
            yield this.ellipsisLinkClick(0);
            const dropdownElement = yield _super("getElement").call(this)
                .all(protractor_1.by.css(".xui-pager__items *[uib-dropdown]")).get(0);
            return yield uzi_1.Atom.hasClass(dropdownElement, "dropup");
        });
    }
    isItemsDispHasDropupClass() {
        const _super = name => super[name];
        return __awaiter(this, void 0, void 0, function* () {
            const itemsShownElem = yield _super("getElement").call(this)
                .all(protractor_1.by.className("xui-pager__items-shown")).get(0);
            yield itemsShownElem.click();
            const dropdownElement = yield _super("getElement").call(this)
                .all(protractor_1.by.css(".xui-pager__info *[uib-dropdown]")).get(0);
            return yield uzi_1.Atom.hasClass(dropdownElement, "dropup");
        });
    }
    ;
}
PagerAtom.CSS_CLASS = "xui-pager";
exports.PagerAtom = PagerAtom;

//# sourceMappingURL=data:application/json;base64,
