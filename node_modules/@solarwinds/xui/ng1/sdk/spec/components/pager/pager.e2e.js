"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const protractor_1 = require("@solarwinds/uzi/protractor");
const index_atom_1 = require("../index.atom");
const helpers_1 = require("../helpers");
const uzi_1 = require("@solarwinds/uzi");
describe("USERCONTROL pager", () => {
    let atom;
    const adjacent = 2;
    const itemCount = 1012;
    const pages = [
        { number: 1, items: "1-25" },
        { number: 5, items: "101-125" },
        { number: 15, items: "351-375" },
        { number: 41, items: "1001-1012" }
    ];
    const pageTwenty = 20;
    beforeEach(() => {
        helpers_1.default.prepareBrowser("pager");
        const parentId = "xui-demo-components-pager";
        atom = uzi_1.Atom.findIn(index_atom_1.PagerAtom, protractor_1.element(protractor_1.by.id(parentId)));
    });
    let getDisplayingText = (itemsPerPage, page, totalItems) => {
        const endItem = Math.min(itemsPerPage * page, totalItems);
        const startItem = itemsPerPage * (page - 1) + 1;
        return startItem.toString() + "-" + endItem.toString();
    };
    it("should be " + itemCount + " items in pager component", () => {
        expect(atom.itemCountText()).toBe(itemCount.toString());
    });
    it("should correctly report items per page", () => {
        const expectedItemsPerPage = "25";
        expect(atom.itemsPerPageSelection()).toBe(expectedItemsPerPage);
    });
    it("should display correct number of page links, including ellipsis links", () => {
        const pageLinkCount = Math.ceil(itemCount / 25);
        expect(atom.pageCount()).toEqual(pageLinkCount);
    });
    it("should display first page by default", () => {
        expect(atom.activePage()).toEqual(1);
    });
    it("should activate the page clicked", () => {
        expect(atom.activePage()).toBe(1);
        expect(atom.isActivePage(3)).toBe(false);
        atom.pageLinkClick(3);
        expect(atom.isActivePage(1)).toBe(false);
        expect(atom.isActivePage(3)).toBe(true);
        atom.pageLinkClick(4);
        expect(atom.isActivePage(1)).toBe(false);
        expect(atom.isActivePage(3)).toBe(false);
        expect(atom.isActivePage(4)).toBe(true);
    });
    it("should honor 'Items per Page'", () => {
        expect(atom.pageCount()).toEqual(41);
        expect(atom.itemsDisplayedText()).toBe(getDisplayingText(25, 1, itemCount));
        atom.pageLinkClick(5);
        expect(atom.itemsDisplayedText()).toBe(getDisplayingText(25, 5, itemCount));
        atom.pageLinkClick(41);
        expect(atom.itemsDisplayedText()).toBe(getDisplayingText(25, 41, itemCount));
        atom.setItemsPerPage(10);
        expect(atom.pageCount()).toEqual(102);
        expect(atom.itemsDisplayedText()).toBe(getDisplayingText(10, 1, itemCount));
        atom.pageLinkClick(5);
        expect(atom.itemsDisplayedText()).toBe(getDisplayingText(10, 5, itemCount));
        atom.pageLinkClick(102);
        expect(atom.itemsDisplayedText()).toBe(getDisplayingText(10, 102, itemCount));
    });
    it("should display ellipsed page links on ellipsis click", () => {
        expect(atom.activePage()).toBe(1);
        expect(atom.isActivePage(pageTwenty)).toBe(false);
        atom.ellipsisLinkClick(0);
        atom.ellipsedPageLink(pageTwenty).click();
        expect(atom.isActivePage(1)).toBe(false);
        expect(atom.isActivePage(pageTwenty)).toBe(true);
    });
    it("should display 2 ellipsis links when active page is not an endpoint link", () => {
        expect(atom.activePage()).toBe(1);
        expect(atom.isEllipsisLinkDisplayed(0)).toBe(true);
        expect(atom.isEllipsisLinkDisplayed(1)).toBe(false);
        atom.ellipsisLinkClick(0);
        atom.ellipsedPageLink(pageTwenty).click();
        expect(atom.isActivePage(pageTwenty)).toBe(true);
        expect(atom.isEllipsisLinkDisplayed(0)).toBe(true);
        expect(atom.isEllipsisLinkDisplayed(1)).toBe(true);
    });
    it("should display 'adjacent' page links on each side of the active page, " +
        "when the active page is not an endpoint link", () => {
        expect(atom.activePage()).toEqual(1);
        atom.ellipsisLink(0).click();
        atom.ellipsedPageLink(pageTwenty).click();
        expect(atom.isActivePage(pageTwenty)).toBe(true);
        expect(atom.isPageLinkVisible(pageTwenty)).toBe(true);
        // left adjacent
        expect(atom.isPageLinkVisible(pageTwenty - adjacent - 1)).toBe(false);
        for (let i = pageTwenty - adjacent; i < adjacent; ++i) {
            expect(atom.isPageLinkVisible(i)).toBe(true);
        }
        // right adjacent
        expect(atom.isPageLinkVisible(pageTwenty + adjacent + 1)).toBe(false);
        for (let i = pageTwenty + 1; i <= pageTwenty + adjacent; ++i) {
            expect(atom.isPageLinkVisible(i)).toBe(true);
        }
    });
    it("page number 15 from popup dialog should be clicked and pages " +
        getDisplayingText(25, 15, itemCount) + " should be displayed", () => {
        atom.ellipsisLink(0).click();
        atom.pageLinkClick(15);
        expect(atom.itemsDisplayedText()).toBe(getDisplayingText(25, 15, itemCount));
    });
    it("should honor 'hideIfEmpty' when pageCount <= 1", () => {
        expect(atom.isDisplayed()).toBe(true);
        const atom2 = uzi_1.Atom.findIn(index_atom_1.PagerAtom, protractor_1.element(protractor_1.by.id("xui-demo-hide-empty-pager-single-page")));
        expect(atom2.isDisplayed()).toBe(false);
        const atom3 = uzi_1.Atom.findIn(index_atom_1.PagerAtom, protractor_1.element(protractor_1.by.id("xui-demo-hide-empty-pager-no-items")));
        expect(atom3.isDisplayed()).toBe(false);
        const atom4 = uzi_1.Atom.findIn(index_atom_1.PagerAtom, protractor_1.element(protractor_1.by.id("xui-demo-show-empty-pager")));
        expect(atom4.isDisplayed()).toBe(true);
        const atom5 = uzi_1.Atom.findIn(index_atom_1.PagerAtom, protractor_1.element(protractor_1.by.id("xui-demo-hide-pager-with-wrong-data")));
        expect(atom5.isDisplayed()).toBe(false);
    });
    it("should honor 'show-prev-next' and provide default", () => {
        expect(atom.arePrevNextLinksDisplayed()).toBe(true);
        const atom2 = uzi_1.Atom.findIn(index_atom_1.PagerAtom, protractor_1.element(protractor_1.by.id("xui-demo-hide-prev-next")));
        expect(atom2.arePrevNextLinksDisplayed()).toBe(false);
    });
    it("should set the correct page on prev/next click", () => {
        expect(atom.activePage()).toEqual(1);
        atom.nextLink().click();
        expect(atom.activePage()).toEqual(2);
        atom.nextLink().click();
        expect(atom.activePage()).toEqual(3);
        atom.prevLink().click();
        expect(atom.activePage()).toEqual(2);
        atom.prevLink().click();
        expect(atom.activePage()).toEqual(1);
        // test prev disablement
        atom.prevLink().click();
        expect(atom.activePage()).toEqual(1);
        // test next disablement
        atom.pageLinkClick(41);
        expect(atom.activePage()).toEqual(41);
        atom.nextLink().click();
        expect(atom.activePage()).toEqual(41);
    });
    it("should honor 'dots' and provide default", () => {
        expect(atom.ellipsisLink(0).getText()).toBe("...");
        const atom1 = uzi_1.Atom.findIn(index_atom_1.PagerAtom, protractor_1.element(protractor_1.by.id("xui-demo-hide-prev-next")));
        expect(atom1.ellipsisLink(0).getText()).toBe("***");
    });
    it("edge detection of component with xui-edge-definer class", () => {
        const atom6 = uzi_1.Atom.findIn(index_atom_1.PagerAtom, protractor_1.element(protractor_1.by.id("xui-demo-edge-detection-pager")));
        expect(atom6.isEllipsisHasDropupClass()).toBeTruthy();
        expect(atom6.isItemsDispHasDropupClass()).toBeTruthy();
    });
});

//# sourceMappingURL=data:application/json;base64,
