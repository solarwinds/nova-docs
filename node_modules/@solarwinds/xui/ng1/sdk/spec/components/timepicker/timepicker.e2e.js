"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const protractor_1 = require("@solarwinds/uzi/protractor");
const helpers_1 = require("../helpers");
const uzi_1 = require("@solarwinds/uzi");
const index_atom_1 = require("../index.atom");
describe("USERCONTROL Timepicker >", () => {
    let timepicker;
    function getModelValue() {
        return protractor_1.element(protractor_1.by.id("model-value")).getText();
    }
    beforeEach(() => {
        helpers_1.default.prepareBrowser("timepicker");
        timepicker = uzi_1.Atom.findIn(index_atom_1.TimepickerAtom, protractor_1.element(protractor_1.by.id("timepicker")));
        timepicker.getInput().click();
    });
    describe("when the timepicker is disabled", () => {
        it("cannot be clicked", () => {
            timepicker = uzi_1.Atom.findIn(index_atom_1.TimepickerAtom, protractor_1.element(protractor_1.by.id("timepicker-disabled")));
            expect(timepicker.getInput().isEnabled()).toEqual(false);
        });
    });
    describe("when the timepicker is enabled", () => {
        it("clicking on it displays the items", () => {
            expect(timepicker.getInput().isEnabled()).toEqual(true);
            expect(timepicker.areItemsDisplayed()).toEqual(true);
        });
    });
    describe("when the timepicker is displayed, it", () => {
        it("contains initial value", () => {
            expect(timepicker.getInputValue()).toEqual("3:30 pm");
        });
    });
    describe("when invalid value is entered, it", () => {
        it("doesn't propagate the value to model", () => {
            timepicker.acceptText("xxx");
            expect(getModelValue()).toEqual("");
        });
        it("marks the field as invalid", () => {
            timepicker.acceptText("xxx");
            expect(timepicker.isValid()).toEqual(false);
        });
    });
    describe("when valid value is entered in text field, it", () => {
        it("overwrites the original value as the whole text was selected on focus", () => {
            timepicker.acceptText("12:00 am");
            expect(timepicker.getInputValue()).toEqual("12:00 am");
        });
        it("propagates '12:00 AM' to model", () => {
            timepicker.acceptText("12:00 AM");
            expect(getModelValue()).toEqual("0001-01-01 00:00");
        });
        it("propagates '8:00 PM' to model", () => {
            timepicker.acceptText("8:00 PM");
            expect(getModelValue()).toEqual("0001-01-01 20:00");
        });
        it("doesn't mark the field as invalid", () => {
            timepicker.acceptText("8:00 PM");
            expect(timepicker.isValid()).toEqual(true);
        });
    });
    describe("when value is chosen from dropdown, it", () => {
        it("displays the value in text field", () => {
            timepicker.scrollToAndSelect("12:30 am");
            expect(timepicker.getInputValue()).toEqual("12:30 am");
            expect(getModelValue()).toEqual("0001-01-01 00:30");
        });
    });
    describe("when partial value is entered", () => {
        describe(", it", () => {
            it("propagates '8' to model", () => {
                timepicker.acceptText("8");
                expect(getModelValue()).toEqual("0001-01-01 08:00");
            });
            it("propagates '20' to model", () => {
                timepicker.acceptText("20");
                expect(getModelValue()).toEqual("0001-01-01 20:00");
            });
            it("propagates '5 PM' to model", () => {
                timepicker.acceptText("5 PM");
                expect(getModelValue()).toEqual("0001-01-01 17:00");
            });
            it("doesn't mark the field as invalid", () => {
                timepicker.acceptText("8");
                expect(timepicker.isValid()).toEqual(true);
            });
        });
        describe("and enter is hit, it", () => {
            it("formats the value in the text field", () => {
                timepicker.acceptText("8\n");
                expect(timepicker.getInputValue()).toEqual("8:00 am");
            });
        });
        describe("and field loses focus, it", () => {
            it("formats the value in the text field", () => {
                timepicker.acceptText("8");
                // move focus by clicking on a different element
                protractor_1.element(protractor_1.by.id("model-value")).click();
                expect(timepicker.getInputValue()).toEqual("8:00 am");
            });
        });
    });
});

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbXBvbmVudHMvdGltZXBpY2tlci90aW1lcGlja2VyLmUyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLDJEQUFnRTtBQUNoRSx3Q0FBaUM7QUFDakMseUNBQXFDO0FBQ3JDLDhDQUE2QztBQUU3QyxRQUFRLENBQUMsMEJBQTBCLEVBQUUsR0FBRyxFQUFFO0lBQ3RDLElBQUksVUFBMEIsQ0FBQztJQUUvQjtRQUNJLE1BQU0sQ0FBQyxvQkFBTyxDQUFDLGVBQUUsQ0FBQyxFQUFFLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQyxPQUFPLEVBQUUsQ0FBQztJQUNuRCxDQUFDO0lBRUQsVUFBVSxDQUFDLEdBQUcsRUFBRTtRQUNaLGlCQUFPLENBQUMsY0FBYyxDQUFDLFlBQVksQ0FBQyxDQUFDO1FBRXJDLFVBQVUsR0FBRyxVQUFJLENBQUMsTUFBTSxDQUFDLDJCQUFjLEVBQUUsb0JBQU8sQ0FBQyxlQUFFLENBQUMsRUFBRSxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUN2RSxVQUFVLENBQUMsUUFBUSxFQUFFLENBQUMsS0FBSyxFQUFFLENBQUM7SUFDbEMsQ0FBQyxDQUFDLENBQUM7SUFFSCxRQUFRLENBQUMsaUNBQWlDLEVBQUUsR0FBRSxFQUFFO1FBQzVDLEVBQUUsQ0FBQyxtQkFBbUIsRUFBRSxHQUFFLEVBQUU7WUFDeEIsVUFBVSxHQUFHLFVBQUksQ0FBQyxNQUFNLENBQUMsMkJBQWMsRUFBRSxvQkFBTyxDQUFDLGVBQUUsQ0FBQyxFQUFFLENBQUMscUJBQXFCLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDaEYsTUFBTSxDQUFDLFVBQVUsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUM3RCxDQUFDLENBQUMsQ0FBQztJQUNQLENBQUMsQ0FBQyxDQUFDO0lBRUgsUUFBUSxDQUFDLGdDQUFnQyxFQUFFLEdBQUUsRUFBRTtRQUMzQyxFQUFFLENBQUMsbUNB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LFVBQVUsQ0FBQyxhQUFhLEVBQUUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQztZQUMxRCxDQUFDLENBQUMsQ0FBQztRQUNQLENBQUMsQ0FBQyxDQUFDO1FBRUgsUUFBUSxDQUFDLDJCQUEyQixFQUFFLEdBQUUsRUFBRTtZQUN0QyxFQUFFLENBQUMscUNBQXFDLEVBQUUsR0FBRSxFQUFFO2dCQUMxQyxVQUFVLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxDQUFDO2dCQUUzQixnREFBZ0Q7Z0JBQ2hELG9CQUFPLENBQUMsZUFBRSxDQUFDLEVBQUUsQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDLEtBQUssRUFBRSxDQUFDO2dCQUV0QyxNQUFNLENBQUMsVUFBVSxDQUFDLGFBQWEsRUFBRSxDQUFDLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDO1lBQzFELENBQUMsQ0FBQyxDQUFDO1FBQ1AsQ0FBQyxDQUFDLENBQUM7SUFDUCxDQUFDLENBQUMsQ0FBQztBQUVQLENBQUMsQ0FBQyxDQUFDIiwiZmlsZSI6ImNvbXBvbmVudHMvdGltZXBpY2tlci90aW1lcGlja2VyLmUyZS5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7YnksIGVsZW1lbnQsIHByb21pc2V9IGZyb20gXCJAc29sYXJ3aW5kcy91emkvcHJvdHJhY3RvclwiO1xuaW1wb3J0IEhlbHBlcnMgZnJvbSBcIi4uL2hlbHBlcnNcIjtcbmltcG9ydCB7QXRvbX0gZnJvbSBcIkBzb2xhcndpbmRzL3V6aVwiO1xuaW1wb3J0IHtUaW1lcGlja2VyQXRvbX0gZnJvbSBcIi4uL2luZGV4LmF0b21cIjtcblxuZGVzY3JpYmUoXCJVU0VSQ09OVFJPTCBUaW1lcGlja2VyID5cIiwgKCkgPT4ge1xuICAgIGxldCB0aW1lcGlja2VyOiBUaW1lcGlja2VyQXRvbTtcblxuICAgIGZ1bmN0aW9uIGdldE1vZGVsVmFsdWUoKSB7XG4gICAgICAgIHJldHVybiBlbGVtZW50KGJ5LmlkKFwibW9kZWwtdmFsdWVcIikpLmdldFRleHQoKTtcbiAgICB9XG5cbiAgICBiZWZvcmVFYWNoKCgpID0+IHtcbiAgICAgICAgSGVscGVycy5wcmVwYXJlQnJvd3NlcihcInRpbWVwaWNrZXJcIik7XG5cbiAgICAgICAgdGltZXBpY2tlciA9IEF0b20uZmluZEluKFRpbWVwaWNrZXJBdG9tLCBlbGVtZW50KGJ5LmlkKFwidGltZXBpY2tlclwiKSkpO1xuICAgICAgICB0aW1lcGlja2VyLmdldElucHV0KCkuY2xpY2soKTtcbiAgICB9KTtcblxuICAgIGRlc2NyaWJlKFwid2hlbiB0aGUgdGltZXBpY2tlciBpcyBkaXNhYmxlZFwiLCAoKT0+IHtcbiAgICAgICAgaXQoXCJjYW5ub3QgYmUgY2xpY2tlZFwiLCAoKT0+IHtcbiAgICAgICAgICAgIHRpbWVwaWNrZXIgPSBBdG9tLmZpbmRJbihUaW1lcGlja2VyQXRvbSwgZWxlbWVudChieS5pZChcInRpbWVwaWNrZXItZGlzYWJsZWRcIikpKTtcbiAgICAgICAgICAgIGV4cGVjdCh0aW1lcGlja2VyLmdldElucHV0KCkuaXNFbmFibGVkKCkpLnRvRXF1YWwoZmFsc2UpO1xuICAgICAgICB9KTtcbiAgICB9KTtcblxuICAgIGRlc2NyaWJlKFwid2hlbiB0aGUgdGltZXBpY2tlciBpcyBlbmFibGVkXCIsICgpPT4ge1xuICAgICAgICBpdChcImNsaWNraW5nIG9uIGl0IGRpc3BsYXlzIHRoZSBpdGVtc1wiLCAoKT0+IHtcbiAgICAgICAgICAgIGV4cGVjdCh0aW1lcGlja2VyLmdldElucHV0KCkuaXNFbmFibGVkKCkpLnRvRXF1YWwodHJ1ZSk7XG4gICAgICAgICAgICBleHBlY3QodGltZXBpY2tlci5hcmVJdGVtc0Rpc3BsYXllZCgpKS50b0VxdWFsKHRydWUpO1xuICAgICAgICB9KTtcbiAgICB9KTtcblxuICAgIGRlc2NyaWJlKFwid2hlbiB0aGUgdGltZXBpY2tlciBpcyBkaXNwbGF5ZWQsIGl0XCIsICgpPT4ge1xuICAgICAgICBpdChcImNvbnRhaW5zIGluaXRpYWwgdmFsdWVcIiwgKCk9PiB7XG4gICAgICAgICAgICBleHBlY3QodGltZXBpY2tlci5nZXRJbnB1dFZhbHVlKCkpLnRvRXF1YWwoXCIzOjMwIHBtXCIpO1xuICAgICAgICB9KTtcbiAgICB9KTtcblxuICAgIGRlc2NyaWJlKFwid2hlbiBpbnZhbGlkIHZhbHVlIGlzIGVudGVyZWQsIGl0XCIsICgpPT4ge1xuICAgICAgICBpdChcImRvZXNuJ3QgcHJvcGFnYXRlIHRoZSB2YWx1ZSB0byBtb2RlbFwiLCAoKT0+IHtcbiAgICAgICAgICAgIHRpbWVwaWNrZXIuYWNjZXB0VGV4dChcInh4eFwiKTtcbiAgICAgICAgICAgIGV4cGVjdChnZXRNb2RlbFZhbHVlKCkpLnRvRXF1YWwoXCJcIik7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGl0KFwibWFya3MgdGhlIGZpZWxkIGFzIGludmFsaWRcIiwgKCk9PiB7XG4gICAgICAgICAgICB0aW1lcGlja2VyLmFjY2VwdFRleHQoXCJ4eHhcIik7XG4gICAgICAgICAgICBleHBlY3QodGltZXBpY2tlci5pc1ZhbGlkKCkpLnRvRXF1YWwoZmFsc2UpO1xuICAgICAgICB9KTtcbiAgICB9KTtcblxuICAgIGRlc2NyaWJlKFwid2hlbiB2YWxpZCB2YWx1ZSBpcyBlbnRlcmVkIGluIHRleHQgZmllbGQsIGl0XCIsICgpPT4ge1xuICAgICAgICBpdChcIm92ZXJ3cml0ZXMgdGhlIG9yaWdpbmFsIHZhbHVlIGFzIHRoZSB3aG9sZSB0ZXh0IHdhcyBzZWxlY3RlZCBvbiBmb2N1c1wiLCAoKT0+IHtcbiAgICAgICAgICAgIHRpbWVwaWNrZXIuYWNjZXB0VGV4dChcIjEyOjAwIGFtXCIpO1xuXG4gICAgICAgICAgICBleHBlY3QodGltZXBpY2tlci5nZXRJbnB1dFZhbHVlKCkpLnRvRXF1YWwoXCIxMjowMCBhbVwiKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaXQoXCJwcm9wYWdhdGVzICcxMjowMCBBTScgdG8gbW9kZWxcIiwgKCk9PiB7XG4gICAgICAgICAgICB0aW1lcGlja2VyLmFjY2VwdFRleHQoXCIxMjowMCBBTVwiKTtcblxuICAgICAgICAgICAgZXhwZWN0KGdldE1vZGVsVmFsdWUoKSkudG9FcXVhbChcIjAwMDEtMDEtMDEgMDA6MDBcIik7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGl0KFwicHJvcGFnYXRlcyAnODowMCBQTScgdG8gbW9kZWxcIiwgKCk9PiB7XG4gICAgICAgICAgICB0aW1lcGlja2VyLmFjY2VwdFRleHQoXCI4OjAwIFBNXCIpO1xuXG4gICAgICAgICAgICBleHBlY3QoZ2V0TW9kZWxWYWx1ZSgpKS50b0VxdWFsKFwiMDAwMS0wMS0wMSAyMDowMFwiKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaXQoXCJkb2Vzbid0IG1hcmsgdGhlIGZpZWxkIGFzIGludmFsaWRcIiwgKCk9PiB7XG4gICAgICAgICAgICB0aW1lcGlja2VyLmFjY2VwdFRleHQoXCI4OjAwIFBNXCIpO1xuXG4gICAgICAgICAgICBleHBlY3QodGltZXBpY2tlci5pc1ZhbGlkKCkpLnRvRXF1YWwodHJ1ZSk7XG4gICAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgZGVzY3JpYmUoXCJ3aGVuIHZhbHVlIGlzIGNob3NlbiBmcm9tIGRyb3Bkb3duLCBpdFwiLCAoKT0+IHtcbiAgICAgICAgaXQoXCJkaXNwbGF5cyB0aGUgdmFsdWUgaW4gdGV4dCBmaWVsZFwiLCAoKT0+IHtcbiAgICAgICAgICAgIHRpbWVwaWNrZXIuc2Nyb2xsVG9BbmRTZWxlY3QoXCIxMjozMCBhbVwiKTtcblxuICAgICAgICAgICAgZXhwZWN0KHRpbWVwaWNrZXIuZ2V0SW5wdXRWYWx1ZSgpKS50b0VxdWFsKFwiMTI6MzAgYW1cIik7XG4gICAgICAgICAgICBleHBlY3QoZ2V0TW9kZWxWYWx1ZSgpKS50b0VxdWFsKFwiMDAwMS0wMS0wMSAwMDozMFwiKTtcbiAgICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBkZXNjcmliZShcIndoZW4gcGFydGlhbCB2YWx1ZSBpcyBlbnRlcmVkXCIsICgpPT4ge1xuXG4gICAgICAgIGRlc2NyaWJlKFwiLCBpdFwiLCAoKT0+IHtcbiAgICAgICAgICAgIGl0KFwicHJvcGFnYXRlcyAnOCcgdG8gbW9kZWxcIiwgKCk9PiB7XG4gICAgICAgICAgICAgICAgdGltZXBpY2tlci5hY2NlcHRUZXh0KFwiOFwiKTtcblxuICAgICAgICAgICAgICAgIGV4cGVjdChnZXRNb2RlbFZhbHVlKCkpLnRvRXF1YWwoXCIwMDAxLTAxLTAxIDA4OjAwXCIpO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIGl0KFwicHJvcGFnYXRlcyAnMjAnIHRvIG1vZGVsXCIsICgpPT4ge1xuICAgICAgICAgICAgICAgIHRpbWVwaWNrZXIuYWNjZXB0VGV4dChcIjIwXCIpO1xuXG4gICAgICAgICAgICAgICAgZXhwZWN0KGdldE1vZGVsVmFsdWUoKSkudG9FcXVhbChcIjAwMDEtMDEtMDEgMjA6MDBcIik7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgaXQoXCJwcm9wYWdhdGVzICc1IFBNJyB0byBtb2RlbFwiLCAoKT0+IHtcbiAgICAgICAgICAgICAgICB0aW1lcGlja2VyLmFjY2VwdFRleHQoXCI1IFBNXCIpO1xuXG4gICAgICAgICAgICAgICAgZXhwZWN0KGdldE1vZGVsVmFsdWUoKSkudG9FcXVhbChcIjAwMDEtMDEtMDEgMTc6MDBcIik7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgaXQoXCJkb2Vzbid0IG1hcmsgdGhlIGZpZWxkIGFzIGludmFsaWRcIiwgKCk9PiB7XG4gICAgICAgICAgICAgICAgdGltZXBpY2tlci5hY2NlcHRUZXh0KFwiOFwiKTtcblxuICAgICAgICAgICAgICAgIGV4cGVjdCh0aW1lcGlja2VyLmlzVmFsaWQoKSkudG9FcXVhbCh0cnVlKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcblxuICAgICAgICBkZXNjcmliZShcImFuZCBlbnRlciBpcyBoaXQsIGl0XCIsICgpPT4ge1xuICAgICAgICAgICAgaXQoXCJmb3JtYXRzIHRoZSB2YWx1ZSBpbiB0aGUgdGV4dCBmaWVsZFwiLCAoKT0+IHtcbiAgICAgICAgICAgICAgICB0aW1lcGlja2VyLmFjY2VwdFRleHQoXCI4XFxuXCIpO1xuXG4gICAgICAgICAgICAgICAgZXhwZWN0KHRpbWVwaWNrZXIuZ2V0SW5wdXRWYWx1ZSgpKS50b0VxdWFsKFwiODowMCBhbVwiKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcblxuICAgICAgICBkZXNjcmliZShcImFuZCBmaWVsZCBsb3NlcyBmb2N1cywgaXRcIiwgKCk9PiB7XG4gICAgICAgICAgICBpdChcImZvcm1hdHMgdGhlIHZhbHVlIGluIHRoZSB0ZXh0IGZpZWxkXCIsICgpPT4ge1xuICAgICAgICAgICAgICAgIHRpbWVwaWNrZXIuYWNjZXB0VGV4dChcIjhcIik7XG5cbiAgICAgICAgICAgICAgICAvLyBtb3ZlIGZvY3VzIGJ5IGNsaWNraW5nIG9uIGEgZGlmZmVyZW50IGVsZW1lbnRcbiAgICAgICAgICAgICAgICBlbGVtZW50KGJ5LmlkKFwibW9kZWwtdmFsdWVcIikpLmNsaWNrKCk7XG5cbiAgICAgICAgICAgICAgICBleHBlY3QodGltZXBpY2tlci5nZXRJbnB1dFZhbHVlKCkpLnRvRXF1YWwoXCI4OjAwIGFtXCIpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH0pO1xuXG59KTtcbiJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==
