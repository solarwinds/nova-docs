"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const protractor_1 = require("@solarwinds/uzi/protractor");
const uzi_1 = require("@solarwinds/uzi");
class AccordionAtom extends uzi_1.Atom {
    static findIn(atomClass, parentElement, index) {
        if (!parentElement) {
            throw "Accordion atom doesn't support global search yet";
        }
        let componentRootElement;
        if (index !== undefined) {
            componentRootElement = parentElement.all(protractor_1.by.xpath(".//uib-accordion")).get(index);
        }
        else {
            componentRootElement = parentElement.element(protractor_1.by.xpath(".//uib-accordion"));
        }
        return new atomClass(componentRootElement);
    }
    getGroup(groupName) {
        return new AccordionGroup(this.getElement().element(protractor_1.by.xpath("./div/div[@group-name='" + groupName + "']")));
    }
}
exports.AccordionAtom = AccordionAtom;
class AccordionGroup extends uzi_1.Atom {
    isExpanded() {
        return super.getElement().element(protractor_1.by.css(".xui-icon.xui-icon-triangle-down")).isPresent();
    }
    isCollapsed() {
        return super.getElement().element(protractor_1.by.css(".xui-icon.xui-icon-triangle-right")).isPresent();
    }
    toggleExpand() {
        return this.getHeaderElement().click();
    }
    getHeaderElement() {
        return super.getElement().element(protractor_1.by.css(".accordion-toggle"));
    }
}
exports.AccordionGroup = AccordionGroup;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbXBvbmVudHMvYWNjb3JkaW9uL2FjY29yZGlvbi5hdG9tLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsMkRBQXNFO0FBQ3RFLHlDQUFpRDtBQUVqRCxtQkFBMkIsU0FBUSxVQUFJO0lBQzVCLE1BQU0sQ0FBQyxNQUFNLENBQWlCLFNBQXdCLEVBQ3pELGFBQTRCLEVBQUUsS0FBYztRQUM1QyxFQUFFLENBQUMsQ0FBQyxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUM7WUFDakIsTUFBTSxrREFBa0QsQ0FBQztRQUM3RCxDQUFDO1FBQ0QsSUFBSSxvQkFBbUMsQ0FBQztRQUN4QyxFQUFFLENBQUMsQ0FBQyxLQUFLLEtBQUssU0FBUyxDQUFDLENBQUMsQ0FBQztZQUN0QixvQkFBb0IsR0FBRyxhQUFhLENBQUMsR0FBRyxDQUFDLGVBQUUsQ0FBQyxLQUFLLENBQUMsa0JBQWtCLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUN0RixDQUFDO1FBQUMsSUFBSSxDQUFDLENBQUM7WUFDSixvQkFBb0IsR0FBRyxhQUFhLENBQUMsT0FBTyxDQUFDLGVBQUUsQ0FBQyxLQUFLLENBQUMsa0JBQWtCLENBQUMsQ0FBQyxDQUFDO1FBQy9FLENBQUM7UUFDRCxNQUFNLENBQUMsSUFBSSxTQUFTLENBQUMsb0JBQW9CLENBQUMsQ0FBQztJQUMvQyxDQUFDO0lBRUQsUUFBUSxDQUFDLFNBQWlCO1FBQ3RCLE1BQU0sQ0FBQyxJQUFJLGNBQWMsQ0FBQyxJQUFJLENBQUMsVUFBVSxFQUFFLENBQUMsT0FBTyxDQUMvQyxlQUFFLENBQUMsS0FBSyxDQUFDLHlCQUF5QixHQUFHLFNBQVMsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDakUsQ0FBQztDQUNKO0FBbkJELHNDQW1CQztBQUVELG9CQUE0QixTQUFRLFVBQUk7SUFDN0IsVUFBVTtRQUNiLE1BQU0sQ0FBQyxLQUFLLENBQUMsVUFBVSxFQUFFLENBQUMsT0FBTyxDQUFDLGVBQUUsQ0FBQyxHQUFHLENBQUMsa0NBQWtDLENBQUMsQ0FBQyxDQUFDLFNBQVMsRUFBRSxDQUFDO0lBQzlGLENBQUM7SUFFTSxXQUFXO1FBQ2QsTUFBTSxDQUFDLEtBQUssQ0FBQyxVQUFVLEVBQUUsQ0FBQyxPQUFPLENBQUMsZUFBRSxDQUFDLEdBQUcsQ0FBQyxtQ0FBbUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxFQUFFLENBQUM7SUFDL0YsQ0FBQztJQUVNLFlBQVk7UUFDZixNQUFNLENBQUMsSUFBSSxDQUFDLGdCQUFnQixFQUFFLENBQUMsS0FBSyxFQUFFLENBQUM7SUFDM0MsQ0FBQztJQUVPLGdCQUFnQjtRQUNwQixNQUFNLENBQUMsS0FBSyxDQUFDLFVBQVUsRUFBRSxDQUFDLE9BQU8sQ0FBQyxlQUFFLENBQUMsR0FBRyxDQUFDLG1CQUFtQixDQUFDLENBQUMsQ0FBQztJQUNuRSxDQUFDO0NBRUo7QUFqQkQsd0NBaUJDIiwiZmlsZSI6ImNvbXBvbmVudHMvYWNjb3JkaW9uL2FjY29yZGlvbi5hdG9tLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtieSwgRWxlbWVudEZpbmRlciwgcHJvbWlzZX0gZnJvbSBcIkBzb2xhcndpbmRzL3V6aS9wcm90cmFjdG9yXCI7XG5pbXBvcnQge0F0b20sIElBdG9tQ2xhc3N9IGZyb20gXCJAc29sYXJ3aW5kcy91emlcIjtcblxuZXhwb3J0IGNsYXNzIEFjY29yZGlvbkF0b20gZXh0ZW5kcyBBdG9tIHtcbiAgICBwdWJsaWMgc3RhdGljIGZpbmRJbjxUIGV4dGVuZHMgQXRvbT4oYXRvbUNsYXNzOiBJQXRvbUNsYXNzPFQ+LFxuICAgICAgICBwYXJlbnRFbGVtZW50OiBFbGVtZW50RmluZGVyLCBpbmRleD86IG51bWJlcik6IFQge1xuICAgICAgICBpZiAoIXBhcmVudEVsZW1lbnQpIHtcbiAgICAgICAgICAgIHRocm93IFwiQWNjb3JkaW9uIGF0b20gZG9lc24ndCBzdXBwb3J0IGdsb2JhbCBzZWFyY2ggeWV0XCI7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IGNvbXBvbmVudFJvb3RFbGVtZW50OiBFbGVtZW50RmluZGVyO1xuICAgICAgICBpZiAoaW5kZXggIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgY29tcG9uZW50Um9vdEVsZW1lbnQgPSBwYXJlbnRFbGVtZW50LmFsbChieS54cGF0aChcIi4vL3VpYi1hY2NvcmRpb25cIikpLmdldChpbmRleCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb21wb25lbnRSb290RWxlbWVudCA9IHBhcmVudEVsZW1lbnQuZWxlbWVudChieS54cGF0aChcIi4vL3VpYi1hY2NvcmRpb25cIikpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBuZXcgYXRvbUNsYXNzKGNvbXBvbmVudFJvb3RFbGVtZW50KTtcbiAgICB9XG5cbiAgICBnZXRHcm91cChncm91cE5hbWU6IHN0cmluZykge1xuICAgICAgICByZXR1cm4gbmV3IEFjY29yZGlvbkdyb3VwKHRoaXMuZ2V0RWxlbWVudCgpLmVsZW1lbnQoXG4gICAgICAgICAgICBieS54cGF0aChcIi4vZGl2L2RpdltAZ3JvdXAtbmFtZT0nXCIgKyBncm91cE5hbWUgKyBcIiddXCIpKSk7XG4gICAgfVxufVxuXG5leHBvcnQgY2xhc3MgQWNjb3JkaW9uR3JvdXAgZXh0ZW5kcyBBdG9tIHtcbiAgICBwdWJsaWMgaXNFeHBhbmRlZCgpIHtcbiAgICAgICAgcmV0dXJuIHN1cGVyLmdldEVsZW1lbnQoKS5lbGVtZW50KGJ5LmNzcyhcIi54dWktaWNvbi54dWktaWNvbi10cmlhbmdsZS1kb3duXCIpKS5pc1ByZXNlbnQoKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgaXNDb2xsYXBzZWQoKSB7XG4gICAgICAgIHJldHVybiBzdXBlci5nZXRFbGVtZW50KCkuZWxlbWVudChieS5jc3MoXCIueHVpLWljb24ueHVpLWljb24tdHJpYW5nbGUtcmlnaHRcIikpLmlzUHJlc2VudCgpO1xuICAgIH1cblxuICAgIHB1YmxpYyB0b2dnbGVFeHBhbmQoKTogcHJvbWlzZS5Qcm9taXNlPHZvaWQ+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0SGVhZGVyRWxlbWVudCgpLmNsaWNrKCk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBnZXRIZWFkZXJFbGVtZW50KCkge1xuICAgICAgICByZXR1cm4gc3VwZXIuZ2V0RWxlbWVudCgpLmVsZW1lbnQoYnkuY3NzKFwiLmFjY29yZGlvbi10b2dnbGVcIikpO1xuICAgIH1cblxufVxuIl0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9
