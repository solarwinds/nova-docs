"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const protractor_1 = require("@solarwinds/uzi/protractor");
const uzi_1 = require("@solarwinds/uzi");
const index_atom_1 = require("../index.atom");
class TreeItemAtom extends uzi_1.Atom {
    invertSelection() {
        return this.getInputElement().click();
    }
    getTitleElement() {
        return this.getElement().element(protractor_1.by.xpath("./div/div[contains(@class, 'xui-treeview-label')]"));
    }
    getSubItem(index) {
        let element = this.getSubItemElements().get(index);
        return new TreeItemAtom(element);
    }
    getIcon() {
        const headElement = this.getHeadElement();
        return uzi_1.Atom.findIn(index_atom_1.IconAtom, headElement.element(protractor_1.by.className("xui-treeview-icon")));
    }
    getSubItemsCount() {
        return this.getSubItemElements().count();
    }
    getSubItems() {
        return __awaiter(this, void 0, void 0, function* () {
            const subItemElements = this.getSubItemElements();
            const subItemElementsCount = yield subItemElements.count();
            let subItems = [];
            for (let i = 0; i < subItemElementsCount; i++) {
                subItems.push(new TreeItemAtom(subItemElements.get(i)));
            }
            return subItems;
        });
    }
    isDisplayed() {
        return this.getElement().isDisplayed();
    }
    toggleExpand() {
        return this.getExpanderElements().get(0).click();
    }
    getBackgroundColor() {
        return this.getElement().getCssValue("background-color");
    }
    isSelected() {
        const headElement = this.getHeadElement();
        return headElement.getAttribute("class").then((result) => {
            return result.indexOf("xui-is-selected") > -1;
        });
    }
    isFocused() {
        const headElement = this.getHeadElement();
        return headElement.getAttribute("class").then((result) => {
            return result.indexOf("xui-is-focused") > -1;
        });
    }
    isExpanderVisible() {
        return __awaiter(this, void 0, void 0, function* () {
            const count = yield this.getExpanderElements().count();
            return count > 0;
        });
    }
    ;
    isExpanded() {
        return __awaiter(this, void 0, void 0, function* () {
            const iconAtom = uzi_1.Atom.findIn(index_atom_1.IconAtom, this.getExpanderElements().get(0));
            return iconAtom.name().then((result) => {
                return result === "triangle-down";
            });
        });
    }
    ;
    getExpanderElements() {
        return this.getElement().all(protractor_1.by.xpath("./div/div/div/span[contains(@class, 'xui-treeview-toggle')]/a"));
    }
    getHeadElement() {
        return this.getElement().element(protractor_1.by.className("xui-treeview-head"));
    }
    getInputElement() {
        return uzi_1.Atom.findIn(index_atom_1.CheckboxAtom, this.getElement());
    }
    getSubItemElements() {
        return this.getElement().all(protractor_1.by.xpath("./div/ul/li"));
    }
}
exports.TreeItemAtom = TreeItemAtom;
class TreeViewAtom extends uzi_1.Atom {
    getSubItems() {
        return __awaiter(this, void 0, void 0, function* () {
            const subItemElements = this.getSubItemElements();
            const subItemElementsCount = yield subItemElements.count();
            let subItems = [];
            for (let i = 0; i < subItemElementsCount; i++) {
                subItems.push(new TreeItemAtom(subItemElements.get(i)));
            }
            return subItems;
        });
    }
    getSubItem(index) {
        let element = this.getSubItemElements().get(index);
        return new TreeItemAtom(element);
    }
    getSubItemsCount() {
        return this.getSubItemElements().count();
    }
    getSubItemElements() {
        return this.getElement().all(protractor_1.by.xpath("./div/ul/li"));
    }
}
TreeViewAtom.CSS_CLASS = "xui-treeview";
exports.TreeViewAtom = TreeViewAtom;

//# sourceMappingURL=data:application/json;base64,
