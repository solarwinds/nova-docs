"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const protractor = require("@solarwinds/uzi/protractor");
const protractor_1 = require("@solarwinds/uzi/protractor");
const uzi_1 = require("@solarwinds/uzi");
const index_atom_1 = require("../index.atom");
class TextboxAtom extends uzi_1.Atom {
    constructor() {
        super(...arguments);
        this.isInWarningState = () => {
            return this.hasClass("has-warning");
        };
    }
    //error styles are applied to the form consistently; styles applied to
    //input boxes are not
    static isFormValidWith(validatorName) {
        let formInvalidStyle = "ng-form.ng-invalid-" + validatorName;
        return protractor_1.element.all(protractor_1.by.css(formInvalidStyle))
            .count()
            .then((count) => {
            return count === 0;
        });
    }
    getInput() {
        return super.getElement().element(protractor_1.by.className("form-control"));
    }
    getText() {
        // tslint:disable-next-line:max-line-length
        // https://github.com/angular/protractor/blob/master/docs/faq.md#the-result-of-gettext-from-an-input-element-is-always-empty
        return this.getInput().getAttribute("value");
    }
    getNumericUpButton() {
        let buttonSpan = super.getElement().element(protractor_1.by.className("xui-textbox__up-button"));
        return uzi_1.Atom.findIn(index_atom_1.ButtonAtom, buttonSpan);
    }
    getNumericDownButton() {
        let buttonSpan = super.getElement().element(protractor_1.by.className("xui-textbox__down-button"));
        return uzi_1.Atom.findIn(index_atom_1.ButtonAtom, buttonSpan);
    }
    acceptText(text) {
        return this.getInput().sendKeys(text, protractor.Key.ENTER);
    }
    clearText() {
        return this.getInput().clear();
    }
    /**
     * Gets a boolean indicating whether all validators are valid
     */
    isValid() {
        const xpath = `.//div[contains(@class, 'xui-validation')]`;
        const validationElem = this.getElement().element(protractor_1.by.xpath(xpath));
        // note: since using ng-show for changing visibility, we consider 
        //  textbox to be valid in case it is not displayed
        return validationElem.isDisplayed().then(isDisplayed => !isDisplayed);
    }
    /**
     * Gets a number of displayed validation messages
     */
    getValidationMessagesCount() {
        return __awaiter(this, void 0, void 0, function* () {
            const xpath = `.//div[contains(@class, 'xui-validation')]/*[@ng-message]`;
            const messages = this.getElement().all(protractor_1.by.xpath(xpath));
            const count = yield messages.count();
            let displayedCount = 0;
            for (let i = 0; i < count; i++) {
                if (yield messages.get(i).isDisplayed()) {
                    displayedCount++;
                }
            }
            return displayedCount;
        });
    }
    /**
     * Gets a message of ng-message element
     * @returns Text of validation message if present on page, otherwise undefined
     */
    getValidationMessage(ngMessage) {
        const xpath = `.//div[contains(@class, 'xui-validation')]/*[@ng-message='${ngMessage}']`;
        const validatorElem = this.getElement().element(protractor_1.by.xpath(xpath));
        // note: isPresent() check is here to prevent "NoSuchElementError" before getting the actual text
        return validatorElem.isPresent().then(isPresent => {
            if (!isPresent) {
                return undefined;
            }
            return validatorElem.getText();
        });
    }
}
TextboxAtom.CSS_CLASS = "xui-textbox";
exports.TextboxAtom = TextboxAtom;

//# sourceMappingURL=data:application/json;base64,
