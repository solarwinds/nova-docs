"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const protractor_1 = require("@solarwinds/uzi/protractor");
const helpers_1 = require("../helpers");
const uzi_1 = require("@solarwinds/uzi");
const index_atom_1 = require("../index.atom");
//region Test cases
describe("USERCONTROL bindHtmlCompile:", () => {
    function prepare() {
        return __awaiter(this, void 0, void 0, function* () {
            yield helpers_1.default.prepareBrowser("bindHtmlCompile");
        });
    }
    const idComplex = "testComplex";
    const idComplexData = "testComplexData";
    const idComplexScope = "testComplexScope";
    function getAtoms(atomClass, ids) {
        return ids.map(id => uzi_1.Atom.findIn(atomClass, protractor_1.element(protractor_1.by.id(id))));
    }
    describe("should expand", () => {
        beforeAll(prepare);
        it("simple html", () => __awaiter(this, void 0, void 0, function* () {
            const text = yield protractor_1.element(protractor_1.by.id("markerID")).getText();
            expect(text).toBe("simple");
        }));
        it("compilable elements", () => __awaiter(this, void 0, void 0, function* () {
            const [atom] = getAtoms(index_atom_1.ButtonAtom, [idComplex]);
            const text = yield atom.getText();
            expect(yield atom.isVisible()).toBe(true);
            expect(text.toLowerCase()).toBe("complex");
        }));
        it("compilable elements with custom data", () => __awaiter(this, void 0, void 0, function* () {
            const [atom] = getAtoms(index_atom_1.ButtonAtom, [idComplexData]);
            const text = yield atom.getText();
            expect(yield atom.isVisible()).toBe(true);
            expect(text.toLowerCase()).toBe("text from an object");
        }));
        it("compilable elements with custom scope", () => __awaiter(this, void 0, void 0, function* () {
            const [atom] = getAtoms(index_atom_1.ButtonAtom, [idComplexScope]);
            const text = yield atom.getText();
            expect(yield atom.isVisible()).toBe(true);
            expect(text.toLowerCase()).toBe("text from a scope");
        }));
    });
    describe("should react on change", () => {
        beforeEach(prepare);
        it("of html", () => __awaiter(this, void 0, void 0, function* () {
            const ids = [idComplex, idComplexData, idComplexScope];
            const [msgSimple, msgData, msgScope] = getAtoms(index_atom_1.MessageAtom, ids);
            expect(yield msgSimple.isVisible()).toBe(false, "simple message visible before change");
            expect(yield msgData.isVisible()).toBe(false, "data message visible before change");
            expect(yield msgScope.isVisible()).toBe(false, "scope message visible before change");
            yield protractor_1.browser.element(protractor_1.by.css("[id^='bnChangeTemplate']")).click();
            expect(yield msgSimple.isVisible()).toBe(true, "simple message visible after change");
            expect(yield msgData.isVisible()).toBe(true, "data message visible after change");
            expect(yield msgScope.isVisible()).toBe(true, "scope message visible after change");
        }));
        it("of scope", () => __awaiter(this, void 0, void 0, function* () {
            const ids = [idComplexData, idComplexScope];
            const [btnData, btnScope] = getAtoms(index_atom_1.ButtonAtom, ids);
            yield protractor_1.browser.element(protractor_1.by.css("[id^='bnChangeScope ']")).click();
            const textData = yield btnData.getText();
            expect(textData.toLowerCase())
                .toBe("text from another object", "data button text after change");
            const textScope = yield btnScope.getText();
            expect(textScope.toLowerCase())
                .toBe("text from another scope", "scope button text after change");
        }));
    });
});
//endregion

//# sourceMappingURL=data:application/json;base64,
