"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const protractor_1 = require("@solarwinds/uzi/protractor");
const uzi_1 = require("@solarwinds/uzi");
const index_atom_1 = require("../index.atom");
class MenuAtom extends uzi_1.Atom {
    // Clicks on menu button
    click() {
        return this.getButtonElement().click();
    }
    // Expands menu list
    expand() {
        return this.isExpanded().then((expanded) => {
            if (!expanded) {
                this.click();
            }
        });
    }
    // Closes menu list
    close() {
        return this.isExpanded().then((expanded) => {
            if (expanded) {
                this.click();
            }
        });
    }
    // Returns whether menu list is expanded
    isExpanded() {
        return this.getMenuListElement().isDisplayed();
    }
    // Returns checkbox atom for option menu item specified by its title
    getCheckboxElemForOptionItemByTitle(title) {
        return uzi_1.Atom.findIn(index_atom_1.CheckboxAtom, super.getElement()
            .all(protractor_1.by.className("xui-menu-item"))
            .filter((elem) => {
            let checkbox = uzi_1.Atom.findIn(index_atom_1.CheckboxAtom, elem);
            return checkbox.getContent().then(function (text) {
                return text === title;
            }, function () {
                // Checkbox was not found inside the item
                return false;
            });
        })
            .get(0));
    }
    // Returns anchor element for link/action menu item specified by its title
    getAnchorElemForLinkOrActionItemByTitle(title) {
        return super.getElement()
            .all(protractor_1.by.className("xui-menu-item-link"))
            .filter((elem) => {
            return elem.getText().then(function (text) {
                return text === title;
            });
        })
            .get(0)
            .getWebElement();
    }
    // Returns anchor element for link/action menu item specified by its title containing text
    getAnchorElemForLinkOrActionItemByTitleContainingText(text) {
        return super.getElement()
            .all(protractor_1.by.className("xui-menu-item-link"))
            .filter((elem) => {
            return elem.getText().then(function (innerHtml) {
                return innerHtml.indexOf(text) !== -1;
            });
        })
            .get(0)
            .getWebElement();
    }
    // Returns if menu item element specified by its title containing text is enabled or not
    isMenuItemEnabledByTitleContainingText(text) {
        return super.getElement()
            .all(protractor_1.by.className("xui-menu-item"))
            .filter((elem) => {
            return elem.getText().then(function (innerHtml) {
                return innerHtml.indexOf(text) !== -1;
            });
        })
            .get(0)
            .getWebElement()
            .getAttribute("class").then((value) => {
            return value === null || value.indexOf("disabled") === -1;
        });
    }
    // Returns menu's button element
    getButtonElement() {
        return super.getElement().element(protractor_1.by.className("xui-menu-button")).getWebElement();
    }
    // Returns menu's list element
    getMenuListElement() {
        return super.getElement().element(protractor_1.by.className("xui-menu-list")).getWebElement();
    }
    isAppendedToBody() {
        return super.getElement().element(protractor_1.by.css(".dropdown[dropdown-append-to-body]")).isPresent() &&
            protractor_1.browser.element(protractor_1.by.css("body > .xui-menu-list.dropdown-menu")).isPresent();
    }
}
MenuAtom.CSS_CLASS = "xui-menu";
exports.MenuAtom = MenuAtom;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbXBvbmVudHMvbWVudS9tZW51LmF0b20udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSwyREFBK0U7QUFFL0UseUNBQXFDO0FBQ3JDLDhDQUEyQztBQUUzQyxjQUFzQixTQUFRLFVBQUk7SUFHOUIsd0JBQXdCO0lBQ2pCLEtBQUs7UUFDUixNQUFNLENBQUMsSUFBSSxDQUFDLGdCQUFnQixFQUFFLENBQUMsS0FBSyxFQUFFLENBQUM7SUFDM0MsQ0FBQztJQUVELG9CQUFvQjtJQUNiLE1BQU07UUFDVCxNQUFNLENBQUMsSUFBSSxDQUFDLFVBQVUsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLFFBQVEsRUFBRSxFQUFFO1lBQ3ZDLEVBQUUsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQztnQkFDWixJQUFJLENBQUMsS0FBSyxFQUFFLENBQUM7WUFDakIsQ0FBQztRQUNMLENBQUMsQ0FBQyxDQUFDO0lBQ1AsQ0FBQztJQUVELG1CQUFtQjtJQUNaLEtBQUs7UUFDUixNQUFNLENBQUMsSUFBSSxDQUFDLFVBQVUsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLFFBQVEsRUFBRSxFQUFFO1lBQ3ZDLEVBQUUsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7Z0JBQ1gsSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDO1lBQ2pCLENBQUM7UUFDTCxDQUFDLENBQUMsQ0FBQztJQUNQLENBQUM7SUFFRCx3Q0FBd0M7SUFDakMsVUFBVTtRQUNiLE1BQU0sQ0FBQyxJQUFJLENBQUMsa0JBQWtCLEVBQUUsQ0FBQyxXQUFXLEVBQUUsQ0FBQztJQUNuRCxDQUFDO0lBRUQsb0VBQW9FO0lBQzdELG1DQUFtQyxDQUFDLEtBQWE7UUFDcEQsTUFBTSxDQUFDLFVBQUksQ0FBQyxNQUFNLENBQUMseUJBQVksRUFBRSxLQUFLLENBQUMsVUFBVSxFQUFFO2FBQzlDLEdBQUcsQ0FBQyxlQUFFLENBQUMsU0FBUyxDQUFDLGVBQWUsQ0FBQyxDQUFDO2FBQ2xDLE1B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LFVBQVUsRUFBRSxDQUFDLE9BQU8sQ0FBQyxlQUFFLENBQUMsU0FBUyxDQUFDLGVBQWUsQ0FBQyxDQUFDLENBQUMsYUFBYSxFQUFFLENBQUM7SUFDckYsQ0FBQztJQUVNLGdCQUFnQjtRQUNuQixNQUFNLENBQUMsS0FBSyxDQUFDLFVBQVUsRUFBRSxDQUFDLE9BQU8sQ0FBQyxlQUFFLENBQUMsR0FBRyxDQUFDLG9DQUFvQyxDQUFDLENBQUMsQ0FBQyxTQUFTLEVBQUU7WUFDdkYsb0JBQU8sQ0FBQyxPQUFPLENBQUMsZUFBRSxDQUFDLEdBQUcsQ0FBQyxxQ0FBcUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxFQUFFLENBQUM7SUFDbkYsQ0FBQzs7QUFyR2Esa0JBQVMsR0FBRyxVQUFVLENBQUM7QUFEekMsNEJBdUdDIiwiZmlsZSI6ImNvbXBvbmVudHMvbWVudS9tZW51LmF0b20uanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge2Jyb3dzZXIsIGJ5LCBFbGVtZW50RmluZGVyLCBwcm9taXNlfSBmcm9tIFwiQHNvbGFyd2luZHMvdXppL3Byb3RyYWN0b3JcIjtcbmltcG9ydCB7V2ViRWxlbWVudFByb21pc2V9IGZyb20gXCJAc29sYXJ3aW5kcy91emkvd2ViZHJpdmVyXCI7XG5pbXBvcnQge0F0b219IGZyb20gXCJAc29sYXJ3aW5kcy91emlcIjtcbmltcG9ydCB7Q2hlY2tib3hBdG9tfSBmcm9tIFwiLi4vaW5kZXguYXRvbVwiO1xuXG5leHBvcnQgY2xhc3MgTWVudUF0b20gZXh0ZW5kcyBBdG9tIHtcbiAgICBwdWJsaWMgc3RhdGljIENTU19DTEFTUyA9IFwieHVpLW1lbnVcIjtcblxuICAgIC8vIENsaWNrcyBvbiBtZW51IGJ1dHRvblxuICAgIHB1YmxpYyBjbGljaygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0QnV0dG9uRWxlbWVudCgpLmNsaWNrKCk7XG4gICAgfVxuXG4gICAgLy8gRXhwYW5kcyBtZW51IGxpc3RcbiAgICBwdWJsaWMgZXhwYW5kKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5pc0V4cGFuZGVkKCkudGhlbigoZXhwYW5kZWQpID0+IHtcbiAgICAgICAgICAgIGlmICghZXhwYW5kZWQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmNsaWNrKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIC8vIENsb3NlcyBtZW51IGxpc3RcbiAgICBwdWJsaWMgY2xvc2UoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmlzRXhwYW5kZWQoKS50aGVuKChleHBhbmRlZCkgPT4ge1xuICAgICAgICAgICAgaWYgKGV4cGFuZGVkKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5jbGljaygpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICAvLyBSZXR1cm5zIHdoZXRoZXIgbWVudSBsaXN0IGlzIGV4cGFuZGVkXG4gICAgcHVibGljIGlzRXhwYW5kZWQoKTogcHJvbWlzZS5Qcm9taXNlPGJvb2xlYW4+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0TWVudUxpc3RFbGVtZW50KCkuaXNEaXNwbGF5ZWQoKTtcbiAgICB9XG5cbiAgICAvLyBSZXR1cm5zIGNoZWNrYm94IGF0b20gZm9yIG9wdGlvbiBtZW51IGl0ZW0gc3BlY2lmaWVkIGJ5IGl0cyB0aXRsZVxuICAgIHB1YmxpYyBnZXRDaGVja2JveEVsZW1Gb3JPcHRpb25JdGVtQnlUaXRsZSh0aXRsZTogc3RyaW5nKSB7XG4gICAgICAgIHJldHVybiBBdG9tLmZpbmRJbihDaGVja2JveEF0b20sIHN1cGVyLmdldEVsZW1lbnQoKVxuICAgICAgICAgICAgLmFsbChieS5jbGFzc05hbWUoXCJ4dWktbWVudS1pdGVtXCIpKVxuICAgICAgICAgICAgLmZpbHRlcigoZWxlbTogRWxlbWVudEZpbmRlcikgPT4ge1xuICAgICAgICAgICAgICAgIGxldCBjaGVja2JveCA9IEF0b20uZmluZEluKENoZWNrYm94QXRvbSwgZWxlbSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNoZWNrYm94LmdldENvbnRlbnQoKS50aGVuKGZ1bmN0aW9uICh0ZXh0OiBzdHJpbmcpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRleHQgPT09IHRpdGxlO1xuICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gQ2hlY2tib3ggd2FzIG5vdCBmb3VuZCBpbnNpZGUgdGhlIGl0ZW1cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC5nZXQoMCkpO1xuICAgIH1cblxuICAgIC8vIFJldHVybnMgYW5jaG9yIGVsZW1lbnQgZm9yIGxpbmsvYWN0aW9uIG1lbnUgaXRlbSBzcGVjaWZpZWQgYnkgaXRzIHRpdGxlXG4gICAgcHVibGljIGdldEFuY2hvckVsZW1Gb3JMaW5rT3JBY3Rpb25JdGVtQnlUaXRsZSh0aXRsZTogc3RyaW5nKTogV2ViRWxlbWVudFByb21pc2Uge1xuICAgICAgICByZXR1cm4gc3VwZXIuZ2V0RWxlbWVudCgpXG4gICAgICAgICAgICAuYWxsKGJ5LmNsYXNzTmFtZShcInh1aS1tZW51LWl0ZW0tbGlua1wiKSlcbiAgICAgICAgICAgIC5maWx0ZXIoKGVsZW06IEVsZW1lbnRGaW5kZXIpID0+IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZWxlbS5nZXRUZXh0KCkudGhlbihmdW5jdGlvbiAodGV4dDogc3RyaW5nKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0ZXh0ID09PSB0aXRsZTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAuZ2V0KDApXG4gICAgICAgICAgICAuZ2V0V2ViRWxlbWVudCgpO1xuICAgIH1cblxuICAgIC8vIFJldHVybnMgYW5jaG9yIGVsZW1lbnQgZm9yIGxpbmsvYWN0aW9uIG1lbnUgaXRlbSBzcGVjaWZpZWQgYnkgaXRzIHRpdGxlIGNvbnRhaW5pbmcgdGV4dFxuICAgIHB1YmxpYyBnZXRBbmNob3JFbGVtRm9yTGlua09yQWN0aW9uSXRlbUJ5VGl0bGVDb250YWluaW5nVGV4dCh0ZXh0OiBzdHJpbmcpOiBXZWJFbGVtZW50UHJvbWlzZSB7XG4gICAgICAgIHJldHVybiBzdXBlci5nZXRFbGVtZW50KClcbiAgICAgICAgICAgIC5hbGwoYnkuY2xhc3NOYW1lKFwieHVpLW1lbnUtaXRlbS1saW5rXCIpKVxuICAgICAgICAgICAgLmZpbHRlcigoZWxlbTogRWxlbWVudEZpbmRlcikgPT4ge1xuICAgICAgICAgICAgICAgIHJldHVybiBlbGVtLmdldFRleHQoKS50aGVuKGZ1bmN0aW9uIChpbm5lckh0bWw6IHN0cmluZykge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gaW5uZXJIdG1sLmluZGV4T2YodGV4dCkgIT09IC0xO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC5nZXQoMClcbiAgICAgICAgICAgIC5nZXRXZWJFbGVtZW50KCk7XG4gICAgfVxuXG4gICAgLy8gUmV0dXJucyBpZiBtZW51IGl0ZW0gZWxlbWVudCBzcGVjaWZpZWQgYnkgaXRzIHRpdGxlIGNvbnRhaW5pbmcgdGV4dCBpcyBlbmFibGVkIG9yIG5vdFxuICAgIHB1YmxpYyBpc01lbnVJdGVtRW5hYmxlZEJ5VGl0bGVDb250YWluaW5nVGV4dCh0ZXh0OiBzdHJpbmcpIHtcbiAgICAgICAgcmV0dXJuIHN1cGVyLmdldEVsZW1lbnQoKVxuICAgICAgICAgICAgLmFsbChieS5jbGFzc05hbWUoXCJ4dWktbWVudS1pdGVtXCIpKVxuICAgICAgICAgICAgLmZpbHRlcigoZWxlbTogRWxlbWVudEZpbmRlcikgPT4ge1xuICAgICAgICAgICAgICAgIHJldHVybiBlbGVtLmdldFRleHQoKS50aGVuKGZ1bmN0aW9uIChpbm5lckh0bWw6IHN0cmluZykge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gaW5uZXJIdG1sLmluZGV4T2YodGV4dCkgIT09IC0xO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC5nZXQoMClcbiAgICAgICAgICAgIC5nZXRXZWJFbGVtZW50KClcbiAgICAgICAgICAgIC5nZXRBdHRyaWJ1dGUoXCJjbGFzc1wiKS50aGVuKCh2YWx1ZSkgPT4ge1xuICAgICAgICAgICAgICAgIHJldHVybiB2YWx1ZSA9PT0gbnVsbCB8fCB2YWx1ZS5pbmRleE9mKFwiZGlzYWJsZWRcIikgPT09IC0xO1xuICAgICAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgLy8gUmV0dXJucyBtZW51J3MgYnV0dG9uIGVsZW1lbnRcbiAgICBwdWJsaWMgZ2V0QnV0dG9uRWxlbWVudCgpOiBXZWJFbGVtZW50UHJvbWlzZSB7XG4gICAgICAgIHJldHVybiBzdXBlci5nZXRFbGVtZW50KCkuZWxlbWVudChieS5jbGFzc05hbWUoXCJ4dWktbWVudS1idXR0b25cIikpLmdldFdlYkVsZW1lbnQoKTtcbiAgICB9XG5cbiAgICAvLyBSZXR1cm5zIG1lbnUncyBsaXN0IGVsZW1lbnRcbiAgICBwdWJsaWMgZ2V0TWVudUxpc3RFbGVtZW50KCk6IFdlYkVsZW1lbnRQcm9taXNlIHtcbiAgICAgICAgcmV0dXJuIHN1cGVyLmdldEVsZW1lbnQoKS5lbGVtZW50KGJ5LmNsYXNzTmFtZShcInh1aS1tZW51LWxpc3RcIikpLmdldFdlYkVsZW1lbnQoKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgaXNBcHBlbmRlZFRvQm9keSgpOiBwcm9taXNlLlByb21pc2U8Ym9vbGVhbj4ge1xuICAgICAgICByZXR1cm4gc3VwZXIuZ2V0RWxlbWVudCgpLmVsZW1lbnQoYnkuY3NzKFwiLmRyb3Bkb3duW2Ryb3Bkb3duLWFwcGVuZC10by1ib2R5XVwiKSkuaXNQcmVzZW50KCkgJiZcbiAgICAgICAgICAgIGJyb3dzZXIuZWxlbWVudChieS5jc3MoXCJib2R5ID4gLnh1aS1tZW51LWxpc3QuZHJvcGRvd24tbWVudVwiKSkuaXNQcmVzZW50KCk7XG4gICAgfVxufVxuIl0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9
