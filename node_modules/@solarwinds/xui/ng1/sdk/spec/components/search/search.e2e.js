"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const protractor = require("@solarwinds/uzi/protractor");
const protractor_1 = require("@solarwinds/uzi/protractor");
const helpers_1 = require("../helpers");
const index_atom_1 = require("../index.atom");
const uzi_1 = require("@solarwinds/uzi");
describe("USERCONTROL search", () => {
    const expectedCount = 3, expectedPromiseDelay = 1000;
    let atom;
    let wasSearched;
    let inputChanged;
    let searchFinished;
    let searchCancelled;
    beforeEach(() => {
        helpers_1.default.prepareBrowser("search");
        atom = uzi_1.Atom.find(index_atom_1.SearchAtom, "searchTest");
        wasSearched = uzi_1.Atom.find(index_atom_1.CheckboxAtom, "wasSearched");
        inputChanged = uzi_1.Atom.find(index_atom_1.CheckboxAtom, "inputChanged");
        searchFinished = uzi_1.Atom.find(index_atom_1.CheckboxAtom, "searchFinished");
        searchCancelled = uzi_1.Atom.find(index_atom_1.CheckboxAtom, "searchCancelled");
    });
    it("should show no suggestions by default ", () => {
        expect(atom.areSuggestionsDisplayed()).toBe(false);
    });
    it("should show suggestions", () => {
        atom.acceptInput("item");
        expect(atom.areSuggestionsDisplayed()).toBe(true);
        expect(atom.getSuggestions().count()).toBe(expectedCount);
    });
    it("should select correct suggestion", () => {
        atom.acceptInput("item");
        let suggestion = atom.getSuggestionLink(2);
        suggestion.getText().then((text) => {
            suggestion.click();
            expect(atom.getValueAttr()).toEqual(text);
        });
    });
    it("should search when search button clicked", () => {
        expect(wasSearched.isChecked()).toBe(false);
        atom.acceptInput("item");
        atom.getSearchButton().click();
        expect(wasSearched.isChecked()).toBe(true);
        protractor_1.browser.sleep(expectedPromiseDelay);
        expect(searchFinished.isChecked()).toBe(true);
    });
    it("should cancel search when cancel clicked", () => {
        expect(wasSearched.isChecked()).toBe(false);
        atom.acceptInput("item");
        atom.getSearchButton().click();
        expect(wasSearched.isChecked()).toBe(true);
        atom.getCancelButton().click();
        protractor_1.browser.sleep(expectedPromiseDelay);
        expect(searchCancelled.isChecked()).toBe(true);
        expect(searchFinished.isChecked()).toBe(false);
    });
    it("should cancel search when input changes", () => {
        expect(wasSearched.isChecked()).toBe(false);
        atom.acceptInput("item");
        atom.getSearchButton().click();
        expect(wasSearched.isChecked()).toBe(true);
        atom.acceptInput(" 999");
        protractor_1.browser.sleep(expectedPromiseDelay);
        expect(searchCancelled.isChecked()).toBe(true);
        expect(searchFinished.isChecked()).toBe(false);
    });
    it("should search when suggestion selected", () => {
        expect(wasSearched.isChecked()).toBe(false);
        atom.acceptInput("item");
        let suggestion = atom.getSuggestionLink(2);
        suggestion.click();
        expect(wasSearched.isChecked()).toBe(true);
        protractor_1.browser.sleep(expectedPromiseDelay);
        expect(searchFinished.isChecked()).toBe(true);
    });
    it("should evaluate onChange when input changes", () => {
        expect(inputChanged.isChecked()).toBe(false);
        atom.acceptInput("item");
        expect(inputChanged.isChecked()).toBe(true);
    });
    it("should evaluate onChange when clear clicked", () => {
        expect(inputChanged.isChecked()).toBe(false);
        atom.acceptInput("clear test");
        expect(inputChanged.isChecked()).toBe(true);
        inputChanged.click();
        expect(inputChanged.isChecked()).toBe(false);
        atom.getCancelButton().click();
        expect(inputChanged.isChecked()).toBe(true);
    });
    it("should search when enter key press", () => {
        expect(wasSearched.isChecked()).toBe(false);
        atom.acceptInput("item" + protractor.Key.ENTER);
        expect(wasSearched.isChecked()).toBe(true);
        protractor_1.browser.sleep(expectedPromiseDelay);
        expect(searchFinished.isChecked()).toBe(true);
    });
});

//# sourceMappingURL=data:application/json;base64,
