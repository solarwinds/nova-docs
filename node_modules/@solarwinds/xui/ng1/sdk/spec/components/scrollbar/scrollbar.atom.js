"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const protractor_1 = require("@solarwinds/uzi/protractor");
const uzi_1 = require("@solarwinds/uzi");
class ScrollbarAtom extends uzi_1.Atom {
    constructor() {
        super(...arguments);
        this.hasScrollbar = (element) => {
            return element.getAttribute("clientHeight").then((clientHeight) => {
                return element.getAttribute("scrollHeight").then((scrollHeight) => {
                    return parseInt(scrollHeight, 10) > parseInt(clientHeight, 10);
                });
            });
        };
        this.scroll = (scrollbar, delta) => {
            return scrollbar.getLocation().then((location) => {
                return protractor_1.browser.actions()
                    .dragAndDrop(scrollbar.getWebElement(), { x: location.x + delta.x, y: location.y + delta.y })
                    .perform();
            });
        };
        this.scrollToElement = (target) => {
            return protractor_1.browser.executeScript("arguments[0].scrollIntoView();", target.getWebElement());
        };
        this.getScrollbarElement = (selector) => {
            return super.getElement().element(protractor_1.by.css(selector));
        };
        this.isTransparent = (color) => {
            return color === "rgba(0, 0, 0, 0)";
        };
    }
    static findIn(atomClass, parentElement, index) {
        if (!parentElement) {
            parentElement = protractor_1.browser.element(protractor_1.by.xpath("/"));
        }
        let componentRootElement;
        if (index !== undefined) {
            componentRootElement = parentElement.all(protractor_1.by.css("[xui-scrollbar]")).get(index);
        }
        else {
            componentRootElement = parentElement.element(protractor_1.by.css("[xui-scrollbar]"));
        }
        return new atomClass(componentRootElement);
    }
}
exports.ScrollbarAtom = ScrollbarAtom;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbXBvbmVudHMvc2Nyb2xsYmFyL3Njcm9sbGJhci5hdG9tLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsMkRBQStFO0FBRS9FLHlDQUFpRDtBQUVqRCxtQkFBMkIsU0FBUSxVQUFJO0lBQXZDOztRQWVXLGlCQUFZLEdBQUcsQ0FBQyxPQUF1QixFQUE0QixFQUFFO1lBQ3hFLE1BQU0sQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDLGNBQWMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLFlBQW9CLEVBQUUsRUFBRTtnQkFDdEUsTUFBTSxDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQUMsY0FBYyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsWUFBb0IsRUFBRSxFQUFFO29CQUN0RSxNQUFNLENBQUMsUUFBUSxDQUFDLFlBQVksRUFBRSxFQUFFLENBQUMsR0FBRyxRQUFRLENBQUMsWUFBWSxFQUFFLEVBQUUsQ0FBQyxDQUFDO2dCQUNuRSxDQUFDLENBQUMsQ0FBQztZQUNQLENBQUMsQ0FBQyxDQUFDO1FBQ1AsQ0FBQyxDQUFDO1FBRUssV0FBTSxHQUFHLENBQUMsU0FBd0IsRUFBRSxLQUFnQixFQUF5QixFQUFFO1lBQ2xGLE1BQU0sQ0FBQyxTQUFTLENBQUMsV0FBVyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsUUFBbUIsRUFBRSxFQUFFO2dCQUN4RCxNQUFNLENBQUMsb0JBQU8sQ0FBQyxPQUFPLEVBQUU7cUJBQ25CLFdBQVcsQ0FBQyxTQUFTLENBQUMsYUFBYSxFQUFFLEVBQUUsRUFBQyxDQUFDLEVBQUUsUUFBUSxDQUFDLENBQUMsR0FBRyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxRQUFRLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQyxDQUFDLEVBQUMsQ0FBQztxQkFDMUYsT0FBTyxFQUFFLENBQUM7WUFDbkIsQ0FBQyxDQUFDLENBQUM7UUFDUCxDQUFDLENBQUM7UUFFSyxvQkFBZSxHQUFHLENBQUMsTUFBcUIsRUFBd0IsRUFBRTtZQUNyRSxNQUFNLENBQUMsb0JBQU8sQ0FBQyxhQUFhLENBQUMsZ0NBQWdDLEVBQUUsTUFBTSxDQUFDLGFBQWEsRUFBRSxDQUFDLENBQUM7UUFDM0YsQ0FBQyxDQUFDO1FBRU0sd0JBQW1CLEdBQUcsQ0FBQyxRQUFnQixFQUFpQixFQUFFO1lBQzlELE1BQU0sQ0FBQyxLQUFLLENBQUMsVUFBVSxFQUFFLENBQUMsT0FBTyxDQUFDLGVBQUUsQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQztRQUN4RCxDQUFDLENBQUM7UUFFTSxrQkFBYSxHQUFHLENBQUMsS0FBYSxFQUFXLEVBQUU7WUFDL0MsTUFBTSxDQUFDLEtBQUssS0FBSyxrQkFBa0IsQ0FBQztRQUN4QyxDQUFDLENBQUM7SUFDTixDQUFDO0lBekNVLE1BQU0sQ0FBQyxNQUFNLENBQWlCLFNBQXdCLEVBQ3hCLGFBQTRCLEVBQUUsS0FBYztRQUM3RSxFQUFFLENBQUMsQ0FBQyxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUM7WUFDakIsYUFBYSxHQUFHLG9CQUFPLENBQUMsT0FBTyxDQUFDLGVBQUUsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztRQUNuRCxDQUFDO1FBQ0QsSUFBSSxvQkFBbUMsQ0FBQztRQUN4QyxFQUFFLENBQUMsQ0FBQyxLQUFLLEtBQUssU0FBUyxDQUFDLENBQUMsQ0FBQztZQUN0QixvQkFBb0IsR0FBRyxhQUFhLENBQUMsR0FBRyxDQUFDLGVBQUUsQ0FBQyxHQUFHLENBQUMsaUJBQWlCLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUNuRixDQUFDO1FBQUMsSUFBSSxDQUFDLENBQUM7WUFDSixvQkFBb0IsR0FBRyxhQUFhLENBQUMsT0FBTyxDQUFDLGVBQUUsQ0FBQyxHQUFHLENBQUMsaUJBQWlCLENBQUMsQ0FBQyxDQUFDO1FBQzVFLENBQUM7UUFDRCxNQUFNLENBQUMsSUFBSSxTQUFTLENBQUMsb0JBQW9CLENBQUMsQ0FBQztJQUMvQyxDQUFDO0NBNkJKO0FBMUNELHNDQTBDQyIsImZpbGUiOiJjb21wb25lbnRzL3Njcm9sbGJhci9zY3JvbGxiYXIuYXRvbS5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7YnJvd3NlciwgYnksIEVsZW1lbnRGaW5kZXIsIHByb21pc2V9IGZyb20gXCJAc29sYXJ3aW5kcy91emkvcHJvdHJhY3RvclwiO1xuaW1wb3J0IHtJTG9jYXRpb259IGZyb20gXCJAc29sYXJ3aW5kcy91emkvd2ViZHJpdmVyXCI7XG5pbXBvcnQge0F0b20sIElBdG9tQ2xhc3N9IGZyb20gXCJAc29sYXJ3aW5kcy91emlcIjtcblxuZXhwb3J0IGNsYXNzIFNjcm9sbGJhckF0b20gZXh0ZW5kcyBBdG9tIHtcbiAgICBwdWJsaWMgc3RhdGljIGZpbmRJbjxUIGV4dGVuZHMgQXRvbT4oYXRvbUNsYXNzOiBJQXRvbUNsYXNzPFQ+LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXJlbnRFbGVtZW50OiBFbGVtZW50RmluZGVyLCBpbmRleD86IG51bWJlcik6IFQge1xuICAgICAgICBpZiAoIXBhcmVudEVsZW1lbnQpIHtcbiAgICAgICAgICAgIHBhcmVudEVsZW1lbnQgPSBicm93c2VyLmVsZW1lbnQoYnkueHBhdGgoXCIvXCIpKTtcbiAgICAgICAgfVxuICAgICAgICBsZXQgY29tcG9uZW50Um9vdEVsZW1lbnQ6IEVsZW1lbnRGaW5kZXI7XG4gICAgICAgIGlmIChpbmRleCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBjb21wb25lbnRSb290RWxlbWVudCA9IHBhcmVudEVsZW1lbnQuYWxsKGJ5LmNzcyhcIlt4dWktc2Nyb2xsYmFyXVwiKSkuZ2V0KGluZGV4KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbXBvbmVudFJvb3RFbGVtZW50ID0gcGFyZW50RWxlbWVudC5lbGVtZW50KGJ5LmNzcyhcIlt4dWktc2Nyb2xsYmFyXVwiKSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5ldyBhdG9tQ2xhc3MoY29tcG9uZW50Um9vdEVsZW1lbnQpO1xuICAgIH1cblxuICAgIHB1YmxpYyBoYXNTY3JvbGxiYXIgPSAoZWxlbWVudD86IEVsZW1lbnRGaW5kZXIpOiBwcm9taXNlLlByb21pc2U8Ym9vbGVhbj4gPT4ge1xuICAgICAgICByZXR1cm4gZWxlbWVudC5nZXRBdHRyaWJ1dGUoXCJjbGllbnRIZWlnaHRcIikudGhlbigoY2xpZW50SGVpZ2h0OiBzdHJpbmcpID0+IHtcbiAgICAgICAgICAgIHJldHVybiBlbGVtZW50LmdldEF0dHJpYnV0ZShcInNjcm9sbEhlaWdodFwiKS50aGVuKChzY3JvbGxIZWlnaHQ6IHN0cmluZykgPT4ge1xuICAgICAgICAgICAgICAgIHJldHVybiBwYXJzZUludChzY3JvbGxIZWlnaHQsIDEwKSA+IHBhcnNlSW50KGNsaWVudEhlaWdodCwgMTApO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH07XG5cbiAgICBwdWJsaWMgc2Nyb2xsID0gKHNjcm9sbGJhcjogRWxlbWVudEZpbmRlciwgZGVsdGE6IElMb2NhdGlvbik6IHByb21pc2UuUHJvbWlzZTx2b2lkPiA9PiB7XG4gICAgICAgIHJldHVybiBzY3JvbGxiYXIuZ2V0TG9jYXRpb24oKS50aGVuKChsb2NhdGlvbjogSUxvY2F0aW9uKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gYnJvd3Nlci5hY3Rpb25zKClcbiAgICAgICAgICAgICAgICAuZHJhZ0FuZERyb3Aoc2Nyb2xsYmFyLmdldFdlYkVsZW1lbnQoKSwge3g6IGxvY2F0aW9uLnggKyBkZWx0YS54LCB5OiBsb2NhdGlvbi55ICsgZGVsdGEueX0pXG4gICAgICAgICAgICAgICAgLnBlcmZvcm0oKTtcbiAgICAgICAgfSk7XG4gICAgfTtcblxuICAgIHB1YmxpYyBzY3JvbGxUb0VsZW1lbnQgPSAodGFyZ2V0OiBFbGVtZW50RmluZGVyKTogcHJvbWlzZS5Qcm9taXNlPGFueT4gPT4ge1xuICAgICAgICByZXR1cm4gYnJvd3Nlci5leGVjdXRlU2NyaXB0KFwiYXJndW1lbnRzWzBdLnNjcm9sbEludG9WaWV3KCk7XCIsIHRhcmdldC5nZXRXZWJFbGVtZW50KCkpO1xuICAgIH07XG5cbiAgICBwcml2YXRlIGdldFNjcm9sbGJhckVsZW1lbnQgPSAoc2VsZWN0b3I6IHN0cmluZyk6IEVsZW1lbnRGaW5kZXIgPT4ge1xuICAgICAgICByZXR1cm4gc3VwZXIuZ2V0RWxlbWVudCgpLmVsZW1lbnQoYnkuY3NzKHNlbGVjdG9yKSk7XG4gICAgfTtcblxuICAgIHByaXZhdGUgaXNUcmFuc3BhcmVudCA9IChjb2xvcjogc3RyaW5nKTogYm9vbGVhbiA9PiB7XG4gICAgICAgIHJldHVybiBjb2xvciA9PT0gXCJyZ2JhKDAsIDAsIDAsIDApXCI7XG4gICAgfTtcbn1cbiJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==
