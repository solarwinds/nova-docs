import { ElementArrayFinder, ElementFinder, promise } from "@solarwinds/uzi/protractor";
import { Atom } from "@solarwinds/uzi";
export interface IRangeResult {
    start: number;
    end: number;
}
export interface ISliderAtomOptions {
    finishDrag?: boolean;
    useTouch?: boolean;
}
export declare class SliderAtom extends Atom {
    static CSS_CLASS: string;
    private adjustedClientWidth;
    constructor(element: ElementFinder);
    dragRangeLineTo(value: number, finish?: boolean): promise.Promise<void>;
    setSingleSliderValueByLineclick(value: number, min: number, max: number): promise.Promise<void>;
    setRangeStartValueByClicking(value: number, min: number, max: number): promise.Promise<void>;
    setRangeEndValueByClicking(value: number, min: number, max: number): promise.Promise<void>;
    getValue(expectedValue?: number): promise.Promise<number>;
    getValueFromPosition(min: number, max: number): promise.Promise<number>;
    dragSingleSliderToValue(value: number, min: number, max: number, options?: ISliderAtomOptions): promise.Promise<void>;
    dragSingleSliderTo(value: number, options?: ISliderAtomOptions): promise.Promise<void>;
    dragRangeStartTo(value: number, options?: ISliderAtomOptions): promise.Promise<void>;
    dragRangeEndTo(value: number, options?: ISliderAtomOptions): promise.Promise<void>;
    dragRangeStartToValue(value: number, min: number, max: number, options?: ISliderAtomOptions): promise.Promise<void>;
    dragRangeEndToValue(value: number, min: number, max: number, options?: ISliderAtomOptions): promise.Promise<void>;
    cancelDragging(): promise.Promise<void>;
    getRange(): promise.Promise<IRangeResult>;
    getInputValue(): promise.Promise<number>;
    setInputValue(value: any, expectedValue?: any): void;
    getSteps(): ElementArrayFinder;
    getStartsideSteps(): ElementArrayFinder;
    getEndsideSteps(): ElementArrayFinder;
    private defaultOptions;
    private getValueHandle();
    private getRangeStartHandle();
    private getRangeEndHandle();
    private getRangeLine();
    private clickSliderLineAtValue(value, min, max, isRange?, isRangeEnd?, options?);
    private dragHandleTo(handle, value, options?);
    private makeForTouch(location);
    private moveMouseIteratively(sequence, value);
}
