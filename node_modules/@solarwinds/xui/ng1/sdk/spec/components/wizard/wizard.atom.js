"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const protractor_1 = require("@solarwinds/uzi/protractor");
const uzi_1 = require("@solarwinds/uzi");
const index_atom_1 = require("../index.atom");
class WizardAtom extends uzi_1.Atom {
    constructor(element, dialog) {
        super(element);
        this.cancel = () => {
            return this.cancelButton.click();
        };
        this.next = () => {
            return this.nextButton.click();
        };
        this.back = () => {
            return this.backButton.click();
        };
        this.finish = () => {
            return this.finishButton.click();
        };
        this.goToStep = (index) => {
            const headerStep = super.getElement().all(protractor_1.by.className("xui-wizard__header-step")).get(index);
            headerStep.click();
        };
        this.getHeaderSteps = () => {
            const stepsEl = super.getElement().element(protractor_1.by.className("xui-wizard__header-steps"));
            return stepsEl.all(protractor_1.by.className("xui-wizard__header-step")).map((el) => {
                return el.all(protractor_1.by.className("xui-wizard__header-step-title")).first().getText();
            });
        };
        this.getSteps = () => {
            const stepsEl = super.getElement().element(protractor_1.by.className("xui-wizard__steps"));
            //this should really be a map operation.  However, map has a bug- if you put an element finder
            //in it, it will try to resolve EVERYTHING, and causes node to go into an infinite loop
            return stepsEl.all(protractor_1.by.className("xui-wizard__step"))
                .reduce((accumulator, el) => {
                accumulator.push(new index_atom_1.WizardStepAtom(el));
                return accumulator;
            }, []);
        };
        this.getCurrentStepTitle = () => {
            const el = super.getElement().element(protractor_1.by.className("xui-wizard__title"));
            return el.getText();
        };
        if (dialog) {
            this.dialog = dialog;
            const buttons = dialog.getFooterButtons();
            this.backButton = new index_atom_1.ButtonAtom(buttons.filter((el) => {
                return new protractor_1.promise.Promise((resolve) => {
                    uzi_1.Atom.hasClass(el, "xui-wizard__back-button").then((value) => {
                        resolve(value);
                    });
                });
            }).first());
            this.nextButton = new index_atom_1.ButtonAtom(buttons.filter((el) => {
                return new protractor_1.promise.Promise((resolve) => {
                    uzi_1.Atom.hasClass(el, "xui-wizard__next-button").then((value) => {
                        resolve(value);
                    });
                });
            }).first());
            this.finishButton = new index_atom_1.ButtonAtom(buttons.filter((el) => {
                return new protractor_1.promise.Promise((resolve) => {
                    uzi_1.Atom.hasClass(el, "xui-wizard__finish-button").then((value) => {
                        resolve(value);
                    });
                });
            }).first());
            this.cancelButton = new index_atom_1.ButtonAtom(buttons.filter((el) => {
                return new protractor_1.promise.Promise((resolve) => {
                    uzi_1.Atom.hasClass(el, "xui-wizard__cancel-button").then((value) => {
                        resolve(value);
                    });
                });
            }).first());
            this.additionalButtons = buttons.filter((el) => {
                return new protractor_1.promise.Promise((resolve) => {
                    const builtInButtons = ["xui-wizard__back-button",
                        "xui-wizard__next-button",
                        "xui-wizard__finish-button",
                        "xui-wizard__cancel-button"];
                    uzi_1.Atom.hasAnyClass(el, builtInButtons).then((result) => {
                        resolve(!result);
                    });
                });
            })
                .reduce((accumulator, el) => {
                accumulator.push(new index_atom_1.ButtonAtom(el));
                return accumulator;
            }, []);
        }
        else {
            this.backButton = new index_atom_1.ButtonAtom(super.getElement().element(protractor_1.by.className("xui-wizard__back-button")));
            this.nextButton = new index_atom_1.ButtonAtom(super.getElement().element(protractor_1.by.className("xui-wizard__next-button")));
            this.finishButton = new index_atom_1.ButtonAtom(super.getElement().element(protractor_1.by.className("xui-wizard__finish-button")));
            this.cancelButton = new index_atom_1.ButtonAtom(super.getElement().element(protractor_1.by.className("xui-wizard__cancel-button")));
            this.additionalButtons = super.getElement().all(protractor_1.by.className("xui-wizard__additional-button"))
                .reduce((accumulator, el) => {
                accumulator.push(new index_atom_1.ButtonAtom(el));
                return accumulator;
            }, []);
        }
    }
    static fromDialog() {
        const dialog = index_atom_1.DialogAtom.get();
        return new WizardAtom(dialog.getBody(), dialog);
    }
}
WizardAtom.CSS_CLASS = "xui-wizard";
exports.WizardAtom = WizardAtom;

//# sourceMappingURL=data:application/json;base64,
