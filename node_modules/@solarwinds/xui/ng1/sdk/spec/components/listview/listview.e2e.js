"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const protractor_1 = require("@solarwinds/uzi/protractor");
const index_atom_1 = require("../index.atom");
const helpers_1 = require("../helpers");
const uzi_1 = require("@solarwinds/uzi");
describe("USERCONTROL listview", () => {
    let stripedListView;
    let nonStripedListView;
    beforeEach(() => {
        helpers_1.default.prepareBrowser("listview");
        stripedListView = uzi_1.Atom.find(index_atom_1.ListViewAtom, "testListViewStriped");
        nonStripedListView = uzi_1.Atom.find(index_atom_1.ListViewAtom, "testListViewNoStripes");
    });
    it("should contain 10 items", () => {
        expect(stripedListView.itemCount()).toEqual(10);
    });
    it("should display given item in proper place", () => {
        expect(stripedListView.getItem(0).getText()).toEqual("horse");
        expect(stripedListView.getItem(1).getText()).toEqual("elk");
        expect(stripedListView.getItem(2).getText()).toEqual("bobcat");
        expect(stripedListView.getItem(9).getText()).toEqual("snake");
    });
    it("should apply the specified padding", () => {
        const multiSelectLV = uzi_1.Atom.find(index_atom_1.ListViewAtom, "multiSelect");
        expect(multiSelectLV.isNarrow()).toEqual(true);
        expect(multiSelectLV.isRegular()).toEqual(false);
        const singleSelectLV = uzi_1.Atom.find(index_atom_1.ListViewAtom, "singleSelect");
        expect(singleSelectLV.isNarrow()).toEqual(false);
        expect(singleSelectLV.isRegular()).toEqual(true);
    });
    it("should apply 'regular' padding by default", () => {
        expect(stripedListView.isNarrow()).toEqual(false);
        expect(stripedListView.isRegular()).toEqual(true);
        expect(nonStripedListView.isNarrow()).toEqual(false);
        expect(nonStripedListView.isRegular()).toEqual(true);
    });
    it("should honor 'striped' attribute", () => {
        expect(stripedListView.isStriped()).toEqual(true);
        expect(nonStripedListView.isStriped()).toEqual(false);
    });
    it("have the correct header", () => {
        expect(stripedListView.getHeaderText("h3")).toBe("STRIPED LISTVIEW, ITEM TEMPLATE");
        expect(nonStripedListView.getHeaderText("h3")).toBe("PLAIN LISTVIEW, COLOR-BOX TEMPLATE");
    });
    it("applies the correct template", () => {
        const horseItem = stripedListView.getItem(0);
        expect(horseItem.getText()).toEqual("horse");
        const blueColorBoxItem = nonStripedListView.getItem(0);
        expect(blueColorBoxItem.element(protractor_1.by.css(".color-box.blue"))).toBeDefined();
        expect(blueColorBoxItem.getText()).toEqual("blue");
    });
    it("allows checkbox/multi selection of items", () => {
        expect(protractor_1.element(protractor_1.by.id("multiSelectValues")).getText()).toBe("");
        const multiSelectListView = uzi_1.Atom.find(index_atom_1.ListViewAtom, "multiSelect");
        multiSelectListView.selectCheckbox(0);
        multiSelectListView.selectCheckbox(1);
        multiSelectListView.selectCheckbox(2);
        expect(protractor_1.element(protractor_1.by.id("multiSelectValues")).getText()).toBe("blue,green,yellow");
        multiSelectListView.selectCheckbox(0);
        multiSelectListView.selectCheckbox(1);
        multiSelectListView.selectCheckbox(2);
        expect(protractor_1.element(protractor_1.by.id("multiSelectValues")).getText()).toBe("");
    });
    it("allows checkbox/multi inverted selection of items", () => {
        expect(protractor_1.element(protractor_1.by.id("multiSelectValues")).getText()).toBe("");
        const multiSelectListView = uzi_1.Atom.find(index_atom_1.ListViewAtom, "multiSelectInvert");
        multiSelectListView.selectCheckbox(0);
        multiSelectListView.selectCheckbox(1);
        multiSelectListView.selectCheckbox(2);
        expect(protractor_1.element(protractor_1.by.id("multiSelectValues")).getText()).toBe("blue,green,yellow");
        multiSelectListView.selectCheckbox(0);
        multiSelectListView.selectCheckbox(1);
        multiSelectListView.selectCheckbox(2);
        expect(protractor_1.element(protractor_1.by.id("multiSelectValues")).getText()).toBe("");
    });
    it("does not allow change selection for disabled items", () => {
        const multiSelectListView = uzi_1.Atom.find(index_atom_1.ListViewAtom, "multiSelectDisabledItems");
        expect(multiSelectListView.getCheckbox(0).isDisabled()).toBe(true);
        expect(multiSelectListView.getCheckbox(1).isDisabled()).toBe(true);
    });
    it("allows single selection of items for single mode", () => {
        expect(protractor_1.element(protractor_1.by.id("singleSelectValue")).getText()).toBe("medium");
        const singleSelectListView = uzi_1.Atom.find(index_atom_1.ListViewAtom, "singleSelect");
        singleSelectListView.selectRow(0);
        expect(protractor_1.element(protractor_1.by.id("singleSelectValue")).getText()).toBe(JSON.stringify(["small"]));
        singleSelectListView.selectRow(3);
        expect(protractor_1.element(protractor_1.by.id("singleSelectValue")).getText()).toBe(JSON.stringify(["xlarge"]));
    });
    it("allows single selection of items for radio mode", () => {
        expect(protractor_1.element(protractor_1.by.id("radioSelectValue")).getText()).toBe("medium");
        const singleSelectListView = uzi_1.Atom.find(index_atom_1.ListViewAtom, "singleSelect");
        singleSelectListView.selectRow(0);
        expect(protractor_1.element(protractor_1.by.id("radioSelectValue")).getText()).toBe(JSON.stringify(["small"]));
        singleSelectListView.selectRow(3);
        expect(protractor_1.element(protractor_1.by.id("radioSelectValue")).getText()).toBe(JSON.stringify(["xlarge"]));
    });
});

//# sourceMappingURL=data:application/json;base64,
