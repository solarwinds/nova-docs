"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const protractor_1 = require("@solarwinds/uzi/protractor");
const uzi_1 = require("@solarwinds/uzi");
const index_atom_1 = require("../index.atom");
class ListViewAtom extends uzi_1.Atom {
    constructor() {
        super(...arguments);
        this.getItems = () => {
            return super.getElement().all(protractor_1.by.css("li.list-group-item"));
        };
        this.itemCount = () => {
            return this.getItems().count();
        };
        this.getItem = (idx) => {
            return this.getItems().get(idx);
        };
        this.isItemSelected = (idx) => {
            return this.getItem(idx).getAttribute("class")
                .then((classValue) => {
                return classValue && classValue.indexOf("xui-listitem--selected") >= 0;
            });
        };
        this.selectCheckbox = (idx) => {
            return this.getItem(idx)
                .element(protractor_1.by.className("xui-listview-checkbox"))
                .click();
        };
        this.getCheckbox = (idx) => {
            const checkboxElement = this.getItem(idx).element(protractor_1.by.className("xui-listview-checkbox"));
            return new index_atom_1.CheckboxAtom(checkboxElement);
        };
        this.selectRow = (idx) => {
            return this.getItem(idx)
                .element(protractor_1.by.css(".xui-listitem__content"))
                .click();
        };
        this.isNarrow = () => {
            return uzi_1.Atom.hasClass(this.getItem(0), "xui-listitem--narrow");
        };
        this.isRegular = () => {
            return uzi_1.Atom.hasClass(this.getItem(0), "xui-listitem--regular");
        };
        this.isStriped = () => {
            const items = this.getItems();
            return items.first().getCssValue("background-color").then((lineOneColor) => {
                return items.get(1).getCssValue("background-color").then((lineTwoColor) => {
                    return lineOneColor !== lineTwoColor;
                });
            });
        };
        this.isEmptyTextPresented = () => {
            return super.getElement().element(protractor_1.by.css(".xui-listview__empty .xui-listview__empty--main-message"))
                .isPresent();
        };
        this.getEmptyText = () => {
            return super.getElement().element(protractor_1.by.css(".xui-listview__empty .xui-listview__empty--main-message")).getText();
        };
        this.getHeaderText = (innerCss) => {
            return super.getElement()
                .element(protractor_1.by.css(".xui-listview-header"))
                .element(protractor_1.by.css(innerCss))
                .getText();
        };
        this.getEmptyTemplateText = (innerCss) => {
            return super.getElement()
                .element(protractor_1.by.tagName("ng-include"))
                .element(protractor_1.by.className(innerCss))
                .getText();
        };
        this.getEmptyTemplateColor = (innerCss) => {
            return super.getElement()
                .element(protractor_1.by.tagName("ng-include"))
                .element(protractor_1.by.className(innerCss))
                .getCssValue("color");
        };
    }
}
ListViewAtom.CSS_CLASS = "xui-listview";
exports.ListViewAtom = ListViewAtom;

//# sourceMappingURL=data:application/json;base64,
