"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const protractor_1 = require("@solarwinds/uzi/protractor");
const uzi_1 = require("@solarwinds/uzi");
const specHelpers_1 = require("../specHelpers");
class ActionDrawerAtom extends uzi_1.Atom {
    constructor() {
        super(...arguments);
        this.moveMouseToTarget = (atom) => {
            return specHelpers_1.default.mouseOver(atom);
        };
    }
    isTooltipDisplayed() {
        return this.getTooltip().isPresent();
    }
    getTooltipAttribute(attribute) {
        return this.getTooltip().getAttribute(attribute);
    }
    getMenuIconAttribute(iconType, attribute) {
        return super.getElement()
            .element(protractor_1.by.css(`.${ActionDrawerAtom.CSS_CLASS} [icon=${iconType}]`))
            .getAttribute(attribute);
    }
    clickMenuIcon(iconType) {
        return super.getElement()
            .element(protractor_1.by.css(`.${ActionDrawerAtom.CSS_CLASS} [icon=${iconType}]`))
            .click();
    }
    moveMouseToMenuIcon(iconType) {
        return protractor_1.browser.actions().mouseMove(super.getElement()
            .element(protractor_1.by.css(`.${ActionDrawerAtom.CSS_CLASS} i[icon=${iconType}]`)))
            .perform();
    }
    getMenuDirection() {
        return super.getElement()
            .element(protractor_1.by.className("xui-action-drawer__actions")).getCssValue("transform");
    }
    getToastContainer() {
        return protractor_1.browser.element(protractor_1.by.id("toast-container")).isPresent();
    }
    getTooltip() {
        return protractor_1.browser.element(protractor_1.by.className("action-drawer-tooltip"));
    }
}
ActionDrawerAtom.CSS_CLASS = "xui-action-drawer";
exports.ActionDrawerAtom = ActionDrawerAtom;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbXBvbmVudHMvYWN0aW9uRHJhd2VyL2FjdGlvbkRyYXdlci5hdG9tLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsMkRBQWlGO0FBQ2pGLHlDQUF1QztBQUN2QyxnREFBeUM7QUFFekMsc0JBQThCLFNBQVEsVUFBSTtJQUExQzs7UUFHVyxzQkFBaUIsR0FBRyxDQUFDLElBQVUsRUFBeUIsRUFBRTtZQUM3RCxNQUFNLENBQUMscUJBQVcsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDdkMsQ0FBQyxDQUFDO0lBd0NOLENBQUM7SUF0Q1Usa0JBQWtCO1FBQ3JCLE1BQU0sQ0FBQyxJQUFJLENBQUMsVUFBVSxFQUFFLENBQUMsU0FBUyxFQUFFLENBQUM7SUFDekMsQ0FBQztJQUVNLG1CQUFtQixDQUFDLFNBQWlCO1FBQ3hDLE1BQU0sQ0FBQyxJQUFJLENBQUMsVUFBVSxFQUFFLENBQUMsWUFBWSxDQUFDLFNBQVMsQ0FBQyxDQUFDO0lBQ3JELENBQUM7SUFFTSxvQkFBb0IsQ0FBQyxRQUFnQixFQUFFLFNBQWlCO1FBQzNELE1BQU0sQ0FBQyxLQUFLLENBQUMsVUFBVSxFQUFFO2FBQ3BCLE9BQU8sQ0FBQyxlQUFFLENBQUMsR0FBRyxDQUFDLElBQUksZ0JBQWdCLENBQUMsU0FBUyxVQUFVLFFBQVEsR0FBRyxDQUFDLENBQUM7YUFDcEUsWUFBWSxDQUFDLFNBQVMsQ0FBQyxDQUFDO0lBQ2pDLENBQUM7SUFFTSxhQUFhLENBQUMsUUFBZ0I7UUFDakMsTUFBTSxDQUFDLEtBQUssQ0FBQyxVQUFVLEVBQUU7YUFDcEIsT0FBTyxDQUFDLGVBQUUsQ0FBQyxHQUFHLENBQUMsSUFBSSxnQkFBZ0IsQ0FBQyxTQUFTLFVBQVUsUUFBUSxHQUFHLENBQUMsQ0FBQzthQUNwRSxLQUFLLEVBQUUsQ0FBQztJQUNqQixDQUFDO0lBRU0sbUJBQW1CLENBQUMsUUFBZ0I7UUFDdkMsTUFBTSxDQUFDLG9CQUFPLENBQUMsT0FBTyxFQUFFLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxVQUFVLEVBQUU7YUFDaEQsT0FBTyxDQUFDLGVBQUUsQ0FBQyxHQUFHLENBQUMsSUFBSSxnQkFBZ0IsQ0FBQyxTQUFTLFdBQVcsUUFBUSxHQUFHLENBQUMsQ0FBQyxDQUFDO2FBQ3RFLE9BQU8sRUFBRSxDQUFDO0lBQ25CLENBQUM7SUFFTSxnQkFBZ0I7UUFDbkIsTUFBTSxDQUFDLEtBQUssQ0FBQyxVQUFVLEVBQUU7YUFDcEIsT0FBTyxDQUFDLGVBQUUsQ0FBQyxTQUFTLENBQUMsNEJBQTRCLENBQUMsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxXQUFXLENBQUMsQ0FBQztJQUN0RixDQUFDO0lBRU0saUJBQWlCO1FBQ3BCLE1BQU0sQ0FBQyxvQkFBTyxDQUFDLE9BQU8sQ0FBQyxlQUFFLENBQUMsRUFBRSxDQUFDLGlCQUFpQixDQUFDLENBQUMsQ0FBQyxTQUFTLEVBQUUsQ0FBQztJQUNqRSxDQUFDO0lBRU8sVUFBVTtRQUNkLE1BQU0sQ0FBQyxvQkFBTyxDQUFDLE9BQU8sQ0FBQyxlQUFFLENBQUMsU0FBUyxDQUFDLHVCQUF1QixDQUFDLENBQUMsQ0FBQztJQUNsRSxDQUFDOztBQTNDYSwwQkFBUyxHQUFHLG1CQUFtQixDQUFDO0FBRGxELDRDQTZDQyIsImZpbGUiOiJjb21wb25lbnRzL2FjdGlvbkRyYXdlci9hY3Rpb25EcmF3ZXIuYXRvbS5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGJyb3dzZXIsIGJ5LCBFbGVtZW50RmluZGVyLCBwcm9taXNlIH0gZnJvbSBcIkBzb2xhcndpbmRzL3V6aS9wcm90cmFjdG9yXCI7XG5pbXBvcnQgeyBBdG9tIH0gZnJvbSBcIkBzb2xhcndpbmRzL3V6aVwiO1xuaW1wb3J0IFNwZWNIZWxwZXJzIGZyb20gXCIuLi9zcGVjSGVscGVyc1wiO1xuXG5leHBvcnQgY2xhc3MgQWN0aW9uRHJhd2VyQXRvbSBleHRlbmRzIEF0b20ge1xuICAgIHB1YmxpYyBzdGF0aWMgQ1NTX0NMQVNTID0gXCJ4dWktYWN0aW9uLWRyYXdlclwiO1xuXG4gICAgcHVibGljIG1vdmVNb3VzZVRvVGFyZ2V0ID0gKGF0b206IEF0b20pOiBwcm9taXNlLlByb21pc2U8dm9pZD4gPT4ge1xuICAgICAgICByZXR1cm4gU3BlY0hlbHBlcnMubW91c2VPdmVyKGF0b20pO1xuICAgIH07XG5cbiAgICBwdWJsaWMgaXNUb29sdGlwRGlzcGxheWVkKCk6IHByb21pc2UuUHJvbWlzZTxib29sZWFuPiB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldFRvb2x0aXAoKS5pc1ByZXNlbnQoKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0VG9vbHRpcEF0dHJpYnV0ZShhdHRyaWJ1dGU6IHN0cmluZyk6IHByb21pc2UuUHJvbWlzZTxzdHJpbmc+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0VG9vbHRpcCgpLmdldEF0dHJpYnV0ZShhdHRyaWJ1dGUpO1xuICAgIH1cblxuICAgIHB1YmxpYyBnZXRNZW51SWNvbkF0dHJpYnV0ZShpY29uVHlwZTogc3RyaW5nLCBhdHRyaWJ1dGU6IHN0cmluZyk6IHByb21pc2UuUHJvbWlzZTxzdHJpbmc+IHtcbiAgICAgICAgcmV0dXJuIHN1cGVyLmdldEVsZW1lbnQoKVxuICAgICAgICAgICAgLmVsZW1lbnQoYnkuY3NzKGAuJHtBY3Rpb25EcmF3ZXJBdG9tLkNTU19DTEFTU30gW2ljb249JHtpY29uVHlwZX1dYCkpXG4gICAgICAgICAgICAuZ2V0QXR0cmlidXRlKGF0dHJpYnV0ZSk7XG4gICAgfVxuXG4gICAgcHVibGljIGNsaWNrTWVudUljb24oaWNvblR5cGU6IHN0cmluZyk6IHByb21pc2UuUHJvbWlzZTx2b2lkPiB7XG4gICAgICAgIHJldHVybiBzdXBlci5nZXRFbGVtZW50KClcbiAgICAgICAgICAgIC5lbGVtZW50KGJ5LmNzcyhgLiR7QWN0aW9uRHJhd2VyQXRvbS5DU1NfQ0xBU1N9IFtpY29uPSR7aWNvblR5cGV9XWApKVxuICAgICAgICAgICAgLmNsaWNrKCk7XG4gICAgfVxuXG4gICAgcHVibGljIG1vdmVNb3VzZVRvTWVudUljb24oaWNvblR5cGU6IHN0cmluZyk6IHByb21pc2UuUHJvbWlzZTx2b2lkPiB7XG4gICAgICAgIHJldHVybiBicm93c2VyLmFjdGlvbnMoKS5tb3VzZU1vdmUoc3VwZXIuZ2V0RWxlbWVudCgpXG4gICAgICAgICAgICAuZWxlbWVudChieS5jc3MoYC4ke0FjdGlvbkRyYXdlckF0b20uQ1NTX0NMQVNTfSBpW2ljb249JHtpY29uVHlwZX1dYCkpKVxuICAgICAgICAgICAgLnBlcmZvcm0oKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0TWVudURpcmVjdGlvbigpOiBwcm9taXNlLlByb21pc2U8c3RyaW5nPiB7XG4gICAgICAgIHJldHVybiBzdXBlci5nZXRFbGVtZW50KClcbiAgICAgICAgICAgIC5lbGVtZW50KGJ5LmNsYXNzTmFtZShcInh1aS1hY3Rpb24tZHJhd2VyX19hY3Rpb25zXCIpKS5nZXRDc3NWYWx1ZShcInRyYW5zZm9ybVwiKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0VG9hc3RDb250YWluZXIoKTogcHJvbWlzZS5Qcm9taXNlPGJvb2xlYW4+IHtcbiAgICAgICAgcmV0dXJuIGJyb3dzZXIuZWxlbWVudChieS5pZChcInRvYXN0LWNvbnRhaW5lclwiKSkuaXNQcmVzZW50KCk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBnZXRUb29sdGlwKCk6IEVsZW1lbnRGaW5kZXIge1xuICAgICAgICByZXR1cm4gYnJvd3Nlci5lbGVtZW50KGJ5LmNsYXNzTmFtZShcImFjdGlvbi1kcmF3ZXItdG9vbHRpcFwiKSk7XG4gICAgfVxufVxuIl0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9
