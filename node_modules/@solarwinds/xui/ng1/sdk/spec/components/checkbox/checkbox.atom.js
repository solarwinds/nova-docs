"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const protractor_1 = require("@solarwinds/uzi/protractor");
const uzi_1 = require("@solarwinds/uzi");
class CheckboxAtom extends uzi_1.Atom {
    constructor(element) {
        super(element);
        this.getInputElement = () => {
            return super.getElement().element(protractor_1.by.className("xui-checkbox-input"));
        };
        this.getLabel = () => {
            return super.getElement().element(protractor_1.by.className("xui-checkbox-label"));
        };
        this.getContent = () => {
            const element = super.getElement().element(protractor_1.by.className("xui-checkbox-transclude"));
            return element.getText();
        };
        this.getHelpHintText = () => {
            const element = super.getElement().element(protractor_1.by.className("xui-input-help"));
            return element.getText();
        };
        this.getValidationText = () => {
            const element = super.getElement().element(protractor_1.by.className("xui-validation"));
            return element.getText();
        };
        this.isInvalid = () => {
            return this.getInputElement().getAttribute("aria-invalid").then((value) => {
                return value === "true";
            });
        };
        this.isIndeterminate = () => {
            return this.getInputElement().getAttribute("indeterminate").then((value) => {
                return value === "true";
            });
        };
        this.isRequired = () => {
            return this.getInputElement().getAttribute("required").then((value) => {
                return value === "true";
            });
        };
        this.isChecked = () => {
            const cbInput = this.getInputElement();
            return cbInput.getAttribute("checked").then((value) => {
                return value === "true";
            });
        };
        this.isDisabled = () => {
            return this.getInputElement().isEnabled().then((value) => {
                return !value;
            });
        };
        this.click = () => {
            return this.getMark().click();
        };
    }
    getMark() {
        return this.getElement().element(protractor_1.by.className("xui-checkbox-mark"));
    }
}
CheckboxAtom.CSS_CLASS = "xui-checkbox";
exports.CheckboxAtom = CheckboxAtom;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbXBvbmVudHMvY2hlY2tib3gvY2hlY2tib3guYXRvbS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLDJEQUFzRTtBQUN0RSx5Q0FBcUM7QUFFckMsa0JBQTBCLFNBQVEsVUFBSTtJQUdsQyxZQUFZLE9BQXNCO1FBQzlCLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUdaLG9CQUFlLEdBQUcsR0FBRyxFQUFFO1lBQzFCLE1BQU0sQ0FBQyxLQUFLLENBQUMsVUFBVSxFQUFFLENBQUMsT0FBTyxDQUFDLGVBQUUsQ0FBQyxTQUFTLENBQUMsb0JBQW9CLENBQUMsQ0FBQyxDQUFDO1FBQzFFLENBQUMsQ0FBQztRQUVLLGFBQVEsR0FBRyxHQUFHLEVBQUU7WUFDbkIsTUFBTSxDQUFDLEtBQUssQ0FBQyxVQUFVLEVBQUUsQ0FBQyxPQUFPLENBQUMsZUFBRSxDQUFDLFNBQVMsQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDLENBQUM7UUFDMUUsQ0FBQyxDQUFDO1FBRUssZUFBVSxHQUFHLEdBQUcsRUFBRTtZQUNyQixNQUFNLE9BQU8sR0FBRyxLQUFLLENBQUMsVUFBVSxFQUFFLENBQUMsT0FBTyxDQUFDLGVBQUUsQ0FBQyxTQUFTLENBQUMseUJBQXlCLENBQUMsQ0FBQyxDQUFDO1lBQ3BGLE1BQU0sQ0FBQyxPQUFPLENBQUMsT0FBTyxFQUFFLENBQUM7UUFDN0IsQ0FBQyxDQUFDO1FBRUssb0JBQWUsR0FBRyxHQUFHLEVBQUU7WUFDMUIsTUFBTSxPQUFPLEdBQUcsS0FBSyxDQUFDLFVBQVUsRUFBRSxDQUFDLE9BQU8sQ0FBQyxlQUFFLENBQUMsU0FBUyxDQUFDLGdCQUFnQixDQUFDLENBQUMsQ0FBQztZQUMzRSxNQUFNLENBQUMsT0FBTyxDQUFDLE9BQU8sRUFBRSxDQUFDO1FBQzdCLENBQUMsQ0FBQztRQUVLLHNCQUFpQixHQUFHLEdBQUcsRUFBRTtZQUM1QixNQUFNLE9BQU8sR0FBRyxLQUFLLENBQUMsVUFBVSxFQUFFLENBQUMsT0FBTyxDQUFDLGVBQUUsQ0FBQyxTQUFTLENBQUMsZ0JBQWdCLENBQUMsQ0FBQyxDQUFDO1lBQzNFLE1BQU0sQ0FBQyxPQUFPLENBQUMsT0FBTyxFQUFFLENBQUM7UUFDN0IsQ0FBQyxDQUFDO1FBRUssY0FBUyxHQUFHLEdBQUcsRUFBRTtZQUNwQixNQUFNLENBQUMsSUFBSSxDQUFDLGVBQWUsRUFBRSxDQUFDLFlBQVksQ0FBQyxjQUFjLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxLQUFLLEVBQUUsRUFBRTtnQkFDdEUsTUFBTSxDQUFDLEtBQUssS0FBSyxNQUFNLENBQUM7WUFDNUIsQ0FBQyxDQUFDLENBQUM7UUFDUCxDQUFDLENBQUM7UUFFSyxvQkFBZSxHQUFHLEdBQUcsRUFBRTtZQUMxQixNQUFNLENBQUMsSUFBSSxDQUFDLGVBQWUsRUFBRSxDQUFDLFlBQVksQ0FBQyxlQUFlLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxLQUFLLEVBQUUsRUFBRTtnQkFDdkUsTUFBTSxDQUFDLEtBQUssS0FBSyxNQUFNLENBQUM7WUFDNUIsQ0FBQyxDQUFDLENBQUM7UUFDUCxDQUFDLENBQUM7UUFFSyxlQUFVLEdBQUcsR0FBRyxFQUFFO1lBQ3JCLE1BQU0sQ0FBQyxJQUFJLENBQUMsZUFBZSxFQUFFLENBQUMsWUFBWSxDQUFDLFVBQVUsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLEtBQUssRUFBRSxFQUFFO2dCQUNsRSxNQUFNLENBQUMsS0FBSyxLQUFLLE1BQU0sQ0FBQztZQUM1QixDQUFDLENBQUMsQ0FBQztRQUNQLENBQUMsQ0FBQztRQUVLLGNBQVMsR0FBRyxHQUFHLEVBQUU7WUFDcEIsTUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLGVBQWUsRUFBRSxDQUFDO1lBQ3ZDLE1BQU0sQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDLFNBQVMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLEtBQUssRUFBRSxFQUFFO2dCQUNsRCxNQUFNLENBQUMsS0FBSyxLQUFLLE1BQU0sQ0FBQztZQUM1QixDQUFDLENBQUMsQ0FBQztRQUNQLENBQUMsQ0FBQztRQUVLLGVBQVUsR0FBRyxHQUFHLEVBQUU7WUFDckIsTUFBTSxDQUFDLElBQUksQ0FBQyxlQUFlLEVBQUUsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxLQUFLLEVBQUUsRUFBRTtnQkFDckQsTUFBTSxDQUFDLENBQUMsS0FBSyxDQUFDO1lBQ2xCLENBQUMsQ0FBQyxDQUFDO1FBQ1AsQ0FBQyxDQUFDO1FBRUssVUFBSyxHQUFHLEdBQUcsRUFBRTtZQUNoQixNQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDO1FBQ2xDLENBQUMsQ0FBQztJQTFERixDQUFDO0lBNERPLE9BQU87UUFDWCxNQUFNLENBQUMsSUFBSSxDQUFDLFVBQVUsRUFBRSxDQUFDLE9BQU8sQ0FBQyxlQUFFLENBQUMsU0FBUyxDQUFDLG1CQUFtQixDQUFDLENBQUMsQ0FBQztJQUN4RSxDQUFDOztBQWxFYSxzQkFBUyxHQUFHLGNBQWMsQ0FBQztBQUQ3QyxvQ0FvRUMiLCJmaWxlIjoiY29tcG9uZW50cy9jaGVja2JveC9jaGVja2JveC5hdG9tLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtieSwgRWxlbWVudEZpbmRlciwgcHJvbWlzZX0gZnJvbSBcIkBzb2xhcndpbmRzL3V6aS9wcm90cmFjdG9yXCI7XG5pbXBvcnQge0F0b219IGZyb20gXCJAc29sYXJ3aW5kcy91emlcIjtcblxuZXhwb3J0IGNsYXNzIENoZWNrYm94QXRvbSBleHRlbmRzIEF0b20ge1xuICAgIHB1YmxpYyBzdGF0aWMgQ1NTX0NMQVNTID0gXCJ4dWktY2hlY2tib3hcIjtcblxuICAgIGNvbnN0cnVjdG9yKGVsZW1lbnQ6IEVsZW1lbnRGaW5kZXIpIHtcbiAgICAgICAgc3VwZXIoZWxlbWVudCk7XG4gICAgfVxuXG4gICAgcHVibGljIGdldElucHV0RWxlbWVudCA9ICgpID0+IHtcbiAgICAgICAgcmV0dXJuIHN1cGVyLmdldEVsZW1lbnQoKS5lbGVtZW50KGJ5LmNsYXNzTmFtZShcInh1aS1jaGVja2JveC1pbnB1dFwiKSk7XG4gICAgfTtcblxuICAgIHB1YmxpYyBnZXRMYWJlbCA9ICgpID0+IHtcbiAgICAgICAgcmV0dXJuIHN1cGVyLmdldEVsZW1lbnQoKS5lbGVtZW50KGJ5LmNsYXNzTmFtZShcInh1aS1jaGVja2JveC1sYWJlbFwiKSk7XG4gICAgfTtcblxuICAgIHB1YmxpYyBnZXRDb250ZW50ID0gKCkgPT4ge1xuICAgICAgICBjb25zdCBlbGVtZW50ID0gc3VwZXIuZ2V0RWxlbWVudCgpLmVsZW1lbnQoYnkuY2xhc3NOYW1lKFwieHVpLWNoZWNrYm94LXRyYW5zY2x1ZGVcIikpO1xuICAgICAgICByZXR1cm4gZWxlbWVudC5nZXRUZXh0KCk7XG4gICAgfTtcblxuICAgIHB1YmxpYyBnZXRIZWxwSGludFRleHQgPSAoKSA9PiB7XG4gICAgICAgIGNvbnN0IGVsZW1lbnQgPSBzdXBlci5nZXRFbGVtZW50KCkuZWxlbWVudChieS5jbGFzc05hbWUoXCJ4dWktaW5wdXQtaGVscFwiKSk7XG4gICAgICAgIHJldHVybiBlbGVtZW50LmdldFRleHQoKTtcbiAgICB9O1xuXG4gICAgcHVibGljIGdldFZhbGlkYXRpb25UZXh0ID0gKCkgPT4ge1xuICAgICAgICBjb25zdCBlbGVtZW50ID0gc3VwZXIuZ2V0RWxlbWVudCgpLmVsZW1lbnQoYnkuY2xhc3NOYW1lKFwieHVpLXZhbGlkYXRpb25cIikpO1xuICAgICAgICByZXR1cm4gZWxlbWVudC5nZXRUZXh0KCk7XG4gICAgfTtcblxuICAgIHB1YmxpYyBpc0ludmFsaWQgPSAoKSA9PiB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldElucHV0RWxlbWVudCgpLmdldEF0dHJpYnV0ZShcImFyaWEtaW52YWxpZFwiKS50aGVuKCh2YWx1ZSkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIHZhbHVlID09PSBcInRydWVcIjtcbiAgICAgICAgfSk7XG4gICAgfTtcblxuICAgIHB1YmxpYyBpc0luZGV0ZXJtaW5hdGUgPSAoKSA9PiB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldElucHV0RWxlbWVudCgpLmdldEF0dHJpYnV0ZShcImluZGV0ZXJtaW5hdGVcIikudGhlbigodmFsdWUpID0+IHtcbiAgICAgICAgICAgIHJldHVybiB2YWx1ZSA9PT0gXCJ0cnVlXCI7XG4gICAgICAgIH0pO1xuICAgIH07XG5cbiAgICBwdWJsaWMgaXNSZXF1aXJlZCA9ICgpID0+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0SW5wdXRFbGVtZW50KCkuZ2V0QXR0cmlidXRlKFwicmVxdWlyZWRcIikudGhlbigodmFsdWUpID0+IHtcbiAgICAgICAgICAgIHJldHVybiB2YWx1ZSA9PT0gXCJ0cnVlXCI7XG4gICAgICAgIH0pO1xuICAgIH07XG5cbiAgICBwdWJsaWMgaXNDaGVja2VkID0gKCkgPT4ge1xuICAgICAgICBjb25zdCBjYklucHV0ID0gdGhpcy5nZXRJbnB1dEVsZW1lbnQoKTtcbiAgICAgICAgcmV0dXJuIGNiSW5wdXQuZ2V0QXR0cmlidXRlKFwiY2hlY2tlZFwiKS50aGVuKCh2YWx1ZSkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIHZhbHVlID09PSBcInRydWVcIjtcbiAgICAgICAgfSk7XG4gICAgfTtcblxuICAgIHB1YmxpYyBpc0Rpc2FibGVkID0gKCkgPT4ge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRJbnB1dEVsZW1lbnQoKS5pc0VuYWJsZWQoKS50aGVuKCh2YWx1ZSkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuICF2YWx1ZTtcbiAgICAgICAgfSk7XG4gICAgfTtcblxuICAgIHB1YmxpYyBjbGljayA9ICgpID0+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0TWFyaygpLmNsaWNrKCk7XG4gICAgfTtcblxuICAgIHByaXZhdGUgZ2V0TWFyaygpOiBFbGVtZW50RmluZGVyIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0RWxlbWVudCgpLmVsZW1lbnQoYnkuY2xhc3NOYW1lKFwieHVpLWNoZWNrYm94LW1hcmtcIikpO1xuICAgIH1cbn1cbiJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==
