"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const protractor_1 = require("@solarwinds/uzi/protractor");
const helpers_1 = require("../helpers");
const uzi_1 = require("@solarwinds/uzi");
const index_atom_1 = require("../index.atom");
describe("Visual tests", function () {
    let atom;
    let eyes;
    beforeAll(() => {
        eyes = helpers_1.default.prepareEyes();
        helpers_1.default.prepareBrowser("checkbox");
        atom = uzi_1.Atom.find(index_atom_1.CheckboxAtom, "testElement");
    });
    it("for checkbox", function () {
        const disable = protractor_1.element(protractor_1.by.id("disableToggle"));
        const value = protractor_1.element(protractor_1.by.id("valueToggle"));
        eyes.open(protractor_1.browser, "XUI", "Checkbox");
        //default
        eyes.checkWindow("Default - middle state");
        protractor_1.browser.actions()
            .mouseMove(protractor_1.browser.driver.findElement(protractor_1.by.xpath("//*[@id='testElement']/label/div[1]")))
            .perform();
        eyes.checkWindow("Hover - middle state");
        disable.click();
        eyes.checkWindow("Disabled - middle state");
        disable.click();
        // unchecked
        atom.click();
        //double click to lose focus
        value.click();
        value.click();
        eyes.checkWindow("Default - unchecked");
        protractor_1.browser.actions()
            .mouseMove(protractor_1.browser.driver.findElement(protractor_1.by.xpath("//*[@id='testElement']/label/div[1]")))
            .perform();
        eyes.checkWindow("Hover - unchecked");
        disable.click();
        eyes.checkWindow("Disabled - unchecked");
        disable.click();
        //checked
        value.click();
        eyes.checkWindow("Default - checked");
        protractor_1.browser.actions()
            .mouseMove(protractor_1.browser.driver.findElement(protractor_1.by.xpath("//*[@id='testElement']/label/div[1]")))
            .perform();
        eyes.checkWindow("Hover - checked");
        disable.click();
        eyes.checkWindow("Disabled - checked");
        eyes.close();
    }, 90000);
});

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbXBvbmVudHMvY2hlY2tib3gvY2hlY2tib3gudmlzdWFsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsMkRBQXlFO0FBQ3pFLHdDQUFpQztBQUVqQyx5Q0FBcUM7QUFDckMsOENBQTJDO0FBRTNDLFFBQVEsQ0FBQyxjQUFjLEVBQUU7SUFDckIsSUFBSSxJQUFrQixDQUFDO0lBQ3ZCLElBQUksSUFBVSxDQUFDO0lBRWYsU0FBUyxDQUFDLEdBQUcsRUFBRTtRQUNYLElBQUksR0FBRyxpQkFBTyxDQUFDLFdBQVcsRUFBRSxDQUFDO1FBQzdCLGlCQUFPLENBQUMsY0FBYyxDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBQ25DLElBQUksR0FBRyxVQUFJLENBQUMsSUFBSSxDQUFDLHlCQUFZLEVBQUUsYUFBYSxDQUFDLENBQUM7SUFDbEQsQ0FBQyxDQUFDLENBQUM7SUFFSCxFQUFFLENBQUMsY0FBYyxFQUFFO1FBQ2YsTUFBTSxPQUFPLEdBQUcsb0JBQU8sQ0FBQyxlQUFFLENBQUMsRUFBRSxDQUFDLGVBQWUsQ0FBQyxDQUFDLENBQUM7UUFDaEQsTUFBTSxLQUFLLEdBQUcsb0JBQU8sQ0FBQyxlQUFFLENBQUMsRUFBRSxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUM7UUFDNUMsSUFBSSxDQUFDLElBQUksQ0FBQyxvQkFBTyxFQUFFLEtBQUssRUFBRSxVQUFVLENBQUMsQ0FBQztRQUN0QyxTQUFTO1FBQ1QsSUFBSSxDQUFDLFdBQVcsQ0FBQyx3QkFBd0IsQ0FBQyxDQUFDO1FBQzNDLG9CQUFPLENBQUMsT0FBTyxFQUFFO2FBQ1osU0FBUyxDQUFDLG9CQUFPLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxlQUFFLENBQUMsS0FBSyxDQUFDLHFDQUFxQyxDQUFDLENBQUMsQ0FBQzthQUN0RixPQUFPLEVBQUUsQ0FBQztRQUNmLElBQUksQ0FBQyxXQUFXLENBQUMsc0JBQXNCLENBQUMsQ0FBQztRQUN6QyxPQUFPLENBQUMsS0FBSyxFQUFFLENBQUM7UUFDaEIsSUFBSSxDQUFDLFdBQVcsQ0FBQyx5QkFBeUIsQ0FBQyxDQUFDO1FBQzVDLE9BQU8sQ0FBQyxLQUFLLEVBQUUsQ0FBQztRQUNoQixZQUFZO1FBQ1osSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDO1FBQ2IsNEJBQTRCO1FBQzVCLEtBQUssQ0FBQyxLQUFLLEVBQUUsQ0FBQztRQUNkLEtBQUssQ0FBQyxLQUFLLEVBQUUsQ0FBQztRQUNkLElBQUksQ0FBQyxXQUFXLENBQUMscUJBQXFCLENBQUMsQ0FBQztRQUN4QyxvQkFBTyxDQUFDLE9BQU8sRUFBRTthQUNaLFNBQVMsQ0FBQyxvQkFBTyxDQUFDLE1BQU0sQ0FBQyxXQUFXLENBQUMsZUFBRSxDQUFDLEtBQUssQ0FBQyxxQ0FBcUMsQ0FBQyxDQUFDLENBQUM7YUFDdEYsT0FBTyxFQUFFLENBQUM7UUFDZixJQUFJLENBQUMsV0FBVyxDQUFDLG1CQUFtQixDQUFDLENBQUM7UUFDdEMsT0FBTyxDQUFDLEtBQUssRUFBRSxDQUFDO1FBQ2hCLElBQUksQ0FBQyxXQUFXLENBQUMsc0JBQXNCLENBQUMsQ0FBQztRQUN6QyxPQUFPLENBQUMsS0FBSyxFQUFFLENBQUM7UUFDaEIsU0FBUztRQUNULEtBQUssQ0FBQyxLQUFLLEVBQUUsQ0FBQztRQUNkLElBQUksQ0FBQyxXQUFXLENBQUMsbUJBQW1CLENBQUMsQ0FBQztRQUN0QyxvQkFBTyxDQUFDLE9BQU8sRUFBRTthQUNaLFNBQVMsQ0FBQyxvQkFBTyxDQUFDLE1BQU0sQ0FBQyxXQUFXLENBQUMsZUFBRSxDQUFDLEtBQUssQ0FBQyxxQ0FBcUMsQ0FBQyxDQUFDLENBQUM7YUFDdEYsT0FBTyxFQUFFLENBQUM7UUFDZixJQUFJLENBQUMsV0FBVyxDQUFDLGlCQUFpQixDQUFDLENBQUM7UUFDcEMsT0FBTyxDQUFDLEtBQUssRUFBRSxDQUFDO1FBQ2hCLElBQUksQ0FBQyxXQUFXLENBQUMsb0JBQW9CLENBQUMsQ0FBQztRQUN2QyxJQUFJLENBQUMsS0FBSyxFQUFFLENBQUM7SUFDakIsQ0FBQyxFQUFFLEtBQUssQ0FBQyxDQUFDO0FBQ2QsQ0FBQyxDQUFDLENBQUMiLCJmaWxlIjoiY29tcG9uZW50cy9jaGVja2JveC9jaGVja2JveC52aXN1YWwuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge2Jyb3dzZXIsIGJ5LCBlbGVtZW50LCBwcm9taXNlfSBmcm9tIFwiQHNvbGFyd2luZHMvdXppL3Byb3RyYWN0b3JcIjtcbmltcG9ydCBIZWxwZXJzIGZyb20gXCIuLi9oZWxwZXJzXCI7XG5pbXBvcnQge0V5ZXN9IGZyb20gXCJleWVzLnByb3RyYWN0b3JcIjtcbmltcG9ydCB7QXRvbX0gZnJvbSBcIkBzb2xhcndpbmRzL3V6aVwiO1xuaW1wb3J0IHtDaGVja2JveEF0b219IGZyb20gXCIuLi9pbmRleC5hdG9tXCI7XG5cbmRlc2NyaWJlKFwiVmlzdWFsIHRlc3RzXCIsIGZ1bmN0aW9uICgpIHtcbiAgICBsZXQgYXRvbTogQ2hlY2tib3hBdG9tO1xuICAgIGxldCBleWVzOiBFeWVzO1xuXG4gICAgYmVmb3JlQWxsKCgpID0+IHtcbiAgICAgICAgZXllcyA9IEhlbHBlcnMucHJlcGFyZUV5ZXMoKTtcbiAgICAgICAgSGVscGVycy5wcmVwYXJlQnJvd3NlcihcImNoZWNrYm94XCIpO1xuICAgICAgICBhdG9tID0gQXRvbS5maW5kKENoZWNrYm94QXRvbSwgXCJ0ZXN0RWxlbWVudFwiKTtcbiAgICB9KTtcblxuICAgIGl0KFwiZm9yIGNoZWNrYm94XCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgY29uc3QgZGlzYWJsZSA9IGVsZW1lbnQoYnkuaWQoXCJkaXNhYmxlVG9nZ2xlXCIpKTtcbiAgICAgICAgY29uc3QgdmFsdWUgPSBlbGVtZW50KGJ5LmlkKFwidmFsdWVUb2dnbGVcIikpO1xuICAgICAgICBleWVzLm9wZW4oYnJvd3NlciwgXCJYVUlcIiwgXCJDaGVja2JveFwiKTtcbiAgICAgICAgLy9kZWZhdWx0XG4gICAgICAgIGV5ZXMuY2hlY2tXaW5kb3coXCJEZWZhdWx0IC0gbWlkZGxlIHN0YXRlXCIpO1xuICAgICAgICBicm93c2VyLmFjdGlvbnMoKVxuICAgICAgICAgICAgLm1vdXNlTW92ZShicm93c2VyLmRyaXZlci5maW5kRWxlbWVudChieS54cGF0aChcIi8vKltAaWQ9J3Rlc3RFbGVtZW50J10vbGFiZWwvZGl2WzFdXCIpKSlcbiAgICAgICAgICAgIC5wZXJmb3JtKCk7XG4gICAgICAgIGV5ZXMuY2hlY2tXaW5kb3coXCJIb3ZlciAtIG1pZGRsZSBzdGF0ZVwiKTtcbiAgICAgICAgZGlzYWJsZS5jbGljaygpO1xuICAgICAgICBleWVzLmNoZWNrV2luZG93KFwiRGlzYWJsZWQgLSBtaWRkbGUgc3RhdGVcIik7XG4gICAgICAgIGRpc2FibGUuY2xpY2soKTtcbiAgICAgICAgLy8gdW5jaGVja2VkXG4gICAgICAgIGF0b20uY2xpY2soKTtcbiAgICAgICAgLy9kb3VibGUgY2xpY2sgdG8gbG9zZSBmb2N1c1xuICAgICAgICB2YWx1ZS5jbGljaygpO1xuICAgICAgICB2YWx1ZS5jbGljaygpO1xuICAgICAgICBleWVzLmNoZWNrV2luZG93KFwiRGVmYXVsdCAtIHVuY2hlY2tlZFwiKTtcbiAgICAgICAgYnJvd3Nlci5hY3Rpb25zKClcbiAgICAgICAgICAgIC5tb3VzZU1vdmUoYnJvd3Nlci5kcml2ZXIuZmluZEVsZW1lbnQoYnkueHBhdGgoXCIvLypbQGlkPSd0ZXN0RWxlbWVudCddL2xhYmVsL2RpdlsxXVwiKSkpXG4gICAgICAgICAgICAucGVyZm9ybSgpO1xuICAgICAgICBleWVzLmNoZWNrV2luZG93KFwiSG92ZXIgLSB1bmNoZWNrZWRcIik7XG4gICAgICAgIGRpc2FibGUuY2xpY2soKTtcbiAgICAgICAgZXllcy5jaGVja1dpbmRvdyhcIkRpc2FibGVkIC0gdW5jaGVja2VkXCIpO1xuICAgICAgICBkaXNhYmxlLmNsaWNrKCk7XG4gICAgICAgIC8vY2hlY2tlZFxuICAgICAgICB2YWx1ZS5jbGljaygpO1xuICAgICAgICBleWVzLmNoZWNrV2luZG93KFwiRGVmYXVsdCAtIGNoZWNrZWRcIik7XG4gICAgICAgIGJyb3dzZXIuYWN0aW9ucygpXG4gICAgICAgICAgICAubW91c2VNb3ZlKGJyb3dzZXIuZHJpdmVyLmZpbmRFbGVtZW50KGJ5LnhwYXRoKFwiLy8qW0BpZD0ndGVzdEVsZW1lbnQnXS9sYWJlbC9kaXZbMV1cIikpKVxuICAgICAgICAgICAgLnBlcmZvcm0oKTtcbiAgICAgICAgZXllcy5jaGVja1dpbmRvdyhcIkhvdmVyIC0gY2hlY2tlZFwiKTtcbiAgICAgICAgZGlzYWJsZS5jbGljaygpO1xuICAgICAgICBleWVzLmNoZWNrV2luZG93KFwiRGlzYWJsZWQgLSBjaGVja2VkXCIpO1xuICAgICAgICBleWVzLmNsb3NlKCk7XG4gICAgfSwgOTAwMDApO1xufSk7XG4iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=
