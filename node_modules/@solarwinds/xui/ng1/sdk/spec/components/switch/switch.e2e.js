"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const protractor = require("@solarwinds/uzi/protractor");
const protractor_1 = require("@solarwinds/uzi/protractor");
const helpers_1 = require("../helpers");
const uzi_1 = require("@solarwinds/uzi");
const index_atom_1 = require("../index.atom");
describe("USERCONTROL switch", () => {
    let switchComponent;
    let disabledSwitchComponent;
    let button;
    beforeEach(() => {
        helpers_1.default.prepareBrowser("switch");
        switchComponent = uzi_1.Atom.findIn(index_atom_1.SwitchAtom, protractor_1.element(protractor_1.by.className("example")), 0);
        disabledSwitchComponent = uzi_1.Atom.findIn(index_atom_1.SwitchAtom, protractor_1.element(protractor_1.by.className("example")), 1);
        button = uzi_1.Atom.findIn(index_atom_1.ButtonAtom, protractor_1.element(protractor_1.by.className("example")));
    });
    it("should be switched off by default ", () => {
        expect(switchComponent.isOn()).toBe(false);
    });
    it("should toggle css class on click ", () => {
        switchComponent.slider().click();
        expect(switchComponent.isOn()).toBe(true);
        switchComponent.slider().click();
        expect(switchComponent.isOn()).toBe(false);
    });
    it("value should change after click on the switch", () => {
        const modelValue = protractor_1.element(protractor_1.by.id("vmState"));
        expect(modelValue.getText()).toEqual(false.toString());
        switchComponent.slider().click();
        expect(modelValue.getText()).toEqual(true.toString());
    });
    //it("value should change after clicking on the caption", () => {
    //    const modelValue = element(by.id("vmState"));
    //    const caption = switchComponent.caption();
    //
    //    expect(modelValue.getText()).toEqual(false.toString());
    //    caption.click();
    //    expect(modelValue.getText()).toEqual(true.toString());
    //});
    it("value should not change when disabled", () => {
        const modelValue = protractor_1.element(protractor_1.by.id("vmState"));
        expect(modelValue.getText()).toEqual(false.toString());
        //webdriver does not allow clicking on disabled elements, so we have to use js
        protractor_1.browser.executeScript("document.querySelector(\"#second .xui-switch__bar\").click()");
        expect(modelValue.getText()).toEqual(false.toString());
        protractor_1.browser.executeScript("document.querySelector(\"#second .xui-switch__label\").click()");
        expect(modelValue.getText()).toEqual(false.toString());
    });
    it("value should be retained after disable twiddle", () => {
        switchComponent.slider().click();
        expect(switchComponent.isOn()).toBe(true);
        button.click();
        button.click();
        expect(switchComponent.isOn()).toBe(true);
    });
    it("value should change with spacebar", () => {
        expect(switchComponent.isOn()).toBe(false);
        switchComponent.slider().sendKeys(protractor.Key.SPACE);
        expect(switchComponent.isOn()).toBe(true);
    });
    it("isEnabled should return right element state", () => {
        expect(switchComponent.isEnabled()).toBe(true);
        expect(disabledSwitchComponent.isEnabled()).toBe(false);
    });
});

//# sourceMappingURL=data:application/json;base64,
