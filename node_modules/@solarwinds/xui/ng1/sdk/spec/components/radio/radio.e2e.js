"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const protractor = require("@solarwinds/uzi/protractor");
const protractor_1 = require("@solarwinds/uzi/protractor");
const helpers_1 = require("../helpers");
const index_atom_1 = require("../index.atom");
const uzi_1 = require("@solarwinds/uzi");
describe("USERCONTROL radio:", () => {
    let atom;
    const prepareBrowser = () => {
        helpers_1.default.prepareBrowser("radio");
        const section = protractor_1.element(protractor_1.by.id("radio-page"));
        atom = uzi_1.Atom.findIn(index_atom_1.RadioAtom, section);
    };
    describe("String values section:", () => {
        let vegetableRadios, carrotRadio, tomatoRadio, onionRadio;
        beforeEach(() => {
            prepareBrowser();
            // Get all "Vegetables" radios
            const vegetableSection = protractor_1.element(protractor_1.by.css("#xui-demo-radio-string-values"));
            vegetableRadios = vegetableSection.all(protractor_1.by.css(".xui-radio"));
            carrotRadio = atom.findRadioByName(vegetableRadios, "CARROT");
            tomatoRadio = atom.findRadioByName(vegetableRadios, "TOMATO");
            onionRadio = atom.findRadioByName(vegetableRadios, "ONION");
        });
        it("onion item should be selected by default", () => {
            // Check that onion radio is selected by default
            expect(atom.isRadioSelected(onionRadio)).toEqual(true);
            // Check that other elements are not selected
            vegetableRadios.each((radio) => {
                atom.getRadioText(radio).then((text) => {
                    if (text.toLowerCase() !== "onion") {
                        expect(atom.isRadioSelected(radio)).toEqual(false);
                    }
                });
            });
        });
        it("only one item can be selected", () => {
            // Verify that radios are not selected at start
            expect(atom.isRadioSelected(carrotRadio)).toEqual(false);
            expect(atom.isRadioSelected(tomatoRadio)).toEqual(false);
            // Select tomato
            atom.clickOnRadio(tomatoRadio);
            expect(atom.isRadioSelected(carrotRadio)).toEqual(false);
            expect(atom.isRadioSelected(tomatoRadio)).toEqual(true);
            // Select carrot
            atom.clickOnRadio(carrotRadio);
            // Check that onion is selected and tomato got unselected
            expect(atom.isRadioSelected(carrotRadio)).toEqual(true);
            expect(atom.isRadioSelected(tomatoRadio)).toEqual(false);
        });
    });
    describe("Object values section:", () => {
        let fruitRadios, appleRadio, bananaRadio;
        beforeEach(() => {
            prepareBrowser();
            const fruitSection = protractor_1.element(protractor_1.by.css("#xui-demo-radio-object-values"));
            fruitRadios = fruitSection.all(protractor_1.by.css(".xui-radio"));
            appleRadio = atom.findRadioByName(fruitRadios, "APPLE");
            bananaRadio = atom.findRadioByName(fruitRadios, "BANANA");
        });
        it("no item should be selected by default", () => {
            fruitRadios.each((radio) => {
                expect(atom.isRadioSelected(radio)).toEqual(false);
            });
        });
        it("selection should be changeable by cursor keys", () => {
            // Check that radios are not selected
            expect(atom.isRadioSelected(appleRadio)).toEqual(false);
            expect(atom.isRadioSelected(bananaRadio)).toEqual(false);
            // Click on apple radio
            atom.clickOnRadio(appleRadio);
            expect(atom.isRadioSelected(appleRadio)).toEqual(true);
            expect(atom.isRadioSelected(bananaRadio)).toEqual(false);
            // Click on UP arrow button so we check that correct element has focus and that radio
            // from correct group is selected
            protractor_1.browser.actions().sendKeys(protractor.Key.UP).perform();
            expect(atom.isRadioSelected(appleRadio)).toEqual(false);
            expect(atom.isRadioSelected(bananaRadio)).toEqual(true);
        });
    });
    describe("Disabling options section:", () => {
        let instrumentRadios, disableButton, modelLabel, pianoRadio, ukuleleRadio;
        beforeEach(() => {
            prepareBrowser();
            let instrumentSection = protractor_1.element(protractor_1.by.css("#xui-demo-radio-disabling-options"));
            instrumentRadios = instrumentSection.all(protractor_1.by.css(".xui-radio"));
            pianoRadio = atom.findRadioByName(instrumentRadios, "PIANO");
            ukuleleRadio = atom.findRadioByName(instrumentRadios, "UKULELE");
            disableButton = instrumentSection
                .all(protractor_1.by.xpath(".//button[div[normalize-space(text()) = 'Toggle options']]"))
                .first();
            modelLabel = instrumentSection
                .all(protractor_1.by.xpath(".//div[starts-with(text(), 'Model: ')]"))
                .first();
        });
        it("items should not be selectable when disabled", () => {
            // Verify that radio is not selected
            expect(atom.isRadioSelected(pianoRadio)).toEqual(false);
            // Disable radios
            expect(atom.isRadioEnabled(pianoRadio)).toEqual(true);
            disableButton.click();
            expect(atom.isRadioEnabled(pianoRadio)).toEqual(false);
            // Verify that radio can't be selected
            expect(atom.isRadioSelected(pianoRadio)).toEqual(false);
            atom.clickOnRadio(pianoRadio);
            expect(atom.isRadioSelected(pianoRadio)).toEqual(false);
            // Enable radios
            expect(atom.isRadioEnabled(pianoRadio)).toEqual(false);
            disableButton.click();
            expect(atom.isRadioEnabled(pianoRadio)).toEqual(true);
            // Verify that radio can be selected
            expect(atom.isRadioSelected(pianoRadio)).toEqual(false);
            atom.clickOnRadio(pianoRadio);
            expect(atom.isRadioSelected(pianoRadio)).toEqual(true);
        });
        it("radio button should not be clickable when disabled", () => {
            expect(modelLabel.getText()).toEqual("Model:");
            disableButton.click();
            atom.clickOnRadio(pianoRadio);
            expect(modelLabel.getText()).toEqual("Model:");
            disableButton.click();
            atom.clickOnRadio(pianoRadio);
            expect(modelLabel.getText()).toEqual("Model: piano");
        });
        it("selected item should retain its state when disabled", () => {
            // Select ukulele radio
            expect(atom.isRadioSelected(ukuleleRadio)).toEqual(false);
            atom.clickOnRadio(ukuleleRadio);
            expect(atom.isRadioSelected(ukuleleRadio)).toEqual(true);
            // Disable radios
            expect(atom.isRadioEnabled(ukuleleRadio)).toEqual(true);
            disableButton.click();
            expect(atom.isRadioEnabled(ukuleleRadio)).toEqual(false);
            // Check that radio stays selected even after clicking on different one in disabled mode
            expect(atom.isRadioSelected(ukuleleRadio)).toEqual(true);
            atom.clickOnRadio(pianoRadio);
            expect(atom.isRadioSelected(ukuleleRadio)).toEqual(true);
            expect(modelLabel.getText()).toEqual("Model: ukulele");
        });
        it("Model: string should correspond to selected value", () => {
            expect(modelLabel.getText()).toEqual("Model:");
            atom.clickOnRadio(pianoRadio);
            expect(modelLabel.getText()).toEqual("Model: piano");
        });
        it("Should return correct radio value", () => {
            expect(atom.getValue(pianoRadio)).toEqual("piano");
            expect(atom.getValue(ukuleleRadio)).toEqual("ukulele");
        });
    });
});

//# sourceMappingURL=data:application/json;base64,
