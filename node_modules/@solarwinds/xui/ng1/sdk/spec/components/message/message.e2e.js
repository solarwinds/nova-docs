"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const protractor_1 = require("@solarwinds/uzi/protractor");
const helpers_1 = require("../helpers");
const index_atom_1 = require("../index.atom");
const uzi_1 = require("@solarwinds/uzi");
describe("USERCONTROL Message", () => {
    let atom;
    let atom2;
    beforeEach(() => {
        helpers_1.default.prepareBrowser("message");
        atom = uzi_1.Atom.find(index_atom_1.MessageAtom, "testElement");
        atom2 = uzi_1.Atom.find(index_atom_1.MessageAtom, "testElement2");
    });
    describe("Attribute section:", () => {
        it("should have type class based on 'type' attribute", () => {
            expect(atom.hasClass("xui-message-info")).toBe(true);
        });
        it("should show dismiss button when specified", function () {
            expect(atom.isDismissable()).toBe(true);
            expect(atom2.isDismissable()).toEqual(false);
        });
        // Known isPresent bug in old protractor we use:
        // https://github.com/angular/protractor/issues/2277#issuecomment-232747575
        xit("should hide when dismissed", () => {
            expect(atom.isVisible()).toEqual(true);
            atom.dismissMessage();
            protractor_1.browser.wait(() => {
                return atom.isVisible().then((result) => {
                    return result === false;
                });
            }, 5000);
            expect(atom.isVisible()).toEqual(false);
        });
        it("should call onDismiss() when dismissed", () => {
            atom.dismissMessage();
            expect(protractor_1.element(protractor_1.by.className("dismiss-clicked")).isPresent()).toBe(true);
        });
    });
    describe("Content section:", () => {
        it("content should be transcluded", () => {
            expect(atom.getContent()).toEqual("CONTENT");
        });
    });
});

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbXBvbmVudHMvbWVzc2FnZS9tZXNzYWdlLmUyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLDJEQUF5RTtBQUN6RSx3Q0FBaUM7QUFDakMsOENBQTBDO0FBQzFDLHlDQUFxQztBQUVyQyxRQUFRLENBQUMscUJBQXFCLEVBQUUsR0FBRyxFQUFFO0lBQ2pDLElBQUksSUFBaUIsQ0FBQztJQUN0QixJQUFJLEtBQWtCLENBQUM7SUFFdkIsVUFBVSxDQUFDLEdBQUcsRUFBRTtRQUNaLGlCQUFPLENBQUMsY0FBYyxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBQ2xDLElBQUksR0FBRyxVQUFJLENBQUMsSUFBSSxDQUFDLHdCQUFXLEVBQUUsYUFBYSxDQUFDLENBQUM7UUFDN0MsS0FBSyxHQUFHLFVBQUksQ0FBQyxJQUFJLENBQUMsd0JBQVcsRUFBRSxjQUFjLENBQUMsQ0FBQztJQUNuRCxDQUFDLENBQUMsQ0FBQztJQUVILFFBQVEsQ0FBQyxvQkFBb0IsRUFBRSxHQUFHLEVBQUU7UUFDaEMsRUFBRSxDQUFDLGtEQUFrRCxFQUFFLEdBQUcsRUFBRTtZQUN4RCxNQUFNLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ3pELENBQUMsQ0FBQyxDQUFDO1FBRUgsRUFBRSxDQUFDLDJDQUEyQyxFQUFFO1lBQzVDLE1BQU0sQ0FBQyxJQUFJLENBQUMsYUFBYSxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7WUFDeEMsTUFBTSxDQUFDLEtBQUssQ0FBQyxhQUFhLEVBQUUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUNqRCxDQUFDLENBQUMsQ0FBQztRQUVILGdEQUFnRDtRQUNoRCwyRUFBMkU7UUFDM0UsR0FBRyxDQUFDLDRCQUE0QixFQUFFLEdBQUcsRUFBRTtZQUNuQyxNQUFNLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxDQUFDLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQ3ZDLElBQUksQ0FBQyxjQUFjLEVBQUUsQ0FBQztZQUN0QixvQkFBTyxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUU7Z0JBQ2QsTUFBTSxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxNQUFNLEVBQUUsRUFBRTtvQkFDcEMsTUFBTSxDQUFDLE1BQU0sS0FBSyxLQUFLLENBQUM7Z0JBQzVCLENBQUMsQ0FBQyxDQUFDO1lBQ1AsQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDO1lBQ1QsTUFBTSxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUM1QyxDQUFDLENBQUMsQ0FBQztRQUVILEVBQUUsQ0FBQyx3Q0FBd0MsRUFBRSxHQUFHLEVBQUU7WUFDOUMsSUFBSSxDQUFDLGNBQWMsRUFBRSxDQUFDO1lBQ3RCLE1BQU0sQ0FBQyxvQkFBTyxDQUFDLGVBQUUsQ0FBQyxTQUFTLENBQUMsaUJBQWlCLENBQUMsQ0FBQyxDQUFDLFNBQVMsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQzVFLENBQUMsQ0FBQyxDQUFDO0lBQ1AsQ0FBQyxDQUFDLENBQUM7SUFFSCxRQUFRLENBQUMsa0JBQWtCLEVBQUUsR0FBRyxFQUFFO1FBQzlCLEVBQUUsQ0FBQywrQkFBK0IsRUFBRSxHQUFHLEVBQUU7WUFDckMsTUFBTSxDQUFDLElBQUksQ0FBQyxVQUFVLEVBQUUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUNqRCxDQUFDLENBQUMsQ0FBQztJQUNQLENBQUMsQ0FBQyxDQUFDO0FBQ1AsQ0FBQyxDQUFDLENBQUMiLCJmaWxlIjoiY29tcG9uZW50cy9tZXNzYWdlL21lc3NhZ2UuZTJlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHticm93c2VyLCBieSwgZWxlbWVudCwgcHJvbWlzZX0gZnJvbSBcIkBzb2xhcndpbmRzL3V6aS9wcm90cmFjdG9yXCI7XG5pbXBvcnQgSGVscGVycyBmcm9tIFwiLi4vaGVscGVyc1wiO1xuaW1wb3J0IHtNZXNzYWdlQXRvbX0gZnJvbSBcIi4uL2luZGV4LmF0b21cIjtcbmltcG9ydCB7QXRvbX0gZnJvbSBcIkBzb2xhcndpbmRzL3V6aVwiO1xuXG5kZXNjcmliZShcIlVTRVJDT05UUk9MIE1lc3NhZ2VcIiwgKCkgPT4ge1xuICAgIGxldCBhdG9tOiBNZXNzYWdlQXRvbTtcbiAgICBsZXQgYXRvbTI6IE1lc3NhZ2VBdG9tO1xuXG4gICAgYmVmb3JlRWFjaCgoKSA9PiB7XG4gICAgICAgIEhlbHBlcnMucHJlcGFyZUJyb3dzZXIoXCJtZXNzYWdlXCIpO1xuICAgICAgICBhdG9tID0gQXRvbS5maW5kKE1lc3NhZ2VBdG9tLCBcInRlc3RFbGVtZW50XCIpO1xuICAgICAgICBhdG9tMiA9IEF0b20uZmluZChNZXNzYWdlQXRvbSwgXCJ0ZXN0RWxlbWVudDJcIik7XG4gICAgfSk7XG5cbiAgICBkZXNjcmliZShcIkF0dHJpYnV0ZSBzZWN0aW9uOlwiLCAoKSA9PiB7XG4gICAgICAgIGl0KFwic2hvdWxkIGhhdmUgdHlwZSBjbGFzcyBiYXNlZCBvbiAndHlwZScgYXR0cmlidXRlXCIsICgpID0+IHtcbiAgICAgICAgICAgIGV4cGVjdChhdG9tLmhhc0NsYXNzKFwieHVpLW1lc3NhZ2UtaW5mb1wiKSkudG9CZSh0cnVlKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaXQoXCJzaG91bGQgc2hvdyBkaXNtaXNzIGJ1dHRvbiB3aGVuIHNwZWNpZmllZFwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBleHBlY3QoYXRvbS5pc0Rpc21pc3NhYmxlKCkpLnRvQmUodHJ1ZSk7XG4gICAgICAgICAgICBleHBlY3QoYXRvbTIuaXNEaXNtaXNzYWJsZSgpKS50b0VxdWFsKGZhbHNlKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gS25vd24gaXNQcmVzZW50IGJ1ZyBpbiBvbGQgcHJvdHJhY3RvciB3ZSB1c2U6XG4gICAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9hbmd1bGFyL3Byb3RyYWN0b3IvaXNzdWVzLzIyNzcjaXNzdWVjb21tZW50LTIzMjc0NzU3NVxuICAgICAgICB4aXQoXCJzaG91bGQgaGlkZSB3aGVuIGRpc21pc3NlZFwiLCAoKSA9PiB7XG4gICAgICAgICAgICBleHBlY3QoYXRvbS5pc1Zpc2libGUoKSkudG9FcXVhbCh0cnVlKTtcbiAgICAgICAgICAgIGF0b20uZGlzbWlzc01lc3NhZ2UoKTtcbiAgICAgICAgICAgIGJyb3dzZXIud2FpdCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGF0b20uaXNWaXNpYmxlKCkudGhlbigocmVzdWx0KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQgPT09IGZhbHNlO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSwgNTAwMCk7XG4gICAgICAgICAgICBleHBlY3QoYXRvbS5pc1Zpc2libGUoKSkudG9FcXVhbChmYWxzZSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGl0KFwic2hvdWxkIGNhbGwgb25EaXNtaXNzKCkgd2hlbiBkaXNtaXNzZWRcIiwgKCkgPT4ge1xuICAgICAgICAgICAgYXRvbS5kaXNtaXNzTWVzc2FnZSgpO1xuICAgICAgICAgICAgZXhwZWN0KGVsZW1lbnQoYnkuY2xhc3NOYW1lKFwiZGlzbWlzcy1jbGlja2VkXCIpKS5pc1ByZXNlbnQoKSkudG9CZSh0cnVlKTtcbiAgICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBkZXNjcmliZShcIkNvbnRlbnQgc2VjdGlvbjpcIiwgKCkgPT4ge1xuICAgICAgICBpdChcImNvbnRlbnQgc2hvdWxkIGJlIHRyYW5zY2x1ZGVkXCIsICgpID0+IHtcbiAgICAgICAgICAgIGV4cGVjdChhdG9tLmdldENvbnRlbnQoKSkudG9FcXVhbChcIkNPTlRFTlRcIik7XG4gICAgICAgIH0pO1xuICAgIH0pO1xufSk7XG4iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=
