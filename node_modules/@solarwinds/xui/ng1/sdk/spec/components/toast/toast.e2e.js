"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const helpers_1 = require("../helpers");
const uzi_1 = require("@solarwinds/uzi");
const index_atom_1 = require("../index.atom");
describe("USERCONTROL toast", () => {
    let toastAtom;
    beforeAll(() => {
        helpers_1.default.prepareBrowser("toast");
    });
    const validateToast = (button, type) => {
        it(`shows toast with type of ${type}`, () => {
            toastAtom = index_atom_1.ToastAtom.get(0);
            button.click();
            toastAtom.waitUntilDisplayed();
            switch (type) {
                case "success":
                    expect(toastAtom.isSuccessType()).toBe(true);
                    break;
                case "warning":
                    expect(toastAtom.isWarningType()).toBe(true);
                    break;
                case "info":
                    expect(toastAtom.isInfoType()).toBe(true);
                    break;
                case "error":
                    expect(toastAtom.isErrorType()).toBe(true);
                    break;
            }
            expect(toastAtom.getMessage()).toBe(type);
            expect(toastAtom.getTitle()).toBe(type);
            toastAtom.close(true);
        });
    };
    describe("when Success toast is displayed", () => {
        const button = uzi_1.Atom.find(index_atom_1.ButtonAtom, "show-success");
        validateToast(button, "success");
    });
    describe("when Warning toast is displayed", () => {
        const button = uzi_1.Atom.find(index_atom_1.ButtonAtom, "show-warning");
        validateToast(button, "warning");
    });
    describe("when Info toast is displayed", () => {
        const button = uzi_1.Atom.find(index_atom_1.ButtonAtom, "show-info");
        validateToast(button, "info");
    });
    describe("when Error toast is displayed", () => {
        const button = uzi_1.Atom.find(index_atom_1.ButtonAtom, "show-error");
        validateToast(button, "error");
    });
});

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbXBvbmVudHMvdG9hc3QvdG9hc3QuZTJlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQ0Esd0NBQWlDO0FBQ2pDLHlDQUFxQztBQUNyQyw4Q0FBb0Q7QUFFcEQsUUFBUSxDQUFDLG1CQUFtQixFQUFFLEdBQUcsRUFBRTtJQUMvQixJQUFJLFNBQW9CLENBQUM7SUFDekIsU0FBUyxDQUFDLEdBQUcsRUFBRTtRQUNYLGlCQUFPLENBQUMsY0FBYyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQ3BDLENBQUMsQ0FBQyxDQUFDO0lBRUgsTUFBTSxhQUFhLEdBQUcsQ0FBQyxNQUFrQixFQUFFLElBQVksRUFBRSxFQUFFO1FBQ3ZELEVBQUUsQ0FBQyw0QkFBNEIsSUFBSSxFQUFFLEVBQUUsR0FBRyxFQUFFO1lBQ3hDLFNBQVMsR0FBRyxzQkFBUyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUM3QixNQUFNLENBQUMsS0FBSyxFQUFFLENBQUM7WUFFZixTQUFTLENBQUMsa0JBQWtCLEVBQUUsQ0FBQztZQUMvQixNQUFNLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO2dCQUNYLEtBQUssU0FBUztvQkFDVixNQUFNLENBQUMsU0FBUyxDQUFDLGFBQWEsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO29CQUM3QyxLQUFLLENBQUM7Z0JBQ1YsS0FBSyxTQUFTO29CQUNWLE1BQU0sQ0FBQyxTQUFTLENBQUMsYUFBYSxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7b0JBQzdDLEtBQUssQ0FBQztnQkFDVixLQUFLLE1BQU07b0JBQ1AsTUFBTSxDQUFDLFNBQVMsQ0FBQyxVQUFVLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztvQkFDMUMsS0FBSyxDQUFDO2dCQUNWLEtBQUssT0FBTztvQkFDUixNQUFNLENBQUMsU0FBUyxDQUFDLFdBQVcsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO29CQUMzQyxLQUFLLENBQUM7WUFDZCxDQUFDO1lBQ0QsTUFBTSxDQUFDLFNBQVMsQ0FBQyxVQUFVLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUMxQyxNQUFNLENBQUMsU0FBUyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQ3hDLFNBQVMsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDMUIsQ0FBQyxDQUFDLENBQUM7SUFDUCxDQUFDLENBQUM7SUFFRixRQUFRLENBQUMsaUNBQWlDLEVBQUUsR0FBRyxFQUFFO1FBQzdDLE1BQU0sTUFBTSxHQUFlLFVBQUksQ0FBQyxJQUFJLENBQUMsdUJBQVUsRUFBRSxjQUFjLENBQUMsQ0FBQztRQUNqRSxhQUFhLENBQUMsTUFBTSxFQUFFLFNBQVMsQ0FBQyxDQUFDO0lBQ3JDLENBQUMsQ0FBQyxDQUFDO0lBRUgsUUFBUSxDQUFDLGlDQUFpQyxFQUFFLEdBQUcsRUFBRTtRQUM3QyxNQUFNLE1BQU0sR0FBZSxVQUFJLENBQUMsSUFBSSxDQUFDLHVCQUFVLEVBQUUsY0FBYyxDQUFDLENBQUM7UUFDakUsYUFBYSxDQUFDLE1BQU0sRUFBRSxTQUFTLENBQUMsQ0FBQztJQUNyQyxDQUFDLENBQUMsQ0FBQztJQUVILFFBQVEsQ0FBQyw4QkFBOEIsRUFBRSxHQUFHLEVBQUU7UUFDMUMsTUFBTSxNQUFNLEdBQWUsVUFBSSxDQUFDLElBQUksQ0FBQyx1QkFBVSxFQUFFLFdBQVcsQ0FBQyxDQUFDO1FBQzlELGFBQWEsQ0FBQyxNQUFNLEVBQUUsTUFBTSxDQUFDLENBQUM7SUFDbEMsQ0FBQyxDQUFDLENBQUM7SUFFSCxRQUFRLENBQUMsK0JBQStCLEVBQUUsR0FBRyxFQUFFO1FBQzNDLE1BQU0sTUFBTSxHQUFlLFVBQUksQ0FBQyxJQUFJLENBQUMsdUJBQVUsRUFBRSxZQUFZLENBQUMsQ0FBQztRQUMvRCxhQUFhLENBQUMsTUFBTSxFQUFFLE9BQU8sQ0FBQyxDQUFDO0lBQ25DLENBQUMsQ0FBQyxDQUFDO0FBQ1AsQ0FBQyxDQUFDLENBQUMiLCJmaWxlIjoiY29tcG9uZW50cy90b2FzdC90b2FzdC5lMmUuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge3Byb21pc2V9IGZyb20gXCJAc29sYXJ3aW5kcy91emkvcHJvdHJhY3RvclwiO1xuaW1wb3J0IEhlbHBlcnMgZnJvbSBcIi4uL2hlbHBlcnNcIjtcbmltcG9ydCB7QXRvbX0gZnJvbSBcIkBzb2xhcndpbmRzL3V6aVwiO1xuaW1wb3J0IHtCdXR0b25BdG9tLCBUb2FzdEF0b219IGZyb20gXCIuLi9pbmRleC5hdG9tXCI7XG5cbmRlc2NyaWJlKFwiVVNFUkNPTlRST0wgdG9hc3RcIiwgKCkgPT4ge1xuICAgIGxldCB0b2FzdEF0b206IFRvYXN0QXRvbTtcbiAgICBiZWZvcmVBbGwoKCkgPT4ge1xuICAgICAgICBIZWxwZXJzLnByZXBhcmVCcm93c2VyKFwidG9hc3RcIik7XG4gICAgfSk7XG5cbiAgICBjb25zdCB2YWxpZGF0ZVRvYXN0ID0gKGJ1dHRvbjogQnV0dG9uQXRvbSwgdHlwZTogU3RyaW5nKSA9PiB7XG4gICAgICAgIGl0KGBzaG93cyB0b2FzdCB3aXRoIHR5cGUgb2YgJHt0eXBlfWAsICgpID0+IHtcbiAgICAgICAgICAgIHRvYXN0QXRvbSA9IFRvYXN0QXRvbS5nZXQoMCk7XG4gICAgICAgICAgICBidXR0b24uY2xpY2soKTtcblxuICAgICAgICAgICAgdG9hc3RBdG9tLndhaXRVbnRpbERpc3BsYXllZCgpO1xuICAgICAgICAgICAgc3dpdGNoICh0eXBlKSB7XG4gICAgICAgICAgICAgICAgY2FzZSBcInN1Y2Nlc3NcIjpcbiAgICAgICAgICAgICAgICAgICAgZXhwZWN0KHRvYXN0QXRvbS5pc1N1Y2Nlc3NUeXBlKCkpLnRvQmUodHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgXCJ3YXJuaW5nXCI6XG4gICAgICAgICAgICAgICAgICAgIGV4cGVjdCh0b2FzdEF0b20uaXNXYXJuaW5nVHlwZSgpKS50b0JlKHRydWUpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIFwiaW5mb1wiOlxuICAgICAgICAgICAgICAgICAgICBleHBlY3QodG9hc3RBdG9tLmlzSW5mb1R5cGUoKSkudG9CZSh0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSBcImVycm9yXCI6XG4gICAgICAgICAgICAgICAgICAgIGV4cGVjdCh0b2FzdEF0b20uaXNFcnJvclR5cGUoKSkudG9CZSh0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBleHBlY3QodG9hc3RBdG9tLmdldE1lc3NhZ2UoKSkudG9CZSh0eXBlKTtcbiAgICAgICAgICAgIGV4cGVjdCh0b2FzdEF0b20uZ2V0VGl0bGUoKSkudG9CZSh0eXBlKTtcbiAgICAgICAgICAgIHRvYXN0QXRvbS5jbG9zZSh0cnVlKTtcbiAgICAgICAgfSk7XG4gICAgfTtcblxuICAgIGRlc2NyaWJlKFwid2hlbiBTdWNjZXNzIHRvYXN0IGlzIGRpc3BsYXllZFwiLCAoKSA9PiB7XG4gICAgICAgIGNvbnN0IGJ1dHRvbjogQnV0dG9uQXRvbSA9IEF0b20uZmluZChCdXR0b25BdG9tLCBcInNob3ctc3VjY2Vzc1wiKTtcbiAgICAgICAgdmFsaWRhdGVUb2FzdChidXR0b24sIFwic3VjY2Vzc1wiKTtcbiAgICB9KTtcblxuICAgIGRlc2NyaWJlKFwid2hlbiBXYXJuaW5nIHRvYXN0IGlzIGRpc3BsYXllZFwiLCAoKSA9PiB7XG4gICAgICAgIGNvbnN0IGJ1dHRvbjogQnV0dG9uQXRvbSA9IEF0b20uZmluZChCdXR0b25BdG9tLCBcInNob3ctd2FybmluZ1wiKTtcbiAgICAgICAgdmFsaWRhdGVUb2FzdChidXR0b24sIFwid2FybmluZ1wiKTtcbiAgICB9KTtcblxuICAgIGRlc2NyaWJlKFwid2hlbiBJbmZvIHRvYXN0IGlzIGRpc3BsYXllZFwiLCAoKSA9PiB7XG4gICAgICAgIGNvbnN0IGJ1dHRvbjogQnV0dG9uQXRvbSA9IEF0b20uZmluZChCdXR0b25BdG9tLCBcInNob3ctaW5mb1wiKTtcbiAgICAgICAgdmFsaWRhdGVUb2FzdChidXR0b24sIFwiaW5mb1wiKTtcbiAgICB9KTtcblxuICAgIGRlc2NyaWJlKFwid2hlbiBFcnJvciB0b2FzdCBpcyBkaXNwbGF5ZWRcIiwgKCkgPT4ge1xuICAgICAgICBjb25zdCBidXR0b246IEJ1dHRvbkF0b20gPSBBdG9tLmZpbmQoQnV0dG9uQXRvbSwgXCJzaG93LWVycm9yXCIpO1xuICAgICAgICB2YWxpZGF0ZVRvYXN0KGJ1dHRvbiwgXCJlcnJvclwiKTtcbiAgICB9KTtcbn0pO1xuIl0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9
