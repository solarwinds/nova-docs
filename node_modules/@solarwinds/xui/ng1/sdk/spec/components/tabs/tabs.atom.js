"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const protractor_1 = require("@solarwinds/uzi/protractor");
const uzi_1 = require("@solarwinds/uzi");
class TabsAtom extends uzi_1.Atom {
    constructor() {
        super(...arguments);
        this.tabCount = () => {
            return this.tabs().count();
        };
        this.getTabTitle = (index) => {
            return this.tabs().get(index).element(protractor_1.by.css("a")).getText();
        };
        this.isTabSelected = (index) => {
            return this.tabs().get(index)
                .getAttribute("class")
                .then((css) => {
                return css.search("xui-tab") !== -1 && css.search("active") !== -1;
            });
        };
        this.getContent = (index) => {
            return super.getElement().all(protractor_1.by.css(".xui-tabs__content")).get(index);
        };
        this.getRouterView = () => {
            return super.getElement().element(protractor_1.by.css(".xui-tabs-router-view"));
        };
        this.click = (index) => {
            return this.tabs().get(index).click();
        };
        this.tabs = () => {
            return super.getElement().all(protractor_1.by.css(".nav.nav-pills li"));
        };
    }
    getLeftCaret() {
        return super.getElement().element(protractor_1.by.css(".xui-tabs__header-caret--left"));
    }
    getRightCaret() {
        return super.getElement().element(protractor_1.by.css(".xui-tabs__header-caret--right"));
    }
    getTabsSlidingPanel() {
        return super.getElement().element(protractor_1.by.css(".nav"));
    }
    getTranslateX(elem) {
        //expression for analyzing css transform property value, extracts translateX value
        const transXExp = /^matrix\((?:-?\d+, ){4}-?(\d+), -?\d+\)$/;
        return elem.getCssValue("transform").then((transform) => {
            if (transXExp.test(transform)) {
                return +transXExp.exec(transform)[1];
            }
            else {
                return 0;
            }
        });
    }
}
TabsAtom.CSS_CLASS = "xui-tabs";
exports.TabsAtom = TabsAtom;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbXBvbmVudHMvdGFicy90YWJzLmF0b20udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSwyREFBMEY7QUFDMUYseUNBQXFDO0FBRXJDLGNBQXNCLFNBQVEsVUFBSTtJQUFsQzs7UUFHVyxhQUFRLEdBQUcsR0FBNEIsRUFBRTtZQUM1QyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDO1FBQy9CLENBQUMsQ0FBQztRQUVLLGdCQUFXLEdBQUcsQ0FBQyxLQUFhLEVBQTJCLEVBQUU7WUFDNUQsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUMsT0FBTyxDQUFDLGVBQUUsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxPQUFPLEVBQUUsQ0FBQztRQUNqRSxDQUFDLENBQUM7UUFFSyxrQkFBYSxHQUFHLENBQUMsS0FBYSxFQUE0QixFQUFFO1lBQy9ELE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQztpQkFDeEIsWUFBWSxDQUFDLE9BQU8sQ0FBQztpQkFDckIsSUFBSSxDQUFDLENBQUMsR0FBVyxFQUFFLEVBQUU7Z0JBQ2xCLE1BQU0sQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxJQUFJLEdBQUcsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7WUFDdkUsQ0FBQyxDQUFDLENBQUM7UUFDWCxDQUFDLENBQUM7UUFFSyxlQUFVLEdBQUcsQ0FBQyxLQUFhLEVBQWlCLEVBQUU7WUFDakQsTUFBTSxDQUFDLEtBQUssQ0FBQyxVQUFVLEVBQUUsQ0FBQyxHQUFHLENBQUMsZUFBRSxDQUFDLEdBQUcsQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQzNFLENBQUMsQ0FBQztRQUVLLGtCQUFhLEdBQUcsR0FBa0IsRUFBRTtZQUN2QyxNQUFNLENBQUMsS0FBSyxDQUFDLFVBQVUsRUFBRSxDQUFDLE9BQU8sQ0FBQyxlQUFFLENBQUMsR0FBRyxDQUFDLHVCQUF1QixDQUFDLENBQUMsQ0FBQztRQUN2RSxDQUFDLENBQUM7UUFFSyxVQUFLLEdBQUcsQ0FBQyxLQUFhLEVBQXlCLEVBQUU7WUFDcEQsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUMsS0FBSyxFQUFFLENBQUM7UUFDMUMsQ0FBQyxDQUFDO1FBMkJNLFNBQUksR0FBRyxHQUF1QixFQUFFO1lBQ3BDLE1BQU0sQ0FBQyxLQUFLLENBQUMsVUFBVSxFQUFFLENBQUMsR0FBRyxDQUFDLGVBQUUsQ0FBQyxHQUFHLENBQUMsbUJBQW1CLENBQUMsQ0FBQyxDQUFDO1FBQy9ELENBQUMsQ0FBQztJQUNOLENBQUM7SUE1QlUsWUFBWTtRQUNmLE1BQU0sQ0FBQyxLQUFLLENBQUMsVUFBVSxFQUFFLENBQUMsT0FBTyxDQUFDLGVBQUUsQ0FBQyxHQUFHLENBQUMsK0JBQStCLENBQUMsQ0FBQyxDQUFDO0lBQy9FLENBQUM7SUFFTSxhQUFhO1FBQ2hCLE1BQU0sQ0FBQyxLQUFLLENBQUMsVUFBVSxFQUFFLENBQUMsT0FBTyxDQUFDLGVBQUUsQ0FBQyxHQUFHLENBQUMsZ0NBQWdDLENBQUMsQ0FBQyxDQUFDO0lBQ2hGLENBQUM7SUFFTSxtQkFBbUI7UUFDdEIsTUFBTSxDQUFDLEtBQUssQ0FBQyxVQUFVLEVBQUUsQ0FBQyxPQUFPLENBQUMsZUFBRSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO0lBQ3RELENBQUM7SUFFTSxhQUFhLENBQUMsSUFBbUI7UUFDcEMsa0ZBQWtGO1FBQ2xGLE1BQU0sU0FBUyxHQUFHLDBDQUEwQyxDQUFDO1FBRTdELE1BQU0sQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLFdBQVcsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLFNBQVMsRUFBRSxFQUFFO1lBQ3BELEVBQUUsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUM1QixNQUFNLENBQUMsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ3pDLENBQUM7WUFBQyxJQUFJLENBQUMsQ0FBQztnQkFDSixNQUFNLENBQUMsQ0FBQyxDQUFDO1lBQ2IsQ0FBQztRQUNMLENBQUMsQ0FBQyxDQUFDO0lBQ1AsQ0FBQzs7QUFyRGEsa0JBQVMsR0FBRyxVQUFVLENBQUM7QUFEekMsNEJBMkRDIiwiZmlsZSI6ImNvbXBvbmVudHMvdGFicy90YWJzLmF0b20uanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge2J5LCBFbGVtZW50QXJyYXlGaW5kZXIsIEVsZW1lbnRGaW5kZXIsIHByb21pc2V9IGZyb20gXCJAc29sYXJ3aW5kcy91emkvcHJvdHJhY3RvclwiO1xuaW1wb3J0IHtBdG9tfSBmcm9tIFwiQHNvbGFyd2luZHMvdXppXCI7XG5cbmV4cG9ydCBjbGFzcyBUYWJzQXRvbSBleHRlbmRzIEF0b20ge1xuICAgIHB1YmxpYyBzdGF0aWMgQ1NTX0NMQVNTID0gXCJ4dWktdGFic1wiO1xuXG4gICAgcHVibGljIHRhYkNvdW50ID0gKCk6IHByb21pc2UuUHJvbWlzZTxudW1iZXI+ID0+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMudGFicygpLmNvdW50KCk7XG4gICAgfTtcblxuICAgIHB1YmxpYyBnZXRUYWJUaXRsZSA9IChpbmRleDogbnVtYmVyKTogcHJvbWlzZS5Qcm9taXNlPHN0cmluZz4gPT4ge1xuICAgICAgICByZXR1cm4gdGhpcy50YWJzKCkuZ2V0KGluZGV4KS5lbGVtZW50KGJ5LmNzcyhcImFcIikpLmdldFRleHQoKTtcbiAgICB9O1xuXG4gICAgcHVibGljIGlzVGFiU2VsZWN0ZWQgPSAoaW5kZXg6IG51bWJlcik6IHByb21pc2UuUHJvbWlzZTxib29sZWFuPiA9PiB7XG4gICAgICAgIHJldHVybiB0aGlzLnRhYnMoKS5nZXQoaW5kZXgpXG4gICAgICAgICAgICAuZ2V0QXR0cmlidXRlKFwiY2xhc3NcIilcbiAgICAgICAgICAgIC50aGVuKChjc3M6IHN0cmluZykgPT4ge1xuICAgICAgICAgICAgICAgIHJldHVybiBjc3Muc2VhcmNoKFwieHVpLXRhYlwiKSAhPT0gLTEgJiYgY3NzLnNlYXJjaChcImFjdGl2ZVwiKSAhPT0gLTE7XG4gICAgICAgICAgICB9KTtcbiAgICB9O1xuXG4gICAgcHVibGljIGdldENvbnRlbnQgPSAoaW5kZXg6IG51bWJlcik6IEVsZW1lbnRGaW5kZXIgPT4ge1xuICAgICAgICByZXR1cm4gc3VwZXIuZ2V0RWxlbWVudCgpLmFsbChieS5jc3MoXCIueHVpLXRhYnNfX2NvbnRlbnRcIikpLmdldChpbmRleCk7XG4gICAgfTtcblxuICAgIHB1YmxpYyBnZXRSb3V0ZXJWaWV3ID0gKCk6IEVsZW1lbnRGaW5kZXIgPT4ge1xuICAgICAgICByZXR1cm4gc3VwZXIuZ2V0RWxlbWVudCgpLmVsZW1lbnQoYnkuY3NzKFwiLnh1aS10YWJzLXJvdXRlci12aWV3XCIpKTtcbiAgICB9O1xuXG4gICAgcHVibGljIGNsaWNrID0gKGluZGV4OiBudW1iZXIpOiBwcm9taXNlLlByb21pc2U8dm9pZD4gPT4ge1xuICAgICAgICByZXR1cm4gdGhpcy50YWJzKCkuZ2V0KGluZGV4KS5jbGljaygpO1xuICAgIH07XG5cbiAgICBwdWJsaWMgZ2V0TGVmdENhcmV0KCk6IEVsZW1lbnRGaW5kZXIge1xuICAgICAgICByZXR1cm4gc3VwZXIuZ2V0RWxlbWVudCgpLmVsZW1lbnQoYnkuY3NzKFwiLnh1aS10YWJzX19oZWFkZXItY2FyZXQtLWxlZnRcIikpO1xuICAgIH1cblxuICAgIHB1YmxpYyBnZXRSaWdodENhcmV0KCk6IEVsZW1lbnRGaW5kZXIge1xuICAgICAgICByZXR1cm4gc3VwZXIuZ2V0RWxlbWVudCgpLmVsZW1lbnQoYnkuY3NzKFwiLnh1aS10YWJzX19oZWFkZXItY2FyZXQtLXJpZ2h0XCIpKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0VGFic1NsaWRpbmdQYW5lbCgpOiBFbGVtZW50RmluZGVyIHtcbiAgICAgICAgcmV0dXJuIHN1cGVyLmdldEVsZW1lbnQoKS5lbGVtZW50KGJ5LmNzcyhcIi5uYXZcIikpO1xuICAgIH1cblxuICAgIHB1YmxpYyBnZXRUcmFuc2xhdGVYKGVsZW06IEVsZW1lbnRGaW5kZXIpOnByb21pc2UuUHJvbWlzZTxOdW1iZXI+IHtcbiAgICAgICAgLy9leHByZXNzaW9uIGZvciBhbmFseXppbmcgY3NzIHRyYW5zZm9ybSBwcm9wZXJ0eSB2YWx1ZSwgZXh0cmFjdHMgdHJhbnNsYXRlWCB2YWx1ZVxuICAgICAgICBjb25zdCB0cmFuc1hFeHAgPSAvXm1hdHJpeFxcKCg/Oi0/XFxkKywgKXs0fS0/KFxcZCspLCAtP1xcZCtcXCkkLztcblxuICAgICAgICByZXR1cm4gZWxlbS5nZXRDc3NWYWx1ZShcInRyYW5zZm9ybVwiKS50aGVuKCh0cmFuc2Zvcm0pID0+IHtcbiAgICAgICAgICAgIGlmICh0cmFuc1hFeHAudGVzdCh0cmFuc2Zvcm0pKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICt0cmFuc1hFeHAuZXhlYyh0cmFuc2Zvcm0pWzFdO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSB0YWJzID0gKCk6IEVsZW1lbnRBcnJheUZpbmRlciA9PiB7XG4gICAgICAgIHJldHVybiBzdXBlci5nZXRFbGVtZW50KCkuYWxsKGJ5LmNzcyhcIi5uYXYubmF2LXBpbGxzIGxpXCIpKTtcbiAgICB9O1xufVxuIl0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9
