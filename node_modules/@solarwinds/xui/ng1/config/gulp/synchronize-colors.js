"use strict";

const gulp = require("gulp");
const path = require("path");
const fs = require("fs");
const readline = require("readline");

gulp.task("synchronize-colors", () => {
    const paletteJsonPath = "../data/palette.json";
    const paletteLessPath = "src/styles/xui-framework-palette.less";
    let paletteToHexMapping = {};

    const colorsJsonPath = "../data/colors.json";
    const colorsLessPath = "src/styles/xui-framework-colors.less";
    let colorToPaletteMapping = {};

    // not @import and exclude lines with //unofficial
    const lessVariablesRe = /(^@(?!import)[^:]*)[:\s]*(.*[^;])[;](.*[^\w](unofficial*\b))*/i;
    //everything after 'SECTION:' and until ' */'
    const sectionNamesRe = /^\/.*(SECTION:)\s*(.*)(?:\s\*\/)/i;

    // Updating palette.json
    updateMapping(paletteToHexMapping, paletteLessPath)
        .on('close', () => {
        updateColorJson(paletteJsonPath, paletteToHexMapping);
    });

    // Updating colors.json
    updateMapping(colorToPaletteMapping, colorsLessPath)
        .on('close', () => {
        updateColorJson(colorsJsonPath, colorToPaletteMapping);
});


function updateMapping(mapping, lessFilePath) {
    return readline.createInterface({
            input: fs.createReadStream(lessFilePath)
        })
            .on('line', (line) => {
            lineHandler(line, mapping)
        }
)
}

function lineHandler(line, mapping) {
    let sectionMatcher = line.match(sectionNamesRe);
    if (sectionMatcher) {
        mapping[sectionMatcher[2]] = [];
    }

    let matcher = line.match(lessVariablesRe);
    let unofficial = matcher && matcher[4] && matcher[4] === 'unofficial';
    if (matcher && !unofficial) {
        let lessVariable = matcher[1];
        let lessValue = matcher[2];
        let section = Object.keys(mapping).pop();
        mapping[section][mapping[section].length] = {
            "color": lessVariable,
            "secondary": lessValue
        }
    }
}

function updateColorJson(jsonPath, mapping) {
    fs.writeFileSync(jsonPath, JSON.stringify(mapping, null, 4));
}

});
