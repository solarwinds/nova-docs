import {by, promise} from "@solarwinds/uzi/protractor";
import Helpers from "../helpers";
import {PageContentAtom} from "../index.atom";
import {Atom} from "@solarwinds/uzi";

describe("USERCONTROL pageContent", () => {
    let atom: PageContentAtom;
    let busyAtom: PageContentAtom;
    let negationAtom: PageContentAtom;
    let breadcrumbsAtom: PageContentAtom;

    beforeEach(() => {
        Helpers.prepareBrowser("pageContent");
        atom = Atom.find(PageContentAtom, "mockPageContentNoBusy");
        busyAtom = Atom.find(PageContentAtom, "mockPageContentBusy");
        negationAtom = Atom.find(PageContentAtom, "negationTest");
        breadcrumbsAtom = Atom.find(PageContentAtom, "mockBreadcrumbs");
    });

    const expectedTitle = "Ballad Of Serenity";
    const expectedLinkText = "what is Firefly?";
    const expectedBreadcrumbsText = "We > are > breadcrumbs";
    const expectedLinkTarget = "_blank";
    const expectedUrl = "https://en.wikipedia.org/wiki/Firefly_(TV_series)";

    it("should display title in the header", () => {
        expect(atom.getTitle()).toBe(expectedTitle);
    });

    it("should display the link text in the header", () => {
        expect(atom.getLinkText()).toBe(expectedLinkText);
    });

    it("should have link target", () => {
        expect(atom.getLinkTarget()).toBe(expectedLinkTarget);
    });

    it("should not have link target when unset", () => {
        expect(negationAtom.getLinkTarget()).toBe("");
    });

    it("should associate the url with the link text", () => {
        expect(atom.getLinkUrl()).toBe(expectedUrl);
    });

    it("should associate the 'help' link icon", () => {
        expect(atom.isIconDisplayed("help")).toBe(true);
        expect(atom.isIconDisplayed("notAnIcon")).toBe(false);
    });

    it("should not include a busy indicator", () => {
        expect(atom).toBeDefined();
        expect(atom.isBusyIndicatorDisplayed("mockPageContentNoBusy")).toBe(false);
    });

    it("should include a busy indicator with message", () => {
        expect(busyAtom).toBeDefined();
        expect(busyAtom.isBusyIndicatorDisplayed("mockPageContentBusy")).toBe(true);
        expect(busyAtom.getBusyMessage()).toBe("Loading...");
    });

    it("should use transcluded header when title is not specified", () => {
        expect(atom.isDefaultHeader()).toBe(true);
        expect(busyAtom.isDefaultHeader()).toBe(false);

        const transcludedHeader = busyAtom.getHeader();
        expect(transcludedHeader).toBeDefined();
        const title = transcludedHeader.element(by.id("busyBeeTitle"));
        expect(title).toBeDefined();
        expect(title.getText()).toBe("Busy Bee");
    });

    it("should show transcluded footer", () => {
        expect(atom.getFooter("fireflyFooter")).toBeDefined();
    });

    it("should show transcluded breadcrumbs", () => {
        const transcludedBreadcrumbs = breadcrumbsAtom.getBreadcrumbs();
        expect(transcludedBreadcrumbs).toBeDefined();
        const text = transcludedBreadcrumbs.element(by.id("breadcrumbsText"));
        expect(text).toBeDefined();
        expect(text.getText()).toBe(expectedBreadcrumbsText);
    });

    it("should apply scrollbars only when pageLayout=fill", () => {
        expect(atom.isBodyScrollable()).toBe(true);
        expect(busyAtom.isBodyScrollable()).toBe(false);
        const nonFillAtom = Atom.find(PageContentAtom, "negationTest");
        expect(nonFillAtom.isBodyScrollable()).toBe(false);
    });
});
