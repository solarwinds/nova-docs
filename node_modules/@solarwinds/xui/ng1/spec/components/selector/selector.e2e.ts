import {promise} from "@solarwinds/uzi/protractor";
import Helpers from "../helpers";
import {SelectorAtom} from "../index.atom";
import {Atom} from "@solarwinds/uzi";

describe("USERCONTROL Selector:", () => {
    let atom: SelectorAtom;

    beforeEach(() => {
        Helpers.prepareBrowser("selector");
        atom = Atom.find(SelectorAtom, "selectorTestTopLeft");
    });

    describe("when left (checkbox) button is clicked twice", () => {
        it("should check and uncheck ", () => {
            expect(atom).toBeDefined();
            expect(atom.isIndeterminate()).toBe(true);

            atom.getCheckboxButton().click();
            expect(atom.isChecked()).toBe(true);

            atom.getCheckboxButton().click();
            expect(atom.isChecked()).toBe(false);
        });
    });

    describe("when no button is clicked", () => {
        it("should not display elements list", () => {
            expect(atom).toBeDefined();

            expect(atom.getElementsList().isDisplayed()).toBe(false);
        });
    });

    describe("when is clicked,", ()=> {
        it("should run the callback", () => {
            expect(atom.isIndeterminate()).toBe(true);

            atom.getCheckboxButton().click();

            expect(atom.isIndeterminate()).toBe(false);
        });
    });

    describe("when right (dropdown) button is clicked", () => {
        it("should toggle elements list visibility", () => {
            expect(atom).toBeDefined();

            atom.getDropdownButton().click();

            expect(atom.getElementsList().isDisplayed()).toBe(true);

            atom.getDropdownButton().click();

            expect(atom.getElementsList().isDisplayed()).toBe(false);
        });
    });

    describe("when the selector is in the TOP LEFT position and an element of the list is clicked", () => {
        it("should trigger defined action in onItemsClick()", () => {
            // in this case we have set onItemsClick() to set vm.indeterminate to !vm.indeterminate
            expect(atom).toBeDefined();
            expect(atom.isIndeterminate()).toBe(true);

            atom.getDropdownButton().click();
            atom.getElementFromListByIndex(0).click();

            expect(atom.isIndeterminate()).toBe(false);

            atom.getDropdownButton().click();
            atom.getElementFromListByIndex(2).click();

            expect(atom.isIndeterminate()).toBe(true);

        });
    });

    describe("when the selector is in the TOP RIGHT position and an element of the list is clicked", () => {
        it("should trigger defined action in onItemsClick()", () => {
            // in this case we have set onItemsClick() to set vm.indeterminate to !vm.indeterminate
            atom = Atom.find(SelectorAtom, "selectorTestTopRight");
            expect(atom).toBeDefined();
            expect(atom.isIndeterminate()).toBe(true);

            atom.getDropdownButton().click();
            atom.getElementFromListByIndex(0).click();

            expect(atom.isIndeterminate()).toBe(false);

            atom.getDropdownButton().click();
            atom.getElementFromListByIndex(2).click();

            expect(atom.isIndeterminate()).toBe(true);

        });
    });

    describe("when the selector is in the BOTTOM LEFT position and an element of the list is clicked", () => {
        it("should trigger defined action in onItemsClick()", () => {
            // in this case we have set onItemsClick() to set vm.indeterminate to !vm.indeterminate
            atom = Atom.find(SelectorAtom, "selectorTestBottomLeft");
            expect(atom).toBeDefined();
            expect(atom.isIndeterminate()).toBe(true);

            atom.getDropdownButton().click();
            atom.getElementFromListByIndex(0).click();

            expect(atom.isIndeterminate()).toBe(false);

            atom.getDropdownButton().click();
            atom.getElementFromListByIndex(2).click();

            expect(atom.isIndeterminate()).toBe(true);

        });
    });

    describe("when the selector is in the BOTTOM RIGHT position and an element of the list is clicked", () => {
        it("should trigger defined action in onItemsClick()", () => {
            // in this case we have set onItemsClick() to set vm.indeterminate to !vm.indeterminate
            atom = Atom.find(SelectorAtom, "selectorTestBottomRight");
            expect(atom).toBeDefined();
            expect(atom.isIndeterminate()).toBe(true);

            atom.getDropdownButton().click();
            atom.getElementFromListByIndex(0).click();

            expect(atom.isIndeterminate()).toBe(false);

            atom.getDropdownButton().click();
            atom.getElementFromListByIndex(2).click();

            expect(atom.isIndeterminate()).toBe(true);

        });
    });
});
