import * as protractor from "@solarwinds/uzi/protractor";
import {by, element, promise} from "@solarwinds/uzi/protractor";
import Helpers from "../helpers";
import {DatetimePickerAtom} from "../index.atom";
import {Atom} from "@solarwinds/uzi";

describe("USERCONTROL DatetimePicker >", () => {
    let datetimePicker: DatetimePickerAtom;

    function getModelValue() {
        return element(by.id("model-value")).getText();
    }

    beforeEach(() => {
        Helpers.prepareBrowser("datetimePicker");

        datetimePicker = Atom.findIn(DatetimePickerAtom, element(by.id("datetime-picker")));
    });

    describe("when the datetime picker is displayed, it", ()=> {
        it("contains initial value", ()=> {
            expect(datetimePicker.getDatePicker().getInputValue()).toEqual("3/15/1970");
            expect(datetimePicker.getTimePicker().getInputValue()).toEqual("3:30 pm");
        });
    });

    describe("when a valid date is entered, it", ()=> {
        it("propagates the value to model", ()=> {
            datetimePicker.getDatePicker().clearText();
            datetimePicker.getDatePicker().acceptKeys("28-May-1984", protractor.Key.ESCAPE);
            expect(getModelValue()).toBe("1984-05-28 15:30");
        });
    });

    describe("when a valid time is entered, it", ()=> {
        it("propagates the value to model", ()=> {
            datetimePicker.getTimePicker().clearText();
            datetimePicker.getTimePicker().acceptText("9:00 am");
            expect(getModelValue()).toBe("1970-03-15 09:00");
        });
    });

    describe("when a invalid date is entered, it", ()=> {
        it("clears the model", ()=> {
            datetimePicker.getDatePicker().clearText();
            datetimePicker.getDatePicker().acceptKeys("bs bs bs", protractor.Key.ESCAPE);
            expect(getModelValue()).toBe("");
        });
    });

    describe("when a invalid time is entered, it", ()=> {
        it("clears the model", ()=> {
            datetimePicker.getTimePicker().clearText();
            datetimePicker.getTimePicker().acceptText("bs bs bs");
            expect(getModelValue()).toBe("");
        });
    });

});
