import {browser, by, element, promise} from "@solarwinds/uzi/protractor";
import Helpers from "../helpers";
import {Atom} from "@solarwinds/uzi";
import {ButtonAtom, TabsAtom} from "../index.atom";

describe("USERCONTROL tabs router", () => {
    let tabs: TabsAtom;

    beforeEach(() => {
        Helpers.prepareBrowser("tabsRouter");
        tabs = Atom.find(TabsAtom, "mockTabs");
    });

    it("automatically gets redirected to first tab", () => {
        expect(tabs.isTabSelected(0)).toBe(true);
        expect(browser.getCurrentUrl()).toMatch("tabsRouter/first");
        expect(tabs.getRouterView().getText()).toMatch("first template content");
    });

    it("should be redirected after clicking on second tab", () => {
        expect(tabs.isTabSelected(1)).toBe(false);
        tabs.click(1);
        expect(tabs.isTabSelected(1)).toBe(true);
        expect(browser.getCurrentUrl()).toMatch("tabsRouter/second");
    });

    it("should be redirected after clicking on third tab with custom params", () => {
        expect(tabs.isTabSelected(2)).toBe(false);
        tabs.click(2);
        browser.waitForAngular();
        expect(tabs.isTabSelected(2)).toBe(true);
        expect(browser.getCurrentUrl()).toMatch("tabsRouter/third/myValue");
    });

    it("should be redirected after clicking on third tab with custom params being changed through input", () => {
        const input = element(by.id("param1Input"));
        input.clear().then(() => input.sendKeys("mySuperNewValue"));
        tabs.click(2);
        expect(tabs.isTabSelected(2)).toBe(true);
        expect(browser.getCurrentUrl()).toMatch("tabsRouter/third/mySuperNewValue");
    });

    describe("when state is changed externally, it", ()=> {
        it("changes the selected tab", ()=> {
            expect(tabs.isTabSelected(0)).toBe(true);
            expect(tabs.isTabSelected(1)).toBe(false);

            const changeStateButton = Atom.findIn(ButtonAtom, element(by.id("change-state-button")));
            changeStateButton.click();

            expect(browser.getCurrentUrl()).toMatch("tabsRouter/second");
            expect(tabs.isTabSelected(0)).toBe(false);
            expect(tabs.isTabSelected(1)).toBe(true);
        });
    });
});
