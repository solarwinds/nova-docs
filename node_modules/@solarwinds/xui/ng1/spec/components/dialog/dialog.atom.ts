import {browser, by, ElementArrayFinder, ElementFinder, promise} from "@solarwinds/uzi/protractor";
import {Atom} from "@solarwinds/uzi";
import {ProgressAtom} from "../index.atom";

export class DialogAtom extends Atom {
    public static CSS_CLASS = "xui-dialog";

    public static get = (): DialogAtom => {
        const dialogEl = browser.element(by.css("body .xui-modal-top .xui-dialog"));
        return new DialogAtom(dialogEl);
    };

    public static waitUntilHidden = () => {
        return browser.wait(() => {
            const element = browser.element(by.css("body .xui-modal-top .xui-dialog"));
            return element.isPresent().then((isPresent) => !isPresent);
        });
    };

    public static isPresent = (): promise.Promise<boolean> => {
        const element = browser.element(by.css("body .xui-modal-top .xui-dialog"));
        return element.isPresent();
    };

    public getHeader = (): ElementFinder => {
        return super.getElement().element(by.className("modal-header"));
    };

    public getHeaderClose = (): ElementFinder => {
        return super.getElement().element(by.className("xui-icon-close"));
    };

    public getTitle = (): promise.Promise<string> => {
        return super.getElement().element(by.className("modal-title")).getText();
    };

    public isWarningStatusIconPresent = (): promise.Promise<boolean> => {
        return super.getElement()
            .element(by.className("xui-icon-status_warning"))
            .isPresent();
    };

    public isErrorStatusIconPresent = (): promise.Promise<boolean> => {
        return super.getElement()
            .element(by.className("xui-icon-status_critical"))
            .isPresent();
    };

    public isStatusIconPresent = (): promise.Promise<boolean> => {
        return this.isWarningStatusIconPresent().then((isWarningIconPresent: boolean) => {
            return isWarningIconPresent ? <any>true : this.isErrorStatusIconPresent();
        });
    };

    public getBody = (): ElementFinder => {
        return super.getElement().element(by.className("modal-body"));
    };

    public getMessage = () => {
        return this.getBody()
            .all(by.tagName("p"))
            .get(0)
            .getText();
    };

    public getTranscludedContent = (): ElementFinder => {
        return this.getBody().all(by.css("[ng-transclude]")).get(0);
    };

    public getContent = (id: string): ElementFinder => {
        return this.getTranscludedContent().element(by.id(id));
    };

    public getFooterButtons = (): ElementArrayFinder => {
        return super.getElement()
            .element(by.className("modal-footer"))
            .all(by.className("xui-button"));
    };

    public getFooter= (): ElementFinder => {
        return super.getElement()
            .element(by.className("modal-footer"));
    };

    public getVisibleFooterButtons = (): ElementArrayFinder => {
        return this.getFooterButtons().filter((button: ElementFinder) => {
            return button.isDisplayed();
        });
    };

    public getVisibleFooterButton = (buttonText: string): ElementFinder => {
        return this.getVisibleFooterButtons().filter((button: ElementFinder) => {
            return button.getText().then((text: string) => {
                return buttonText.toLowerCase() === text.toLowerCase();
            });
        }).first();
    };

    public footerButtonCount = (): promise.Promise<number> => {
        return this.getVisibleFooterButtons().count();
    };

    public clickFooterButton = (buttonText: string) => {
        const button = this.getVisibleFooterButton(buttonText);
        if (button) {
            return button.click();
        }
    };

    public isBusyOverlayDisplayed = (): promise.Promise<boolean> => {
        return Atom.findIn(ProgressAtom, undefined, 0).isDisplayed();
    };

    public cancelBusy = (): promise.Promise<void> => {
        return Atom.findIn(ProgressAtom, undefined, 0).cancelProgress();
    };

    public isBusyOverlayHidden = (): promise.Promise<boolean> => {
        return Atom.findIn(ProgressAtom, undefined, 0)
            .isDisplayed()
            .then((isDisplayed: boolean) => {
                return !isDisplayed;
            });
    };

    public isFooterBtnHasClass = (buttonIndex: number, className: string): promise.Promise<boolean> => {
        return this.getVisibleFooterButtons().get(buttonIndex).getAttribute("class").then( (classes) => {
            return classes.includes(className);
        });
    };

    public isFooterBtnIconHasClass = (buttonIndex: number, className: string): promise.Promise<boolean> => {
        return this.getVisibleFooterButtons().get(buttonIndex).element(by.css("i")).getAttribute("class")
            .then( (classes) => {
                return classes.includes(className);
            });
    };
}
