import {browser, by, element, ElementFinder, promise} from "@solarwinds/uzi/protractor";
import Helpers from "../helpers";
import {ButtonAtom, DialogAtom} from "../index.atom";
import {Atom} from "@solarwinds/uzi";

describe("USERCONTROL dialog", () => {
    let pageContainer: ElementFinder;

    beforeEach(() => {
        Helpers.prepareBrowser("dialog");
        pageContainer = element(by.id("xui-demo-components-dialog"));
    });

    let showDialog = (buttonIndex: number) => {
        const buttonAtom = Atom.findIn(ButtonAtom, pageContainer, buttonIndex);
        buttonAtom.click();
    };

    let showMessageDialog = () => {
        showDialog(0);
    };

    let showWarningDialog = () => {
        showDialog(1);
    };

    let showErrorDialog = () => {
        showDialog(2);
    };

    let showCustomDialog = () => {
        showDialog(3);
    };

    let showDialogWithTemplate = () => {
        showDialog(4);
    };

    let showCustomFooterDialog = () => {
        showDialog(5);
    };

    let showDialogWithBtnIcons = () => {
        showDialog(6);
    };

    it("should appear when showModal is invoked", () => {
        expect(DialogAtom.isPresent()).toBe(false);
        showMessageDialog();
        expect(DialogAtom.isPresent()).toBe(true);
        const dialogAtom = DialogAtom.get();
        expect(dialogAtom).toBeDefined();
    });

    it("should display message dialog on button-click with correct title", () => {
        showMessageDialog();
        const dialogAtom = DialogAtom.get();
        expect(dialogAtom.getTitle()).toBe("Gothos");
        expect(dialogAtom.getMessage()).toBe("Greetings and Felicitations!");
    });

    it("should display an OK button in the footer which closes the dialog", () => {
        expect(DialogAtom.isPresent()).toBe(false);
        showMessageDialog();
        expect(DialogAtom.isPresent()).toBe(true);
        const dialogAtom = DialogAtom.get();
        expect(dialogAtom.footerButtonCount()).toBe(1);
        dialogAtom.clickFooterButton("OK");
        DialogAtom.waitUntilHidden();
        expect(DialogAtom.isPresent()).toBe(false);
    });

    it("should close when the closeX is clicked", () => {
        expect(DialogAtom.isPresent()).toBe(false);
        showMessageDialog();
        expect(DialogAtom.isPresent()).toBe(true);
        const dialogAtom = DialogAtom.get();
        const closeXButton = Atom.findIn(ButtonAtom, dialogAtom.getHeader());
        expect(closeXButton).toBeDefined();
        closeXButton.click();
        DialogAtom.waitUntilHidden();
        expect(DialogAtom.isPresent()).toBe(false);
    });

    it("should not include a status icon", () => {
        showMessageDialog();
        const dialogAtom = DialogAtom.get();
        expect(dialogAtom.isStatusIconPresent()).toBe(false);
    });

    it("should include warning icon in title", () => {
        showWarningDialog();
        const dialogAtom = DialogAtom.get();
        expect(dialogAtom.isStatusIconPresent()).toBe(true);
        expect(dialogAtom.isWarningStatusIconPresent()).toBe(true);
        expect(dialogAtom.isErrorStatusIconPresent()).toBe(false);
    });

    it("should include error icon in title", () => {
        showErrorDialog();
        const dialogAtom = DialogAtom.get();
        expect(dialogAtom.isStatusIconPresent()).toBe(true);
        expect(dialogAtom.isErrorStatusIconPresent()).toBe(true);
        expect(dialogAtom.isWarningStatusIconPresent()).toBe(false);
    });

    it("should include CLOSE footer-button for status dialogs", () => {
        showWarningDialog();
        expect(DialogAtom.isPresent()).toBe(true);
        let dialogAtom = DialogAtom.get();
        dialogAtom.clickFooterButton("CLOSE");
        DialogAtom.waitUntilHidden();
        expect(DialogAtom.isPresent()).toBe(false);

        showErrorDialog();
        expect(DialogAtom.isPresent()).toBe(true);
        dialogAtom = DialogAtom.get();
        dialogAtom.clickFooterButton("CLOSE");
        DialogAtom.waitUntilHidden();
        expect(DialogAtom.isPresent()).toBe(false);
    });

    it("should include optional action footer-button for warning dialogs", () => {
        showWarningDialog();
        expect(DialogAtom.isPresent()).toBe(true);
        let dialogAtom = DialogAtom.get();
        dialogAtom.clickFooterButton("PROCEED");
        DialogAtom.waitUntilHidden();
        expect(DialogAtom.isPresent()).toBe(false);
    });

    it("should include START and CLOSE footer-buttons for custom dialog", () => {
        showCustomDialog();
        expect(DialogAtom.isPresent()).toBe(true);
        let dialogAtom = DialogAtom.get();
        expect(dialogAtom.getVisibleFooterButton("START")).toBeDefined();
        expect(dialogAtom.getVisibleFooterButton("CLOSE")).toBeDefined();
    });

    it("should include START and CLOSE footer-buttons for custom dialog", () => {
        showCustomDialog();
        expect(DialogAtom.isPresent()).toBe(true);
        let dialogAtom = DialogAtom.get();
        expect(dialogAtom.getVisibleFooterButton("START")).toBeDefined();
        expect(dialogAtom.getVisibleFooterButton("CLOSE")).toBeDefined();
    });

    it("should disable footer buttons while busy", () => {
        showCustomDialog();
        let dialogAtom = DialogAtom.get();
        expect(dialogAtom.isBusyOverlayDisplayed()).toBe(false);
        const startButton = new ButtonAtom(dialogAtom.getVisibleFooterButton("START"));
        expect(startButton).toBeDefined();
        expect(startButton.isDisabled()).toBe(false);
        const closeButton = new ButtonAtom(dialogAtom.getVisibleFooterButton("CLOSE"));
        expect(closeButton).toBeDefined();
        expect(closeButton.isDisabled()).toBe(false);
        startButton.click();
        // allow dialog action promise to resolve so that we can
        // test busy state while it's actually busy
        browser.ignoreSynchronization = true;
        browser.wait(() => dialogAtom.isBusyOverlayDisplayed());
        expect(dialogAtom.isBusyOverlayDisplayed()).toBe(true);
        expect(startButton.isDisabled()).toBe(true);
        expect(closeButton.isDisabled()).toBe(true);
        dialogAtom.cancelBusy();
        browser.ignoreSynchronization = false;
    });

    it("should close the dialog when busy canceled is clicked", () => {
        showCustomDialog();
        let dialogAtom = DialogAtom.get();
        const startButton = new ButtonAtom(dialogAtom.getVisibleFooterButton("START"));
        startButton.click();
        // allow dialog action promise to resolve so that we can
        // test busy state while it's actually busy
        browser.ignoreSynchronization = true;
        browser.wait(() => dialogAtom.isBusyOverlayDisplayed());
        expect(dialogAtom.isBusyOverlayDisplayed()).toBe(true);
        dialogAtom.cancelBusy();
        browser.ignoreSynchronization = false;
        DialogAtom.waitUntilHidden();
        expect(DialogAtom.isPresent()).toBe(false);
    });

    it("should handle nested dialogs", () => {
        showDialogWithTemplate();
        let dialogAtom = DialogAtom.get();

        const launchButton = Atom.findIn(ButtonAtom, dialogAtom.getBody(), 0);
        launchButton.click();

        //second dialog should be open at this point- the atom should automatically refocus to it
        expect(dialogAtom.isBusyOverlayDisplayed()).toBe(false);
        expect(dialogAtom.getVisibleFooterButton("START")).toBeDefined();
        dialogAtom.clickFooterButton("START");
        // allow dialog action promise to resolve so that we can
        // test busy state while it's actually busy
        browser.ignoreSynchronization = true;
        browser.wait(() => dialogAtom.isBusyOverlayDisplayed());
        expect(dialogAtom.isBusyOverlayDisplayed()).toBe(true);
        dialogAtom.cancelBusy();
        browser.ignoreSynchronization = false;
    });

    it("should transclude custom dialog templates", () => {
        showDialogWithTemplate();
        let dialogAtom = DialogAtom.get();
        expect(dialogAtom.getContent("xui-demo-components-dialog").isDisplayed()).toBe(true);
    });

    it("should hide top close button", () => {
        showCustomDialog();
        let dialogAtom = DialogAtom.get();
        expect(dialogAtom.getHeaderClose().isPresent()).toBeFalsy();
    });

    it("should show top close button", () => {
        showDialogWithTemplate();
        let dialogAtom = DialogAtom.get();
        expect(dialogAtom.getHeaderClose().isPresent()).toBeTruthy();
    });

    it("should show dialog with text message instead of buttons", () => {
        showCustomFooterDialog();
        let dialogAtom = DialogAtom.get();
        expect(dialogAtom.getVisibleFooterButtons().count()).toBe(0);
        expect(dialogAtom.getFooter().getText()).toContain("buttons");
    });

    it("should show dialog with specified icons on footer buttons and align them properly", () => {
        showDialogWithBtnIcons();
        let dialogAtom = DialogAtom.get();
        expect(dialogAtom.isFooterBtnHasClass(0, "icon-right")).toBeTruthy();
        expect(dialogAtom.isFooterBtnIconHasClass(0, "xui-icon-state_running")).toBeTruthy();
    });
});
