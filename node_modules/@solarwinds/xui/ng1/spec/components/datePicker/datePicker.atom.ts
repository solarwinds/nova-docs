import {by, ElementFinder, promise} from "@solarwinds/uzi/protractor";
import {Atom} from "@solarwinds/uzi";

/**
 * Lukas: WARNING FOR TRESPASSERS
 *
 * For anyone who's going to touch datepicker e2e tests - this atom doesn't have proper API for simply setting date
 * value to the field ... something like setValue(date:Date), or setValue(int year, int month, int day) would be
 * really nice to have, because the users don't want to mess with internal structure of the datepicker component.
 * Current API is more likely for internal testing only.
 */

export class DatePickerAtom extends Atom {
    public static CSS_CLASS = "xui-datepicker";

    public static MONTHNAMES_SHORT: string[] = ["Jan", "Feb", "Mar", "Apr", "May", "Jun",
        "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"];
    public static MONTHNAMES_LONG: string[] = ["January", "February", "March", "April", "May", "June",
        "July", "August", "September", "October", "November", "December"];

    public static ACCEPTED_DATES: string[] = [
        "10-1-1988",
        "11-02-88",
        "1999-Feb-5",
        "2000-5-15",
        "99-5-25",
        "88-Nov-5",
        "4-12-2000",
        "6-Apr-1999",
        "7-10-99",
        "1-Oct-82",

        "10/1/1988",
        "11/02/88",
        "1999/Feb/5",
        "2000/5/15",
        "99/5/25",
        "88/Nov/5",
        "4/12/2000",
        "6/Apr/1999",
        "7/10/99",
        "1/Oct/82",

        "10 1 1988",
        "01 02 88",
        "1999 Feb 5",
        "2000 5 15",
        "99 5 25",
        "88 Nov 5",
        "4 12 2000",
        "6 Apr 1999",
        "7 10 99",
        "1 Oct 82",

        "10.1.1988",
        "01.02.88",
        "1999.Feb.5",
        "2000.5.15",
        "99.5.25",
        "88.Nov.5",
        "4.12.2000",
        "6.Apr.1999",
        "7.10.99",
        "1.Oct.82"
    ];

    public clickTitle(): promise.Promise<void> {
        let title = this.getElementByCss("button[id*='title']");
        return title.click();
    }

    public getPopup() {
        return this.getElementByCss(".dropdown-menu");
    }

    public clickCalendarIcon(): promise.Promise<void> {
        let icon = this.getElementByCss(".xui-datepicker__icon");
        return icon.click();
    }

    public isOpened() {
        return this.getElement().element(by.className("uib-datepicker-popup")).isPresent();
    }

    public clickInput(): promise.Promise<void> {
        let icon = this.getElementByCss(".form-control");
        return icon.click();
    }

    public clickToday(): promise.Promise<void> {
        return this.clickButton("Today");
    }

    public formatDate(date: Date): string {
        return date.toLocaleDateString("en-US");
    }

    public getInput(): ElementFinder {
        return this.getElement().element(by.css(".form-control"));
    }

    public getInputValue(): promise.Promise<string> {
        return this.getElementValue(".form-control");
    }

    public acceptText(value: string): promise.Promise<void> {
        return this.acceptKeys(value);
    }

    public acceptKeys(...keys: any[]): promise.Promise<void> {
        return this.getInput().sendKeys(...keys);
    }

    public clearText(): promise.Promise<void> {
        return this.getInput().clear();
    }

    public getTitle(): promise.Promise<string> {
        return this.getElementText("button[id*='title']");
    }

    public getNextTitle(): string {
        let newTitle: string;
        let nextTitle: any = this.getTitle().then(function (currentTitle) {
            if (currentTitle.length === 4) {
                let coef: number = Math.floor((parseInt(currentTitle, 10) - 2000) / 20);
                let rangeStart: number = 2000 + 20 * coef + 1;
                let rangeEnd: number = rangeStart + 20 - 1;
                newTitle = rangeStart + " - " + rangeEnd;
            } else {
                newTitle = currentTitle.substring(currentTitle.length - 4);
            }
            return newTitle;
        });
        return nextTitle;
    }

    public goNext(): promise.Promise<void> {
        return this.clickElement(".btn.uib-right");
    }

    public goBack(): promise.Promise<void> {
        return this.clickElement(".btn.uib-left");
    }

    public selectDay(day: number, index?: number) {
        return this.clickButton(day.toString(), index);
    }

    public selectMonth(month: string, index?: number) {
        return this.clickButton(month, index);
    }

    public selectYear(year: string, index?: number) {
        return this.clickButton(year, index);
    }

    public getYearElement(year: string, index?: number) {
        return this.selectButton(year, index);
    }

    public getMonthElement(month: string, index?: number) {
        return this.selectButton(month, index);
    }

    public getActiveDay() {
        return this.getElementText(".btn.btn-info.active");
    }

    public isValid(): promise.Promise<boolean> {
        return this.getInput().getAttribute("class").then((result: any) => {
            return result.split(/ +/).indexOf("ng-invalid") === -1;
        });
    }

    public getElementTest(className: string) {
        return this.getElementByCss(className);
    }

    // private helpers

    private getClassValueByCss(title: string) {
        return this.getElementByCss(title).getAttribute("class");
    }

    private getClassValueByButtonText(title: string, index: number) {
        return this.selectButton(title, index).getAttribute("class");
    }

    private clickButton(buttonTitle: string, index: number = 0) {
        let button = super.getElement().all(by.buttonText(buttonTitle)).get(index);
        return button.click();
    }

    private getElementValue(identifier: string, deep?: boolean) {
        return this.getElementByCss(identifier, deep).getAttribute("value");
    }

    private getElementText(identifier: string, deep?: boolean) {
        return this.getElementByCss(identifier, deep).getText();
    }

    private clickElement(identifier: string): promise.Promise<void> {
        return this.getElementByCss(identifier).click();
    }

    private getElementByCss(identifier: string, deep?: boolean) {
        //if deep is passed then look in shadow DOM
        if (deep) {
            return super.getElement().element(by.css("* /deep/ " + identifier));
        } else {
            return super.getElement().element(by.css(identifier));
        }
    }

    private selectButton(identifier: string, index: number = 0) {
        return super.getElement().all(by.buttonText(identifier)).get(index);
    }

}
