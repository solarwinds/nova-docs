import * as protractor from "@solarwinds/uzi/protractor";
import {browser, by, element, promise} from "@solarwinds/uzi/protractor";
import Helpers from "../helpers";
import {ButtonAtom} from "../index.atom";
import {Atom} from "@solarwinds/uzi";

describe("USERCONTROL Button", () => {
    let button: any;
    let primaryButton: ButtonAtom;
    let secondaryButton: ButtonAtom;
    let tertiaryButton: ButtonAtom;
    let linkButton: ButtonAtom;
    let repeatButton: ButtonAtom;
    let withoutRepeatButton: ButtonAtom;
    let withTextButton: ButtonAtom;
    let withIconAndTextButton: ButtonAtom;

    beforeEach(() => {
        Helpers.prepareBrowser("button");
        primaryButton = Atom.findIn(ButtonAtom, element(by.id("primaryButton")));
        secondaryButton = Atom.findIn(ButtonAtom, element(by.id("secondaryButton")));
        tertiaryButton = Atom.findIn(ButtonAtom, element(by.id("tertiaryButton")));
        linkButton = Atom.findIn(ButtonAtom, element(by.id("linkButton")));
        repeatButton = Atom.findIn(ButtonAtom, element(by.id("repeatButton")));
        withoutRepeatButton = Atom.findIn(ButtonAtom, element(by.id("withoutRepeatButton")));
        withTextButton = Atom.findIn(ButtonAtom, element(by.id("withTextButton")));
        withIconAndTextButton = Atom.findIn(ButtonAtom, element(by.id("withIconAndTextButton")));
    });

    /*
     on e2e testing page will be:
     * one primary button disabled
     * one secondary button with icon showed
     * one tertiary button  with busy state

     On each button verify the correct color, background, border,
     font, if it is disabled, if it has icon
     and if busy state working
     */
    // primary button
    it("should be primary button disabled", () => {
        expect(primaryButton.isDisabled()).toBe(true);
        expect(primaryButton.hasClass("btn-primary")).toBe(true);
    });

    // secondary button
    it("should be secondary button with icon showed", () => {
        expect(secondaryButton.isIconShown()).toBe(true);
        expect(secondaryButton.hasClass("btn-secondary")).toBe(true);
    });

    // tertiary button
    it("should be tertiary button with busy state", () => {
        expect(tertiaryButton.isBusy()).toBe(true);
        expect(tertiaryButton.hasClass("xui-btn-tertiary")).toBe(true);
    });

    it("should be link button", () => {
        expect(linkButton.hasClass("xui-btn-link")).toBe(true);
    });

    it("button should accept keyboard events", () => {
        const resultSpan = element(by.id("clickResults"));
        const btn = element(by.css("#secondaryButton button"));
        btn.click(); //one click sets focus, adds X
        btn.sendKeys(protractor.Key.ENTER); //should add one X
        expect(resultSpan.getText()).toBe("XX");
    });

    it("clicking twice should fire event twice", () => {
        const resultSpan = element(by.id("clickResults"));
        expect(resultSpan.getText()).toBe("");
        secondaryButton.click();
        secondaryButton.click();
        expect(resultSpan.getText()).toBe("XX");
    });

    it("clicking disabled button should throw", () => {
        const resultSpan = element(by.id("clickResults"));
        //webdriver does not allow clicking on disabled elements, so we have to use js
        browser.executeScript("document.querySelector(\"button[is-disabled=true]\").click()");
        expect(resultSpan.getText()).toBe("");
    });

    it("icon should not display by default", () => {
        primaryButton.getIcon().then((icon) => {
            expect(icon).toBeUndefined();
        });
    });

    it("icon should display when configured", () => {
        secondaryButton.getIcon().then((icon) => {
            expect(icon.getSize()).toBe("default");
        });
    });

    it("count should keep increasing when mousedown", () => {
        const resultSpan = element(by.id("repeatValue"));
        repeatButton.mouseClickHold();
        expect(resultSpan.getText()).toBeGreaterThan(155);

    });

    it("count should increase by 1 when clicked", () => {
        const resultSpan = element(by.id("withoutRepeatValue"));
        withoutRepeatButton.mouseClickHold();
        expect(resultSpan.getText()).toBe("151");

    });

    it("button with text should has valid text", () => {
        const expectedText = "TEST BUTTON";

        const buttonText = withTextButton.getText().then((text) => {
            expect(text).toBe(expectedText);
        });
    });

    it("button with icon and text should has valid text", () => {
        const expectedText = "BUTTON WITH ICON";

        const buttonText = withIconAndTextButton.getText().then((text) => {
            expect(text).toBe(expectedText);
        });
    });
});
