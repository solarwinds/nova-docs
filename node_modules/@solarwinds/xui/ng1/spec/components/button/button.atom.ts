import {browser, by, promise} from "@solarwinds/uzi/protractor";
import {Atom} from "@solarwinds/uzi";
import {IconAtom} from "../index.atom";

export class ButtonAtom extends Atom {
    public static CSS_CLASS = "xui-button";

    public click() {
        return super.getElement().click();
    }

    public isVisible() {
        return super.getElement().isDisplayed();
    }

    public isDisabled() {
        return super.getElement().isEnabled().then((value: boolean) => {
            return !value;
        });
    }

    public isIconShown() {
        const icons = super.getElement().all(by.className("xui-icon"));
        return icons.count().then((count) => {
            return count > 0;
        });
    }

    public isBusy() {
        return super.getElement().getAttribute("is-busy").then((attribute) => {
            /* tslint:disable:triple-equals */
            //we want type coercion here
            return (attribute == "true");
        });
    }

    public getTextColor() {
        return super.getElement().getCssValue("color");
    }

    public getBackgroundColor() {
        return super.getElement().getCssValue("background-color");
    }

    public getBorderStyle() {
        return super.getElement().getCssValue("border-color");
    }

    public getIcon() {
        return this.isIconShown().then((isShown) => {
            if (isShown) {
                return new IconAtom(super.getElement().all(by.className("xui-icon")).first());
            } else {
                return;
            }
        });
    }

    public getText() {
        return super.getElement().element(by.className("xui-button-content")).getText();
    }

    public mouseClickHold() {
        browser.actions()
            .mouseMove(this.getElement().getWebElement())
            .perform();
        browser.actions().mouseDown(this.getElement().getWebElement()).perform();
        browser.sleep(2000);
        browser.actions().mouseUp().perform();
        return;
    };
}
