import { promise, by, browser, protractor } from "@solarwinds/uzi/protractor";
import { Atom } from "@solarwinds/uzi";

export class CodeItemAtom extends Atom {
    public static CSS_CLASS = "xui-code-item";

    private toHex(rgb_color: string): string {
        let rgb = rgb_color.match(/^rgba?[\s+]?\([\s+]?(\d+)[\s+]?,[\s+]?(\d+)[\s+]?,[\s+]?(\d+)[\s+]?/i);
        return (rgb && rgb.length === 4) ? "#" +
        ("0" + parseInt(rgb[1],10).toString(16)).slice(-2) +
        ("0" + parseInt(rgb[2],10).toString(16)).slice(-2) +
        ("0" + parseInt(rgb[3],10).toString(16)).slice(-2) : "";
    }

    public getTextByClassName(selector: string): promise.Promise<string> {
        return super.getElement().element(by.className(selector)).getText();
    }

    public getTextFromLineNumber(selector: string): promise.Promise<string> {
        //Since text from line-numbers can no longer be selected, we need to select content from 'before' pseudo element
        let script =  `window.getComputedStyle(document.querySelectorAll(".${selector}")[0], ":before").content`;
        return browser.executeScript(`return ${script}`);
    }

    public getBackgroundColor(): promise.Promise<string> {
        return super.getElement().getCssValue("background-color");
    }

    public async getBgColorAndHexIt(): Promise<string> {
        let color: string = await super.getElement().getCssValue("background-color");
        return this.toHex(color);
    }

    public async getTextColor(className: string): Promise<string> {
        return await super.getElement().element(by.className(className)).getCssValue("color");
    }

    public async getTextColorAndHexIt(className: string): Promise<string> {
        return this.toHex(await this.getTextColor(className));
    }

    public async getTranscludedColorAndHexIt(): Promise<string> {
        return this.toHex(await super.getElement().element(by.tagName("strong")).getCssValue("color"));
    }

    public getSelectedText(): promise.Promise<any> {
        return this.doSelect()
            .then(() => {
                return browser.executeScript(() => {
                    let text = "";
                    if (window.getSelection) {
                        text = window.getSelection().toString();
                    }
                    return text;
                });
            });
    }

    private doSelect(): promise.Promise<void> {
        return browser.actions()
            .sendKeys(protractor.Key.chord(protractor.Key.CONTROL, "a"))
            .perform();
    }

}
