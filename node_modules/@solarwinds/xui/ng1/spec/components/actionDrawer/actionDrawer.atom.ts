import { browser, by, ElementFinder, promise } from "@solarwinds/uzi/protractor";
import { Atom } from "@solarwinds/uzi";
import SpecHelpers from "../specHelpers";

export class ActionDrawerAtom extends Atom {
    public static CSS_CLASS = "xui-action-drawer";

    public moveMouseToTarget = (atom: Atom): promise.Promise<void> => {
        return SpecHelpers.mouseOver(atom);
    };

    public isTooltipDisplayed(): promise.Promise<boolean> {
        return this.getTooltip().isPresent();
    }

    public getTooltipAttribute(attribute: string): promise.Promise<string> {
        return this.getTooltip().getAttribute(attribute);
    }

    public getMenuIconAttribute(iconType: string, attribute: string): promise.Promise<string> {
        return super.getElement()
            .element(by.css(`.${ActionDrawerAtom.CSS_CLASS} [icon=${iconType}]`))
            .getAttribute(attribute);
    }

    public clickMenuIcon(iconType: string): promise.Promise<void> {
        return super.getElement()
            .element(by.css(`.${ActionDrawerAtom.CSS_CLASS} [icon=${iconType}]`))
            .click();
    }

    public moveMouseToMenuIcon(iconType: string): promise.Promise<void> {
        return browser.actions().mouseMove(super.getElement()
            .element(by.css(`.${ActionDrawerAtom.CSS_CLASS} i[icon=${iconType}]`)))
            .perform();
    }

    public getMenuDirection(): promise.Promise<string> {
        return super.getElement()
            .element(by.className("xui-action-drawer__actions")).getCssValue("transform");
    }

    public getToastContainer(): promise.Promise<boolean> {
        return browser.element(by.id("toast-container")).isPresent();
    }

    private getTooltip(): ElementFinder {
        return browser.element(by.className("action-drawer-tooltip"));
    }
}
