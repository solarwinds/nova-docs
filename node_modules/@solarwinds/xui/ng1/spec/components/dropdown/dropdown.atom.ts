import * as protractor from "@solarwinds/uzi/protractor";
import {by, element, ElementArrayFinder, ElementFinder, promise} from "@solarwinds/uzi/protractor";
import {Atom} from "@solarwinds/uzi";
import {ScrollbarAtom} from "../index.atom";

export class DropdownAtom extends Atom {
    public static CSS_CLASS = "xui-dropdown";

    public click = (): promise.Promise<void> => {
        return this.getToggleElement().click();
    };

    /**
     * Toggle dropdown and select a new item from the options.
     */
    public select = (title: string): promise.Promise<void> => {
        // Have to click (toggle the list) first because
        // you can't interact with hidden elements.
        this.click();
        return (<any>this.getItemByText(title)).click();
    };

    public scrollToAndSelect = (itemText: string): promise.Promise<void> => {
        return this.scrollToItem(itemText).then((item: ElementFinder) => {
            return item.click();
        });
    };

    public scrollToItem = (itemText: string): promise.Promise<ElementFinder> => {
        this.click();
        const itemEl = this.getItemByText(itemText);
        const scrollbar = Atom.findIn(ScrollbarAtom, super.getElement());
        return scrollbar.scrollToElement(itemEl).then(() => {
            return itemEl;
        });
    };

    public getItemByText = (itemText: string): ElementFinder => {
        // Using xpath, because I need a specific item inside of collection, and
        // css doesn't have text selector
        const xpath = ".//div/ul/li/div/ng-include/div[text()='" + itemText + "']";
        return super.getElement().element(by.xpath(xpath));
    };

    public getNumberOfItems = (): promise.Promise<number> => {
        return this.getItems().count();
    };

    public getItemText(idx: number): promise.Promise<string> {
        const item = this.getItems().get(idx);
        const textElement = item.element(by.xpath(".//div/ng-include/div"));
        return textElement.getAttribute("innerText");
    };

    /**
     * @returns {string} The value displayed in dropdown.
     */
    public getCurrentValue = (): promise.Promise<string> => {
        return this.getMainTitleElement().getText();
    };

    public getPlaceholder = (): promise.Promise<string> => {
        return super.getElement()
            .element(by.className("xui-dropdown__placeholder"))
            .getText();
    };

    public getLabelElement = (): ElementFinder => {
        return super.getElement().element(by.className("xui-dropdown__label"));
    };

    public getGroupElement = (): ElementFinder => {
        return super.getElement().element(by.className("xui-dropdown__btn-group"));
    };

    public getItems = (): ElementArrayFinder => {
        return super.getElement().all(by.className("xui-dropdown__menuitem"));
    };

    public getItemsWithClass = (className: string): ElementArrayFinder => {
        return super.getElement().all(by.css(".xui-dropdown__menuitem." + className));
    };

    public getItemsWithNestedClass = (className: string): ElementArrayFinder => {
        return super.getElement().all(by.css(".xui-dropdown__menuitem ." + className));
    };

    public isValidationTextDisplayed = (): promise.Promise<boolean> => {
        return super.getElement()
            .element(by.css(".xui-dropdown__messages"))
            .isDisplayed();
    };

    public isRequiredStyleDisplayed = (): promise.Promise<boolean> => {
        return this.getToggleElement()
            .getAttribute("class")
            .then((classes: string) => {
                const index = classes.indexOf("xui-dropdown__invalid");
                return index >= 0;
            });
    };

    public getInput(): ElementFinder {
        return super.getElement().element(by.className("xui-dropdown__input"));
    }

    public acceptText(text: string): promise.Promise<void> {
        return this.clearText().then(() => {
            return this.getInput().sendKeys(text, protractor.Key.ENTER);
        });
    }

    public getInputValue(): promise.Promise<string> {
        return this.getInput().getAttribute("value");
    }

    public clearText(): promise.Promise<void> {
        return this.getInput().clear();
    }

    public isValid(): promise.Promise<boolean> {
        return this.getElement().getAttribute("class").then((result)=> {
            return result.split(/ +/).indexOf("ng-invalid") === -1;
        });
    }

    public areSuggestionsDisplayed = (): promise.Promise<boolean> => {
        return this.getSuggestionsDropdown().isDisplayed();
    };

    public acceptInput = (input: string) => {
        return super.getElement().element(by.tagName("input")).sendKeys(input);
    };

    public getSuggestions = (): ElementArrayFinder => {
        return this.getSuggestionsDropdown().all(by.css("li"));
    };

    public getSuggestion = (index: number): ElementFinder => {
        return this.getSuggestionsDropdown().all(by.css("li")).get(index);
    };

    public getSuggestionLink = (index: number): ElementFinder => {
        return this.getSuggestionLinks().get(index);
    };

    public getSuggestionLinks = (): ElementArrayFinder => {
        return this.getSuggestionsDropdown().all(by.css("li a"));
    };

    public getValueAttr = (): promise.Promise<string> => {
        return super.getElement().element(by.tagName("input")).getAttribute("value");
    };

    public areItemsDisplayed = (): promise.Promise<boolean> => {
        return this.getItemsDropdown().isDisplayed();
    };

    public getDividers = (): ElementArrayFinder => {
        return super.getElement().all(by.className("divider"));
    };

    // private helpers
    private getToggleElement = (): ElementFinder => {
        return super.getElement().element(by.className("xui-dropdown__toggle"));
    };

    private getMainTitleElement = (): ElementFinder => {
        return super.getElement().element(by.className("xui-dropdown__display-value"));
    };

    private getItemsDropdown = (): ElementFinder => {
        return super.getElement().element(by.css("ul.xui-dropdown__menu"));
    };

    private getSuggestionsDropdown = (): ElementFinder => {
        return super.getElement().element(by.css("input + ul.dropdown-menu"));
    };
}
