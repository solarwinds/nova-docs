import {by, element, promise} from "@solarwinds/uzi/protractor";
import Helpers from "../helpers";
import {Atom} from "@solarwinds/uzi";
import {TimepickerAtom} from "../index.atom";

describe("USERCONTROL Timepicker >", () => {
    let timepicker: TimepickerAtom;

    function getModelValue() {
        return element(by.id("model-value")).getText();
    }

    beforeEach(() => {
        Helpers.prepareBrowser("timepicker");

        timepicker = Atom.findIn(TimepickerAtom, element(by.id("timepicker")));
        timepicker.getInput().click();
    });

    describe("when the timepicker is disabled", ()=> {
        it("cannot be clicked", ()=> {
            timepicker = Atom.findIn(TimepickerAtom, element(by.id("timepicker-disabled")));
            expect(timepicker.getInput().isEnabled()).toEqual(false);
        });
    });

    describe("when the timepicker is enabled", ()=> {
        it("clicking on it displays the items", ()=> {
            expect(timepicker.getInput().isEnabled()).toEqual(true);
            expect(timepicker.areItemsDisplayed()).toEqual(true);
        });
    });

    describe("when the timepicker is displayed, it", ()=> {
        it("contains initial value", ()=> {
            expect(timepicker.getInputValue()).toEqual("3:30 pm");
        });
    });

    describe("when invalid value is entered, it", ()=> {
        it("doesn't propagate the value to model", ()=> {
            timepicker.acceptText("xxx");
            expect(getModelValue()).toEqual("");
        });

        it("marks the field as invalid", ()=> {
            timepicker.acceptText("xxx");
            expect(timepicker.isValid()).toEqual(false);
        });
    });

    describe("when valid value is entered in text field, it", ()=> {
        it("overwrites the original value as the whole text was selected on focus", ()=> {
            timepicker.acceptText("12:00 am");

            expect(timepicker.getInputValue()).toEqual("12:00 am");
        });

        it("propagates '12:00 AM' to model", ()=> {
            timepicker.acceptText("12:00 AM");

            expect(getModelValue()).toEqual("0001-01-01 00:00");
        });

        it("propagates '8:00 PM' to model", ()=> {
            timepicker.acceptText("8:00 PM");

            expect(getModelValue()).toEqual("0001-01-01 20:00");
        });

        it("doesn't mark the field as invalid", ()=> {
            timepicker.acceptText("8:00 PM");

            expect(timepicker.isValid()).toEqual(true);
        });
    });

    describe("when value is chosen from dropdown, it", ()=> {
        it("displays the value in text field", ()=> {
            timepicker.scrollToAndSelect("12:30 am");

            expect(timepicker.getInputValue()).toEqual("12:30 am");
            expect(getModelValue()).toEqual("0001-01-01 00:30");
        });
    });

    describe("when partial value is entered", ()=> {

        describe(", it", ()=> {
            it("propagates '8' to model", ()=> {
                timepicker.acceptText("8");

                expect(getModelValue()).toEqual("0001-01-01 08:00");
            });

            it("propagates '20' to model", ()=> {
                timepicker.acceptText("20");

                expect(getModelValue()).toEqual("0001-01-01 20:00");
            });

            it("propagates '5 PM' to model", ()=> {
                timepicker.acceptText("5 PM");

                expect(getModelValue()).toEqual("0001-01-01 17:00");
            });

            it("doesn't mark the field as invalid", ()=> {
                timepicker.acceptText("8");

                expect(timepicker.isValid()).toEqual(true);
            });
        });

        describe("and enter is hit, it", ()=> {
            it("formats the value in the text field", ()=> {
                timepicker.acceptText("8\n");

                expect(timepicker.getInputValue()).toEqual("8:00 am");
            });
        });

        describe("and field loses focus, it", ()=> {
            it("formats the value in the text field", ()=> {
                timepicker.acceptText("8");

                // move focus by clicking on a different element
                element(by.id("model-value")).click();

                expect(timepicker.getInputValue()).toEqual("8:00 am");
            });
        });
    });

});
