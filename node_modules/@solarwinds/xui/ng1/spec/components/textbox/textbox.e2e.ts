import {by, element, promise} from "@solarwinds/uzi/protractor";
import Helpers from "../helpers";
import {TextboxAtom} from "../index.atom";
import {Atom} from "@solarwinds/uzi";

describe("E2E USERCONTROL textbox", () => {
    beforeEach(() => {
        Helpers.prepareBrowser("textbox");
    });

    it("should reject bad email", () => {
        const atom = Atom.find(TextboxAtom, "validEmailTextboxMock");
        const validatorName = "email";

        expect(atom.isValid()).toBe(true);
        expect(atom.getValidationMessagesCount()).toBe(0);
        expect(atom.getValidationMessage(validatorName)).toBeUndefined();

        atom.acceptText("bad email");

        expect(atom.isValid()).toBe(false);
        expect(atom.getValidationMessagesCount()).toBe(1);
        expect(atom.getValidationMessage(validatorName)).toBe("This field must be a valid email address");
    });

    it("should use custom validator", () => {
        let atom = Atom.find(TextboxAtom, "customStringValidatorMock");

        //make sure the box is empty, should trigger validation
        const validatorName = "customstringvalidator1";
        atom.acceptText("no f00");
        expect(TextboxAtom.isFormValidWith(validatorName)).toBe(false);

        atom.clearText();
        expect(TextboxAtom.isFormValidWith(validatorName)).toBe(false);

        atom.acceptText(" this contains the string foo in it");
        expect(TextboxAtom.isFormValidWith(validatorName)).toBe(true);
    });

    it("should use numeric validator", () => {
        let atom = Atom.find(TextboxAtom, "numberTextboxValidationMock");

        const requiredValidator = "required";
        atom.clearText();
        expect(TextboxAtom.isFormValidWith(requiredValidator)).toBe(false);

        const maxValidator = "max";
        atom.acceptText("3");
        expect(TextboxAtom.isFormValidWith(maxValidator)).toBe(true);

        atom.acceptText("127");
        expect(TextboxAtom.isFormValidWith(maxValidator)).toBe(false);
    });

    it("should validate numbers on change (not on blur) UIF-1353", () => {
        let atom = Atom.find(TextboxAtom, "numberTextboxValidationMock");
        const maxValidator = "max";
        const inputBox = atom.getInput();
        expect(TextboxAtom.isFormValidWith(maxValidator)).toBe(true);
        inputBox.sendKeys("0"); //changing 42 -> 420; no enter key pushed
        expect(TextboxAtom.isFormValidWith(maxValidator)).toBe(false);
    });

    it("should not clear text on validation fail UIF-1353", () => {
        let atom = Atom.find(TextboxAtom, "validEmailTextboxMock");
        const validatorName = "email";
        const inputBox = atom.getInput();
        inputBox.sendKeys("bob@msn"); //this should pass validation
        expect(TextboxAtom.isFormValidWith(validatorName)).toBe(true);
        inputBox.sendKeys("."); //this creates an invalid address
        expect(TextboxAtom.isFormValidWith(validatorName)).toBe(false);
        expect(atom.getText()).toBe("bob@msn.");
        inputBox.sendKeys("com"); //final correct adddress
        expect(TextboxAtom.isFormValidWith(validatorName)).toBe(true);
        expect(atom.getText()).toBe("bob@msn.com");
    });

    it("should not have blank space with no caption UIF-1539", () => {
        const totalDirective = element(by.id("thinTextBox"));
        totalDirective.getSize().then((directiveDimensions) => {
            //Spec defines text box height as 30 px
            expect(directiveDimensions.height).toBeLessThan(31);
        });
    });

    it("can programatically switch is-disabled UIF-1668", () => {
        const atom = Atom.find(TextboxAtom, "disabledTextBox");
        const inputBox = atom.getInput();
        expect(inputBox.isEnabled()).toBe(true);

        const button = element(by.css("[id*='disableButton']"));
        button.click();
        expect(inputBox.isEnabled()).toBe(false);
    });

    it("will display async warning UIF-1675", () => {
        const atom = Atom.find(TextboxAtom, "asyncWarningValidatorMock");
        const inputBox = atom.getInput();
        inputBox.sendKeys("x");
        expect(atom.isInWarningState()).toBe(true);
        inputBox.sendKeys("foo");
        expect(atom.isInWarningState()).toBe(false);
    });

    it("numeric up button will increase the value", () => {
        const atom = Atom.find(TextboxAtom, "numericTextBox");
        const inputBox = atom.getInput();
        const upButton = atom.getNumericUpButton();
        upButton.click();
        expect(atom.getText()).toBe("1");
        upButton.click();
        expect(atom.getText()).toBe("2");
    });

    it("numeric down button will decrease the value", () => {
        const atom = Atom.find(TextboxAtom, "numericTextBox");
        const inputBox = atom.getInput();
        const downButton = atom.getNumericDownButton();
        downButton.click();
        expect(atom.getText()).toBe("-1");
        downButton.click();
        expect(atom.getText()).toBe("-2");
    });

    it("buttons will fire validation", () => {
        let atom = Atom.find(TextboxAtom, "numericTextBoxValidation");
        const upButton = atom.getNumericUpButton();

        const maxValidator = "max";
        upButton.click(); //1
        expect(TextboxAtom.isFormValidWith(maxValidator)).toBe(true);
        upButton.click(); //2
        upButton.click(); //3
        expect(TextboxAtom.isFormValidWith(maxValidator)).toBe(false);
    });
});
