import {promise} from "@solarwinds/uzi/protractor";
import Helpers from "../helpers";
import {Atom} from "@solarwinds/uzi";
import {ButtonAtom, ToastAtom} from "../index.atom";

describe("USERCONTROL toast", () => {
    let toastAtom: ToastAtom;
    beforeAll(() => {
        Helpers.prepareBrowser("toast");
    });

    const validateToast = (button: ButtonAtom, type: String) => {
        it(`shows toast with type of ${type}`, () => {
            toastAtom = ToastAtom.get(0);
            button.click();

            toastAtom.waitUntilDisplayed();
            switch (type) {
                case "success":
                    expect(toastAtom.isSuccessType()).toBe(true);
                    break;
                case "warning":
                    expect(toastAtom.isWarningType()).toBe(true);
                    break;
                case "info":
                    expect(toastAtom.isInfoType()).toBe(true);
                    break;
                case "error":
                    expect(toastAtom.isErrorType()).toBe(true);
                    break;
            }
            expect(toastAtom.getMessage()).toBe(type);
            expect(toastAtom.getTitle()).toBe(type);
            toastAtom.close(true);
        });
    };

    describe("when Success toast is displayed", () => {
        const button: ButtonAtom = Atom.find(ButtonAtom, "show-success");
        validateToast(button, "success");
    });

    describe("when Warning toast is displayed", () => {
        const button: ButtonAtom = Atom.find(ButtonAtom, "show-warning");
        validateToast(button, "warning");
    });

    describe("when Info toast is displayed", () => {
        const button: ButtonAtom = Atom.find(ButtonAtom, "show-info");
        validateToast(button, "info");
    });

    describe("when Error toast is displayed", () => {
        const button: ButtonAtom = Atom.find(ButtonAtom, "show-error");
        validateToast(button, "error");
    });
});
