import { promise } from "@solarwinds/uzi/protractor";
/* Temporary solution for getting absolute file path */
import * as path from "path";

import Helpers from "../helpers";
import { Atom } from "@solarwinds/uzi";
import { FileUploadAtom } from "../index.atom";

//region Test cases
describe("USERCONTROL fileUpload: ", () => {
    let atom: FileUploadAtom;

    beforeEach(() => {
        Helpers.prepareBrowser("fileUpload");
        atom = Atom.find(FileUploadAtom, "fileUpload");
    });

    it("has only 'Browse' and hint visible by default", () => {
        expect(atom.getBrowseButton().isDisplayed()).toBeTruthy();
        expect(atom.getNofileHint().isDisplayed()).toBeTruthy();
        expect(atom.getChangeButton().isDisplayed()).toBeFalsy();
        expect(atom.getRemoveButton().isDisplayed()).toBeFalsy();
        expect(atom.getDisplayedFileName()).toBe("");
    });

    it("changes state after file was selected", async () => {
        const fileToUpload = __filename;

        //Set file's path as input (file type) value
        await atom.selectFile(fileToUpload);

        expect(await atom.getBrowseButton().isDisplayed()).toBeFalsy();
        expect(await atom.getNofileHint().isDisplayed()).toBeFalsy();
        expect(await atom.getChangeButton().isDisplayed()).toBeTruthy();
        expect(await atom.getRemoveButton().isDisplayed()).toBeTruthy();
        expect(await atom.getDisplayedFileName()).toBe(path.basename(fileToUpload));
    });

    it("returns to default state on clicking 'Remove'", async () => {
        const fileToUpload = __filename;

        await atom.selectFile(fileToUpload);
        expect(await atom.getRemoveButton().isDisplayed()).toBeTruthy();
        await atom.getRemoveButton().click();

        expect(await atom.getBrowseButton().isDisplayed()).toBeTruthy();
        expect(await atom.getNofileHint().isDisplayed()).toBeTruthy();
        expect(await atom.getChangeButton().isDisplayed()).toBeFalsy();
        expect(await atom.getRemoveButton().isDisplayed()).toBeFalsy();
        expect(await atom.getDisplayedFileName()).toBe("");
    });

});
//endregion
