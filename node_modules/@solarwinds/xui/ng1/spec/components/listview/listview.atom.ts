import {by, ElementArrayFinder, ElementFinder, promise} from "@solarwinds/uzi/protractor";
import {Atom} from "@solarwinds/uzi";
import {CheckboxAtom} from "../index.atom";

export class ListViewAtom extends Atom {
    public static CSS_CLASS = "xui-listview";

    public getItems = (): ElementArrayFinder => {
        return super.getElement().all(by.css("li.list-group-item"));
    };

    public itemCount = (): promise.Promise<number> => {
        return this.getItems().count();
    };

    public getItem = (idx: number): ElementFinder => {
        return this.getItems().get(idx);
    };

    public isItemSelected = (idx: number): promise.Promise<boolean> => {
        return this.getItem(idx).getAttribute("class")
            .then((classValue: string) => {
                return classValue && classValue.indexOf("xui-listitem--selected") >= 0;
            });
    };

    public selectCheckbox = (idx: number): promise.Promise<void> => {
        return this.getItem(idx)
            .element(by.className("xui-listview-checkbox"))
            .click();
    };

    public getCheckbox = (idx: number): CheckboxAtom => {
        const checkboxElement = this.getItem(idx).element(by.className("xui-listview-checkbox"));
        return new CheckboxAtom(checkboxElement);
    };

    public selectRow = (idx: number): promise.Promise<void> => {
        return this.getItem(idx)
            .element(by.css(".xui-listitem__content"))
            .click();
    };

    public isNarrow = (): Promise<boolean> => {
        return Atom.hasClass(this.getItem(0), "xui-listitem--narrow");
    };

    public isRegular = (): Promise<boolean> => {
        return Atom.hasClass(this.getItem(0), "xui-listitem--regular");
    };

    public isStriped = (): promise.Promise<boolean> => {
        const items = this.getItems();
        return items.first().getCssValue("background-color").then((lineOneColor: string) => {
            return items.get(1).getCssValue("background-color").then((lineTwoColor: string) => {
                return lineOneColor !== lineTwoColor;
            });
        });
    };

    public isEmptyTextPresented = (): promise.Promise<boolean> => {
        return super.getElement().element(by.css(".xui-listview__empty .xui-listview__empty--main-message"))
            .isPresent();
    };

    public getEmptyText = (): promise.Promise<string> => {
        return super.getElement().element(by.css(".xui-listview__empty .xui-listview__empty--main-message")).getText();
    };

    public getHeaderText = (innerCss: string): promise.Promise<string> => {
        return super.getElement()
            .element(by.css(".xui-listview-header"))
            .element(by.css(innerCss))
            .getText();
    };

    public getEmptyTemplateText = (innerCss: string): promise.Promise<string> => {
        return super.getElement()
            .element(by.tagName("ng-include"))
            .element(by.className(innerCss))
            .getText();
    };

    public getEmptyTemplateColor = (innerCss: string): promise.Promise<string> => {
        return super.getElement()
            .element(by.tagName("ng-include"))
            .element(by.className(innerCss))
            .getCssValue("color");
    };
}
