import {by, element, promise} from "@solarwinds/uzi/protractor";
import {ListViewAtom} from "../index.atom";
import Helpers from "../helpers";
import {Atom} from "@solarwinds/uzi";

describe("USERCONTROL listview", () => {
    let stripedListView: ListViewAtom;
    let nonStripedListView: ListViewAtom;

    beforeEach(() => {
        Helpers.prepareBrowser("listview");
        stripedListView = Atom.find(ListViewAtom, "testListViewStriped");
        nonStripedListView = Atom.find(ListViewAtom, "testListViewNoStripes");
    });

    it("should contain 10 items", () => {
        expect(stripedListView.itemCount()).toEqual(10);
    });

    it("should display given item in proper place", () => {
        expect(stripedListView.getItem(0).getText()).toEqual("horse");
        expect(stripedListView.getItem(1).getText()).toEqual("elk");
        expect(stripedListView.getItem(2).getText()).toEqual("bobcat");
        expect(stripedListView.getItem(9).getText()).toEqual("snake");
    });

    it("should apply the specified padding", () => {
        const multiSelectLV = Atom.find(ListViewAtom, "multiSelect");
        expect(multiSelectLV.isNarrow()).toEqual(true);
        expect(multiSelectLV.isRegular()).toEqual(false);

        const singleSelectLV = Atom.find(ListViewAtom, "singleSelect");
        expect(singleSelectLV.isNarrow()).toEqual(false);
        expect(singleSelectLV.isRegular()).toEqual(true);
    });

    it("should apply 'regular' padding by default", () => {
        expect(stripedListView.isNarrow()).toEqual(false);
        expect(stripedListView.isRegular()).toEqual(true);
        expect(nonStripedListView.isNarrow()).toEqual(false);
        expect(nonStripedListView.isRegular()).toEqual(true);
    });

    it("should honor 'striped' attribute", () => {
        expect(stripedListView.isStriped()).toEqual(true);
        expect(nonStripedListView.isStriped()).toEqual(false);
    });

    it("have the correct header", () => {
        expect(stripedListView.getHeaderText("h3")).toBe("STRIPED LISTVIEW, ITEM TEMPLATE");
        expect(nonStripedListView.getHeaderText("h3")).toBe("PLAIN LISTVIEW, COLOR-BOX TEMPLATE");
    });

    it("applies the correct template", () => {
        const horseItem = stripedListView.getItem(0);
        expect(horseItem.getText()).toEqual("horse");

        const blueColorBoxItem = nonStripedListView.getItem(0);
        expect(blueColorBoxItem.element(by.css(".color-box.blue"))).toBeDefined();
        expect(blueColorBoxItem.getText()).toEqual("blue");
    });

    it("allows checkbox/multi selection of items", ()=> {
        expect(element(by.id("multiSelectValues")).getText()).toBe("");
        const multiSelectListView = Atom.find(ListViewAtom, "multiSelect");
        multiSelectListView.selectCheckbox(0);
        multiSelectListView.selectCheckbox(1);
        multiSelectListView.selectCheckbox(2);
        expect(element(by.id("multiSelectValues")).getText()).toBe("blue,green,yellow");

        multiSelectListView.selectCheckbox(0);
        multiSelectListView.selectCheckbox(1);
        multiSelectListView.selectCheckbox(2);
        expect(element(by.id("multiSelectValues")).getText()).toBe("");
    });

    it("allows checkbox/multi inverted selection of items", ()=> {
        expect(element(by.id("multiSelectValues")).getText()).toBe("");
        const multiSelectListView = Atom.find(ListViewAtom, "multiSelectInvert");
        multiSelectListView.selectCheckbox(0);
        multiSelectListView.selectCheckbox(1);
        multiSelectListView.selectCheckbox(2);
        expect(element(by.id("multiSelectValues")).getText()).toBe("blue,green,yellow");

        multiSelectListView.selectCheckbox(0);
        multiSelectListView.selectCheckbox(1);
        multiSelectListView.selectCheckbox(2);
        expect(element(by.id("multiSelectValues")).getText()).toBe("");
    });

    it("does not allow change selection for disabled items", () => {
        const multiSelectListView = Atom.find(ListViewAtom, "multiSelectDisabledItems");
        expect(multiSelectListView.getCheckbox(0).isDisabled()).toBe(true);
        expect(multiSelectListView.getCheckbox(1).isDisabled()).toBe(true);
    });

    it("allows single selection of items for single mode", ()=> {
        expect(element(by.id("singleSelectValue")).getText()).toBe("medium");
        const singleSelectListView = Atom.find(ListViewAtom, "singleSelect");
        singleSelectListView.selectRow(0);
        expect(element(by.id("singleSelectValue")).getText()).toBe(JSON.stringify(["small"]));
        singleSelectListView.selectRow(3);
        expect(element(by.id("singleSelectValue")).getText()).toBe(JSON.stringify(["xlarge"]));
    });

    it("allows single selection of items for radio mode", ()=> {
        expect(element(by.id("radioSelectValue")).getText()).toBe("medium");
        const singleSelectListView = Atom.find(ListViewAtom, "singleSelect");
        singleSelectListView.selectRow(0);
        expect(element(by.id("radioSelectValue")).getText()).toBe(JSON.stringify(["small"]));
        singleSelectListView.selectRow(3);
        expect(element(by.id("radioSelectValue")).getText()).toBe(JSON.stringify(["xlarge"]));
    });
});
