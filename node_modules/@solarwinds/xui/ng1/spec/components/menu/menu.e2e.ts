import {browser, by, element, promise} from "@solarwinds/uzi/protractor";
import Helpers from "../helpers";
import {Atom} from "@solarwinds/uzi";
import {MenuAtom} from "../index.atom";

describe("USERCONTROL Menu", () => {
    let menu: MenuAtom;

    beforeEach(() => {
        Helpers.prepareBrowser("menu");
        menu = Atom.find(MenuAtom, "menu");
    });

    it("expands closed menu when button is clicked", () => {
        // act
        menu.click();

        // assert
        expect(menu.isExpanded()).toBeTruthy();
    });

    it("closes expanded menu when button is clicked", () => {
        // arrange
        menu.expand();

        // act
        menu.click();

        // assert
        expect(menu.isExpanded()).toBeFalsy();
    });

    it("does not expand menu when button is clicked and menu is disabled", () => {
        // arrange
        menu = Atom.find(MenuAtom, "menuDisabled");

        // act
        menu.click().then(
            function () {
                return true;
            },
            function () {
                return false;
            });

        // assert
        expect(menu.isExpanded()).toBe(false);
    });

    it("redirects to specified url when menu link item is clicked", () => {
        // arrange
        menu.expand();

        // act
        menu.getAnchorElemForLinkOrActionItemByTitle("Link 1").click();

        // assert
        browser.getLocationAbsUrl().then((url) => {
            expect(url).toContain("#link");
        });
    });

    it("does not redirect to specified url when disabled menu link item is clicked", () => {
        // arrange
        menu.expand();

        // act
        menu.getAnchorElemForLinkOrActionItemByTitle("Link 2").click();

        // assert
        browser.getLocationAbsUrl().then((url) => {
            expect(url).not.toContain("#disabledLink");
        });
    });

    it("does an action when menu action anchor item is clicked", () => {
        // arrange
        menu.expand();
        const actionItemAnchor = menu.getAnchorElemForLinkOrActionItemByTitle("Action 2");

        // act
        actionItemAnchor.click();

        // assert
        menu.expand();
        const actionItemAnchor2 = menu.getAnchorElemForLinkOrActionItemByTitle("Changed action 2");
        actionItemAnchor2.getText().then((text) => {
            expect(text).toEqual("Changed action 2");
        });
    });

    it("does an action when menu action item is clicked", () => {
        // arrange
        menu.expand();
        const menuItem = menu.getAnchorElemForLinkOrActionItemByTitleContainingText("Bold Action");

        // act
        menuItem.click();

        // assert
        menu.expand();
        const changedMenuItem = menu.getAnchorElemForLinkOrActionItemByTitleContainingText("Changed bold action");
        changedMenuItem.getText().then((innerHtml) => {
            expect(innerHtml).toContain("Changed bold action");
        });
    });

    it("isMenuItemEnabledByTitleContainingText should return correct value", () => {
        // arrange
        menu.expand();

        // assert
        expect(menu.isMenuItemEnabledByTitleContainingText("Action 1")).toBe(false);
        expect(menu.isMenuItemEnabledByTitleContainingText("Action 2")).toBe(true);
    });

    it("does not do any action when disabled menu action item is clicked", () => {
        // arrange
        menu.expand();
        const actionItemAnchor = menu.getAnchorElemForLinkOrActionItemByTitle("Action 1");

        // act
        actionItemAnchor.click();

        // assert
        menu.expand();
        const actionItemAnchor2 = menu.getAnchorElemForLinkOrActionItemByTitle("Action 1");
        expect(actionItemAnchor2.getText()).toEqual("Action 1");
    });

    it("ticks the checkbox when menu option item is clicked", () => {
        // arrange
        menu.expand();
        const optionItemCheckbox = menu.getCheckboxElemForOptionItemByTitle("Option 2");

        // act
        optionItemCheckbox.click();

        // assert
        expect(optionItemCheckbox.isChecked()).toEqual(true);
    });

    it("does not tick the checkbox when disabled menu option item is clicked", () => {
        // arrange
        menu.expand();
        const optionItemCheckbox = menu.getCheckboxElemForOptionItemByTitle("Option 1");

        // act
        optionItemCheckbox.click();

        // assert
        expect(optionItemCheckbox.isChecked()).toEqual(false);
    });

    it("opens downside if there is enough space to display it", () => {
        // act
        menu.expand();

        // assert
        menu.isChildElementPresent(by.className("dropup")).then((isPresented) => {
            expect(isPresented).toBeFalsy();
        });
    });

    it("opens upside when there is no space to display it downside", () => {
        // arrange
        menu = Atom.findIn(MenuAtom, element(by.id("menuUpside")));

        // act
        menu.expand();

        // assert
        menu.isChildElementPresent(by.className("dropup")).then((isPresented) => {
            expect(isPresented).toBeTruthy();
        });
    });

    it("has the left alignment if there is enough space to display it", () => {
        menu.expand()
            .then(() => menu.isChildElementPresent(by.className("dropdown-menu-right")))
            .then((isPresented) => expect(isPresented).toBeFalsy());
    });

    xit("has the right alignment if there is no space to display it with the left alignment", () => {
        // arrange
        menu = Atom.find(MenuAtom, "menuRightAlignment");
        // act
        menu.expand()
            .then(() => {
                // assert
                return menu.isChildElementPresent(by.className("dropdown-menu-right"));
            })
            .then((isPresented) => {
                expect(isPresented).toBeTruthy();
            });
    });

    it("has 'append to body' functionality", () => {
        menu = Atom.find(MenuAtom, "menuAppendedToBody");

        expect(menu.isAppendedToBody()).toBeTruthy();
    });
});
