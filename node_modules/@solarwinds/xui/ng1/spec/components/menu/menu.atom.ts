import {browser, by, ElementFinder, promise} from "@solarwinds/uzi/protractor";
import {WebElementPromise} from "@solarwinds/uzi/webdriver";
import {Atom} from "@solarwinds/uzi";
import {CheckboxAtom} from "../index.atom";

export class MenuAtom extends Atom {
    public static CSS_CLASS = "xui-menu";

    // Clicks on menu button
    public click() {
        return this.getButtonElement().click();
    }

    // Expands menu list
    public expand() {
        return this.isExpanded().then((expanded) => {
            if (!expanded) {
                this.click();
            }
        });
    }

    // Closes menu list
    public close() {
        return this.isExpanded().then((expanded) => {
            if (expanded) {
                this.click();
            }
        });
    }

    // Returns whether menu list is expanded
    public isExpanded(): promise.Promise<boolean> {
        return this.getMenuListElement().isDisplayed();
    }

    // Returns checkbox atom for option menu item specified by its title
    public getCheckboxElemForOptionItemByTitle(title: string) {
        return Atom.findIn(CheckboxAtom, super.getElement()
            .all(by.className("xui-menu-item"))
            .filter((elem: ElementFinder) => {
                let checkbox = Atom.findIn(CheckboxAtom, elem);
                return checkbox.getContent().then(function (text: string) {
                    return text === title;
                }, function () {
                    // Checkbox was not found inside the item
                    return false;
                });
            })
            .get(0));
    }

    // Returns anchor element for link/action menu item specified by its title
    public getAnchorElemForLinkOrActionItemByTitle(title: string): WebElementPromise {
        return super.getElement()
            .all(by.className("xui-menu-item-link"))
            .filter((elem: ElementFinder) => {
                return elem.getText().then(function (text: string) {
                    return text === title;
                });
            })
            .get(0)
            .getWebElement();
    }

    // Returns anchor element for link/action menu item specified by its title containing text
    public getAnchorElemForLinkOrActionItemByTitleContainingText(text: string): WebElementPromise {
        return super.getElement()
            .all(by.className("xui-menu-item-link"))
            .filter((elem: ElementFinder) => {
                return elem.getText().then(function (innerHtml: string) {
                    return innerHtml.indexOf(text) !== -1;
                });
            })
            .get(0)
            .getWebElement();
    }

    // Returns if menu item element specified by its title containing text is enabled or not
    public isMenuItemEnabledByTitleContainingText(text: string) {
        return super.getElement()
            .all(by.className("xui-menu-item"))
            .filter((elem: ElementFinder) => {
                return elem.getText().then(function (innerHtml: string) {
                    return innerHtml.indexOf(text) !== -1;
                });
            })
            .get(0)
            .getWebElement()
            .getAttribute("class").then((value) => {
                return value === null || value.indexOf("disabled") === -1;
            });
    }

    // Returns menu's button element
    public getButtonElement(): WebElementPromise {
        return super.getElement().element(by.className("xui-menu-button")).getWebElement();
    }

    // Returns menu's list element
    public getMenuListElement(): WebElementPromise {
        return super.getElement().element(by.className("xui-menu-list")).getWebElement();
    }

    public isAppendedToBody(): promise.Promise<boolean> {
        return super.getElement().element(by.css(".dropdown[dropdown-append-to-body]")).isPresent() &&
            browser.element(by.css("body > .xui-menu-list.dropdown-menu")).isPresent();
    }
}
