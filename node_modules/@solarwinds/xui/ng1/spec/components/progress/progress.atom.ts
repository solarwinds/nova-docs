import { by, promise, browser } from "@solarwinds/uzi/protractor";
import { Atom } from "@solarwinds/uzi";

export class ProgressAtom extends Atom {
    public static CSS_CLASS = "xui-progress";

    public getWidth = () => {
        return super.getElement().getCssValue("width").then((widthVal) => {
            return parseFloat(widthVal.replace("px", ""));
        });
    };

    public getActualHeight = () => {
        return super.getElement().getSize().then((size) => {
            return size.height;
        });
    };

    public isDisplayed = () => {
        return super.getElement().isDisplayed();
    };

    public isProgressBarDisplayed = () => {
        return super.getElement().element(by.className("xui-progress__bar")).isDisplayed();
    };

    public getMessage = () => {
        const message = super.getElement().element(by.className("xui-progress__message"));
        return message.getText();
    };

    public canCancel = () => {
        return super.getElement().element(by.className("xui-progress__cancel")).isPresent();
    };

    public cancelProgress = (): promise.Promise<void> => {
        const cancelEl = super.getElement().element(by.className("xui-progress__cancel"));
        return cancelEl.click();
    };

    public waitForProgressBarToComplete = async (timeout: number) => {
        let progressBarValueWidth: number = 0;
        let checkInterval: number = 100;
        let i = 0;
        const progressBarValue = await browser.findElements(by.className("xui-progress__bar-value")).then((array) => {
            return array[0];
        });
        while (progressBarValueWidth < 100) {
            progressBarValueWidth = await progressBarValue.getAttribute("style").then((value) => {
                return parseFloat(value.replace("%", "") && value.replace("width: ", ""));
            });            
            browser.sleep(checkInterval);
            if (i > timeout / checkInterval) {
                console.log("Quit by timeout because of these possible reasons:");
                console.log("1. It took progress bar too long to complete");
                console.log("2. Progress bar wasn't triggered");
                console.log("3. Progress bar is not visible");
                console.log("4. The set timeout is too short");
                return;
            }
            i++;
        };
    };
}
