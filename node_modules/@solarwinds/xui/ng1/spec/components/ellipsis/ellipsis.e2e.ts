import {browser, by, promise} from "@solarwinds/uzi/protractor";
import {Atom} from "@solarwinds/uzi";
import {EllipsisAtom} from "./ellipsis.atom";
import Helpers from "../helpers";
import * as _ from "lodash";

describe("USERCONTROL ellipsis", () => {

    beforeEach(() => {
        Helpers.prepareBrowser("ellipsis");
    });

    const defaultEllipsis = Atom.find(EllipsisAtom, "defaultEllipsis");
    const tooltipOptionsEllipsis = Atom.find(EllipsisAtom, "tooltipOptionsEllipsis");
    const tooltipOptionsWithParent = Atom.find(EllipsisAtom, "optionsTooltipWithParent");

    const defaultTitle = "HTML is great for declaring static documents, " +
        "but it falters when we try to use it for declaring dynamic views in web-applications.";
    const defaultTooltip = "The tooltip differs from actual title";

    it("should properly render/populate 'title', 'uib-tooltip'", () => {
        expect(defaultEllipsis.getTitle()).toBe(defaultTitle);
        expect(defaultEllipsis.getEllipsedAttribute("uib-tooltip")).toBe(defaultTooltip);
    });

    it("should check difference between tooltip and text", () => {
        expect(defaultEllipsis.getTitle()).not.toBe(defaultTooltip);
    });

    xit("should show tooltip on 'mouseenter'", () => {
        expect(defaultEllipsis.getEllipsedAttribute("tooltip-enable")).toBe("false");
        expect(defaultEllipsis.isTooltipDisplayed()).toBe(false);
        browser.manage().window().setSize(640, 880);
        browser.wait(() => defaultEllipsis.getEllipsedAttribute("tooltip-enable")
            .then(isEnabled => _.isEqual(isEnabled, "true")));
        defaultEllipsis.moveMouseToTarget(defaultEllipsis);
        expect(defaultEllipsis.getEllipsedAttribute("tooltip-enable")).toBe("true");
        expect(defaultEllipsis.isTooltipDisplayed()).toBe(true);
    });

    xit("should not show tooltip while text is full length", () => {
        browser.manage().window().setSize(1540, 880);
        browser.wait(() => defaultEllipsis.getEllipsedAttribute("tooltip-enable")
            .then(isEnabled => _.isEqual(isEnabled, "false")));
        defaultEllipsis.moveMouseToTarget(defaultEllipsis);
        expect(defaultEllipsis.getEllipsedAttribute("tooltip-enable")).toBe("false");
        expect(defaultEllipsis.isTooltipDisplayed()).toBe(false);
    });

    xit("should use tooltip options", () => {
        const tooltipPlacement = "bottom";
        expect(tooltipOptionsEllipsis.getEllipsedAttribute("tooltip-enable")).toBe("false");
        expect(tooltipOptionsEllipsis.isTooltipDisplayed()).toBe(false);
        browser.manage().window().setSize(640, 880);
        browser.wait(() => tooltipOptionsEllipsis.getEllipsedAttribute("tooltip-enable")
            .then(isEnabled => _.isEqual(isEnabled, "true")));
        tooltipOptionsEllipsis.moveMouseToTarget(tooltipOptionsEllipsis);
        expect(tooltipOptionsEllipsis.getTooltipAttribute("placement")).toBe(tooltipPlacement);
        expect(tooltipOptionsEllipsis.isTooltipDisplayed()).toBe(true);
    });

    it("should compile bindHtmlTemplate with xuiHighlight:'HTML' filter", () => {
        expect(defaultEllipsis.getElement().element(by.css(".xui-highlighted")).getText()).toBe("HTML");
    });

    it("should compile bindHtmlTemplate with lowercase filter", () => {
        const loweCasedTitle = defaultTitle.toLowerCase();
        expect(tooltipOptionsEllipsis.getTitle()).toBe(loweCasedTitle);
    });

    xdescribe("with attribute find-parent-class=true", () => {

        beforeEach(() => {
            Helpers.prepareBrowser("ellipsis");
        });

        it("shouldn't add ellipsis when text is shorter than parent element", () => {
            browser.manage().window().setSize(1540, 880);
            browser.wait(() => tooltipOptionsWithParent.getEllipsedAttribute("tooltip-enable")
                .then(isEnabled => _.isEqual(isEnabled, "false")));
            expect(tooltipOptionsWithParent.getEllipsedAttribute("tooltip-enable")).toBe("false");
        });

        it("should show tooltip when ellipsis is enabled and mouseenter", () => {
            browser.manage().window().setSize(640, 880);
            browser.wait(() => tooltipOptionsWithParent.getEllipsedAttribute("tooltip-enable")
                .then(isEnabled => _.isEqual(isEnabled, "true")));
            tooltipOptionsWithParent.moveMouseToTarget(tooltipOptionsWithParent);
            expect(tooltipOptionsWithParent.isTooltipDisplayed()).toBe(true);
        });

        it("shouldn't show tooltip when ellipsis is disabled and mouseenter", () => {
            browser.manage().window().setSize(1500, 880);
            browser.wait(() => tooltipOptionsWithParent.getEllipsedAttribute("tooltip-enable")
                .then(isEnabled => _.isEqual(isEnabled, "false")));
            tooltipOptionsWithParent.moveMouseToTarget(tooltipOptionsWithParent);
            expect(tooltipOptionsWithParent.isTooltipDisplayed()).toBe(false);
        });
    });
});
