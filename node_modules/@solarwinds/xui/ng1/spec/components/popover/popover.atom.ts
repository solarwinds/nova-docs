import { browser, by, ElementFinder, promise } from "@solarwinds/uzi/protractor";
import { Atom } from "@solarwinds/uzi";
import { IconAtom } from "../index.atom";

export class PopoverAtom extends Atom {
    public static CSS_CLASS = "xui-popover--click";

    public moveMouseToTarget = (): promise.Promise<void> =>
        browser.actions()
            .mouseMove(this.getElement().getWebElement())
            .perform();

    public moveMouseAndClickTarget = (): promise.Promise<void> =>
        browser.actions()
            .mouseMove(this.getElement().getWebElement())
            .click()
            .perform();

    public togglePopover = (): promise.Promise<void> =>
        this.isPopoverDisplayed().then((wasDisplayed) => {
            this.moveMouseAndClickTarget();
            return browser.wait<void>(
                () => this.isPopoverDisplayed().then((isDisplayed) => wasDisplayed !== isDisplayed),
                10000
            );
        });

    public getPopover = (): promise.Promise<ElementFinder> =>
        this.getPopoverUid().then((id) => browser.element(
            by.xpath("//*[@popover-uid='" + id + "' and contains(@class, 'xui-popover popover')]")
        ));

    public isPopoverDisplayed = (): promise.Promise<boolean> =>
        this.getPopover().then(popover => popover.isDisplayed());

    public getTitle = (): promise.Promise<ElementFinder> =>
        this.getPopover().then(popoverElement => popoverElement.element(by.css(".xui-popover__title")));

    public getTitleText = (): promise.Promise<string> =>
        this.getTitle().then(titleElement => titleElement.getText());

    public hasStatus = async (status: string): Promise<boolean> => {
        const title = await this.getTitle();
        return await Atom.hasClass(title, "xui-popover__title--" + status);
    };

    public hasNoStatus = async (): Promise<boolean> => {
        const title = await this.getTitle();
        return await Atom.hasClass(title, "xui-popover__title--");
    };

    public getStatusIconName = (): promise.Promise<string> =>
        this.getPopover().then(popover => IconAtom.findIn(IconAtom, popover).name());

    public isDisplayedRight = async (): Promise<boolean> => {
        const popover = await this.getPopover();
        return await Atom.hasClass(popover, "right");
    };

    public isDisplayedLeft = async (): Promise<boolean> => {
        const popover = await this.getPopover();
        return await Atom.hasClass(popover, "left");
    };

    public clickTarget = (): promise.Promise<void> =>
        this.getElement().click();

    private getPopoverUid = (): promise.Promise<string> =>
        this.getElement().getAttribute("popover-uid");
}
