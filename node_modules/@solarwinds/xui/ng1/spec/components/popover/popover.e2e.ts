import { browser, by, element, promise } from "@solarwinds/uzi/protractor";
import * as webdriver from "@solarwinds/uzi/webdriver";
import { PopoverAtom } from "../index.atom";
import Helpers from "../helpers";

describe("USERCONTROL popover", () => {
    const inlineParentId = "elementPopoverTarget";
    const boxParentId = "boxPopoverTarget";
    const focusParentId = "focusTarget";
    const leftPlacementParentId = "leftButton";
    const rightPlacementParentId = "rightButton";

    const getStatusPopoverId = (status: string) => `statusPopover_${status}`;

    beforeEach(() => {
        Helpers.prepareBrowser("popover");
    });

    describe("title", () => {
        it("shouldn't show when is not defined", () => {
            const inlineAtom = new PopoverAtom(element(by.id(inlineParentId)));
            inlineAtom.getTitle().then((title) => {
                expect(title.isPresent()).toBe(false);
            });
        });

        it("should show title when is defined and component is clicked", () => {
            const boxAtom = new PopoverAtom(element(by.id(boxParentId)));
            boxAtom.getTitle().then((title) => {
                expect(title.isPresent()).toBe(true);
            });

            boxAtom.moveMouseAndClickTarget();

            boxAtom.getTitleText().then(result => expect(result).toEqual("TEXT TO BIND"));
        });
    });

    describe("status", () => {

        function checkStatus(status: string, icon: string) {
            const statusAtom = new PopoverAtom(element(by.id(getStatusPopoverId(status))));
            expect(statusAtom.hasStatus(status)).toBe(true);
            expect(statusAtom.getStatusIconName()).toBe(icon);
        }

        it("should honor status", () => {
            const boxAtom = new PopoverAtom(element(by.id(boxParentId)));
            expect(boxAtom.hasNoStatus()).toBe(true);

            const okStatusAtom = new PopoverAtom(element(by.id(getStatusPopoverId("ok"))));
            expect(okStatusAtom.hasNoStatus()).toBe(false);
        });

        it("should honor empty status", () => {
            checkStatus("", "");
        });

        it("should honor 'ok' status", () => {
            checkStatus("ok", "");
        });

        it("should honor 'warning' status", () => {
            checkStatus("warning", "status_warning");
        });

        it("should honor 'critical' status", () => {
            checkStatus("critical", "status_critical");
        });

        it("should honor 'down' status", () => {
            checkStatus("down", "status_down");
        });
    });

    describe("triggers", () => {
        it("should honor 'click' trigger", () => {
            const boxAtom = new PopoverAtom(element(by.id(boxParentId)));
            expect(boxAtom.isPopoverDisplayed()).toBe(false);
            boxAtom.togglePopover();
            expect(boxAtom.isPopoverDisplayed()).toBe(true);
            boxAtom.togglePopover();
            expect(boxAtom.isPopoverDisplayed()).toBe(false);
            // ensure it isn't triggered by hover
            boxAtom.moveMouseToTarget();
            expect(boxAtom.isPopoverDisplayed()).toBe(false);
        });

        it("should honor 'mouseenter' trigger as default trigger", () => {
            const inlineAtom = new PopoverAtom(element(by.id(inlineParentId)));
            expect(inlineAtom.isPopoverDisplayed()).toBe(false);
            inlineAtom.moveMouseToTarget();
            expect(inlineAtom.isPopoverDisplayed()).toBe(true);
            // ensure click has no effect
            inlineAtom.clickTarget();
            expect(inlineAtom.isPopoverDisplayed()).toBe(true);
            // move away from parent and ensure the popover disappears
            const boxAtom = new PopoverAtom(element(by.id(boxParentId)));
            boxAtom.moveMouseToTarget();
            browser.wait(() => {
                return inlineAtom.isPopoverDisplayed().then((isDisplayed) => {
                    return !isDisplayed;
                });
            });
            expect(inlineAtom.isPopoverDisplayed()).toBe(false);
        });

        it("should honor 'focus' trigger", () => {
            const focusAtom = new PopoverAtom(element(by.id(focusParentId)));
            expect(focusAtom.isPopoverDisplayed()).toBe(false);
            focusAtom.togglePopover();
            expect(focusAtom.isPopoverDisplayed()).toBe(true);
            focusAtom.clickTarget();
            expect(focusAtom.isPopoverDisplayed()).toBe(true);
            focusAtom.clickTarget();
            expect(focusAtom.isPopoverDisplayed()).toBe(true);
            // move away from parent, click to shift focus and ensure the popover disappears
            const boxAtom = new PopoverAtom(element(by.id(boxParentId)));
            boxAtom.togglePopover();
            browser.wait(() => {
                return focusAtom.isPopoverDisplayed().then((isDisplayed) => {
                    return !isDisplayed;
                });
            });
            expect(focusAtom.isPopoverDisplayed()).toBe(false);
        });

        // it("should honor multiple triggers", () => {
        //     const warningStatusAtom = new PopoverAtom(element(by.id(warningParentId)));
        //     expect(warningStatusAtom.isPopoverDisplayed()).toBe(false);
        //     warningStatusAtom.moveMouseToTarget();
        //     expect(warningStatusAtom.isPopoverDisplayed()).toBe(true);

        //     const boxAtom = new PopoverAtom(element(by.id(boxParentId)));
        //     boxAtom.moveMouseToTarget();
        //     browser.wait(warningStatusAtom.isPopoverDisplayed().then(displayed => !displayed));
        //     expect(warningStatusAtom.isPopoverDisplayed()).toBe(false);
        //     warningStatusAtom.clickTarget();
        //     expect(warningStatusAtom.isPopoverDisplayed()).toBe(true);
        //     // move away from parent and ensure the popover disappears
        //     boxAtom.togglePopover();
        //     browser.wait(warningStatusAtom.isPopoverDisplayed().then(displayed => !displayed));
        //     expect(warningStatusAtom.isPopoverDisplayed()).toBe(false);
        // });
    });

    describe("resize", () => {
        it("should be hidden on window resize", () => {
            browser.manage().window().getSize().then((initialSize: webdriver.ISize) => {
                const boxAtom = new PopoverAtom(element(by.id(boxParentId)));
                expect(boxAtom.isPopoverDisplayed()).toBe(false);
                boxAtom.moveMouseAndClickTarget();
                expect(boxAtom.isPopoverDisplayed()).toBe(true);
                browser.manage().window().setSize(320, 240).then(() => {
                    //expect(boxAtom.isPopoverDisplayed()).toBe(false);
                    browser.manage().window().setSize(initialSize.width, initialSize.height);
                });
            });
        });
    });

    describe("placement", () => {
        it("should honor 'placement'", () => {
            const leftPlacementAtom = new PopoverAtom(element(by.id(leftPlacementParentId)));
            leftPlacementAtom.togglePopover();
            expect(leftPlacementAtom.isDisplayedLeft()).toBe(true);
            expect(leftPlacementAtom.isDisplayedRight()).toBe(false);
            leftPlacementAtom.clickTarget();

            const rightPlacementAtom = new PopoverAtom(element(by.id(rightPlacementParentId)));
            rightPlacementAtom.togglePopover();
            expect(rightPlacementAtom.isDisplayedLeft()).toBe(false);
            expect(rightPlacementAtom.isDisplayedRight()).toBe(true);
        });

        it("appear on the right to adjust for the lack of real-estate", () => {
            const adjustorAtom = new PopoverAtom(element(by.id("leftAdjustToRightButton")));
            adjustorAtom.togglePopover();
            expect(adjustorAtom.isDisplayedLeft()).toBe(false);
            expect(adjustorAtom.isDisplayedRight()).toBe(true);
            adjustorAtom.clickTarget();
        });
    });
});
