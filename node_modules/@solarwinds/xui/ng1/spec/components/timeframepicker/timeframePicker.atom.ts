import {by, ElementFinder, promise} from "@solarwinds/uzi/protractor";
import {Atom} from "@solarwinds/uzi";
import {DatetimePickerAtom, PopoverAtom} from "../index.atom";

export class TimeframePickerAtom extends Atom {
    public static CSS_CLASS = "xui-timeframe-picker";

    public getPopoverAtom(): PopoverAtom {
        return PopoverAtom.findIn(PopoverAtom, super.getElement());
    };

    public getStartDatetimePicker(): promise.Promise<DatetimePickerAtom> {
        return this.getPopoverAtom().getPopover().then((popover) => {
            return DatetimePickerAtom.findIn(DatetimePickerAtom,
                popover.element(by.className("xui-timeframe-picker__start-datetime-picker")));
        });
    };

    public getEndDatetimePicker(): promise.Promise<DatetimePickerAtom> {
        return this.getPopoverAtom().getPopover().then((popover) => {
            return DatetimePickerAtom.findIn(DatetimePickerAtom,
                popover.element(by.className("xui-timeframe-picker__end-datetime-picker")));
        });
    };

    public setStartDate(date: string): promise.Promise<void> {
        this.open();

        return this.getStartDatetimePicker().then((picker) => {
            picker.getDatePicker().clearText();
            picker.getDatePicker().acceptText(date);
            picker.getDatePicker().clickCalendarIcon();
        });
    };

    public setStartTime(time: string): promise.Promise<void> {
        return this.open()
            .then(() => this.getStartDatetimePicker())
            .then((picker) => {
                return picker.getTimePicker().acceptText(time);
            });
    };

    public setEndDate(date: string): promise.Promise<void> {
        this.open();

        return this.getEndDatetimePicker().then((picker) => {
            picker.getDatePicker().clearText();
            picker.getDatePicker().acceptText(date);
            picker.getDatePicker().clickCalendarIcon();
        });
    };

    public setEndTime(time: string): promise.Promise<void> {
        this.open();

        return this.getEndDatetimePicker().then((picker) => {
            return picker.getTimePicker().acceptText(time);
        });
    };

    public getLinkElement(): ElementFinder {
        return this.getElement().element(by.className("xui-timeframe-picker__link"));
    };

    public isOpened(): promise.Promise<boolean> {
        return this.getPopoverAtom().getPopover().then((popover) => {
            return popover.isDisplayed();
        });
    };

    public selectPresetByTitle(title: string): promise.Promise<void> {
        this.getLinkElement().click();

        return this.getPopoverAtom().getPopover().then((popover) => {
            return popover.all(by.className("xui-timeframe-picker__preset"))
                .filter((elem: ElementFinder) => {
                    return elem.getText().then(function (text: string) {
                        return text === title;
                    });
                })
                .get(0).click();
        });
    };

    public open(): promise.Promise<void> {
        return this.isOpened().then((opened) => {
            if (!opened) {
                this.getLinkElement().click();
            }
        });
    };

    public close(): promise.Promise<void> {
        return this.isOpened().then((opened) => {
            if (opened) {
                this.getLinkElement().click();
            }
        });
    };

    public getSelectedPreset(): promise.Promise<string> {
        return this.open().then(() => {
            return this.getPopoverAtom().getPopover().then((popover) => {
                let selectedPreset = popover.element(by.className("xui-timeframe-picker__preset--selected"));

                let selectedPresetName = selectedPreset.isPresent().then((preset) => {
                    if (!preset) {
                        return null;
                    } else {
                        return selectedPreset.getText();
                    }
                });

                return selectedPresetName;
            });
        });
    };

    public isConfirmationPanelShown(): promise.Promise<boolean> {
        return this.getPopoverAtom().getPopover().then((popover) => {
            const confirmationPanelElement = popover.element(by.className("xui-timeframe-picker__confirmation-panel"));

            return confirmationPanelElement.isPresent().then((present) => {
                return present ? confirmationPanelElement.isDisplayed() : <any>false;
            });
        });
    };

    public clickUseButton() {
        this.getPopoverAtom().getPopover().then((popover) => {
            popover.element(by.className("xui-timeframe-picker__confirm-button")).click();
        });
    };

    public clickCancelButton(): promise.Promise<void> {
        return this.getPopoverAtom().getPopover().then((popover) => {
            return popover.element(by.className("xui-timeframe-picker__cancel-button")).click();
        });
    };

    public clickOnDateStartDTP(day: number) {
        this.open();

        return this.getStartDatetimePicker().then((dateTimePicker: DatetimePickerAtom) => {
            let datePicker = dateTimePicker.getDatePicker();

            datePicker.clickInput();
            datePicker.selectDay(day);
            this.clickUseButton();
        });
    }

    public clickOnDateEndDTP(day: number) {
        this.open();

        return this.getEndDatetimePicker().then((dateTimePicker: DatetimePickerAtom) => {
            let datePicker = dateTimePicker.getDatePicker();

            datePicker.clickInput();
            datePicker.selectDay(day);
            this.clickUseButton();
        });
    }
}
