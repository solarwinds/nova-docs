import {by, promise, ElementFinder} from "@solarwinds/uzi/protractor";
import {Atom} from "@solarwinds/uzi";
import {CheckboxAtom, IconAtom} from "../index.atom";

﻿export class TreeItemAtom extends Atom {
    public invertSelection() {
        return this.getInputElement().click();
    }

    public getTitleElement(): ElementFinder {
        return this.getElement().element(by.xpath("./div/div[contains(@class, 'xui-treeview-label')]"));
    }

    public getSubItem(index: number) {
        let element = this.getSubItemElements().get(index);
        return new TreeItemAtom(element);
    }

    public getIcon(): IconAtom {
        const headElement = this.getHeadElement();
        return Atom.findIn(IconAtom, headElement.element(by.className("xui-treeview-icon")));
    }

    public getSubItemsCount() {
        return this.getSubItemElements().count();
    }

    public async getSubItems(): Promise<TreeItemAtom[]> {
        const subItemElements = this.getSubItemElements();
        const subItemElementsCount = await subItemElements.count();
        let subItems: TreeItemAtom[] = [];
        for (let i = 0; i < subItemElementsCount; i++) {
            subItems.push(new TreeItemAtom(subItemElements.get(i)));
        }
        return subItems;
    }

    public isDisplayed() {
        return this.getElement().isDisplayed();
    }

    public toggleExpand() {
        return this.getExpanderElements().get(0).click();
    }

    public getBackgroundColor() {
        return this.getElement().getCssValue("background-color");
    }

    public isSelected() {
        const headElement = this.getHeadElement();
        return headElement.getAttribute("class").then((result) => {
            return result.indexOf("xui-is-selected") > -1;
        });
    }

    public isFocused() {
        const headElement = this.getHeadElement();
        return headElement.getAttribute("class").then((result) => {
            return result.indexOf("xui-is-focused") > -1;
        });
    }

    public async isExpanderVisible(): Promise<boolean> {
        const count = await this.getExpanderElements().count();
        return count > 0;
    };

    public async isExpanded(): Promise<boolean> {
        const iconAtom: IconAtom = Atom.findIn(IconAtom, this.getExpanderElements().get(0));
        return iconAtom.name().then((result) => {
            return result === "triangle-down";
        });
    };

    private getExpanderElements() {
        return this.getElement().all(by.xpath("./div/div/div/span[contains(@class, 'xui-treeview-toggle')]/a"));
    }

    private getHeadElement() {
        return this.getElement().element(by.className("xui-treeview-head"));
    }

    private getInputElement(): CheckboxAtom {
        return Atom.findIn(CheckboxAtom, this.getElement());
    }

    private getSubItemElements() {
        return this.getElement().all(by.xpath("./div/ul/li"));
    }
}

export class TreeViewAtom extends Atom {
    public static CSS_CLASS = "xui-treeview";

    public async getSubItems() {
        const subItemElements = this.getSubItemElements();
        const subItemElementsCount = await subItemElements.count();
        let subItems: TreeItemAtom[] = [];
        for (let i = 0; i < subItemElementsCount; i++) {
            subItems.push(new TreeItemAtom(subItemElements.get(i)));
        }
        return subItems;
    }

    public getSubItem(index: number) {
        let element = this.getSubItemElements().get(index);
        return new TreeItemAtom(element);
    }

    public getSubItemsCount() {
        return this.getSubItemElements().count();
    }

    private getSubItemElements() {
        return this.getElement().all(by.xpath("./div/ul/li"));
    }
}
