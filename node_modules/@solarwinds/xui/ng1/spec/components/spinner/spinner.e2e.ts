import {browser, by, element, ElementFinder, promise} from "@solarwinds/uzi/protractor";
import Helpers from "../helpers";
import {Atom} from "@solarwinds/uzi";
import {SpinnerAtom} from "../index.atom";

describe("USERCONTROL spinner: ", () => {
    let section: ElementFinder;

    beforeEach(() => {
        Helpers.prepareBrowser("spinner");
        section = element(by.id("content-page"));
    });

    it("will show/hide based on property", () => {
        const spinner = Atom.findIn(SpinnerAtom, section, 0);
        const spinnerButton = element(by.css("[id*='spinnerButton1']"));
        expect(spinner.isDisplayed()).toBe(false);
        spinnerButton.click();
        expect(spinner.isDisplayed()).toBe(true);
        spinnerButton.click();
        browser.wait(spinner.waitForHidden(), 3000);
        expect(spinner.isDisplayed()).toBe(false);
    });

    it("will respect size", () => {
        const spinner = Atom.findIn(SpinnerAtom, section, 0);
        const spinnerButton = element(by.css("[id*='spinnerButton1']"));
        spinnerButton.click();
        let width = 4;
        let height = 4;
        spinner.getSize().then((size: any)=> {
            width = size.width;
            height = size.height;
            expect(width).toBe(20);
            expect(height).toBe(20);
        });
    });

    it("will wait for display", () => {
        const spinner = Atom.findIn(SpinnerAtom, section, 1);
        const spinnerButton = element(by.css("[id*='spinnerButton2']"));
        spinnerButton.click();
        browser.ignoreSynchronization = true;
        //if you do not ignore sync, this promise will wait until the
        // timeout has been evaluated, which not what we are testing
        expect(spinner.isDisplayed()).toBe(false);
        browser.ignoreSynchronization = false;
        browser.wait(spinner.isDisplayed(), 4000); //wait up to 4 seconds
        expect(spinner.isDisplayed()).toBe(true);

    });
});
