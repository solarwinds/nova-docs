import { browser, by, element } from "@solarwinds/uzi/protractor";
import { ElementFinder } from "@solarwinds/uzi/node_modules/protractor/built/element";
import { Atom, } from "@solarwinds/uzi";
import { ILocation } from "@solarwinds/uzi/webdriver";

import { ResizableAtom } from "../index.atom";
import Helpers from "../helpers";

describe("USERCONTROL resizable:", () => {

    const demo = element(by.className("demo-resizable"));
    const demoAbsolute = element(by.className("demo-resizable--absolute"));

    let resizableAtom: ResizableAtom;
    let resizableAtomAbsolute: ResizableAtom;

    const widthFromStyleAttributeOf = (element: ElementFinder) => {
        return element.getAttribute("style").then((attr) => {
            return parseInt(attr.replace("px;", "").replace("width: ", ""), 10);
        });
    };

    describe("Dragging resizable:", () => {

        beforeEach(() => {
            Helpers.prepareBrowser("resizable");
            resizableAtom = Atom.findIn(ResizableAtom, demo);
            resizableAtomAbsolute = Atom.findIn(ResizableAtom, demoAbsolute);

            expect(resizableAtom.getElement().isDisplayed()).toBeTruthy();
            expect(widthFromStyleAttributeOf(demo)).toEqual(800);
        });

        it("should not drag right", () => {
            resizableAtom.setOffset(300, 0);
            const resizer = demo.element(by.className("xui-resizer"));

            browser.actions()
                .dragAndDrop(resizer, resizableAtom.offset)
                .perform();

            expect(widthFromStyleAttributeOf(demo)).toEqual(800);
        });

        it("should dragg left", () => {
            resizableAtom.setOffset(-300, 0);
            const resizer = demo.element(by.className("xui-resizer"));

            browser.actions()
                .dragAndDrop(resizer, resizableAtom.offset)
                .perform();

            expect(widthFromStyleAttributeOf(demo)).toBeLessThan(800);
        });

        it("should not drag left (absolute element)", () => {
            resizableAtomAbsolute.setOffset(-300, 0);
            const resizer = demoAbsolute.element(by.className("xui-resizer"));

            resizer.getLocation().then((location) => {
                browser.actions()
                    // offset before click
                    .mouseMove({ x: location.x + 2, y: location.y })
                    .mouseDown()
                    .mouseMove({ x: location.x - 300, y: location.y })
                    .mouseUp()
                    .perform();
            });

            expect(widthFromStyleAttributeOf(demoAbsolute)).toEqual(500);
        });

        it("should dragg right (absolute element)", () => {
            resizableAtomAbsolute.setOffset(300, 0);
            const resizer = demoAbsolute.element(by.className("xui-resizer"));

            browser.actions()
                .dragAndDrop(resizer, resizableAtom.offset)
                .perform();

            expect(widthFromStyleAttributeOf(demoAbsolute)).toBeLessThan(500);
        });

    });

});
