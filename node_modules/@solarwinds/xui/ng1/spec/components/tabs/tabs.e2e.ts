import {browser, by, promise} from "@solarwinds/uzi/protractor";
import Helpers from "../helpers";
import {TabsAtom} from "../index.atom";
import {Atom} from "@solarwinds/uzi";

describe("USERCONTROL tabs", () => {
    let atom: TabsAtom,
        respTabsAtom: TabsAtom;

    beforeEach(() => {
        Helpers.prepareBrowser("tabs");
        atom = Atom.find(TabsAtom, "mockTabs");
        respTabsAtom = Atom.find(TabsAtom, "responsiveTabs");
    });

    const expectedTabCount = 3;
    const expectedTabTitle = "SECOND TAB";
    const secondTabContent = "Content of second tab";
    const thirdTabContent = "Content of third tab";

    it("should be " + expectedTabCount + " tabs in tab panel", () => {
        expect(atom.tabCount()).toBe(expectedTabCount);
    });

    it("second tab should have tab-title " + expectedTabTitle, () => {
        expect(atom.getTabTitle(1)).toBe(expectedTabTitle);
    });

    it("second tab should be selected by default ", () => {
        expect(atom.isTabSelected(0)).toBe(false);
        expect(atom.isTabSelected(1)).toBe(true);
        expect(atom.isTabSelected(2)).toBe(false);

        expect(atom.getContent(1).element(by.css(".payload")).getText()).toBe(secondTabContent);
    });

    it("third tab should be selected on click ", () => {
        expect(atom.isTabSelected(0)).toBe(false);
        expect(atom.isTabSelected(1)).toBe(true);
        expect(atom.isTabSelected(2)).toBe(false);
        expect(atom.getContent(1).element(by.css(".payload")).getText()).toBe(secondTabContent);

        atom.click(2);
        expect(atom.isTabSelected(0)).toBe(false);
        expect(atom.isTabSelected(1)).toBe(false);
        expect(atom.isTabSelected(2)).toBe(true);
        expect(atom.getContent(2).element(by.css(".payload")).getText()).toBe(thirdTabContent);
    });

    describe("responsive tabs", () => {
        it("left caret should be disabled by default and right caret enabled", () => {
            expect(Atom.hasClass(respTabsAtom.getLeftCaret(), "disabled")).toBeTruthy();
            expect(Atom.hasClass(respTabsAtom.getRightCaret(), "disabled")).toBeFalsy();
        });

        it("should move tabs after click on right caret", () => {
            respTabsAtom.getRightCaret().click();
            browser.wait(() => {
                return respTabsAtom.getTranslateX(respTabsAtom.getTabsSlidingPanel()).then(x => x > 0);
            });
            expect(respTabsAtom.getTranslateX(respTabsAtom.getTabsSlidingPanel())).not.toBe(0);
            expect(Atom.hasClass(respTabsAtom.getLeftCaret(), "disabled")).toBeFalsy();
        });

        it("should move tabs after click on left caret", () => {
            respTabsAtom.getRightCaret().click();
            respTabsAtom.getLeftCaret().click();
            expect(respTabsAtom.getTranslateX(respTabsAtom.getTabsSlidingPanel())).toBe(0);
            expect(Atom.hasClass(respTabsAtom.getLeftCaret(), "disabled")).toBeTruthy();
            expect(Atom.hasClass(respTabsAtom.getRightCaret(), "disabled")).toBeFalsy();
        });

        it("should disable right caret after showing last tab", () => {
            respTabsAtom.getRightCaret().click();
            browser.wait(() => {
                return respTabsAtom.getTranslateX(respTabsAtom.getTabsSlidingPanel()).then(x => x > 0);
            });
            respTabsAtom.getRightCaret().click();
            browser.wait(() => {
                return Atom.hasClass(respTabsAtom.getRightCaret(), "disabled");
            });
            expect(Atom.hasClass(respTabsAtom.getRightCaret(), "disabled")).toBeTruthy();
        });
    });
});
