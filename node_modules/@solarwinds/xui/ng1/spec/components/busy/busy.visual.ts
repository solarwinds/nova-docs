import { browser, by, element, promise } from "@solarwinds/uzi/protractor";
import { Eyes } from "eyes.protractor";
import { BusyAtom, ButtonAtom, ListViewAtom } from "../index.atom";
import { Atom } from "@solarwinds/uzi";
import Helpers from "../helpers";

describe("Visual tests", function () {
    let eyes: Eyes;
    let busyAtom: BusyAtom;
    let busyAtomNotes: BusyAtom;
    let busyListView: BusyAtom;
    let saveButtonAtom: ButtonAtom;
    let saveWithProgressButtonAtom: ButtonAtom;
    let makeBusyButtonAtom: ButtonAtom;
    let makeIdleButtonAtom: ButtonAtom;

    let fillInForms = async () => {
        // Filling in first and last names
        await browser.findElement(by.xpath("//*[@id=\"firstname\"]/div[2]/input")).sendKeys("Chester");
        await browser.findElement(by.xpath("//*[@id=\"lastname\"]/div[2]/input")).sendKeys("Bennington");
        // Filling in notes
        await browser.findElement(by.xpath("//*[@id=\"textarea\"]/div[2]/textarea")).sendKeys("What is Lorem Ipsum?\n" +
        "Lorem Ipsum is simply dummy text of the printing and typesetting industry. " +
        "Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, " + 
        "when an unknown printer took a galley of type and scrambled it to make a type specimen book. " + 
        "It has survived not only five centuries, but also the leap into electronic typesetting, " + 
        "remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset " + 
        "sheets containing Lorem Ipsum passages, and more recently with desktop publishing software " + 
        "like Aldus PageMaker including versions of Lorem Ipsum.");
        // Removing focus from the textarea to prevent Eyes from capturing
        // text cursor which can affect the result of the test.
        await browser.findElement(by.className("xui-divider")).click();
    };

    beforeAll( async () => {
        eyes = Helpers.prepareEyes();
        Helpers.prepareBrowser("busy");
        busyAtom = Atom.find(BusyAtom, "xuiBusyElement");
        busyAtomNotes = Atom.find(BusyAtom, "xuiBusyElementNotes");
        busyListView = Atom.find(BusyAtom, "xuiListViewBusy");
        saveButtonAtom = Atom.find(ButtonAtom, "saveButton");
        saveWithProgressButtonAtom = Atom.find(ButtonAtom, "saveButtonNotes");
        makeBusyButtonAtom = Atom.find(ButtonAtom, "makeBusyButton");
        makeIdleButtonAtom = Atom.find(ButtonAtom, "makeIdleButton");
        await fillInForms();
    });

    it("for busy", async () => {
//Case 1        
        // Checking the default state
        eyes.open(browser, "XUI", "Busy");
        eyes.checkWindow("Default");
//Case 2        
        // Clicking the SAVE button to trigger the Busy component
        await saveButtonAtom.click();
        eyes.checkWindow("Busy element appears on SAVE button click");
        // Busy layout disappears on progress CANCEL
        await busyAtom.getProgress().cancelProgress();
        eyes.checkWindow("Busy element disappears on CANCEL");
//Case 3        
        // Clicking the SAVE WITH PROGRESS button to trigger the Busy component
        await saveWithProgressButtonAtom.click();
        eyes.checkWindow("Busy element appears on SAVE WITH PROGRESS button click");
        // Busy layout disappears on progress CANCEL
        await busyAtomNotes.getProgress().cancelProgress();
        eyes.checkWindow("Busy element disappears on CANCEL");
//Case 4        
        // Selecting the listView item and triggering the busy layout
        let listView: ListViewAtom = Atom.find(ListViewAtom, "xui-demo-listview-single-selection");
        await listView.getItem(0).click();
        await makeBusyButtonAtom.click();
        eyes.checkWindow("Busy element appears on MAKE BUSY button click");
        // Busy layout disappears on MAKE IDLE button click.
        await makeIdleButtonAtom.click();
        eyes.checkWindow("Busy element appears on MAKE BUSY button click");
// Tear down                
        eyes.close();
    });
});
