import { by, element, promise } from "@solarwinds/uzi/protractor";
import { BusyAtom, ButtonAtom } from "../index.atom";
import { Atom } from "@solarwinds/uzi";
import Helpers from "../helpers";

describe("USERCONTROL Busy", () => {
    let busyAtom: BusyAtom;
    let buttonAtom: ButtonAtom;

    beforeEach(() => {
        Helpers.prepareBrowser("busy");
        busyAtom = Atom.find(BusyAtom, "xuiBusyElement");
        buttonAtom = Atom.find(ButtonAtom, "saveButton");
    });

    it("should append itself to the attached element", () => {
        expect(busyAtom.isAppended()).toBe(true);
    });

    it("should not be visible when inactive", () => {
        expect(busyAtom.isDisplayed()).toBe(false);
    });

    it("should be visible when active", () => {
        buttonAtom.click();
        expect(busyAtom.isDisplayed()).toBe(true);
    });

    it("should have xui-busy--active css class when active", () => {
        buttonAtom.click();
        expect(busyAtom.isBusy()).toBe(true);
    });

    it("should be inactive when cancelled", () => {
        buttonAtom.click();
        busyAtom.getProgress().cancelProgress();
        expect(busyAtom.isBusy()).toBe(false);
    });

    it("should not display progress bar when show-progress is false", () => {
        buttonAtom.click();
        expect(busyAtom.isBusy()).toBe(true);
        expect(busyAtom.isProgressBarDisplayed()).toBe(false);
    });

    it("should display progress bar when show-progress is true", () => {
        const busyNotesAtom = Atom.find(BusyAtom, "xuiBusyElementNotes");
        const buttonNotes = Atom.find(ButtonAtom, "saveButtonNotes");
        buttonNotes.click();
        expect(busyNotesAtom.isDisplayed()).toBe(true);
        expect(busyNotesAtom.isProgressBarDisplayed()).toBe(true);
    });

    it("should set overflow to hidden while busy", () => {
        const busyButton = Atom.find(ButtonAtom, "makeBusyButton");
        const idleButton = Atom.find(ButtonAtom, "makeIdleButton");
        const listViewBusy = Atom.find(BusyAtom, "xuiListViewBusy");
        const parentContainer = element(by.id("xuiListViewBusy"));
        expect(listViewBusy.getOverflow(parentContainer)).toBe("scroll");
        busyButton.click();
        expect(listViewBusy.getOverflow(parentContainer)).toBe("hidden");
        idleButton.click();
        expect(listViewBusy.getOverflow(parentContainer)).toBe("scroll");
    });
});
