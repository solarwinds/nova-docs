import {by, element, ElementFinder, promise} from "@solarwinds/uzi/protractor";
import Helpers from "../helpers";
import {IfShowAtom} from "../index.atom";
import {Atom} from "@solarwinds/uzi";

describe("USERCONTROL ifShow > ", () => {
    let atom1: IfShowAtom, atom2: IfShowAtom;
    let toggle1: ElementFinder, toggle2: ElementFinder;

    const text = "the content";

    beforeEach(() => {
        Helpers.prepareBrowser("ifShow");

        const uc1 = element(by.className("uc1")),
            uc2 = element(by.className("uc2"));

        atom1 = Atom.findIn(IfShowAtom, uc1);
        atom2 = Atom.findIn(IfShowAtom, uc2);

        toggle1 = uc1.element(by.name("toggle"));
        toggle2 = uc2.element(by.name("toggle"));
    });

    describe("initially > ", () => {
        it("is visible if set to 'true'", () => {
            expect(atom1.ngIfIsDisplayed()).toBeTruthy();
            expect(atom1.ngShowIsDisplayed()).toBeTruthy();
            expect(atom1.getText()).toBe(text);
        });

        it("is invisible if set to 'false'", () => {
            expect(atom2.ngIfIsPresent()).toBeFalsy();
        });
    });

    describe("behavior > ", () => {

        const verifyAtom = (atom: IfShowAtom, ifPresent: boolean, ifDisplayed: boolean,
                            showPresent: boolean, showDisplayed: boolean): void => {

            expect(atom.ngIfIsPresent()).toBe(ifPresent);
            expect(atom.ngIfIsDisplayed()).toBe(ifDisplayed);
            expect(atom.ngShowIsPresent()).toBe(showPresent);
            expect(atom.ngShowIsDisplayed()).toBe(showDisplayed);
        };

        it("if initially visible and hidden ngShow is hidden", () => {
            toggle1.click();
            verifyAtom(atom1, true, true, true, false);
        });

        it("if initially invisible and shown everything is shown", () => {
            toggle2.click();
            verifyAtom(atom2, true, true, true, true);
        });

        it("if initially invisible, shown and hidden just ngShow is hidden", () => {
            toggle2.click();
            toggle2.click();
            verifyAtom(atom2, true, true, true, false);
        });
    });
});
