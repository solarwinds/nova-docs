import * as protractor from "@solarwinds/uzi/protractor";
import {browser, promise} from "@solarwinds/uzi/protractor";
import Helpers from "../helpers";
import {CheckboxAtom, SearchAtom} from "../index.atom";
import {Atom} from "@solarwinds/uzi";

describe("USERCONTROL search", () => {
    const expectedCount = 3,
        expectedPromiseDelay = 1000;
    let atom: SearchAtom;
    let wasSearched: CheckboxAtom;
    let inputChanged: CheckboxAtom;
    let searchFinished: CheckboxAtom;
    let searchCancelled: CheckboxAtom;

    beforeEach(() => {
        Helpers.prepareBrowser("search");
        atom = Atom.find(SearchAtom, "searchTest");
        wasSearched = Atom.find(CheckboxAtom, "wasSearched");
        inputChanged = Atom.find(CheckboxAtom, "inputChanged");
        searchFinished = Atom.find(CheckboxAtom, "searchFinished");
        searchCancelled = Atom.find(CheckboxAtom, "searchCancelled");
    });

    it("should show no suggestions by default ", () => {
        expect(atom.areSuggestionsDisplayed()).toBe(false);
    });

    it("should show suggestions", () => {
        atom.acceptInput("item");
        expect(atom.areSuggestionsDisplayed()).toBe(true);
        expect(atom.getSuggestions().count()).toBe(expectedCount);
    });

    it("should select correct suggestion", () => {
        atom.acceptInput("item");
        let suggestion = atom.getSuggestionLink(2);
        suggestion.getText().then((text) => {
            suggestion.click();
            expect(atom.getValueAttr()).toEqual(text);
        });
    });

    it("should search when search button clicked", () => {
        expect(wasSearched.isChecked()).toBe(false);
        atom.acceptInput("item");
        atom.getSearchButton().click();
        expect(wasSearched.isChecked()).toBe(true);

        browser.sleep(expectedPromiseDelay);

        expect(searchFinished.isChecked()).toBe(true);
    });

    it("should cancel search when cancel clicked", () => {
        expect(wasSearched.isChecked()).toBe(false);
        atom.acceptInput("item");
        atom.getSearchButton().click();
        expect(wasSearched.isChecked()).toBe(true);

        atom.getCancelButton().click();
        browser.sleep(expectedPromiseDelay);

        expect(searchCancelled.isChecked()).toBe(true);
        expect(searchFinished.isChecked()).toBe(false);
    });

    it("should cancel search when input changes", () => {
        expect(wasSearched.isChecked()).toBe(false);
        atom.acceptInput("item");
        atom.getSearchButton().click();
        expect(wasSearched.isChecked()).toBe(true);

        atom.acceptInput(" 999");
        browser.sleep(expectedPromiseDelay);

        expect(searchCancelled.isChecked()).toBe(true);
        expect(searchFinished.isChecked()).toBe(false);
    });

    it("should search when suggestion selected", () => {
        expect(wasSearched.isChecked()).toBe(false);
        atom.acceptInput("item");
        let suggestion = atom.getSuggestionLink(2);
        suggestion.click();

        expect(wasSearched.isChecked()).toBe(true);

        browser.sleep(expectedPromiseDelay);

        expect(searchFinished.isChecked()).toBe(true);
    });

    it("should evaluate onChange when input changes", () => {
        expect(inputChanged.isChecked()).toBe(false);
        atom.acceptInput("item");
        expect(inputChanged.isChecked()).toBe(true);
    });

    it("should evaluate onChange when clear clicked", () => {
        expect(inputChanged.isChecked()).toBe(false);
        atom.acceptInput("clear test");
        expect(inputChanged.isChecked()).toBe(true);
        inputChanged.click();
        expect(inputChanged.isChecked()).toBe(false);
        atom.getCancelButton().click();
        expect(inputChanged.isChecked()).toBe(true);
    });

    it("should search when enter key press", () => {
        expect(wasSearched.isChecked()).toBe(false);
        atom.acceptInput("item" + protractor.Key.ENTER);

        expect(wasSearched.isChecked()).toBe(true);

        browser.sleep(expectedPromiseDelay);

        expect(searchFinished.isChecked()).toBe(true);
    });
});
