import {browser, element, protractor, by, promise} from "@solarwinds/uzi/protractor";
import {ButtonAtom, IconAtom} from "../index.atom";
import Helpers from "../helpers";
import {Atom} from "@solarwinds/uzi";

describe("USERCONTROL icon", () => {

    beforeEach(() => {
        Helpers.prepareBrowser("icon");
    });

    it("should show each available icon size on the page", () => {
        let smallIcon = Atom.find(IconAtom, "mockIconSmall");
        expect(smallIcon.getSize()).toEqual(IconAtom.iconSize.small);

        let defaultIcon = Atom.find(IconAtom, "mockIconDefault");
        expect(defaultIcon.getSize()).toEqual(IconAtom.iconSize.default);

        let largeIcon = Atom.find(IconAtom, "mockIconLarge");
        expect(largeIcon.getSize()).toEqual(IconAtom.iconSize.large);

        let xlargeIcon = Atom.find(IconAtom, "mockIconXLarge");
        expect(xlargeIcon.getSize()).toEqual(IconAtom.iconSize.xlarge);
    });

    it("should show icons with status on the page", () => {
        let atom = Atom.find(IconAtom, "mockIconSmallWithStatus");
        expect(atom.getStatus()).toEqual("up");
    });

    it("should show icons with valid counters on the page", () => {
        const atom = Atom.find(IconAtom, "mockIconLargeWithValidCounter");
        expect(atom.getCounter()).toEqual("5");
    });

    it("should not show counter label if value passed to the counter attribute is not integer", () => {
        const atom = Atom.find(IconAtom, "mockIconLargeWithInvalidCounter");
        expect(atom.getCounter()).toBeNull();
    });

    it("should accept additional CSS classes", () => {
        let atom = Atom.find(IconAtom, "mockIconSmallWithExtraStyling");
        expect(atom.getExtraStyling()).toEqual("icon-test-style");
    });

    it("should update when is-dynamic is true", () => {
        const icon = Atom.find(IconAtom, "mockIconDynamic");
        expect(icon.hasClass("xui-icon-add")).toBe(true);
        expect(icon.getSize()).toBe(IconAtom.iconSize.small);
        expect(icon.getStatus()).toBe("");

        const btn = Atom.find(ButtonAtom, "updateIconButton");
        btn.click();

        expect(icon.hasClass("xui-icon-delete")).toBe(true);
        expect(icon.getSize()).toBe(IconAtom.iconSize.large);
        expect(icon.getStatus()).toBe("up");
    });

    it("shows tooltip when mouse is moved over", (done: DoneFn) => {
        const icon = Atom.find(IconAtom, "iconWithTooltip");
        browser.actions().mouseMove(icon.getElement()).perform().then(() => {
            icon.getTooltip().then(tooltip => {
                expect(tooltip).toBe("My custom tooltip");
                done();
            });
        });
    });
});
