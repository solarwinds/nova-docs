import {by, element, promise} from "@solarwinds/uzi/protractor";
import {SorterAtom} from "../index.atom";
import {Atom} from "@solarwinds/uzi";
import Helpers from "../helpers";

describe("USERCONTROL sorter", () => {
    let sorter: SorterAtom;

    beforeEach(() => {
        Helpers.prepareBrowser("sorter");
        sorter = Atom.find(SorterAtom, "testSorter");
    });

    it("should contain 4 items", () => {
        expect(sorter).toBeDefined();
        expect(sorter.getItemCount()).toBe(4);
        expect(sorter.getItemText(0)).toMatch("Animals");
        expect(sorter.getItemText(1)).toMatch("Stone");
        expect(sorter.getItemText(2)).toMatch("Fruit");
        expect(sorter.getItemText(3)).toMatch("Cars");
    });

    it("should default to desc", () => {
        expect(sorter.isAscendingSortActionDisplayed()).toEqual(false);
        expect(sorter.isDescendingSortActionDisplayed()).toEqual(true);
    });

    it("will notify reverse sort on click", () => {
        expect(sorter.isAscendingSortActionDisplayed()).toEqual(false);
        expect(sorter.isDescendingSortActionDisplayed()).toEqual(true);
        sorter.clickSortToggle();
        expect(sorter.isAscendingSortActionDisplayed()).toEqual(true);
        expect(sorter.isDescendingSortActionDisplayed()).toEqual(false);
        sorter.clickSortToggle();
        expect(sorter.isAscendingSortActionDisplayed()).toEqual(false);
        expect(sorter.isDescendingSortActionDisplayed()).toEqual(true);
        sorter.clickSortToggle();
        expect(sorter.isAscendingSortActionDisplayed()).toEqual(true);
        expect(sorter.isDescendingSortActionDisplayed()).toEqual(false);
    });

    it("will maintain current sort direction when new item clicked", () => {
        expect(sorter.getCurrentValue()).toBe("Fruit");
        expect(sorter.isAscendingSortActionDisplayed()).toEqual(false);
        expect(sorter.isDescendingSortActionDisplayed()).toEqual(true);
        sorter.clickSortToggle();
        expect(sorter.isAscendingSortActionDisplayed()).toEqual(true);
        expect(sorter.isDescendingSortActionDisplayed()).toEqual(false);
        sorter.select("Cars");
        expect(sorter.isAscendingSortActionDisplayed()).toEqual(true);
        expect(sorter.isDescendingSortActionDisplayed()).toEqual(false);
    });

    it("should do callback when sorting has changed", () => {
        let divShownInCallbackFn = element(by.id("sorterCallback"));

        expect(divShownInCallbackFn.isDisplayed()).toEqual(false);

        sorter.clickSortToggle();

        expect(divShownInCallbackFn.isDisplayed()).toEqual(true);
    });
});
