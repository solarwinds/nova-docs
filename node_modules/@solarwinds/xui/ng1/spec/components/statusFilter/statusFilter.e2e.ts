import { Atom } from "@solarwinds/uzi";
import { StatusFilterAtom } from "./statusFilter.atom";
import { GridAtom } from "../grid/grid.atom";
import Helpers from "../helpers";
import { by } from "@solarwinds/uzi/protractor";

describe("USERCONTROL statusFilter", () => {

    beforeEach(() => {
        Helpers.prepareBrowser("statusFilter");
    });

    const statusFilterAtom = Atom.find(StatusFilterAtom, "testStatusFilter");
    const gridAtom = Atom.find(GridAtom, "testGrid");
    const compareDescription = (expectedDescription: string) => {
        gridAtom.getListView().getItems().each((item) => {
            let description = item.element(by.css(".xui-text-warning"));
            expect(description.getText()).toBe(expectedDescription);
        });
    };
    const criticalFilter = "xui-color-critical-border";
    const warningFilter = "xui-color-warning-border";
    const infoFilter = "xui-color-info-border";

    it("should show all alerts by default", () => {
        const expectedCount = "12";

        expect(statusFilterAtom.isAppended()).toBe(true);
        expect(statusFilterAtom.filterIsActive(criticalFilter)).toBeFalsy();
        expect(statusFilterAtom.filterIsActive(warningFilter)).toBeFalsy();
        expect(statusFilterAtom.filterIsActive(infoFilter)).toBeFalsy();
        expect(gridAtom.getPager().itemCountText()).toEqual(expectedCount);
    });

    it("should show only critical alerts", () => {
        const expectedCount = 4;
        const expectedDescription = "Alert me when a component goes into critical state";

        statusFilterAtom.filter(criticalFilter);
        compareDescription(expectedDescription);
        expect(statusFilterAtom.filterIsActive(criticalFilter)).toBeTruthy();
        expect(gridAtom.getListView().itemCount()).toEqual(expectedCount);
    });

    it("should show only warning alerts", () => {
        const expectedCount = 5;
        const expectedDescription = "Alert me when a component needs to be updated";

        statusFilterAtom.filter(warningFilter);
        compareDescription(expectedDescription);
        expect(statusFilterAtom.filterIsActive(warningFilter)).toBeTruthy();
        expect(gridAtom.getListView().itemCount()).toEqual(expectedCount);
    });

    it("should show only info alerts", () => {
        const expectedCount = 3;
        const expectedDescription = "Notify me when a component change his status";

        statusFilterAtom.filter(infoFilter);
        compareDescription(expectedDescription);
        expect(statusFilterAtom.filterIsActive(infoFilter)).toBeTruthy();
        expect(gridAtom.getListView().itemCount()).toEqual(expectedCount);
    });

    it("should show only warning and info alerts", () => {
        const expectedCount = "8";
        const expectedDescription1 = "Alert me when a component needs to be updated";
        const expectedDescription2 = "Notify me when a component change his status";

        statusFilterAtom.filter(warningFilter);
        statusFilterAtom.filter(infoFilter);

        compareDescription(expectedDescription1);
        gridAtom.getPager().nextLink().click();
        compareDescription(expectedDescription2);
        expect(statusFilterAtom.filterIsActive(criticalFilter)).toBeFalsy();
        expect(statusFilterAtom.filterIsActive(warningFilter)).toBeTruthy();
        expect(statusFilterAtom.filterIsActive(infoFilter)).toBeTruthy();
        expect(gridAtom.getPager().itemCountText()).toEqual(expectedCount);
    });
});
