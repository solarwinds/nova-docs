import {browser, promise} from "@solarwinds/uzi/protractor";
import Helpers from "../helpers";

describe("INTERNALCONTROL Vendor Libraries", () => {

    beforeEach(() => {
        Helpers.prepareBrowser("vendor-libraries");
    });

    it("has Modernizr", () => {
        expect(browser.executeScript("return !!window.Modernizr;")).toBe(true);
    });
    it("has jQuery", () => {
        expect(browser.executeScript("return !!window.$;")).toBe(true);
    });
    it("has lodash", () => {
        expect(browser.executeScript("return !!window._;")).toBe(true);
    });
    it("has moment", () => {
        expect(browser.executeScript("return !!window.moment;")).toBe(true);
    });
    it("has angular", () => {
        expect(browser.executeScript("return !!window.angular;")).toBe(true);
    });
    it("has angular-animate", () => {
        expect(browser.executeScript("return window.angular && !!angular.module('ngAnimate');")).toBe(true);
    });
    it("has angular-aria", () => {
        expect(browser.executeScript("return window.angular && !!angular.module('ngAria');")).toBe(true);
    });
    it("has angular-bootstrap", () => {
        expect(browser.executeScript("return window.angular && !!angular.module('ui.bootstrap');")).toBe(true);
    });
    it("has angular-cookies", () => {
        expect(browser.executeScript("return window.angular && !!angular.module('ngCookies');")).toBe(true);
    });
    it("has angular-filter", () => {
        expect(browser.executeScript("return window.angular && !!angular.module('angular.filter');")).toBe(true);
    });
    it("has angular-messages", () => {
        expect(browser.executeScript("return window.angular && !!angular.module('ngMessages');")).toBe(true);
    });
    it("has angular-moment-validate", () => {
        expect(browser.executeScript("return window.angular && !!angular.module('moment.validate');")).toBe(true);
    });
    it("has angular-moment", () => {
        expect(browser.executeScript("return window.angular && !!angular.module('angularMoment');")).toBe(true);
    });
    it("has angular-promise-cache", () => {
        expect(browser.executeScript("return window.angular && !!angular.module('angular-promise-cache');")).toBe(true);
    });
    it("has angular-route", () => {
        expect(browser.executeScript("return window.angular && !!angular.module('ngRoute');")).toBe(true);
    });
    it("has angular-sanitize", () => {
        expect(browser.executeScript("return window.angular && !!angular.module('ngSanitize');")).toBe(true);
    });
    it("has angular-translate", () => {
        expect(browser.executeScript("return window.angular && !!angular.module('pascalprecht.translate');"))
            .toBe(true);
    });
    it("has angular-ui-router", () => {
        expect(browser.executeScript("return window.angular && !!angular.module('ui.router');")).toBe(true);
    });
    it("has angular-ui-event", () => {
        expect(browser.executeScript("return window.angular && !!angular.module('ui.event');")).toBe(true);
    });
    it("has angular-ui-indeterminate", () => {
        expect(browser.executeScript("return window.angular && !!angular.module('ui.indeterminate');")).toBe(true);
    });
    it("has angular-ui-mask", () => {
        expect(browser.executeScript("return window.angular && !!angular.module('ui.mask');")).toBe(true);
    });
    it("has angular-ui-scroll", () => {
        expect(browser.executeScript("return window.angular && !!angular.module('ui.scroll');")).toBe(true);
    });
    it("has angular-ui-scrollpoint", () => {
        expect(browser.executeScript("return window.angular && !!angular.module('ui.scrollpoint');")).toBe(true);
    });
    it("has angular-ui-uploader", () => {
        expect(browser.executeScript("return window.angular && !!angular.module('ui.uploader');")).toBe(true);
    });
    it("has angular-ui-validate", () => {
        expect(browser.executeScript("return window.angular && !!angular.module('ui.validate');")).toBe(true);
    });
    it("has angular-ui-utils", () => {
        expect(browser.executeScript("return window.angular && !!angular.module('ui.utils');")).toBe(true);
    });
    it("has restangular", () => {
        expect(browser.executeScript("return window.angular && !!angular.module('restangular');")).toBe(true);
    });
    it("has toastr", () => {
        expect(browser.executeScript("return !!window.toastr;")).toBe(true);
    });
    it("has jquery-resize", () => {
        expect(browser.executeScript("return window.$ && !!$.resize;")).toBe(true);
    });
});
