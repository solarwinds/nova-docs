import * as protractor from "@solarwinds/uzi/protractor";
import {browser, by, element, promise} from "@solarwinds/uzi/protractor";
import Helpers from "../helpers";
import {Atom} from "@solarwinds/uzi";
import {ButtonAtom, SwitchAtom} from "../index.atom";

describe("USERCONTROL switch", () => {
    let switchComponent: SwitchAtom;
    let disabledSwitchComponent: SwitchAtom;
    let button: ButtonAtom;

    beforeEach(() => {
        Helpers.prepareBrowser("switch");
        switchComponent = Atom.findIn(SwitchAtom, element(by.className("example")), 0);
        disabledSwitchComponent = Atom.findIn(SwitchAtom, element(by.className("example")), 1);
        button = Atom.findIn(ButtonAtom, element(by.className("example")));
    });

    it("should be switched off by default ", () => {
        expect(switchComponent.isOn()).toBe(false);
    });

    it("should toggle css class on click ", () => {
        switchComponent.slider().click();
        expect(switchComponent.isOn()).toBe(true);

        switchComponent.slider().click();
        expect(switchComponent.isOn()).toBe(false);
    });

    it("value should change after click on the switch", () => {
        const modelValue = element(by.id("vmState"));
        expect(modelValue.getText()).toEqual(false.toString());
        switchComponent.slider().click();
        expect(modelValue.getText()).toEqual(true.toString());
    });

    //it("value should change after clicking on the caption", () => {
    //    const modelValue = element(by.id("vmState"));
    //    const caption = switchComponent.caption();
    //
    //    expect(modelValue.getText()).toEqual(false.toString());
    //    caption.click();
    //    expect(modelValue.getText()).toEqual(true.toString());
    //});

    it("value should not change when disabled", () => {
        const modelValue = element(by.id("vmState"));

        expect(modelValue.getText()).toEqual(false.toString());

        //webdriver does not allow clicking on disabled elements, so we have to use js
        browser.executeScript("document.querySelector(\"#second .xui-switch__bar\").click()");

        expect(modelValue.getText()).toEqual(false.toString());

        browser.executeScript("document.querySelector(\"#second .xui-switch__label\").click()");
        expect(modelValue.getText()).toEqual(false.toString());
    });

    it("value should be retained after disable twiddle", () => {
        switchComponent.slider().click();
        expect(switchComponent.isOn()).toBe(true);
        button.click();
        button.click();
        expect(switchComponent.isOn()).toBe(true);
    });

    it("value should change with spacebar", () => {
        expect(switchComponent.isOn()).toBe(false);
        switchComponent.slider().sendKeys(protractor.Key.SPACE);
        expect(switchComponent.isOn()).toBe(true);
    });

    it("isEnabled should return right element state", () => {
        expect(switchComponent.isEnabled()).toBe(true);
        expect(disabledSwitchComponent.isEnabled()).toBe(false);
    });
});
