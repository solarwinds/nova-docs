import { browser, by, element, promise } from "@solarwinds/uzi/protractor";
import { BreadcrumbAtom } from "../index.atom";
import { Atom } from "@solarwinds/uzi";
import Helpers from "../helpers";

describe("USERCONTROL Breadcrumb", () => {
    let twoCrumbs: BreadcrumbAtom;
    let oneCrumbs: BreadcrumbAtom;
    let zeroCrumbs: BreadcrumbAtom;
    let undefinedCrumbs: BreadcrumbAtom;

    beforeEach(() => {
        Helpers.prepareBrowser("breadcrumb");
        twoCrumbs = Atom.findIn(BreadcrumbAtom, element(by.id("ex2")));
        oneCrumbs = Atom.findIn(BreadcrumbAtom, element(by.id("ex1")));
        zeroCrumbs = Atom.findIn(BreadcrumbAtom, element(by.id("ex0")));
        undefinedCrumbs = Atom.findIn(BreadcrumbAtom, element(by.id("ex")));
    });

    it("should only show when 2 or more crumbs exist", async () => {
        expect(await twoCrumbs.getCrumbs().count()).toBe(2);
        expect(await oneCrumbs.getCrumbs().count()).toBe(0);
        expect(await zeroCrumbs.getCrumbs().count()).toBe(0);
        expect(await undefinedCrumbs.getCrumbs().count()).toBe(0);
    });

    it("should show labels passed in", async () => {
        const labels = await twoCrumbs.getCrumbLabels();

        expect(labels[0]).toBe("root");
        expect(labels[1]).toBe("intermediate page");
    });

    it("last crumb should not be clickable", async () => {
        const hrefs = await twoCrumbs.getCrumbTargets();
        //since this give a full url, we're just interested in the end part
        expect(hrefs[0].indexOf("someurl")).toBeGreaterThan(0);
        expect(hrefs[1]).toBeNull();
    });

    it("should change to currect url on breadcrumb click", async () => {
        let getRootHref = await twoCrumbs.getCrumbTargets();
        //clicking the first breadcrumb in array
        await twoCrumbs.getCrumbs().first().click();
        //checking if the url was changed
        expect(await browser.getCurrentUrl()).toBe(getRootHref[0]);
    });
});
