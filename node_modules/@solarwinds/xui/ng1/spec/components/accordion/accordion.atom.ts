import {by, ElementFinder, promise} from "@solarwinds/uzi/protractor";
import {Atom, IAtomClass} from "@solarwinds/uzi";

export class AccordionAtom extends Atom {
    public static findIn<T extends Atom>(atomClass: IAtomClass<T>,
        parentElement: ElementFinder, index?: number): T {
        if (!parentElement) {
            throw "Accordion atom doesn't support global search yet";
        }
        let componentRootElement: ElementFinder;
        if (index !== undefined) {
            componentRootElement = parentElement.all(by.xpath(".//uib-accordion")).get(index);
        } else {
            componentRootElement = parentElement.element(by.xpath(".//uib-accordion"));
        }
        return new atomClass(componentRootElement);
    }

    getGroup(groupName: string) {
        return new AccordionGroup(this.getElement().element(
            by.xpath("./div/div[@group-name='" + groupName + "']")));
    }
}

export class AccordionGroup extends Atom {
    public isExpanded() {
        return super.getElement().element(by.css(".xui-icon.xui-icon-triangle-down")).isPresent();
    }

    public isCollapsed() {
        return super.getElement().element(by.css(".xui-icon.xui-icon-triangle-right")).isPresent();
    }

    public toggleExpand(): promise.Promise<void> {
        return this.getHeaderElement().click();
    }

    private getHeaderElement() {
        return super.getElement().element(by.css(".accordion-toggle"));
    }

}
