"use strict";

var demoContent = require("../../content");

function controller($rootScope, $scope, $location, $timeout, dialogService, toast) {
    var vm = this;

    // reference content from config
    // TODO: Load everything from config
    vm.content = [
        {
            id: 'components',
            name: 'Components',
            articles: _.filter(demoContent, {category: 'Components'})
        }, {
            id: 'styles',
            name: 'Styles',
            articles: _.filter(demoContent, {category: 'Styles'})
        }
    ];

    // This is used directly when clicking on article
    // TODO: Remove, once location watch is implemented
    vm.setActivePage = function (pageMeta) {
        vm.activePage = pageMeta;
    };

    function getPageIdFromLocation() {
        var location = $location.path();
        var fragments = location.split('/');
        return fragments[fragments.length - 1];
    }

    function setPageTitle(pageId) {
        vm.activePage = getActivePageById(pageId);
    }

    function getActivePageById(pageId) {
        return _.find(demoContent, {id: pageId});
    }

    // ------------------------------------------------------------------------------------------------------------
    // ------------------------------------------------------------------------------------------------------------
    // ------------------------------------------------------------------------------------------------------------

    vm.isBusy = $rootScope.isBusy = true;
    vm.now = Date.now;
    vm.calculateWatches = calculateWatches;
    vm.textbox = {
        displayvalue: '',
        validEmail: 'krustyTheClown@oldskool.museum',
        invalidEmail: '$%&*#%^ $%^SWdfg',
        someNumber: 42,
        maxNumber: "5",
        minNumber: "-5",
        isDisabled: false,
        isReadOnly: false,
        customstring: '',
        events: ""
    };

    vm.popover = {
        textToBind: "Text to bind",
        directions: ["left", "right"]
    };

    this.popoverItems = [
        {status: "ok", msg: "We're all good here!", isPlacement: true, placement: "right"},
        {status: "critical", msg: "The end is nigh.", isPlacement: true, placement: "left"},
        {status: "warning", msg: "No one panic.", isPlacement: false},
        {status: "down", msg: "Get down on it...", isPlacement: false}
    ];

    // radio stuff
    vm.radio = {
        disabled: false,
        vegetable: 'onion',
        fruit: null,
        animal: null,
        instrument: null,
        validate: null,
        dynamic: null,
        holiday: 'south_korea',
        generatedOptions: [],
        pickRandom: function () {
            var options = vm.radio.generatedOptions;
            vm.radio.generated = options[Math.trunc(Math.random() * options.length)].value;
        }
    };

    activate();

    //#region Internal Methods

    function activate() {
        setPageTitle(getPageIdFromLocation());
        return $timeout(function () {
            vm.isBusy = false;
        }, 500);
    }

    vm.inputText = "input text";
    vm.outputText = "output text";

    /**
     * This utility function can be used for counting watches on components.
     */
    function calculateWatches(id) {
        var root = $("#" + id);
        var watchers = [];

        var f = function (element) {
            angular.forEach(['$scope', '$isolateScope'], function (scopeProperty) {
                if (element.data() && element.data().hasOwnProperty(scopeProperty)) {
                    angular.forEach(element.data()[scopeProperty].$$watchers, function (watcher) {
                        watchers.push(watcher);
                    });
                }
            });

            angular.forEach(element.children(), function (childElement) {
                f(angular.element(childElement));
            });
        };

        f(root);

        // Remove duplicate watchers
        var watchersWithoutDuplicates = [];
        angular.forEach(watchers, function (item) {
            if (watchersWithoutDuplicates.indexOf(item) < 0) {
                watchersWithoutDuplicates.push(item);
            }
        });

        return watchersWithoutDuplicates.length;
    }

    //#endregion
}
controller.$inject = ["$rootScope", "$scope", "$location", "$timeout", "xuiDialogService", "xuiToastService"];

module.exports = controller;
