"use strict";

Xui.directive("customstringvalidator1", validatorDirective);
function validatorDirective() {
    return {
        require: 'ngModel',
        restrict: '',
        link: function (scope, elm, attrs, ctrl) {
            if (ctrl) {
                //DOM -> model
                ctrl.$parsers.unshift(function (value) {
                    var neededString = attrs.customstringvalidator1;

                    var valid = false;
                    if(value) {
                        valid = value.indexOf(neededString) > -1;
                    }
                    ctrl.$setValidity('customstringvalidator1', valid);
                    return valid ? value : undefined;
                });

                //Model-> DOM
                ctrl.$formatters.unshift(function (value) {
                    var neededString = attrs.customstringvalidator1;

                    var valid = false;
                    if(value) {
                        valid = value.indexOf(neededString) > -1;
                    }
                    ctrl.$setValidity('customstringvalidator1', valid);
                    ctrl.$setDirty(); //gets instant validation, without a blur
                    return value;
                });
            }
        }
    };
}

Xui.directive("warningvalidator2", warningValidatorDirective);
function warningValidatorDirective() {
    return {
        require: 'ngModel',
        restrict: '',
        link: function (scope, elm, attrs, ctrl) {
            if (ctrl) {
                //DOM -> model
                ctrl.$parsers.unshift(function (value) {
                    var neededString = attrs.warningvalidator2;

                    var isWarning = true;
                    if(value && angular.isString(value)) {
                        isWarning = !(value.indexOf(neededString) > -1);
                    }
                    ctrl.$xuiSetWarning('warningvalidator2', isWarning);
                    return value;
                });

                //Model-> DOM
                ctrl.$formatters.unshift(function (value) {
                    var neededString = attrs.warningvalidator2;
                    var isWarning = true;
                    if(value && angular.isString(value)) {
                        isWarning = !(value.indexOf(neededString) > -1);
                    }
                    ctrl.$xuiSetWarning('warningvalidator2', isWarning);
                    return value;
                });
            }
        }
    };
}

Xui.directive("asyncwarningvalidator3", ["$timeout","$q", asyncWarningValidatorDirective]);
function asyncWarningValidatorDirective($timeout,$q) {
    return {
        require: 'ngModel',
        restrict: '',
        link: function (scope, elm, attrs, ctrl) {
            if (ctrl) {
                ctrl.$asyncValidators.asyncwarningvalidator3 = function (modelValue, viewValue) {
                    var deferred = $q.defer();
                    $timeout(function () {
                        var neededString = attrs.asyncwarningvalidator3;
                        var isWarning = false;
                        if(viewValue && angular.isString(viewValue)){
                            isWarning = !(viewValue.indexOf(neededString) > -1);
                        }
                        ctrl.$xuiSetWarning('asyncwarningvalidator3', isWarning);
                        deferred.resolve();
                    }, 2000);
                    return deferred.promise;
                };
            }
        }
    };
}



Xui.module.controller("CheckboxController", checkboxController, ["$scope", "xuiToastService"]);
function checkboxController($scope, toast) {
    var vm = this;

    vm.elements = [
        { text: "Plain", value: false },
        { text: "Disabled", value: false, disabled: true },
        { text: "With help text", value: false, helpText: "This is some help text" },
        { text: "Checked", value: true },
        { text: "Indeterminate", value: true, indeterminate: true },
        { text: "Indeterminate disabled", value: true, indeterminate: true, disabled: true }
    ];

    vm.checkedValues = [{ text: "Plain", value: false }, { text: "With help text", value: false, helpText: "This is some help text" }];

    vm.validate = {
        message: "This must be checked.",
        submit: function() {
            toast.success("Success!");
        }
    };
    vm.changeLog = '';
    vm.onChange = function(item, checked) {
        console.log("Change:", item, checked);
        vm.changeLog += "> " + item.text +" [" + checked + "]\n";
    };
}

Xui.module.service("getJsonLocation", jsonLocation, []);
function jsonLocation() {
    return function(lookupFile) {

        var result = "";
        if (window.location.hostname.indexOf("apollo-docs") !== -1) {
            var match = window.location.href.match(/^((?:[^\/]*\/){5})/); // will match a string which contains 5 times '/'
            result = match ? match[0] : "";
        } else {
            result = window.location.origin + "/";
        }
        return result + "data/" + lookupFile;
    };
}

