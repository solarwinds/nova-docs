///<reference path="../ref.d.ts"/>

class Module implements xui.IModule {

    constructor(private name:string) {
    }

    public app = (submodule?:string):ng.IModule => {
        return angular.module(this.name + (submodule ? "." + submodule : ""));
    };

    public config = (configConstructor:Function, inject?:string[]):ng.IModule => {
        // Deprecated. Added here for compatibility.
        if (inject) {
            configConstructor.$inject = inject;
        }

        return this.app().config(configConstructor);
    };

    public component = (name:string, componentConstructor:xui.IComponentConstructor, inject?:string[]):Module => {
        // Deprecated. Added here for compatibility.
        let componentFactory:any;
        if (inject) {
            componentConstructor.$inject = inject;
            componentFactory = componentConstructor;
        } else {
            componentFactory = this.createFactory(componentConstructor);
        }

        angular.module(this.name + ".components").directive(name, componentFactory);
        return this;
    };

    public directive = (name:string, directiveFunction:xui.IComponentConstructor, inject?:string[]):Module => {
        return this.component(name, directiveFunction, inject || []);
    };

    public service = (name:string, serviceConstructor:Function, inject?:string[]):Module => {
        // Deprecated. Added here for compatibility.
        if (inject) {
            serviceConstructor.$inject = inject;
        }

        angular.module(this.name + ".services").service(name, serviceConstructor);
        return this;
    };

    public factory = (name:string, factoryConstructor:Function, inject?:string[]):Module => {
        // Deprecated. Added here for compatibility.
        if (inject) {
            factoryConstructor.$inject = inject;
        }

        angular.module(this.name + ".services").factory(name, factoryConstructor);
        return this;
    };

    public filter = (name:string, filterConstructor:Function, inject?:string[]):Module => {
        // Deprecated. Added here for compatibility.
        if (inject) {
            filterConstructor.$inject = inject;
        }

        angular.module(this.name + ".filters").filter(name, filterConstructor);
        return this;
    };

    public provider = (name:string, providerConstructor:ng.IServiceProviderClass, inject?:string[]):Module => {
        // Deprecated. Added here for compatibility.
        if (inject) {
            providerConstructor.$inject = inject;
        }

        angular.module(this.name + ".providers").provider(name, providerConstructor);
        return this;
    };

    public controller = (name:string, controllerConstructor:Function, inject?:string[]):Module => {
        // Deprecated. Added here for compatibility.
        if (inject) {
            controllerConstructor.$inject = inject;
        }

        this.app().controller(name, controllerConstructor);
        return this;
    };

    /**
     * This function transform the constructor function of a component class into a factory
     *
     * @param constructorFn
     * @returns {any}
     */
    private createFactory = (constructorFn:Function) => {
        const factory = (...args:any[]) => {
            const instance = Object.create(constructorFn.prototype);
            constructorFn.apply(instance, args);
            return instance;
        };
        factory.$inject = constructorFn.$inject;
        return factory;
    };
}

export default Module;
