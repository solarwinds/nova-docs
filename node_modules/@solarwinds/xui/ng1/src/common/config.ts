/// <reference path="../ref.d.ts" />

import Module from "./module";
import xui from "../xui-static";

//#region Internal Methods

/** @ngInject */
function configureUrlMatcher($urlMatcherFactoryProvider:angular.ui.IUrlMatcherFactory):void {
    $urlMatcherFactoryProvider.caseInsensitive(true);
    $urlMatcherFactoryProvider.strictMode(false);
}

/** @ngInject */
function configureAria($ariaProvider:any):void {
    $ariaProvider.config({
        // Added here because of keyboard accessibility issues with datepicker:
        // Desired behavior: Pressing TAB key while focusing date input should focus the datepicker popup to make it
        // controllable by keyboard ... without this there was one more intermediate element
        tabindex: false
    });
}

/** @ngInject */
function configureRouter($locationProvider:ng.ILocationProvider):void {
    // enable html5 mode
    let provider = $locationProvider
        .html5Mode({
            enabled: true,
            requireBase: true,
            rewriteLinks: true
        });

    // Problem with ngdocs that sets the html5Mode to noop.
    if (provider) {
        provider.hashPrefix("!");
    }
}

/** @ngInject */
function configureLinks($compileProvider:ng.ICompileProvider):void {
    $compileProvider.aHrefSanitizationWhitelist(/^\s*(https?|file|javascript):/);
}

/** @ngInject */
function configureXui(constants:any):void {
    constants.watchCountInterval = 10000;
    constants.environment = {
        name: "development"
    };
}

/** @ngInject */
function configureErrorHandler($provide:angular.auto.IProvideService):void {
    $provide.decorator("$exceptionHandler", [
        "$delegate", function ($delegate:ng.IExceptionHandlerService) {
            return function (exception: Error, cause:string):void {
                // since 1.6 any uncaught promise rejection is being rethrown by $exceptionHandler
                // since cancelling a $timeout promise actually rejects it, we get error messages during tests
                // which leads to tests being failed. This specific hack is aimed to ignore error messages that occur
                // because of $timeout promise being rejected https://docs.angularjs.org/guide/migration#-q-
                // moreover, $qProvider.errorOnUnhandledRejections(false); does not save the day as $compile starts
                // to ignore errors when you do not pass all the mandatory attributes in directive
                if ("Possibly unhandled rejection: canceled" !== <string><any>exception) {
                    $delegate(exception, cause);
                }
                //debugger;
            };
        }
    ]);
}

/** @ngInject */
function configureHttp($httpProvider:ng.IHttpProvider):void {
    delete (<any>$httpProvider.defaults.headers).common["X-Requested-With"];
}

/** @ngInject */
function configureTranslations($translateProvider:angular.translate.ITranslateProvider):void {
    $translateProvider.preferredLanguage(xui.region);
    $translateProvider.fallbackLanguage("en-us");
    $translateProvider.useMissingTranslationHandlerLog();
    $translateProvider.useSanitizeValueStrategy("sanitizeParameters");

    if (xui.translations) {
        $translateProvider.translations(xui.region, xui.translations);
    }
}

/** @ngInject */
function configureTooltips($uibTooltipProvider:ng.ui.bootstrap.ITooltipProvider):void {
    $uibTooltipProvider.options({
        placement: "top",
        animation: true,
        popupDelay: 10,
        appendToBody: false
    });
}

/** @ngInject */
function configureNotifications(constants:any):void {
    toastr.options.positionClass = "toast-top-right";
    toastr.options.showEasing = "swing";
    toastr.options.showMethod = "slideDown";
    toastr.options.hideEasing = "linear";
    toastr.options.hideMethod = "slideUp";
    toastr.options.progressBar = true;
    toastr.options.preventDuplicates = true;
    toastr.options.showDuration = 500;
    toastr.options.hideDuration = 500;
    toastr.options.timeOut = constants.alertDurationMs;
    toastr.options.extendedTimeOut = 3000;
    //this a copy/paste from images/icons/command/close.svg UIF-4357
    //a copy is required (rather than using xui-icon) because the toast template does not get compiled by angular
    toastr.options.closeHtml = `<i class="xui-icon xui-icon-close xui-icon-size-sm stroked">
    <svg x="0px" y="0px" viewBox="0 0 20 20" width="20" height="20" style="enable-background:new 0 0 20 20;">
        <style type="text/css">
            .st-close0{fill:#FFFFFF;stroke:#767676;stroke-miterlimit:10;}
            .st-close1{fill:none;stroke:#297994;stroke-width:1.5;stroke-miterlimit:10;}
        </style>
        <circle class="st-close0" cx="10" cy="10" r="9.5"></circle>
        <path class="st-close1" d="M6,6l8,8 M14,6l-8,8"></path>
    </svg>
    </i>`;
    toastr.options.closeButton = true;
    toastr.options.tapToDismiss = false;
    toastr.options.toastClass = "xui-toast";
    toastr.options.iconClasses = {
        error: "xui-toast--error xui-icon-name-severity_error",
        info: "xui-toast--info xui-icon-name-severity_info",
        success: "xui-toast--success xui-icon-name-severity_ok",
        warning: "xui-toast--warning xui-icon-name-severity_warning"
    };
}

/** @ngInject */
function configureBindings($compileProvider: any) {
    $compileProvider.preAssignBindingsEnabled(true);
};

/**
 * Injecting $state is a workaround to a ui-router bug (https://github.com/angular-ui/ui-router/issues/679)
 * @ngInject
 */
function run($log:ng.ILogService, $state:angular.ui.IStateService):void {
    $log.info("module-run: " + Xui.module.app().name);
    $log.info("current-language: " + xui.region);
}

/** @ngInject */
function configureAnimations($animate:angular.animate.IAnimateService):void {
    //$animate.enabled(false); // this disables animations - for debugging purposes
}

export default (module:Module)=> {
    module.app()
        .constant("constants", {})
        .config(configureUrlMatcher)
        .config(configureAria)
        .config(configureRouter)
        .config(configureLinks)
        .config(configureXui)
        .config(configureErrorHandler)
        .config(configureHttp)
        .config(configureTranslations)
        .config(configureTooltips)
        .config(configureNotifications)
        .config(configureBindings)
        .run(run)
        .run(configureAnimations); // this is run when the injector is done loading all modules
};
