/// <reference path="../ref.d.ts" />

import ISortingService = xui.ISortingService;
/**
 * @ngdoc service
 *
 * @name xui.services:xuiSortingService
 *
 * @description
 * Service that provides sorting algorithms.
 *
 * @example
 *<example module="xui">
 *     <file src="src/services/docs/sorting-example.html" name="index.html"></file>
 *     <file src="src/services/docs/sorting-example.js" name="app.js"></file>
 *</example>
 */

    export class SortingService implements ISortingService {
        public static $inject = ["$q"];

        constructor(public $q:ng.IQService) {}

        /** @ngdoc method
         *  @name xui.services:xuiSortingService#sortBy
         *  @methodOf xui.services:xuiSortingService
         *  @description Sort items by the given property.
         *  @param {any[]} items Items to sort.
         *  @param {string} property Property or property path on which to sort.
         *  @param {string=} direction Ascending or descending sort order [direction="asc"].
         *  @returns {any[]} Sorted items.
         **/
        public sortBy = (items:any[],
                         property:string,
                         direction?:string):any[] => {

            // check 'items' array
            if (angular.isUndefined(items)) {
                throw new Error("Parameter 'items' is undefined");
            }

            if (!angular.isArray(items)) {
                throw new Error("Parameter 'items' is not Array.");
            }

            if (!angular.isString(property)) {
                throw new Error("Parameter 'property' is not a string.");
            }

            // return the same array if there are 0 or 1 element
            if (items.length < 2) {
                return items;
            }

            // undefined direction => default order "asc"
            return items.slice(0).sort(this.defaultCompareFn(property, direction === "desc"));
        };

        /**
         * @description
         * Returns a function which will sort an array of objects by the given key.
         *
         * @param  {String}  key
         * @param  {Boolean} reverse
         * @return {Function}
         */
        private defaultCompareFn = (key:string, reverse:boolean):(a:any, b:any) => number => {
            // Move smaller items towards the front or back of the array depending on
            // if we want to sort the array in reverse order or not.
            const moveSmaller = reverse ? 1 : -1;

            // Move larger items towards the front or back of the array depending on
            // if we want to sort the array in reverse order or not.
            const moveLarger = reverse ? -1 : 1;

            return function(a:any, b:any) {
                const aVal = _.get(a, key);
                const bVal = _.get(b, key);

                if (aVal < bVal) {
                    return moveSmaller;
                }
                if (aVal > bVal) {
                    return moveLarger;
                }
                return 0;
            };
        };
    }

export default SortingService;
