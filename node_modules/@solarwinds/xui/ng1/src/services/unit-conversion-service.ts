/// <reference path="../ref.d.ts" />

import IUnitConversionService = xui.IUnitConversionService;
import IUnitConversionResult = xui.IUnitConversionResult;
/**
 * @ngdoc service
 *
 * @name xui.services:xuiUnitConversionService
 *
 * @description
 * Service that provides generic unit conversion features.
 */

    export class UnitConversionService implements IUnitConversionService {

        public static $inject = ["$log"];

        constructor(private $log: ng.ILogService) {}

        /** @ngdoc method
         *  @name xui.services:xuiUnitConversionService#convert
         *  @methodOf xui.services:xuiUnitConversionService
         *  @description Convert value base.
         *  @param {number} value Items to sort.
         *  @param {number} base Conversion base (typically 1000 or 1024).
         *  @param {number} [precision=1] Precision of formatted value.
         *  Extra trailing zeros are removed independently of the precision.
         *  @returns {IUnitConversionResult} result of a convertation which consists of
         *  converted value (string) and its order (number).
         **/
        public convert = (value: number, base: number, precision: number = 1): IUnitConversionResult => {

            let resultValue: number;
            let resultOrder: number;
            let strValue: string;
            if (value !== 0) {
                resultOrder = Math.floor(Math.log(Math.abs(value)) / Math.log(base));
                resultValue = value / Math.pow(base, Math.floor(resultOrder));

                if (value > 0 && value < 1) {
                    this.$log
                        .warn("unit conversion service does not support conversion to negative order of magnitude");
                }

                // fix the precision edge case
                const valueCeiled = Math.ceil(resultValue);
                if (valueCeiled % base === 0) {
                    resultValue = valueCeiled / base;
                    resultOrder += 1;
                }

                strValue = (resultValue).toFixed(precision);

                // remove trailing zeros
                strValue = strValue.replace(/\.0+$/, "");
            } else {
                resultOrder = 0;
                strValue = value.toString();
            }

            return {
                value: strValue,
                order: resultOrder
            };
        };
    }

export default UnitConversionService;
