///<reference path="../ref.d.ts"/>
import SwUtil from "./swUtil-service";

export default class PerfService {

    public static $inject = ["$window", "$timeout", "swUtil"];

    constructor(public window: ng.IWindowService,
                public timeout: ng.ITimeoutService,
                public swUtil: SwUtil) {
    }

    private startTime = Date.now();

    private resolveMetrics: any = {
        watchersCount: () => {
            const root = angular.element(document.getElementsByTagName("body"));
            this.timeout(() => this.window["watchersCount"] = this.swUtil.countAngularWatchers(root));
        },
        digestLoop: ($scope: ng.IScope) => {
            $scope.$evalAsync(() => this.window["digestLoop"] = Date.now() - this.startTime);
        },
        pageLoad: () => {
            this.timeout(() => this.window["pageLoad"] = Date.now() - this.window.performance.timing.navigationStart);
        }
    };

    public registerMetrics = (metrics: string[], $scope?: ng.IScope): void => {
        metrics.forEach((metric) => {
            if (this.resolveMetrics.hasOwnProperty(metric)) {
                this.resolveMetrics[metric]($scope);
            }
        });
    }

}
