/// <reference path="../ref.d.ts" />

import IEventPropagationService = xui.IEventPropagationService;

/**
 * @ngdoc service
 *
 * @name xui.services:xuiEventPropagationService
 *
 * @description
 * Service that provides event propagation rules for XUI components.
 */
export class EventPropagationService implements IEventPropagationService {

    private preventedTargetSelectors:string[] = [
        "a",
        ".xui-checkbox-mark",
        ".xui-checkbox-glyph",
        ".xui-checkbox-input",
        "input",
        "button"
    ];

    // xui-button uses transclusion and so we need to check the parent too
    private preventedTargetParentSelectors:string[] = [
        "button",
        ".xui-button-content"
    ];

    /** @ngdoc method
     *  @name xui.services:xuiEventPropagationService#targetShouldPropagate
     *  @methodOf xui.services:xuiEventPropagationService
     *  @description Search the value on the items within the given properties.
     *  @param {JQueryEventObject} $event Event to handle propagation.
     *  @returns {boolean} Value indicating whether that event should be propagated.
     **/
    public targetShouldPropagate = ($event: JQueryEventObject): boolean => {
        const element: ng.IAugmentedJQuery = angular.element($event.target);
        const parentElement: ng.IAugmentedJQuery = angular.element(element.parent());

        let should: boolean = true;

        this.preventedTargetSelectors.forEach((selector:string) => {
            if (element.is(selector)) {
                should = false;
            }
        });
        this.preventedTargetParentSelectors.forEach((selector:string) => {
            if (parentElement.is(selector)) {
                should = false;
            }
        });

        return should;
    };
};
export default EventPropagationService;
