/// <reference path="../ref.d.ts" />

import NotificationService from "./notification-service";

describe("services >", () => {
    describe("notification-service >", () => {
        let notificationService:NotificationService;
        let countArgs = { count: 0 };
        const testChannel = "test";

        beforeEach(angular.mock.module("xui.services"));
        beforeEach(inject(($injector:any) => {
            notificationService = $injector.get("xuiNotificationService");
        }));
        beforeEach(() => {
           countArgs.count = 0;
        });

        it("should post notifications to a subscriber", () => {
            notificationService.subscribe(testChannel, (args:any) => {
                ++args.count;
            });

            expect(countArgs.count).toEqual(0);
            notificationService.post(testChannel, countArgs);
            expect(countArgs.count).toEqual(1);
        });

        it("should post notifications to all subscribers of the channel", () => {
            notificationService.subscribe(testChannel, (args:any) => {
                ++args.count;
            });
            notificationService.subscribe(testChannel, (args:any) => {
                args.count +=5;
            });

            expect(countArgs.count).toEqual(0);
            notificationService.post(testChannel, countArgs);
            expect(countArgs.count).toEqual(6);
        });

        it("should post notifications to the specified channel only", () => {
            notificationService.subscribe(testChannel, (args:any) => {
                ++args.count;
            });
            notificationService.subscribe("nochannel", (args:any) => {
                args.count +=5;
            });

            expect(countArgs.count).toEqual(0);
            notificationService.post(testChannel, countArgs);
            expect(countArgs.count).toEqual(1);
        });

        it("should properly unsubscribe", () => {
            const handler = (args:any) => { ++args.count; };
            notificationService.subscribe(testChannel, handler);
            expect(countArgs.count).toEqual(0);
            notificationService.post(testChannel, countArgs);
            expect(countArgs.count).toEqual(1);
            notificationService.unsubscribe(testChannel, handler);
            notificationService.post(testChannel, countArgs);
            expect(countArgs.count).toEqual(1);
        });
    });
});
