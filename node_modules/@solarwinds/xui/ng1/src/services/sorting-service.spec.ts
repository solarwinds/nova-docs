/// <reference path="../ref.d.ts" />

describe("services >", () => {
    describe("sorting >", () => {
        let sortingService:xui.ISortingService;

        beforeEach(angular.mock.module("xui.services"));

        beforeEach(inject(($injector:any) => {
            sortingService = $injector.get("xuiSortingService");
        }));

        describe("when sort() is executed over array of objects", () => {
            it("should sort based on numeric property correctly (asc)", function () {
                const items = [{name: "c", value: 2}, {name: "a", value: 1}, {name: "b", value: 3}];

                let sortedItems = sortingService.sortBy(items, "value");

                expect(sortedItems).toEqual([{name: "a", value: 1}, {name: "c", value: 2}, {name: "b", value: 3}]);
            });

            it("should sort based on numeric property correctly (desc)", function () {
                const items = [{name: "c", value: 2}, {name: "a", value: 1}, {name: "b", value: 3}];

                let sortedItems = sortingService.sortBy(items, "value", "desc");

                expect(sortedItems).toEqual([{name: "b", value: 3}, {name: "c", value: 2}, {name: "a", value: 1}]);
            });

            it("should sort based on string property correctly (asc)", function () {
                const items = [{name: "c", value: 2}, {name: "a", value: 1}, {name: "b", value: 3}];

                let sortedItems = sortingService.sortBy(items, "name");

                expect(sortedItems).toEqual([{name: "a", value: 1}, {name: "b", value: 3}, {name: "c", value: 2}]);
            });

            it("should sort based on string property correctly (desc)", function () {
                const items = [{name: "c", value: 2}, {name: "a", value: 1}, {name: "b", value: 3}];

                let sortedItems = sortingService.sortBy(items, "name", "desc");

                expect(sortedItems).toEqual([{name: "c", value: 2}, {name: "b", value: 3}, {name: "a", value: 1}]);
            });

            it("should sort complex paths", function () {
                const items = [{
                    name: "c",
                    config: {id: 2}
                }, {
                    name: "a",
                    config: {id: 3}
                }, {
                    name: "b",
                    config: {id: 1}
                }];

                let sortedItems = sortingService.sortBy(items, "config.id", "desc");

                expect(sortedItems).toEqual([{name: "a", config: {id: 3}}, {name: "c",config: {id: 2}},
                    {name: "b", config: {id: 1}}]);
            });

            it("should sort complex paths without crashing on non-existant path", function () {
                const items = [{
                    name: "x"
                }, {
                    name: "a",
                    config: {id: 3}
                }, {
                    name: "b",
                    config: {id: 1}
                }];

                let sortedItems = sortingService.sortBy(items, "config.id", "desc");

                expect(sortedItems).toEqual([{name: "x"}, {name: "a", config: {id: 3}}, {name: "b",config: {id: 1}}]);
            });
        });
    });
});
