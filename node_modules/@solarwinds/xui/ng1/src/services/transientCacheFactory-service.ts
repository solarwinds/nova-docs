/// <reference path="../ref.d.ts" />
import IMap = xui.IMap;
import IPromise = angular.IPromise;
import SwUtil from "./swUtil-service";
import ITransientCache = xui.ITransientCache;
import TransientCache from "./transientCache";

/**
 * @ngdoc service
 *
 * @name xui.services:xuiTransientCacheFactory
 *
 * @description
 * Factory that constructs ITransientCache objects and provides access to them.
 *
 * <example module="xui">
 *     <file src="src/services/docs/transientCacheFactory-example.js" name="app.js"></file>
 *     <file src="src/services/docs/transientCacheFactory-example.html" name="app.html"></file>
 * </example>
 */
export default class TransientCacheFactory {

    private cacheMap:IMap<ITransientCache> = {};

    public static $inject = ["$cacheFactory", "$timeout", "swUtil"];
    constructor(private $cacheFactory:ng.ICacheFactoryService,
                private $timeout:ng.ITimeoutService,
                private swUtil:SwUtil) {
    }

    /** @ngdoc method
     *  @name create
     *  @methodOf xui.services:xuiTransientCacheFactory
     *  @description returns a newly created ITransientCache object for use.
     *  @param {string} cacheId unique identifier of the cache
     *  @param {any} optionsMap object that specifies the cache behavior.
     *      Properties: {number=} capacity â€” turns the cache into LRU cache.
     *  @returns {ITransientCache} newly created ITransientCache object.
     *
     * {@link https://github.com/solarwinds/Xui/blob/develop/typings/solarwinds-xui/xui.d.ts ITransientCache} interface:
     *
     *      put(key:string, value:any, lifetime:number) => IPromise<void> -
     *          Puts a new key-value pair into the cache with the lifetime specified and returns it.
     *      get(key:string) => any - Returns cached value for key or undefined for cache miss.
     *      remove(key:string) - Removes pair from the cache identified by the key.
     *      removeAll() - Removes all cached pairs.
     *      destroy() - Removes references to this cache from xuiTransientCacheFactory.
     **/
    public create = (cacheId: string, optionsMap?: { capacity?: number; }):ITransientCache => {
        const cache = this.$cacheFactory(cacheId, optionsMap);
        this.cacheMap[cacheId] = new TransientCache(cache, this.$timeout, this.swUtil);
        return this.get(cacheId);
    };

    /** @ngdoc method
     *  @name get
     *  @methodOf xui.services:xuiTransientCacheFactory
     *  @description Get access to an ITransientCache object by the cacheId used when it was created.
     *  @param {string} cacheId Unique identifier of the cache.
     *  @returns {ITransientCache} cache Identified by cacheId. See
     *  {@link https://github.com/solarwinds/Xui/blob/develop/typings/solarwinds-xui/xui.d.ts ITransientCache}.
     **/
    public get = (cacheId: string): ITransientCache => {
        return this.cacheMap[cacheId];
    };

    /** @ngdoc method
     *  @name count
     *  @methodOf xui.services:xuiTransientCacheFactory
     *  @description Return the count of ITransientCache objects.
     *  @param {string} cacheId Unique identifier of the cache.
     *  @returns {number} Count of ITransientCache objects.
     **/
    public count = (): number => {
        return _.size(this.cacheMap);
    };
}
