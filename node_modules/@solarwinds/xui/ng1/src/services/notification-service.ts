/// <reference path="../ref.d.ts" />

import INotificationService = xui.INotificationService;
import NotificationHandler = xui.NotificationHandler;

interface ISubscriptionDictionary {
    [channel:string]: NotificationHandler[];
}

/**
 * @ngdoc service
 *
 * @name xui.services:xuiNotificationService
 *
 * @description
 * Service that provides generic notifications to consumers that subscribe.
 */
export class NotificationService implements INotificationService {
    private subscriptions:ISubscriptionDictionary = {};

    /** @ngdoc method
     *  @name subscribe
     *  @methodOf xui.services:xuiNotificationService
     *  @description Allows consumers to subscribe to notifications for the specified channel. Be sure to
     *              unsubscribe to avoid memory leaks.
     *  @param {string} channel Channel on which the notifications are posted.
     *  @param {NotificationHandler} handler Callback used by the consumer to act upon the notification
     *          (NotificationHandler = (args:any)) => void;
     **/
    public subscribe = (channel:string, handler:NotificationHandler): void => {
        if (!this.subscriptions[channel]) {
            this.subscriptions[channel] = [];
        }

        const handlers = this.subscriptions[channel];
        if (_.find(handlers, handler) === undefined) {
            this.subscriptions[channel].push(handler);
        }
    };

    /** @ngdoc method
     *  @name unsubscribe
     *  @methodOf xui.services:xuiNotificationService
     *  @description Allows consumers to unsubscribe from notifications for the specified channel.
     *  @param {string} channel Channel on which the notifications are posted.
     *  @param {NotificationHandler} handler Callback used by the consumer to act upon the notification
     *          (NotificationHandler = (args:any)) => void;
     **/
    public unsubscribe = (channel:string, handler:NotificationHandler): void => {
        const handlers = this.subscriptions[channel];
        if (angular.isDefined(handlers)) {
            _.pull(handlers, handler);
        }
    };

    /** @ngdoc method
     *  @name post
     *  @methodOf xui.services:xuiNotificationService
     *  @description Used by publishers to post notifications to the specified channel.
     *  @param {string} channel Channel on which the notifications are posted.
     *  @param {any} arguments Supplied to the notification handler.
     **/
    public post = (channel:string, args:any): void => {
        if (this.subscriptions[channel]) {
            this.subscriptions[channel].forEach((handler:NotificationHandler) => {
                handler(args);
            });
        }
    };

    /** @ngdoc object
     *  @name Channel
     *  @propertyOf xui.services:xuiNotificationService
     *  @description Channels well-known to xui.
     *
     *  - 'highlight' : sent to notify that an object should be highlighted.
     **/
    public Channel = {
        highlight:"highlight",
    };
}

export default NotificationService;
