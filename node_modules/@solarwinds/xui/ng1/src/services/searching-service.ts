/// <reference path="../ref.d.ts" />

import ISearchingService = xui.ISearchingService;
/**
 * @ngdoc service
 *
 * @name xui.services:xuiSearchingService
 *
 * @description
 * Service that provides searching algorithms.
 *
 * @example
 *<example module="xui">
 *     <file src="src/services/docs/searching-example.html" name="index.html"></file>
 *     <file src="src/services/docs/searching-example.js" name="app.js"></file>
 *</example>
 */

export class SearchingService implements ISearchingService {
    public static $inject = ["$q", "$log", "$filter"];

    constructor(public $q: ng.IQService, private $log: ng.ILogService, private $filter: ng.IFilterService) {
    }

    /** @ngdoc method
     *  @name xui.services:xuiSearchingService#search
     *  @methodOf xui.services:xuiSearchingService
     *  @description Search the value on the items within the given properties.
     *  @param {any[]} items Items to search within.
     *  @param {string[]} properties Properties where the search is applied. If no property specified, search is
     *  applied on all fields.
     *  @param {string|number|date} searchValue The searched value that is used as a string or string fragment. Empty
     *  string returns the whole array.
     *  @param {string} [dateFormat="mediumDate"] The Angular date format that is used for searching on Date type
     *  properties.
     *  @returns {any[]} Items resulted after the search.
     **/

    public search = (items: any[], properties: string[], searchValue: any, dateFormat?: string): any[] => {
        // TODO: in case of interest, create options as object, put dateFormat in, put caseSensitive in
        if (!angular.isArray(items)) {
            this.$log.error("xuiSearchingService needs items parameter as an Array");
        }
        if (!angular.isArray(properties)) {
            this.$log.error("xuiSearchingService needs properties parameter as an Array");
        }
        if (!properties.length) {
            properties = this.getSearchableColumns(items);
            this.$log.warn("No properties specified to search on, so all of the fields" +
                "will be used");
        }
        if (!searchValue) {
            this.$log.warn("No searchValue specified to search by, the whole list will be the result");
            return items;
        }
        return items.filter((item) => {
            if (angular.isString(item) || angular.isNumber(item)) {
                return item.toString().toLowerCase().indexOf(searchValue.toString().toLowerCase()) !== -1;
            }
            for (let prop of properties) {
                let value = angular.isObject(item) ? item[prop] : item;

                if (angular.isDate(value)) {
                    value = this.$filter("date")(value, dateFormat);
                }
                if (angular.isDate(searchValue)) {
                    searchValue = this.$filter("date")(searchValue, dateFormat);
                }
                if (value && value.toString().toLowerCase().indexOf(searchValue.toString().toLowerCase()) !== -1) {
                    return true;
                }
            }
        });
    };

    private getSearchableColumns = (items: any) => {
        let props: {[key: string]: boolean} = {};
        for (let item of items) {
            _.keys(item).map((key) => {
                if (!_.startsWith(key, "$")) {
                    props[key] = true;
                }
            });
        }
        return _.keys(props);
    };
};
export default SearchingService;
