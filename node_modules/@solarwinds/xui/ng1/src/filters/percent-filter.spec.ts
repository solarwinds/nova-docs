/// <reference path="../ref.d.ts" />
import {default as SpecHelper, ITestScope} from "../specHelper";

describe("filters >", () => {
    describe("percent filter >", () => {

        let element: ng.IAugmentedJQuery;
        let $scope: ITestScope;
        let $compile: ng.ICompileService;

        let createHtml = (valueToFormat: number, numberOfDecimals: number) => {
            return `<div id="percent-filter-test">
                  {{${valueToFormat} | swPercent:${numberOfDecimals}}}
                </div>`;
        };

        beforeEach(angular.mock.module("xui.filters"));

        beforeEach(inject(($injector: any) => {
            $scope = $injector.get("$rootScope");
            $compile = $injector.get("$compile");
        }));

        afterEach(() => {
            angular.element("#percent-filter-test").remove();
        });

        let testFilter = (valueToFormat: number, numberOfDecimals: number, expectedResult: string) => {
            return () => {

                const html = createHtml(valueToFormat, numberOfDecimals);
                element = SpecHelper.getCompiledElement($compile, $scope, html);
                angular.element(document.body).append(element);

                expect(element[0].innerText).toBe(expectedResult);

            };
        };

        it("should return numbers <= 1 as percent. 0.9999 (2) -> 99.99%",
            testFilter(0.9999, 2, "99.99%"));
        it("should return numbers <= 1 as percent. 0.9999 (0) -> 100%",
            testFilter(0.9999, 0, "100%"));
        it("should return numbers <= 1 as percent. 1 -> 100.00%",
            testFilter(1, 2, "100.00%"));
        it("should return numbers > 1 as percent. 1.00 -> 100%",
            testFilter(1.00, 0, "100%"));
        it("should properly round numbers. 19.49 -> 19%",
            testFilter(19.49, 0, "19%"));
        it("should properly round numbers. 19.50 -> 20%",
            testFilter(19.50, 0, "20%"));

    });
});
