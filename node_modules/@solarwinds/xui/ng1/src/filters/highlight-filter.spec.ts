/// <reference path="../ref.d.ts" />
import {default as SpecHelper, ITestScope} from "../specHelper";

describe("filters >", () => {
    describe("highlight filter >", () => {

        let element: ng.IAugmentedJQuery;
        let $scope: ITestScope;
        let $compile: ng.ICompileService;

        let createHtml = (textToSearch: string, termToSearch: string) => {
            return `<div id="highlight-filter-test" ng-bind-html="'${textToSearch}' | xuiHighlight:'${termToSearch}'">
                </div>`;
        };

        beforeEach(angular.mock.module("xui.filters"));

        beforeEach(inject(($injector: any) => {
            $scope = $injector.get("$rootScope");
            $compile = $injector.get("$compile");
        }));

        afterEach(() => {
            angular.element("#highlight-filter-test").remove();
        });

        let testFilter = (textToSearch: string, termToSearch: string, expectedResult: string) => {
            return () => {

                const html = createHtml(textToSearch, termToSearch);
                element = SpecHelper.getCompiledElement($compile, $scope, html);
                angular.element(document.body).append(element);

                expect(element.html()).toBe(expectedResult);

            };
        };

        it("should wrap entire text if it matches",
            testFilter(
                "text",
                "text",
                "<span class=\"xui-highlighted\">text</span>"));

        it("should wrap a match inside the text",
            testFilter(
                "contextual",
                "text",
                "con<span class=\"xui-highlighted\">text</span>ual"));

        it("should wrap multiple matches in the text",
            testFilter(
                "text out of context",
                "text",
                "<span class=\"xui-highlighted\">text</span> out of con<span class=\"xui-highlighted\">text</span>"));

        it("should properly handle non-alphabet symbols in the text",
            testFilter(
                "text ^ $ * + ? . ( ) | { } [ ]",
                "^ $ * + ? . ( ) | { } [ ]",
                "text <span class=\"xui-highlighted\">^ $ * + ? . ( ) | { } [ ]</span>"));

    });
});
