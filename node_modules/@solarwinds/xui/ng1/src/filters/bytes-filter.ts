import IUnitConversionService = xui.IUnitConversionService;
import IUnitConversionResult = xui.IUnitConversionResult;
import IUnitConversionConstants = xui.IUnitConversionConstants;
/**
 * @ngdoc filter
 * @name xui.filter:xuiBytes
 *
 * @description
 * [DEPRECATED, please, use xuiUnitConversion instead]
 * Filter used for formatting bytes value. Unit suffix is automatically added based on value.
 *
 * @param {string} bytes The source value.
 * @param {number} precision Precision of formatted value.
 * Extra trailing zeros are removed independently of the precision.
 * @param {string} plusSign If true and source value is positive, plus sign prefix is added.
 */

function bytesFilter (xuiUnitConversionService: IUnitConversionService,
                      xuiUnitConversionConstants: IUnitConversionConstants) {
    console.warn("[Deprecation] swBytes and xuiBytes are deprecated, use xuiUnitConversion instead");

    return (bytes: any, precision?: number, plusSign?: boolean): string => {
        if (isNaN(parseFloat(bytes)) || !isFinite(bytes)) {
            return "---";
        }

        const units = xuiUnitConversionConstants.bytes;

        if (bytes === 0) {
            return bytes + " " + units[3];
        }

        let convResult: IUnitConversionResult = xuiUnitConversionService.convert(bytes as number, 1024, precision);

        const prefix = plusSign && bytes > 0 ? "+" : "";

        return prefix + convResult.value + " " + units[convResult.order];
    };
}

bytesFilter.$inject = ["xuiUnitConversionService", "xuiUnitConversionConstants"];

export default bytesFilter;
