import IUnitConversionService = xui.IUnitConversionService;
import IUnitConversionResult = xui.IUnitConversionResult;
import IUnitConversionConstants = xui.IUnitConversionConstants;
import UnitOption = xui.UnitOption;
/**
 * @ngdoc filter
 * @name xui.filter:xuiUnitConversion
 *
 * @description
 * Filter used for formatting value of different units. Unit suffix is automatically added based on value.
 * Units that are supported: bytes, bits per second, hertz.
 * @param {string} value The source value.
 * @param {number} precision Precision of formatted value.
 * Extra trailing zeros are removed independently of the precision.
 * @param {string} plusSign If true and source value is positive, plus sign prefix is added.
 * @param {UnitOption} unit type of unit: bytes, bits per second or hertz. Effects scale and unit shortcut value in the
 * function output.
 */
function unitConversionFilter (xuiUnitConversionService: IUnitConversionService,
                                  xuiUnitConversionConstants: IUnitConversionConstants) {
    return (value: any, precision: number = 0, plusSign: boolean = false, unit: UnitOption = "bytes"): string => {
        const scale = unit === "bytes" ? 1024 : 1000;

        if (isNaN(parseFloat(value)) || !isFinite(value)) {
            return "N/A";
        }

        if (value === 0) {
            return value + " " + xuiUnitConversionConstants[unit][0];
        }
        let convResult: IUnitConversionResult = xuiUnitConversionService
            .convert(value as number, scale, precision);
        const prefix = plusSign && value > 0 ? "+" : "";

        return prefix + convResult.value + " " + xuiUnitConversionConstants[unit][convResult.order];
    };
}
unitConversionFilter.$inject = ["xuiUnitConversionService", "xuiUnitConversionConstants"];
export default unitConversionFilter;
