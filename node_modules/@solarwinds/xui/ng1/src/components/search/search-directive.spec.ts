import {SearchController} from "./search-controller";
import {Constants} from "../../common/constants";

describe("components >", () => {
    describe("search >", () => {
        describe("search-controller >", () => {
            let _search:SearchController;
            let _$q:ng.IQService;
            let _$timeout:ng.ITimeoutService;
            let _$rootScope:ng.IRootScopeService;
            let _constants:Constants;
            let _initialObject: any = {remoteControl: {}};

            describe("with remote control", () => {
                beforeAll(jasmine.clock().install);
                beforeEach(angular.mock.module("xui"));
                beforeEach(inject(($controller:ng.IControllerService, $q:ng.IQService,
                                   $timeout:ng.ITimeoutService, $log:ng.ILogService,
                                   $rootScope:ng.IRootScopeService, xuiConstants:Constants) => {
                    _$q = $q;
                    _$timeout = $timeout;
                    _$rootScope = $rootScope;
                    _constants = xuiConstants;
                    _search = <SearchController>$controller("xuiSearchController", {
                        $scope: $rootScope.$new(true),
                        $q: $q,
                        constants: xuiConstants
                    }, _initialObject);
                }));

                it("should evaluate onSearch expression when value is specified", () => {
                    _search.onSearch = jasmine.createSpy("onSearch");
                    _search.value = "some value";
                    _search.search();
                    _$rootScope.$apply();
                    expect(_search.onSearch).toHaveBeenCalled();
                });

                it("should search when keypress called", () => {
                    _search.onSearch = jasmine.createSpy("onSearch");
                    _search.value = "some value";
                    _search.onKeypress(<JQueryEventObject>{which: _constants.KEY_CODE.ENTER});
                    _$rootScope.$apply();
                    expect(_search.onSearch).toHaveBeenCalled();
                });

                it("should search when select called", () => {
                    _search.onSearch = jasmine.createSpy("onSearch");
                    _search.value = "some value";
                    _search.select();
                    _$rootScope.$apply();
                    expect(_search.onSearch).toHaveBeenCalled();
                });

                it("should provide cancellation promise onSearch", () => {
                    let wasSearched = false;
                    let searchFinished = false;
                    let wasCancelled = false;

                    _search.onSearch = (params:{ value:any, cancellation:ng.IPromise<void> }) => {
                        wasSearched = true;
                        const promise = _$timeout(() => {
                            searchFinished = true;
                        }, 100);
                        params.cancellation.then(() => {
                            _$timeout.cancel(promise);
                            wasCancelled = true;
                        });
                        return promise;
                    };
                    _search.value = "some value";
                    _search.search();

                    _$rootScope.$apply();
                    expect(wasSearched).toBe(true);
                    expect(searchFinished).toBe(false);

                    _search.cancel();
                    _$rootScope.$apply();
                    _$timeout.flush();
                    jasmine.clock().tick(200);

                    expect(wasCancelled).toBe(true);
                    expect(searchFinished).toBe(false);
                });

                it("should complete search when onSearch resolves", () => {
                    let searchFinished = false;

                    _search.onSearch = (params:{ value:any, cancellation:ng.IPromise<void> }) => {
                        return _$timeout(() => {
                            searchFinished = true;
                        }, 100);
                    };

                    _search.value = "some value";
                    _search.search();
                    _$rootScope.$apply();

                    expect(searchFinished).toBe(false);
                    expect(_search.isBusy).toBe(true);
                    expect(_search.isActive).toBe(true);

                    _$timeout.flush();
                    jasmine.clock().tick(200);

                    expect(searchFinished).toBe(true);
                    expect(_search.isBusy).toBe(false);
                    expect(_search.isActive).toBe(true);
                });

                it("should cancel when changed", () => {
                    let searchFinished = false;

                    _search.onSearch = (params:{ value:any, cancellation:ng.IPromise<void> }) => {
                        const promise = _$timeout(() => {
                            searchFinished = true;
                        }, 100);
                        params.cancellation.then(() => {
                            _$timeout.cancel(promise);
                        });
                        return promise;
                    };

                    _search.value = "some value";
                    _search.search();
                    _$rootScope.$apply();

                    expect(searchFinished).toBe(false);
                    expect(_search.isBusy).toBe(true);

                    _search.onChangeModel();

                    _$rootScope.$apply();
                    _$timeout.flush();

                    jasmine.clock().tick(200);

                    expect(searchFinished).toBe(false);
                    expect(_search.isBusy).toBe(false);
                });

                it("should create onSearch function", () => {
                    _search.onSearch = jasmine.createSpy("onSearch");
                    _search.value = "searchterm";
                    _$rootScope.$apply();
                    _search.remoteControl.search();
                    _$rootScope.$apply();

                    expect(_search.onSearch).toHaveBeenCalled();
                });
            });
            describe("without remote control", () => {
                beforeEach(angular.mock.module("xui"));
                beforeEach(inject(($controller:ng.IControllerService, $q:ng.IQService,
                                   $timeout:ng.ITimeoutService, $log:ng.ILogService,
                                   $rootScope:ng.IRootScopeService, xuiConstants:Constants) => {
                    _$q = $q;
                    _$timeout = $timeout;
                    _$rootScope = $rootScope;
                    _constants = xuiConstants;
                    _search = <SearchController>$controller("xuiSearchController", {
                        $scope: $rootScope.$new(true),
                        $q: $q,
                        constants: xuiConstants
                    });
                }));
                it("should not initialize remote access to search", () => {
                    _search.onSearch = jasmine.createSpy("onSearch");
                    _$rootScope.$apply();
                    expect(_search.remoteControl).not.toBeDefined();
                });
            });
        });
    });
});
