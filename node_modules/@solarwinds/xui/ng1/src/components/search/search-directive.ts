import {SearchController} from "./search-controller";

/**
 * @ngdoc directive
 * @name xui.directive:xuiSearch
 * @restrict E
 *
 * @description
 * Search element represented by input box with search icon on the right side of the box. Can be set with three sizes:
 * small, basic, and large.
 *
 * @parameters
 * @param {string=} name User friendly name of control.
 * @param {string=} placeholder A string that will be placed as a watermark inside of the search when it's empty.
 * @param {string=} caption A string that will be used as the label.
 * @param {string=} display-value Object property name that will be used for item presentation and search.
 * @param {boolean=} is-disabled Indicates if the input should appear as disabled. Set true to disable input.
 * @param {number} [item-limit=10] Number of suggested items that will be displayed.
 * @param {object=} value Assignable Angular expression to data-bind to.
 * @param {array=} items-source Items source array to search in.
 * @param {expression} on-search Expression that is evaluated when the user performs a search.
 * @param {function=} on-clear Function that is called when the user clears the search field.
 *
 * @example
 *    <example module="xui">
 *        <file src="src/components/search/docs/search-examples.html" name="index.html"></file>
 *        <file src="src/components/search/docs/search-examples.js" name="script.js"></file>
 *    </example>
 */
export default class Search implements ng.IDirective {
    public static $inject = ["swUtil"];

    constructor(private swUtil:any) {
    }

    public restrict = "E";
    public templateUrl = "xui/components/search/search-directive.html";
    public replace = true;
    public transclude = false;
    public scope = {};
    public controller = SearchController;
    public controllerAs = "searchCtrl";
    public bindToController = {
        name: "@?",
        itemsSource: "<?",
        value: "=?",
        caption: "@?",
        placeholder: "@?",
        itemLimit: "@?",
        displayValue: "=?",
        isDisabled: "=?",
        searchOnChange: "=?",
        searchDebounce: "=?",
        onSearch: "&",
        onClear: "&?",
        onCancel: "&?",
        onChange: "&?", // [DEPRECATED]
        onBlur: "&?ngBlur",
        onFocus: "&?ngFocus",
        remoteControl: "<?"
    };

    public compile = (element:ng.IAugmentedJQuery, attrs:ng.IAttributes) => {
        const $input = element.find("input");

        // is-disabled
        if (attrs["isDisabled"]) {
            $input.attr("ng-disabled", "searchCtrl.isDisabled");
        }

        return {post: this.postLink};
    };

    private postLink = (scope:ng.IScope, element:ng.IAugmentedJQuery,
                        attrs:ng.IAttributes) => {
        this.swUtil.initComponent(attrs, "search");
    };
}
