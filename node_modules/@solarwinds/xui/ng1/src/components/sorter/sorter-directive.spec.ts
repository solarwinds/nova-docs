import ISorterController from "./sorter-controller";
import SpecHelper from "../../specHelper";

describe("components >", () => {
    describe("sorter >", () => {
        let element:ng.IAugmentedJQuery,
            scope:any,
            ctrl:ISorterController,
            compile:ng.ICompileService;

        beforeEach(angular.mock.module("xui"));

        beforeEach(inject(function ($compile:ng.ICompileService, $rootScope:any) {
            compile = $compile;
            scope = $rootScope.$new();

            scope.displayValue = "value";

            scope.direction = "asc";

            scope.items = [{
                name: "animal",
                value: "Animals"
            }, {
                name: "stone",
                value: "Stone"
            }, {
                name: "fruit",
                value: "Fruit"
            }];

            scope.selectedItem = {
                name: "fruit",
                value: "Fruit"
            };
        }));

        const directive = `<xui-sorter caption='xui-sorter' selected-item='selectedItem'
            items-source='items' display-value='{{::displayValue}}' sort-direction='direction'
            on-change='vm.onChange(newValue, oldValue)'></xui-sorter>`;

        describe("when component is compiled", () => {
            it("should replace directive element", () => {
                // act
                element = SpecHelper.getCompiledElement(compile, scope, directive);

                // assert
                expect(element[0].tagName.toLowerCase()).not.toEqual("xui-sorter");
            });
        });

        describe("when sort direction has been changed", () => {
            it("should invoke onChange callback", () => {
                // act
                element = SpecHelper.getCompiledElement(compile, scope, directive);

                ctrl = element.controller("xuiSorter");
                ctrl.onChange = jasmine.createSpy("onChange");

                ctrl.sortDirection = "desc";
                scope.$apply();

                // assert
                expect(ctrl.onChange).toHaveBeenCalled();
            });
        });

        describe("when sort item has been changed", () => {
            it("should invoke onChange callback", () => {
                // act
                element = SpecHelper.getCompiledElement(compile, scope, directive);

                ctrl = element.controller("xuiSorter");
                ctrl.onChange = jasmine.createSpy("onChange");

                ctrl.selectedItem = {name: "stone", value: "Stone"};
                scope.$apply();

                // assert
                expect(ctrl.onChange).toHaveBeenCalled();
            });
        });
    });
});
