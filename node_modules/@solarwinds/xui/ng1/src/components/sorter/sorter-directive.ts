import SorterController from "./sorter-controller";
import {ISorterController} from "./sorter-controller";

/**
 * @ngdoc directive
 * @name xui.directive:xuiSorter
 * @restrict E
 *
 * @description
 * Dropdown that emits sort events on item-selection and on selected-item-click.
 * Click the selected value to toggle the sort order (asc/desc).
 *
 * @parameters
 * @param {string} caption Value used as a label for the Sorter dropdown.
 * @param {any[]} items-source Value used to populate the Sorter dropdown.
 * @param {any} selected-item Value used as the initially selected item.
 * @param {string} display-value Specifies the field of the selected item used for display.
 * @param {string} sort-direction Variable for sort direction. Values can be: `asc`, `desc` or `original`.<br>
 * `original` value means that order of items should be preserved and sorting shouldn't be applied at all.
 * This value is intended to be used as initial and when user changes it to other value, it can't be selected back by UI
 * @param {function} on-change Function to execute when sorting changes. Accepts two parameters: 'newValue' and
 * 'oldValue'.
 *
 * @example
 *    <example module="xui">
 *        <file src="src/components/sorter/docs/sorter-examples.html" name="index.html"></file>
 *        <file src="src/components/sorter/docs/sorter-examples.js" name="app.js"></file>
 *    </example>
 */

    class Sorter implements ng.IDirective {
        public static $inject = ["swUtil"];
        constructor(private swUtil:any) {}

        public restrict = "E";
        public templateUrl = "xui/components/sorter/sorter-directive.html";
        public replace = true;
        public scope = {};
        public bindToController = {
            size: "@",
            caption: "@",
            itemsSource: "=",
            selectedItem: "=",
            displayValue: "@",
            sortDirection: "=",
            onChange: "&?"
        };
        public controller = SorterController;
        public controllerAs = "vm";

        public link = (scope:ng.IScope,
                       element:ng.IAugmentedJQuery,
                       attrs:ng.IAttributes,
                       ctrl:ISorterController) => {
            this.swUtil.initComponent(attrs, "sorter");

            // raise event if sorting has been changed
            scope.$watchCollection(
                () => {
                    return [ctrl.selectedItem, ctrl.sortDirection];
                },
                (newValue:any, oldValue:any) => {
                    if (newValue !== oldValue) {
                        if (angular.isFunction(ctrl.onChange)) {
                            scope.$evalAsync(() => {
                                ctrl.onChange(
                                    {
                                        newValue: {sortBy: newValue[0], direction: newValue[1]},
                                        oldValue: {sortBy: oldValue[0], direction: oldValue[1]}
                                    }
                                );
                            });
                        }
                    }
                });
        };
    }

export default Sorter;
