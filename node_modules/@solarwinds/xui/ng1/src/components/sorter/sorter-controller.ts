export interface ISorterController {
    selectedItem: any;
    sortDirection: string;
    onChange:(params:{newValue: any, oldValue: any}) => void;
}

export class SorterController implements ISorterController {

    public static DIRECTION = {
        ascending: "asc",
        descending: "desc",
        original: "original"
    };

    public sortIcons:{[key:string]:string} = {
        "asc": "arrow-up",
        "desc": "arrow-down"
    };

    public iconStyle:{[key:string]:string} = {
        "xsmall": "xui-sorter-icon-xsmall",
        "small": "xui-sorter-icon-small",
        "large": "xui-sorter-icon-large"
    };

    public size:string;
    public selectedItem:any;
    public sortDirection:string;
    public onChange:(params:{newValue: any, oldValue: any}) => void;

    constructor() {
        this.initSortDirection();
    }

    public getSortIcon = ():string => {
        return this.sortIcons[this.sortDirection];
    };

    public toggleSortDirection = ():void => {
        this.sortDirection = (this.sortDirection === SorterController.DIRECTION.ascending) ?
            SorterController.DIRECTION.descending : SorterController.DIRECTION.ascending;
    };

    private initSortDirection = ():void => {
        if (_.values(SorterController.DIRECTION).indexOf(this.sortDirection) === -1) {
            this.sortDirection = SorterController.DIRECTION.ascending;
        }
    };
}

export default SorterController;
