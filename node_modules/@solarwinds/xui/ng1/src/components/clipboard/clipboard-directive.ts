import ClipboardController from "./clipboard-controller";

/**
 * @ngdoc directive
 * @name xui.directive:xuiClipboard
 * @restrict A
 *
 * @description
 * Component used for copying text to the clipboard.
 *
 * @parameters
 * @param {expression} xui-clipboard Value that should be added to the clipboard.
 * @param {expression=} on-clipboard-success Evaluated when text is successfully copied to the clipboard.
 * @param {expression=} on-clipboard-error Evaluated when the copy operation fails for some reason.
 *
 * @example
 *    <example module="xui">
 *        <file src="src/components/clipboard/docs/clipboard-examples.html" name="index.html"></file>
 *        <file src="src/components/clipboard/docs/clipboard-examples.js" name="script.js"></file>
 *    </example>
 */

export default class Clipboard implements ng.IDirective {
    public static $inject = ["$document", "$log", "$timeout"];

    constructor(private $document:ng.IDocumentService, private $log:ng.ILogService,
                private $timeout:ng.ITimeoutService) {
    }

    public restrict = "A";
    public scope = false;
    public controller = "xuiClipboardController";
    public controllerAs = "clipCtrl";
    public bindToController = {
        text: "&xuiClipboard",
        onClipboardSuccess: "&?",
        onClipboardError: "&?"
    };

    public link = (scope:ng.IScope, element:ng.IAugmentedJQuery,
                   attrs:ng.IAttributes, controller:ClipboardController) => {
        const document = <any>this.$document[0];
        let hasSupport = false;

        element.click((event:JQueryEventObject) => {
            event.preventDefault();
            scope.$apply(controller.copyText);
        });

        // Need to do this in a $timeout in order to work on the build server.
        this.$timeout(() => {
            try {
                hasSupport = document.queryCommandSupported("copy");
            } catch (ex) {
                this.$log.error(ex);
            }

            if (hasSupport) {
                scope.$watch(controller.text, (newValue:string, oldValue:string) => {
                    const disabled = !angular.isString(newValue) || !newValue.length;
                    element.prop("disabled", disabled);
                });
            } else {
                this.$log.warn("Document copy operation is not supported.");
                element.off("click").hide();
            }
        });
    };
}
