/// <reference path="../../ref.d.ts" />

import xuiStatic from "../../xui-static";

class ClipboardController {
    public static $inject = ["$document", "$log"];

    constructor(private $document:ng.IDocumentService, private $log:ng.ILogService) {
        this._document = <any>$document[0];
    }

    public onClipboardSuccess:() => void;
    public onClipboardError:(error:any) => void;
    public text:() => string;

    public copyText = ():void => {
        if (!angular.isFunction(this.text)) {
            throw this.minErr("noexpr", "No expression was provided to xui-clipboard.");
        }

        const text = this.text();
        if (!text || !angular.isString(text) || !text.length) {
            throw this.minErr("notext", "xui-clipboard text is empty or not a string.");
        }

        const node = this.createNode(this.text());

        try {
            this._document.body.appendChild(node);

            const selection = this._document.getSelection();
            selection.removeAllRanges();
            node.select();

            if (!this._document.execCommand("copy")) {
                throw this.minErr("copyfail", "Failed to copy text.");
            } else if (angular.isFunction(this.onClipboardSuccess)) {
                this.onClipboardSuccess();
            }

            selection.removeAllRanges();
        } catch (ex) {
            this.$log.error(ex);
            if (angular.isFunction(this.onClipboardError)) {
                this.onClipboardError(ex);
            }
        }
        finally {
            this._document.body.removeChild(node);
        }
    };

    private createNode = (text:string):HTMLTextAreaElement => {
        const node = this._document.createElement("textarea");
        node.style.position = "absolute";
        node.style.left = "-10000px";
        node.textContent = text;
        return node;
    };

    private _document:Document;
    private minErr = xuiStatic.minErr("xuiClipboard");
}

export default ClipboardController;
