import SpecHelper from "../../specHelper";
import {IProgressScope} from "./progress-directive";

describe("components >", () => {
    describe("progress >", () => {
        let scope:ng.IScope;
        let compile:ng.ICompileService;

        beforeEach(angular.mock.module("xui"));
        beforeEach(inject(($injector:any) => {
            scope = $injector.get("$rootScope");
            compile = $injector.get("$compile");
            scope.$digest();
        }));

        const progressBarPecents = 50;
        const message = "Discovering the network, please wait...";
        const hint = "Discovered 10.199.1.2. Trying SNMP credentials...";

        const progressBarDirective = [
            "<xui-progress show='show' ",
            "show-progress='true' ",
            "allow-cancel='false'",
            "percent='",
            progressBarPecents.toString(),
            "' message='",
            message,
            "' help-text='Discovered 10.199.1.2. Trying SNMP credentials...'></xui-progress>"
        ].join("");

        const loadingSpinDirective = [
            "<xui-progress show='show' ",
            "show-progress='false' ",
            "message='Loading data, please wait...' ",
            "help-text='Additional info can be included as little gray text like this'></xui-progress>"
        ].join("");

        let getCompiledDirective = (directive:string):IProgressScope => {
            let compiledElement = SpecHelper.getCompiledElement(compile, scope, directive);
            scope.$digest();
            return <IProgressScope>compiledElement.isolateScope();
        };

        it("should display " + progressBarPecents + "% of progress", () => {
            const directiveScope = getCompiledDirective(progressBarDirective);
            expect(directiveScope.percent).toEqual("50");
        });

        it("should display '" + message + "' message in progress bar", () => {
            const directiveScope = getCompiledDirective(progressBarDirective);
            expect(directiveScope.message).toEqual(message);
        });

        it("should display '" + hint + "' hint in progress bar", () => {
            const directiveScope = getCompiledDirective(progressBarDirective);
            expect(directiveScope.helpText).toEqual(hint);
        });

        it("progress bar should be hidden", () => {
            const directiveScope = getCompiledDirective(loadingSpinDirective);
            expect(directiveScope.showProgress).toEqual(false);
        });

        it("cancel should be hidden", () => {
            const directiveScope = getCompiledDirective(progressBarDirective);
            expect(directiveScope.allowCancel).toEqual(false);
        });
    });
});
