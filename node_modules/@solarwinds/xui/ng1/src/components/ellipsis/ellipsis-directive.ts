import Inject from "../../decorators/di";
import IDirective = ng.IDirective;
import ICompileService = ng.ICompileService;
import IEllipsisScope = xui.IEllipsisScope;
import IAugmentedJQuery = ng.IAugmentedJQuery;
import IAttributes = ng.IAttributes;
import { EllipsisController } from "./ellipsis-controller";

/**
 * @ngdoc directive
 * @name xui.directive:xuiEllipsis
 * @restrict A
 *
 * @description
 * XUI Ellipsis directive wraps text of its target and create ellipsis effect
 * if text is larger then it's parent element.
 *
 * @parameters
 * @param {boolean=} is-ellipsis-enabled Flag for turning tooltip on/off from outer controller.
 * @param {boolean=} append-to-body If set to true the ellipsis element will be appended at the end of the HTML body
 * element. If false, default value, it will be appended to the actual ellipsis element.
 * `NOTE`: When using ellipsis in widgets, set this to true.
 * @param {boolean | string=} find-parent-class Flag for turning calculation based on Parent element width. <br>
 * `IMPORTANT!` you need to define parent element by class `.ellipsis-parent-full-width.` Usually we put
 * this class on element that has set fixed width (like container). <br>
 *  If you get into trouble (probably you trying to nest more ellipsis) you can
 *  specify what's the name of parent class, instead of `find-parent-class="true"`, <br> you can
 *  use`<div class="my-class-name">..<span ellipsis find-parent-class="my-class-name"></span>..</div>`
 * @param {xui.IEllipsisOptions} ellipsis-options Object width currently available parameters:
 * @param {string} [ellipsis-options.tooltipText=''] Full text for tooltip usage.
 * @param {IEllipsisTooltipOptions=} [ellipsis-options.tooltipOptions={}] List of options for our
 * tooltip.
 * @param {string=} [ellipsis-options.htmlBindTemplate=''] For using ng-bind-html.
 * Note: When using with string inside, use template string like in example `vm.title | xuiHighlight:"HTML"`
 *
 * @example
 *    <example module="xui">
 *        <file src="src/components/ellipsis/docs/ellipsis-examples.html" name="index.html"></file>
 *        <file src="src/components/ellipsis/docs/ellipsis-examples.css" name="style.css"></file>
 *        <file src="src/components/ellipsis/docs/ellipsis-examples.js" name="app.js"></file>
 *    </example>
 */

export class EllipsisDirective implements IDirective {

    constructor(@Inject("$compile") private $compile: ICompileService) {
    }

    public template = require<string>("./ellipsis-directive.html");
    public restrict = "A";
    public transclude = true;
    public scope = true;
    public bindToController = {
        ellipsisOptions: "<",
        isEllipsisEnabled: "=?",
        appendToBody: "=?",
        findParentClass: "@?"
    };
    public controller = "xuiEllipsisController";
    public controllerAs = "ctrl";

    public link = (scope: IEllipsisScope, element: IAugmentedJQuery,
                   attrs: IAttributes, ctrl: EllipsisController): void => {

        const elementContents = element.contents();

        elementContents.attr("uib-tooltip", ctrl.ellipsisOptions.tooltipText);
        element.addClass("xui-ellipsis");

        if (_.includes(window.navigator.userAgent, "Trident")) {
            elementContents.addClass("text-overflow-ie");
        }

        if (_.isString(ctrl.ellipsisOptions.htmlBindTemplate)) {
            elementContents.append("<span class='xui-ellipsis-inner__text'></span>")
                .find(".xui-ellipsis-inner__text")
                .attr("ng-bind-html", ctrl.ellipsisOptions.htmlBindTemplate);
        }

        _.each(ctrl.ellipsisOptions.tooltipOptions, (value: any, key: string) => {
            elementContents.attr(key, value);
        });

        if (!_.isBoolean(ctrl.isEllipsisEnabled)) {
            // prevent collision with popover resizeCallback
            angular.element("body").addClass("resized-tooltip");

            scope.$applyAsync(() => {
                this.updateWidth(element, scope, ctrl);
                ctrl.isEllipsisEnabled = scope.ellipsisTextWidth > scope.parentElementWidth;
            });

            element.find(".xui-ellipsis-inner")
                .on("resize", _.debounce(() => {
                this.updateWidth(element, scope, ctrl);
                scope.$applyAsync(() => ctrl.isEllipsisEnabled = scope.ellipsisTextWidth > scope.parentElementWidth);
            }, 100));
        }

        this.$compile(elementContents)(scope);
    };

    private updateWidth = (element: IAugmentedJQuery, scope: IEllipsisScope, ctrl: EllipsisController): void => {
        scope.ellipsisTextWidth =  element.find(".xui-ellipsis-inner__text").width();

        if (ctrl.findParentClass === "true") {
            scope.parentElementWidth = element.closest(".ellipsis-parent-full-width").width();
        } else if (_.isString(ctrl.findParentClass)) {
            scope.parentElementWidth = element.closest("."+ ctrl.findParentClass).width();
        } else {
            scope.parentElementWidth = element.contents().width();
        }
    };
}
