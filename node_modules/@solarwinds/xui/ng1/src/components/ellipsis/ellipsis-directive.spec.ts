/// <reference path="../../ref.d.ts" />
import ICompileService = ng.ICompileService;
import IRootScopeService = ng.IRootScopeService;
import IEllipsisScope = xui.IEllipsisScope;

describe("components >", () => {
    describe("ellipsis >", () => {
        let scope: IEllipsisScope;
        let compile: ICompileService;

        beforeEach(angular.mock.module("xui"));

        beforeEach(inject(($rootScope: IRootScopeService, $compile: ICompileService) => {
            scope = <IEllipsisScope>$rootScope.$new();
            let title = "HTML is great for declaring static documents but it falters when we try to use it " +
                "for declaring dynamic views in web-applications.";
            scope.ellipsisOptions = {
                tooltipText: title,
                tooltipOptions: {
                    "tooltip-placement": "bottom"
                },
                htmlBindTemplate: "title | lowercase"
            };
            compile = $compile;
        }));

        const ellipsisTooltip = `<span xui-ellipsis
                                        ellipsis-options="ellipsisOptions"
                                        style="width: 300px;">ellipsisOptions.title</span>`;

        it("should pass tooltipText", () => {
            const compiledElement = compile(ellipsisTooltip)(scope);
            scope.$digest();
            const tooltip = _.first(compiledElement.find(".xui-ellipsis-inner"));
            expect(tooltip.getAttribute("uib-tooltip")).toEqual(scope.ellipsisOptions.tooltipText);
        });

        it("should accept null tooltipText", () => {
            scope.ellipsisOptions.tooltipText = null;
            const compiledElement = compile(ellipsisTooltip)(scope);
            scope.$digest();
            const tooltip = _.first(compiledElement.find(".xui-ellipsis-inner"));
            expect(tooltip.getAttribute("uib-tooltip")).toBe(scope.ellipsisOptions.tooltipText);
        });

        describe("should throw on non-string tooltipText", () => {
            const nonStringValues: any[] = [undefined, true, 1, {}];
            _.each(
                nonStringValues,
                (value: any) => it(` | ${value}`, () => {
                    scope.ellipsisOptions.tooltipText = value;
                    expect(() => compile(ellipsisTooltip)(scope)).toThrowError();
                })
            );
        });

        it("should pass tooltipOptions", () => {
            const compiledElement = compile(ellipsisTooltip)(scope);
            scope.$digest();
            const tooltip = _.first(compiledElement.find(".xui-ellipsis-inner"));
            expect(tooltip.getAttribute("tooltip-placement")).toBe("bottom");
        });

        it("should pass htmlBindTemplate", () => {
            const compiledElement = compile(ellipsisTooltip)(scope);
            scope.$digest();
            const ngBindHtml = _.first(compiledElement.find(".xui-ellipsis-inner"));
            expect(ngBindHtml.getAttribute("ng-bind-html")).toBeDefined();
        });
    });
});
