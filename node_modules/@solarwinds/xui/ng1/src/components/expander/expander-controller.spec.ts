///<reference path="../../ref.d.ts"/>

import { ExpanderController } from "./expander-controller";

describe("components >", ()=> {
    describe("expander >", ()=> {
        describe("controller >", ()=> {
            let scope:any,
                $controller:ng.IControllerService,
                ctrl:ExpanderController,
                expander:any;
            beforeEach(angular.mock.module("xui"));

            beforeEach(inject(($injector:any, $compile:ng.ICompileService)=> {
                $controller = $injector.get("$controller");
                scope = $injector.get("$rootScope").$new();
                ctrl = <ExpanderController>$controller("xuiExpanderController", {});

                let expanderHtml = [
                    "<xui-expander>",
                    "<xui-expander-heading>Another Expander!</xui-expander-heading>",
                    "<xui-button display-style='primary'>UT</xui-button>",
                    "<xui-button>A&M</xui-button>",
                    "</xui-expander>"
                ].join("");
                expander = $compile(expanderHtml)(scope);
                scope.$digest();
            }));

            it("toggles open/closed when enabled", () => {
                ctrl.isOpen = false;
                ctrl.isDisabled = false;
                ctrl.toggleOpen();
                expect(ctrl.isOpen).toEqual(true);
                ctrl.toggleOpen();
                expect(ctrl.isOpen).toEqual(false);
                ctrl.toggleOpen();
                expect(ctrl.isOpen).toEqual(true);
                ctrl.toggleOpen();
                expect(ctrl.isOpen).toEqual(false);
            });

            it("does not toggle open/closed when disabled", () => {
                ctrl.isOpen = false;
                ctrl.isDisabled = true;
                ctrl.toggleOpen();
                expect(ctrl.isOpen).toEqual(false);
                ctrl.toggleOpen();
                expect(ctrl.isOpen).toEqual(false);
                ctrl.toggleOpen();
                expect(ctrl.isOpen).toEqual(false);
                ctrl.toggleOpen();
                expect(ctrl.isOpen).toEqual(false);
            });

            it("should call the onStatusChanged callback with isOpen: false when being closed", () => {
                ctrl.isOpen = true;
                ctrl.onStatusChanged = jasmine.createSpy("onStatusChanged");
                ctrl.toggleOpen();
                expect(ctrl.onStatusChanged).toHaveBeenCalledWith({isOpen: false});
            });

            it("should call the onStatusChanged callback with isOpen: true when being opened", () => {
                ctrl.isOpen = false;
                ctrl.onStatusChanged = jasmine.createSpy("onStatusChanged");
                ctrl.toggleOpen();
                expect(ctrl.onStatusChanged).toHaveBeenCalledWith({isOpen: true});
            });
        });
    });
});
