import IAugmentedJQuery = angular.IAugmentedJQuery;
import IEventPropagationService = xui.IEventPropagationService;
import ITimeoutService = angular.ITimeoutService;

export interface IExpanderChangeArgs {
    isOpen: boolean;
}

export interface IExpanderController {
    onStatusChanged?(args: IExpanderChangeArgs): void;
}

export class ExpanderController implements IExpanderController {
    public static $inject = ["$timeout", "xuiEventPropagationService"];

    public isOpen: boolean;
    public isDisabled: boolean;

    private removeContent: boolean;

    constructor(private $timeout: ITimeoutService, private xuiEventPropagationService: IEventPropagationService) {
    }

    public onStatusChanged: (args: IExpanderChangeArgs) => void;

    public toggleOpen = ($event?: JQueryEventObject) => {
        const eventShouldPropagate = angular.isUndefined($event) ||
            this.xuiEventPropagationService.targetShouldPropagate($event);

        if (this.isDisabled) {
            return;
        }

        if (eventShouldPropagate) {
            this.isOpen = !this.isOpen;

            if (angular.isFunction(this.onStatusChanged)) {
                this.onStatusChanged({isOpen: this.isOpen});
            }
        } else {
            $event.stopPropagation();
        }
    };

    //The content has to be removed when collapsed
    //with a small delay to wait when the directive is completely compiled
    private onCollapsingFinished = () => {
        this.$timeout(() => this.removeContent = true);
    };

    //The content has to be attached to the DOM before expanding started
    private onBeforeExpandingStarted = () => {
        this.removeContent = false;

        //This is to wait for the content to get attached to the DOM
        return this.$timeout();
    };
}
