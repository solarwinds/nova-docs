import SpecHelper from "../../specHelper";

describe("components >", () => {
   describe("action drawer >", () => {

       let scope: ng.IScope,
           compile: ng.ICompileService,
           element: ng.IAugmentedJQuery;

       const defaultActionDrawer = `<xui-action-drawer item-source='[
           {
               name: "mute",
               color: "primary-blue",
               tooltipText: "Mute node",
               action: console.log("hello")
           },
           {
               name: "acknowledge",
               tooltipText: "Acknowledge me",
               action: console.log("hello")
           },
           {
               name: "sound-3",
               color: "primary-blue",
               tooltipText: "Sir, unmute me pls",
               action: console.log("hello")
           }
       ]' position-direction="left"></xui-action-drawer>`;

       const rightActionDrawer = `<xui-action-drawer item-source='[
           {
               name: "mute",
               color: "primary-blue",
               tooltipText: "Mute node",
               action: console.log("hello")
           },
           {
               name: "acknowledge",
               tooltipText: "Acknowledge me",
               action: console.log("hello")
           },
           {
               name: "sound-3",
               color: "primary-blue",
               tooltipText: "Sir, unmute me pls",
               action: console.log("hello")
           }
       ]' position-direction="right"></xui-action-drawer>`;

       beforeEach(angular.mock.module("xui"));

       beforeEach(inject(function ($compile: ng.ICompileService, $rootScope: ng.IScope) {
           compile = $compile;
           scope = $rootScope.$new();
       }));

       it("should compile", () => {
           element = SpecHelper.getCompiledElement(compile, scope, defaultActionDrawer);

           expect(element.is(".xui-action-drawer")).toBe(true);
       });

       it("should populate menu with buttons", () => {
           element = SpecHelper.getCompiledElement(compile, scope, defaultActionDrawer);

           expect(element.find(".xui-action-drawer__actions").children().length).toEqual(3);
       });

       it("should populate correct icons", () => {
           element = SpecHelper.getCompiledElement(compile, scope, defaultActionDrawer);

           expect(element.find(".xui-icon[icon=mute]")
               .attr("icon")).toEqual("mute");
           expect(element.find(".xui-icon[icon=acknowledge]")
               .attr("icon")).toEqual("acknowledge");
           expect(element.find(".xui-icon[icon=sound-3]")
               .attr("icon")).toEqual("sound-3");
       });

       it("should populate tooltips", () => {
           element = SpecHelper.getCompiledElement(compile, scope, defaultActionDrawer);

           expect(element.find(".xui-icon[icon=mute]")
               .attr("tool-tip")).toEqual("Mute node");
           expect(element.find(".xui-icon[icon=acknowledge]")
               .attr("tool-tip")).toEqual("Acknowledge me");
           expect(element.find(".xui-icon[icon=sound-3]")
               .attr("tool-tip")).toEqual("Sir, unmute me pls");
       });

       it("should populate direction left", () => {
           element = SpecHelper.getCompiledElement(compile, scope, defaultActionDrawer);

           expect(element.find(".xui-action-drawer__actions")
               .is(".expanded-left")).toBe(true);
       });

       it("should populate direction right", () => {
           element = SpecHelper.getCompiledElement(compile, scope, rightActionDrawer);

           expect(element.find(".xui-action-drawer__actions")
               .is(".expanded-right")).toBe(true);
       });
   });
});
