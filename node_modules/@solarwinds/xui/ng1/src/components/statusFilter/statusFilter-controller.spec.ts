import StatusFilterController from "./statusFilter-controller";

describe("components >", ()=> {
    describe("statusFilter >", ()=> {
        describe("controller >", ()=> {
            let $controller:ng.IControllerService,
                ctrl:StatusFilterController,
                clickMock: JQueryEventObject;

            beforeEach(angular.mock.module("xui"));

            beforeEach(inject(($injector:any)=> {
                $controller = $injector.get("$controller");
                ctrl = <StatusFilterController>$controller("xuiStatusFilterController", {});
                clickMock = <JQueryEventObject>$.Event("click");
            }));

            describe("activateFilter", ()=> {
                it("should activate filter if it is not active", () => {
                    ctrl.activeFilters = [];
                    ctrl.activateFilter("critical", clickMock);
                    expect(ctrl.activeFilters).toEqual(["critical"]);
                    expect(ctrl.filterIsActive("critical")).toBeTruthy();
                });

                it("should deactivate filter if it is active", () => {
                    ctrl.activeFilters = ["critical"];
                    ctrl.activateFilter("critical", clickMock);
                    expect(ctrl.activeFilters).toEqual([]);
                    expect(ctrl.filterIsActive("critical")).toBeFalsy();
                });

                it("should trigger filterChange function if exists", () => {
                    ctrl.activeFilters = [];
                    ctrl.filterChange = () => {
                        ctrl.activeFilters.push("warning", "info");
                    };
                    ctrl.activateFilter("critical", clickMock);
                    expect(ctrl.activeFilters).toEqual(["critical", "warning", "info"]);
                    expect(ctrl.filterIsActive("critical")).toBeTruthy();
                    expect(ctrl.filterIsActive("warning")).toBeTruthy();
                    expect(ctrl.filterIsActive("info")).toBeTruthy();
                });
            });

        });
    });
});
