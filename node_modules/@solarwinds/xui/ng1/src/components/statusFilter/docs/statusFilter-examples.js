(function () {
    "use strict";

    Xui.module
        .controller("DemoStatusFilterSimpleController", DemoStatusFilterSimpleController)
        .controller("DemoStatusFilterComplexController", DemoStatusFilterComplexController, ["$templateCache"]);

    function DemoStatusFilterSimpleController() {
        var vm = this;

        vm.semanticColors = ["xui-color-unknown-border", "xui-color-info-border", "xui-color-ok-border",
            "xui-color-warning-border", "xui-color-critical-border", "xui-color-down-border",
            "xui-color-unmanaged-border", "xui-color-unrecheable-border", "xui-color-external-border",
            "xui-color-shutdown-border", "xui-color-unplugged-border"];

        vm.activeFilters = [];
        vm.items = [
            { type: "network", name: "Source Route Bridge" },
            { type: "network", name: "Gateway" },
            { type: "network", name: "Integrated Services Digital Network" },
            { type: "network", name: "Multilayer switch" },
            { type: "application", name: "Enterprise Software App" },
            { type: "application", name: "Engineering and Product Development App" },
            { type: "website", name: "Orion Website" },
            { type: "website", name: "Helpdesk" },
            { type: "website", name: "Confluence" },
            { type: "topography", name: "Point-to-point" },
            { type: "tools", name: "Container" },
            { type: "tools", name: "Widget" }
        ];

        vm.filteredObjects = _.cloneDeep(vm.items);

        vm.filterSource = transformFilterSource();

        vm.selectedFilter = vm.filterSource[0];

        vm.filterChange = function () {
            if (_.isEmpty(vm.activeFilters)) {
                return vm.filteredObjects = _.cloneDeep(vm.items);
            }
            vm.filteredObjects = _.filter(vm.items, function (item) {
                var isFiltered = false;
                _.each(vm.activeFilters, function (filter) {
                    if (item.type === filter) {
                        return isFiltered = true;
                    }
                });
                return isFiltered;
            });
        };

        vm.selectEmpasize = function (color) {
            vm.selectedFilter.emphasize = color;
        };

        function transformFilterSource() {
            var transformedFilterSource = [];
            var filterCounts = _.countBy(vm.items, "type");
            _.forEach(filterCounts, function (value, key) {
                transformedFilterSource.push({
                    name: key,
                    value: value,
                    tooltip: key,
                    tooltipAppendToBody: true,
                    emphasize: "xui-color-unknown-border",
                    icon: key
                });
            });
            return transformedFilterSource;
        }
    }

    function DemoStatusFilterComplexController($templateCache) {
        var vm = this;

        vm.activeFilters = [];
        vm.selectedItems = [];
        vm.items = [
            {
                id: 0, severity: "critical", name: "Alert me when a component goes into critical state",
                description: "Some custom description for critical alert"
            },
            {
                id: 1, severity: "critical", name: "Alert me when a component goes into critical state",
                description: "Some custom description for critical alert"
            },
            {
                id: 2, severity: "critical", name: "Alert me when a component goes into critical state",
                description: "Some custom description for critical alert"
            },
            {
                id: 3, severity: "critical", name: "Alert me when a component goes into critical state",
                description: "Some custom description for critical alert"
            },
            {
                id: 5, severity: "warning", name: "Alert me when a component needs to be updated",
                description: "Some custom description for warning alert"
            },
            {
                id: 6, severity: "warning", name: "Alert me when a component needs to be updated",
                description: "Some custom description for warning alert"
            },
            {
                id: 7, severity: "info", name: "Notify me when a component change his status",
                description: "Some custom description for info alert"
            },
            {
                id: 8, severity: "info", name: "Notify me when a component change his status",
                description: "Some custom description for info alert"
            }
        ];

        _.each(vm.items, function (item) {
            item.filterIcon = "severity_" + item.severity
        });

        vm.smartMode = true;
        vm.hideToolbar = true;

        vm.gridOptions = {
            triggerSearchOnChange: true,
            searchDebounce: 500,
            hidePagination: false,
            pagerAdjacent: 0
        };

        vm.gridPagination = {
            page: 1,
            pageSize: 5
        };

        vm.sorting = {
            sortableColumns: [{
                id: "name",
                label: "Name"
            }, {
                id: "severity",
                label: "Severity"
            }
            ],
            sortBy: {
                id: "name",
                label: "Name"
            },
            direction: "asc"
        };

        vm.selection = {
            mode: "single",
            property: "id"
        };

        vm.filteredItems = _.cloneDeep(vm.items);

        vm.filterSource = transformFilterSource();

        vm.filterChange = function () {
            if (_.isEmpty(vm.activeFilters)) {
                return vm.filteredItems = _.cloneDeep(vm.items);
            }
            vm.filteredItems = _.filter(vm.items, function (item) {
                var isFiltered = false;
                _.each(vm.activeFilters, function (filter) {
                    if (item.filterIcon === filter) {
                        return isFiltered = true;
                    }
                });
                return isFiltered;
            });
        };

        function transformFilterSource() {
            var transformedFilterSource = [];
            var filterCounts = _.countBy(vm.items, "filterIcon");
            _.forEach(filterCounts, function (value, key) {
                transformedFilterSource.push({
                    name: key,
                    value: value,
                    tooltip: key,
                    tooltipAppendToBody: true,
                    emphasize: resolveEmphasize(key),
                    icon: key
                });
            });
            return transformedFilterSource;
        }

        function resolveEmphasize(name) {
            var vocabulary = {
                "severity_critical": "xui-color-critical-border",
                "severity_warning": "xui-color-warning-border",
                "severity_info": "xui-color-info-border"
            };
            return vocabulary[name] || "xui-color-ok-border"
        }

        $templateCache.put("demo-item-template",
            "<div style='display:flex; justify-content:flex-start;'><xui-icon icon='{{item.filterIcon}}'></xui-icon>" +
            "<div style='margin-left:20px;' class='xui-text-warning'>{{item.name}}</div><div style='margin-left:20px;'>{{item.description}}</div></div>");
    }

})();
