import ISliderController from "./slider-controller";
import SpecHelper from "../../specHelper";
import { ITestScope } from "../../specHelper";

describe("components >", () => {
    describe("slider >", () => {

        let $controller: ng.IControllerService,
            $scope: ITestScope,
            $compile: ng.ICompileService,
            element: any;

        const singleSliderHtml: string = `<xui-slider caption='sliderTitle' unit='sliderUnit' type='single'
            min='0' max='100' value='40' is-textinput-enabled='isTextinputEnabled'
            is-disabled='isDisabled' fraction-size="fractionSize"></xui-slider>`;

        const rangeSliderHtml: string = `<xui-slider caption='sliderTitle' unit='sliderUnit' type='range'
            min='0' max='100' start-value='10' end-value='50' is-disabled='isDisabled'></xui-slider>`;

        beforeEach(angular.mock.module("xui"));

        beforeEach(inject(($injector: any) => {
            $controller = $injector.get("$controller");
            $compile = $injector.get("$compile");
            $scope = $injector.get("$rootScope").$new();
        }));

        it("should compile", () => {
            element = SpecHelper.getCompiledElement($compile, $scope, singleSliderHtml);

            expect(element[0].tagName.toLowerCase()).not.toEqual("xui-slider");
        });

        it("should display 'caption value inside header", () => {
            element = SpecHelper.getCompiledElement($compile, $scope, singleSliderHtml);

            const headerElement = element.find(".xui-slider__header-caption")[0];
            expect(headerElement.innerText).toBe("sliderTitle");
        });

        it("should display 'unit' value inside header", () => {
            element = SpecHelper.getCompiledElement($compile, $scope, singleSliderHtml);

            const headerElement = element.find(".xui-slider__header-unit")[0];
            expect(headerElement.innerText).toBe("sliderUnit");
        });

        describe("range slider", () => {
            it("should hide start-button", () => {
                element = SpecHelper.getCompiledElement($compile, $scope, singleSliderHtml);

                const firstButtonElement = element.find(".xui-slider-first-button")[0];
                expect($(firstButtonElement).hasClass("ng-hide")).toBe(true);
                expect(firstButtonElement.innerText.trim()).toBe("");
            });

            it("should display end-button", () => {
                element = SpecHelper.getCompiledElement($compile, $scope, singleSliderHtml);

                const endButtonElement = element.find(".xui-slider-end-button")[0];
                expect($(endButtonElement).hasClass("ng-hide")).toBe(false);
                expect(endButtonElement.innerText.trim()).toBe("40");
            });

            it("should display textbox when 'isTextinputEnabled=true'", () => {
                $scope["isTextinputEnabled"] = true;

                element = SpecHelper.getCompiledElement($compile, $scope, singleSliderHtml);

                const textboxElement = element.find(".xui-textbox__input")[0];
                expect(textboxElement).toBeDefined();
            });

            it("should hide textbox when 'isTextinputEnabled=false'", () => {
                element = SpecHelper.getCompiledElement($compile, $scope, singleSliderHtml);

                const textboxElement = element.find(".xui-textbox__input")[0];
                expect(textboxElement).toBeUndefined();
            });

            it("should be disabled when 'isDisabled=true'", () => {
                $scope["isDisabled"] = true;
                $scope["isTextinputEnabled"] = true;

                element = SpecHelper.getCompiledElement($compile, $scope, singleSliderHtml);

                let textboxElement = element.find(".xui-textbox__input")[0];

                expect(textboxElement.disabled).toBe(true);
                expect(element.hasClass("xui-slider--disabled")).toBe(true);
            });
        });

        describe("single slider", () => {
            it("should display start-button with correct title", () => {
                element = SpecHelper.getCompiledElement($compile, $scope, rangeSliderHtml);

                const firstButtonElement = element.find(".xui-slider-first-button")[0];
                expect($(firstButtonElement).hasClass("ng-hide")).toBe(false);
                expect(firstButtonElement.innerText.trim()).toBe("10");
            });

            it("should display end-button with correct title", () => {
                element = SpecHelper.getCompiledElement($compile, $scope, rangeSliderHtml);

                const endButtonElement = element.find(".xui-slider-end-button")[0];
                expect($(endButtonElement).hasClass("ng-hide")).toBe(false);
                expect(endButtonElement.innerText.trim()).toBe("50");
            });

            it("should hide textbox", () => {
                $scope["isTextinputEnabled"] = true;

                element = SpecHelper.getCompiledElement($compile, $scope, rangeSliderHtml);

                const textboxElement = element.find(".xui-textbox__input")[0];
                expect(textboxElement).toBeUndefined();
            });

            it("should be disabled when 'isDisabled=true'", () => {
                $scope["isDisabled"] = true;

                element = SpecHelper.getCompiledElement($compile, $scope, rangeSliderHtml);

                expect(element.hasClass("xui-slider--disabled")).toBe(true);
            });
            it("should apply the proper value fraction", () => {
                $scope["fractionSize"] = 2;
                element = SpecHelper.getCompiledElement($compile, $scope, singleSliderHtml);
                const label = element.find(".xui-slider-end-label")[0];
                expect(label.textContent).toBe("40.00");
            });
        });
    });
});
