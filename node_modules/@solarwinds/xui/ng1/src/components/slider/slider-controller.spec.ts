import ISliderController from "./slider-controller";

describe("components >", () => {
    describe("slider >", () => {
        describe("controller >", () => {
            let $controller: ng.IControllerService,
                ctrl: ISliderController,
                $scope: ng.IRootScopeService,
                $log: ng.ILogService;

            beforeEach(angular.mock.module("xui"));

            beforeEach(inject(($injector: any) => {
                $controller = $injector.get("$controller");
                $scope = $injector.get("$rootScope").$new();
                $log = $injector.get("$log");
            }));

            it("updates start value correctly", () => {
                ctrl = <ISliderController> $controller("xuiSliderController", {
                    "$scope": $scope,
                    "$log": $log
                }, {
                        startValue: 2,
                        endValue: 4,
                        min: 0,
                        max: 10
                    });

                ctrl.updateStartValue(0.5);

                expect(ctrl.internalStartValue).toBe(5);
            });

            it("updates end value correctly", () => {
                ctrl = <ISliderController> $controller("xuiSliderController", {
                    "$scope": $scope,
                    "$log": $log
                }, {
                        startValue: 1,
                        endValue: 2,
                        min: 0,
                        max: 10
                    });

                ctrl.updateEndValue(0.5);

                expect(ctrl.internalEndValue).toBe(5);
            });

            it("throw error when 'min' property is not set", () => {
                expect(() => {
                    $controller("xuiSliderController", { "$scope": $scope }, {});
                }).toThrow(new Error("xui-slider 'min' property must be specified"));
            });

            it("throw error when 'max' property is not set", () => {
                expect(() => {
                    $controller("xuiSliderController", { "$scope": $scope }, { min: 0 });
                }).toThrow(new Error("xui-slider 'max' property must be specified"));
            });

            it("throw error when 'value' property is not set and type='single'", () => {
                expect(() => {
                    $controller("xuiSliderController", { "$scope": $scope }, {
                        type: "single",
                        min: 0,
                        max: 10
                    });
                }).toThrow(new Error("xui-slider in single mode must has 'value' property specified"));
            });

            it("throw error when 'value' < 'min' and type='single'", () => {
                expect(() => {
                    $controller("xuiSliderController", { "$scope": $scope }, {
                        type: "single",
                        value: 0,
                        min: 1,
                        max: 10
                    });
                }).toThrow(new Error("xui-slider 'value' property must be greater or equal to 'min' property"));
            });

            it("throw error when 'value' > 'max' and type='single'", () => {
                expect(() => {
                    $controller("xuiSliderController", { "$scope": $scope }, {
                        type: "single",
                        value: 2,
                        max: 1,
                        min: 0
                    });
                }).toThrow(new Error("xui-slider 'value' property must be less or equal to 'max' property"));
            });

            it("throw error when 'startValue' < 'min' and type='range'", () => {
                expect(() => {
                    $controller("xuiSliderController", { "$scope": $scope }, {
                        min: 1,
                        max: 10,
                        startValue: 0
                    });
                }).toThrow(new Error("xui-slider 'start-value' property must be greater or equal to 'min' property"));
            });

            it("throw error when 'endValue' > 'max' and type='range'", () => {
                expect(() => {
                    $controller("xuiSliderController", { "$scope": $scope }, {
                        startValue: 1,
                        endValue: 5,
                        max: 3,
                        min: 0
                    });
                }).toThrow(new Error("xui-slider 'end-value' property must be less or equal to 'max' property"));
            });

            it("throw error when 'startValue' > 'endValue' and type='range'", () => {
                expect(() => {
                    $controller("xuiSliderController", { "$scope": $scope }, {
                        startValue: 2,
                        endValue: 1,
                        min: 0,
                        max: 10
                    });
                }).toThrow(
                    new Error("xui-slider 'start-value' property must be less or equal to 'end-value' property")
                );
            });

            it("throw error when 'start-value' property is not set and type='range'", () => {
                expect(() => {
                    $controller("xuiSliderController", { "$scope": $scope }, {
                        min: 0,
                        max: 10
                    });
                }).toThrow(new Error("xui-slider in range mode must has 'start-value' property specified"));
            });

            it("throw error when 'end-value' property is not set and type='range'", () => {
                expect(() => {
                    $controller("xuiSliderController", { "$scope": $scope }, {
                        min: 0,
                        max: 10,
                        startValue: 1
                    });
                }).toThrow(new Error("xui-slider in range mode must has 'end-value' property specified"));
            });

            it("throw error when 'start-value' and 'end-value' distance is less than 'min-range'", () => {
                expect(() => {
                    $controller("xuiSliderController", { "$scope": $scope }, {
                        min: 0,
                        max: 10,
                        startValue: 4,
                        endValue: 6,
                        minRange: 5
                    });
                }).toThrow(new Error(`xui-slider 'start-value' and 'end-value' distance must be great or equal
                 to 'min-range' property`));
            });
            it("throw error when 'fraction-size' is not positive integer number", () => {
                expect(() => {
                    $controller("xuiSliderController", { "$scope": $scope }, {
                        min: 0,
                        max: 10,
                        startValue: 4,
                        endValue: 6,
                        fractionSize: 1.1
                    });
                }).toThrow(new Error(`xui-slider 'fraction-size' property must be an integer positive value`));
            });
        });
    });
});
