import IWizard = xui.IWizard;
import IUtility = xui.IUtility;
import IWizardStep = xui.IWizardStep;
import {IWizardInternal} from "./wizard-controller";
import WizardNavigationOption = xui.WizardNavigationOption;

/**
 * @ngdoc directive
 * @name xui.directive:xuiWizard
 * @restrict E
 *
 * @description
 * Component that provides wizard functionality.
 *
 * @parameters
 * @param {string=} name The name of the wizard instance.
 * @param {boolean=} [can-finish=false] Set to true to show the "Finish" button at any point during the wizard process.
 * @param {boolean=} [can-go-next=true] Set to false to disable the "Next" button.
 * @param {boolean=} [can-go-back=true] Set to false to disable the "Back" button.
 * @param {IWizardStep=} current-step The current step of the wizard.
 * @param {IDialogButton[]=} additional-buttons Additional buttons to display on the wizard.
 * @param {number=} current-step-index Gets or sets the current step by its index position.
 * @param {boolean=} [hide-header=false] Set to true to hide the header step links.
 * @param {boolean=} [hide-next=false] Set to true to hide (dynamically) next button.
 * @param {string=} [finish-text='Close'] Overrides the default text on the finish step button.
 * @param {string=} [next-busy-text='Empty'] Busy text to display while transferring to next step.
 * @param {WizardNavigationOption=} [navigation='enabled'] Options: ['enabled', 'disabled', 'headerDisabled'].
 *          Set to 'disabled' to prevent the user from navigating the steps.
 *          Set to 'headerDisabled' to prevent navigation in the header (header will still be visible).
 * @param {expression=} on-next-step Evaluated when the user attempts to go to the next step.
 * @param {expression=} on-enter-step Evaluated when a step is entered.
 * @param {expression=} on-exit-step Evaluated when a step is exited.
 * @param {expression=} on-cancel Evaluated when the user attempts to cancel the wizard.
 * @param {expression=} on-finish Evaluated when the user completes the wizard.
 *
 * @example
 *    <example module="xui">
 *        <file src="src/components/wizard/docs/wizard-examples.html" name="index.html"></file>
 *        <file src="src/components/wizard/docs/wizard-examples.js" name="script.js"></file>
 *    </example>
 */
export default class Wizard implements ng.IDirective {
    public static $inject = ["swUtil"];
    constructor (private swUtil:IUtility) {}

    private static HeaderStepMaxWidth = 150;

    public restrict = "E";
    public replace = true;
    public transclude = true;
    public template = require<string>("./wizard-directive.html");
    public scope = {};
    public controller = "xuiWizardController";
    public controllerAs = "wizCtrl";
    public bindToController = {
        name: "@?",
        onCancel: "&?",
        onExitStep: "&?",
        onEnterStep: "&?",
        onNextStep: "&?",
        onFinish: "&?",
        canGoNext: "&?",
        canGoBack: "&?",
        canFinish: "&?",
        finishText: "@?",
        nextBusyText: "@?",
        hideHeader: "@?",
        hideNext: "<?",
        currentStep: "=?",
        currentStepIndex: "=?",
        navigation: "@?",
        additionalButtons: "<?"
    };

    public link = ($scope:ng.IScope, element:ng.IAugmentedJQuery,
                   attrs:ng.IAttributes, wizard:IWizardInternal) => {
        this.swUtil.initComponent(attrs, "wizard");

        let desiredWidth = 0;
        let maxStepWidth = 0;

        $scope.$on("$destroy", () => {
            wizard.destroy();
        });

        const reflow = () => {
            const $header = element.find(".xui-wizard__header");
            const $headerSteps = $header.find(".xui-wizard__header-steps");
            const $headerStep = $headerSteps.find(".xui-wizard__header-step");

            if (!desiredWidth) {
                desiredWidth = $headerSteps.outerWidth();
            }

            const needsWrap = desiredWidth > $header.width();
            element.toggleClass(this.CssClasses.Condensed, needsWrap);

            let width = "auto";
            let maxWidth = "100%";

            if (needsWrap) {
                $headerStep.each((index:number, stepEl:Element) => {
                    const itemWidth = $(stepEl).outerWidth(true);
                    maxStepWidth = Math.max(maxStepWidth, itemWidth);
                });

                maxStepWidth = Math.min(maxStepWidth, Wizard.HeaderStepMaxWidth);

                width = (100 / $headerStep.length) + "%";
                maxWidth = maxStepWidth.toString();
            }

            $headerStep.css({ "width": width, "max-width": maxWidth });
        };

        // Turn on/off navigation.
        const navigationOption:WizardNavigationOption = attrs["navigation"];
        wizard.allowNavigation = navigationOption !== "disabled";
        wizard.disableHeaderNav = navigationOption === "headerDisabled";
        if (!wizard.allowNavigation || wizard.disableHeaderNav) {
            element.addClass(this.CssClasses.NoNavigate);
        }

        // Watch for new steps being added/removed so we can reflow the header.
        $scope.$watchCollection(() => wizard.steps, (newSteps:IWizardStep[], oldSteps:IWizardStep[]) => {
            if (newSteps.length === oldSteps.length) {
                return;
            }

            const isCondensed = element.hasClass(this.CssClasses.Condensed);

            // If we are condensed we need to expand so that we can capture the latest desired width.
            if (isCondensed) {
                element.removeClass(this.CssClasses.Condensed);
            }

            // Reset the desired width so it can be recalculated during reflow.
            desiredWidth = 0;
            reflow();

            // Return to condensed if we were that way to begin with.
            if (isCondensed) {
                element.addClass(this.CssClasses.Condensed);
            }
        });

        element.resize(reflow);
        $scope.$emit("xui-wizard-created", wizard);
    };

    private CssClasses = {
        Condensed: "xui-wizard--condensed",
        NoNavigate: "xui-wizard--no-navigate"
    };
}
