import DialogInstanceController from "../dialog/dialogInstance-controller";
import IWizard = xui.IWizard;
import IWizardStep = xui.IWizardStep;
import IDialogOptions = xui.IDialogOptions;
import IDialogButton = xui.IDialogButton;

export default class WizardDialogController extends DialogInstanceController {
    public static $inject = ["$scope", "$uibModalInstance", "$translate", "$log", "dialogOptions"];

    constructor($scope:ng.IScope, $modal:angular.ui.bootstrap.IModalServiceInstance,
                $translate:angular.translate.ITranslateService, $log:ng.ILogService,
                dialogOptions:IDialogOptions) {
        super($modal, $translate, $log, $scope, dialogOptions);

        const backButton:IDialogButton = {
            name: "back",
            text: $translate.instant("xui_wizard_back"),
            cssClass: "xui-wizard__back-button",
            isDisabled: false,
            isHidden: true,
            pullLeft: true,
            action: (dialog:ng.IFormController) => {
                this._wizard.back();

                // Prevent the dialog from closing.
                return false;
            }
        };
        const nextButton:IDialogButton = {
            name: "next",
            text: $translate.instant("xui_wizard_next"),
            cssClass: "xui-wizard__next-button",
            isDisabled: false,
            displayStyle: "primary",
            action: (dialog:ng.IFormController) => {
                return this._wizard.next().then(() => {
                    // Tell the dialog not to close.
                    return false;
                });
            },
            cancelAction: () => {
                this._wizard.cancelStepAction();
            }
        };
        const finishButton:IDialogButton = {
            name: "finish",
            text: $translate.instant("xui_wizard_finish"),
            cssClass: "xui-wizard__finish-button",
            isHidden: true,
            displayStyle: "primary",
            action: (dialog:ng.IFormController) => {
                return this._wizard.finish();
            },
            cancelAction: () => {
                this._wizard.cancelStepAction();
            }
        };
        const cancelButton:IDialogButton = {
            name: "cancel",
            text: $translate.instant("xui_wizard_cancel"),
            cssClass: "xui-wizard__cancel-button",
            isHidden: false,
            displayStyle: "tertiary",
            action: (dialog:ng.IFormController) => {
                return this._wizard.cancel();
            }
        };

        dialogOptions.buttons = [
            backButton,
            nextButton,
            finishButton,
            cancelButton
        ];

        // Wait for the wizard component to be created by the framework.
        $scope.$on("xui-wizard-created", (event:ng.IAngularEvent, wizard:IWizard) => {
            event.stopPropagation();
            this._wizard = wizard;

            // Capture the finish buttion text override if provided.
            finishButton.text = this._wizard.finishText || $translate.instant("xui_wizard_finish");

            //copy buttons over
            if (angular.isArray(this._wizard.additionalButtons)) {
                dialogOptions.buttons = this._wizard.additionalButtons.concat(dialogOptions.buttons);
            }

            //
            // Setup watches that control the dialog buttons.
            //

            // next-busy-text
            $scope.$watch(() => this._wizard.nextBusyText, (newValue:string, oldValue:string) => {
                //this needs to be set twice, once on the button, and once on the dialog controller
                //the reason for this is that the dialog only reads action text when the action is
                //initially invoked, and does not watch it.  Without the double set, the action
                //text could be getting stale values.
                nextButton.actionText = this.actionText = newValue;
            });

            // can-go-next
            $scope.$watch(() => this._wizard.canGoNext(), (newValue:boolean, oldValue:boolean) => {
                nextButton.isDisabled = !newValue;
            });

            // can-go-back
            $scope.$watch(() => this._wizard.canGoBack(), (newValue:boolean, oldValue:boolean) => {
                backButton.isDisabled = !newValue;
            });

            // can-finish
            $scope.$watch(() => this._wizard.canFinish(), (newValue:boolean, oldValue:boolean) => {
                finishButton.isHidden = newValue === false;
            });

            // current-step
            $scope.$watch(() => this._wizard.currentStep, (newValue:IWizardStep, oldValue:IWizardStep) => {
                if (newValue) {
                    // Set the next button text if provided.
                    nextButton.text = newValue.nextText || $translate.instant("xui_wizard_next");
                }

                // Hide buttons appropriately.
                backButton.isHidden = !this._wizard.showBack();
                cancelButton.isHidden = !this._wizard.showCancel();
                nextButton.isHidden = !this._wizard.showNext();
                finishButton.isHidden = !this._wizard.showFinish();
            });
        });
    }

    private _wizard:IWizard;
}
