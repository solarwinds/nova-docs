import WizardDialogService from "./wizard-dialog-service";
import WizardDialogController from "./wizard-dialog-controller";
import {DialogService} from "../dialog/dialog-service";

describe("components >", () => {
    describe("wizard-dialog", () => {
        describe("service >", () => {
            const options: xui.IWizardDialogOptions = {
                    title: "Wizard Demo",
                    template: require<string>("./docs/wizard-dialog.html"),
                    size: "lg",
                    viewModel: {}
                },
                dialogOptions: xui.IDialogOptions = {
                    title: options.title,
                    hideCancel: true,
                    viewModel: options.viewModel
                },
                optionsTUrl: xui.IWizardDialogOptions = {
                    title: "Wizard Demo",
                    templateUrl: "./docs/wizard-dialog.html",
                    size: "lg",
                    viewModel: {}
                };

            let wizardDialogService: WizardDialogService,
                dialogService: DialogService,
                spyDialogServiceShowModalMethod: jasmine.Spy;

            beforeEach(angular.mock.module("xui"));
            beforeEach(inject(($injector: any) => {
                wizardDialogService = $injector.get("xuiWizardDialogService");
                dialogService = $injector.get("xuiDialogService");

                spyDialogServiceShowModalMethod = spyOn(dialogService, "showModal");
            }));

            it("should call dialogService.showModal", () => {
                wizardDialogService.showModal(options);

                expect(spyDialogServiceShowModalMethod).toHaveBeenCalled();

                expect(JSON.stringify(spyDialogServiceShowModalMethod.calls.argsFor(0)[0])).toEqual(JSON.stringify({
                    controller: WizardDialogController,
                    bindToController: true,
                    controllerAs: "vm",
                    resolve: {
                        dialogOptions: () => dialogOptions
                    },
                    size: options.size,
                    template: options.template
                }));

                expect(spyDialogServiceShowModalMethod.calls.argsFor(0)[1]).toEqual(dialogOptions);
            });

            it("should be able to process templateUrl option", () => {
                wizardDialogService.showModal(optionsTUrl);
                expect(spyDialogServiceShowModalMethod.calls.argsFor(0)[0].templateUrl).toBe(optionsTUrl.templateUrl);
            });
        });
    });
});
