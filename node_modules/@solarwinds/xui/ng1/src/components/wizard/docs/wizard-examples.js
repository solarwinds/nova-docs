(function () {
    "use strict";

    Xui.module
        .controller("DemoWizardLauncherController", DemoWizardLauncherController, ["xuiWizardDialogService", "xuiToastService"])
        .controller("DemoWizardModalController", DemoWizardModalController, ["$timeout", "xuiToastService"]);

    function DemoWizardLauncherController(wizardService, toast) {
        var vm = this;

        vm.showDialog = function () {
            wizardService
                .showModal({
                    title: "Wizard Demo",
                    template: 
                        ['<xui-dialog>',
                            '<div ng-include="\'wizard-demo\'"></div>',
                            '<footer>',
                                '<xui-message type="{{::vm.dialogOptions.viewModel.messageType}}"',
                                            'allow-dismiss="{{::vm.dialogOptions.viewModel.messageDismiss}}">',
                                    '{{::vm.dialogOptions.viewModel.message}}',
                                '</xui-message>',
                            '</footer>',
                        '</xui-dialog>'].join(""),
                    size: "lg",
                    viewModel: {
                        messageType: "info",
                        messageDismiss: true,
                        message: "You can pass different parameters via viewModel object",
                        actionMethod: function () {
                            toast.info("Additional menu action done.");
                        }
                    }
                });
        };
    }

    function DemoWizardModalController($timeout, toast) {
        var vm = this;

        vm.nextBusyText = "waiting...";
        vm.additionalButtons = [{
            name: 'btn1',
            text: 'added Button 1',
            action: function () {
                toast.info("Disabling Button1 for 2 seconds");
                vm.additionalButtons[0].isDisabled = true;
                $timeout(function () {
                    vm.additionalButtons[0].isDisabled = false;
                    return true;
                }, 2000);
                return false;
            }
        }];
        vm.steps = [{
            label: "label-one",
            title: "title 1",
            description: "description 1",
            templateUrl: "wizard-step-1"
        }];
        vm.hideNext = false;

        vm.toggleNextVisibility = function() {
            this.hideNext = !this.hideNext;
        };

        vm.onEnterStep = function (step) {
            vm.goNextEnabled = false;
            vm.goBackEnabled = true;
            toast.info("onEnterStep: " + step.label);
        };

        vm.onExitStep = function (step) {
            toast.info("onExitStep: " + step.label);
        };

        vm.onNextStep = function (from, to, cancellation) {
            toast.info("from: " + from.label + " -> to:" + (to && to.label));
            vm.nextBusyText = "moving to " + (to && to.label);

            var timeout = (from.label === "activate") ? 2000 : 500;
            var promise = $timeout(function () {
                return true;
            }, timeout);
            cancellation.then(function () {
                toast.info("onNextStep cancelled");
                $timeout.cancel(promise);
            });

            return promise;
        };

        vm.onCancel = function () {
            toast.info("onCancel");
            return true;
        };

        vm.onFinish = function (cancellation) {
            vm.nextBusyText = "finishing";
            var promise = $timeout(function () {
                toast.info("onFinish");
                return true;
            }, 2000);
            cancellation.then(function () {
                toast.info("onFinish cancelled");
                $timeout.cancel(promise);
            });

            return promise;
        };

        vm.addStep = function () {
            var stepNum = vm.steps.length;
            vm.steps.push({
                label: "label-" + stepNum,
                title: "title " + stepNum,
                shortTitle: "S " + stepNum,
                description: "description " + stepNum,
                templateUrl: "wizard-step-" + stepNum
            });
        };

        vm.insertStep = function () {
            var stepNum = 2;

            vm.steps.splice(stepNum - 1, 0, {
                label: "label-" + stepNum,
                title: "title " + stepNum,
                description: "description " + stepNum,
                templateUrl: "wizard-step-" + stepNum
            });
        };
    }
})();
