import IDialogService = xui.IDialogService;
import IDialogOptions = xui.IDialogOptions;
import IWizardDialogOptions = xui.IWizardDialogOptions;
import IWizardDialogService= xui.IWizardDialogService;
import WizardDialogController from "./wizard-dialog-controller";

/**
 * @ngdoc service
 *
 * @name xui.service:xuiWizardDialogService
 *
 * @description
 * Service that provides a dialog with Wizard functionality.
 *
 */
export default class WizardDialogService implements IWizardDialogService {
    public static $inject = ["$translate", "xuiDialogService"];
    constructor(private $translate:angular.translate.ITranslateService, private dialogService:IDialogService) {}

    /** @ngdoc method
     *  @name xui.service:xuiWizardDialogService#show
     *  @methodOf xui.service:xuiWizardDialogService
     *  @description Displays a modal dialog with the supplied Wizard template.
     *  @param {IWizardDialogOptions} options Options for configuring the dialog.
     *  @returns {ng.IPromise<boolean>} dialogResult
     *  @deprecated
     **/
    public show = (options:IWizardDialogOptions):ng.IPromise<boolean> => {
        if (!options) {
            options = {
                title: "",
                templateUrl: ""
            };
        }

        const dialogOptions:IDialogOptions = {
            title: options.title,
            hideCancel: true
        };

        const customSettings:angular.ui.bootstrap.IModalSettings = {
            templateUrl: options.templateUrl,
            controller: WizardDialogController,
            bindToController: true,
            controllerAs: "vm",
            resolve: {
                dialogOptions: () => dialogOptions
            }
        };

        return this.dialogService.showModal(customSettings, dialogOptions);
    };

    /**
     * @ngdoc method
     * @name xui.service:xuiWizardDialogService#showModal
     * @methodOf xui.service:xuiWizardDialogService
     * @description Displays a modal dialog with the supplied Wizard template and viewModel.
     * @param {IWizardDialogOptions} options Presentation and interaction settings.
     * @returns {ng.IPromise<any>} dialogResult
     */
    public showModal = (options:IWizardDialogOptions):ng.IPromise<boolean> => {

        if (!options) {
            options = {
                title: "",
                template: ""
            };
        }

        const dialogOptions:IDialogOptions = {
            title: options.title,
            hideCancel: true,
            viewModel: options.viewModel
        };

        let customSettings:angular.ui.bootstrap.IModalSettings = {
            controller: WizardDialogController,
            bindToController: true,
            controllerAs: "vm",
            resolve: {
                dialogOptions: () => dialogOptions
            },
            size: options.size
        };

        if (options.template) {
            customSettings.template = options.template;
        } else if (options.templateUrl) {
            customSettings.templateUrl = options.templateUrl;
        } else {
            customSettings.template = "";
        }

        return this.dialogService.showModal(customSettings, dialogOptions);
    }
}
