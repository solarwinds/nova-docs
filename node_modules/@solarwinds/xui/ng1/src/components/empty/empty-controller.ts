import IMap = xui.IMap;
import IEmptyData = xui.IEmptyData;
import IEmptyViewModel = xui.IEmptyViewModel;

export interface IEmptyController {
    emptyData: IEmptyData;
    isCompactMode: () => boolean;
    isTemplateUrlProvided: () => boolean;
    getEmpty: (property: string) => string;
}

export class EmptyController implements IEmptyController {
    public emptyData: IEmptyData;
    public viewModel: IEmptyViewModel<any>;

    //TODO: change these presets after UX-592 is done and add translations.
    // keys of this map should be consistent with EmptyVariant type
    private emptyPresets: IMap<IEmptyData> = {
        dataNotAvailable: {
            compactMode: true,
            image: "no-data-to-show",
            title: "",
            description: "Data is not available",
            templateUrl: null,
            viewModel: {}
        },
        serverUnreachable: {
            compactMode: true,
            image: "no-data-to-show",
            title: "",
            description: "Server unreachable",
            templateUrl: null,
            viewModel: {}
        },
        dataNotApplicable: {
            compactMode: true,
            image: "no-data-to-show",
            title: "",
            description: "Data is not applicable",
            templateUrl: null,
            viewModel: {}
        },
        emptyDataset: {
            compactMode: true,
            image: "no-data-to-show",
            title: "",
            description: "No data to show",
            templateUrl: null,
            viewModel: {}
        }
    };

    private defaultPreset: IEmptyData = {
        compactMode: false,
        image: "no-data-to-show",
        title: "",
        description: "No data to show",
        templateUrl: null,
        viewModel: {}
    };

    private activeEmptyPreset: IEmptyData;

    public constructor() {
        if (_.isUndefined(this.emptyData)) {
            this.emptyData = {};
        }

        if (!this.isValidEmptyDataInput()) {
            throw new Error(
                `Invalid type of 'emptyData' parameter, 
                should be of type IEmptyData or empty object for default empty state`
            );
        }

        const { preset, viewModel } = this.emptyData;

        if (_.isString(preset) && !_.isEmpty(preset)) {
            if (!_.has(this.emptyPresets, preset)) {
                throw new Error(
                    `Empty preset "${preset}" doesn't exist! 
                Use one of the following: ${_.join(_.keys(this.emptyPresets), ", ")}`
                );
            } else {
                this.activeEmptyPreset = _.get<IMap<IEmptyData>>(this.emptyPresets, preset);
            }
        } else {
            this.activeEmptyPreset = this.defaultPreset;
        }

        if (this.isTemplateUrlProvided() && _.isObject(viewModel)) {
           this.viewModel = viewModel;
        }
    }

    /**
     * @method isCompactMode
     * @desc Returns true if compact-mode is set to true, otherwise returns default value
     * @return boolean
     * */
    public isCompactMode = (): boolean => {
        const { compactMode } = this.emptyData;

        return _.isBoolean(compactMode) ? compactMode : this.activeEmptyPreset.compactMode;
    };

    /**
     * @method isTemplateUrlProvided
     * @desc Returns true if the templateUrl was passed and it is a valid string value
     * @return boolean
     */
    public isTemplateUrlProvided = (): boolean => {
        return _.isString(this.emptyData.templateUrl);
    };

    /**
     * @method getEmpty
     * @param property string. For example (image, title, description)
     * @desc returns given value, value from preset or default value of passed property
     * @return string
    */
    public getEmpty = (property: string): string => {
        if (!_.has(this.activeEmptyPreset, property)) {
            throw new Error(
                `"${property}" doesn't exist on the controller's declaration! 
                Use one of the following: ${_.join(_.keys(this.activeEmptyPreset), ", ")}`
            );
        }

        const presetValue = _.get<IEmptyData, string>(this.activeEmptyPreset, property);

        return _.get<IEmptyData, string>(this.emptyData, property, presetValue);
    };

    /**
     * @method isValidEmptyDataInput
     * @desc returns true if the input empty data object is empty(the default template will be used instead) and when
     * the object is of type 'IEmptyData', otherwise returns false
     * @return boolean
    * */
    private isValidEmptyDataInput = (): boolean => {
        const keysList = _.concat(["preset"], _.keys(this.defaultPreset));
        const actualKeysList = _.keys(this.emptyData);

        if (_.isEmpty(actualKeysList)) {
            return true;
        }

        return _.every<string>(actualKeysList, (key: string) => _.includes<string>(keysList, key));
    }
}
