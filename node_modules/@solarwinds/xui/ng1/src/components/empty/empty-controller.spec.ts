/// <reference path="../../ref.d.ts" />
import IControllerService = ng.IControllerService;
import IInjectorService = angular.auto.IInjectorService;
import IEmptyData = xui.IEmptyData;

import { IEmptyController } from "./empty-controller";

describe("components >", () => {
    describe("EmptyController >", () => {
        let $controller: IControllerService;
        let emptyController: IEmptyController;
        let defaultEmpty: IEmptyData;

        beforeEach(angular.mock.module("xui"));

        beforeEach(inject(($injector: IInjectorService) => {
            $controller = $injector.get<IControllerService>("$controller");
            emptyController = $controller<IEmptyController>("xuiEmptyController", {}, {});
            defaultEmpty = <IEmptyData>(<any>emptyController).defaultPreset;  // private member
        }));

        it("is defined", () => {
            expect(emptyController).toBeDefined();
        });

        describe("isTemplateUrlProvided", () => {
           it("returns false if no 'templateUrl' value provided'", () => {
              expect(emptyController.isTemplateUrlProvided()).toBeFalsy();
           });

           it("returns false if passed 'templateUrl' is not string", () => {
              const emptyCtrl =  emptyController = $controller<IEmptyController>("xuiEmptyController", {}, {
                  emptyData: {
                      templateUrl: 456
                  }
              });

              expect(emptyCtrl.isTemplateUrlProvided()).toBeFalsy();
           });

           it("returns true if string 'templateUrl' value was passed", () => {
               const emptyCtrl =  emptyController = $controller<IEmptyController>("xuiEmptyController", {}, {
                   emptyData: {
                       templateUrl: "empty-template-url"
                   }
               });

               expect(emptyCtrl.isTemplateUrlProvided()).toBeTruthy();
           });
        });

        describe("isCompactMode", () => {
            it("returns false if no 'compactMode' value provided'", () => {
                expect(emptyController.isCompactMode()).toBeFalsy();
            });

            it("returns false if passed 'compactMode' is not boolean", () => {
                const emptyCtrl =  emptyController = $controller<IEmptyController>("xuiEmptyController", {}, {
                    emptyData: {
                        compactMode: "true"
                    }
                });

                expect(emptyCtrl.isCompactMode()).toBeFalsy();
            });

            it("returns true if compactMode true value was passed", () => {
                const emptyCtrl =  emptyController = $controller<IEmptyController>("xuiEmptyController", {}, {
                    emptyData: {
                        compactMode: true
                    }
                });

                expect(emptyCtrl.isCompactMode()).toBeTruthy();
            });
        });

        describe("getEmpty", () => {
           it("throws an error if the given property doesn't exist on the controller's declaration", () => {
               expect(() => emptyController.getEmpty("non-existing property")).toThrow();
           });

           it ("returns default empty values for 'title', 'description', 'image' if nothing passed", () => {
               expect(emptyController.getEmpty("title")).toEqual(defaultEmpty.title);
               expect(emptyController.getEmpty("description")).toEqual(defaultEmpty.description);
               expect(emptyController.getEmpty("image")).toEqual(defaultEmpty.image);
           });

           it ("returns passed to the controller 'title', 'description', 'image' values", () => {
               const mockedTitle = "Custom title";
               const mockedDescription = "Custom description";
               const mockedImage = "Custom image";

               const emptyCtrl = $controller<IEmptyController>("xuiEmptyController", {}, {
                   emptyData: {
                       title: mockedTitle,
                       description: mockedDescription,
                       image: mockedImage
                   }
               });

               expect(emptyCtrl.getEmpty("title")).toEqual(mockedTitle);
               expect(emptyCtrl.getEmpty("description")).toEqual(mockedDescription);
               expect(emptyCtrl.getEmpty("image")).toEqual(mockedImage);
           });

           it ("returns correct 'title', 'description', 'image' values for dataNotAvailable preset", () => {

               const emptyCtrl = $controller<IEmptyController>("xuiEmptyController", {}, {
                   emptyData: {
                       preset: "dataNotAvailable"
                   }
               });

               expect(emptyCtrl.getEmpty("title")).toEqual("");
               expect(emptyCtrl.getEmpty("description")).toEqual("Data is not available");
               expect(emptyCtrl.getEmpty("image")).toEqual("no-data-to-show");
           });

           it ("returns correct 'title', 'description', 'image' values for serverUnreachable preset", () => {

               const emptyCtrl = $controller<IEmptyController>("xuiEmptyController", {}, {
                   emptyData: {
                       preset: "serverUnreachable"
                   }
               });

               expect(emptyCtrl.getEmpty("title")).toEqual("");
               expect(emptyCtrl.getEmpty("description")).toEqual("Server unreachable");
               expect(emptyCtrl.getEmpty("image")).toEqual("no-data-to-show");
           });

           it ("returns correct 'title', 'description', 'image' values for dataNotApplicable preset", () => {

               const emptyCtrl = $controller<IEmptyController>("xuiEmptyController", {}, {
                   emptyData: {
                       preset: "dataNotApplicable"
                   }
               });

               expect(emptyCtrl.getEmpty("title")).toEqual("");
               expect(emptyCtrl.getEmpty("description")).toEqual("Data is not applicable");
               expect(emptyCtrl.getEmpty("image")).toEqual("no-data-to-show");
           });

           it ("returns correct 'title', 'description', 'image' values for emptyDataset preset", () => {

               const emptyCtrl = $controller<IEmptyController>("xuiEmptyController", {}, {
                   emptyData:{
                       preset: "emptyDataset"
                   }
               });

               expect(emptyCtrl.getEmpty("title")).toEqual("");
               expect(emptyCtrl.getEmpty("description")).toEqual("No data to show");
               expect(emptyCtrl.getEmpty("image")).toEqual("no-data-to-show");
           });
        });
    });
});
