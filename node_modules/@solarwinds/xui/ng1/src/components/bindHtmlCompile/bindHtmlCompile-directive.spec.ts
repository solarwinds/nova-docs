/// <reference path="../../ref.d.ts" />

import BindHtmlCompile from "./bindHtmlCompile-directive";

describe("components >", () => {
    describe("bindHtmlCompile >", () => {
        describe(".ensureScope(parent, value)", () => {

            let scope: ng.IScope;

            function ensureScope(value: any): ng.IScope {
                return BindHtmlCompile.ensureScope(scope, value);
            }

            beforeEach(() => {
                angular.mock.module("xui");
                inject(($rootScope: ng.IScope) => {
                    scope = $rootScope.$new();
                });
            });

            it("returns parent when value is null or undefined", () => {
                expect(ensureScope(null)).toBe(scope);
                expect(ensureScope(undefined)).toBe(scope);
            });

            it("returns new scope with cloned properties when value is not a scope", () => {
                const value: { [index: string]: any } = {
                    prop1: "a",
                    prop2: 123
                };
                const wrapped = ensureScope(value);
                expect(typeof wrapped.$new).toBe("function");
                expect(Object.keys(value).every(key => wrapped[key] === value[key])).toBe(true);
            });

            it("returns value when it's a scope", () => {
                const value = scope.$new();
                value.prop1 = "a";
                expect(ensureScope(value)).toBe(value);
            });

        });
    });
});
