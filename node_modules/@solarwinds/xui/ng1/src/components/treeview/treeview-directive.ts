import ITreeviewScope = xui.ITreeviewScope;
import ITreeviewController = xui.ITreeviewController;
import {TreeviewController} from "./treeview-controller";

/**
 * @ngdoc directive
 * @name xui.directive:xuiTreeView
 * @restrict E
 *
 * @description
 * XUI Treeview component. Supports row/node toast highlighting via {@link xui.services:xuiToastService ToastService}.
 *
 * Keyboard controls:
 * <dl class="dl-horizontal">
 * <dt>up</dt> <dd>Focus previous visible node.</dd>
 * <dt>down</dt> <dd>Focus next visible node.</dd>
 * <dt>left</dt> <dd>Collapse node with children / focus parent node.</dd>
 * <dt>right</dt> <dd>Expand node with children / focus first child node.</dd>
 * <dt>*</dt> <dd>Expand all under current node.</dd>
 * <dt>+</dt> <dd>Expand current node.</dd>
 * <dt>-</dt> <dd>Collapse current node.</dd>
 * <dt>shift+plus</dt> <dd>Expand all nodes.</dd>
 * <dt>shift+minus</dt> <dd>Collapse all nodes.</dd>
 * </dl>
 *
 * @parameters
 * @param {array} model Value containing list of nodes to be used as data for the treeview.
 * @param {object} options Object containing values for treeview configuration.
 * @param {string} [options.childrenKey="children"] Key to be used to extract children from node.
 * @param {boolean} [options.hasChildrenKey="has_children"] Boolean key that shows if the node has children.
 * @param {number} [options.limit=null] Number of child nodes to be loaded at a time
 * ("show more" / "show all" links will appear).
 * @param {string} [options.selectionMode=null] Selection mode. Available modes are: `single`, `multi`
 * @param {boolean} [options.isAlwaysSelected=false] Always keep at least one node selected.
 * @param {function} options.onExpand Callback for node expansion.
 * @param {function} options.onCollapse Callback for node collapse.
 * @param {function} options.onSelect Callback for node selection.
 * @param {function} options.onDblClick Callback for double clicking on node.
 * @param {string} options.trackBy String that specifies a property on the node for trackBy functionality.
 * If it is not specified or doesn't exist, the $index will be used as default.
 * @param {object} context Object used to store data regarding treeview state.
 * @param {IVirtualNode} context.focusedNode Focused virtual node.
 * @param {IVirtualNode} context.selectedNode Selected virtual node (for selectionMode = 'single').
 * @param {Array.<IVirtualNode>} context.selectedNodes List of selected nodes (for selectionMode = 'multi').
 * @param {string} nodeIdentifier Value of model used to identify item uniquely.
 * @param {ITreeviewState} state Object obtains TreeView state.
 * @param {string} state.id Identifier of the VirtualNode.
 * @param {array} state.path Path to the node from root.
 * @param {boolean} state.expanded If node has to be expanded.
 * @param {boolean} state.checked If node has to be checked.
 * @param {function} onStateChanged Function executes every time state of TreeView is changed.
 *
 * @example
 * <example module="xui">
 *     <file src="src/components/treeview/docs/treeview-examples.html" name="index.html"></file>
 *     <file src="src/components/treeview/docs/treeview-examples.js" name="app.js"></file>
 * </example>
 */

/**
 * Xui Treeview directive
 */
export class Treeview implements ng.IDirective {

    public restrict = "AE";
    public templateUrl = "xui/components/treeview/treeview-directive.html";
    public replace = true;
    public transclude = true;
    public scope = {
        model: "=?",
        options: "=?",
        context: "=?",
        nodeIdentifier: "@?",
        state: "@?",
        onStateChanged: "&?"
    };

    public bindToController = true;
    public controller = TreeviewController;
    public controllerAs = "ctrl";

    public compile(element: ng.IAugmentedJQuery, attrs: ng.IAttributes,
                   transcludeFn: ng.ITranscludeFunction) {
        return {
            post: ($scope: ITreeviewScope, iElement: ng.IAugmentedJQuery,
                   iAttrs: ng.IAttributes, ctrl: ITreeviewController) => {
                ctrl.transcludeFn = transcludeFn;
                $scope.node = ctrl.context.rootNode;
            }
        };
    }

}
