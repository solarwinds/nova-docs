(function () {
    "use strict";

    Xui.module
        .controller("DemoTreeViewBasicController", DemoTreeViewBasicController)
        .controller("DemoTreeViewLinksController", DemoTreeViewLinksController)
        .controller("DemoTreeViewMultiController", DemoTreeViewMultiController)
        .controller("DemoTreeViewAsyncController", DemoTreeViewAsyncController, ["$timeout", "$q"])
        .controller("DemoTreeViewLimitController", DemoTreeViewLimitController, ["$q"])
        .controller("DemoTreeViewHighlightController", DemoTreeViewHighlightController, ["xuiToastService"])
        .controller("DemoTreeViewStateController", DemoTreeViewStateController, ["$timeout"]);

    function DemoTreeViewBasicController() {
        var vm = this;

        vm.context = {};
        vm.model = [];
        vm.clone = [];

        vm.options = {
            selectionMode: 'single',
            trackBy: 'id',
            isAlwaysSelected: true
        };

        vm.reverse = function () {
            vm.model.reverse();
        };

        vm.addChild = function () {
            vm.model.push({label: "ADDED VIA BINDING", children: []});
        };

        vm.dump = function () {
            var t = vm.clone;
            vm.clone = vm.model;
            vm.model = t;
        };

        generateTree(vm.model, 10, 4);

        //pre-generate replacement tree
        generateTree(vm.clone, 10, 4);
        vm.clone.reverse();
    }

    function DemoTreeViewLinksController() {
        var vm = this;

        vm.context = {};
        vm.model = [];

        generateTree(vm.model, 10, 3, function (n) {
            n.icon = 'status_up';
        });

        delete vm.model[9].children;
    }

    function DemoTreeViewMultiController() {
        var vm = this;

        vm.context = {};
        vm.model = [];
        vm.options = {
            selectionMode: 'multi'
        };

        generateTree(vm.model, 10, 3, function (n) {
            n.icon = 'status_up';
        });
    }

    function DemoTreeViewAsyncController($timeout, $q) {
        var vm = this;
        var icon = 'status_up';

        vm.context = {};
        vm.model = [];

        generateTree(vm.model, 2, 3);

        vm.options = {
            selectionMode: 'single',
            load: function (vnode) {
                var deferred = $q.defer();

                var children = vnode.$level > 3 ? null : [];

                $timeout(function () {
                    deferred.resolve([
                        {label: 'Async #1', children: children, icon: icon, id: 'id_001'},
                        {label: 'Async #2', children: children, icon: icon, id: 'id_002'}]);
                }, 1000);

                return deferred.promise;
            }
        };


    }

    function DemoTreeViewLimitController($q) {
        var vm = this;

        vm.context = {};
        vm.model = [];
        vm.options = {
            selectionMode: 'single',
            limit: 3
        };

        generateTree(vm.model, 10, 3, function (n) {
            n.icon = 'status_up';
        });
    }

    function DemoTreeViewHighlightController(toastService) {
        var vm = this;

        vm.model = [];

        generateTree(vm.model, 10, 3);

        vm.highlightNode = function () {
            toastService.success("Node Highlighted! Hover on me...", "TreeView Highlights", {}, [vm.model[0]]);
        };
    }

    function DemoTreeViewStateController($timeout) {
        var vm = this;

        vm.context = {};
        vm.states = [];
        vm.model = [];
        vm.state = [];
        vm.options = {
            selectionMode: 'single'
        };

        vm.stateChanged = function (newState, oldSate) {
            vm.states.push(vm.states.length + "    " + newState);
        };

        generateTree(vm.model, 5, 3);

        $timeout(function () {
            vm.state = [
                {
                    id: "id_0",
                    path: [],
                    expanded: true,
                    checked: false
                },
                {
                    id: "id_2",
                    path: ["id_0"],
                    expanded: true,
                    checked: false
                },
                {
                    id: "id_3",
                    path: ["id_0", "id_2"],
                    expanded: false,
                    checked: true
                }];
        });
    }

    function generateTree(children, count, depth, callbackFn) {
        if (depth <= 0) {
            return;
        }
        for (var i = 0; i < count; i++) {
            var id = 'id_' + i;
            var node = {label: 'Node' + (i + 1), id: id};

            if (depth > 1) {
                node.children = [];
            }
            if (callbackFn) {
                callbackFn(node);
            }

            children.push(node);
            generateTree(node.children, count, depth - 1, callbackFn);
        }
    }
})();