import ITreeviewContext = xui.ITreeviewContext;
import ITreeviewController = xui.ITreeviewController;
import {VirtualNode} from "./treeview-service";
import SpecHelper from "../../specHelper";
import TreeviewSpecHelper from "./treeviewSpecHelper";

interface ITreeviewTestScope extends ng.IScope {
    context:ITreeviewContext;
    options:any;
    model:any[];
    nodeIdentifier: string;
    state: string;
    onStateChanged:(newState: string, oldState: string) => void;
}

describe("components >", () => {
    describe("treeview >", () => {
        let element:ng.IAugmentedJQuery,
            ctrl:ITreeviewController,
            scope:ITreeviewTestScope,
            $compile:ng.ICompileService,
            $controller:ng.IControllerService,
            nodeCount = 3,
            $event = <JQueryEventObject>{
                target: {nodeName: ""}, stopPropagation: ()=> {
                    /* noop */
                }
            };

        beforeEach(() => {
            angular.mock.module("xui");
            angular.mock.inject(function ($templateCache:ng.ITemplateCacheService,
                                          $rootScope:ng.IRootScopeService, _$compile_:ng.ICompileService,
                                          _$controller_:ng.IControllerService) {
                scope = <ITreeviewTestScope>$rootScope.$new();
                $compile = _$compile_;
                $controller = _$controller_;
            });
        });

        function compileDirective(html:string):any {
            element = SpecHelper.getCompiledElement($compile, scope, html);
            scope.$apply();
            ctrl = element.controller("xuiTreeview");
            return element;
        }

        function firstNode():VirtualNode {
            return ctrl.context.rootNode.$children[0];
        }

        it("compiles", () => {
            scope.model = TreeviewSpecHelper.generateTree(1, 1);
            scope.options = {selectionMode: "single"};
            scope.context = <ITreeviewContext>{};

            compileDirective(TreeviewSpecHelper.directive);

            expect(element.is(".xui-treeview")).toBeTruthy();
            expect(element.find("xui-treeview-children").length).toBe(0);
        });

        describe("one level tree >", () => {
            beforeEach(() => {
                scope.model = TreeviewSpecHelper.generateTree(nodeCount, 1);

                compileDirective(TreeviewSpecHelper.directive);
            });

            // there are two levels of nodes but only the first level is present in DOM
            it("has 1st level nodes", () => {
                const nodes = element.find(".xui-treeview-node");
                expect(nodes.length).toBe(nodeCount);
            });

            it("has no toggle links", () => {
                const toggles = element.find(".xui-treeview-toggle a");
                expect(toggles.length).toBe(0);
            });

            it("has no checkboxes", () => {
                const toggles = element.find("input[type=\"checkbox\"]");
                expect(toggles.length).toBe(0);
            });

            it("has no 'show more' links", () => {
                expect(element.find(".xui-treeview-showmore").length).toBe(0);
            });
        });

        describe("two level tree", () => {
            beforeEach(() => {
                scope.model = TreeviewSpecHelper.generateTree(nodeCount, 2);
                scope.context = <ITreeviewContext>{};
                scope.options = {};

                compileDirective(TreeviewSpecHelper.directive);
            });

            // there are two levels of nodes but only the first level is present in DOM
            it("is collapsed", () => {
                const nodes = element.find(".xui-treeview-node");
                expect(nodes.length).toBe(nodeCount);
            });

            it("has toggle links for 1st level nodes", () => {
                const toggles = element.find(".xui-treeview-toggle");
                expect(toggles.length).toBe(nodeCount);
            });

            it("can expand a node", () => {
                const node = firstNode();
                ctrl.toggle($event, node);
                scope.$apply();

                // check model
                expect(node.collapsed).toBeFalsy();
                // check DOM
                const nodes = element.find(".xui-treeview-node");
                expect(nodes.length).toBe(nodeCount * 2);
            });

        });

        describe("no selection", () => {
            beforeEach(() => {
                scope.model = TreeviewSpecHelper.generateTree(nodeCount, 2);
                scope.options = {selectionMode: null};

                compileDirective(TreeviewSpecHelper.directive);
            });

            it("can expand & collapse a node by clicking on label", () => {
                expect(element.find(".xui-treeview-node").length).toBe(nodeCount);
                const node = firstNode();

                // expand
                ctrl.onNodeClick($event, node);
                scope.$apply();
                expect(node.collapsed).toBeFalsy();
                expect(element.find(".xui-treeview-node").length).toBe(nodeCount * 2);

                // collapse
                ctrl.onNodeClick($event, node);
                scope.$apply();
                expect(node.collapsed).toBeTruthy();
                expect(element.find(".xui-treeview-node").length).toBe(nodeCount);
            });

            it("has no focus by default", () => {
                expect(element.find(".xui-is-focused").length).toBe(0);
            });

            it("has no focus after clicking on label", () => {
                ctrl.onNodeClick($event, firstNode());
                // check model
                expect(ctrl.context.focusedNode).toBeUndefined();
                // check DOM
                expect(element.find(".xui-is-focused").length).toBe(0);
            });

        });

        describe("single selection >", () => {
            beforeEach(() => {
                scope.model = TreeviewSpecHelper.generateTree(nodeCount, 2);
                scope.options = {selectionMode: "single"};

                compileDirective(TreeviewSpecHelper.directive);
            });

            it("doesn't expand a node by clicking on label", () => {
                const node = firstNode();
                ctrl.onNodeClick($event, node);
                scope.$apply();

                // check model
                expect(node.collapsed).toBeTruthy();
                // check DOM
                expect(element.find(".xui-treeview-node").length).toBe(nodeCount);
            });

            it("can expand & collapse a node by double-clicking on label", () => {
                expect(element.find(".xui-treeview-node").length).toBe(nodeCount);
                const node = firstNode();

                ctrl.onNodeDblClick($event, node);
                scope.$apply();
                expect(node.collapsed).toBeFalsy(); // model
                expect(element.find(".xui-treeview-node").length).toBe(nodeCount * 2); // DOM

                ctrl.onNodeDblClick($event, node);
                scope.$apply();
                expect(node.collapsed).toBeTruthy(); // model
                expect(element.find(".xui-treeview-node").length).toBe(nodeCount); // DOM
            });

            it("is selected after clicking on label", () => {
                expect(element.find(".xui-is-selected").length).toBe(0);

                ctrl.onNodeClick($event, firstNode());
                scope.$apply();
                expect(element.find(".xui-is-selected").length).toBe(1);
            });

            it("sets the focused node to context", () => {
                ctrl.onNodeClick($event, firstNode());
                scope.$apply();

                expect(scope.context.focusedNode).toBeDefined();
                expect(scope.context.focusedNode.$model.label).toBe("Node1");
            });
        });

        describe("multi selection >", () => {
            beforeEach(() => {
                scope.model = TreeviewSpecHelper.generateTree(nodeCount, 3);
                scope.context = <ITreeviewContext>{};
                scope.options = {selectionMode: "multi"};

                compileDirective(TreeviewSpecHelper.directive);
            });

            it("has a checkbox for every node", () => {
                const checkboxes = element.find(":input[type='checkbox']");
                expect(checkboxes.length).toBe(nodeCount);
            });

            it("has checkboxes on 2nd level", () => {
                ctrl.toggle($event, firstNode());
                scope.$apply();

                const checkboxes = element.find(":input[type='checkbox']");
                expect(checkboxes.length).toBe(nodeCount * 2);
            });

            it("checks children nodes when parent is checked", () => {
                const node = firstNode().$children[0];
                node.checked = true;
                ctrl.checkNode($event, node);

                const allChecked = _.every(node.$children, (e:VirtualNode)=> {
                    return e.checked;
                });
                expect(allChecked).toBeTruthy();
            });

            it("marks parent of the checked node as indeterminate", () => {
                const node = firstNode().$children[0];
                node.checked = true;
                ctrl.checkNode($event, node);

                expect(node.$parent.indeterminate).toBeTruthy();
                expect(node.$parent.checked).toBeFalsy();
            });

            it("marks parent as checked when all children are checked", () => {
                const node = firstNode().$children[0];
                angular.forEach(node.$children, (n:VirtualNode) => {
                    n.checked = true;
                    ctrl.checkNode($event, n);
                });
                expect(node.indeterminate).toBeFalsy();
                expect(node.checked).toBeTruthy();
            });

            it("adds checked nodes to context", () => {
                const node = firstNode().$children[0];
                node.checked = true;
                ctrl.checkNode($event, node);

                expect(ctrl.context.selectedNodes.length).toBe(node.$children.length + 1);
                const allSelected = _.every(node.$children, (e:VirtualNode)=> {
                    return _.includes(ctrl.context.selectedNodes, e);
                });
                expect(allSelected).toBeTruthy();
            });
        });

        describe("show more / show all >", () => {
            let limitNodeCount = 10;
            let limit = 4;

            beforeEach(() => {
                scope.model = TreeviewSpecHelper.generateTree(limitNodeCount, 2);
                scope.context = <ITreeviewContext>{};
                scope.options = {selectionMode: "single", limit: limit};

                compileDirective(TreeviewSpecHelper.directive);
            });

            it("shows 'show more' link", () => {
                expect(element.find(".xui-treeview-showmore").length).toBe(1);
            });

            it("shows 'show all' link", () => {
                expect(element.find(".xui-treeview-showall").length).toBe(1);
            });

            it("limits number of items to configured value", () => {
                expect(element.find(".xui-treeview-node").length).toBe(limit);
            });

            it("sets the value of limit to options", ()=> {
                expect(ctrl.options.limit).toBe(limit);
            });

            it("sets the initial limit multiplier to nodes", ()=> {
                expect(ctrl.context.rootNode.limitMultiplier).toBe(1);
            });

            it("extends number of items after clicking on 'show more'", () => {
                ctrl.showMore($event, ctrl.context.rootNode);
                scope.$apply();

                expect(element.find(".xui-treeview-node").length).toBe(limit * 2);
                // show more should still be visible
                expect(element.find(".xui-treeview-showmore").length).toBe(1);
            });

            it("extends number of items after clicking on 'show all'", () => {
                ctrl.showAll($event, ctrl.context.rootNode);
                scope.$apply();

                expect(element.find(".xui-treeview-node").length).toBe(limitNodeCount);
            });

            it("hides 'show more/all' links when all items are visible", () => {
                ctrl.showAll($event, ctrl.context.rootNode);
                scope.$apply();

                // show all should no longer be visible
                expect(element.find(".xui-treeview-limit-links").length).toBe(0);
            });
        });
        describe("trackBy ", () => {
            /*
            The trackby functionality can be verified by checking if the explicitly modified dom elements are keeping
            their changes or not after the model is updated.
            If the changed element is not reverted then we know that Angular has not rerendered it because tracking it
            by the given id.
            */
            it("should use $index if trackBy is not specified and should not throw error", () => {
                scope.model = TreeviewSpecHelper.generateTree(nodeCount, 2, null, null, "id");
                scope.context = <ITreeviewContext>{};
                let domElement:any = compileDirective(TreeviewSpecHelper.directive);
                domElement.find(".xui-treeview-node:first-child").html("");
                scope.model.reverse();
                scope.model.reverse();
                scope.$apply();
                let nodeContentAfterModelChange = domElement.find(".xui-treeview-node:first-child").html();

                expect(nodeContentAfterModelChange).toBe("");
            });
            it("should use $index if trackBy property does not exist on node and should not throw error", () => {
                scope.model = TreeviewSpecHelper.generateTree(nodeCount, 2, null);
                scope.options = {trackBy: "id"};
                scope.context = <ITreeviewContext>{};

                let domElement:any = compileDirective(TreeviewSpecHelper.directive);
                domElement.find(".xui-treeview-node:first-child").html("");
                scope.model.reverse();
                scope.model.reverse();
                scope.$apply();
                let nodeContentAfterModelChange = domElement.find(".xui-treeview-node:first-child").html();
                expect(nodeContentAfterModelChange).toBe("");
            });
            it("should use specified property of trackBy option if exists on node", () => {
                scope.model = TreeviewSpecHelper.generateTree(nodeCount, 2, null, null, "id");
                scope.options = {trackBy: "id"};

                let domElement:any = compileDirective(TreeviewSpecHelper.directive);
                domElement.find(".xui-treeview-node:first-child").html("");
                scope.model.reverse();
                scope.model.reverse();
                scope.$apply();
                let nodeContentAfterModelChange = domElement.find(".xui-treeview-node:first-child").html();

                expect(nodeContentAfterModelChange).toBe("");
            });
        });
        describe("state ", () => {
            let initialState: string = JSON.stringify([{id: "id_0", path: [], expanded:false, checked:false}]);
            beforeEach(() => {
                scope.model = TreeviewSpecHelper.generateTree(nodeCount, 2, null, null, "id");
                scope.context = <ITreeviewContext>{};
                scope.state = initialState;
                scope.nodeIdentifier = "id";
            });
            it("change state for 'none' selectionMode", () => {
                let resultSate:any = {};
                scope.options = {selectionMode: null};
                scope.onStateChanged = (newState:string, oldState:string) => {
                    resultSate.newState = newState;
                    resultSate.oldState = oldState;
                };

                compileDirective(TreeviewSpecHelper.directiveWithState);
                let newState:any = [
                    {id: "id_1", path: [], expanded:true, checked:false}
                ];

                ctrl.onNodeClick($event, ctrl.context.rootNode.$children[1]);
                scope.$apply();

                expect(ctrl.context.rootNode.$children[1].checked).toBeFalsy();
                expect(ctrl.context.rootNode.$children[1].collapsed).toBeFalsy();
                expect(resultSate.newState).toBe(JSON.stringify(newState));
            });

            it("change state for 'multi' selectionMode", () => {
                let resultSate:any = {};
                scope.options = {selectionMode: null};
                scope.onStateChanged = (newState:string, oldState:string) => {
                    resultSate.newState = newState;
                    resultSate.oldState = oldState;
                };

                compileDirective(TreeviewSpecHelper.directiveWithState);
                let newState:any = [
                        {"id":"id_0","path":[],"expanded":true,"checked":true},
                        {"id":"id_0","path":["id_0"],"expanded":false,"checked":true},
                        {"id":"id_1","path":["id_0"],"expanded":false,"checked":true},
                        {"id":"id_2","path":["id_0"],"expanded":false,"checked":true}
                ];

                const node = firstNode();
                angular.forEach(node.$children, (n:VirtualNode) => {
                    n.checked = true;
                    ctrl.checkNode($event, n);
                });
                ctrl.onNodeClick($event, node);

                expect(firstNode().checked).toBeTruthy();
                expect(firstNode().collapsed).toBeFalsy();
                expect(resultSate.newState).toBe(JSON.stringify(newState));
            });
        });
    });
});
