import ITreeviewContext = xui.ITreeviewContext;
import ITreeviewController = xui.ITreeviewController;
import {VirtualNode} from "./treeview-service";
import TreeviewSpecHelper from "./treeviewSpecHelper";

describe("components >", () => {
    describe("treeview >", () => {
        describe("controller >", ()=> {
            let element:ng.IAugmentedJQuery,
                $controller:ng.IControllerService,
                $compile:ng.ICompileService,
                ctrl:ITreeviewController,
                scope:any;

            beforeEach(() => {
                angular.mock.module("xui");
                angular.mock.inject(($rootScope:ng.IRootScopeService, _$compile_:ng.ICompileService,
                                     _$controller_:ng.IControllerService) => {

                    $controller = _$controller_;
                    $compile = _$compile_;
                    scope = $rootScope.$new();
                });
            });

            function getNode(key:number):VirtualNode {
                return ctrl.context.rootNode.$children[key];
            }

            function compileDirective(html:string):any {
                element = TreeviewSpecHelper.getCompiledElement($compile, scope, html);
                scope.$apply();
                ctrl = element.controller("xuiTreeview");
                return element;
            }

            describe("on single mode selection", () => {
                beforeEach(() => {
                    scope.model = TreeviewSpecHelper.generateTree(3, 1);
                    scope.options = {selectionMode: "single"};
                    scope.context = <ITreeviewContext>{};
                    compileDirective(TreeviewSpecHelper.directive);
                });

                it("select node", () => {
                    let vnode = getNode(0);
                    vnode.checked = true;
                    ctrl.applySelection(<JQueryEventObject>{}, <VirtualNode>vnode);

                    expect(ctrl.context.selectedNode).toEqual(vnode);
                });

                it("select node and unselect previous selected node", () => {
                    let vnode = getNode(0);
                    vnode.checked = true;
                    ctrl.applySelection(<JQueryEventObject>{}, <VirtualNode>vnode);

                    vnode = getNode(1);
                    vnode.checked = true;
                    ctrl.applySelection(<JQueryEventObject>{}, <VirtualNode>vnode);

                    //selectedNode was setted
                    expect(ctrl.context.selectedNode).toEqual(vnode);

                    //previous node was unselected
                    expect(getNode(0).checked).toBeFalsy();
                });

                it("do not select node with false attribute", () => {
                    let vnode = getNode(0);
                    vnode.checked = false;

                    ctrl.applySelection(<JQueryEventObject>{}, <VirtualNode>vnode);

                    expect(ctrl.context.selectedNode).toBeNull();
                });
            });

            describe("on multi selection mode", () => {
                beforeEach(() => {
                    scope.model = TreeviewSpecHelper.generateTree(3, 2);
                    scope.context = <ITreeviewContext>{};
                    scope.options = {selectionMode: "multi"};
                    compileDirective(TreeviewSpecHelper.directive);
                });

                it("childs are selected if parent node is selected", () => {
                    let vnode = getNode(0);
                    vnode.checked = true;

                    ctrl.applySelection(<JQueryEventObject>{}, <VirtualNode>vnode);

                    let allSelected = _.every(vnode.$children, (e:VirtualNode) =>
                        _.includes(ctrl.context.selectedNodes, e));
                    expect(allSelected).toBeTruthy();
                });

                it("childs are checked if parent node is selected", () => {
                    let vnode = getNode(0);
                    vnode.checked = true;

                    ctrl.applySelection(<JQueryEventObject>{}, <VirtualNode>vnode);

                    let allChecked = _.every(vnode.$children, (e:VirtualNode) => e.checked = true);
                    expect(allChecked).toBeTruthy();
                });
            });

            describe("on no selection", () => {
                beforeEach(() => {
                    scope.model = TreeviewSpecHelper.generateTree(3, 1);
                    scope.options = {selectionMode: null};
                    scope.context = <ITreeviewContext>{};
                    compileDirective(TreeviewSpecHelper.directive);
                });

                it("do not select node", () => {
                    let vnode = getNode(0);
                    vnode.checked = true;
                    ctrl.applySelection(<JQueryEventObject>{}, <VirtualNode>vnode);

                    expect(ctrl.context.selectedNode).toEqual(null);
                    expect(ctrl.context.selectedNodes.length).toEqual(0);
                });
            });
        });
    });
});
