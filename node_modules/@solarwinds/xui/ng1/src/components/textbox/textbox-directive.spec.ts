import {ITestScope, default as SpecHelper} from "../../specHelper";

describe("components >", function () {
    describe("textbox >", function () {
        let $compile:ng.ICompileService,
            $scope:ITestScope,
            element: any;

        beforeEach(angular.mock.module("xui"));

        beforeEach(inject(($injector:any)=> {
            $scope = $injector.get("$rootScope").$new();
            $compile = $injector.get("$compile");
        }));

        function hasClass(elem:any, className:string) {
            const foundElement = _.find(elem.className.split(" "), function (cls:string) {
                return cls === className;
            });
            return foundElement;
        }

        const plainDirective = `<xui-textbox ng-model="BINDING" caption="plain caption"
                                           placeholder="plain placeholder" help-text="helpful text">
                              </xui-textbox>`;
        const emailDirective = `<xui-textbox type="email" ng-model="hello" caption="Email Address"
                                           placeholder="email address" validators="required,email">
                                  <div ng-message="required">requiredfail</div>
                                  <div ng-message="email">emailfail</div>
                              </xui-textbox>`;
        const smallDisabledDirective = `<xui-textbox ng-model="BINDING" size="small" is-disabled="true">
                                        </xui-textbox>`;
        const largeReadonlyDirective = `<xui-textbox ng-model="BINDING" size="large" is-read-only="true">
                                        </xui-textbox>`;
        const multilineDirective = `<xui-textbox rows="3" type="email" ng-model="hello" caption="Email Address"
                                                 placeholder="email address" validators="required,email">
                                        <div ng-message="required">requiredfail</div>
                                        <div ng-message="email">emailfail</div>
                                    </xui-textbox>`;

        it("copy caption to label", function () {
            element = SpecHelper.getCompiledElement($compile, $scope, plainDirective);
            $scope.$digest();

            const caption = element.find(".xui-textbox__control-label");
            expect(caption[0].innerText).toEqual("plain caption");
        });

        it("display placeholder", function () {
            element = SpecHelper.getCompiledElement($compile, $scope, plainDirective);
            $scope.$apply();

            const caption:any = element.find("input");
            expect(caption[0].placeholder).toEqual("plain placeholder");
        });

        it("help hints", function () {
            element = SpecHelper.getCompiledElement($compile, $scope, plainDirective);
            $scope.$apply();

            const caption = element.find(".xui-input-help");
            expect(caption[0].innerText).toEqual("helpful text");
        });

        it("isDisabled", function () {
            element = SpecHelper.getCompiledElement($compile, $scope, smallDisabledDirective);
            $scope.$apply();

            const inputBox:any = element.find("input");
            expect(inputBox[0].disabled).toBeTruthy();
        });

        it("read only", function () {
            element = SpecHelper.getCompiledElement($compile, $scope, largeReadonlyDirective);
            $scope.$apply();

            const inputBox:any = element.find("input");
            expect(inputBox[0].readOnly).toBeTruthy();
        });

        describe("validation >", function () {
            it("email will show error", function () {
                element = SpecHelper.getCompiledElement($compile, $scope, emailDirective);
                $scope["hello"] = "foo@ msn.com"; //space makes it invalid
                $scope.$apply();

                const caption = element.find(".xui-validation");
                expect(caption[0].innerText.trim()).toEqual("emailfail");
            });

            it("email will not show validaion error", function () {
                element = SpecHelper.getCompiledElement($compile, $scope, emailDirective);
                $scope["hello"] = "foo@msn.com";
                $scope.$apply();

                const caption = element.find(".xui-validation");
                expect(caption[0].innerText.trim()).toEqual("");
            });

            it("required will show error on empty string", function () {
                element = SpecHelper.getCompiledElement($compile, $scope, emailDirective);
                $scope["hello"] = "";  //empty string is not valid for required field
                $scope.$apply();

                const caption = element.find(".xui-validation");
                expect(caption[0].innerText.trim()).toEqual("requiredfail");
            });
        });

        describe("multi line >", function () {
            it("will respect row parameter", function () {
                element = SpecHelper.getCompiledElement($compile, $scope, multilineDirective);
                $scope.$apply();

                const inputBox = element.find("input");
                const textarea:any = element.find("textarea");
                expect(inputBox[0]).toBeUndefined();
                expect(textarea[0].rows).toBe(3);
            });

            it("required will show error on empty string", function () {
                element = SpecHelper.getCompiledElement($compile, $scope, multilineDirective);
                $scope["hello"] = ""; //empty string is not valid for required field
                $scope.$apply();

                const caption = element.find(".xui-validation");
                expect(caption[0].innerText.trim()).toEqual("requiredfail");
            });
        });
    });
});
