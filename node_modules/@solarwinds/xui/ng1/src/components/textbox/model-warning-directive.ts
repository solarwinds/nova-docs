//INTERNAL ONLY DIRECTIVE
//Used for monkey patching warning capabilities into ngmodel & ngform

export interface IXuiModelController extends ng.INgModelController {
    $$parentForm:IXuiFormController;
    $xuiWarn:boolean;
    $xuiWarning:{ [validatorName: string] : boolean; };
    $xuiSetWarning(validatorName:string, isWarning:boolean):void;
}

export interface IXuiFormController extends ng.IFormController {
    $xuiWarning:{ [validatorName: string] : ng.INgModelController[]; };
    $xuiSetWarning(validatorName:string, isWarning:boolean, modelController:IXuiModelController):void;
}

export class ModelWarning implements ng.IDirective {
    public static $inject = ["$log"];

    constructor(private $log:ng.ILogService) {
    }

    public require = ["?^form", "ngModel"];
    public restrict = "A";
    public link = (scope:ng.IScope, element:ng.IAugmentedJQuery, attrs:ng.IAttributes,
                   controllers:[IXuiFormController, IXuiModelController]) => {
        const formController = controllers[0];
        const modelController = controllers[1];

        modelController.$xuiWarning = {}; //dictionary of string (validator name) - bool
        modelController.$xuiWarn = false;
        modelController.$xuiSetWarning = this.modelSetWarning;

        //only want to patch the form once
        if (formController && !formController.$xuiWarning) {
            formController.$xuiWarning = {}; //dictionary of string (validator name) - controller array
            formController.$xuiSetWarning = this.formSetWarning;
        }
    };

    private modelSetWarning(validatorName:string, isWarning:boolean) {
        //WARNING! notice that this method is a traditional javascript function,
        //so 'this' is actually whatever is bound to it- when called from a validator,
        //it should be the ngModelController
        const modelController:IXuiModelController = <any>this;
        if (isWarning) {
            modelController.$xuiWarning[validatorName] = isWarning;
        } else {
            delete modelController.$xuiWarning[validatorName];
        }

        modelController.$xuiWarn = Object.keys(modelController.$xuiWarning).length > 0;

        modelController.$$parentForm.$xuiSetWarning(validatorName, isWarning, modelController);
    };

    private formSetWarning(validatorName:string, isWarning:boolean, modelController:IXuiModelController) {
        const formController = modelController.$$parentForm;
        if (isWarning) {
            if (!formController.$xuiWarning[validatorName]) {
                formController.$xuiWarning[validatorName] = [];
            }
            formController.$xuiWarning[validatorName].push(modelController);
        } else {
            if (formController.$xuiWarning[validatorName]) {
                const index = formController.$xuiWarning[validatorName].indexOf(modelController);
                if (index > -1) {
                    formController.$xuiWarning[validatorName].splice(index, 1);
                }
                if (formController.$xuiWarning[validatorName].length <= 0) {
                    delete formController.$xuiWarning[validatorName];
                }
            }
        }
    };
}
