import { IXuiModelController } from "./model-warning-directive";

class TextboxController {
    public static $inject = ["$translate"];

    constructor($translate: angular.translate.ITranslateService) {
        this.optionalText = $translate.instant("xui_textbox_optional");
    }

    public input: IXuiModelController;
    public multiline: boolean;
    public validators: string[] = [];
    public customBoxWidth: string;
    public isDisabled: boolean = false;
    public isReadOnly: boolean = false;
    public isRequired: boolean;
    public value: any;
    public onChange: Function;
    public iconValidationState = "severity_error";

    public wasFocused = (): boolean => {
        this.checkIconValidity();
        return this.input && (this.input.$touched || this.input.$dirty);
    };

    public isInErrorState = (): boolean => {
        return this.input &&
            !this.isReadOnly &&
            !this.isDisabled &&
            this.input.$invalid &&
            this.wasFocused();
    };

    public isInWarningState = (): boolean => {
        return this.input && !this.isReadOnly && !this.isDisabled &&
            this.input.$xuiWarn &&
            this.wasFocused();
    };

    public isPending = (): boolean => {
        return this.input ? (this.input.$pending && this.wasFocused()) : false;
    };

    public checkIconValidity = (): void => {
        if (this.iconValidationState === "severity_error") {
            return;
        }

        if (this.isPending()) {
            this.iconValidationState = "severity_unknown";
        } else if (this.isInWarningState()) {
            this.iconValidationState = "severity_warning";
        } else if (this.isInErrorState()) {
            this.iconValidationState = "severity_error";
        }
    };

    public showValidityIcon = (): boolean => {
        return this.wasFocused() && !this.isPending();
    };

    public showFeedback = (): boolean => {
        if (this.multiline || this.isDisabled || this.isReadOnly) {
            return false;
        }
        if (this.validators.length > 0) {
            return (this.input.$touched || this.input.$dirty);
        }
        return false;
    };

    public stateText = (): string => {
        if (this.isReadOnly || this.isDisabled) {
            return "";
        }
        if (!this.input.$viewValue || this.input.$viewValue === "") {
            if (this.isRequired) {
                return "";
            }
            return this.optionalText;
        }
        return "";
    };

    public addNumber = (num: number): void => {
        let newValue = (parseInt(this.input.$viewValue, 10) || 0) + num;
        this.value = newValue;
        this.input.$setTouched();
        if (angular.isFunction(this.onChange)) {
            this.onChange();
        }
    };

    private optionalText: string;
}

export default TextboxController;
