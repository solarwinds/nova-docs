import SidebarController from "./sidebar-controller";
import ISidebarSettings = xui.ISidebarSettings;

describe("components >", () => {
    describe("sidebar >", () => {
        describe("controller >", () => {
            const slideoutRight = "xui-sidebar-slideout-right",
                slideinRight = "xui-sidebar-slidein-right",
                slideoutLeft = "xui-sidebar-slideout-left",
                slideinLeft = "xui-sidebar-slidein-left",
                shrinkIn = "xui-sidebar--shrink-slidein-right",
                shrinkOut = "xui-sidebar--shrink-slideout-right";

            let $controller: ng.IControllerService,
                $scope: ng.IScope,
                ctrl: SidebarController;

            beforeEach(angular.mock.module("xui"));
            beforeEach(inject(($injector: any) => {
                $controller = $injector.get("$controller");
                $scope = $injector.get("$rootScope").$new();
                ctrl = <SidebarController>$controller("xuiSidebarController",
                    {
                        "$scope": $scope
                    });
            }));

            it(`slideClass should be equal to ${slideoutRight}`, () => {
                ctrl.settings = <ISidebarSettings>{
                    display: false,
                    position: "right",
                    shrink: false
                };
                ctrl["syncState"]();
                expect(ctrl.slideClass).toBe(slideoutRight);
            });

            it(`slideClass should be equal to ${slideinRight}`, () => {
                ctrl.settings = <ISidebarSettings>{
                    display: true,
                    position: "right",
                    shrink: false
                };
                ctrl["syncState"]();
                expect(ctrl.slideClass).toBe(slideinRight);
            });

            it(`slideClass should be equal to ${slideoutLeft}`, () => {
                ctrl.settings = <ISidebarSettings>{
                    display: false,
                    position: "left",
                    shrink: false
                };
                ctrl["syncState"]();
                expect(ctrl.slideClass).toBe(slideoutLeft);
            });

            it(`slideClass should be equal to ${slideinLeft}`, () => {
                ctrl.settings = <ISidebarSettings>{
                    display: true,
                    position: "left",
                    shrink: false
                };
                ctrl["syncState"]();
                expect(ctrl.slideClass).toBe(slideinLeft);
            });

            it(`slideClass should be equal to ${shrinkIn}`, () => {
                ctrl.settings = <ISidebarSettings>{
                    display: true,
                    position: "right",
                    shrink: true
                };
                ctrl["syncState"]();
                expect(ctrl.slideClass).toBe(shrinkIn);
            });

            it(`slideClass should be equal to ${shrinkOut}`, () => {
                ctrl.settings = <ISidebarSettings>{
                    display: false,
                    position: "right",
                    shrink: true
                };
                ctrl["syncState"]();
                expect(ctrl.slideClass).toBe(shrinkOut);
            });

            it(`slideClass should be changed from ${slideoutLeft} to ${shrinkIn}`, () => {
                ctrl.settings = <ISidebarSettings>{
                    display: false,
                    position: "left",
                    shrink: false
                };
                ctrl["syncState"]();
                expect(ctrl.slideClass).toBe(slideoutLeft);

                ctrl.settings.display = true;
                ctrl.settings.position = "right";
                ctrl.settings.shrink = true;
                ctrl["syncState"]();
                expect(ctrl.slideClass).toBe(shrinkIn);
            });
        });
    });
});
