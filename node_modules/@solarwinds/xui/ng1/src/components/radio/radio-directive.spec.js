var SpecHelper = require("../../specHelper").default;

describe('components >', function () {
    describe('radio >', function () {
        var element, scope, compile;

        beforeEach(angular.mock.module('xui'));

        beforeEach(inject(function ($compile, $rootScope) {
            compile = $compile;
            scope = $rootScope.$new();
            scope.radioValue = "0";
        }));

        var parentElement = "form"
        var directive =
            '<xui-radio ng-model="model" value="radioValue" title="radioTooltip" is-required="true" is-disabled="true">' +
                'radioTitle' +
            '</xui-radio>';

        it('should use element string content as label', function () {
            element = SpecHelper.getCompiledElementInParentElement(compile, scope, directive, parentElement);

            var label = element.find('.xui-radio-label');

            expect(label[0].innerText.trim()).toEqual("radioTitle");
        });

        it('should use element html content as label', function () {
            var htmlContentDirective =
                '<xui-radio ng-model="model" value="radioValue">' +
                '<b>boldRadioTitle</b>' +
                '</xui-radio>';

            element = SpecHelper.getCompiledElementInParentElement(compile, scope, htmlContentDirective, parentElement);

            var label = element.find('.xui-radio-label');

            expect(label[0].innerHTML).toMatch('<b .*>boldRadioTitle</b>');
        });

        it('should be disabled when attribute is-disabled="true" is used', function () {
            element = SpecHelper.getCompiledElementInParentElement(compile, scope, directive, parentElement);

            var el = element.find('.xui-radio-input');

            expect(el[0].disabled).toBeTruthy();
        });

        it('should be required when attribute is-required="true" is used', function () {
            element = SpecHelper.getCompiledElementInParentElement(compile, scope, directive, parentElement);

            var el = element.find('.xui-radio-input')[0];

            expect(el.required).toBeTruthy();
        });


        it('should have a tooltip when attribute title is used', function () {
            element = SpecHelper.getCompiledElementInParentElement(compile, scope, directive, parentElement);

            var el = element.find('.xui-radio')[0];

            expect(el.title).toEqual('radioTooltip');
        });

        it('should have only "value" attribute and not "ng-value" attribute, when "ng-value" is not defined', function () {
            element = SpecHelper.getCompiledElementInParentElement(compile, scope, directive, parentElement);

            var el = element.find('.xui-radio-input')[0];

            expect(el.hasAttribute('value')).toBeTruthy();
            expect(el.hasAttribute('ng-value')).toBeFalsy();
        });

        it('should have only "ng-value" attribute and not "value" attribute, when "ng-value" is defined', function () {
            var ngValueDirective =
                '<xui-radio ng-model="model" value="radioValue" ng-value="ngRadioValue">' +
                'radioTitle' +
                '</xui-radio>';

            element = SpecHelper.getCompiledElementInParentElement(compile, scope, ngValueDirective, parentElement);

            var el = element.find('.xui-radio-input')[0];

            expect(el.hasAttribute('value')).toBeFalsy();
            expect(el.hasAttribute('ng-value')).toBeTruthy();
        });

        var testCases = [
            {
                //ng-value allows multiple-time binding so model should be changed
                ngValueDirective : "<xui-radio ng-model=\"model\" ng-value=\"radioValue\"></xui-radio>", 
                expectedModelValue: "1"
            },
            {
                //value allows only one-time binding so model should not be changed
                ngValueDirective: "<xui-radio ng-model=\"model\" value=\"{{radioValue}}\"></xui-radio>",
                expectedModelValue: "0"
            }
        ];

        testCases.forEach(function(testCase) {
            it(`should have expected radio model value for directive ${testCase.ngValueDirective} 
            when scope.radioValue has been changed`, function () {                          
                element = SpecHelper.getCompiledElementInParentElement(compile, scope, testCase.ngValueDirective, parentElement);                        
                var el = element.find('.xui-radio-input')[0];            
                
                //check default radio value
                el.click();          
                expect(scope.model).toBe("0");                                                
                
                //check changed radio value
                scope.radioValue = "1";   
                scope.$apply();            
                el.click();                
                expect(scope.model).toBe(testCase.expectedModelValue);  
            });
        });
    });
});
