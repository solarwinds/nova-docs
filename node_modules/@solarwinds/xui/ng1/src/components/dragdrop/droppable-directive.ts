import DroppableController from "./droppable-controller";
import Inject from "../../decorators/di";
import IDragScrollConstants = xui.IDragScrollConstants;
import xuiDragEvent = xui.xuiDragEvent;

/**
 * @ngdoc directive
 * @name xui.directive:xuiDroppable
 * @restrict A
 *
 * @description
 * XUI component for HTML 5 drop.
 *
 * @parameters
 * @param {function(event, transferObject) =} onDrop Event called when object is dropped.  May return a promise.
 * @param {function(event) =} onDragOver Event called during drag over.
 * @param {function(event) =} onDragEnter Event called when mouse enters during drag.
 * @param {function(event) =} onDragLeave Event called when mouse leaves during drag.
 * @param {string=} dragOverClass CSS class to be added to droppable target when
 * acceptable item is about to be dropped on it.
 * @example
 * <example module="xui">
 *   <file src="src/components/dragdrop/docs/dragDrop-examples.html" name="index.html"></file>
 *   <file src="src/components/dragdrop/docs/dragDrop-examples.js" name="app.js"></file>
 * </example>
 */

export default class Droppable implements ng.IDirective {
    constructor(@Inject("$timeout") private $timeout: ng.ITimeoutService,
                @Inject("$rootScope") private $rootScope: any,
                @Inject("xuiDragScrollConstants") private dragScrollConstants: IDragScrollConstants,
                @Inject("$q") private $q: ng.IQService) {
    }

    public restrict = "A";
    public controller = DroppableController;
    public controllerAs = "droppable";
    public bindToController = {
        onDragOver: "&?",
        onDragEnter: "&?",
        onDragLeave: "&?",
        onDrop: "&?",
        dragOverClass: "@?"
    };

    public link = (scope: ng.IScope, element: ng.IAugmentedJQuery,
                   attrs: ng.IAttributes, ctrl: DroppableController) => {
        let dragElements: any[] = [];

        const dragThrottle = _.throttle((dragEvent: any) => {
            ctrl.dragOver(dragEvent);
        }, this.dragScrollConstants.dragOverThrottleInMs, {trailing: false});

        // modules can use this class to style content before dropping
        const dragOverClass = ctrl.dragOverClass || "xui-drag--over";

        const events: { [key: string]: (event: xuiDragEvent) => void } = {
            "dragenter": (event: xuiDragEvent) => {
                event = <DragEvent>(<JQueryEventObject>event).originalEvent || event;

                if (dragElements.length === 0) {
                    element.addClass(dragOverClass);
                    scope.$apply(() => ctrl.dragEnter(event));
                }

                dragElements.push(event.target);
                event.preventDefault();
            },
            "dragover": (event: xuiDragEvent) => {
                event = <DragEvent>(<JQueryEventObject>event).originalEvent || event;

                dragThrottle(event);

                event.preventDefault();
            },
            "dragleave": (event: xuiDragEvent) => {
                event = <DragEvent>(<JQueryEventObject>event).originalEvent || event;

                dragElements = dragElements.filter(e => e !== event.target);

                if (dragElements.length === 0) {
                    element.removeClass(dragOverClass);
                    scope.$apply(() => ctrl.dragLeave(event));
                }
            },
            "drop": (event: xuiDragEvent) => {
                event = <DragEvent>(<JQueryEventObject>event).originalEvent || event;

                event.preventDefault();
                dragElements = [];

                if ((typeof DragEvent !== "undefined" && event instanceof DragEvent) || (<any>event).dataTransfer) {
                    const transferredObject = this.extractDragObject(attrs, <DragEvent>event);

                    scope.$apply(() => {
                        const dropReturn = ctrl.drop(event, transferredObject);
                        this.$q.when(dropReturn).then(() => {
                            element.removeClass(dragOverClass);
                        });
                    });
                } else {
                    element.removeClass(dragOverClass);
                }

                event.stopPropagation();
                return false;
            }
        };

        for (let event in events) {
            if (events.hasOwnProperty(event)) {
                element.on(event, events[event]);
            }
        }

        scope.$on("$destroy", () => {
            element.off(Object.keys(events));
        });
    };

    private extractDragObject = (attrs: ng.IAttributes, event: DragEvent): any => {
        const payload = event.dataTransfer.getData("Text") || event.dataTransfer.getData("text/plain");
        try {
            return angular.fromJson(payload); //if we are not dragging an object, this will throw
        } catch (e) {
            return payload;
        }
    };
}
