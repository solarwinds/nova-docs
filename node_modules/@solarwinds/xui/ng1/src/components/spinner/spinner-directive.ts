/**
 * @ngdoc directive
 * @name xui.directive:xuiSpinner
 * @restrict E
 * @description
 * Spinning element.
 *
 * @parameters
 * @param {boolean} show If the spinner should be shown or not.
 * @param {number} [size=20] Width and height of the spinner in pixels. Currently, only 20, 32, and 64 are supported.
 * @param {number} [delay=250] How long (in ms) the spinner will wait to display after show is set.
 *
 * @example
 *  <example module="xui">
 *      <file src="src/components/spinner/docs/spinner-examples.html" name="index.html"></file>
 *      <file src="src/components/spinner/docs/spinner-examples.js" name="script.js"></file>
 *  </example>
 */

interface ISpinnerScope extends ng.IScope {
    show:boolean;
    size:string;
    delay:number;
}

export default class Spinner implements ng.IDirective {
    public static $inject = ["$timeout", "swUtil", "$log"];

    public allowableSizes = ["20", "32", "64"];

    constructor(private $timeout:ng.ITimeoutService, private swUtil:any, private $log:ng.ILogService) {
    }

    public restrict = "E";
    public template = "<span id=\"{{::name}}\" class=\"xui-icon-name-busy-cube xui-spinner\"></span>";
    public replace = true;
    public transclude = false;
    public scope = {
        name: "@",
        show: "=",
        size: "@",
        delay: "@"
    };

    public link = (scope:ISpinnerScope, element:ng.IAugmentedJQuery, attrs:ng.IAttributes) => {
        this.swUtil.initComponent(attrs, "spinner");

        let size = scope.size || this.allowableSizes[0];
        const delay = scope.delay || 250;

        const index = this.allowableSizes.indexOf(size);
        if (index < 0) {
            size = this.allowableSizes[0];
            this.$log.warn("The only allowable sizes for xui-spinner are " +
                this.allowableSizes + ". defaulting to " + this.allowableSizes[0]);
        }
        element.addClass("xui-spinner-" + size).hide();

        let cancellation: ng.IPromise<any>;

        scope.$watch("show", (newVal:boolean) => {
            if (newVal) {
                if (cancellation) {
                    return;
                }
                cancellation = this.$timeout(() => element.fadeIn(300), delay);
            } else {
                if (cancellation) {
                    cancellation.catch(angular.noop);
                    this.$timeout.cancel(cancellation);
                }
                cancellation = null;
                element.fadeOut(300);
            }
        });
    };
}
