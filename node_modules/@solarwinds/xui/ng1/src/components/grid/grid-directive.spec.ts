///<reference path="../../ref.d.ts"/>

import SpecHelper from "../../specHelper";

describe("components >", ()=> {
    describe("grid >", ()=> {
        let element:any,
            $scope:any,
            $compile:ng.ICompileService,
            ctrl:any;
        beforeEach(angular.mock.module("xui"));

        beforeEach(inject(($injector:ng.auto.IInjectorService)=> {
            $compile = $injector.get<ng.ICompileService>("$compile");
            $scope = $injector.get<ng.IRootScopeService>("$rootScope").$new();
        }));

        const html = `<xui-grid items-source="['a','b','c']"
                selection-mode="{{selectionMode}}" show-selector="showSelector"
                smart-mode="smartMode" pagination-data="pagination" />`,
              htmlFillLayout = `<xui-grid items-source="['a','b','c']"
                selection-mode="{{selectionMode}}" show-selector="showSelector"
                smart-mode="smartMode" pagination-data="pagination" layout="fill"/>`;

        function compile(directiveHtml:string) {
            element = SpecHelper.getCompiledElement($compile, $scope, directiveHtml);
            ctrl = element.controller("xuiGrid");
        }

        it("compiles", () => {
            compile(html);
            expect(element.is(".xui-grid")).toEqual(true);
        });

        it("compiles with smart-mode enabled", ()=> {
            $scope.pagination = {page: 1, pageSize: 10};
            compile(`<xui-grid items-source="['a','b','c']" smart-mode="true" pagination-data="pagination"/>`);
            expect(element.is(".xui-grid")).toEqual(true);
        });

        it("doesn't compile with smart-mode enabled without pagination", ()=> {
            const wrongHtml = `<xui-grid items-source="['a','b','c']" smart-mode="true" />`;
            expect(function () {
                compile(wrongHtml);
            }).toThrow();
        });

        it("compiles with fill layout enabled", () => {
            compile(htmlFillLayout);
            expect(ctrl.layout).toBe("fill");
            expect(element.hasClass("xui-grid--fill")).toBeTruthy();
        });

        describe("when it is compiled", () => {
            it("replaces directive element", () => {
                compile(html);
                expect(element[0].tagName.toLowerCase()).not.toEqual("xui-grid");
            });
        });

        describe("when sorting data is not provided", () => {
            it("it should not display sorter component", () => {
                // act
                element = SpecHelper.getCompiledElement($compile, $scope, html);

                // assert
                const sorter = element.find(".xui-sorter");
                expect(sorter.length).toEqual(0);
            });
        });

        describe("when sorting data is provided", () => {
            it("it should display sorter component", () => {
                // arrange
                $scope.sorting = {
                    sortableColumns: [{"id": "title", "label": "Name"}],
                    sortBy: {"id": "title", "label": "Name"},
                    direction: "asc"
                };
                $scope.smartMode = true;
                $scope.pagination = {page: 1, pageSize: 10};

                const htmlWithSorting = `<xui-grid items-source="['a','b','c']"
                        sorting-data="sorting" smart-mode="smartMode" pagination-data="pagination">
                    </xui-grid>`;

                // act
                element = SpecHelper.getCompiledElement($compile, $scope, htmlWithSorting);

                // assert
                const sorter = element.find(".xui-sorter");
                expect(sorter.length).toEqual(1);
            });
        });

        describe("when 'showSelector' attribute is not defined or it is set to == false", () => {
            it("it should not display selector component", () => {
                // act
                element = SpecHelper.getCompiledElement($compile, $scope, html);

                // assert
                const selector = element.find(".xui-selector");
                expect(selector.length).toEqual(0);
            });
        });

        describe("when 'selectionMode' attribute != 'multi'", () => {
            it("it should not display selector component", () => {
                // arrange
                $scope.selectionMode = "";

                // act
                element = SpecHelper.getCompiledElement($compile, $scope, html);

                // assert
                const selector = element.find(".xui-selector");
                expect(selector.length).toEqual(0);
            });
        });

        describe("when selection mode == 'multi' AND 'showSelector' == true", () => {
            it("it should display sorter component", () => {
                // arrange
                $scope.showSelector = true;
                $scope.selectionMode = "multi";
                $scope.pagination = {page: 1, pageSize: 10};
                $scope.smartMode = true;

                // act
                element = SpecHelper.getCompiledElement($compile, $scope, html);

                // assert
                const selector = element.find(".xui-selector");
                expect(selector.length).toEqual(1);
            });
        });

        describe("when a 'hide-toolbar' option is set to false", () => {
            it("it should display toolbar panel", () => {
                // arrange
                const htmlWithToolbar = `<xui-grid items-source="['a','b','c']">
                    <xui-grid-toolbar-container>test</xui-grid-toolbar-container>
                    </xui-grid>`;

                // act
                element = SpecHelper.getCompiledElement($compile, $scope, htmlWithToolbar);

                // assert
                const toolbarContainerEl = element.find(".xui-grid__toolbar-container-panel");
                expect(toolbarContainerEl.length).toEqual(1);
            });
        });

        describe("when a 'hide-toolbar' option is set to true", () => {
            it("it should not display toolbar panel", () => {
                // arrange
                const htmlWithToolbar = `<xui-grid items-source="['a','b','c']" hide-toolbar="true">
                    <xui-grid-toolbar-container>test</xui-grid-toolbar-container>
                    </xui-grid>`;

                // act
                element = SpecHelper.getCompiledElement($compile, $scope, htmlWithToolbar);

                // assert
                const toolbarContainerEl = element.find(".xui-grid__toolbar-container-panel");
                expect(toolbarContainerEl.length).toEqual(0);
            });
        });

        describe("when no items are selected", () => {
            it("should not display selection title", () => {
                // arrange
                const htmlWithToolbar = `<xui-grid items-source="['a','b','c']">
                        <xui-grid-toolbar-container>test</xui-grid-toolbar-container>
                        </xui-grid>`;

                // act
                element = SpecHelper.getCompiledElement($compile, $scope, htmlWithToolbar);

                // assert
                const selectionTitleEl = element.find(".xui-grid__selection-title");
                expect(selectionTitleEl.length).toEqual(0);
            });
        });

        describe("when some items are selected", () => {
            it("should display selection title", () => {
                $scope.showSelector = true;
                $scope.pagination = {page: 1, pageSize: 10};
                $scope.smartMode = true;
                $scope.selectionMode = "multi";

                // arrange
                const htmlWithToolbar = `<xui-grid items-source="['a','b','c']" selection-mode="{{selectionMode}}"
                            selection="{items:['a']}" show-selector="showSelector"
                            smart-mode="smartMode" pagination-data="pagination">
                        <xui-grid-toolbar-container>test</xui-grid-toolbar-container>
                        </xui-grid>`;

                // act
                element = SpecHelper.getCompiledElement($compile, $scope, htmlWithToolbar);

                // assert
                const selectionTitleEl = element.find(".xui-grid__selection-title");
                expect(selectionTitleEl.length).toEqual(1);
            });
        });

        describe("when hideSearch is ", () => {
            it("not defined, the search field is displayed by default", () => {
                element = SpecHelper.getCompiledElement($compile, $scope, html);
                let searchField = element.find(".xui-search__input-control");
                expect(searchField.length).toEqual(1);
            });
            it("defined as false, the search field is displayed", () => {
                let gridWithOptions = `<xui-grid items-source="['a','b','c']"
                        selection-mode="{{selectionMode}}" show-selector="showSelector"
                        smart-mode="smartMode" pagination-data="pagination" options="options"/>`;

                $scope.options = {hideSearch: false};
                element = SpecHelper.getCompiledElement($compile, $scope, gridWithOptions);
                let searchField = element.find(".xui-search__input-control");
                expect(searchField.length).toEqual(1);
            });
            it("defined as true, the search field is not displayed", () => {
                let gridWithOptions = `<xui-grid items-source="['a','b','c']"
                        selection-mode="{{selectionMode}}" show-selector="showSelector"
                        pagination-data="pagination" options="options"/>`;

                $scope.options = {hideSearch: true};
                element = SpecHelper.getCompiledElement($compile, $scope, gridWithOptions);

                let searchField = element.find(".xui-search__input-control");
                expect(searchField.length).toEqual(0);
            });

        });

        describe("row-paddings are propagated to listitems", () => {
            const gridWithOptions = `<xui-grid items-source="['a','b','c']" row-padding="rowPadding" />`;

            it("'xui-listitem--regular' as default", () => {
                $scope.rowPadding = undefined;
                element = SpecHelper.getCompiledElement($compile, $scope, gridWithOptions);
                let rowElement = element.find(".xui-listitem:first-child");
                expect(rowElement.hasClass("xui-listitem--regular")).toBe(true);
            });
            it("'xui-listitem--regular' on 'regular'", () => {
                $scope.rowPadding = "regular";
                element = SpecHelper.getCompiledElement($compile, $scope, gridWithOptions);
                let rowElement = element.find(".xui-listitem:first-child");
                expect(rowElement.hasClass("xui-listitem--regular")).toBe(true);
            });
            it("'xui-listitem--narrow' on 'narrow'", () => {
                $scope.rowPadding = "narrow";
                element = SpecHelper.getCompiledElement($compile, $scope, gridWithOptions);
                let rowElement = element.find(".xui-listitem:first-child");
                expect(rowElement.hasClass("xui-listitem--narrow")).toBe(true);
            });
            it("'xui-listitem--compact' on 'compact'", () => {
                $scope.rowPadding = "compact";
                element = SpecHelper.getCompiledElement($compile, $scope, gridWithOptions);
                let rowElement = element.find(".xui-listitem:first-child");
                expect(rowElement.hasClass("xui-listitem--compact")).toBe(true);
            });
            it("no spacing class on 'none'", () => {
                $scope.rowPadding = "none";
                element = SpecHelper.getCompiledElement($compile, $scope, gridWithOptions);
                let rowElement = element.find(".xui-listitem:first-child");
                expect(rowElement.hasClass("xui-listitem--compact")).toBe(false);
                expect(rowElement.hasClass("xui-listitem--narrow")).toBe(false);
                expect(rowElement.hasClass("xui-listitem--regular")).toBe(false);
            });
        });
    });
});
