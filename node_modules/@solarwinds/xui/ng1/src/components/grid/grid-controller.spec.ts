/// <reference path="../../ref.d.ts" />

import GridController from "./grid-controller";
import IGridSorting = xui.IGridSorting;

describe("components >", () => {
    describe("grid controller >", () => {
        let $controller:ng.IControllerService,
            defaultPrimitiveCtrl:GridController,
            smartPrimitiveCtrl:GridController,
            defaultObjectCtrl:GridController,
            smartObjectCtrl:GridController,
            $scope:any,
            primitiveValues:any[],
            $timeout:ng.ITimeoutService,
            testSearchInput:string = "testElek",
            objectValues:any[];

        beforeEach(angular.mock.module("xui"));

        beforeEach(inject(($injector:any) => {
            $controller = $injector.get("$controller");
            $scope = $injector.get("$rootScope").$new();
            $timeout = $injector.get("$timeout");

            primitiveValues = ["1", "2", "3"];
            objectValues = [
                {
                    id: 1,
                    value: "First"
                },
                {
                    id: 2,
                    value: "Second"
                },
                {
                    id: 3,
                    value: "Third"
                },
            ];

            defaultPrimitiveCtrl = <GridController>$controller("xuiGridController",
                {
                    "$scope": $scope
                },
                {
                    itemsSource: primitiveValues,
                    onPaginationChange: (x:any) => x,
                    onSortingChange: (x:any) => x
                });
            smartPrimitiveCtrl = <GridController>$controller("xuiGridController",
                {
                    "$scope": $scope
                },
                {
                    itemsSource: primitiveValues,
                    smartMode: true,
                    pagination: {
                        page: 1,
                        pageSize: 1,
                        total: 3
                    },
                    onPaginationChange: (x:any) => x,
                    onSortingChange: (x:any) => x
                });

            defaultObjectCtrl = <GridController>$controller("xuiGridController",
                {
                    "$scope": $scope
                },
                {
                    itemsSource: objectValues,
                    selectionProperty: "id",
                    onPaginationChange: (x:any) => x,
                    onSortingChange: (x:any) => x
                });
            smartObjectCtrl = <GridController>$controller("xuiGridController",
                {
                    "$scope": $scope
                },
                {
                    itemsSource: objectValues,
                    smartMode: true,
                    pagination: {
                        page: 1,
                        pageSize: 1,
                        total: 3
                    },
                    onPaginationChange: (x:any) => x,
                    onSortingChange: (x:any) => x
                });

            // need to $apply() because of watch used for smartItemsSource
            $scope.$apply();
        }));

        it("creates new instance", () => {
            expect(defaultPrimitiveCtrl).toBeDefined();
            expect(smartPrimitiveCtrl).toBeDefined();
        });

        it("getItemsSource returns correct data in default mode", () => {
            expect(defaultPrimitiveCtrl.getItemsSource()).toEqual(["1", "2", "3"]);
        });

        it("getItemsSource returns correct data in smart mode", () => {
            expect(smartPrimitiveCtrl.getItemsSource()).toEqual(["1"]);
        });

        it("getItemsSource returns correct data when itemSource changes in smart mode", () => {
            const before = smartPrimitiveCtrl.getItemsSource();
            expect(before).toEqual(["1"]);

            smartPrimitiveCtrl.itemsSource = ["4", "5", "6"];
            $scope.$apply();
            const after = smartPrimitiveCtrl.getItemsSource();
            expect(after).toEqual(["4"]);
        });

        it("cannot get total in default mode without pagination set", () => {
            expect(defaultPrimitiveCtrl.getTotal()).toBe(0);
        });

        it("gets correct total in default mode with pagination", () => {
            defaultPrimitiveCtrl.pagination = {page: 1, pageSize: 1, total: 3};
            expect(defaultPrimitiveCtrl.getTotal()).toBe(3);
        });

        it("gets correct total in smart mode", () => {
            expect(smartPrimitiveCtrl.getTotal()).toBe(3);
        });

        it("gets correct total in smart mode when searching", () => {
            smartPrimitiveCtrl.searchModel = "2";
            smartPrimitiveCtrl.onSearchInternal(smartPrimitiveCtrl.searchModel, null);
            $scope.$apply();
            expect(smartPrimitiveCtrl.getTotal()).toBe(1);
        });

        it("calls onSearch internally", () => {
            smartPrimitiveCtrl.onSearch = jasmine.createSpy("onSearch");
            smartPrimitiveCtrl.onSearchInternal("test", null);
            expect(smartPrimitiveCtrl.onSearch).toHaveBeenCalled();
        });

        it("calls onSearchChange internally", () => {
            smartPrimitiveCtrl.onSearchChange = jasmine.createSpy("onSearchChange");
            smartPrimitiveCtrl.onSearchChangeInternal();
            $timeout(() => {
                expect(smartPrimitiveCtrl.onSearchChange).toHaveBeenCalled();
            });
        });

        it("calls onPaginationChange internally", () => {
            smartPrimitiveCtrl.onPaginationChange = jasmine.createSpy("onPaginationChange");
            smartPrimitiveCtrl.onPaginationChangeInternal(1, 1, 3);
            expect(smartPrimitiveCtrl.onPaginationChange).toHaveBeenCalled();
        });

        describe("when items on current page are selected using selector >", ()=> {
            it("adds all items on current page to selection", ()=> {
                smartObjectCtrl.selectionProperty = null;
                smartObjectCtrl.selection = {items: objectValues.slice(1, 2), blacklist: false};
                smartObjectCtrl.onSelectorItemClick({name: "all"});

                expect(smartObjectCtrl.selection.items).toEqual(objectValues.slice(0, 2));
            });

            it("respects selection property", ()=> {
                smartObjectCtrl.selectionProperty = "id";
                smartObjectCtrl.selection = {items: [2], blacklist: false};
                smartObjectCtrl.onSelectorItemClick({name: "all"});

                expect(smartObjectCtrl.selection.items).toEqual([1, 2]);
            });
        });

        describe("when items are deselected using selector >", ()=> {
            beforeEach(()=> {
                smartObjectCtrl.selection = {items: objectValues, blacklist: false};
                smartObjectCtrl.onSelectorItemClick({name: "none"});
            });

            it("clears the selection", ()=> {
                expect(smartObjectCtrl.selection.items).toEqual([]);
            });

            it("returns isEverythingSelected as false", ()=> {
                expect(smartObjectCtrl.isEverythingSelected()).toEqual(false);
            });
        });

        describe("when items on all pages are selected >", ()=> {
            describe("when in smart mode", ()=> {
                beforeEach(()=> {
                    smartObjectCtrl.selection = {items: objectValues, blacklist: false};
                    smartObjectCtrl.onSelectorItemClick({name: "all pages"});
                });

                it("adds all items to selection", ()=> {
                    expect(smartObjectCtrl.selection.items).toEqual(objectValues);
                    expect(smartObjectCtrl.selection.blacklist).toEqual(false);
                });

                it("returns isEverythingSelected as true", ()=> {
                    expect(smartObjectCtrl.isEverythingSelected()).toEqual(true);
                });
            });

            describe("when in default ", ()=> {
                beforeEach(()=> {
                    defaultObjectCtrl.selection = {items: objectValues, blacklist: false};
                    defaultObjectCtrl.onSelectorItemClick({name: "all pages"});
                });

                it("toggles the blacklist flag on selection and clears selection items", ()=> {
                    expect(defaultObjectCtrl.selection.items).toEqual([]);
                    expect(defaultObjectCtrl.selection.blacklist).toEqual(true);
                });

                it("returns isEverythingSelected as true", ()=> {
                    expect(defaultObjectCtrl.isEverythingSelected()).toEqual(true);
                });
            });
        });

        describe("related to search, ", () => {
            it("when onSearch is set, it is called on clicking search button with the search model", () => {
                let callbackMocks = {
                    onSearchMock: (args:{item:any, cancellation:any}):any=> {
                        /*just not to be empty*/
                        return;
                    }
                };
                spyOn(callbackMocks, "onSearchMock");

                defaultPrimitiveCtrl.onSearch = callbackMocks.onSearchMock;

                defaultPrimitiveCtrl.onSearchInternal(testSearchInput, null);
                $scope.$apply();
                expect(callbackMocks.onSearchMock).toHaveBeenCalledWith({item: testSearchInput, cancellation: null});
            });

            it("when onSearch is not set, the component should not throw error", () => {
                expect(defaultPrimitiveCtrl.onSearchInternal.bind(testSearchInput, null)).not.toThrow();
            });
        });

        describe("in smart-mode sorts the items, ", () => {
            beforeEach(() => {
                let sorting: IGridSorting = {
                    sortBy: {id: "id", label: "Id"},
                    sortableColumns: [{id: "id", label: "Id"}, {id: "value", label: "Value"}],
                    direction: "desc"
                };

                smartObjectCtrl.sorting = sorting;
                $scope.$apply();
            });

            it("direction 'desc' sorts descendingly", () => {
                expect([_.last(objectValues)]).toEqual(smartObjectCtrl.smartItemsSource);
            });

            it("direction 'asc' sorts descendingly", () => {
                smartObjectCtrl.sorting.direction = "asc";
                $scope.$apply();
                expect([_.first(objectValues)]).toEqual(smartObjectCtrl.smartItemsSource);
            });

            it("direction 'original' doesn't sort", () => {
                smartObjectCtrl.sorting.direction = "original";
                $scope.$apply();
                expect([_.first(objectValues)]).toEqual(smartObjectCtrl.smartItemsSource);
            });
        });
    });
});
