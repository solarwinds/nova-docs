(function () {
    "use strict";

    Xui.module
        .controller("DemoGridController", DemoGridController, ["$q", "$templateCache", "xuiToastService"]);

    function DemoGridController ($q, $templateCache, toast) {
        var vm = this;
        var totalGridItemsCount = 50;
        var gridItems = createGridItems();

        vm.items = gridItems;
        vm.smartMode = true;

        vm.gridOptions = {
            triggerSearchOnChange: true,
            searchDebounce: 500,
            hidePagination: false,
            pagerAdjacent: 0
        };

        vm.gridPagination = {
            page: 1,
            pageSize: 5
        };

        vm.sorting = {
            sortableColumns: [{
                id: "name",
                label: "Name"
            }, {
                id: "value",
                label: "Value"
            }
            ],
            sortBy: {
                id: "name",
                label: "Name"
            },
            direction: "asc"
        };

        vm.selection = {};
        vm.selectionMode = "multi";

        vm.toolbarButtonClicked = function () {
            toast.success("Button clicked. Selected items: " + JSON.stringify(vm.selection));
        };

        vm.removeItem = function () {
            vm.items = _.filter(vm.items, function (item) {
                return !_.includes(vm.selection.items, item.name);
            });

            vm.selection.items = [];
            toast.success("Menu item removed. Selected items: " + JSON.stringify(vm.selection));
        };

        vm.onMenuItemAction = function () {
            toast.success("Menu item clicked. Selected items: " + JSON.stringify(vm.selection));
        };

        vm.customButtonClick = function () {
            vm.items[0].name = "Changed Item " + Math.round(Math.random()*1000);
            toast.success("Name of first row in the grid has been changed to " + vm.items[0].name);
        };

        function createGridItems() {
            var items = [];

            for (var i = 0; i < totalGridItemsCount; i++) {
                items.push({
                    name: "Item " + pad(i, 3),
                    value: makeValue(),
                    $templateUrl: "demo-item-template"
                });
            }

            return items;
        }

        function makeValue() {
            var text = "";
            var possible = "abcdefghijklmnopqrstuvwxyz";

            for (var i = 0; i < 10; i++) {
                text += possible.charAt(Math.floor(Math.random() * possible.length));
            }

            return text;
        }

        function pad(num, size) {
            var s = num + "";
            while (s.length < size) {
                s = "0" + s;
            }
            return s;
        }

        $templateCache.put("demo-item-template", "<div style='display:flex; justify-content:flex-start;'>{{::item.name}}<div style='margin-left:20px;'>{{::item.value}}</div></div>");
    }
})();
