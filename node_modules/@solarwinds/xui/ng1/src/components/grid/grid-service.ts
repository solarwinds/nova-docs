/// <reference path="../../ref.d.ts" />

export default class GridService {

    /**
     * This method will add `items` to `currentSelection`. Returned value is the new selection value.
     *
     * @param currentSelection
     * @param items
     * @returns {any[]|T[]}
     */
    public select(currentSelection:any[], items:any[], selectionProperty:string):any[] {
        const cleanItems = items.map((i) => {
            return this.getSelectionItemModel(i, selectionProperty);
        });

        return this.unionWith(cleanItems, currentSelection, _.isEqual);
    }

    /**
     * Remove `items` from `currentSelection`. Return new array.
     *
     * @param currentSelection
     * @param items
     * @param selectionProperty
     */
    public unselect(currentSelection:any[], items:any[], selectionProperty:string):any[] {
        const cleanItems = items.map((i) => {
            return this.getSelectionItemModel(i, selectionProperty);
        });

        return this.withoutWith(currentSelection, cleanItems, _.isEqual);
    }

    /**
     * TODO:lodash TO BE REMOVED AFTER LODASH UPGRADE ON V.4 ... use _.unionWith(x, y, _.isEqual)
     */
    public unionWith(arr1:any[], arr2:any[], equalityFunc:(i:any, j:any)=>boolean):any[] {
        const union = arr1.concat(arr2);
        for (let i = 0; i < union.length; i++) {
            for (let j = i + 1; j < union.length; j++) {
                if (equalityFunc(union[i], union[j])) {
                    union.splice(j, 1);
                    j--;
                }
            }
        }
        return union;
    }

    /**
     * TODO:lodash TO BE REMOVED AFTER LODASH UPGRADE ON V.4 ... use _.unionWith(x, y, _.isEqual)
     */
    public withoutWith(arr1:any[], removeArr:any[], equalityFunc:(i:any, j:any)=>boolean):any[] {
        const result = arr1.slice();
        for (let i = result.length - 1; i >= 0; i--) {
            for (let j = 0; j < removeArr.length; j++) {
                if (equalityFunc(arr1[i], removeArr[j])) {
                    result.splice(i, 1);
                }
            }
        }
        return result;
    }

    /**
     * Returns an object used for selection model based on `this.selectionProperty` setting
     *
     * @param item
     * @param selectionProperty
     * @returns {any}
     */
    public getSelectionItemModel(item:any, selectionProperty:string):any {
        if (selectionProperty) {
            return item[selectionProperty];
        } else if (item.hasOwnProperty("$$hashKey")) {
            return _.omit(item, ["$$hashKey"]);
        }
        return item;
    }

}
