import {IMenuItem} from "./menu-item";
import { IMenuService } from "./menu-service";
import IEdgeDetectionResult = xui.IEdgeDetectionResult;

export interface IMenuController {
    size:string;
    title:string;
    titleIcon:string;
    displayStyle:string;
    icon:string;
    menuAlign:string;
    itemsSource:IMenuItem[];
    isDisabled:boolean;
    adjustMenuPosition: Function;
    getSizeClass: Function;
    getIcon: Function;
    getMenuItemClasses: Function;
    menuService: IMenuService;
}

export default class MenuController implements IMenuController {
    public static $inject = ["xuiMenuService", "$element", "xuiEdgeDetectionService"];

    constructor(public menuService: IMenuService,
                private $element:ng.IAugmentedJQuery,
                private edgeDetector:xui.IEdgeDetectionService) {

    }

    public sizeMap:{ [key: string]: string } = {
        "small": "xui-menu-sm"
    };

    public size:string;
    public title:string;
    public titleIcon:string;
    public displayStyle:string;
    public icon:string;
    public menuAlign:string;
    public itemsSource:IMenuItem[];
    public isDisabled:boolean;
    public menuAppendToBody:boolean;

    public getSizeClass = ():string => {
        if (this.size) {
            return this.sizeMap[this.size.toLowerCase()];
        }

        return "";
    };

    public getIcon = ():string => {
        let icon = this.icon || "caret-down";

        if (this.displayStyle === "primary") {
            icon += "-light";
        }

        return icon;
    };

    public getMenuItemClasses = (item:IMenuItem):string => {
        const itemClass = "xui-menu-item";

        // css classes used by bootstrap to render a menu correctly
        switch (item.itemType) {
            case "header":
                return itemClass + " dropdown-header";
            case "divider":
                return itemClass + " divider";
            case "option":
            case "link":
            case "action":
                return itemClass;
            default:
                console.warn("Unknown menu item type: " + item.itemType);
                return itemClass;
        }
    };

    public adjustMenuPosition = (event:MouseEvent):void => {

        const menu: ng.IAugmentedJQuery = this.$element.find(".dropdown-menu");
        const button: ng.IAugmentedJQuery = this.$element.find(".xui-menu-button");
        const canBe: IEdgeDetectionResult = this.edgeDetector.canBe(button, menu);

        // switch menu expand direction if needed
        if (!canBe.placed.bottom && canBe.placed.top) {
            this.$element.find(".dropdown").addClass("dropup").removeClass("dropdown");
        } else {
            // default
            this.$element.find(".dropup").addClass("dropdown").removeClass("dropup");
        }

        // switch menu alignment if needed
        if (!canBe.aligned.right && canBe.aligned.left) {
            menu.removeClass("dropdown-menu-right");
        } else if (canBe.aligned.right && !canBe.aligned.left) {
            menu.addClass("dropdown-menu-right");
        } else {
            // default
            menu.hasClass("menu-right")
                ? menu.addClass("dropdown-menu-right")
                : menu.removeClass("dropdown-menu-right");
        }
    };
}
