import {IMenuController} from "./menu-controller";
import {IMenuItem} from "./menu-item";
import {MenuItem} from "./menu-item";
import SpecHelper from "../../specHelper";

describe("components >", () => {
    describe("menuController >", () => {
        let scope:any,
            ctrlMenu:IMenuController;

        beforeEach(angular.mock.module("xui"));

        beforeEach(inject(function ($compile:ng.ICompileService, $rootScope:ng.IScope) {
            const directive = "<xui-menu is-disabled='isDisabled' title='{{title}}' titleIcon='{{titleIcon}}' " +
                "size='{{size}}' " +
                "display-style='{{displayStyle}}' menu-align='{{menuAlign}}' > " +
                "<xui-menu-header></xui-menu-header>" +
                "<xui-menu-link></xui-menu-link>" +
                "<xui-menu-action></xui-menu-action>" +
                "<xui-menu-divider></xui-menu-divider>" +
                "<xui-menu-option></xui-menu-option>" +
                "</xui-menu>";

            scope = $rootScope.$new();

            const element = SpecHelper.getCompiledElement($compile, scope, directive);

            ctrlMenu = element.controller("xuiMenu");
        }));

        it("should return empty string for defined size", () => {
            // act
            const sizeClass = ctrlMenu.getSizeClass();

            // assert
            expect(sizeClass).toEqual("");
        });

        it("should return proper size class for defined size", () => {
            // arrange
            ctrlMenu.size = "small";

            // act
            const sizeClass = ctrlMenu.getSizeClass();

            // assert
            expect(sizeClass).toEqual("xui-menu-sm");
        });

        it("should return default icon name for not defined icon", () => {
            // act
            const icon = ctrlMenu.getIcon();

            // assert
            expect(icon).toEqual("caret-down");
        });

        it("should return icon name for defined icon", () => {
            // arrange
            ctrlMenu.icon = "caret-up";

            // act
            const icon = ctrlMenu.getIcon();

            // assert
            expect(icon).toEqual("caret-up");
        });

        it("should return correct menu item classes for specific item type", () => {
            let menuItem:IMenuItem, menuItemClasses:string;
            const menuItemTypes = ["header", "divider", "option", "link", "action", "notDefined"],
                expectedMenuItemClasses = ["xui-menu-item dropdown-header",
                    "xui-menu-item divider",
                    "xui-menu-item",
                    "xui-menu-item",
                    "xui-menu-item",
                    "xui-menu-item"];

            for (let i:number = 0; i < menuItemTypes.length; i++) {
                // arrange
                menuItem = new MenuItem(this.$compile, ctrlMenu.menuService, menuItemTypes[i]);

                // act
                menuItemClasses = ctrlMenu.getMenuItemClasses(menuItem);

                // assert
                expect(menuItemClasses).toEqual(expectedMenuItemClasses[i]);
            }
        });

        it("should prevent default behaviour for disabled menu link item", () => {
            // arrange
            const menuItem = new MenuItem(this.$compile, ctrlMenu.menuService, "link");
            menuItem.disabled = true;
            let event = scope.$broadcast("click");

            // act
            ctrlMenu.menuService.handleItemClick(event, menuItem);

            // assert
            expect(event.defaultPrevented).toBeTruthy();
        });

        it("should not prevent default behaviour for enabled menu link item", () => {
            // arrange
            const menuItem = new MenuItem(this.$compile, ctrlMenu.menuService, "link");
            let event = scope.$broadcast("click");

            // act
            ctrlMenu.menuService.handleItemClick(event, menuItem);

            // assert
            expect(event.defaultPrevented).toBeFalsy();
        });

        it("should not do anything for disabled menu action item", () => {
            // arrange
            const menuItem = new MenuItem(this.$compile,ctrlMenu.menuService,  "action");
            menuItem.disabled = true;
            menuItem.action = jasmine.createSpy("actionMethod");
            let event = scope.$broadcast("click");

            // act
            ctrlMenu.menuService.handleItemClick(event, menuItem);

            // assert
            expect(menuItem.action).not.toHaveBeenCalled();
        });

        it("should do defined action for enabled menu action item", () => {
            // arrange
            const menuItem = new MenuItem(this.$compile, ctrlMenu.menuService, "action");
            menuItem.action = jasmine.createSpy("actionMethod");
            let event = scope.$broadcast("click");

            // act
            ctrlMenu.menuService.handleItemClick(event, menuItem);

            // assert
            expect(menuItem.action).toHaveBeenCalled();
        });

        it("should stop event propagation for menu option item", () => {
            // arrange
            const menuItem = new MenuItem(this.$compile, ctrlMenu.menuService,  "option");
            let event = scope.$broadcast("click");
            event.stopPropagation = jasmine.createSpy("actionMethod");

            // act
            ctrlMenu.menuService.handleItemClick(event, menuItem);

            // assert
            expect(event.stopPropagation).toHaveBeenCalled();
        });
    });
});
