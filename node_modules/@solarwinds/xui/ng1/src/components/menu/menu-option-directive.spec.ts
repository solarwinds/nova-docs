import SpecHelper from "../../specHelper";

describe("components >", function () {
    describe("menu >", function () {
        describe("item option >", function () {
            let element:ng.IAugmentedJQuery,
                scope:any,
                compile:ng.ICompileService;

            beforeEach(angular.mock.module("xui"));

            beforeEach(inject(function ($compile:ng.ICompileService, $rootScope:any) {
                compile = $compile;
                scope = $rootScope.$new();
            }));

            const xuiMenuDirectiveName = "xui-menu";
            const xuiMenuDirectiveCtrlMock = {};

            const directive = "<xui-menu-option is-disabled='isDisabled' is-checked='isChecked'><b>content</b>" +
                "</xui-menu-option>";

            describe("dom manipulations >", function () {
                it("should have checkbox disabled when 'is-disabled' attribute is set to 'true'", function () {
                    // arrange
                    scope.isDisabled = true;

                    // act
                    element = SpecHelper.getCompiledElementRequiringParentCtrl(compile, scope, directive,
                        xuiMenuDirectiveName, xuiMenuDirectiveCtrlMock);

                    // assert
                    const checkboxElem:any = element.find("input[type=checkbox]")[0];
                    expect(checkboxElem.disabled).toBeTruthy();
                });

                it("should have checkbox enabled when 'is-disabled' attribute is set to 'false'", function () {
                    // arrange
                    scope.isDisabled = false;

                    // act
                    element = SpecHelper.getCompiledElementRequiringParentCtrl(compile, scope, directive,
                        xuiMenuDirectiveName, xuiMenuDirectiveCtrlMock);

                    // assert
                    const checkboxElem = element.find("input[type=checkbox]")[0];
                    expect(checkboxElem).toBeDefined();
                });

                it("should have checkbox checked when 'is-checked' attribute is set to 'true'", function () {
                    // arrange
                    scope.isChecked = true;

                    // act
                    element = SpecHelper.getCompiledElementRequiringParentCtrl(compile, scope, directive,
                        xuiMenuDirectiveName, xuiMenuDirectiveCtrlMock);

                    // assert
                    const checkboxElem = element.find("input[type=checkbox]:checked")[0];
                    expect(checkboxElem).toBeDefined();
                });

                it("should not have checkbox checked when 'is-checked' attribute is set to 'false'", function () {
                    // arrange
                    scope.isChecked = false;

                    // act
                    element = SpecHelper.getCompiledElementRequiringParentCtrl(compile, scope, directive,
                        xuiMenuDirectiveName, xuiMenuDirectiveCtrlMock);

                    // assert
                    const checkboxElem = element.find("input[type=checkbox]:checked")[0];
                    expect(checkboxElem).not.toBeDefined();
                });
            });

            describe("replace >", function () {
                it("should have replaced directive element", function () {
                    // act
                    element = SpecHelper.getCompiledElementRequiringParentCtrl(compile, scope, directive,
                        xuiMenuDirectiveName, xuiMenuDirectiveCtrlMock);

                    // assert
                    const directiveEl = element.find("xui-menu-option");
                    expect(directiveEl.length).toEqual(0);
                });
            });

            describe("transclude >", function () {
                it("should have an ng-transclude directive in it", function () {
                    // act
                    element = SpecHelper.getCompiledElementRequiringParentCtrl(compile, scope, directive,
                        xuiMenuDirectiveName, xuiMenuDirectiveCtrlMock);

                    // assert
                    const transcludeEl = element.find("span[ng-transclude]:not(.xui-checkbox-transclude)");
                    expect(transcludeEl.length).toEqual(1);
                });

                it("should have transclude content", function () {
                    // act
                    element = SpecHelper.getCompiledElementRequiringParentCtrl(compile, scope, directive,
                        xuiMenuDirectiveName, xuiMenuDirectiveCtrlMock);

                    // assert
                    const transcludeContentEl = element.find(".xui-menu-item-option")[0];
                    expect(transcludeContentEl.innerHTML).toMatch("<b .*>content</b>");
                });
            });

            describe("isolated scope >", function () {
                it("'isDisabled' on isolated scope should be two-way bound", function () {
                    // arrange
                    scope.isDisabled = true;

                    // act
                    element = SpecHelper.getCompiledElementRequiringParentCtrl(compile, scope, directive,
                        xuiMenuDirectiveName, xuiMenuDirectiveCtrlMock);

                    const isolatedScope:any = element.isolateScope();
                    isolatedScope.isDisabled = false;
                    scope.$apply();

                    // assert
                    expect(scope.isDisabled).toEqual(false);
                });

                it("'isChecked' on isolated scope should be two-way bound", function () {
                    // arrange
                    scope.isChecked = true;

                    // act
                    element = SpecHelper.getCompiledElementRequiringParentCtrl(compile, scope, directive,
                        xuiMenuDirectiveName, xuiMenuDirectiveCtrlMock);

                    const isolatedScope:any = element.isolateScope();
                    isolatedScope.isChecked = false;
                    scope.$apply();

                    // assert
                    expect(scope.isChecked).toEqual(false);
                });
            });
        });
    });
});
