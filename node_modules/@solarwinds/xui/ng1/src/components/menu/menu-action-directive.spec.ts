import SpecHelper from "../../specHelper";

describe("components >", () => {
    describe("menu >", () => {
        describe("item action >", () => {
            let element:any,
                scope:any,
                compile:ng.ICompileService;

            beforeEach(angular.mock.module("xui"));

            beforeEach(inject(function ($compile:ng.ICompileService, $rootScope:any) {
                compile = $compile;
                scope = $rootScope.$new();
            }));

            const xuiMenuDirectiveName = "xui-menu";
            const xuiMenuDirectiveCtrlMock = {};

            const directive = "<xui-menu-action is-disabled='isDisabled' action = 'actionMethod()'>" +
                "<b>content</b></xui-menu-action> ";

            describe("dom manipulations >", () => {
                it("should have 'disabled' class when 'is-disabled' attribute is set to 'true'", () => {
                    // arrange
                    scope.isDisabled = true;

                    // act
                    element = SpecHelper.getCompiledElementRequiringParentCtrl(compile, scope, directive,
                        xuiMenuDirectiveName, xuiMenuDirectiveCtrlMock);

                    // assert
                    expect(element.hasClass("disabled")).toBeTruthy();
                });

                it("should not have 'disabled' class when 'is-disabled' attribute is set to 'false'", () => {
                    // arrange
                    scope.isDisabled = false;

                    // act
                    element = SpecHelper.getCompiledElementRequiringParentCtrl(compile, scope, directive,
                        xuiMenuDirectiveName, xuiMenuDirectiveCtrlMock);

                    // assert
                    expect(element.hasClass("disabled")).toBeFalsy();
                });
            });

            describe("dom events >", () => {
                it("it should call scope method after 'click' on link when it is enabled", () => {
                    // arrange
                    scope.actionMethod = jasmine.createSpy("actionMethod");
                    scope.isDisabled = false;

                    // act
                    element = SpecHelper.getCompiledElementInParentElement(compile, scope, directive,
                        xuiMenuDirectiveName);
                    const linkEl = element.find("a.xui-menu-item-link");
                    linkEl.triggerHandler("click");

                    // assert
                    expect(scope.actionMethod).toHaveBeenCalled();
                });

                it("it should not call scope method after 'click' on link when it is disabled", () => {
                    // arrange
                    scope.actionMethod = jasmine.createSpy("actionMethod");
                    scope.isDisabled = true;

                    // act
                    element = SpecHelper.getCompiledElementInParentElement(compile, scope, directive,
                        xuiMenuDirectiveName);
                    const linkEl = element.find("a.xui-menu-item-link");
                    linkEl.triggerHandler("click");

                    // assert
                    expect(scope.actionMethod).not.toHaveBeenCalled();
                });
            });

            describe("replace >", () => {
                it("should have replaced directive element", () => {
                    // act
                    element = SpecHelper.getCompiledElementRequiringParentCtrl(compile, scope, directive,
                        xuiMenuDirectiveName, xuiMenuDirectiveCtrlMock);

                    // assert
                    expect(element[0].tagName.toLowerCase()).not.toEqual("xui-menu-action");
                });
            });

            describe("transclude >", () => {
                it("should have an ng-transclude directive in it", () => {
                    // act
                    element = SpecHelper.getCompiledElementRequiringParentCtrl(compile, scope, directive,
                        xuiMenuDirectiveName, xuiMenuDirectiveCtrlMock);

                    // assert
                    const transcludeEl = element.find("a[ng-transclude]");
                    expect(transcludeEl.length).toEqual(1);
                });

                it("should have transclude content", () => {
                    // act
                    element = SpecHelper.getCompiledElementRequiringParentCtrl(compile, scope, directive,
                        xuiMenuDirectiveName, xuiMenuDirectiveCtrlMock);

                    // assert
                    const transcludeContentEl = element.find(".xui-menu-item-link")[0];
                    expect(transcludeContentEl.innerHTML).toMatch("<b .*>content</b>");
                });
            });

            describe("isolated scope >", () => {
                it("'isDisabled' on isolated scope should be two-way bound", () => {
                    // arrange
                    scope.isDisabled = true;

                    // act
                    element = SpecHelper.getCompiledElementRequiringParentCtrl(compile, scope, directive,
                        xuiMenuDirectiveName, xuiMenuDirectiveCtrlMock);

                    const isolatedScope:any = element.isolateScope();
                    isolatedScope.isDisabled = false;
                    scope.$apply();

                    // assert
                    expect(scope.isDisabled).toEqual(false);
                });

                it("should call 'action' method of scope when invoked from isolated scope", () => {
                    // arrange
                    scope.actionMethod = jasmine.createSpy("actionMethod");

                    // act
                    element = SpecHelper.getCompiledElementRequiringParentCtrl(compile, scope, directive,
                        xuiMenuDirectiveName, xuiMenuDirectiveCtrlMock);

                    const isolatedScope:any = element.isolateScope();
                    isolatedScope.action();

                    // assert
                    expect(scope.actionMethod).toHaveBeenCalled();
                });
            });
        });
    });
});
