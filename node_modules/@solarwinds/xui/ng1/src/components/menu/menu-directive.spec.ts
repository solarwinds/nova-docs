import {IMenuController} from "./menu-controller";
import {IMenuScope} from "./menu-directive";
import {IMenuItem} from "./menu-item";
import SpecHelper from "../../specHelper";

describe("components >", () => {
    describe("menu >", () => {
        let element:any,
            scope:any,
            compile:any,
            ctrl:IMenuController;

        beforeEach(angular.mock.module("xui"));

        beforeEach(inject(function ($compile:ng.ICompileService, $rootScope:IMenuScope) {
            compile = $compile;
            scope = $rootScope.$new();
        }));

        const directive = "<xui-menu is-disabled='isDisabled' title='{{title}}' size='{{size}}' " +
            "display-style='{{displayStyle}}' menu-align='{{menuAlign}}' icon='{{icon}}'>" +
            "<xui-menu-header></xui-menu-header>" +
            "<xui-menu-link></xui-menu-link>" +
            "<xui-menu-action></xui-menu-action>" +
            "<xui-menu-divider></xui-menu-divider>" +
            "<xui-menu-option></xui-menu-option>" +
            "</xui-menu>";

        const directiveJson = "<xui-menu items-source='itemsSource'></xui-menu>";

        describe("dom manipulations >", () => {
            it("should have button disabled when 'is-disabled' attribute is set to 'true'", () => {
                // arrange
                scope.isDisabled = true;

                // act
                element = SpecHelper.getCompiledElement(compile, scope, directive);

                // assert
                const buttonElem:any = element.find("button")[0];
                expect(buttonElem.disabled).toBeTruthy();
            });

            it("should have button enabled when 'is-disabled' attribute is set to 'false", () => {
                // arrange
                scope.isDisabled = false;

                // act
                element = SpecHelper.getCompiledElement(compile, scope, directive);

                // assert
                const buttonElem:any = element.find("button")[0];
                expect(buttonElem.disabled).toBeFalsy();
            });

            it("should have button's title based on 'title' attribute", () => {
                // arrange
                scope.title = "menuTitle";

                // act
                element = SpecHelper.getCompiledElement(compile, scope, directive);

                // assert
                const button = element.find(".xui-button-content")[0];
                expect(button.innerText.trim()).toEqual("menuTitle");
            });

            it("should have class based on 'size' attribute", () => {
                // arrange
                scope.size = "small";

                // act
                element = SpecHelper.getCompiledElement(compile, scope, directive);

                // assert
                expect(element.hasClass("xui-menu-sm")).toBeTruthy();
            });

            it("should use caret down icon by default", () => {
                // act
                element = SpecHelper.getCompiledElement(compile, scope, directive);

                // assert
                const buttonIconElem:any = element.find("button .xui-icon");
                expect(buttonIconElem.attr("icon")).toEqual("caret-down");
            });

            it("should use icon based on 'icon' attribute", () => {
                // arrange
                scope.icon = "caret-up";

                // act
                element = SpecHelper.getCompiledElement(compile, scope, directive);

                // assert
                const buttonIconElem:any = element.find("button .xui-icon");
                expect(buttonIconElem.attr("icon")).toEqual("caret-up");
            });

            it("should contain proper number of items (child controls)", () => {
                // act
                element = SpecHelper.getCompiledElement(compile, scope, directive);

                // assert
                const listItems = element.find(".xui-menu-item");
                expect(listItems).toBeDefined();
                expect(listItems.length).toEqual(5); // we expect one item for each child directive
            });

            it("should contain proper number of items (json data)", () => {
                // arrange
                scope.itemsSource = [<IMenuItem>{itemType: "header"}, <IMenuItem>{itemType: "link"},
                    <IMenuItem>{itemType: "action"}, <IMenuItem>{itemType: "divider"},
                    <IMenuItem>{itemType: "option"}];

                // act
                element = SpecHelper.getCompiledElement(compile, scope, directiveJson);

                // assert
                const listItems = element.find(".xui-menu-item");
                expect(listItems).toBeDefined();
                expect(listItems.length).toEqual(5); // we expect one item for each object in itemsSource object
            });

            it("should use proper menu item classes (child controls)", () => {
                // act
                element = SpecHelper.getCompiledElement(compile, scope, directive);

                // assert
                AssertMenuItemClasses(element);
            });

            it("should use proper menu item classes (json data)", () => {
                // arrange
                scope.itemsSource = [<IMenuItem>{itemType: "header"}, <IMenuItem>{itemType: "link"},
                    <IMenuItem>{itemType: "action"}, <IMenuItem>{itemType: "divider"},
                    <IMenuItem>{itemType: "option"}];

                // act
                element = SpecHelper.getCompiledElement(compile, scope, directiveJson);

                // assert
                AssertMenuItemClasses(element);
            });

            function AssertMenuItemClasses(el:any) {
                const headers:any = el.find(".xui-menu-item.dropdown-header");
                const dividers:any = el.find(".xui-menu-item.divider");
                const links:any = el.find(".xui-menu-item .xui-menu-item-link");
                const options:any = el.find(".xui-menu-item .xui-menu-item-option");

                expect(headers.length).toEqual(1);
                expect(dividers.length).toEqual(1);
                expect(links.length).toEqual(2);
                expect(options.length).toEqual(1);
            }

            it("should have menu alignment class based on 'menu-align' attribute", () => {
                // arrange
                scope.menuAlign = "right";

                // act
                element = SpecHelper.getCompiledElement(compile, scope, directive);

                // assert
                const menu = element.find(".dropdown-menu.dropdown-menu-right")[0];
                expect(menu).toBeDefined();
            });
        });

        describe("replace >", () => {
            it("should have replaced directive element", () => {
                // act
                element = SpecHelper.getCompiledElement(compile, scope, directive);

                // assert
                expect(element[0].tagName.toLowerCase()).not.toEqual("xui-menu");
            });
        });

        describe("transclude >", () => {
            it("should have an ng-transclude directive in it", () => {
                // act
                element = SpecHelper.getCompiledElement(compile, scope, directive);

                // assert
                const transcludeElem = element.find("ul[ng-transclude]");
                expect(transcludeElem.length).toEqual(1);
            });

            it("should have transclude content", () => {
                // act
                element = SpecHelper.getCompiledElement(compile, scope, directive);

                // assert
                const transcludeContentElem = element.find("li.xui-menu-item");
                expect(transcludeContentElem.length).toEqual(5);
            });
        });

        describe("isolated scope >", () => {
            it("'title' on isolated scope should be one-way bound", () => {
                // arrange
                scope.title = "title";

                // act
                element = SpecHelper.getCompiledElement(compile, scope, directive);
                ctrl = element.controller("xuiMenu");
                ctrl.title = "changedTitle";
                scope.$apply();

                // assert
                expect(scope.title).toEqual("title");
            });

            it("'size' on isolated scope should be one-way bound", () => {
                // arrange
                scope.size = "large";

                // act
                element = SpecHelper.getCompiledElement(compile, scope, directive);
                ctrl = element.controller("xuiMenu");
                ctrl.size = "small";
                scope.$apply();

                // assert
                expect(scope.size).toEqual("large");
            });

            it("'displayStyle' on isolated scope should be one-way bound", () => {
                // arrange
                scope.displayStyle = "primary";

                // act
                element = SpecHelper.getCompiledElement(compile, scope, directive);
                ctrl = element.controller("xuiMenu");
                ctrl.displayStyle = "secondary";
                scope.$apply();

                // assert
                expect(scope.displayStyle).toEqual("primary");
            });

            it("'icon' on isolated scope should be one-way bound", () => {
                // arrange
                scope.icon = "caret-up";

                // act
                element = SpecHelper.getCompiledElement(compile, scope, directive);
                ctrl = element.controller("xuiMenu");
                ctrl.icon = "caret-down";
                scope.$apply();

                // assert
                expect(scope.icon).toEqual("caret-up");
            });

            it("'menuAlign' on isolated scope should be one-way bound", () => {
                // arrange
                scope.menuAlign = "right";

                // act
                element = SpecHelper.getCompiledElement(compile, scope, directive);
                ctrl = element.controller("xuiMenu");
                ctrl.menuAlign = "left";
                scope.$apply();

                // assert
                expect(scope.menuAlign).toEqual("right");
            });
        });
    });
});
