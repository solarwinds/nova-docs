import PanelController from "./panel-controller";
import Inject from "../../decorators/di";

/**
 *
 * @ngdoc directive
 * @name xui.directive:xuiPanel
 * @restrict E
 *
 * @description
 * XUI Panel component.
 *
 * @parameters
 * @param {boolean=} [is-collapsed=false] Dictates if panel should be collapsed by default.
 * @param {string} heading Heading text of the panel.
 * @param {string} header-icon Header icon to be shown near the heading.
 * @param {string} header-icon-counter Header icon counter to be shown when the panel is collapsed. Must be a valid
 * integer.
 * @param {boolean} is-collapsible Expression to indicate if the panel can be collapsed.
 * @param {function} collapseChanged (isCollapsed:Boolean)=>void fired when expand/collapse animation completes.
 * @param {string} [panel-layout]  If attribute equals to "fill" , panel will be as high as its parent. It is important
 * that the parent element has a fixed height. By default, panel will adjust its height corresponding to its internal
 * content.
 *
 * @example
 *<example module="xui">
 *     <file src="src/components/panel/docs/panel-examples.html" name="index.html"></file>
 *     <file src="src/components/panel/docs/panel-examples.js" name="app.js"></file>
 *     <file src="src/components/panel/docs/panel-examples.css" name="app.css"></file>
 *</example>
 */
export default class Panel implements ng.IDirective {
    constructor (@Inject("$timeout") private $timeout:ng.ITimeoutService,
                 @Inject("$rootScope") private $rootScope:any) {}

    public restrict = "E";
    public replace = true;
    public transclude:{[slot:string]:string} = {
        leftPane: "xuiPanelLeftPane"
    };
    public scope = {};
    public templateUrl = "xui/components/panel/panel-directive.html";
    public controller = PanelController;
    public controllerAs = "$panel";
    public bindToController = {
        heading: "@?",
        headerIcon: "@?",
        headerIconCounter: "@?",
        isCollapsed: "=?",
        isCollapsible: "<?",
        collapseChanged: "&?"
    };

    public link = (scope:any, element:ng.IAugmentedJQuery,
                   attrs:ng.IAttributes, ctrl:PanelController) => {
        const panelLayout = attrs["panelLayout"];
        const $panel = element.find(".xui-panel__left-pane .xui-panel__container");
        const $body = $panel.find(".xui-panel__body");
        const defaultPaneWidth = 250;
        const animationTime = 300;
        const minWidth = 60;

        let paneWidth = parseInt(attrs["paneWidth"], 10);
        if (isNaN(paneWidth)) {
            paneWidth = defaultPaneWidth;
        }
        $panel.width(paneWidth);

        if (panelLayout === "fill") {
            element.addClass("xui-panel--fill");
        }

        // EXPERIMENTAL: The angular digest loop can cause lag in animations.
        // Here we are removing the digest implementation during panel animations
        // to improve performance.
        let $digestRef:any;
        const ngDigest = {
            pause: () => {
                $digestRef = this.$rootScope.$digest;
                this.$rootScope.$digest = angular.noop;
            },
            resume: () => {
                this.$rootScope.$digest = $digestRef;
                $digestRef = void 0;
            }
        };

        const syncAria = () => {
            element.attr("aria-expanded", ctrl.isCollapsed ? "false" : "true")
                .attr("aria-hidden", ctrl.isCollapsed ? "true" : "false");
        };

        const animationComplete = () => {
            ngDigest.resume();
            ctrl.fireCollapseChanged();
        };

        const doExpand = () => {
            ngDigest.pause();
            element.removeClass("xui-is-collapsed");
            syncAria();
            $panel.stop().animate({ width: paneWidth }, animationTime, animationComplete);
        };

        const doCollapse = () => {
            ngDigest.pause();
            element.addClass("xui-is-collapsed");
            syncAria();

            // Set body width explicitly to prevent it from collapsing with the container.
            $body.width($body.width());
            $panel.stop().animate({ width: minWidth }, animationTime, animationComplete);
        };

        scope.$watch("$panel.isCollapsed", (newValue:boolean, oldValue:boolean) => {
            if (newValue === true) {
                doCollapse();
            } else if (newValue === false) {
                doExpand();
            }
        });
    };
};
