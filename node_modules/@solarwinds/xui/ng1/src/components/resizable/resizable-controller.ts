import { IAugmentedJQuery, IDocumentService, IScope, ICompileService, IWindowService } from "angular";
import Inject from "../../decorators/di";

export enum ResizerType {
    Right = "right",
    Left = "left"
}

interface IResizableControllerBindings {
    minWidth: string;
    maxWidth: string;
}

export class ResizableController implements IResizableControllerBindings {
    /**
     * Binding property, sets min available container (marked as resizable) width
     */
    public minWidth: string;
    /**
     * Binding property, sets max available container (marked as resizable) width
     */
    public maxWidth: string;

    private resizer: IAugmentedJQuery;

    private resizerType: ResizerType;

    private baseOffsetLeft: number;

    private baseWidth: number;

    constructor(
        @Inject("$window") private $window: IWindowService,
        @Inject("$document") private $document: IDocumentService,
        @Inject("$compile") private $compile: ICompileService,
        @Inject("$scope") private $scope: IScope,
        @Inject("$element") private $element: IAugmentedJQuery
    ) { }

    public $onInit(): void {
        this.resizerType = this.$element.attr("xui-resizable") as ResizerType;
        this.resizer = this.createResizer(this.resizerType);
        this.baseWidth = this.$element.width();
        this.baseOffsetLeft = this.$element.offset().left;
    }

    public $postLink(): void {
        const maxWidth = Number(this.maxWidth);

        this.setMaxAvailableWidth(this.$element, maxWidth);

        angular.element(this.$window).on("resize", this.onResize);
        this.resizer.on("mousedown", this.onMouseDown);

        this.$element.append(this.resizer);
    }

    public $onDestroy(): void {
        const window = angular.element(this.$window);

        window.unbind(this.onResize);
        window.unbind(this.onMouseDown);
    }

    private onResize = () => {
        this.baseWidth = this.$element.width();
        this.baseOffsetLeft = this.$element.offset().left;
    };

    private onMouseDown = () => {
        this.resizer.css({ cursor: "default" });

        this.$document.on("mousemove", this.onMousemove);
        this.$document.on("mouseup", this.onMouseup);
    };

    private onMousemove = (event: JQueryMouseEventObject) => {
        const maxWidth = Number(this.maxWidth);
        const minWidth = Number(this.minWidth);
        const x = event.pageX;
        const offsetLeft = this.$element.offset().left;
        const delta = x - offsetLeft;

        if (this.resizerType === ResizerType.Right) {
            if (delta < 0 ||
                delta < minWidth) {

                this.$element.css({ width: minWidth });
                return;
            }

            if (delta > maxWidth) {
                this.$element.css({ width: maxWidth });
                return;
            }

            this.$element.css({
                width: delta
            });

        }

        if (this.resizerType === ResizerType.Left) {
            const newWidth = this.baseOffsetLeft - x + this.baseWidth;

            if (newWidth < minWidth) {
                this.$element.css({ width: minWidth });
                return;
            }

            if (newWidth > maxWidth) {
                this.$element.css({ width: maxWidth });
                return;
            }

            this.$element.css({
                width: this.baseOffsetLeft - x + this.baseWidth
            });
        }
    };

    private onMouseup = () => {
        this.resizer.css({ cursor: "e-resize" });

        this.$document.unbind("mousemove", this.onMousemove);
        this.$document.unbind("mouseup", this.onMouseup);
    };

    private setMaxAvailableWidth(element: IAugmentedJQuery, availableWidth: number): void {
        if (availableWidth) {
            element.css({
                width: `${availableWidth}px`
            });
        }
    }

    private createResizer(type: ResizerType): IAugmentedJQuery {
        let typeClass: string;

        switch (type) {
            case ResizerType.Right:
                typeClass = "xui-resizer--right";
                break;

            case ResizerType.Left:
                typeClass = "xui-resizer--left";
                break;

            default:
                throw new Error(
                    `ResizerType "${type}" is not allowed.
                    Allowed values are: ${ResizerType.Right}, ${ResizerType.Left}`
                );
        }

        const resizerTemplate = `
            <div class="xui-resizer ${typeClass}">
                <div class="xui-resizer__icon">
                    <xui-icon icon="drag"></xui-icon>
                </div>
            </div>`;

        return this.$compile(resizerTemplate)(this.$scope);
    }

}
