import { IScope, ICompileService, IWindowService, IDocumentService, IAugmentedJQuery } from "angular";

import { ResizableController, ResizerType } from "./resizable-controller";

interface ICreateResizer {
    (type: ResizerType): IAugmentedJQuery;
}

interface ISetMaxAvailableWidth {
    (element: IAugmentedJQuery, availableWidth: number): void;
}

describe("components >", () => {

    describe("resizable >", () => {

        let $window: IWindowService;
        let $document: IDocumentService;
        let $compile: ICompileService;
        let $scope: IScope;

        let ctrl: ResizableController;
        let createResizer: ICreateResizer;

        beforeEach(() => {
            angular.mock.module("xui");

            inject(($injector: any) => {
                $window = $injector.get("$window");
                $document = $injector.get("$document");
                $compile = $injector.get("$compile");
                $scope = $injector.get("$rootScope");

                ctrl = new ResizableController(
                    $window,
                    $document,
                    $compile,
                    $scope,
                    angular.element(document.createElement("div"))
                );
            });

            createResizer = ctrl["createResizer"].bind(ctrl);
        });

        describe("createResizer", () => {

            it("should create right resizer", () => {
                const resizer = createResizer(ResizerType.Right);

                expect(resizer.hasClass("xui-resizer--right")).toBeTruthy();
            });

            it("should create left resizer", () => {
                const resizer = createResizer(ResizerType.Left);

                expect(resizer.hasClass("xui-resizer--left")).toBeTruthy();
            });

            it("should not create resizer", () => {
                let resizer: IAugmentedJQuery;

                try {
                    resizer = createResizer("" as ResizerType);
                } catch (e) { /* not handled */ }

                expect(resizer).toBeUndefined();
            });

        });

        describe("setMaxAvailableWidth", () => {

            const maxWidth = 500;
            let setMaxAvailableWidth: ISetMaxAvailableWidth;

            beforeEach(() => {
                setMaxAvailableWidth = ctrl["setMaxAvailableWidth"].bind(ctrl);
            });

            it(`should set max width equals to ${maxWidth}px`, () => {
                const element = ctrl["$element"];
                setMaxAvailableWidth(element, 500);

                expect(element.width()).toEqual(maxWidth);
            });

        });

        describe("event handlers", () => {

            let jqDocument: IAugmentedJQuery;

            beforeEach(() => {
                ctrl["resizer"] = createResizer(ResizerType.Left);

                jqDocument = ctrl["$document"];
                jqDocument.on = jasmine
                    .createSpy("on", (event: JQueryMouseEventObject): any => { /* empty */ });
                jqDocument.unbind = jasmine
                    .createSpy("unbind", (event: JQueryMouseEventObject): any => { /* empty */ });
            });

            describe("onMouseDown", () => {

                it("should call $document.on function", () => {
                    ctrl["onMouseDown"].call(ctrl);

                    expect(jqDocument.on).toHaveBeenCalled();
                });

            });

            describe("onResize", () => {

                it("should set base width and base offset", () => {
                    ctrl["onResize"].call(ctrl);

                    expect(ctrl["baseWidth"]).not.toBeUndefined();
                    expect(ctrl["baseOffsetLeft"]).not.toBeUndefined();
                });

            });

            describe("onMouseup", () => {

                it("should call resizer.css and $document.unbind funcs", () => {
                    ctrl["resizer"].css = jasmine.createSpy("css", (event: JQueryMouseEventObject) => { /* empty */ });
                    ctrl["onMouseup"].call(ctrl);

                    expect(ctrl["resizer"].css).toHaveBeenCalled();
                    expect(jqDocument.unbind).toHaveBeenCalled();
                });

            });

        });

    });

});
