import DatePickerController from "./datePicker-controller";
import Inject from "../../decorators/di";
import InputProxyService from "../../services/inputProxy-service";

/**
 * @ngdoc directive
 * @name xui.directive:xuiDatePicker
 * @restrict E
 * @description
 * XUI Date Picker component.
 *
 * @parameters
 * @param {string} name Supply a name to bind this component to a form.
 * @param {string} caption Value used as a label for the date picker.
 * @param {boolean=} display-inline Whether the datepicker control should be displayed inline.
 * @param {string} ng-model The model that the value of the date picker is bound to.
 * @param {date} [min-date=null] Defines the minimum available date.
 * @param {date} [max-date=null] Defines the maximum available date.
 * @param {boolean} is-required Whether this component should be validated as required.
 * @param {boolean} is-disabled Whether this component is enabled or not.
 * @param {boolean=} preserve-insignificant Whether the time data is preserved.
 * @param {function=} ng-change Model value change event handler.
 * @example
 * <example module="xui">
 *    <file src="src/components/datePicker/docs/datePicker-examples.html" name="index.html"></file>
 *    <file src="src/components/datePicker/docs/datePicker-examples.js" name="app.js"></file>
 * </example>
 */
export class DatePicker implements ng.IDirective {
    constructor(@Inject("swUtil") private swUtil: any,
                @Inject("$animate") private $animate: angular.animate.IAnimateService,
                @Inject("xuiInputProxyService") private xuiInputProxyService: InputProxyService) {
    }

    public restrict = "E";
    public require: { [key: string]: string } = {
        "datePicker": "xuiDatePicker",
        "ngModel": "ngModel"
    };
    public replace = true;
    public transclude = true;
    public templateUrl = "xui/components/datePicker/datePicker-directive.html";
    public scope = true;
    public controller = DatePickerController;
    public controllerAs = "vm";
    public bindToController = {
        displayInline: "@?",
        // Note: preserveInsignificant must be listed before model to ensure that it is bound before model
        preserveInsignificant: "<?",
        model: "=ngModel",
        minDate: "<?",
        maxDate: "<?",
        name: "@",
        caption: "@",
        isRequired: "<",
        isDisabled: "<",
        iconOnly: "<?",  // unsupported - used by netpath only
        onChange: "&?"
    };

    public compile = (tElement: ng.IAugmentedJQuery, tAttrs: ng.IAttributes) => {
        const tInput = tElement.find("input");
        if (angular.isUndefined(tAttrs["isRequired"])) {
            tInput.removeAttr("ng-required");
        }
        if (angular.isUndefined(tAttrs["isDisabled"])) {
            tInput.removeAttr("ng-disabled");
        }

        const handlers = this.xuiInputProxyService.proxyAttributesCompile(tAttrs, tInput);

        return {
            post: ($scope: IDatePickerScope, element: ng.IAugmentedJQuery,
                   attrs: ng.IAttributes, ctrls: any) => {
                this.swUtil.initComponent(attrs, "datepicker");
                this.$animate.enabled(element, false);

                this.xuiInputProxyService.proxyAttributesLink(handlers, ctrls.datePicker, $scope);

                const datePickerCtrl: DatePickerController = ctrls.datePicker;

                // this is done here because the input is not accessible immediately (this is caused by `ng-if`)
                $scope.initModel = () => {
                    const $input = element.find("input");
                    const ngModel: ng.INgModelController = $input.controller("ngModel");
                    datePickerCtrl.ngModel = ngModel;
                };
            }
        };
    };
}

interface IDatePickerScope extends angular.IScope {
    initModel: Function;
}
