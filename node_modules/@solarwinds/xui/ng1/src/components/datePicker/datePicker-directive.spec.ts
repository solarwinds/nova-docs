import DatePickerController from "./datePicker-controller";
import SpecHelper from "../../specHelper";
import {ITestScope} from "../../specHelper";
import * as _ from "lodash";

describe("components >", () => {
    describe("datePicker >", () => {

        let $controller:ng.IControllerService,
            $compile:ng.ICompileService,
            $scope:ITestScope,
            element: any,
            today: Date = new Date(),
            // short date format for en-US locale
            formattedDate: string = moment(today).format("M/D/YYYY"),
            _pickerController:DatePickerController;

        const html = `<xui-date-picker ng-model="myDate"></xui-date-picker>`;

        beforeEach(angular.mock.module("xui"));
        beforeEach(inject(($injector:any) => {
            $controller = $injector.get("$controller");
            $scope = $injector.get("$rootScope");
            $compile = $injector.get("$compile");

            $scope["myDate"] = today;

            _pickerController = <DatePickerController>$controller("xuiDatePickerController", {
                $timeout: $injector.get("$timeout"),
                $scope: $injector.get("$rootScope"),
                xuiConstants: $injector.get("xuiConstants"),
            });
        }));

        describe("component is initialized according to the predefined ", () => {
            it("date value in the default format", () => {
                element = SpecHelper.getCompiledElement($compile, $scope, html);
                const inputElem: any = element.find(".form-control");
                expect(inputElem.val()).toEqual(formattedDate);
            });

            it("name property should be propagated to the inner elements", () => {
                const htmlWithName = `<xui-date-picker ng-model="myDate" name="testname"></xui-date-picker>`;
                element = SpecHelper.getCompiledElement($compile, $scope, htmlWithName);
                const inputElem: any = element.find(".form-control");
                expect(inputElem.attr("name")).toEqual("testname_input");
            });
            it("true isDisabled property ", () => {
                const htmlWithDisabled = `<xui-date-picker ng-model="myDate" is-disabled="true"></xui-date-picker>`;
                element = SpecHelper.getCompiledElement($compile, $scope, htmlWithDisabled);
                const inputElem: any = element.find(".form-control");

                expect(inputElem.attr("disabled")).toEqual("disabled");
            });

            it("true isRequired property", () => {
                const htmlWithRequired = `<xui-date-picker ng-model="myDate" is-required="true"></xui-date-picker>`;
                element = SpecHelper.getCompiledElement($compile, $scope, htmlWithRequired);
                const inputElem: any = element.find(".form-control");

                expect(inputElem.attr("required")).toEqual("required");
            });

            it("caption property", () => {
                const htmlWithCaption = `<xui-date-picker ng-model="myDate" caption="myCaption"></xui-date-picker>`;
                element = SpecHelper.getCompiledElement($compile, $scope, htmlWithCaption);
                const label: any = element.find("label");
                expect(label.text()).toEqual("myCaption");
            });

            it("false displayInline property, don't display text input but display bootstrap component", () => {
                let htmlWithDisplayInline = `<xui-date-picker ng-model="myDate" display-inline="true">`;
                htmlWithDisplayInline += `</xui-date-picker>`;
                element = SpecHelper.getCompiledElement($compile, $scope, htmlWithDisplayInline);
                const datepicker: any = element.find(".uib-daypicker");
                const inputElem: any = element.find(".form-control");

                expect(datepicker.length).toEqual(1);
                expect(inputElem.length).toEqual(0);
            });

        });
        describe("throws error if obligatory properties not set, like ", () => {
            it("the ng-model", () => {
                const pure = `<xui-date-picker></xui-date-picker>`;
                expect(() => {
                    SpecHelper.getCompiledElement($compile, $scope, pure);
                }).toThrow();
            });
        });

        describe("controller will", () => {
            beforeEach(() => {
                _pickerController.$onInit();
                $scope.$digest();
            });

            it("ignore time values", () => {
                let testValue = new Date(2005,5,8,3,2,1,10);
                _pickerController.model = _.clone(testValue);
                $scope.$digest();
                expect(_pickerController.model.getFullYear()).toEqual(testValue.getFullYear());
                expect(_pickerController.model.getMonth()).toEqual(testValue.getMonth());
                expect(_pickerController.model.getDate()).toEqual(testValue.getDate());
                expect(_pickerController.model.getHours()).toEqual(0);
                expect(_pickerController.model.getMinutes()).toEqual(0);
                expect(_pickerController.model.getSeconds()).toEqual(0);
                expect(_pickerController.model.getMilliseconds()).toEqual(0);
            });

            it("not ignore time values if preserveInsignificant property is set", () => {
                let testValue = new Date(2005,5,8,3,2,1,10);
                _pickerController.preserveInsignificant = true;
                _pickerController.model = _.clone(testValue);
                $scope.$digest();
                expect(_pickerController.model.getFullYear()).toEqual(testValue.getFullYear());
                expect(_pickerController.model.getMonth()).toEqual(testValue.getMonth());
                expect(_pickerController.model.getDate()).toEqual(testValue.getDate());
                expect(_pickerController.model.getHours()).toEqual(testValue.getHours());
                expect(_pickerController.model.getMinutes()).toEqual(testValue.getMinutes());
                expect(_pickerController.model.getSeconds()).toEqual(testValue.getSeconds());
                expect(_pickerController.model.getMilliseconds()).toEqual(testValue.getMilliseconds());
            });
        });
    });
});
