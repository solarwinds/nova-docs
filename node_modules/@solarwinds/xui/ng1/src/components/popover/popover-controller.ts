import Inject from "../../decorators/di";
import ITemplateRef = xui.ITemplateRef;
import IEllipsisTooltipOptions = xui.IEllipsisTooltipOptions;
import IEllipsisOptions = xui.IEllipsisOptions;

export class PopoverController {
    public xuiPopoverContent: xui.IContentProvider;
    public xuiPopoverPlacement: string;
    public xuiPopoverTitle: string;
    public xuiPopoverTrigger: string;
    public xuiPopoverId: string;
    public xuiPopoverStatus: string;
    public xuiPopoverIcon: string;
    public xuiPopoverIsModal: string;
    public xuiPopoverOnShow: () => void;
    public xuiPopoverOnHide: () => void;
    public isDisplayed: boolean;
    public placement: string;
    public triggers: string[];
    public arrowMarginTop: number;
    public popoverPosition: any;

    public ellipsisOptions: IEllipsisOptions;

    constructor(
        @Inject("$templateCache") private $templateCache: ng.ITemplateCacheService,
        @Inject("$scope") private $scope: ng.IScope
    ) {
        this.isDisplayed = false;
        this.triggers = (this.xuiPopoverTrigger || "mouseenter").split(" ");
        this.ellipsisOptions = this.getEllipsisProperty(this.xuiPopoverTitle);
    }

    public toggle = () => {
        this.isDisplayed = !this.isDisplayed;
    };

    public show = () => {
        this.isDisplayed = true;
    };

    public hide = () => {
        this.isDisplayed = false;
    };

    public isModal = () =>
        this.xuiPopoverIsModal === "true";

    public hideModal = ($event: JQueryEventObject) => {
        this.hide();
        $event.stopPropagation();
    };

    public getIcon = (): string => {
        if (this.xuiPopoverIcon) {
            return this.xuiPopoverIcon;
        }

        if (_.includes([undefined, null, "", "ok"], this.xuiPopoverStatus)) {
            return undefined;
        }

        return `status_${this.xuiPopoverStatus}`;
    };

    public getStatus = (): string => {
        if (!this.xuiPopoverIcon) {
            return undefined;
        }

        return this.xuiPopoverStatus;
    }

    public isBackdropVisible = () =>
        this.isModal() && this.isDisplayed;

    public getContent = (): string => {
        const content = this.xuiPopoverContent();
        if (this.isTemplateRefContent(content)) {
            const url = (<ITemplateRef> content).url;
            return String(this.$templateCache.get(url)).trim();
        }
        return `<span>${content}</span>`;
    };

    private isTemplateRefContent = (content: any): content is ITemplateRef =>
        content && this.isValidTemplate(content.url);

    private isValidTemplate = (templateUrl: string): boolean =>
        templateUrl && this.$templateCache.get(templateUrl) !== undefined;

    private getEllipsisProperty = (title: string): IEllipsisOptions => ({
        tooltipText: title,
        tooltipOptions: {
            "tooltip-placement": "bottom"
        }
    });
}
