(function () {
    "use strict";

    Xui.module
        .controller("DemoPopoverController", DemoPopoverController);

    DemoPopoverController.$inject = ["$templateCache", "$compile", "$scope"];

    function DemoPopoverController($templateCache, $compile, $scope) {
        var vm = this;

        $templateCache.put("xui-popover-example-hover-trigger", [
            '<form>',
                '<div class="row">',
                    '<div class="col-xs-3">',
                        '<xui-icon icon="browse" icon-size="large" class="calendar-icon"></xui-icon>',
                    '</div>',
                    '<div class="col-xs-9">',
                        '<xui-textbox caption="Change me:" ng-model="vm.textToBind"></xui-textbox>',
                    '</div>',
                '</div>',
            '</form>'
        ].join(""));

        $templateCache.put("xui-popover-example-box-element", [
            '<span>',
                'Be careful! <a href="https://thechive.files.wordpress.com/2015/12/12357287_550370541805300_1037792536_n.jpg?quality=85&strip=info"',
                'target="_blank">Hovering</a> is dangerous...',
            '</span>'
        ].join(""));

        $templateCache.put('popoverWithSliderTemplate', [
            '<xui-slider',
                'is-disabled="false"',
                'type="single"',
                'value="5"',
                'min="0"',
                'max="25"',
                'step="5"',
                'is-textinput-enabled="false"',
                'update-on-drag="false"',
                'fraction-size="0">',
            '</xui-slider>'
        ].join(' '));

        vm.init = function() {
            var tooltipScope = $scope.$new(true);
            var tooltipTemplate =
                '<xui-popover xui-popover-title="Woohoo!"' +
                    'xui-popover-element="vm.getElement()"' +
                    'xui-popover-status="up"' +
                    'xui-popover-content="\'This is a dynamically created content.\'">' +
                '</xui-popover>';

            tooltipScope.vm = this;
            var tooltipElement = $compile(tooltipTemplate)(tooltipScope);
            angular.element($("#hover-me-popover")).append(tooltipElement);
        };

        vm.getElement = function() { return { nestedElement: angular.element($("#hover-me-popover"))};  };

        vm.textToBind = "Text to bind";
        vm.items = [
            {status: "up", icon: "unknownnode", msg: "We're all good here!", isPlacement: true, placement: "right"},
            {status: "warning", icon: "application", msg: "No one panic.", isPlacement: false},
            {status: "critical", icon: "pool", msg: "The end is nigh.", isPlacement: true, placement: "left"},
            {status: "down", icon: "database", msg: "Get down on it...", isPlacement: false}
        ];
        vm.templates = {
            inline: {url: "xui-popover-example-inline"},
            hoverTrigger: {url: "xui-popover-example-hover-trigger"},
            boxElement: {url: "xui-popover-example-box-element"},
            popoverWithSliderTemplate: {url: "popoverWithSliderTemplate"}
        };

        vm.getInlineTemplate = function() {
            return vm.templates.inline;
        };

        vm.getHoverTriggerTemplate = function() {
            return vm.templates.hoverTrigger;
        };

        vm.getBoxElementTemplate = function() {
            return vm.templates.boxElement;
        };

        vm.getPopoverWithSliderTemplate = function() {
            return vm.templates.popoverWithSliderTemplate;
        };

        vm.getClickTriggerContent = function() {
            return "You can manage all credentials used for monitoring.";
        };

        vm.getFocusTriggerContent = function() {
            return "I`m focused and ready-to-go!";
        };

        vm.getPlacementContent = function(placement) {
            return "This popover is shown on the " + placement
                + " of the button. It will auto-adjust up and down...";
        };

        vm.getStatusContent = function(item) {
            return item.msg;
        };

        vm.getModalContent = function() {
            return "This should be used for interactive popovers \
            containing some content that the user should be focused on.";
        };

        vm.onHide = function() {
            console.log("Tooltip hidden.");
        };
    }
})();
