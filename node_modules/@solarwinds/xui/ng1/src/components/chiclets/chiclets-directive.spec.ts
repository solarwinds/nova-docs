/// <reference path="../../ref.d.ts" />

import IChicletsController from "./chiclets-controller";
import SpecHelper from "../../specHelper";

describe("components >", () => {
    describe("chiclet >", () => {
        let element:any,
            scope:any,
            compile:ng.ICompileService,
            ctrl:IChicletsController;

        const itemsSource = {
            "statusId": ["downId", "criticalId", "warningId", "okId"],
            "vendorId": ["ciscoId", "hpId", "uniperId"]
        };

        const flatItemsSource = [1, 2, 3];

        const directive = `
                <xui-chiclets
                items-source="itemsSource"
                auto-hide="autoHide"
                allow-clear-all="allowClearAll"
                title="title"
                item-label-fn="getItemLabel(itemId,groupId)"
                /></xui-chiclets>
            `;

        const verticalDirective = `
                <xui-chiclets
                items-source="itemsSource"
                auto-hide="autoHide"
                allow-clear-all="allowClearAll"
                title="title"
                item-label-fn="getItemLabel(itemId,groupId)"
                orientation="vertical"
                /></xui-chiclets>
            `;

        const noTitleHorizontalDirective = `
                <xui-chiclets
                items-source="itemsSource"
                auto-hide="autoHide"
                allow-clear-all="allowClearAll"
                title=""
                item-label-fn="getItemLabel(itemId,groupId)"
                /></xui-chiclets>
            `;

        const noTitleVerticalDirective = `
                <xui-chiclets
                items-source="itemsSource"
                auto-hide="autoHide"
                allow-clear-all="allowClearAll"
                title=""
                item-label-fn="getItemLabel(itemId,groupId)"
                orientation="vertical"
                /></xui-chiclets>
            `;

        const draggable = `
                <xui-chiclets
                items-source="itemsSource"
                auto-hide="autoHide"
                allow-clear-all="allowClearAll"
                title="title"
                item-label-fn="getItemLabel(itemId,groupId)"
                is-draggable="isDraggable"
                /></xui-chiclets>
            `;

        beforeEach(angular.mock.module("xui"));

        beforeEach(inject(function ($compile:ng.ICompileService, $rootScope:ng.IRootScopeService) {
            compile = $compile;
            scope = $rootScope.$new();
            scope.itemsSource = itemsSource;

            scope.itemLabelFn = function (itemId:string, groupId:string) {
                if (itemId && groupId) {
                    return _.capitalize(itemId.replace("Id", ""));
                } else if (itemId) {
                    return _.capitalize(itemId.replace("Id", ""));
                } else if (groupId) {
                    return _.capitalize(groupId.replace("Id", ""));
                } else {
                    return "N/A";
                }
            };
        }));

        describe("dom manipulations >", () => {
            it("should display correct count of filters next to title", function () {
                // arrange
                scope.itemsSource = itemsSource;

                // act
                element = SpecHelper.getCompiledElement(compile, scope, directive);

                // assert
                const label = element.find(".xui-chiclets__count");
                expect(label[0].innerText.trim()).toEqual("(7)");
            });

            it("should contain correct number of item groups", function () {
                // arrange
                scope.itemsSource = itemsSource;

                // act
                element = SpecHelper.getCompiledElement(compile, scope, directive);

                // assert
                const listItems = element.find(".xui-chiclets__group-name");
                expect(listItems.length).toBe(2);
            });

            it("should contain correct number of items (grouped data)", function () {
                // arrange
                scope.itemsSource = itemsSource;

                // act
                element = SpecHelper.getCompiledElement(compile, scope, directive);

                // assert
                const listItems = element.find(".xui-chiclets__value");
                expect(listItems.length).toBe(7);
            });

            it("should contain correct number of items (flat data)", function () {
                // arrange
                scope.itemsSource = flatItemsSource;

                // act
                element = SpecHelper.getCompiledElement(compile, scope, directive);

                // assert
                const listItems = element.find(".xui-chiclets__value");
                expect(listItems.length).toBe(3);
            });

            it("should be visible when contain valid grouped data", function () {
                // arrange
                scope.itemsSource = itemsSource;
                scope.autoHide = true;

                // act
                element = SpecHelper.getCompiledElement(compile, scope, directive);

                // assert
                expect(element.hasClass("ng-hide")).toBe(false);
            });

            it("should be visible when contain valid flat data", function () {
                // arrange
                scope.itemsSource = flatItemsSource;
                scope.autoHide = true;

                // act
                element = SpecHelper.getCompiledElement(compile, scope, directive);

                // assert
                expect(element.hasClass("ng-hide")).toBe(false);
            });

            it("should contain no filters if 'itemsSource' is empty", function () {
                // arrange
                scope.itemsSource = [];

                // act
                element = SpecHelper.getCompiledElement(compile, scope, directive);

                // assert
                const listItems = element.find(".xui-chiclets__value");
                expect(listItems.length).toBe(0);
            });

            it("should be hidden if 'itemsSource' collection is empty" +
                " and 'autoHide' is not set or it is set to 'true'", function () {
                // arrange
                scope.itemsSource = [];

                // act
                element = SpecHelper.getCompiledElement(compile, scope, directive);

                // assert
                expect(element.hasClass("ng-hide")).toBe(true);
            });

            it("should be visible if 'itemsSource' collection is empty" +
                " and 'autoHide' is set to 'false'", function () {
                // arrange
                scope.itemsSource = [];
                scope.autoHide = false;

                // act
                element = SpecHelper.getCompiledElement(compile, scope, directive);

                // assert
                expect(element.hasClass("ng-hide")).toBe(false);
            });

            it("title DOM in horizontal mode should be hidden if title is empty", () => {
                element = SpecHelper.getCompiledElement(compile, scope, noTitleHorizontalDirective);
                expect(element.find(".xui-chiclets__title").length).toEqual(0);
            });

            it("title DOM in vertical mode should be hidden if title is empty", () => {
                element = SpecHelper.getCompiledElement(compile, scope, noTitleVerticalDirective);
                expect(element.find(".xui-chiclets__title").length).toEqual(0);
            });

            it("should have horizontal class modifier if 'orientation' is not set", () => {
                element = SpecHelper.getCompiledElement(compile, scope, directive);
                expect(element.hasClass("__horizontal")).toBe(true);
            });

            it("should have vertical class modifier if 'orientation' is set to vertical", () => {
                element = SpecHelper.getCompiledElement(compile, scope, verticalDirective);
                expect(element.hasClass("__vertical")).toBe(true);
            });

            it("should have the 'clear all' button hidden if 'allowClearAll' is set to false", () => {
                scope.allowClearAll = false;
                element = SpecHelper.getCompiledElement(compile, scope, verticalDirective);
                expect(element.find(".xui-chiclets__clear").length).toEqual(0);
            });

            it("should show group labels when itemsSource has grouped data", () => {
                element = SpecHelper.getCompiledElement(compile, scope, directive);
                expect(element.find(".xui-chiclets__group").length).toBeGreaterThan(0);
            });

            it("should not show group labels when itemsSource has flat data", () => {
                scope.itemsSource = flatItemsSource;
                scope.$apply();
                element = SpecHelper.getCompiledElement(compile, scope, directive);
                expect(element.find(".xui-chiclets__group").length).toBe(0);
            });

            it("should change appearance of the draggable chiclets", () => {
                scope.isDraggable = true;
                scope.$apply();
                element = SpecHelper.getCompiledElement(compile, scope, draggable);
                expect(element.hasClass("xui-chiclets__draggable")).toBeTruthy();
            });

        });
    });
});
