/// <reference path="../../ref.d.ts" />

import IChicletsController from "./chiclets-controller";

describe("components >", () => {
    describe("chicletsController >", () => {
        let $ctrlService: ng.IControllerService,
            ctrl: IChicletsController;

        beforeEach(angular.mock.module("xui"));

        beforeEach(inject(($injector: any) => {
            $ctrlService = $injector.get("$controller");
            ctrl = $ctrlService<IChicletsController>("xuiChicletsController", {}, {
                itemsSource: {
                    statusId: ["downId", "criticalId", "warningId", "okId"],
                    vendorId: ["ciscoId"]
                },
                onRemove: () => {
                    // noop
                }
            });
        }));

        describe("when removeAllItems() is executed", () => {

            it("should remove all items with Object itemsSource", () => {
                ctrl.removeAllItems();
                expect((<any>ctrl.itemsSource).statusId.length).toBe(0);
                expect((<any>ctrl.itemsSource).vendorId.length).toBe(0);
            });

            it("should remove all items with Array itemsSource", () => {
                ctrl = <IChicletsController>$ctrlService("xuiChicletsController", {}, {
                    itemsSource: ["downId", "criticalId", "warningId", "okId"]
                });
                ctrl.removeAllItems();
                expect((<any>ctrl.itemsSource).length).toBe(0);
            });

        });

        describe("when getGroupIds() is executed", () => {

            it("should return groups with Object itemsSource", () => {
                expect(ctrl.getGroupIds()).toEqual(["statusId", "vendorId"]);
            });

            it("should return null with Array itemsSource", () => {
                ctrl = <IChicletsController>$ctrlService("xuiChicletsController", {}, {
                    itemsSource: ["downId", "criticalId", "warningId", "okId"]
                });
                expect(ctrl.getGroupIds()).toBe(null);
            });

        });

        describe("when removeItem() is executed", () => {

            it("should remove the correct item from an Object itemsSource", () => {
                spyOn(ctrl, "onRemove").and.callThrough();

                ctrl.removeItem("downId", "statusId");
                expect(ctrl.itemsSource).toEqual({
                    statusId: ["criticalId", "warningId", "okId"],
                    vendorId: ["ciscoId"]
                });

                expect(ctrl.onRemove).toHaveBeenCalledWith({itemId: "downId", groupId: "statusId"});
            });

            it("should remove the correct item from an Array itemsSource", () => {
                ctrl = <IChicletsController>$ctrlService("xuiChicletsController", {}, {
                    itemsSource: ["downId", "criticalId", "warningId", "okId"],
                    onRemove: () => {
                        // noop
                    }
                });
                spyOn(ctrl, "onRemove").and.callThrough();

                ctrl.removeItem("downId", null);
                expect(ctrl.itemsSource).toEqual(["criticalId", "warningId", "okId"]);

                expect(ctrl.onRemove).toHaveBeenCalledWith({itemId: "downId"});
            });

        });

        describe("when getItemsCount() is executed", () => {

            it("should count the items properly with Object itemsSource", () => {
                expect(ctrl.getItemsCount()).toEqual(5);
            });

            it("should count the items properly with Array itemsSource", () => {
                ctrl = <IChicletsController>$ctrlService("xuiChicletsController", {}, {
                    itemsSource: ["downId", "criticalId", "warningId", "okId"]
                });
                expect(ctrl.getItemsCount()).toEqual(4);
            });

        });

        describe("when isEmpty() is executed", () => {

            it("should return 'false' if 'itemsSource' contains valid grouped data", () => {
                expect(ctrl.isEmpty()).toEqual(false);
            });

            it("should return 'false' if 'itemsSource' contains valid flat data (string)", () => {
                ctrl = <IChicletsController>$ctrlService("xuiChicletsController", {}, {
                    itemsSource: ["1", "2", "3", "4"]
                });

                expect(ctrl.isEmpty()).toEqual(false);
            });

            it("should return 'false' if 'itemsSource' contains valid flat data (integer)", () => {
                ctrl = <IChicletsController>$ctrlService("xuiChicletsController", {}, {
                    itemsSource: [1, 2, 3, 4]
                });

                expect(ctrl.isEmpty()).toEqual(false);
            });

            it("should return 'true' if 'itemsSource' does not contain any valid data", () => {
                ctrl.itemsSource = {"$$hashKey": ["xx"]};
                expect(ctrl.isEmpty()).toEqual(true);
            });

            it("should return 'true' if 'itemsSource' is an empty array", () => {
                ctrl = <IChicletsController>$ctrlService("xuiChicletsController", {}, {
                    itemsSource: []
                });
                expect(ctrl.isEmpty()).toEqual(true);
            });

        });

        describe("when constructor() is executed", () => {

            it("should throw an error if itemsSource is missing", () => {
                expect(() => {
                    $ctrlService("xuiChicletsController");
                }).toThrow(new Error("ItemsSource property is undefined."));
            });

            it("should throw an error if itemsSource is not an object or array", () => {
                const msg = "Invalid ItemsSource. ItemsSource must be an 'dictionary-like' Object or an Array.";
                expect(() => {
                    $ctrlService("xuiChicletsController", {}, {itemsSource: 1});
                }).toThrow(new Error(msg));
            });

        });

        describe("when hasGroups() is executed", () => {

            it("should return 'true' when itemsSource is an object", () => {
                expect(ctrl.hasGroups()).toBe(true);
            });

            it("should return 'false' when itemsSource is an array", () => {
                ctrl = <IChicletsController>$ctrlService("xuiChicletsController", {}, {
                    itemsSource: ["downId", "criticalId", "warningId", "okId"]
                });
                expect(ctrl.hasGroups()).toBe(false);
            });

        });

    });
});
