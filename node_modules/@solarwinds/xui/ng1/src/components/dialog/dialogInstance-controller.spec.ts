import {DialogKey} from "./dialog-service";
import IMap = xui.IMap;
import DialogInstanceController from "./dialogInstance-controller";

describe("components >", ()=> {
    describe("dialog >", ()=> {
        describe("instance-controller >", ()=> {
            let $scope:ng.IRootScopeService;
            let $controller:ng.IControllerService;
            let $q:ng.IQService;
            let modalInstance:any;
            let translate:any;
            let ctrl:DialogInstanceController;
            const translations:IMap<string> = {};
            let spyScopeOn:jasmine.Spy;

            beforeEach(angular.mock.module("xui"));
            beforeEach(inject(($injector:any) => {
                $scope = $injector.get("$rootScope");
                spyScopeOn = spyOn($scope, "$on").and.callThrough();
                $controller = $injector.get("$controller");
                $q = $injector.get("$q");
                modalInstance = jasmine.createSpyObj("$uibModalInstance", ["close", "dismiss"]);
                translate = jasmine.createSpyObj("$translate", ["instant"]);
                translate.instant.and.callFake((translationId:string,
                                                interpolateParams?:any,
                                                interpolationId?:string):string => {
                    return translations[translationId];
                });
                translations[DialogKey.Ok] = "Ok";
                translations[DialogKey.Cancel] = "Cancel";
                translations[DialogKey.Close] = "Close";
                translations[DialogKey.Error] = "Error";
                translations[DialogKey.Warning] = "Warning";
            }));

            let getDefaultDialogOptions = ():xui.IDialogOptions => {
                return {
                    hideCancel: true,
                    title: "Title",
                    message: "Body Text",
                    actionButtonText: "Ok"
                };
            };

            let getController = (dialogOptions:xui.IDialogOptions):DialogInstanceController => {
                return <DialogInstanceController>$controller("xuiDialogInstanceController", {
                    $uibModalInstance: modalInstance,
                    $translate: translate,
                    $scope: $scope,
                    dialogOptions: dialogOptions
                });
            };

            let getOkButton = (deferred:ng.IDeferred<boolean>,
                               actionExecutedObj:any,
                               actionResult:boolean = true) => {
                return {
                    name: "ok",
                    isPrimary: true,
                    text: "Ok",
                    action: (dialogResult:any):ng.IPromise<boolean>|boolean => {
                        actionExecutedObj.wasExecuted = true;
                        return deferred ? deferred.promise : actionResult;
                    }
                };
            };

            it("should provide default dialogOptions", () => {
                let dialogOptions:xui.IDialogOptions;
                ctrl = getController(dialogOptions);

                expect(ctrl.dialogOptions).toBeDefined();
                expect(ctrl.dialogOptions.title).toBe("Dialog");
                expect(ctrl.dialogOptions.message).toBe("Perform this action?");
                expect(ctrl.dialogOptions.actionButtonText).toBe("Ok");
            });

            it("should populate status map", () => {
                const dialogOptions = getDefaultDialogOptions();
                dialogOptions.status = "normal";
                ctrl = getController(dialogOptions);
                const normalAttrs = ctrl.getStatusAttributes();

                expect(normalAttrs).toBeDefined();
                expect(normalAttrs.icon).toBe("");
                expect(normalAttrs.style).toBe("modal-header");

                dialogOptions.status = "warning";
                ctrl = getController(dialogOptions);
                const warningAttrs = ctrl.getStatusAttributes();

                expect(warningAttrs).toBeDefined();
                expect(warningAttrs.icon).toBe("status_warning");
                expect(warningAttrs.style).toBe("modal-header-warning");

                dialogOptions.status = "error";
                ctrl = getController(dialogOptions);
                const errorAttrs = ctrl.getStatusAttributes();

                expect(errorAttrs).toBeDefined();
                expect(errorAttrs.icon).toBe("status_critical");
                expect(errorAttrs.style).toBe("modal-header-error");
            });

            it("should provide default status", () => {
                let dialogOptions = getDefaultDialogOptions();
                ctrl = getController(dialogOptions);

                expect(ctrl.dialogOptions).toBeDefined();
                expect(ctrl.dialogOptions.status).toBe("normal");
            });

            it("should provide default OK button when buttons are empty", () => {
                let dialogOptions = getDefaultDialogOptions();
                ctrl = getController(dialogOptions);

                expect(ctrl.dialogOptions).toBeDefined();
                expect(ctrl.dialogOptions.title).toBe("Title");
                expect(ctrl.dialogOptions.message).toBe("Body Text");
                expect(ctrl.dialogOptions.actionButtonText).toBe("Ok");
                expect(ctrl.dialogOptions.buttons).toBeDefined();
                expect(ctrl.dialogOptions.buttons.length).toBe(1);
                expect(ctrl.dialogOptions.buttons[0].name).toBe("ok");
                expect(ctrl.dialogOptions.buttons[0].isPrimary).toBe(true);
                expect(ctrl.dialogOptions.buttons[0].action).toBeDefined();
            });

            it("should close dialog on location change", () => {
                let locationChangeHandler:Function;

                spyScopeOn.and.callFake((name:string, handler:Function) => {
                    if (name === "$locationChangeStart") {
                        locationChangeHandler = handler;
                    }
                });

                let dialogOptions = getDefaultDialogOptions();
                ctrl = getController(dialogOptions);

                spyOn(ctrl, "cancel").and.callThrough();
                expect(ctrl.cancel).not.toHaveBeenCalled();
                locationChangeHandler();
                expect(ctrl.cancel).toHaveBeenCalled();
            });

            it("should stop location change watching", () => {
                let scopeDestroyHandler:Function;
                let mockStopLocationChngListener = jasmine.createSpy("unregisterLocationChngListener");

                spyScopeOn.and.callFake((name:string, handler:Function) => {
                    if (name === "$locationChangeStart") {
                        return mockStopLocationChngListener;
                    }
                    if (name === "$destroy") {
                        scopeDestroyHandler = handler;
                    }
                });

                let dialogOptions = getDefaultDialogOptions();
                ctrl = getController(dialogOptions);

                expect(mockStopLocationChngListener).not.toHaveBeenCalled();
                scopeDestroyHandler();
                expect(mockStopLocationChngListener).toHaveBeenCalled();
            });

            it("should invoke button.action when execute is invoked and close modal on success", () => {
                const actionExecuteObj = {wasExecuted: false};
                let wasModalClosed = false;
                const okButton = getOkButton(null, actionExecuteObj);
                const dialogOptions = getDefaultDialogOptions();
                dialogOptions.buttons = [okButton];
                ctrl = getController(dialogOptions);
                modalInstance.close.and.callFake((result:any) => {
                    wasModalClosed = true;
                });
                ctrl.execute(okButton, <ng.IFormController>{});

                expect(actionExecuteObj.wasExecuted).toBe(true);
                expect(wasModalClosed).toBe(true);
                expect(ctrl.isValid).toBe(true);
            });

            it("should invalidate when button action fails on execute", () => {
                const actionExecuteObj = {wasExecuted: false};
                let wasModalClosed = false;
                const okButton = getOkButton(null, actionExecuteObj, false);
                const dialogOptions = getDefaultDialogOptions();
                dialogOptions.buttons = [okButton];
                ctrl = getController(dialogOptions);
                modalInstance.close.and.callFake((result:any) => {
                    wasModalClosed = true;
                });
                ctrl.execute(okButton, <ng.IFormController>{});

                expect(actionExecuteObj.wasExecuted).toBe(true);
                expect(wasModalClosed).toBe(false);
                expect(ctrl.isValid).toBe(false);
            });

            it("should handle promise return value on execute", () => {
                const actionExecuteObj = {wasExecuted: false};
                let wasModalClosed = false;
                const deferred = $q.defer<boolean>();
                const okButton = getOkButton(deferred, actionExecuteObj);
                const dialogOptions = getDefaultDialogOptions();
                dialogOptions.buttons = [okButton];
                ctrl = getController(dialogOptions);
                modalInstance.close.and.callFake((result:any) => {
                    wasModalClosed = true;
                });
                ctrl.execute(okButton, <ng.IFormController>{});

                expect(actionExecuteObj.wasExecuted).toBe(true);
                expect(wasModalClosed).toBe(false);
                deferred.resolve(true);
                expect(wasModalClosed).toBe(false);
                $scope.$apply();
                expect(wasModalClosed).toBe(true);
            });

            it("should set is-busy based on action execution", () => {
                const deferred = $q.defer<boolean>();
                const okButton = getOkButton(deferred, {wasExecuted: false});
                const dialogOptions = getDefaultDialogOptions();
                dialogOptions.buttons = [okButton];
                ctrl = getController(dialogOptions);

                expect(ctrl.isBusy).toBe(false);
                ctrl.execute(okButton, <ng.IFormController>{});
                expect(ctrl.isBusy).toBe(true);
                deferred.resolve(true);
                $scope.$apply();
                expect(ctrl.isBusy).toBe(false);
            });
        });
    });
});
