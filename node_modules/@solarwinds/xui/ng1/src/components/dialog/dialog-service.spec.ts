import DialogInstanceController from "./dialogInstance-controller";
import {DialogService} from "./dialog-service";
import {DialogKey} from "./dialog-service";
import IDialogButton = xui.IDialogButton;
import IDialogOptions = xui.IDialogOptions;

describe("components >", ()=> {
    describe("dialog >", ()=> {
        describe("service >", ()=> {
            let dialogService:DialogService;
            let modal:angular.ui.bootstrap.IModalService;
            let q:ng.IQService;
            let translate:angular.translate.ITranslateService;
            const emptySettings = {};
            let getOptions = (status:string,
                              hideCancel:boolean,
                              title:string,
                              message:string,
                              actionButtonText:string = ""):IDialogOptions => {
                let options:IDialogOptions = {
                    hideCancel: hideCancel,
                    title: title,
                    message: message
                };

                if (actionButtonText) {
                    options.actionButtonText = actionButtonText;
                }

                if (status) {
                    options.status = status;
                }

                return options;
            };

            beforeEach(angular.mock.module("xui"));
            beforeEach(inject(($injector:any) => {
                modal = $injector.get("$uibModal");
                q = $injector.get("$q");
                translate = $injector.get("$translate");
                dialogService = $injector.get("xuiDialogService");
            }));

            it("showMessage should properly invoke showModal", () => {
                const dialogText = {title:"Test Header", message:"Hello Dialog Service!"};
                const msgOptions = getOptions("normal", true, dialogText.title, dialogText.message, "Ok");
                spyOn(translate, "instant").and.returnValue("Ok");
                const spy = spyOn(dialogService, "showModal");
                dialogService.showMessage(dialogText);
                expect(spy).toHaveBeenCalledWith(emptySettings, msgOptions);
            });

            it("showWarning should properly invoke showModal", () => {
                const dialogText = {message:"It's coming..."};
                const warningOptions = {
                    hideCancel: false,
                    title: "Warning",
                    message: dialogText.message,
                    status: "warning",
                    actionButtonText: <string>undefined,
                    buttons: <IDialogButton[]>undefined
                };

                spyOn(translate, "instant").and.callFake((key:string) => {
                    if (key === DialogKey.Warning) {
                        return "Warning";
                    } else if (key === DialogKey.Close) {
                        return "Close";
                    } else {
                        return "";
                    }
                });

                const spy = spyOn(dialogService, "showModal");
                dialogService.showWarning(dialogText);
                expect(spy).toHaveBeenCalledWith(emptySettings, warningOptions);

                const dialogTextWithTitle = {title:"Custom Warning", message:"It's coming..."};
                warningOptions.title = dialogTextWithTitle.title;
                warningOptions.message = dialogTextWithTitle.message;
                dialogService.showWarning(dialogTextWithTitle);
                expect(spy).toHaveBeenCalledWith(emptySettings, warningOptions);

                const actionButton = {
                    name: "proceed",
                    text: "Proceed",
                    action: (dialogResult:any) => {
                        return true;
                    }
                };

                warningOptions.actionButtonText = actionButton.text;
                warningOptions.buttons = [actionButton];
                dialogService.showWarning(dialogTextWithTitle, actionButton);
                expect(spy).toHaveBeenCalledWith(emptySettings, warningOptions);
            });

            it("showError should properly invoke showModal", () => {
                const dialogText = {message:"Bad things man"};
                let errorOptions = getOptions("error", false, "Error", dialogText.message);

                spyOn(translate, "instant").and.callFake((key:string) => {
                    if (key === DialogKey.Error) {
                        return "Error";
                    } else if (key === DialogKey.Close) {
                        return "Close";
                    } else {
                        return "";
                    }
                });

                const spy = spyOn(dialogService, "showModal");
                dialogService.showError(dialogText);
                expect(spy).toHaveBeenCalledWith(emptySettings, errorOptions);

                const dialogTextWithTitle = {title: "Critical", message:"Bad things man"};
                errorOptions.title = dialogTextWithTitle.title;
                dialogService.showError(dialogTextWithTitle);
                expect(spy).toHaveBeenCalledWith(emptySettings, errorOptions);
            });

            it("showModal should properly invoke show", () => {
                const options = getOptions("", false, "It's Here!", "...", "Ok");
                let modalSettings = {
                    backdrop: "static"
                };

                const spy = spyOn(dialogService, "show");
                dialogService.showModal(emptySettings, options);
                expect(spy).toHaveBeenCalledWith(modalSettings, options);
            });

            it("show should properly invoke modal.open and return result", () => {
                const options = getOptions("", false, "It's Here!", "...", "Ok");
                let modalSettings = {
                    backdrop: "static",
                    controller: DialogInstanceController,
                    bindToController: true,
                    controllerAs: "vm",
                    resolve: {
                        dialogOptions: () => options
                    }
                };

                spyOn(modal, "open").and.callFake((settings:angular.ui.bootstrap.IModalSettings) => {
                    const deferred = q.defer();
                    deferred.resolve({
                        data: "success",
                        settings: settings
                    });
                    return {result: deferred.promise};
                });

                const promise = dialogService.showModal(emptySettings, options);
                expect(promise).toBeDefined();
                promise.then((result) => {
                    expect(result.data).toBe("success");
                    expect(result.args).toBe(modalSettings);
                    console.log("resolved!");
                });
            });
        });
    });
});
