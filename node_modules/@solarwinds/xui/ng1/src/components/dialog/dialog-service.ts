import IDialogOptions = xui.IDialogOptions;
import IDialogText = xui.IDialogText;
import IDialogService = xui.IDialogService;
import DialogInstanceController from "./dialogInstance-controller";
import IDialogButton = xui.IDialogButton;

/**
 * @ngdoc service
 *
 * @name xui.services:xuiDialogService
 *
 * @description
 * Service that provides modal/non-modal dialogs.
 *
 * @example xuiDialogService Example
 *<example module="xui">
 *     <file src="src/components/dialog/docs/dialog-examples.html" name="index.html"></file>
 *     <file src="src/components/dialog/docs/dialog-examples.js" name="app.js"></file>
 *</example>
 */

export class DialogKey {
    public static get Ok():string {
        return "xui_dialog_ok";
    }

    public static get Cancel():string {
        return "xui_dialog_cancel";
    }

    public static get Error():string {
        return "xui_dialog_error";
    }

    public static get Warning():string {
        return "xui_dialog_warning";
    }

    public static get Close():string {
        return "xui_dialog_close";
    }
}

export class DialogService implements IDialogService {
    public static $inject = ["$uibModal", "$q", "$translate", "$log"];

    public settings:angular.ui.bootstrap.IModalSettings = {
        backdrop: true,
        keyboard: true,
        windowClass: "xui-modal",
        windowTopClass: "xui-modal-top", //in case there are multiple dialogs
        templateUrl: "xui/components/dialog/dialog-service.html",
        backdropClass: "xui-modal-backdrop"
    };

    constructor(private $modal:angular.ui.bootstrap.IModalService,
                private $q:ng.IQService,
                private $translate:angular.translate.ITranslateService,
                private $log:ng.ILogService) {
    }

    /** @ngdoc method
     *  @name xui.services:xuiDialogService#showMessage
     *  @methodOf xui.services:xuiDialogService
     *  @description Shows the "body" specified in a modal dialog.
     *  @param {IDialogText} dialogText Title and message for the dialog.
     *  E.g {title:"Important", message:"This is an important message."}
     *  @returns {ng.IPromise<any>} dialogResult
     **/
    public showMessage = (dialogText:IDialogText):ng.IPromise<any> => {
        return this.showModal({}, {
            status: "normal",
            hideCancel: true,
            title: dialogText.title,
            message: dialogText.message,
            actionButtonText: this.$translate.instant(DialogKey.Ok)
        });
    };

    /** @ngdoc method
     *  @name xui.services:xuiDialogService#showWarning
     *  @methodOf xui.services:xuiDialogService
     *  @description Shows the "warning" specified in a modal dialog.
     *  @param {IDialogText} dialogText Title and message for the dialog.
     *  E.g {title:"Important", message:"This is an important message."}
     *  @param {IDialogButton} actionButton Button associated with the dialog action. Note that
     *                          'Cancel' will also be shown.
     *  @returns {ng.IPromise<any>} dialogResult
     **/
    public showWarning = (dialogText:IDialogText, actionButton?:IDialogButton):ng.IPromise<any> => {
        if (angular.isDefined(actionButton)) {
            actionButton.displayStyle = "tertiary";
        }
        return this.showModal({}, {
            hideCancel: false,
            status: "warning",
            actionButtonText: actionButton ? actionButton.text : undefined,
            title: dialogText.title ? dialogText.title : this.$translate.instant(DialogKey.Warning),
            message: dialogText.message,
            buttons: actionButton ? [actionButton] : undefined
        });
    };

    /** @ngdoc method
     *  @name xui.services:xuiDialogService#showError
     *  @methodOf xui.services:xuiDialogService
     *  @description Shows the "error" specified in a modal dialog.
     *  @param {IDialogText} dialogText Title and message for the dialog.
     *  E.g {title:"Important", message:"This is an important message."}
     *  @returns {ng.IPromise<any>} dialogResult
     **/
    public showError = (dialogText:IDialogText):ng.IPromise<any> => {
        return this.showModal({}, {
            hideCancel: false,
            status: "error",
            title: dialogText.title ? dialogText.title : this.$translate.instant(DialogKey.Error),
            message: dialogText.message
        });
    };

    /** @ngdoc method
     *  @name xui.services:xuiDialogService#showModal
     *  @methodOf xui.services:xuiDialogService
     *  @description Displays a modal dialog, honoring the settings and options supplied.
     *  @param {ng.ui.bootstrap.IModalSettings} customSettings Presentation settings that govern the modal display.
     *  @param {IDialogOptions} dialogOptions Dialog interaction/presentation options.
     *  @returns {ng.IPromise<any>} dialogResult
     **/
    public showModal = (customSettings:angular.ui.bootstrap.IModalSettings,
                        dialogOptions:IDialogOptions):ng.IPromise<any> => {
        if (!customSettings) {
            customSettings = {};
        }
        customSettings.backdrop = "static";
        if (!dialogOptions) {
            this.$log.error("xuiDialogService: No dialog options specified!");
            dialogOptions = <any>{};
        }
        return this.show(customSettings, dialogOptions);
    };

    private show = (customSettings:angular.ui.bootstrap.IModalSettings,
                    dialogOptions:IDialogOptions):ng.IPromise<any> => {
        let modalSettings:angular.ui.bootstrap.IModalSettings = {};
        if (dialogOptions.closeButtonText) {
            dialogOptions.cancelButtonText = dialogOptions.closeButtonText;
            this.$log.warn([
                "DialogService.show - IDialogOptions.closeButtonText is deprecated.",
                " Please use IDialogOptions.cancelButtonText instead."].join(""));
        }
        // Map angular-ui modal custom defaults to modal defaults defined in this service
        angular.extend(modalSettings, this.settings, customSettings);
        if (!modalSettings.controller) {
            modalSettings.controller = DialogInstanceController;
            modalSettings.bindToController = true;
            modalSettings.controllerAs = "vm";
            modalSettings.resolve = {
                dialogOptions: () => dialogOptions
            };
        }

        return this.$modal.open(modalSettings).result;
    };
}

export class DialogServiceObsolete extends DialogService {
    public static $inject = ["$uibModal", "$q", "$translate", "$log"];

    constructor($modal:angular.ui.bootstrap.IModalService,
                $q:ng.IQService,
                $translate:angular.translate.ITranslateService,
                $log:ng.ILogService) {
        super($modal, $q, $translate, $log);
        $log.warn("dialogService is now deprecated. Use xuiDialogService instead.");
    }
}
