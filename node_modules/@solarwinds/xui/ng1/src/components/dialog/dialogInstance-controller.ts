import {DialogKey} from "./dialog-service";
import IDialogOptions = xui.IDialogOptions;
import IDialogButton = xui.IDialogButton;
import IMap = xui.IMap;
import IStatusInfo = xui.IStatusInfo;
import IDialogController = xui.IDialogController;

export default class DialogInstanceController implements IDialogController {
    public static $inject = ["$uibModalInstance", "$translate", "$log", "$scope", "dialogOptions"];
    public isBusy = false;
    public isValid = true;

    constructor(private $modal:angular.ui.bootstrap.IModalServiceInstance,
                private $translate:angular.translate.ITranslateService,
                private $log:ng.ILogService,
                public $scope:ng.IScope,
                public dialogOptions:IDialogOptions) {
        this.prepareStatusMap();
        this.prepareDialogOptions();

        const unregisterLocationChngListener = $scope.$on("$locationChangeStart", () => {
            this.cancel();
        });

        $scope.$on("$destroy", () => {
            unregisterLocationChngListener();
        });
    }

    public execute = (button:IDialogButton, dialog:ng.IFormController) => {
        this.onCancelAction = button.cancelAction;
        this.actionText = button.actionText || "";
        let result:boolean|ng.IPromise<boolean>;

        try {
            result = button.action(dialog);
        } catch (ex) {
            this.$log.error(ex);
            return;
        }

        if (result === true || !angular.isDefined(result)) {
            this.close(dialog);
        } else if (result === false) {
            this.invalidate();
        } else {
            this.isBusy = true;
            (<ng.IPromise<boolean>>result)
                .then((isValid:boolean) => {
                    if (isValid === true) {
                        this.close(dialog);
                    } else {
                        this.invalidate();
                    }
                })
                .catch((error:string) => {
                    // when $timeout/$interval promises are canceled, the promise is rejected 
                    // and an exception is effectively thrown. we want to close the dialog
                    // on cancel
                    if (error === "canceled") {
                        this.close(dialog);
                    } else {
                        this.$log.error("Error on dialog result: " + error);
                    }
                })
                .finally(() => {
                    this.isBusy = false;
                });
        }
    };

    public cancel = () => {
        this.cancelAction();
        this.close("cancel");
    };

    public cancelAction = () => {
        this.isBusy = false;
        if (this.onCancelAction) {
            this.onCancelAction();
        }
        this.onCancelAction = null;
    };

    public isCancelAllowed = () => {
        return this.onCancelAction ? true : false;
    };

    public getActionText = () => {
        return this.actionText;
    };

    public hasStatus = () => {
        return this.dialogOptions.status === "warning" ||
            this.dialogOptions.status === "error";
    };

    public getStatusAttributes = () => {
        return this.statusMap[this.dialogOptions.status];
    };

    protected actionText:string = "";
    private statusMap:IMap<IStatusInfo> = {};
    private onCancelAction:() => void = null;

    public close = (dialogResult:any) => {
        this.$modal.close(dialogResult);
        this.isBusy = false;
    };

    private invalidate = () => {
        this.isValid = false;
        this.isBusy = false;
    };

    private prepareStatusMap = () => {
        this.statusMap["normal"] = {icon: "", style: "modal-header"};
        this.statusMap["warning"] = {icon: "status_warning", style: "modal-header-warning"};
        this.statusMap["error"] = {icon: "status_critical", style: "modal-header-error"};
    };

    private prepareDialogOptions = () => {
        if (!this.dialogOptions) {
            this.dialogOptions = {
                title: "Dialog",
                message: "Perform this action?",
                actionButtonText: this.$translate.instant(DialogKey.Ok),
                cancelButtonText: this.$translate.instant(DialogKey.Cancel)
            };
        }
        if (this.dialogOptions.headerText) {
            this.$log.warn("IDialogOptions.headerText is deprecated. Please use IDialogOptions.title instead.");
            this.dialogOptions.title = this.dialogOptions.headerText;
        }
        if (this.dialogOptions.resolveTitle) {
            this.dialogOptions.title = "Loading...";
            this.dialogOptions.resolveTitle().then((title:string) => {
                this.dialogOptions.title = title;
            }).catch(() => {
                this.dialogOptions.title = "";
                this.$log.error("Failed to resolve dialog title.");
            });
        }
        if (this.dialogOptions.bodyText) {
            this.$log.warn("IDialogOptions.bodyText is deprecated. Please use IDialogOptions.message instead.");
            this.dialogOptions.message = this.dialogOptions.bodyText;
        }
        if (!this.dialogOptions.status) {
            this.dialogOptions.status = "normal";
        }

        let hasCloseCancelBtn = !this.dialogOptions.hideCancel;
        if (!this.dialogOptions.cancelButtonText) {
            if (angular.isUndefined(this.dialogOptions.hideCancel)) {
                this.dialogOptions.hideCancel = true;
                hasCloseCancelBtn = false;
            } else if (!this.dialogOptions.hideCancel) {
                this.dialogOptions.cancelButtonText = this.$translate.instant(DialogKey.Close);
            }
        }

        if (!this.dialogOptions.buttons) {
            // when no other buttons are specified, use "OK" as default.
            if (this.dialogOptions.actionButtonText || !hasCloseCancelBtn) {
                this.dialogOptions.buttons = [{
                    name: "ok",
                    isPrimary: true,
                    text: this.dialogOptions.actionButtonText || this.$translate.instant(DialogKey.Ok),
                    action: (dialog:ng.IFormController):boolean|ng.IPromise<boolean> => {
                        if (this.dialogOptions.validate) {
                            return this.dialogOptions.validate(dialog);
                        }
                        return true;
                    }
                }];
            }
        }
    };
}
