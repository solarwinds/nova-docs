import ICheckboxGroupController from "./checkboxGroup-controller";
import ICheckboxGroupScope from "./checkboxGroup-directive";
import SpecHelper from "../../specHelper";

describe("components >", () => {
    describe("checkboxGroup >", () => {
        let element:any,
            scope:any,
            compile:any,
            ctrl:ICheckboxGroupController;

        beforeEach(angular.mock.module("xui"));

        beforeEach(inject(function ($compile:ng.ICompileService, $rootScope:ICheckboxGroupScope) {
            compile = $compile;
            scope = (<any>$rootScope).$new();
        }));

        let directive = "<xui-checkbox-group ng-model='model' ng-change=''>" +
            "                 <xui-checkbox value='1'>Checkbox_1</xui-checkbox>" +
            "                 <xui-checkbox value='2'>Checkbox_2</xui-checkbox>" +
            "            </xui-checkbox-group>";

        describe("controller initialization >", () => {
            it("should have 'model' property initialized", () => {
                // act
                element = SpecHelper.getCompiledElement(compile, scope, directive);

                // assert
                ctrl = element.controller("xuiCheckboxGroup");
                expect(ctrl.model).toBeDefined();
            });

            it("should have registered controller for each child checkbox directive", () => {
                // act
                element = SpecHelper.getCompiledElement(compile, scope, directive);

                // assert
                ctrl = element.controller("xuiCheckboxGroup");
                expect(ctrl.getChildrenCtrlsCount()).toEqual(2);
            });
        });

        describe("watchers >", () => {
            it("should notify registered controllers when the model was changed", () => {
                // act
                element = SpecHelper.getCompiledElement(compile, scope, directive);

                ctrl = element.controller("xuiCheckboxGroup");
                ctrl.notifyChildren = jasmine.createSpy("notifyChildren");

                ctrl.model.push(1);
                scope.$apply();

                // assert
                expect(ctrl.notifyChildren).toHaveBeenCalled();
            });
        });

        describe("replace >", () => {
            it("should have replaced directive element", () => {
                // act
                element = SpecHelper.getCompiledElement(compile, scope, directive);

                // assert
                expect(element[0].tagName.toLowerCase()).not.toEqual("xui-checkbox-group");
            });
        });

        describe("transclude >", () => {
            it("should have an ng-transclude directive in it", () => {
                // act
                element = SpecHelper.getCompiledElement(compile, scope, directive);

                // assert
                expect(element[0].hasAttribute("ng-transclude")).toBeTruthy();
            });

            it("should have transclude content", () => {
                // act
                element = SpecHelper.getCompiledElement(compile, scope, directive);

                // assert
                expect(element[0].innerText).toContain("Checkbox_1");
                expect(element[0].innerText).toContain("Checkbox_2");
            });
        });

        describe("require >", () => {
            it("should throw error if a strictly required controller is not available", () => {
                // arrange
                let modifiedDirective = directive.replace("ng-model='model'", "");

                // act, assert
                expect(() => {
                    SpecHelper.getCompiledElement(compile, scope, modifiedDirective);
                }).toThrow();
            });

            it("should work if a strictly required controller is available", () => {
                // act, assert
                expect(() => {
                    element = SpecHelper.getCompiledElement(compile, scope, directive);
                }).not.toThrow();
            });
        });

        describe("isolated scope >", () => {
            it("'model' on isolated scope should be two-way bound", () => {
                // arrange
                scope.model = [1];

                // act
                element = SpecHelper.getCompiledElement(compile, scope, directive);
                ctrl = element.controller("xuiCheckboxGroup");
                ctrl.model = [2];
                scope.$apply();

                // assert
                expect(scope.model).toEqual([2]);
            });
        });
    });
});
