import ICheckboxGroupController from "./checkboxGroup-controller";
import CheckboxController from "./checkbox-controller";
import SpecHelper from "../../specHelper";

describe("components >", () => {
    describe("checkboxGroupController >", () => {
        let scope:any,
            ctrl:ICheckboxGroupController;

        beforeEach(angular.mock.module("xui"));

        beforeEach(inject(function ($compile:ng.ICompileService, $rootScope:ng.IScope) {
            const directive = "<xui-checkbox-group ng-model='model'>" +
                "                 <xui-checkbox value='1'>Checkbox_1</xui-checkbox>" +
                "                 <xui-checkbox value='2'>Checkbox_2</xui-checkbox>" +
                "            </xui-checkbox-group>";

            scope = $rootScope.$new();

            const element = SpecHelper.getCompiledElement($compile, scope, directive);

            ctrl = element.controller("xuiCheckboxGroup");
        }));

        it("should add a primitive value into the model", () => {
            // act
            ctrl.addValue(3);

            // assert
            expect(ctrl.model.length).toEqual(1);
            expect(ctrl.model[0]).toEqual(3);
        });

        it("should add an object value into the model", () => {
            // arrange
            const object = {id: "1", value: "2"};

            // act
            ctrl.addValue(object);

            // assert
            expect(ctrl.model.length).toEqual(1);
            expect(ctrl.model[0]).toEqual({id: "1", value: "2"});
        });

        it("should remove a primitive value into the model", () => {
            // arrange
            ctrl.model = [3];

            // act
            ctrl.removeValue(3);

            // assert
            expect(scope.model.length).toEqual(0);
        });

        it("should add an object value into the model", () => {
            // arrange
            const object = {id: "1", value: "2"};
            ctrl.model = [object];

            // act
            ctrl.removeValue(object);

            // assert
            expect(ctrl.model.length).toEqual(0);
            //expect(ctrl.model.length).toEqual(0);
        });

        it("should add an child directive ctrl into the collection of ctrls", () => {
            // arrange
            const childCtrl = new CheckboxController();

            // act
            ctrl.registerChild(childCtrl);

            // assert
            expect(ctrl.getChildrenCtrlsCount()).toEqual(3);
        });

        it("should notify all registered directive ctrl into the collection of ctrls", () => {
            // arrange
            const childCtrl = new CheckboxController();
            childCtrl.setState = jasmine.createSpy("setState");
            ctrl.registerChild(childCtrl);

            // act
            ctrl.notifyChildren();

            // assert
            expect(childCtrl.setState).toHaveBeenCalled();
        });

        it("should call on-change on checkbox check", () => {
            const functionWrapper = {
                onChange: (item:any, checked:boolean) => {
                    return;
                }
            };
            const object = {id: "1", value: "2"};
            ctrl.model = [];
            ctrl.onChange = () => {
                return functionWrapper.onChange;
            };

            const eventSpy = spyOn(functionWrapper, "onChange");

            // act
            ctrl.addValue(object);

            // assert
            expect(eventSpy).toHaveBeenCalledWith(object, true);
        });

        it("should call on-change on checkbox uncheck", () => {
            const functionWrapper = {
                onChange: (item:any, checked:boolean) => {
                    return;
                }
            };

            const object = {id: "1", value: "2"};
            ctrl.model = [object];
            ctrl.onChange = () => {
                return functionWrapper.onChange;
            };
            const eventSpy = spyOn(functionWrapper, "onChange");

            // act
            ctrl.removeValue(object);

            // assert
            expect(eventSpy).toHaveBeenCalledWith(object, false);
        });

    });
});
