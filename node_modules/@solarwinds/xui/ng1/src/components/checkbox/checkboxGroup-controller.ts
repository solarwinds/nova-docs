import ICheckboxController from "./checkbox-controller";

export interface ICheckboxGroupController {
    ngModelCtrl: ng.INgModelController;
    addValue: Function;
    removeValue: Function;
    registerChild: Function;
    notifyChildren: Function;
    getChildrenCtrlsCount: Function;
    model: any[];
    onChange:()=>ICheckboxChanged;
    inverted: boolean;
}

export interface ICheckboxChanged {
    (item:any, checked:boolean):void;
}

export default class CheckboxGroupController implements ICheckboxGroupController {
    public static $inject = ["$scope", "$timeout"];
    public static EVENT_ADD_VALUE = "xui:checkbox-group:add-value";
    public static EVENT_REMOVE_VALUE = "xui:checkbox-group:remove-value";
    public static EVENT_TOGGLE_VALUE = "xui:checkbox-group:toggle-value";

    public model:any[];
    public ngModelCtrl:ng.INgModelController;
    public onChange:()=>ICheckboxChanged;
    public inverted: boolean;

    private childrenCtrls:ICheckboxController[] = [];

    constructor(private $scope:ng.IScope, private $timeout:ng.ITimeoutService) {
        $scope.$on(CheckboxGroupController.EVENT_ADD_VALUE,
            (event:ng.IAngularEvent, item:any)=> {
                this.addValue(item);
            });
        $scope.$on(CheckboxGroupController.EVENT_REMOVE_VALUE,
            (event:ng.IAngularEvent, item:any)=> {
                this.removeValue(item);
            });
        $scope.$on(CheckboxGroupController.EVENT_TOGGLE_VALUE,
            (event:ng.IAngularEvent, item:any)=> {
                if (_.includes(this.getModelValue(), item)) {
                    this.removeValue(item);
                } else {
                    this.addValue(item);
                }
            });
    }

    public addValue(value:any) {
        const newValue = this.getModelValue().concat(value);
        this.ngModelCtrl.$setViewValue(newValue);

        if (angular.isFunction(this.onChange) && angular.isFunction(this.onChange())) {
            this.$scope.$apply(()=> {
                this.onChange()(value, true);
            });
        }
    }

    public removeValue(value:any) {
        let newValue:any[];
        if (value instanceof Object) {
            newValue = _.reject(this.getModelValue(), value);
        } else {
            newValue = _.without(this.getModelValue(), value);
        }

        this.ngModelCtrl.$setViewValue(newValue);

        if (angular.isFunction(this.onChange) && angular.isFunction(this.onChange())) {
            this.$scope.$apply(()=> {
                this.onChange()(value, false);
            });
        }
    }

    public registerChild(childCtrl:ICheckboxController) {
        this.childrenCtrls.push(childCtrl);
        // checkbox is registered -> update its state based on group model value
        childCtrl.setState(this.getModelValue(), this.inverted);
    }

    public notifyChildren() {
        this.childrenCtrls.forEach(ctrl => ctrl.setState(this.ngModelCtrl.$modelValue, this.inverted));
    }

    public getChildrenCtrlsCount() {
        return this.childrenCtrls.length;
    }

    private getModelValue() {
        return this.ngModelCtrl.$modelValue || [];
    }
}
