import CheckboxController from "./checkbox-controller";
import ICheckboxController from "./checkbox-controller";
import ICheckboxGroupController from "./checkboxGroup-controller";
import InputProxyService from "../../services/inputProxy-service";

/**
 * @ngdoc directive
 * @name xui.directive:xuiCheckbox
 * @restrict E
 *
 * @description
 * XUI Checkbox.
 * The styling can be altered by applying a class to this element.
 * Currently supported class is xui-checkbox-empty--no-left-padding that can be used if empty checkbox is needed with
 * regular checkbox paddings.
 *
 * @parameters
 * @param {string=} help-text Value displayed as a help text.
 * @param {string} name Name of the checkbox element.
 * @param {string=} is-disabled Expression to determine if the checkbox should be disabled.
 * @param {string=} require-text Expression to determine if mandatory.
 * @param {string} value Value of the check box. Bound to the `ngModel`.
 * @param {string=} title Title of the check box. Is displayed as a tooltip.
 * @param {boolean=} is-indeterminate True to indicate that the state of the checkbox is indeterminate.
 *
 * @example
 *<example module="xui">
 *  <file src="src/components/checkbox/docs/checkbox-examples.html" name="index.html"></file>
 *  <file src="src/components/checkbox/docs/checkbox-examples.js" name="app.js"></file>
 *</example>
 */

export interface ICheckboxScope extends ng.IScope {
    name: string;
    isDisabled: boolean;
    requireText: string;
    helpText: string;
    model: any;
    value: any;
    title: string;
    isIndeterminate: boolean;
}

export default class Checkbox implements ng.IDirective {
    public static $inject = ["swUtil", "xuiInputProxyService"];
    constructor(private swUtil:any, private inputProxy:InputProxyService) {}

    public restrict = "E";
    public require = ["xuiCheckbox", "?ngModel", "^?xuiCheckboxGroup"];
    public templateUrl = "xui/components/checkbox/checkbox-directive.html";
    public replace = true;
    public transclude = true;
    public scope = {};
    public controller = CheckboxController;
    public controllerAs = "vm";
    public bindToController = {
        name: "@?",
        isDisabled: "=?",
        requireText: "@?",
        helpText: "@?",
        model: "=?ngModel",
        value: "=?",
        title: "@?",
        isIndeterminate: "=?",
        onFocus: "&?ngFocus",
        onBlur: "&?ngBlur",
        colorCode: "@?" // Anything that can be set as color in css suits here.
                        // This is intentionally undocumented, since there is only one use-case for a checkbox
                        // that needs to be colored (legend checkbox in charting framework).
    };

    public compile = (element:ng.IAugmentedJQuery, attrs:ng.IAttributes) => {
        const $input = element.find("input[type=checkbox]");

        // require-text
        if ("requireText" in attrs) {
            $input.attr("required", "required");
        }

        // is-disabled
        if ("isDisabled" in attrs) {
            $input.attr("ng-disabled", "vm.isDisabled");
        }

        // is-indeterminate
        if ("isIndeterminate" in attrs) {
            $input.attr("ui-indeterminate", "vm.isIndeterminate");
        }

        return {
            post: this.postLink
        };
    };

    private postLink = (scope:ICheckboxScope, element:ng.IAugmentedJQuery,
                        attrs:ng.IAttributes, controllers:any[],
                        transclude:ng.ITranscludeFunction) => {
        //name
        this.swUtil.initComponent(attrs, "checkbox");

        const checkboxCtrl = <ICheckboxController>controllers[0];
        const ngModelCtrl = <ng.INgModelController>controllers[1];
        const checkboxGroupCtrl = <ICheckboxGroupController>controllers[2];
        const $input = element.find(".xui-checkbox-input");

        transclude(($clone:ng.IAugmentedJQuery) => {
            if (!$clone.length) {
                // If no content is provided then remove the transclude, validation, and help hint elements.
                element
                    .addClass("xui-checkbox-empty")
                    .find(".xui-checkbox-transclude, .xui-validation, .xui-help-hint")
                    .remove();
            }
            $clone.remove();
        });

        // remove or add focus and hover effects according to "a" tag
        const a = element.find(".xui-checkbox-transclude a");
        if (a.length !== 0) {
            element.addClass("xui-checkbox--has-action");
            element.find(".xui-checkbox-transclude *:not(a)").hover(() => {
                $input.toggleClass("xui-checkbox-hover");
            });
        } else {
            element.find(".xui-checkbox-label").hover(() => {
                $input.toggleClass("xui-checkbox-hover");
            });
        }

        if (!ngModelCtrl) {
            if (!checkboxGroupCtrl) {
                throw new Error("Checkboxes without ng-model must be nested " +
                    "inside <xui-checkbox-group /> directive.");
            }

            $input.removeAttr("ng-model");

            // Register this checkbox in a group of checkboxes
            checkboxGroupCtrl.registerChild(checkboxCtrl);

            // On change swap value and trigger ng-changed.
            element.bind("change", () => {
                checkboxCtrl.handleValueInGroup($input.is(":checked"), checkboxGroupCtrl);
            });
        } else {
            const inputNgModelCtrl = $input.controller("ngModel");
            this.inputProxy.proxyModel(inputNgModelCtrl, ngModelCtrl, scope, "input", "checkbox");
        }
    };
}
