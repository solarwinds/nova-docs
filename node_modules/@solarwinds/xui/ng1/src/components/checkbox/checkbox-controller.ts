import ICheckboxGroupController from "./checkboxGroup-controller";

export interface ICheckboxController {
    name: string;
    isDisabled: boolean;
    requireText: string;
    helpText: string;
    model: any;
    value: any;
    title: string;
    setState(selectedValues:any[], inversionSelection:boolean):void;
    handleValueInGroup(isChecked:boolean, checkboxGroupCtrl:ICheckboxGroupController): void;
}

export default class CheckboxController implements ICheckboxController {
    public name:string;
    public isDisabled:boolean;
    public requireText:string;
    public helpText:string;
    public model:any;
    public value:any;
    public title:string;
    public internalModel:any;

    public setState = (selectedValues:any[], inversionSelection:boolean) => {
        if (this.value instanceof Object) {
            this.setStateForObjectValue(selectedValues, inversionSelection);
        } else {
            this.setStateForSimpleValue(selectedValues, inversionSelection);
        }
    };

    public handleValueInGroup = (isChecked:boolean, checkboxGroupCtrl:ICheckboxGroupController) => {
        if (isChecked) {
            this.handleCheckedState(checkboxGroupCtrl);
        } else {
            this.handleUncheckedState(checkboxGroupCtrl);
        }
    };

    private handleCheckedState = (checkboxGroupCtrl:ICheckboxGroupController) => {
        if (checkboxGroupCtrl.inverted) {
            this.removeValueFromGroup(checkboxGroupCtrl);
        } else {
            this.addValueToGroup(checkboxGroupCtrl);
        }
    };

    private handleUncheckedState = (checkboxGroupCtrl:ICheckboxGroupController) => {
        if (checkboxGroupCtrl.inverted) {
            this.addValueToGroup(checkboxGroupCtrl);
        } else {
            this.removeValueFromGroup(checkboxGroupCtrl);
        }
    };

    private addValueToGroup = (checkboxGroupCtrl:ICheckboxGroupController) => {
        if (this.value instanceof Object) {
            checkboxGroupCtrl.addValue(this.getCleanValue());
        } else {
            checkboxGroupCtrl.addValue(this.value);
        }
    };

    private removeValueFromGroup = (checkboxGroupCtrl:ICheckboxGroupController) => {
        if (this.value instanceof Object) {
            checkboxGroupCtrl.removeValue(this.getCleanValue());
        } else {
            checkboxGroupCtrl.removeValue(this.value);
        }
    };

    private setStateForObjectValue(selectedValues:any[], inversionSelection:boolean) {
        const isSelected = !!_.find(selectedValues, this.getCleanValue());
        this.internalModel = selectedValues && (inversionSelection ? !isSelected : isSelected);
    }

    private setStateForSimpleValue(selectedValues:any[], inversionSelection:boolean) {
        if (inversionSelection) {
            this.internalModel = selectedValues && selectedValues.indexOf(this.value) === -1;
        } else {
            this.internalModel = selectedValues && selectedValues.indexOf(this.value) > -1;
        }
    }

    private getCleanValue = () => {
        return _.omit(this.value, ["$$hashKey"]);
    };
}
