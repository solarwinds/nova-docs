import ICheckboxController from "./checkbox-controller";
import ICheckboxScope from "./checkbox-directive";
import SpecHelper from "../../specHelper";

describe("components >", function () {
    describe("checkbox >", function () {
        let element:any,
            scope:any,
            compile:any,
            ctrl:ICheckboxController;

        beforeEach(angular.mock.module("xui"));

        beforeEach(inject(function ($compile:ng.ICompileService, $rootScope:ICheckboxScope) {
            compile = $compile;
            scope = (<any>$rootScope).$new();
        }));

        const directive = "<xui-checkbox ng-model='model' help-text='helpfulText' is-disabled='isDisabled'" +
            " require-text='requireText' title='titleText' value='value'>plain label</xui-checkbox>";

        describe("replace >", () => {
            it("should have replaced directive element", () => {
                // act
                element = SpecHelper.getCompiledElement(compile, scope, directive);

                // assert
                expect(element[0].tagName.toLowerCase()).not.toEqual("xui-checkbox");
            });
        });

        describe("transclude >", () => {
            it("should have an ng-transclude directive in it", () => {
                // act
                element = SpecHelper.getCompiledElement(compile, scope, directive);

                // assert
                const transcludeElem = element.find(".xui-checkbox-transclude[ng-transclude]");
                expect(transcludeElem.length).toEqual(1);
            });

            it("should have transclude content", () => {
                // act
                element = SpecHelper.getCompiledElement(compile, scope, directive);

                // assert
                const transcludeContentElem = element.find(".xui-checkbox-transclude[ng-transclude]")[0];
                expect(transcludeContentElem.innerText.trim()).toEqual("plain label");
            });
        });

        describe("require >", () => {
            it("should not work without checkbox group if ng-model is missing", function () {
                // arrange
                let modifiedDirective = directive.replace("ng-model='model'", "");

                // act, assert
                expect(function () {
                    SpecHelper.getCompiledElement(compile, scope, modifiedDirective);
                }).toThrow();
            });
        });

        describe("isolated scope >", () => {
            it("'title' on isolated scope should be one-way bound", () => {
                // arrange
                scope.title = "title";

                // act
                element = SpecHelper.getCompiledElement(compile, scope, directive);
                ctrl = element.controller("xuiCheckbox");
                ctrl.title = "changedTitle";
                scope.$apply();

                // assert
                expect(scope.title).toEqual("title");
            });

            it("'name' on isolated scope should be one-way bound", () => {
                // arrange
                scope.name = "name";

                // act
                element = SpecHelper.getCompiledElement(compile, scope, directive);
                ctrl = element.controller("xuiCheckbox");
                ctrl.name = "changedName";
                scope.$apply();

                // assert
                expect(scope.name).toEqual("name");
            });

            it("'requireText' on isolated scope should be one-way bound", () => {
                // arrange
                scope.requireText = "requireText";

                // act
                element = SpecHelper.getCompiledElement(compile, scope, directive);
                ctrl = element.controller("xuiCheckbox");
                ctrl.requireText = "changedRequireText";
                scope.$apply();

                // assert
                expect(scope.requireText).toEqual("requireText");
            });

            it("'helpText' on isolated scope should be one-way bound", () => {
                // arrange
                scope.helpText = "helpText";

                // act
                element = SpecHelper.getCompiledElement(compile, scope, directive);
                ctrl = element.controller("xuiCheckbox");
                ctrl.helpText = "changedHelpText";
                scope.$apply();

                // assert
                expect(scope.helpText).toEqual("helpText");
            });

            it("'value' on isolated scope should be two-way bound", () => {
                // arrange
                scope.value = true;

                // act
                element = SpecHelper.getCompiledElement(compile, scope, directive);
                ctrl = element.controller("xuiCheckbox");
                ctrl.value = false;
                scope.$apply();

                // assert
                expect(scope.value).toEqual(false);
            });

            it("'model' on isolated scope should be two-way bound", () => {
                // arrange
                scope.model = true;

                // act
                element = SpecHelper.getCompiledElement(compile, scope, directive);
                ctrl = element.controller("xuiCheckbox");
                ctrl.model = false;
                scope.$apply();

                // assert
                expect(scope.model).toEqual(false);
            });
        });
    });
});
