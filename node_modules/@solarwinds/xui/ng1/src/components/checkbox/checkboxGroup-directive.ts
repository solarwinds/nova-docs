import CheckboxGroupController from "./checkboxGroup-controller";
import ICheckboxGroupController from "./checkboxGroup-controller";

/**
 * @ngdoc directive
 * @name xui.directive:xuiCheckboxGroup
 * @restrict E
 *
 * @description
 * XUI Checkbox group.
 *
 * @parameters
 * @param {array} ng-model The model that the value of the checkbox group is bound to.
 * @param {function} [on-change] (item, checked)=>void Callback for value collection change.
 * @param {boolean} [inverted] Whether inner checkboxes should display inverted values.
 *
 * @example
 *<example module="xui">
 *  <file src="src/components/checkbox/docs/checkboxGroup-examples.html" name="index.html"></file>
 *  <file src="src/components/checkbox/docs/checkboxGroup-examples.js" name="app.js"></file>
 *</example>
 */

export interface ICheckboxGroupScope extends ng.IScope {
    model: any;
}

export default class CheckboxGroup implements ng.IDirective {
    public static $inject = ["swUtil"];

    constructor(private swUtil:any) {
    }

    public restrict = "E";
    public require = ["xuiCheckboxGroup", "ngModel"];
    public replace = true;
    public transclude = true;
    public template = `<div class="xui-checkbox-group" ng-transclude></div>`;
    public scope = {
        model: "=ngModel",
        onChange: "&",
        inverted: "=?"
    };

    public controller = CheckboxGroupController;
    public controllerAs = "vm";
    public bindToController = true;

    public compile = () => {
        return {
            // we use preLink to init groupCtrl properties before checkbox's postLink use them
            pre: (scope:ICheckboxGroupScope, element:ng.IAugmentedJQuery,
                  attrs:ng.IAttributes, controllers:any) => {

                const groupCtrl:ICheckboxGroupController = controllers[0];
                const ngModelCtrl:ng.INgModelController = controllers[1];

                //name
                this.swUtil.initComponent(attrs, "checkboxGroup");

                // set initial model value
                groupCtrl.model = groupCtrl.model || [];

                // inject model controller to directive controller
                groupCtrl.ngModelCtrl = ngModelCtrl;

                // update checkboxes when model is changed
                scope.$watchCollection(
                    () => groupCtrl.model,
                    () => {
                        groupCtrl.notifyChildren();
                    });

                // clean model when inversionSelection flag has been changed
                scope.$watch(
                    () => groupCtrl.inverted,
                    (newValue:boolean, oldValue:boolean) => {
                        if (newValue !== oldValue) {
                            groupCtrl.notifyChildren();
                        }
                    });
            }
        };
    };
}
