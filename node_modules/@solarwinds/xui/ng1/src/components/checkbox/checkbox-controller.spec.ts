import ICheckboxGroupController from "./checkboxGroup-controller";
import ICheckboxController from "./checkbox-controller";
import SpecHelper from "../../specHelper";

describe("components >", () => {
    describe("checkboxController >", () => {
        let scope:any,
            ctrlGroup:ICheckboxGroupController,
            ctrlSimpleValue:ICheckboxController,
            ctrlObjectValue:ICheckboxController;

        beforeEach(angular.mock.module("xui"));

        describe("default mode >", () => {
            // TODO rewrite to use $controller service
            beforeEach(inject(function ($compile:ng.ICompileService, $rootScope:ng.IScope) {
                const directive = `<xui-checkbox-group ng-model='model' ng-change=''>
                                   <xui-checkbox class='simple' value='1'>Checkbox_1</xui-checkbox>
                                   <xui-checkbox class='object' value='{id:1, value:true, $$hashKey:1}'>
                                       Checkbox_2</xui-checkbox>
                              </xui-checkbox-group>`;

                scope = $rootScope.$new();

                const element = SpecHelper.getCompiledElement($compile, scope, directive);

                ctrlGroup = element.controller("xuiCheckboxGroup");
                ctrlSimpleValue = element.find("div.xui-checkbox.simple").controller("xuiCheckbox");
                ctrlObjectValue = element.find("div.xui-checkbox.object").controller("xuiCheckbox");
            }));

            it("should set 'internalModel' to True if group selected values contains checkbox primitive value",
                () => {
                // arrange
                const selectedGroupValues = [1];

                // act
                ctrlSimpleValue.setState(selectedGroupValues, false);

                // assert
                expect(ctrlSimpleValue.internalModel).toEqual(true);
            });

            it("should set 'internalModel' to False if group selected values does not contain checkbox primitive value",
                () => {
                // arrange
                const selectedGroupValues = [2];

                // act
                ctrlSimpleValue.setState(selectedGroupValues, false);

                // assert
                expect(ctrlSimpleValue.internalModel).toEqual(false);
            });

            it("should set 'internalModel' to True if group selected values contains checkbox object value",
                () => {
                // arrange
                const selectedGroupValues = [{id: 1, value: true}];

                // act
                ctrlObjectValue.setState(selectedGroupValues, false);

                // assert
                expect(ctrlObjectValue.internalModel).toEqual(true);
            });

            it("should set 'internalModel' to False if group selected values does not contain checkbox object value",
                () => {
                // arrange
                const selectedGroupValues = [{id: 2, value: false}];

                // act
                ctrlObjectValue.setState(selectedGroupValues, false);

                // assert
                expect(ctrlObjectValue.internalModel).toEqual(false);
            });

            it("should add checkbox simple value into the group selected values collection", () => {
                // act
                ctrlSimpleValue.handleValueInGroup(true, ctrlGroup);

                // assert
                expect(ctrlGroup.model).toEqual([1]);
            });

            it("should add checkbox object value into the group selected values collection", () => {
                // act
                ctrlObjectValue.handleValueInGroup(true, ctrlGroup);

                // assert
                expect(ctrlGroup.model).toEqual([{id: 1, value: true}]);
            });

            it("should remove checkbox simple value from the group selected values collection", () => {
                // arrange
                ctrlGroup.model = [1];

                // act
                ctrlSimpleValue.handleValueInGroup(false, ctrlGroup);

                // assert
                expect(ctrlGroup.model.length).toEqual(0);
            });

            it("should remove checkbox object value from the group selected values collection", () => {
                // arrange
                ctrlGroup.model = [{id: 1, value: true}];

                // act
                ctrlObjectValue.handleValueInGroup(false, ctrlGroup);

                // assert
                expect(ctrlGroup.model.length).toEqual(0);
            });
        });

        describe("inverted selection mode >", () => {
            // TODO rewrite to use $controller service
            beforeEach(inject(function ($compile:ng.ICompileService, $rootScope:ng.IScope) {
                const directive = `<xui-checkbox-group ng-model='model' ng-change='' inverted="true">
                                   <xui-checkbox class='simple' value='1'>Checkbox_1</xui-checkbox>
                                   <xui-checkbox class='object' value='{id:1, value:true, $$hashKey:1}'>
                                       Checkbox_2</xui-checkbox>
                              </xui-checkbox-group>`;

                scope = $rootScope.$new();

                const element = SpecHelper.getCompiledElement($compile, scope, directive);

                ctrlGroup = element.controller("xuiCheckboxGroup");
                ctrlSimpleValue = element.find("div.xui-checkbox.simple").controller("xuiCheckbox");
                ctrlObjectValue = element.find("div.xui-checkbox.object").controller("xuiCheckbox");
            }));

            it("should add checkbox simple value into the group selected values collection", () => {
                // act
                ctrlSimpleValue.handleValueInGroup(false, ctrlGroup);

                // assert
                expect(ctrlGroup.model).toEqual([1]);
            });

            it("should add checkbox object value into the group selected values collection", () => {
                // act
                ctrlObjectValue.handleValueInGroup(false, ctrlGroup);

                // assert
                expect(ctrlGroup.model).toEqual([{id: 1, value: true}]);
            });

            it("should remove checkbox simple value from the group selected values collection", () => {
                // arrange
                ctrlGroup.model = [1];

                // act
                ctrlSimpleValue.handleValueInGroup(true, ctrlGroup);

                // assert
                expect(ctrlGroup.model.length).toEqual(0);
            });

            it("should remove checkbox object value from the group selected values collection", () => {
                // arrange
                ctrlGroup.model = [{id: 1, value: true}];

                // act
                ctrlObjectValue.handleValueInGroup(true, ctrlGroup);

                // assert
                expect(ctrlGroup.model.length).toEqual(0);
            });
        });
    });
});
