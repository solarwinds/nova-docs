
describe('components >', function () {
    describe('button >', function () {
        var scope, compile;

        beforeEach(angular.mock.module('xui'));

        beforeEach(inject(function ($templateCache, $rootScope, _$compile_) {
            scope = $rootScope.$new();
            compile = _$compile_;
        }));

        it('disabled', function () {
            var btn = compile('<xui-button is-disabled="true">Disabled</xui-button>')(scope)[0];
            expect(btn.getAttribute("is-disabled"));
        });

        it('loading', function () {
            var btn = compile('<xui-button is-loading="true">Progress Indicator</xui-button>')(scope)[0];
            expect(btn.getAttribute("is-loading"));
        });

        describe('sizes >', function () {
            var btns = [
                '<xui-button size="large">Large</xui-button>',
                '<xui-button>Medium (default)</xui-button>',
                '<xui-button size="small">Small</xui-button>',
                '<xui-button size="xsmall">Extra Small</xui-button>'
            ];

            it('large', function () {
                var btn = compile(btns[0])(scope)[0];
                expect(btn.getAttribute("size")).toEqual("large");
            });

            it('medium (default)', function () {
                var btn = compile(btns[1])(scope)[0];
                expect(btn.getAttribute("size")).toBeNull();
            });

            it('small', function () {
                var btn = compile(btns[2])(scope)[0];
                expect(btn.getAttribute("size")).toEqual("small");
            });

            it('xsmall', function () {
                var btn = compile(btns[3])(scope)[0];
                expect(btn.getAttribute("size")).toEqual("xsmall");
            });
        });

        describe('display-styles >', function () {
            var btns = [
                '<xui-button display-style="primary">Primary</xui-button>',
                '<xui-button>Secondary (default)</xui-button>',
                '<xui-button display-style="tertiary">Tertiary</xui-button>',
                '<xui-button display-style="link">Link</xui-button>'
            ];

            it('primary', function () {
                var btn = compile(btns[0])(scope)[0];
                expect(btn.getAttribute("display-style")).toEqual("primary");
            });

            it('secondary (default)', function () {
                var btn = compile(btns[1])(scope)[0];
                expect(btn.getAttribute("display-style")).toBeNull();
            });

            it('tertiary', function () {
                var btn = compile(btns[2])(scope)[0];
                expect(btn.getAttribute("display-style")).toEqual("tertiary");
            });

            it('link', function () {
                var btn = compile(btns[3])(scope)[0];
                expect(btn.getAttribute("display-style")).toEqual("link");
            });
        });

        describe('icons >', function () {
            var btns = [
                '<xui-button icon-class="icon-severity-ok">Icon Left (default)</xui-button>',
                '<xui-button icon-class="icon-severity-ok" icon-right="true">Icon Right</xui-button>',
                '<xui-button icon-class="icon-severity-ok" icon-right="true" icon-color="white">White Icon</xui-button>'
            ];

            it('left (default)', function () {
                var btn = compile(btns[0])(scope)[0];
                expect(btn.getAttribute("icon-class")).not.toBeNull();
            });

            it('right', function () {
                var btn = compile(btns[1])(scope)[0];
                expect(btn.getAttribute("icon-class")).not.toBeNull();
                expect(btn.getAttribute("icon-right"));
            });
            it('white', function () {
                var btn = compile(btns[1])(scope)[0];
                expect(btn.getAttribute("icon-class")).not.toBeNull();
                expect(btn.getAttribute("icon-right"));
                expect(btn.getAttribute("icon-color")).toEqual("white");
            });
        });
    });
});
