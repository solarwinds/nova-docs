/**
 * @ngdoc directive
 * @name xui.directive:xuiButton
 * @restrict E
 *
 * @description
 * Button built over bootstrap button.
 *
 * @parameters

 * @param {string=} size Values can be "large", "small", or "xsmall".
 * @param {string=} name Name of the element.
 * @param {string=} tool-tip Tooltip for the button.
 * @param {string=} display-style Values can be "primary" | "tertiary" | "link".
 * @param {string=} icon The icon that should be rendered on the button.
 * @param {boolean=} icon-right Indicates if the icon on the button is right aligned.
 * @param {string=} icon-color The color to be applied to the icon on the button.
 *                        (default value for "primary": "white", "secondary" | "tertiary" | "link": "primary-blue")
 * @param {boolean=} is-busy Indicates if busy indicator should display.
 * @param {boolean=} is-disabled Indicates if the button should appear as disabled.
 * @param {boolean=} is-empty Indicates if the button has any text contents
 *                        (this is generally set dynamically but when nested in
 *                        other directives like menu it can be useful).
 * @param {boolean=} xui-repeat Indicates if the button should auto-repeat its ng-click behavior while the button is
 *                          pressed down for an extended period of time.
 * @param {boolean=} tooltip-append-to-body Appends the tooltip to '$body' instead of the parent element.
 *
 * @example
 *    <example module="xui">
 *        <file src="src/components/button/docs/button-examples.html" name="index.html"></file>
 *        <file src="src/components/button/docs/button-examples.js" name="app.js"></file>
 *    </example>
 */
export default class Button implements ng.IDirective {
    public static $inject = ["swUtil", "$compile","$interval","$timeout"];

    constructor(private swUtil:any, private $compile:ng.ICompileService,
                private $interval:ng.IIntervalService,private $timeout:ng.ITimeoutService) {
    }
    private static rippleContainerClass = "xui-button-ripple-container";
    private static rippleContainerTemplate = [
        "<div class='" + Button.rippleContainerClass + "'>",
        "    <div class='ripple ripple-1'></div>",
        "    <div class='ripple ripple-2'></div>",
        "</div>"].join("");

    public sizeMap:{[key: string]: string } = {
        "large": "btn-lg",
        "small": "btn-sm",
        "xsmall": "btn-xs"
    };

    public iconSizeMap:{[key: string]: string } = {
        "large": "",
        "small": "small",
        "xsmall": "xsmall"
    };

    public displayMap:{[key: string]: string } = {
        "primary": "btn-primary",
        "secondary": "btn-secondary",
        "tertiary": "xui-btn-tertiary",
        "link": "xui-btn-link"
    };
    public restrict = "E";
    public templateUrl = "xui/components/button/button-directive.html";
    public replace = true;
    public transclude = true;
    public scope = {
        name: "@?",
        toolTip: "@?",
        displayStyle: "@?",
        size: "@?",
        icon: "@?",
        iconRight: "@?",
        iconColor: "@?",
        isBusy: "<?",
        isDisabled: "<?",
        isEmpty: "@?",
        xuiRepeat: "@?",
        tooltipAppendToBody: "<?"

    };
    public link = (scope:ng.IScope, element:ng.IAugmentedJQuery, attrs:ng.IAttributes,
                   ctrl:ng.IControllerService, transclude:ng.ITranscludeFunction) => {
        //name
        this.swUtil.initComponent(attrs, "button");

        transclude(scope, (clone) => {
            if (clone.length === 0) {
                element.attr("is-empty", "true");
            }
            clone.remove();
        });

        if (attrs["isEmpty"]) {
            element.attr("is-empty", "true");
        }

        // display-style
        if (attrs["displayStyle"]) {
            element.addClass(this.displayMap[attrs["displayStyle"].toLowerCase()]);
        } else {
            element.addClass("btn-default");
        }

        // size
        if (attrs["size"]) {
            element.addClass(this.sizeMap[attrs["size"].toLowerCase()]);
        }

        // icon-class
        if (attrs["icon"]) {
            // Prepend icon html to the element.
            let $icon = angular.element("<xui-icon is-dynamic=\"true\" icon=\"{{icon}}\"></xui-icon>");

            if (attrs["size"]) {
                $icon.attr("icon-size", this.iconSizeMap[attrs["size"].toLowerCase()]);
            }

            if (attrs["iconRight"]) {
                element.addClass("icon-right");
            } else {
                element.addClass("icon-left");
            }

            if (attrs["displayStyle"]==="primary") {
                $icon.attr("icon-color", attrs["iconColor"] || "white");
            }

            if (attrs["iconColor"]) {
                $icon.attr("icon-color", attrs["iconColor"]);
            }

            element.prepend($icon);
            this.$compile($icon)(scope);
        }
        // is-busy
        if (attrs["isBusy"]) {
            this.watchBusy(scope, element);
        }

        if (attrs["xuiRepeat"] === "true") {
            let promise:any = null;
            let promise1:any = null;
            element.on("mousedown", () => {
                promise = this.$timeout(() => {
                    promise1 = this.$interval(() => {
                        this.$timeout(()=> {
                            element.triggerHandler("click");
                        });
                    }, 100);
                }, 400);
            });
            element.on("mouseup", () => {
                this.$interval.cancel(promise1);
                this.$timeout.cancel(promise);
            });
            element.on("mouseleave", () => {
                this.$interval.cancel(promise1);
                this.$timeout.cancel(promise);
            });

        }
    };

    private watchBusy = (scope:ng.IScope, element:ng.IAugmentedJQuery) => {
        scope.$watch("isBusy", (newValue:boolean, oldValue:boolean) => {
            let rippleContainer = element.find("> ." + Button.rippleContainerClass);

            if (newValue === true) {
                element.addClass("is-busy");
                element.blur(); // Remove focus from the button so the active/focus state is not applied.

                if (rippleContainer.length === 0) {
                    rippleContainer = angular.element(Button.rippleContainerTemplate);
                    element.prepend(rippleContainer);
                }

                const d = Math.max(element.innerWidth(), element.innerHeight());
                rippleContainer.css({height: d, width: d});

                const x = (element.innerWidth() - rippleContainer.width()) / 2;
                const y = (element.innerHeight() - rippleContainer.height()) / 2;

                rippleContainer.css({top: y + "px", left: x + "px"});
            } else {
                rippleContainer.remove();
                element.removeClass("is-busy");
            }
        });
    };
}
