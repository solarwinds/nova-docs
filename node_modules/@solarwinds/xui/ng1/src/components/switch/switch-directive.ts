/**
 * @ngdoc directive
 * @name xui.directive:xuiSwitch
 * @restrict E
 *
 * @description
 * XUI Switch component.
 *
 * @parameters
 * @param {string=} name Name of the element.
 *
 * @example
 * <example module="xui">
 *   <file src="src/components/switch/docs/switch-examples.html" name="index.html"></file>
 *   <file src="src/components/switch/docs/switch-examples.js" name="app.js"></file>
 * </example>
 */

interface ISwitchScope extends ng.IScope {
    name: string;
    caption: string;
    value: any;
    toggle: ()=>void;
}

const ON_CSS = "xui-switched";
const BAR_FINDER = ".xui-switch__bar";
const DISABLED_ATTR = "disabled";
const TABINDEX_ATTR = "tabindex";

export default class Switch implements ng.IDirective {
    public static $inject = ["swUtil"];
    constructor(private swUtil:any) {}

    public restrict = "E";
    public require = ["ngModel"];
    public templateUrl = "xui/components/switch/switch-directive.html";
    public replace = true;
    public transclude = true;
    public scope = {
        name: "@?"
    };

    public link = (scope:ISwitchScope, element:ng.IAugmentedJQuery,
                   attrs:ng.IAttributes, controllers:any) => {
        this.swUtil.initComponent(attrs, "switch");

        const ngModelCtrl:ng.INgModelController = controllers[0];
        ngModelCtrl.$render = () => {
            element.toggleClass(ON_CSS, !!ngModelCtrl.$viewValue);
        };

        //disabled elements don't get tabstops
        attrs.$observe(DISABLED_ATTR, (val) => {
            if (val) {
                element.find(BAR_FINDER).attr(TABINDEX_ATTR,-1);
            } else {
                element.find(BAR_FINDER).attr(TABINDEX_ATTR,0);
            }
        });

        scope.toggle = ()=> {
            if (element[0].hasAttribute(DISABLED_ATTR)) {
                return;
            }
            ngModelCtrl.$setViewValue(!ngModelCtrl.$modelValue);
            ngModelCtrl.$render();
        };
    };
}
