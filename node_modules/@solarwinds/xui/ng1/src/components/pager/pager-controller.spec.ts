import {PagerController, defaultPageSizeSet} from "./pager-controller";

describe("components >", ()=> {
    describe("pager >", ()=> {
        describe("controller >", ()=> {
            let $scope:ng.IRootScopeService;
            let $controller:ng.IControllerService;
            let $element:ng.IAugmentedJQuery;
            let $translate:angular.translate.ITranslateService;
            let $log:ng.ILogService;
            let ctrl:PagerController;
            const prevPageText = "Previous Page";
            const nextPageText = "Next Page";

            beforeEach(angular.mock.module("xui"));
            beforeEach(inject(($injector:any) => {
                $scope = $injector.get("$rootScope");
                $controller = $injector.get("$controller");
                $translate = $injector.get("$translate");
                $log = $injector.get("$log");
                $element = angular.element("<div></div>");
                ctrl = <PagerController>$controller("xuiPagerController", {
                    $element: $element,
                    $translate: $translate,
                    log: $log
                });
            }));

            let prepareController = (adjacent:number, totalItems:number) => {
                ctrl.adjacent = adjacent;
                ctrl.total = () => totalItems;
                ctrl.showPrevNext = true;
                ctrl.init();
            };

            it("should initialize properly", () => {
                ctrl.init();
                expect(ctrl.pageSize).toBe(10);
                expect(ctrl.dots).toEqual("...");
                expect(ctrl.ulClass).toEqual("pagination");
                expect(ctrl.activeClass).toEqual("active");
                expect(ctrl.disabledClass).toEqual("disabled");
                expect(ctrl.total()).toBe(0);
                expect(ctrl.page).toBe(1);
                expect(ctrl.hideIfEmpty).toBe(false);
                expect(ctrl.maxElements).toBe(7);
                expect(ctrl.pageSizeSet.length).toBe(4);
                expect(ctrl.pageSizeSet).toContain(10);
                expect(ctrl.pageSizeSet).toContain(25);
                expect(ctrl.pageSizeSet).toContain(50);
                expect(ctrl.pageSizeSet).toContain(100);
            });

            it("uses expected default page size set", () => {
                expect(defaultPageSizeSet).toEqual([10, 25, 50, 100]);
            });

            it("should initialize size set properly", () => {
                ctrl.pageSize = undefined;
                ctrl.initPageSizeSet();
                expect(ctrl.pageSize).toEqual(defaultPageSizeSet[0]);
                expect(ctrl.pageSizeSet).toEqual(defaultPageSizeSet);
            });

            it("should initialize size set properly for non-default size", () => {
                ctrl.pageSize = 33;
                ctrl.initPageSizeSet();
                expect(ctrl.pageSizeSet.length).toBe(defaultPageSizeSet.length+1);

                const indexOf33 = ctrl.pageSizeSet.indexOf(33);
                const indexOf100 = ctrl.pageSizeSet.indexOf(100);

                expect(indexOf33).toBeGreaterThan(0);
                expect(indexOf33 < indexOf100).toBe(true);
            });

            it("should return correct total", () => {
                prepareController(1, 1000);
                expect(ctrl.total()).toBe(1000);
            });

            it("should properly calculate page count", () => {
                prepareController(1, 1000);
                expect(ctrl.pageSize).toBe(10);
                expect(ctrl.total()).toBe(1000);
                expect(ctrl.getPageCount()).toBe(100);

                ctrl.pageSize = 25;
                expect(ctrl.getPageCount()).toBe(40);

                ctrl.pageSize = 50;
                expect(ctrl.getPageCount()).toBe(20);
            });

            it("should assemble the page bar properly with adjacent=1", () => {
                prepareController(1, 1000);
                ctrl.assemble();
                // "< 1 2 3 4 5 ... 100 >"
                expect(ctrl.itemsList.length).toBe(9);
                expect(ctrl.itemsList[0].title).toEqual(prevPageText);
                expect(ctrl.itemsList[1].value).toBe(1);
                expect(ctrl.itemsList[2].value).toBe(2);
                expect(ctrl.itemsList[3].value).toBe(3);
                expect(ctrl.itemsList[4].value).toBe(4);
                expect(ctrl.itemsList[5].value).toBe(5);
                expect(ctrl.itemsList[6].value).toEqual("...");
                expect(ctrl.itemsList[7].value).toBe(100);
                expect(ctrl.itemsList[8].title).toEqual(nextPageText);
            });

            it("should place 'goto' page in the middle of the visible sequence and honor adjacent=1", () => {
                prepareController(1, 1000);
                ctrl.assemble();
                // "< 1 2 3 4 5 ... 100 >"
                expect(ctrl.itemsList.length).toBe(9);

                ctrl.goToPage(17);
                // "< 1 ... 16 17 18 ... 100 >"
                expect(ctrl.itemsList.length).toBe(9);
                expect(ctrl.itemsList[0].title).toEqual(prevPageText);
                expect(ctrl.itemsList[1].value).toBe(1);
                expect(ctrl.itemsList[2].value).toEqual("...");
                expect(ctrl.itemsList[3].value).toBe(16);
                expect(ctrl.itemsList[4].value).toBe(17);
                expect(ctrl.itemsList[5].value).toBe(18);
                expect(ctrl.itemsList[6].value).toEqual("...");
                expect(ctrl.itemsList[7].value).toBe(100);
                expect(ctrl.itemsList[8].title).toEqual(nextPageText);
            });

            it("should reveal 5 pages before showing left ellipsis when adjacent=1", () => {
                prepareController(1, 1000);
                ctrl.assemble();
                // "< 1 2 3 4 5 ... 100 >"
                ctrl.goToPage(3);
                // "< 1 2 3 4 5 ... 100 >"
                expect(ctrl.itemsList.length).toBe(9);
                expect(ctrl.itemsList[0].title).toEqual(prevPageText);
                expect(ctrl.itemsList[1].value).toBe(1);
                expect(ctrl.itemsList[2].value).toBe(2);
                expect(ctrl.itemsList[3].value).toBe(3);
                expect(ctrl.itemsList[4].value).toBe(4);
                expect(ctrl.itemsList[5].value).toBe(5);
                expect(ctrl.itemsList[6].value).toEqual("...");
                expect(ctrl.itemsList[7].value).toBe(100);
                expect(ctrl.itemsList[8].title).toEqual(nextPageText);

                ctrl.goToPage(4);
                // "< 1 2 3 4 5 ... 100 >"
                expect(ctrl.itemsList.length).toBe(9);
                expect(ctrl.itemsList[5].value).toBe(5);
                expect(ctrl.itemsList[6].value).toEqual("...");
                expect(ctrl.itemsList[7].value).toBe(100);
                expect(ctrl.itemsList[8].title).toEqual(nextPageText);

                ctrl.goToPage(5);
                // "< 1 ... 4 5 6 ... 100 >"
                expect(ctrl.itemsList.length).toBe(9);
                expect(ctrl.itemsList[0].title).toEqual(prevPageText);
                expect(ctrl.itemsList[1].value).toBe(1);
                expect(ctrl.itemsList[2].value).toEqual("...");
                expect(ctrl.itemsList[3].value).toBe(4);
                expect(ctrl.itemsList[4].value).toBe(5);
                expect(ctrl.itemsList[5].value).toBe(6);
                expect(ctrl.itemsList[6].value).toEqual("...");
                expect(ctrl.itemsList[7].value).toBe(100);
                expect(ctrl.itemsList[8].title).toEqual(nextPageText);
            });

            it("last visible sequence should mirror behavior of first visible sequence", () => {
                prepareController(1, 1000);
                ctrl.assemble();
                // "< 1 2 3 4 5 ... 100 >"
                ctrl.goToPage(96);
                // "< 1 ... 95 96 97 ... 100 >"
                expect(ctrl.itemsList.length).toBe(9);
                expect(ctrl.itemsList[0].title).toEqual(prevPageText);
                expect(ctrl.itemsList[1].value).toBe(1);
                expect(ctrl.itemsList[2].value).toEqual("...");
                expect(ctrl.itemsList[3].value).toBe(95);
                expect(ctrl.itemsList[4].value).toBe(96);
                expect(ctrl.itemsList[5].value).toBe(97);
                expect(ctrl.itemsList[6].value).toEqual("...");
                expect(ctrl.itemsList[7].value).toBe(100);
                expect(ctrl.itemsList[8].title).toEqual(nextPageText);

                ctrl.goToPage(97);
                // "< 1 ... 96 97 98 99 100 >"
                expect(ctrl.itemsList.length).toBe(9);
                expect(ctrl.itemsList[0].title).toEqual(prevPageText);
                expect(ctrl.itemsList[1].value).toBe(1);
                expect(ctrl.itemsList[2].value).toEqual("...");
                expect(ctrl.itemsList[3].value).toBe(96);
                expect(ctrl.itemsList[4].value).toBe(97);
                expect(ctrl.itemsList[5].value).toBe(98);
                expect(ctrl.itemsList[6].value).toBe(99);
                expect(ctrl.itemsList[7].value).toBe(100);
                expect(ctrl.itemsList[8].title).toEqual(nextPageText);

                ctrl.goToPage(98);
                // "< 1 ... 96 97 98 99 100 >"
                expect(ctrl.itemsList.length).toBe(9);
                expect(ctrl.itemsList[0].title).toEqual(prevPageText);
                expect(ctrl.itemsList[1].value).toBe(1);
                expect(ctrl.itemsList[2].value).toEqual("...");
                expect(ctrl.itemsList[3].value).toBe(96);
                expect(ctrl.itemsList[4].value).toBe(97);
                expect(ctrl.itemsList[5].value).toBe(98);
                expect(ctrl.itemsList[6].value).toBe(99);
                expect(ctrl.itemsList[7].value).toBe(100);
                expect(ctrl.itemsList[8].title).toEqual(nextPageText);

                ctrl.goToPage(99);
                // "< 1 ... 98 99 100 >"
                expect(ctrl.itemsList.length).toBe(9);
                expect(ctrl.itemsList[0].title).toEqual(prevPageText);
                expect(ctrl.itemsList[1].value).toBe(1);
                expect(ctrl.itemsList[2].value).toEqual("...");
                expect(ctrl.itemsList[3].value).toBe(96);
                expect(ctrl.itemsList[4].value).toBe(97);
                expect(ctrl.itemsList[5].value).toBe(98);
                expect(ctrl.itemsList[6].value).toBe(99);
                expect(ctrl.itemsList[7].value).toBe(100);
                expect(ctrl.itemsList[8].title).toEqual(nextPageText);

                ctrl.goToPage(100);
                // "< 1 ... 96 97 98 99 100 >"
                expect(ctrl.itemsList.length).toBe(9);
                expect(ctrl.itemsList[0].title).toEqual(prevPageText);
                expect(ctrl.itemsList[1].value).toBe(1);
                expect(ctrl.itemsList[2].value).toEqual("...");
                expect(ctrl.itemsList[3].value).toBe(96);
                expect(ctrl.itemsList[4].value).toBe(97);
                expect(ctrl.itemsList[5].value).toBe(98);
                expect(ctrl.itemsList[6].value).toBe(99);
                expect(ctrl.itemsList[7].value).toBe(100);
                expect(ctrl.itemsList[8].title).toEqual(nextPageText);
            });

            it("should assemble the page bar properly with adjacent=2", () => {
                ctrl.adjacent = 2;
                ctrl.total = () => 1000;
                ctrl.showPrevNext = true;
                ctrl.init();
                ctrl.assemble();
                expect(ctrl.itemsList.length).toBe(11);
                expect(ctrl.itemsList[0].title).toEqual(prevPageText);
                expect(ctrl.itemsList[1].value).toBe(1);
                expect(ctrl.itemsList[2].value).toBe(2);
                expect(ctrl.itemsList[3].value).toBe(3);
                expect(ctrl.itemsList[4].value).toBe(4);
                expect(ctrl.itemsList[5].value).toBe(5);
                expect(ctrl.itemsList[6].value).toBe(6);
                expect(ctrl.itemsList[7].value).toBe(7);
                expect(ctrl.itemsList[8].value).toEqual("...");
                expect(ctrl.itemsList[9].value).toBe(100);
                expect(ctrl.itemsList[10].title).toEqual(nextPageText);
            });

            it("should place 'goto' page in the middle of the visible sequence and honor adjacent=2", () => {
                prepareController(2, 1000);
                ctrl.assemble();
                // "< 1 2 3 4 5 ... 100 >"
                expect(ctrl.itemsList.length).toBe(11);

                ctrl.goToPage(17);
                // "< 1 ... 15 16 17 18 19 ... 100 >"
                expect(ctrl.itemsList.length).toBe(11);
                expect(ctrl.itemsList[0].title).toEqual(prevPageText);
                expect(ctrl.itemsList[1].value).toBe(1);
                expect(ctrl.itemsList[2].value).toEqual("...");
                expect(ctrl.itemsList[3].value).toBe(15);
                expect(ctrl.itemsList[4].value).toBe(16);
                expect(ctrl.itemsList[5].value).toBe(17);
                expect(ctrl.itemsList[6].value).toBe(18);
                expect(ctrl.itemsList[7].value).toBe(19);
                expect(ctrl.itemsList[8].value).toEqual("...");
                expect(ctrl.itemsList[9].value).toBe(100);
                expect(ctrl.itemsList[10].title).toEqual(nextPageText);

                ctrl.goToPage(82);
                // "< 1 ... 80 81 82 83 84 ... 100 >"
                expect(ctrl.itemsList.length).toBe(11);
                expect(ctrl.itemsList[0].title).toEqual(prevPageText);
                expect(ctrl.itemsList[1].value).toBe(1);
                expect(ctrl.itemsList[2].value).toEqual("...");
                expect(ctrl.itemsList[3].value).toBe(80);
                expect(ctrl.itemsList[4].value).toBe(81);
                expect(ctrl.itemsList[5].value).toBe(82);
                expect(ctrl.itemsList[6].value).toBe(83);
                expect(ctrl.itemsList[7].value).toBe(84);
                expect(ctrl.itemsList[8].value).toEqual("...");
                expect(ctrl.itemsList[9].value).toBe(100);
                expect(ctrl.itemsList[10].title).toEqual(nextPageText);
            });

            it("should reveal 7 (adjacent*2+1+2) pages before showing left ellipsis when adjacent=2", () => {
                prepareController(2, 1000);
                ctrl.assemble();
                // "< 1 2 3 4 5 6 7 ... 100 >"
                ctrl.goToPage(5);
                // "< 1 2 3 4 5 6 7 ... 100 >"
                expect(ctrl.itemsList.length).toBe(11);
                expect(ctrl.itemsList[0].title).toEqual(prevPageText);
                expect(ctrl.itemsList[1].value).toBe(1);
                expect(ctrl.itemsList[2].value).toBe(2);
                expect(ctrl.itemsList[3].value).toBe(3);
                expect(ctrl.itemsList[4].value).toBe(4);
                expect(ctrl.itemsList[5].value).toBe(5);
                expect(ctrl.itemsList[6].value).toBe(6);
                expect(ctrl.itemsList[7].value).toBe(7);
                expect(ctrl.itemsList[8].value).toEqual("...");
                expect(ctrl.itemsList[9].value).toBe(100);
                expect(ctrl.itemsList[10].title).toEqual(nextPageText);

                ctrl.goToPage(6);
                // "< 1 ... 4 5 6 7 8 ... 100 >"
                expect(ctrl.itemsList.length).toBe(11);
                expect(ctrl.itemsList[0].title).toEqual(prevPageText);
                expect(ctrl.itemsList[1].value).toBe(1);
                expect(ctrl.itemsList[2].value).toBe("...");
                expect(ctrl.itemsList[3].value).toBe(4);
                expect(ctrl.itemsList[4].value).toBe(5);
                expect(ctrl.itemsList[5].value).toBe(6);
                expect(ctrl.itemsList[6].value).toBe(7);
                expect(ctrl.itemsList[7].value).toBe(8);
                expect(ctrl.itemsList[8].value).toEqual("...");
                expect(ctrl.itemsList[9].value).toBe(100);
                expect(ctrl.itemsList[10].title).toEqual(nextPageText);

                ctrl.goToPage(7);
                // "< 1 ... 5 6 7 8 9 ... 100 >"
                expect(ctrl.itemsList.length).toBe(11);
                expect(ctrl.itemsList[0].title).toEqual(prevPageText);
                expect(ctrl.itemsList[1].value).toBe(1);
                expect(ctrl.itemsList[2].value).toEqual("...");
                expect(ctrl.itemsList[3].value).toBe(5);
                expect(ctrl.itemsList[4].value).toBe(6);
                expect(ctrl.itemsList[5].value).toBe(7);
                expect(ctrl.itemsList[6].value).toBe(8);
                expect(ctrl.itemsList[7].value).toBe(9);
                expect(ctrl.itemsList[8].value).toEqual("...");
                expect(ctrl.itemsList[9].value).toBe(100);
                expect(ctrl.itemsList[10].title).toEqual(nextPageText);
            });

            it("last visible sequence should mirror behavior of first visible sequence when adjacent=2", () => {
                prepareController(2, 1000);
                ctrl.assemble();
                // "< 1 2 3 4 5 6 7 ... 100 >"
                ctrl.goToPage(74);
                // "< 1 ... 72 73 74 75 76 ... 100 >"
                expect(ctrl.itemsList.length).toBe(11);
                expect(ctrl.itemsList[0].title).toEqual(prevPageText);
                expect(ctrl.itemsList[1].value).toBe(1);
                expect(ctrl.itemsList[2].value).toEqual("...");
                expect(ctrl.itemsList[3].value).toBe(72);
                expect(ctrl.itemsList[4].value).toBe(73);
                expect(ctrl.itemsList[5].value).toBe(74);
                expect(ctrl.itemsList[6].value).toBe(75);
                expect(ctrl.itemsList[7].value).toBe(76);
                expect(ctrl.itemsList[8].value).toEqual("...");
                expect(ctrl.itemsList[9].value).toBe(100);
                expect(ctrl.itemsList[10].title).toEqual(nextPageText);

                ctrl.goToPage(95);
                // "< 1 ... 94 95 96 97 98 99 100 >"
                expect(ctrl.itemsList.length).toBe(11);
                expect(ctrl.itemsList[0].title).toEqual(prevPageText);
                expect(ctrl.itemsList[1].value).toBe(1);
                expect(ctrl.itemsList[2].value).toEqual("...");
                expect(ctrl.itemsList[3].value).toBe(93);
                expect(ctrl.itemsList[4].value).toBe(94);
                expect(ctrl.itemsList[5].value).toBe(95);
                expect(ctrl.itemsList[6].value).toBe(96);
                expect(ctrl.itemsList[7].value).toBe(97);
                expect(ctrl.itemsList[8].value).toBe("...");
                expect(ctrl.itemsList[9].value).toBe(100);
                expect(ctrl.itemsList[10].title).toEqual(nextPageText);

                ctrl.goToPage(96);
                // "< 1 ... 94 95 96 97 98 99 100 >"
                expect(ctrl.itemsList.length).toBe(11);
                expect(ctrl.itemsList[0].title).toEqual(prevPageText);
                expect(ctrl.itemsList[1].value).toBe(1);
                expect(ctrl.itemsList[2].value).toEqual("...");
                expect(ctrl.itemsList[3].value).toBe(94);
                expect(ctrl.itemsList[4].value).toBe(95);
                expect(ctrl.itemsList[5].value).toBe(96);
                expect(ctrl.itemsList[6].value).toBe(97);
                expect(ctrl.itemsList[7].value).toBe(98);
                expect(ctrl.itemsList[8].value).toBe(99);
                expect(ctrl.itemsList[9].value).toBe(100);
                expect(ctrl.itemsList[10].title).toEqual(nextPageText);

                ctrl.goToPage(97);
                // "< 1 ... 94 95 96 97 98 99 100 >"
                expect(ctrl.itemsList.length).toBe(11);
                expect(ctrl.itemsList[0].title).toEqual(prevPageText);
                expect(ctrl.itemsList[1].value).toBe(1);
                expect(ctrl.itemsList[2].value).toEqual("...");
                expect(ctrl.itemsList[3].value).toBe(94);
                expect(ctrl.itemsList[4].value).toBe(95);
                expect(ctrl.itemsList[5].value).toBe(96);
                expect(ctrl.itemsList[6].value).toBe(97);
                expect(ctrl.itemsList[7].value).toBe(98);
                expect(ctrl.itemsList[8].value).toBe(99);
                expect(ctrl.itemsList[9].value).toBe(100);
                expect(ctrl.itemsList[10].title).toEqual(nextPageText);

                ctrl.goToPage(98);
                // "< 1 ... 94 95 96 97 98 99 100 >"
                expect(ctrl.itemsList.length).toBe(11);
                expect(ctrl.itemsList[0].title).toEqual(prevPageText);
                expect(ctrl.itemsList[1].value).toBe(1);
                expect(ctrl.itemsList[2].value).toEqual("...");
                expect(ctrl.itemsList[3].value).toBe(94);
                expect(ctrl.itemsList[4].value).toBe(95);
                expect(ctrl.itemsList[5].value).toBe(96);
                expect(ctrl.itemsList[6].value).toBe(97);
                expect(ctrl.itemsList[7].value).toBe(98);
                expect(ctrl.itemsList[8].value).toBe(99);
                expect(ctrl.itemsList[9].value).toBe(100);
                expect(ctrl.itemsList[10].title).toEqual(nextPageText);

                ctrl.goToPage(99);
                // "< 1 ... 94 95 96 97 98 99 100 >"
                expect(ctrl.itemsList.length).toBe(11);
                expect(ctrl.itemsList[0].title).toEqual(prevPageText);
                expect(ctrl.itemsList[1].value).toBe(1);
                expect(ctrl.itemsList[2].value).toEqual("...");
                expect(ctrl.itemsList[3].value).toBe(94);
                expect(ctrl.itemsList[4].value).toBe(95);
                expect(ctrl.itemsList[5].value).toBe(96);
                expect(ctrl.itemsList[6].value).toBe(97);
                expect(ctrl.itemsList[7].value).toBe(98);
                expect(ctrl.itemsList[8].value).toBe(99);
                expect(ctrl.itemsList[9].value).toBe(100);
                expect(ctrl.itemsList[10].title).toEqual(nextPageText);

                ctrl.goToPage(100);
                // "< 1 ... 94 95 96 97 98 99 100 >"
                expect(ctrl.itemsList.length).toBe(11);
                expect(ctrl.itemsList[0].title).toEqual(prevPageText);
                expect(ctrl.itemsList[1].value).toBe(1);
                expect(ctrl.itemsList[2].value).toEqual("...");
                expect(ctrl.itemsList[3].value).toBe(94);
                expect(ctrl.itemsList[4].value).toBe(95);
                expect(ctrl.itemsList[5].value).toBe(96);
                expect(ctrl.itemsList[6].value).toBe(97);
                expect(ctrl.itemsList[7].value).toBe(98);
                expect(ctrl.itemsList[8].value).toBe(99);
                expect(ctrl.itemsList[9].value).toBe(100);
                expect(ctrl.itemsList[10].title).toEqual(nextPageText);
            });

            it("should assemble the page bar properly with adjacent=1 and page size = 5 UIF-2942", () => {
                prepareController(1, 50);
                ctrl.assemble();
                // "< 1 2 3 4 5 >"
                expect(ctrl.itemsList.length).toBe(7);
                expect(ctrl.itemsList[0].title).toEqual(prevPageText);
                expect(ctrl.itemsList[1].value).toBe(1);
                expect(ctrl.itemsList[2].value).toBe(2);
                expect(ctrl.itemsList[3].value).toBe(3);
                expect(ctrl.itemsList[4].value).toBe(4);
                expect(ctrl.itemsList[5].value).toBe(5);
                expect(ctrl.itemsList[6].title).toEqual(nextPageText);
            });
        });
    });
});
