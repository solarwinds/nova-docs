(function () {
    "use strict";

    Xui.module
        .controller("DemoPagerController", DemoPagerController, ["xuiToastService", "DemoConstellationService", "$timeout"])
        .service("DemoConstellationService", DemoConstellationService);

    function DemoPagerController(toastService, constellationService, $timeout) {
        var vm = this;

        vm.pageSize = 10;
        vm.currentPage = 1;
        vm.adjacent = 1;
        vm.constellationPages = [];
        vm.displayQuantity = 1000;
        vm.pagerIsVisible = true;

        vm.refreshPager = function() {
            // this is for demo purpose only.
            // we are reloading the directive just removing it from DOM using ng-if
            // reloading is needed for demo purposes only
            // since adjacent is a @ binding and should not be real-time changed)
            vm.pagerIsVisible = false;
            $timeout(function() {vm.pagerIsVisible = true;}, 0);
        };

        vm.prepConstellationPages = function() {
            vm.constellationPages = [];

            var chunks = _.chunk(constellationService.get(vm.displayQuantity), vm.pageSize);
            for(var i=0; i<chunks.length; ++i) {
                vm.constellationPages.push(chunks[i]);
            }
        };
        vm.prepConstellationPages();

        vm.total = function () {
            return vm.displayQuantity;
        };

        vm.onPageChanged = function (page, pageSize, total) {
            vm.currentPage = page;
            vm.pageSize = pageSize;
            vm.prepConstellationPages();
            toastService.info("current page: " + page + ", items per page: " + pageSize);
        };
    }

    function DemoConstellationService() {

        this.constellationsSet = [];
        this.constellations = [];

        for (var i = 1; i <= 1000; i++) {
            this.constellationsSet.push("constellation #" + i);
        }

        this.get = function(number) {
            this.constellations = this.constellationsSet.slice(0, number);
            return this.constellations;
        };

        this.count = function () {
            return this.constellations.length;
        };
    }
})();
