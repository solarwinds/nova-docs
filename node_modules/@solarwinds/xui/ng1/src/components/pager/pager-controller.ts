export const defaultPageSizeSet = [10, 25, 50, 100];

export interface IPagerController {
    pagerWidth:number;
    minPagerWidth:number;
    minDisplayingTextWidth:number;
    page:number;
    init():void;
    assemble():void;
    total():number;
    setDropdownOrientation(param: boolean): void;
}

export interface IPagerItem {
    title:string;
    value?:any;
    page?:number;
    iconName?:string;
    pageRows?:number[][];
    style?:string;
    action?:(event:any) => boolean;
}

export class PagerController implements IPagerController {
    public static $inject = ["$element", "$translate", "$log"];

    constructor(private $element:ng.IAugmentedJQuery, private $translate:angular.translate.ITranslateService,
                private $log:ng.ILogService) {
    }

    public itemsList:Array<IPagerItem> = [];
    public page:number;
    public pageSize:number;
    public pageSizeSet:any[] = [];
    public total:()=>number;
    public dots:string;
    public hideIfEmpty:boolean;
    public hide:boolean;
    public ulClass:string;
    public activeClass:string;
    public disabledClass:string;
    public adjacent:number;
    public maxElements:number;
    public scrollTop:boolean;
    public showPrevNext:boolean;
    public pagerAction:Function;
    public pagerWidth:number;
    public minPagerWidth:number;
    public minDisplayingTextWidth:number;
    public dotsPagesPerRow:number = 5;
    public itemsPerPageText:string;
    public ofText:string;

    public mainRangeStart:number;
    public mainRangeEnd:number;

    public setDropdownOrientation:(open: boolean) => void;

    public init = () => {
        this.initPageSizeSet();

        this.dots = this.dots || "...";
        this.page = this.page || 1;
        this.scrollTop = this.scrollTop || false;
        this.ulClass = this.ulClass || "pagination";
        this.activeClass = this.activeClass || "active";
        this.disabledClass = this.disabledClass || "disabled";
        this.hideIfEmpty = this.hideIfEmpty || false;

        if (!this.total) {
            this.total = () => 0;
        }

        const pageCount = this.getPageCount();
        if (this.page > pageCount) {
            this.page = pageCount;
        }

        if (this.page <= 0) {
            this.page = 1;
        }

        if (!this.adjacent) {
            this.adjacent = 1;
        }

        this.maxElements = this.adjacent*2 + 5; // we can not display all pager combinations using less than 5 items
    };

    public initPageSizeSet = (): void => {
        if (!this.pageSize || this.pageSize <= 0) {
            this.pageSize = defaultPageSizeSet[0];
        }

        let set = _.clone(defaultPageSizeSet);

        if (!_.includes(set, this.pageSize)) {
            set.push(this.pageSize);
            set.sort((a, b) => a - b);
        }

        this.pageSizeSet = set;
    };

    public assemble = () => {
        _.remove(this.itemsList, (item:any) => true);
        if (this.getPageCount() <= 0) {
            return;
        }

        const pageCount = this.getPageCount();

        this.prepareSeparators();

        this.addPrev();

        if (this.mainRangeStart !== 1) {
            // add starting separator and the first page
            this.add(1);
            this.addSeparator(2, this.mainRangeStart - 1);
        }

        this.addRange(this.mainRangeStart, this.mainRangeEnd);

        if (this.mainRangeEnd !== pageCount) {
            // add ending separator and the last page
            this.addSeparator(this.mainRangeEnd + 1, pageCount - 1);
            this.add(pageCount);
        }

        this.addNext();
    };

    public prepareSeparators = () => {
        // the only 2 variables that are needed to display everything are:
        //      mainRangeStart      mainRangeEnd
        //            |                   |
        //  < 1  ... 100  101  102  103  104 >
        const pageCount = this.getPageCount();
        const page = +this.page;
        const adjacent = +this.adjacent;

        // case when there are few items
        if (pageCount <= this.maxElements) {
            this.mainRangeStart = 1;
            this.mainRangeEnd = pageCount;
            return;
        }

        // set main range to
        this.mainRangeStart = (page - adjacent < 1) ? 1 : page - adjacent;
        this.mainRangeEnd = (page + adjacent > pageCount) ? pageCount : page + adjacent;

        // case where starting separator is not shown
        if ((this.mainRangeStart - 1) // end of possible starting separator
            - 2 // start of possible starting separator
            < 1) {
            this.mainRangeStart = 1;
        }

        // case where ending separator is not shown
        if ((pageCount - 1) // end of possible ending separator
            - (this.mainRangeEnd + 1) // start of possible ending separator
            < 1) {
            this.mainRangeEnd = pageCount;
        }

        // case where we have one of the first pages selected and the ending separator
        if (this.mainRangeEnd !== pageCount && page < this.maxElements - 2 - adjacent) {
            this.mainRangeStart = 1;
            this.mainRangeEnd = this.mainRangeStart + this.maxElements - 3;
        }

        // case where we have one of the last pages selected and the starting separator
        if (this.mainRangeStart !== 1 && page > pageCount - this.maxElements + 2 + adjacent) {
            this.mainRangeEnd = pageCount;
            this.mainRangeStart = this.mainRangeEnd - this.maxElements + 3;
        }
    };

    public addSeparator = (from:number, to:number) => {
        const tooltip = [
                    this.$translate.instant("xui_pager_pages"),
                    " ",
                    from.toString(),
                    " - ",
                    to.toString()
                ].join("");
                this.itemsList.push({
                    title: tooltip,
                    value: this.dots,
                    pageRows: _.chunk(_.range(from, to + 1),
                        this.dotsPagesPerRow)
                });
    };

    public goToPage = (page:number, scrollNeeded?:boolean) => {
        this.page = page;
        if (this.pagerAction) {
            this.pagerAction({
                page: this.page,
                pageSize: this.pageSize,
                total: this.total()
            });
        }

        if (this.scrollTop) {
            scrollTo(0, 0);
        }

        if (scrollNeeded) {
            this.$element[0].scrollIntoView(false);
        }

        this.assemble();
    };

    public setItemsPerPage = (newValue:any) => {
        if (newValue < 1) {
            this.$log.warn("pager-controller.setItemsPerPage - invalid newValue: " + newValue);
            return;
        }

        //fix of Chrome not scrolling up when items to display per page switched to lower number
        let scrollNeeded:boolean = newValue < this.pageSize;
        this.pageSize = newValue;
        this.goToPage(1, scrollNeeded);
    };

    public getPageCount = () => {
        if (this.total() <= 0) {
            return 1;
        }
        return Math.ceil(this.total() / this.pageSize);
    };

    public showPager = () => {
        const count:number = this.getPageCount();
        return isFinite(count) && (this.hideIfEmpty === false || count > 1);
    };

    public getFirstItemOnPage = (): number => {
        return this.pageSize*(this.page - 1) + 1;
    };

    public getLastItemOnPage = ():number => {
        return _.min([this.pageSize * this.page, this.total()]);
    };

    private addPrev = () => {
        const pageCount = this.getPageCount();
        if (!this.showPrevNext || pageCount < 1) {
            return;
        }

        const prevBtn = {
            iconName: "caret-left",
            title: this.$translate.instant("xui_pager_previous_page"),
            page: this.page - 1 <= 0 ? 1 : this.page - 1
        };
        const isDisabled = this.page - 1 <= 0;
        this.addItem(prevBtn, isDisabled);
    };

    private addNext = () => {
        const pageCount = this.getPageCount();
        if (!this.showPrevNext || pageCount < 1) {
            return;
        }

        const nextBtn = {
            iconName: "caret-right",
            title: this.$translate.instant("xui_pager_next_page"),
            page: this.page + 1 >= pageCount ? pageCount : this.page + 1
        };
        const isDisabled = this.page + 1 > pageCount;
        this.addItem(nextBtn, isDisabled);
    };

    private addItem = (item:any, isDisabled:boolean) => {
        this.itemsList.push({
            iconName: item.iconName,
            value: item.value,
            title: item.title,
            style: isDisabled ? this.disabledClass : "",
            action: (event:any) => {
                if (!isDisabled) {
                    this.goToPage(item.page);
                }
                return false;
            }
        });
    };

    private add = (page:number) => {
        const inst = this;
        this.itemsList.push({
            value: page,
            title: this.$translate.instant("xui_pager_page") + " " + page,
            style: this.page === page ? this.activeClass : "",
            action: function (event:any) {
                inst.goToPage(this.value);
                return false;
            }
        });
    };

    private addRange = (start:number, finish:number) => {
        let index = start;
        for (; index <= finish; index++) {
            this.add(index);
        }
    };
}
