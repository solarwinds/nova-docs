import {IPagerController} from "./pager-controller";

/**
 * @ngdoc directive
 * @name xui.directive:xuiPager
 * @restrict E
 *
 * @description
 * XUI Pager component.
 *
 * @parameters
 * @param {number=} page Current page number.
 * @param {number} page-size Count of items displayed on a page.
 * If provided value is different than default page size set: [10, 25, 50 ,100], it will extend possible
 * page sizes and keep in the page-size selection popover.
 * @param {function} total Total number of items.
 * @param {number} adjacent Number of page links to display adjacent to the current page link (on both sides).
 * This determines the number of maximum displayed links as adjacent*2 + 5.
 * @param {string=} dots The ellipses/dots string to be displayed for access to non-visible page links.
 * @param {boolean=} scroll-top Whether to shift focus to the top of the page.
 * @param {boolean=} hide-if-empty Whether to hide the pager when pageCount <= 1
 * a single page.
 * @param {string=} ul-class The CSS class for the page numbers.
 * @param {string=} active-class The CSS class for the active page.
 * @param {string=} disabled-class The CSS class for the disable page number.
 * @param {boolean=} show-prev-next Whether to show previous and next buttons.
 * @param {function=} pager-action Callback invoked when on page-changed
 * (page:number, pageSize:number, total:number) => Function to handle page click.
 *
 * @example
 * <example module="xui">
 *       <file name="config.js">
 *            Xui.translations = {
 *                  xui_pager_displaying: "Displaying",
 *                  xui_pager_items_per_page: "Items per Page:",
 *                  xui_pager_next_page: "Next Page",
 *                  xui_pager_of: "of",
 *                  xui_pager_page: "Page",
 *                  xui_pager_pages: "Pages",
 *                  xui_pager_previous_page: "Previous Page"
 *            };
 *       </file>
 *     <file src="src/components/pager/docs/pager-examples.html" name="index.html"></file>
 *     <file src="src/components/pager/docs/pager-examples.js" name="app.js"></file>
 * </example>
 */

class Pager implements ng.IDirective {
    public static $inject = ["swUtil", "xuiEdgeDetectionService"];

    constructor(private swUtil: any, private xuiEdgeDetectionService: xui.IEdgeDetectionService) {
    }

    public restrict = "EA";
    public templateUrl = "xui/components/pager/pager-directive.html";
    public replace = true;
    public transclude = false;
    public scope = {};
    public bindToController = {
        page: "=?",
        pageSize: "=",
        total: "&",
        dots: "@?",
        hideIfEmpty: "@?",
        ulClass: "@?",
        activeClass: "@?",
        disabledClass: "@?",
        adjacent: "@?",
        scrollTop: "@?",
        showPrevNext: "@?",
        pagerAction: "&?"
    };
    public controller = "xuiPagerController";
    public controllerAs = "vm";
    public link = (scope: ng.IScope,
                   element: ng.IAugmentedJQuery,
                   attrs: ng.IAttributes,
                   ctrl: IPagerController) => {
        this.swUtil.watchBoolean(attrs, "hideIfEmpty", ctrl);
        this.swUtil.watchBoolean(attrs, "scrollTop", ctrl);
        this.swUtil.watchBoolean(attrs, "showPrevNext", ctrl);

        const $pagerItems = element.find(".xui-pager__items");
        const $pagerInfo = element.find(".xui-pager__info");
        const $displayingText = $pagerInfo.find(".xui-pager__items-displaying").children()[0];
        ctrl.pagerWidth = element.outerWidth(true);
        ctrl.minDisplayingTextWidth = $pagerItems.outerWidth(true) + $pagerInfo.outerWidth(true);
        ctrl.minPagerWidth = ctrl.minDisplayingTextWidth - $displayingText.offsetWidth;

        ctrl.setDropdownOrientation = (isOpen: boolean) => {
            if (isOpen) {
                const uibDropdown = element.find("*[uib-dropdown]");
                let shouldShowUp = uibDropdown.is((index:Number, item:ng.IAugmentedJQuery) => {
                    let dropdown = angular.element(item);
                    let canBe = this.xuiEdgeDetectionService.canBe(dropdown, dropdown.find("*[uib-dropdown-menu]"));
                    return canBe.placed.top && !canBe.placed.bottom;
                });
                this.switchOrientation(shouldShowUp, uibDropdown);
            }
        };

        element.resize(() => {
            ctrl.pagerWidth = element.outerWidth(true);
            if (ctrl.pagerWidth <= ctrl.minPagerWidth) {
                element.css({"min-width": ctrl.minPagerWidth.toString()});
            } else {
                element.css({"min-width": "100%"});
            }
            scope.$applyAsync();
        });

        ctrl.init();
        scope.$watchCollection(()=>[ctrl.total(), ctrl.page], ()=> {
            ctrl.assemble();
        });
    };
    private switchOrientation = (shouldShowUp:boolean, uibDropdown: ng.IAugmentedJQuery) => {
        uibDropdown.removeClass("dropdown").removeClass("dropup");

        uibDropdown.addClass( shouldShowUp ? "dropup" : "dropdown");

        uibDropdown.find(".dropdown-menu").css("visibility", "visible");
    };
}

export default Pager;
