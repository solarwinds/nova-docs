import Inject from "../../decorators/di";
import {Constants} from "../../common/constants";

class TimepickerController {
    private _model: Date;
    public get model(): Date {
        return this._model;
    }
    public set model(value: Date) {
        // do this here because the model is bound and set before the ctor is called
        if (angular.isUndefined(this.preserveInsignificant)) {
            this.preserveInsignificant = false;
        }

        if (value instanceof Date && (false === this.preserveInsignificant)) {
            value.setFullYear(0,0,1);
            value.setSeconds(0,0);
        }
        this._model = value;
    }

    public timeFormat:string;
    public times:Date[] = [];
    public timeStep:number;
    public ngModel:ng.INgModelController;
    public dropdownNgModel:ng.INgModelController;
    public itemToSelect:any;
    public preserveInsignificant:boolean;

    constructor(@Inject("$scope") private $scope:ng.IScope,
                @Inject("$locale") private $locale:ng.ILocaleService,
                @Inject("xuiConstants") private xuiConstants:Constants) {
        if (angular.isUndefined(this.timeFormat)) {
            this.timeFormat = $locale.DATETIME_FORMATS.shortTime || "h:mm A";
        }
        if (angular.isUndefined(this.timeStep)) {
            this.timeStep = 30;
        }
        $scope.$watch(()=> this.model, ()=> {
            this.itemToSelect = this.getItemToSelect(this.model, this.timeStep, this.times);
        });
        this.times = this.generateTimeItems(this.timeStep);
    }

    //noinspection JSUnusedGlobalSymbols
    /**
     * This is called on blur of the input field and sets fully formatted time that could be only half complete before.
     * E.g. after input "1 PM" -> date object -> "01:00 PM"
     */
    public confirmInputValue() {
        if (!this.ngModel.$isEmpty(this.model) && this.ngModel.$valid && this.dropdownNgModel) {
            const viewValue = this.formatTime(this.model);
            this.dropdownNgModel.$viewValue = viewValue;
        }
    }

    public onKeyPress($event:JQueryEventObject) {
        if ($event.keyCode === this.xuiConstants.KEY_CODE.ENTER) {
            this.confirmInputValue();
        }
    }

    /**
     * Generates time items for the dropdown
     */
    public generateTimeItems(timeStep:number):Date[] {
        let time = (this.preserveInsignificant ? moment().hour(0).startOf("hour") : moment().year(0).startOf("year"));

        let initialDay = time.dayOfYear();
        let times:Date[] = [];
        while (time.dayOfYear() === initialDay) {
            times.push(time.clone().toDate());
            time.add(timeStep, "minute");
        }
        return times;
    }

    /**
     * This method get the index position of the nearest time
     */
    public getItemToSelect(model:Date, timeStep:number, times:Date[]):Date {
        const time = moment(model);
        let minutes = time.get("hours") * 60 + time.get("minutes");
        let index = Math.round(minutes / timeStep);
        return times[index];
    }

    private formatTime(item:Date):string {
        return moment(item).format(this.timeFormat);
    }

}

export default TimepickerController;
