/// <reference path="../../ref.d.ts" />

import TimepickerController from "./timepicker-controller";
import * as _ from "lodash";

describe("components >", ()=> {
    describe("Timepicker >", ()=> {
        describe("controller >", ()=> {
            let $scope:ng.IRootScopeService;
            let $controller:ng.IControllerService;
            let ctrl:TimepickerController;

            beforeEach(angular.mock.module("xui"));
            beforeEach(inject(($injector:any) => {
                $scope = $injector.get("$rootScope");
                $controller = $injector.get("$controller");
                ctrl = <TimepickerController>$controller("xuiTimePickerController", {$scope: $scope});
            }));

            describe("When selecting the closest time ", () => {

                describe("When timestep is 30 ", () => {
                    let timestep = 30;

                    it("should select 13:30 when time is 13:44", () => {
                        let time = new Date();
                        time.setHours(13, 44, 0);
                        let timesArray = ctrl.generateTimeItems(timestep);

                        let res = ctrl.getItemToSelect(time, timestep, timesArray);

                        expect(res.getHours()).toBe(13);
                        expect(res.getMinutes()).toBe(30);
                    });

                    it("should select 14:00 when time is 13:45", () => {
                        let time = new Date();
                        time.setHours(13, 45, 0);
                        let timesArray = ctrl.generateTimeItems(timestep);

                        let res = ctrl.getItemToSelect(time, timestep, timesArray);

                        expect(res.getHours()).toBe(14);
                        expect(res.getMinutes()).toBe(0);
                    });

                    it("should select 14:00 when time is 14:14", () => {
                        let time = new Date();
                        time.setHours(14, 14, 0);
                        let timesArray = ctrl.generateTimeItems(timestep);

                        let res = ctrl.getItemToSelect(time, timestep, timesArray);

                        expect(res.getHours()).toBe(14);
                        expect(res.getMinutes()).toBe(0);
                    });

                    it("should select 14:30 when time is 14:15 ", () => {
                        let time = new Date();
                        time.setHours(14, 15, 0);
                        let timesArray = ctrl.generateTimeItems(timestep);

                        let res = ctrl.getItemToSelect(time, timestep, timesArray);

                        expect(res.getHours()).toBe(14);
                        expect(res.getMinutes()).toBe(30);
                    });
                });

                describe("When timestep is 60 ", () => {
                    let timestep = 60;

                    it("should select 13:00 when time is 13:29", () => {
                        let time = new Date();
                        time.setHours(13, 29, 0);
                        let timesArray = ctrl.generateTimeItems(timestep);

                        let res = ctrl.getItemToSelect(time, timestep, timesArray);

                        expect(res.getHours()).toBe(13);
                        expect(res.getMinutes()).toBe(0);
                    });

                    it("should select 14:00 when time is 13:30", () => {
                        let time = new Date();
                        time.setHours(13, 30, 0);
                        let timesArray = ctrl.generateTimeItems(timestep);

                        let res = ctrl.getItemToSelect(time, timestep, timesArray);

                        expect(res.getHours()).toBe(14);
                        expect(res.getMinutes()).toBe(0);
                    });

                    it("should select 15:00 when time is 14:30", () => {
                        let time = new Date();
                        time.setHours(14, 30, 0);
                        let timesArray = ctrl.generateTimeItems(timestep);

                        let res = ctrl.getItemToSelect(time, timestep, timesArray);

                        expect(res.getHours()).toBe(15);
                        expect(res.getMinutes()).toBe(0);
                    });
                });
            });

            describe("controller will", () => {
                it("ignore date and second values", () => {
                    let testValue = new Date(2005,5,8,3,2,1,10);
                    ctrl.model = _.clone(testValue);
                    expect(ctrl.model.getFullYear()).toEqual(0);
                    expect(ctrl.model.getMonth()).toEqual(0);
                    expect(ctrl.model.getDate()).toEqual(1);
                    expect(ctrl.model.getHours()).toEqual(testValue.getHours());
                    expect(ctrl.model.getMinutes()).toEqual(testValue.getMinutes());
                    expect(ctrl.model.getSeconds()).toEqual(0);
                    expect(ctrl.model.getMilliseconds()).toEqual(0);
                });

                it("not ignore date and second values if property preserveInsignificant is set", () => {
                    let testValue = new Date(2005,5,8,3,2,1,10);
                    ctrl.preserveInsignificant = true;
                    ctrl.model = _.clone(testValue);
                    expect(ctrl.model.getFullYear()).toEqual(testValue.getFullYear());
                    expect(ctrl.model.getMonth()).toEqual(testValue.getMonth());
                    expect(ctrl.model.getDate()).toEqual(testValue.getDate());
                    expect(ctrl.model.getHours()).toEqual(testValue.getHours());
                    expect(ctrl.model.getMinutes()).toEqual(testValue.getMinutes());
                    expect(ctrl.model.getSeconds()).toEqual(testValue.getSeconds());
                    expect(ctrl.model.getMilliseconds()).toEqual(testValue.getMilliseconds()) ;
                });
            });
        });
    });
});
