import Moment = moment.Moment;
import TimepickerController from "./timepicker-controller";
import IAngularEvent = angular.IAngularEvent;
import InputProxyService from "../../services/inputProxy-service";
import Inject from "../../decorators/di";

/**
 * @ngdoc directive
 * @name xui.directive:xuiTimePicker
 * @restrict E
 *
 * @description
 * XUI Timepicker component.<br />
 * Known issues: Provide a meaningful default value when using this component, otherwise when the empty time picker
 * is focused and an option from the dropdown is selected, there is a flash of error state between the moment when
 * the field loses focus and the dropdown is closed by selecting an item.
 *
 * @parameters
 * @param {object} ng-model Model for the component.
 * @param {string=} [caption] Value used as a label for the time picker.
 * @param {string=} [name] Name for form binding.
 * @param {string=} [time-format] Time format string.
 * @param {boolean=} [is-required] Whether this component should be validated as required.
 * @param {boolean=} [is-disabled] Whether this component is enabled or not.
 * @param {number=} [time-step=30] Minute step in the dropdown options.
 * @param {boolean=} [preserve-insignificant] Whether the date and seconds data are preserved. Note: the
 * seconds will reset to zero once a selection is made.
 *
 * @example
 *    <example module="xui">
 *        <file src="src/components/timepicker/docs/timepicker-examples.js" name="script.js"></file>
 *        <file src="src/components/timepicker/docs/timepicker-examples.html" name="index.html"></file>
 *    </example>
 **/
class TimePicker implements ng.IDirective {

    public restrict = "E";
    public templateUrl = "xui/components/timepicker/timepicker-directive.html";
    public replace = true;
    public scope = {};
    public transclude = true;
    public require = ["xuiTimePicker", "ngModel"];
    public bindToController = {
        preserveInsignificant: "<?",
        model: "=ngModel",
        caption: "@?",
        name: "@?",
        timeFormat: "@?",
        isRequired: "<?",
        timeStep: "<?",
        isDisabled: "<?"
    };
    public controller = "xuiTimePickerController";
    public controllerAs = "vm";

    constructor(@Inject("xuiInputProxyService") private xuiInputProxyService: InputProxyService) {
    }

    public compile = (element: ng.IAugmentedJQuery, attrs: ng.IAttributes) => {
        const dropdown = element.find("xui-dropdown");
        const dropdownHandlers = this.xuiInputProxyService.proxyAttributesCompile(attrs, dropdown);

        return {
            post: (scope: ng.IScope, iElement: ng.IAugmentedJQuery,
                   iAttrs: ng.IAttributes, controllers: any) => {

                const timepickerCtrl: TimepickerController = controllers[0];
                timepickerCtrl.ngModel = controllers[1];

                scope.$on(InputProxyService.NG_MODEL_INITIALIZED_EVENT,
                    (event: IAngularEvent, payload: ng.INgModelController) => {
                        event.stopPropagation();

                        timepickerCtrl.dropdownNgModel = payload;
                        // this.inputProxyService.proxyModel(payload, timepickerCtrl.ngModel, $scope,
                        //     "dropdown", "timepicker");
                    });

                this.xuiInputProxyService.proxyAttributesLink(dropdownHandlers, timepickerCtrl, scope);
            }
        };
    };
}

export default TimePicker;
