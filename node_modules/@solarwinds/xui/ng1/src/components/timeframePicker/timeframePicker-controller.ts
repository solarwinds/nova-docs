/// <reference path="../../ref.d.ts" />

import Inject from "../../decorators/di";
import {Constants} from "../../common/constants";

class TimeframePickerController {

    public model:xui.ITimeframe;
    public modelPopover:xui.ITimeframe;
    public presets:any;
    public placeholder:string;
    public datetimeTitleFormat:string;
    public customTitle: string;
    public isPopoverDisplayed: boolean;
    public onChange: (params: { model: xui.ITimeframe, type?: string }) => void;
    public showConfirmationPanel:boolean;
    public minDate:Date;
    public maxDate:Date;

    constructor(@Inject("$scope") private $scope:ng.IScope,
                @Inject("$locale") private $locale:ng.ILocaleService,
                @Inject("xuiConstants") private xuiConstants:Constants,
                @Inject("xuiTimeframeService") private xuiTimeframeService:xui.ITimeframeService,
                @Inject("$translate") private $translate:angular.translate.ITranslateService) {

        if (angular.isUndefined(this.placeholder)) {
            this.placeholder = $translate.instant("xui_timeframePicker_default_title");
        }
        if (angular.isUndefined(this.datetimeTitleFormat)) {
            this.datetimeTitleFormat = "MMM D, YYYY h:mm A";
        }

        // Load default quick picks if needed
        if (angular.isUndefined(this.presets)) {
            this.presets = this.xuiTimeframeService.getDefaultPresets();
        } else {
            this.xuiTimeframeService.extendCurrentPresets(this.presets);
        }

        // Load time frame preset if needed
        if (angular.isUndefined(this.model)) {
            const defaultKey:string = Object.keys(this.presets)[0];
            this.loadTimeframeIntoModel(defaultKey);
        } else {
            if (this.model.selectedPresetId) {
                this.loadTimeframeIntoModel(this.model.selectedPresetId);
            } else {
                if (!this.model.startDatetime || !this.model.endDatetime) {
                    const defaultKey:string = Object.keys(this.presets)[0];
                    this.loadTimeframeIntoModel(defaultKey);
                }
            }
        }

        // Set title
        this.model.title = this.getTitle(true);

        // Raise first onChange with initialized model
        if (angular.isFunction(this.onChange)) {
            this.onChange({ model: this.model, type: "initialization" });
        }
    }

    public getTitle(refresh?: boolean) {
        if (!angular.isDefined(refresh) && angular.isDefined(this.model.title)) {
            return this.model.title;
        } else if (this.model && this.model.selectedPresetId && this.presets[this.model.selectedPresetId]) {
            // Case with known preset
            return this.presets[this.model.selectedPresetId].name;
        } else if (angular.isDefined(this.customTitle)) {
            // Case with custom title
            return this.customTitle;
        } else if (this.model && this.model.startDatetime && this.model.endDatetime) {
            // Case with custom formatter for range
            return moment(this.model.startDatetime).format(this.datetimeTitleFormat) + " - " +
                moment(this.model.endDatetime).format(this.datetimeTitleFormat);
        }

        return this.placeholder; // this shouldn't happen as we set default 'first' preset in the constructor
    }

    public onChangeInternal() {
        if (!this.modelPopover.startDatetime || !this.modelPopover.endDatetime) {
            // empty value will be restored so it will skip this condition in the next call
            return;
        }

        // handle confirmation panel visibility
        if (this.modelPopover.selectedPresetId) {
            this.showConfirmationPanel = false;
        } else if (this.xuiTimeframeService.isDifferent(this.model, this.modelPopover)) {
            this.showConfirmationPanel = true;
        }
    }

    public onPresetSelected() {
        this.applyPopoverChanges();
    }

    public showPopover() {
        if (this.model.selectedPresetId) {
            // fill popover based on selected preset
            const timeFrame = this.xuiTimeframeService.getTimeframeByPresetId(this.model.selectedPresetId);

            this.modelPopover = this.modelPopover || <xui.ITimeframe>{};
            this.modelPopover.selectedPresetId = timeFrame.selectedPresetId;
            this.modelPopover.startDatetime = timeFrame.startDatetime;
            this.modelPopover.endDatetime = timeFrame.endDatetime;

        } else {
            this.modelPopover = angular.copy(this.model);
        }

        this.showConfirmationPanel = false;
    }

    public hidePopover() {
        this.showConfirmationPanel = false;
    }

    public confirmPopover() {
        this.applyPopoverChanges();
    }

    public cancelPopover() {
        this.isPopoverDisplayed = false;
    }

    public isConfirmationPanelDisplayed() {
        return this.showConfirmationPanel && !this.modelPopover.selectedPresetId;
    }

    public getTemplateUrl = ():xui.ITemplateRef => {
        return {url:"xui/components/timeframePicker/timeframePicker.html"};
    };

    private applyPopoverChanges() {
        this.model = angular.copy(this.modelPopover);
        this.model.title = this.getTitle(true);
        this.isPopoverDisplayed = false;

        if (angular.isFunction(this.onChange)) {
            this.onChange({ model: this.model });
        }
    }

    private loadTimeframeIntoModel(key:string) {
        const timeFrame = this.xuiTimeframeService.getTimeframeByPresetId(key);

        this.setModel(timeFrame);
    };

    private setModel(timeFrame:xui.ITimeframe) {
        this.model = this.model || <xui.ITimeframe>{};
        this.model.startDatetime = timeFrame.startDatetime;
        this.model.endDatetime = timeFrame.endDatetime;
        this.model.selectedPresetId = timeFrame.selectedPresetId;
    };
}

export default TimeframePickerController;
