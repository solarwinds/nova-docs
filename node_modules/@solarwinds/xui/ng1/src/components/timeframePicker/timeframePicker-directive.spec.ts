import TimeframePickerController from "./timeframePicker-controller";
import SpecHelper from "../../specHelper";
import {ITestScope} from "../../specHelper";

describe("components >", ()=> {
    describe("timeframePicker >", ()=> {

        function formatAMPM(date:Date) {
            let hours = date.getHours();
            let minutes = date.getMinutes();
            let ampm = hours >= 12 ? "PM" : "AM";
            hours = hours % 12;
            hours = hours ? hours : 12; // the hour "0" should be "12"
            let minutesString = minutes < 10 ? "0" + minutes : minutes.toString();
            let strTime = hours + ":" + minutesString + " " + ampm;
            return strTime;
        }

        let $controller:ng.IControllerService,
            $compile:ng.ICompileService,
            $scope:ITestScope,
            element:any;

        const html = `<xui-timeframe-picker ng-model="model" presets="presets"></xui-timeframe-picker>`;

        beforeEach(angular.mock.module("xui"));
        beforeEach(inject(($injector:any)=> {
            $controller = $injector.get("$controller");
            $scope = $injector.get("$rootScope");
            $compile = $injector.get("$compile");
        }));

        describe("when it is compiled", () => {
            it("it should have replaced directive element", () => {
                // act
                element = SpecHelper.getCompiledElement($compile, $scope, html);

                // assert
                const directiveElem = element.find("xui-timeframe-picker");
                expect(directiveElem.length).toEqual(0);
            });
        });

        describe("when some preset is selected", ()=> {
            it("it displays name of the preset as link", ()=> {
                // arrange
                $scope["presets"] = {
                    "lastHour": {
                        name: "Last hour",
                        startDatetimePattern: {hours: -1},
                        endDatetimePattern: {}
                    },
                    "last12Hours": {
                        name: "Last 12 hours",
                        startDatetimePattern: {hours: -12},
                        endDatetimePattern: {}
                    }
                };
                $scope["model"] = {
                    selectedPresetId: "last12Hours"
                };

                // act
                element = SpecHelper.getCompiledElement($compile, $scope, html);

                // assert
                const linkElem:any = element.find(".xui-timeframe-picker__link")[0];
                expect(linkElem.innerText.trim()).toEqual("Last 12 hours");
            });
        });

        describe("when no preset is selected and specific date is not set", ()=> {
            it("it displays first preset as link", ()=> {
                // arrange
                $scope["presets"] = {
                    "lastHour": {
                        name: "Last hour",
                        startDatetimePattern: {hours: -1},
                        endDatetimePattern: {}
                    },
                    "last12Hours": {
                        name: "Last 12 hours",
                        startDatetimePattern: {hours: -12},
                        endDatetimePattern: {}
                    }
                };

                // act
                element = SpecHelper.getCompiledElement($compile, $scope, html);

                // assert
                const linkElem:any = element.find(".xui-timeframe-picker__link")[0];
                expect(linkElem.innerText.trim()).toEqual("Last hour");
            });
        });

        describe("when no preset is selected and specific date is set", ()=> {
            it("it displays time frame string as link", ()=> {
                // arrange
                const monthNames = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"];

                $scope["presets"] = {
                    "lastHour": {
                        name: "Last hour",
                        startDatetimePattern: {hours: -1},
                        endDatetimePattern: {}
                    },
                    "last12Hours": {
                        name: "Last 12 hours",
                        startDatetimePattern: {hours: -12},
                        endDatetimePattern: {}
                    }
                };
                const startDatetime = new Date("2012-08-08T13:00:00.000Z");
                const endDatetime = new Date("2015-07-07T13:00:00.000Z");
                $scope["model"] = {
                    startDatetime: startDatetime.toISOString(),
                    endDatetime: endDatetime.toISOString()
                };

                // act
                element = SpecHelper.getCompiledElement($compile, $scope, html);

                // assert
                const linkElem:any = element.find(".xui-timeframe-picker__link")[0];
                const expectedLinkText = monthNames[startDatetime.getMonth()] + " " + startDatetime.getDate() + ", " +
                    startDatetime.getFullYear() + " " + formatAMPM(startDatetime) +
                    " - " + monthNames[endDatetime.getMonth()] + " " + endDatetime.getDate() + ", " +
                    endDatetime.getFullYear() + " " + formatAMPM(endDatetime);
                expect(linkElem.innerText.trim()).toEqual(expectedLinkText);
            });
        });

        describe("when no preset is selected and specific date is set", ()=> {
            it("it displays time frame string in defined format as link", ()=> {
                // arrange
                const html2 = `<xui-timeframe-picker ng-model="model" presets="presets"
                                datetime-title-format="{{datetimeTitleFormat}}"></xui-timeframe-picker>`;
                $scope["presets"] = {
                    "lastHour": {
                        name: "Last hour",
                        startDatetimePattern: {hours: -1},
                        endDatetimePattern: {}
                    },
                    "last12Hours": {
                        name: "Last 12 hours",
                        startDatetimePattern: {hours: -12},
                        endDatetimePattern: {}
                    }
                };
                const startDatetime = "2012-08-08T13:00:00.000Z";
                const endDatetimne = "2015-07-07T13:00:00.000Z";
                $scope["model"] = {
                    startDatetime: new Date(startDatetime),
                    endDatetime: new Date(endDatetimne)
                };
                $scope["datetimeTitleFormat"] = "MMM, YYYY";

                // act
                element = SpecHelper.getCompiledElement($compile, $scope, html2);

                // assert
                const linkElem:any = element.find(".xui-timeframe-picker__link")[0];
                expect(linkElem.innerText.trim()).toEqual("Aug, 2012 - Jul, 2015");
            });
        });
    });
});
