/// <reference path="../../ref.d.ts" />

import ITimeframePickerInlineController from "./timeframePickerInline-controller";
import ITimeframe = xui.ITimeframe;

describe("components >", () => {
    describe("timeframePickerInlineController >", () => {
        let $ctrlService:ng.IControllerService,
            ctrl:ITimeframePickerInlineController;

        beforeEach(angular.mock.module("xui"));

        beforeEach(inject(($injector:any) => {
            $ctrlService = $injector.get("$controller");
            ctrl = <ITimeframePickerInlineController>$ctrlService("xuiTimeframePickerInlineController", {
                $scope: $injector.get("$rootScope")
            }, {
                presets: {
                    "lastHour": {
                        name: "Last hour",
                        startDatetimePattern: {hours: -1},
                        endDatetimePattern: {}
                    },
                    "last12Hours": {
                        name: "Last 12 hours",
                        startDatetimePattern: {hours: -12},
                        endDatetimePattern: {}
                    }
                }
            });
        }));

        describe("when selectPreset() is executed", () => {
            it("it set model based on selected preset", () => {
                // act
                ctrl.selectPreset("last12Hours", <xui.ITimeframePreset> {
                    name: "Last 12 hours",
                    startDatetimePattern: {hours: -12},
                    endDatetimePattern: {}
                });

                // assert
                expect(ctrl.model.selectedPresetId).toEqual("last12Hours");
                expect(ctrl.model.startDatetime).toBeDefined();
                expect(ctrl.model.endDatetime).toBeDefined();
                expect(moment(ctrl.model.startDatetime)
                    .isSame(moment(ctrl.model.endDatetime).add({hours: -12}), "second")).toBe(true);
            });
        });

        describe("when onChangeInternal() is executed", () => {
            it("it should clear 'selectedPresetId' if any preset was used", () => {
                // arrange
                ctrl.model = <ITimeframe>{
                    startDatetime: new Date("2012-08-08T13:00:00.000Z"),
                    endDatetime: new Date("2015-07-07T13:00:00.000Z"),
                    selectedPresetId: "lastHour"
                };

                // act
                ctrl.onChangeInternal();

                // assert
                expect(ctrl.model.selectedPresetId).toBeNull();
            });
        });

        describe("when start-date set is changed", ()=> {
            it("to later than end-date it updates end-date keeping the previous distance", ()=> {
                let baseDate = moment("2015-08-08T00:00:00.000Z");
                ctrl.model = <ITimeframe>{
                    startDatetime: baseDate.clone().toDate(),
                    endDatetime: baseDate.clone().add(25, "hours").toDate()
                };
                ctrl.onChangeInternal();
                expect(ctrl.distanceToEndDate / 3600000).toEqual(25); //each hour has 3600000 ms

                // change the startDate to be startDate + 48 hours
                ctrl.model.startDatetime = baseDate.clone().add(48, "hours").toDate();
                ctrl.onChangeInternal();

                expect(ctrl.distanceToEndDate / 3600000).toEqual(25); //each hour has 3600000 ms
                expect(ctrl.model.endDatetime).toEqual(baseDate.add(48 + 25, "hours").toDate());
            });

            it("to exactly the end-date it updates end-date keeping the previous distance", ()=> {
                let baseDate = moment("2015-08-08T13:00:00.000Z");
                ctrl.model = <ITimeframe>{
                    startDatetime: baseDate.clone().toDate(),
                    endDatetime: baseDate.clone().add(25, "hours").toDate()
                };
                ctrl.onChangeInternal();
                expect(ctrl.distanceToEndDate / 3600000).toEqual(25); //each hour has 3600000 ms

                // change the startDate to be the EndDate (startDate + 25 hours)
                ctrl.model.startDatetime = ctrl.model.endDatetime;
                ctrl.onChangeInternal();

                expect(ctrl.distanceToEndDate / 3600000).toEqual(25); //each hour has 3600000 ms
                expect(ctrl.model.endDatetime).toEqual(baseDate.add(25 + 25, "hours").toDate());
            });

            it("to before the end-date it updates the distance between both dates", ()=> {
                let baseDate = moment("2015-08-08T13:00:00.000Z");
                ctrl.model = <ITimeframe>{
                    startDatetime: baseDate.clone().toDate(),
                    endDatetime: baseDate.clone().add(25, "hours").toDate()
                };
                ctrl.onChangeInternal();
                expect(ctrl.distanceToEndDate / 3600000).toEqual(25); //each hour has 3600000 ms

                // change the startDate to 48 hours before itself
                ctrl.model.startDatetime = baseDate.clone().add(-48, "hours").toDate();
                ctrl.onChangeInternal();

                expect(ctrl.distanceToEndDate / 3600000).toEqual(48+25); //each hour has 3600000 ms
                expect(ctrl.model.endDatetime).toEqual(baseDate.clone().add(25, "hours").toDate());
            });
        });
    });
});
