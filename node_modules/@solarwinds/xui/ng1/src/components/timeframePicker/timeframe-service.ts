import Inject from "../../decorators/di";

class TimeframeService implements xui.ITimeframeService {

    private defaultPresets:{[key:string]:xui.ITimeframePreset} = {
        "lastHour": {
            name: this.$translate.instant("xui_timeframePicker_last_hour"),
            startDatetimePattern: {hours: -1},
            endDatetimePattern: {}
        },
        "last12Hours": {
            name: this.$translate.instant("xui_timeframePicker_last_12_hours"),
            startDatetimePattern: {hours: -12},
            endDatetimePattern: {}
        },
        "last24Hours": {
            name: this.$translate.instant("xui_timeframePicker_last_24_hours"),
            startDatetimePattern: {hours: -24},
            endDatetimePattern: {}
        },
        "last5Days": {
            name: this.$translate.instant("xui_timeframePicker_last_5_days"),
            startDatetimePattern: {days: -5},
            endDatetimePattern: {}
        },
        "last7Days": {
            name: this.$translate.instant("xui_timeframePicker_last_7_days"),
            startDatetimePattern: {days: -7},
            endDatetimePattern: {}
        },
        "last30Days": {
            name: this.$translate.instant("xui_timeframePicker_last_30_days"),
            startDatetimePattern: {days: -30},
            endDatetimePattern: {}
        }
    };

    private currentPresets:{[key:string]:xui.ITimeframePreset} = angular.extend({}, this.defaultPresets);

    constructor(@Inject("$translate") private $translate:angular.translate.ITranslateService) {
    }

    public getTimeframe = (startDatetimePattern:any,
                           endDatetimePattern:any, baseDatetime?:string):xui.ITimeframe => {
        // check input parameters
        if (angular.isUndefined(startDatetimePattern)) {
            throw new Error("Parameter 'startDatetimePattern' is undefined");
        }

        if (angular.isUndefined(endDatetimePattern)) {
            throw new Error("Parameter 'endDateTimePattern' is undefined");
        }

        const startDatetime = moment(baseDatetime).add(startDatetimePattern).toDate();
        const endDatetime = moment(baseDatetime).add(endDatetimePattern).toDate();

        return {
            startDatetime: startDatetime,
            endDatetime: endDatetime,
            selectedPresetId: null
        };
    };

    public getTimeframeByPresetId = (id:string, baseDatetime?:string):xui.ITimeframe => {
        // check input parameters
        if (angular.isUndefined(id)) {
            throw new Error("Parameter 'id' is undefined");
        }

        const startDatetime = moment(baseDatetime).add(this.currentPresets[id].startDatetimePattern).toDate();
        const endDatetime = moment(baseDatetime).add(this.currentPresets[id].endDatetimePattern).toDate();

        return {
            startDatetime: startDatetime,
            endDatetime: endDatetime,
            selectedPresetId: id
        };
    };

    public getDefaultPresets = ():any => {
        return this.defaultPresets;
    };

    public extendCurrentPresets  = (presets:{[key:string]:xui.ITimeframePreset}): void => {
        angular.extend(this.currentPresets, presets);
    };

    public isDifferent(tf1:xui.ITimeframe, tf2:xui.ITimeframe, units:string = "minutes"):boolean {
        return !tf1 || !tf2 ||
            Math.abs(moment(tf1.startDatetime).diff(
                moment(tf2.startDatetime), units)) > 0 ||
            Math.abs(moment(tf1.endDatetime).diff(
                moment(tf2.endDatetime), units)) > 0;
    }

}

export default TimeframeService;
