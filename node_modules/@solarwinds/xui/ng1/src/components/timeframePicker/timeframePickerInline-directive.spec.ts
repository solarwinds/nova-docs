import TimeframePickerInlineController from "./timeframePickerInline-controller";
import SpecHelper from "../../specHelper";
import {ITestScope} from "../../specHelper";

describe("components >", ()=> {
    describe("timeframePicker >", ()=> {
        let $controller:ng.IControllerService,
            $compile:ng.ICompileService,
            $scope:ITestScope,
            element:any;

          const html = ` <xui-timeframe-picker-inline ng-model="model" presets="presets">
                </xui-timeframe-picker-inline>`;

        beforeEach(angular.mock.module("xui"));
        beforeEach(inject(($injector:any)=> {
            $controller = $injector.get("$controller");
            $scope = $injector.get("$rootScope");
            $compile = $injector.get("$compile");
        }));

        describe("when it is compiled", () => {
            it("it should have replaced directive element", () => {
                // act
                element = SpecHelper.getCompiledElement($compile, $scope, html);

                // assert
                const directiveElem = element.find("xui-timeframe-picker-inline");
                expect(directiveElem.length).toEqual(0);
            });
        });

        describe("when 'presets' are set", ()=> {
            it("it displays proper preset items", ()=> {
                // arrange
                $scope["presets"] = {
                    "lastHour": { name: "Last hour",
                        startDatetimePattern: { hours: -1 },
                        endDatetimePattern: {}
                    },
                    "last12Hours": {
                        name: "Last 12 hours",
                        startDatetimePattern: { hours: -12},
                        endDatetimePattern: {}
                    }
                };

                // act
                element = SpecHelper.getCompiledElement($compile, $scope, html);

                // assert
                const presetElems:any[] = element.find(".xui-timeframe-picker__preset");

                expect(presetElems.length).toEqual(2);
                expect(presetElems[0].innerText.trim()).toEqual("Last hour");
                expect(presetElems[1].innerText.trim()).toEqual("Last 12 hours");
            });
        });

        describe("when 'presets' are not set", ()=> {
            it("it displays default preset items", ()=> {
                // act
                element = SpecHelper.getCompiledElement($compile, $scope, html);

                // assert
                const presetElems:any[] = element.find(".xui-timeframe-picker__preset");
                expect(presetElems.length).toBeGreaterThan(0);
            });
        });

        describe("when no preset is selected and specific timeframe is set", ()=> {
            it("it has not any preset selected and correct timeframe is displayed", ()=> {
                // arrange
                const startDatetime = "2012-08-08T13:00:00.000Z";
                const endDatetimne = "2015-07-07T13:00:00.000Z";
                $scope["model"] = {
                    startDatetime: new Date(startDatetime),
                    endDatetime: new Date(endDatetimne)
                };

                // act
                element = SpecHelper.getCompiledElement($compile, $scope, html);

                // assert
                const selectedPresetElems:any[] = element.find(".xui-timeframe-picker__preset--selected");
                const datePickersElems:any[] = element.find(".xui-datepicker__textbox");
                const timePickersElems:any[] = element.find(".xui-dropdown__input");
                const displayedStartDatetime = new Date(datePickersElems[0].value + " " + timePickersElems[0].value);
                const displayedEndDatetime = new Date(datePickersElems[1].value + " " + timePickersElems[1].value);

                expect(selectedPresetElems.length).toEqual(0);
                expect(displayedStartDatetime.toISOString()).toEqual(startDatetime);
                expect(displayedEndDatetime.toISOString()).toEqual(endDatetimne);

            });
        });

        describe("when no preset is selected and no timeframe is set", ()=> {
            it("it has first (default) preset selected", ()=> {
                // act
                element = SpecHelper.getCompiledElement($compile, $scope, html);

                // assert
                const presetElems:any[] = element.find(".xui-timeframe-picker__preset");
                expect($(presetElems[0]).hasClass("xui-timeframe-picker__preset--selected")).toEqual(true);
            });
        });
    });
});
