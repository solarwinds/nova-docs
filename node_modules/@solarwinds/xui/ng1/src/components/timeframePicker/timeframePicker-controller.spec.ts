/// <reference path="../../ref.d.ts" />

import ITimeframePickerController from "./timeframePicker-controller";
import ITimeframe = xui.ITimeframe;

describe("components >", () => {
    describe("timeframePickerController >", () => {
        let $ctrlService:ng.IControllerService,
            ctrl:ITimeframePickerController;

        beforeEach(angular.mock.module("xui"));

        beforeEach(inject(($injector:any) => {
            $ctrlService = $injector.get("$controller");
            ctrl = <ITimeframePickerController>$ctrlService("xuiTimeframePickerController", {
                $scope: $injector.get("$rootScope")
            }, {
                presets: {
                    "lastHour": {
                        name: "Last hour",
                        startDatetimePattern: {hours: -1},
                        endDatetimePattern: {}
                    },
                    "last12Hours": {
                        name: "Last 12 hours",
                        startDatetimePattern: {hours: -12},
                        endDatetimePattern: {}
                    }
                }
            });
        }));

        describe("when getTitle() is executed", () => {
            it("it should return preset name if some preset is selected", () => {
                // arrange
                ctrl.model = <ITimeframe>{
                    selectedPresetId: "last12Hours"
                };

                // act
                const title:string = ctrl.getTitle();

                // assert
                expect(title).toEqual("Last 12 hours");
            });

            it("it should return default preset name if no preset is selected", () => {
                // act
                const title:string = ctrl.getTitle();

                // assert
                expect(title).toEqual("Last hour");
            });

            it("should return custom title, if specified", () => {
                // arrange
                ctrl.customTitle = "Custom";
                ctrl.model.selectedPresetId = "";

                // act
                const title: string = ctrl.getTitle(true);

                // assert
                expect(title).toBe("Custom");
            });
        });

        describe("when onPresetSelected() is executed", () => {

            it("it apply changes from popover model into model", () => {
                // arrange
                ctrl.modelPopover = <ITimeframe>{
                    selectedPresetId: "last12Hours"
                };

                // act
                ctrl.onPresetSelected();

                // assert
                expect(ctrl.model.selectedPresetId).toEqual("last12Hours");
            });
        });

        describe("when confirmPopover() is executed", () => {
            it("it apply changes from popover model into model", () => {
                // arrange
                ctrl.modelPopover = <ITimeframe>{
                    startDatetime: new Date("2012-08-08T13:00:00.000Z"),
                    endDatetime: new Date("2015-07-07T13:00:00.000Z")
                };

                // act
                ctrl.confirmPopover();

                // assert
                expect(ctrl.model.startDatetime.toISOString()).toEqual("2012-08-08T13:00:00.000Z");
                expect(ctrl.model.endDatetime.toISOString()).toEqual("2015-07-07T13:00:00.000Z");
            });
        });

        describe("when cancelPopover() is executed", () => {
            it("it should not apply changes from popover model into model", () => {
                // arrange
                ctrl.model = <ITimeframe>{
                    startDatetime: new Date("2011-08-08T13:00:00.000Z"),
                    endDatetime: new Date("2014-07-07T13:00:00.000Z")
                };
                ctrl.modelPopover = <ITimeframe>{
                    startDatetime: new Date("2012-08-08T13:00:00.000Z"),
                    endDatetime: new Date("2015-07-07T13:00:00.000Z")
                };

                // act
                ctrl.cancelPopover();

                // assert
                expect(ctrl.model.startDatetime.toISOString()).toEqual("2011-08-08T13:00:00.000Z");
                expect(ctrl.model.endDatetime.toISOString()).toEqual("2014-07-07T13:00:00.000Z");
            });
        });

        describe("when onOpenPopover() is executed and specific date is selected", () => {
            it("it should copy model values into popover model", () => {
                // arrange
                ctrl.model = <ITimeframe>{
                    startDatetime: new Date("2011-08-08T13:00:00.000Z"),
                    endDatetime: new Date("2014-07-07T13:00:00.000Z")
                };

                // act
                ctrl.showPopover();

                // assert
                expect(ctrl.modelPopover.startDatetime.toISOString()).toEqual("2011-08-08T13:00:00.000Z");
                expect(ctrl.modelPopover.endDatetime.toISOString()).toEqual("2014-07-07T13:00:00.000Z");
            });
        });

        describe("when onOpenPopover() is executed and some preset is selected", () => {
            it("it should copy model values into popover model", () => {
                // arrange
                ctrl.model = <ITimeframe>{
                    selectedPresetId: "last12Hours"
                };

                // act
                ctrl.showPopover();

                // assert
                expect(ctrl.modelPopover.selectedPresetId).toEqual("last12Hours");
                expect(ctrl.modelPopover.startDatetime).toBeDefined();
                expect(ctrl.modelPopover.endDatetime).toBeDefined();
                expect(moment(ctrl.modelPopover.startDatetime)
                    .isSame(moment(ctrl.modelPopover.endDatetime).add({hours:-12}), "second")).toBe(true);
            });
        });

    });
});
