import {IControllerService, IScope, IRootScopeService} from "angular";
import IfShowController from "./ifShow-controller";

describe("components >", ()=> {
    describe("ifShow >", ()=> {
        describe("controller >", ()=> {
            
            let scope: IScope;
            let controllerSvc: IControllerService;

            beforeEach(angular.mock.module("xui"));

            function inject ($rootScope: IRootScopeService, $controller: IControllerService) {
                scope = $rootScope.$new();
                controllerSvc = $controller;
            };
            inject.$inject = ["$rootScope", "$controller"];

            beforeEach(angular.mock.inject(inject));

            const verifyState = (ctl: IfShowController, hasBeenShown: boolean,
                showNgIf: boolean, showNgShow: boolean): void => {
                
                expect(ctl.hasBeenShown).toBe(hasBeenShown);
                expect(ctl.showNgIf).toBe(showNgIf);
                expect(ctl.showNgShow).toBe(showNgShow);
            };

            describe("onVisibleChanged() > ", () => {
                
                it("shows everything on first show", () => {
                    const ctl = controllerSvc(IfShowController, { $scope: scope });
                    ctl.$onChanges({ visible: { currentValue: false }});
                    ctl.$onChanges({ visible: { currentValue: true }});
                    verifyState(ctl, true, true, true);
                });

                it("sets just 'showNgShow' to false on first hide", () => {
                    const ctl = controllerSvc(IfShowController, { $scope: scope });
                    ctl.$onChanges({ visible: { currentValue: true }});
                    ctl.$onChanges({ visible: { currentValue: false }});
                    verifyState(ctl, true, true, false);
                });
            });
        });
    });
});
