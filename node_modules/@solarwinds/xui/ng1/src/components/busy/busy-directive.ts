import BusyController from "./busy-controller";

/**
 * @ngdoc directive
 * @name xui.directive:xuiBusy
 * @restrict A
 *
 * @description
 * Component used for giving feedback to the user that a background task is executing.
 *
 * @parameters
 * @param {expression} xui-busy Toggles the indicator on and off.
 * @param {string=} xui-busy-message A message to show to the user within the busy indicator.
 * @param {boolean=} xui-allow-cancel Indicates whether the cancel button should be shown.
 * @param {expression=} xui-busy-on-cancel Evaluated when the user wants to cancel the operation.
 *                                         If this is not specified then the user is not presented
 *                                         with an option to cancel.
 * @param {boolean=} xui-busy-show-progress Indicates whether a progress bar should be displayed.
 * @param {number=} xui-busy-percent Value for progress completion.
 * @param {string=} xui-busy-help-text Additional information displayed below the progress.
 *
 * @example
 *    <example module="xui">
 *        <file src="src/components/busy/docs/busy-examples.html" name="index.html"></file>
 *        <file src="src/components/busy/docs/busy-examples.js" name="app.js"></file>
 *    </example>
 */

export default class Busy implements ng.IDirective {
    public static $inject = ["$templateRequest", "$compile", "swUtil"];

    constructor(private $templateRequest:ng.ITemplateRequestService,
                private $compile:ng.ICompileService, private swUtil:any) {
    }

    private static TemplateUrl = "xui/components/busy/busy-directive.html";

    public restrict = "A";
    public scope = {};
    public controller = "xuiBusyController";
    public controllerAs = "busyCtrl";
    public bindToController = {
        name: "@?",
        isBusy: "&xuiBusy",
        allowCancel: "=?xuiAllowCancel",
        onCancel: "&?xuiBusyOnCancel",
        showProgress: "@?xuiBusyShowProgress",
        percent: "@?xuiBusyPercent",
        helpText: "@?xuiBusyHelpText"
    };

    public link = (scope:ng.IScope, element:ng.IAugmentedJQuery,
                   attrs:ng.IAttributes, controller:BusyController) => {
        this.swUtil.initComponent(attrs, "busy");
        this.swUtil.watchBoolean(attrs, "showProgress", controller);

        const initialOverflow = element.css("overflow");
        element.css("overflow", "hidden");

        // Set the parent position to relative if not already specified. We need this
        // so we can fill the current element using absolute positioning.
        const parentCssPosition = element.css("position");
        if (parentCssPosition === "static" ||
            parentCssPosition === "" ||
            angular.isUndefined(parentCssPosition)) {
            element.css("position", "relative");
        }

        // Watch for any changes to the busy message attribute.
        attrs.$observe("xuiBusyMessage", (newValue:string) => {
            controller.message = newValue;
        });

        // handle scrolling divs.
        let prevScrollTop = element[0].scrollTop;
        // Request and compile our content template.
        this.$templateRequest(Busy.TemplateUrl)
            .then((template:string) => {
                const $templateEl = angular.element(template);
                element.append($templateEl);
                this.$compile($templateEl)(scope);

                const $busyEl = $templateEl.find(".xui-busy__container");

                scope.$watch(controller.isBusy, (newValue:boolean, oldValue:boolean) => {
                    if (newValue === true) {
                        element.css("overflow", "hidden");
                        $templateEl
                            .addClass("xui-busy--active")
                            .stop()
                            .fadeIn(300, () => {
                                $busyEl.show();
                            });
                        prevScrollTop = element[0].scrollTop;
                        element[0].scrollTop = 0;
                    } else {
                        $templateEl
                            .removeClass("xui-busy--active")
                            .stop()
                            .fadeOut(0);
                        element.css("overflow", _.toString(initialOverflow));
                        if (!_.isUndefined(angular.element(".xui-grid--fill"))) {
                            angular.element(".xui-grid--fill").css("overflow", "auto");
                            angular.element(".xui-grid__listview-container").css("overflow", "");
                        }
                        element[0].scrollTop = prevScrollTop;
                    }
                });
            });
    };
}
