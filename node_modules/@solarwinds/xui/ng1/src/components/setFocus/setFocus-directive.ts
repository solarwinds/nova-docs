/**
 * @ngdoc directive
 * @name xui.directive:xuiSetFocus
 * @restrict A
 *
 * @description
 * Allows focus to be databound.  Note: a "tabindex" property may be required.
 *
 * @example
 *    <example module="xui">
 *        <file src="src/components/setFocus/docs/setFocus-examples.html" name="index.html"></file>
 *        <file src="src/components/setFocus/docs/setFocus-examples.js" name="app.js"></file>
 *    </example>
 */

class SetFocus implements ng.IDirective {
    public static $inject = ["$timeout"];

    constructor(private $timeout:ng.ITimeoutService) {
    }

    public restrict = "A";
    public link = (scope:ng.IScope, element:ng.IAugmentedJQuery, attrs:ng.IAttributes) => {
        scope.$watch(attrs["xuiSetFocus"], (newValue:boolean, oldValue:boolean) => {
            let focusable = this.getFocusable(element);
            if (newValue) {
                focusable[0].focus();
            } else {
                focusable[0].blur();
            }
        });

        element.bind("blur", () => {
            this.$timeout(() => {
                scope.$apply(attrs["xuiSetFocus"] + "=false");
            }, 0);
        });

        element.bind("focus", () => {
            this.$timeout(() => {
                scope.$apply(attrs["xuiSetFocus"] + "=true");
            }, 0);
        });

        scope.$on("$destroy", () => {
            element.unbind("blur");
            element.unbind("focus");
        });
    };

    private getFocusable = (element:ng.IAugmentedJQuery): ng.IAugmentedJQuery => {
        let tagName = element.prop("tagName").toLowerCase();
        if (tagName === "input" ||
            tagName === "textarea") {
            return element;
        }
        let child = element.find("input,textarea");
        return child[0] ? child : element;
    }
}

export default SetFocus;
