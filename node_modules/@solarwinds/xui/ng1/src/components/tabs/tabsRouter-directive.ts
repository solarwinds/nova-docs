import {ITabsController} from "./tabs-controller";
import {ITabsRouterController} from "./tabsRouter-controller";

/**
 * @ngdoc directive
 * @name xui.directive:xuiTabsRouter
 * @restrict A
 * @element xui-tabs
 *
 * @requires xui.directive:xuiTabs
 *
 * @description
 * Helper for automatic state redirection after a tab is selected.
 * Also ensures that corresponding ui-view directive is placed inside.
 * Tab attribute "tabId" refers to state name.
 * It can be relative to a current state or an absolute state (e.g. parent.child.child2).
 *
 * @example
 * <example module="xui">
 *     <file src="src/components/tabs/docs/tabsRouter-examples.html" name="index.html"></file>
 *     <file src="src/components/tabs/docs/tabsRouter-examples.js" name="app.js"></file>
 * </example>
 */

export class TabsRouter implements ng.IDirective {
    public require = ["xuiTabs", "xuiTabsRouter"];
    public restrict = "A";
    public scope = false;
    public controller = "xuiTabsRouterController";

    public compile = (templateElement: ng.IAugmentedJQuery) => {

        this.insertUiViewIntoTemplate(templateElement);

        // NOTE: we use "pre" to hook on all tabs events before child directives are linked and initialized
        return <ng.IDirectivePrePost>{
            pre: (scope: ng.IScope, elem: ng.IAugmentedJQuery, attrs: ng.IAttributes,
                controllers: any[]): void => {

                const tabsController = controllers[0] as ITabsController;
                const tabsRouterController = controllers[1] as ITabsRouterController;

                tabsRouterController.initPre(tabsController);

                // adds css class
                elem.addClass("xui-tabs-router");
            }
        };
    };

    private insertUiViewIntoTemplate = (templateElement: ng.IAugmentedJQuery): void => {
        const uiViewHtml = angular.element(`<div class="xui-tabs-router-view" ui-view></div>`);
        templateElement.append(uiViewHtml);
    };
}

export default TabsRouter;
