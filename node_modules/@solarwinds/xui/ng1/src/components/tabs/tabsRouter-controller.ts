import {ITabController} from "./tab-controller";
import {ITabsController} from "./tabs-controller";
import {ITabRouterController} from "./tabRouter-controller";

export interface ITabsRouterController {
    initPre:(tabsController:ITabsController) => void;
    registerTabRouter:(controller:ITabRouterController) => void;
}

export class TabsRouterController implements ITabsRouterController {

    public static $inject = ["$log", "$state", "$scope"];
    public stateOptions: angular.ui.IStateOptions = {};

    private tabsController:ITabsController;
    private tabRouterControllers:{ [key:string]:ITabRouterController } = {};

    constructor(private $log:ng.ILogService,
                private $state:angular.ui.IStateService,
                private $scope:ng.IScope) {
        $scope.$on("$stateChangeSuccess", this.onStateChangeSuccess);
    }

    public onStateChangeSuccess = (event:ng.IAngularEvent, toState:any,
                                   toParams:any, fromState:any, fromParams:any) => {
        const tabByState = this.getTabByState(toState.name);
        if (tabByState) {
            this.tabsController.selectTab(tabByState);
        }
    };

    public initPre = (tabsController:ITabsController):void => {
        this.tabsController = tabsController;
        tabsController.registerOnTabAddedCallback(this.validateAddedTab);
        tabsController.registerOnTabSelectedCallback(this.redirectOnTabSelected);
    };

    public registerTabRouter = (controller:ITabRouterController):void => {
        let tabId = controller.tabController.tabId;
        this.tabRouterControllers[tabId] = controller;
    };

    private validateAddedTab = (tab:ITabController):void => {
        const currentStateName = this.$state.current.name;
        const tabStateName = this.getStateName(tab);
        const isParentState = this.$state.get().map((state) => {
            return state.name;}).filter((stName) => {
                return stName.indexOf(`${currentStateName}.`) > -1;}).length > 0;

        if (!tabStateName) {
            this.$log.warn(`Added tab with id "${tab.tabId}" does not refer to any existing state.`);
        } else if (tabStateName === currentStateName) {
            tab.select();
        } else if (!this.tabsController.selectedTabId && isParentState) {
            // Having no "." in the state name is an indication of a root state. In this situation
            // we automatically select the first tab.
            this.stateOptions.location = "replace";
            this.tabsController.selectTab(tab);
        }
    };

    private redirectOnTabSelected = (tab:ITabController):void => {
        const stateName = this.getStateName(tab);
        if (!stateName) {
            this.$log.warn(`Cannot resolve state for selected tab "${tab.tabId}".`);
            return;
        }

        // check if not selected already
        if (this.$state.current.name === stateName) {
            return;
        }

        let params = {};

        // load optional configuration from custom xui-tab-router directive
        const tabRouterController = this.tabRouterControllers[tab.tabId];
        if (tabRouterController) {
            const configuration = tabRouterController.configuration;

            if (configuration) {
                params = configuration.params || {};
                this.stateOptions = configuration.options || {};
            }
        }

        this.$state.go(stateName, params, this.stateOptions);
        if (this.stateOptions.location) {
           this.stateOptions = {};
        }
    };

    private getStateName = (tab:ITabController):string => {
        let stateName = tab.tabId;

        if (!stateName) {
            return null;
        }

        // if tabId refers to fully qualified state name, we use it as it is
        if (this.isFullyQualifiedChildStateName(stateName)) {
            return stateName;
        }

        // otherwise, we consider tabId to be child of current or current's parent etc
        let parent = this.$state.current.name;
        while (true) {
            const concat = this.concatChildStateName(parent, stateName);
            if (this.stateExists(concat)) {
                return concat;
            }

            parent = this.getParentStateName(parent);
            if (!parent) {
                break;
            }
        }

        return null;
    };

    private isFullyQualifiedChildStateName = (stateName:string):boolean => {
        return /([a-zA-Z]\.)+[a-zA-Z]/g.test(stateName);
    };

    private stateExists = (stateName:string):boolean => {
        let state = this.$state.get(stateName);
        return !!state;
    };

    private concatChildStateName = (parent:string, child:string):string => {
        // strip starting/trailing separators first
        parent = this.trimStateNameSeparator(parent);
        child = this.trimStateNameSeparator(child);

        return `${parent}.${child}`;
    };

    private trimStateNameSeparator = (stateName:string):string => {
        return stateName.replace(/^\s*\.\s*/g, "").replace(/\s*\.\s*$/g, "");
    };

    private getParentStateName = (stateName:string):string => {
        let lastSeparatorIndex = stateName.lastIndexOf(".");
        if (lastSeparatorIndex > 0) {
            return stateName.substring(0, lastSeparatorIndex);
        }
        return null;
    };

    public getTabByState = (stateName:string):ITabController => {
        return _.find(this.tabsController.tabs, (t:ITabController) => {
            return this.getStateName(t) === stateName;
        });
    };

}

export default TabsRouterController;
