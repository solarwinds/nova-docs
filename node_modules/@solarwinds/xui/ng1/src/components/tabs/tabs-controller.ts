import {ITabController} from "./tab-controller";

export interface ITabsController {
    tabs:ITabController[];
    selectedTabId:string;
    addTab:(tab:ITabController) => void;
    getTabById:(tabId:string) => ITabController;
    selectTab:(tab:ITabController) => void;
    onTabSelectResize: (selectedTabIndex: number) => void;
    registerOnTabAddedCallback:(callback:TabAddedCallback) => void;
    registerOnTabSelectedCallback:(callback:TabSelectedCallback) => void;
}

export type TabAddedCallback = (tab:ITabController) => void;
export type TabSelectedCallback = (tab:ITabController) => void;

export class TabsController implements ITabsController {
    public static $inject = ["$log", "$scope"];

    constructor(private $log:ng.ILogService, private $scope:ng.IScope) {
    }

    public tabs:ITabController[] = [];
    public selectedTabId:string;

    public $onInit = ():void => {
        // watch for external change
        this.$scope.$watch(() => this.selectedTabId, this.onSelectedTabIdWatchChanged);
    }

    public addTab = (tab:ITabController) => {
        this.tabs.push(tab);

        angular.forEach(this.onTabAddedCallbacks, callback => callback(tab));

        if (this.tabs.length === 1 && angular.isUndefined(this.selectedTabId)) {
            // If this is the first tab and selectedTabId is undefined then select it.
            this.selectTab(tab, true);
        } else if (tab.tabId === this.selectedTabId && angular.isDefined(this.selectedTabId)) {
            // If the selectedTabId is specified and equals the added tab then select it.
            this.selectTab(tab, true);
        }
    };

    public selectTab = (tab:ITabController, added?:boolean) => {
        if (tab.selected) {
            return;
        }

        this.unselectAll();
        tab.show();

        if (this.selectedTabId !== tab.tabId) {
            this.selectedTabId = tab.tabId;
        }

        if (!added) {
            angular.forEach(this.onTabSelectedCallbacks, callback => callback(tab));
        }

        //changing position of selected tab
        this.onTabSelectResize(this.tabs.indexOf(tab));
    };

    //will be initialized in link function
    public onTabSelectResize: (selectedTabIndex: number) => void;

    public selectedTab = () => {
        return _.find(this.tabs, {selected: true});
    };

    public getTabById = (tabId:string):ITabController => {
        return _.find(this.tabs, (t:ITabController) => {
            return t.tabId === tabId;
        });
    };

    public registerOnTabAddedCallback = (callback:TabAddedCallback):void => {
        this.onTabAddedCallbacks.push(callback);
    };

    public registerOnTabSelectedCallback = (callback:TabSelectedCallback):void => {
        this.onTabSelectedCallbacks.push(callback);
    };

    private onTabAddedCallbacks:TabAddedCallback[] = [];
    private onTabSelectedCallbacks:TabSelectedCallback[] = [];

    private onSelectedTabIdWatchChanged = (newValue:string):void => {
        if (!newValue) {
            return;
        }

        const newTab = this.getTabById(newValue);

        if (newTab) {
            this.selectTab(newTab);
        }
    };

    private unselectAll = () => {
        angular.forEach(this.tabs, (tab:ITabController) => {
            tab.hide();
        });
    };
}
