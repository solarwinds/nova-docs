describe("components >", () => {
    describe("tabs >", () => {
        let scope:any, compile:any;

        beforeEach(angular.mock.module("xui"));

        beforeEach(inject(function ($compile:any, $rootScope:any) {
            compile = $compile;
            scope = $rootScope.$new();
        }));

        const expectedTabCount = 3;
        const expectedTitle = "THIRD TAB";

        const noDefaultSpecifiedDirective = `<xui-tabs>
            <xui-tab tab-title='FIRST TAB'></xui-tab>
            <xui-tab tab-title='SECOND TAB'></xui-tab>
            <xui-tab tab-title='THIRD TAB'></xui-tab>
            </xui-tabs>`;

        const boundDirective = `<xui-tabs selected-tab-id='binding'>
            <xui-tab tab-id='first' tab-title='FIRST TAB'></xui-tab>
            <xui-tab tab-id='second' tab-title='SECOND TAB'></xui-tab>
            <xui-tab tab-id='third' tab-title='THIRD TAB'></xui-tab>
            </xui-tabs>`;

        function getCompiledDirective(directive:string) {
            let compiledElement = compile(directive)(scope);
            scope.$digest();
            return compiledElement.children().scope();
        }

        it("should update when tab is selected", () => {
            scope.binding = "second";
            let directiveScope = getCompiledDirective(boundDirective);
            expect(directiveScope.vm.tabs[0].selected).toEqual(false);
            expect(directiveScope.vm.tabs[1].selected).toEqual(true);
            expect(directiveScope.vm.tabs[2].selected).toEqual(false);

            directiveScope.vm.tabs[2].select();
            expect(directiveScope.vm.tabs[0].selected).toEqual(false);
            expect(directiveScope.vm.tabs[1].selected).toEqual(false);
            expect(directiveScope.vm.tabs[2].selected).toEqual(true);
        });

        it("should be " + expectedTabCount + " tabs on the page", function () {
            let directiveScope = getCompiledDirective(boundDirective);
            expect(directiveScope.vm.tabs.length).toEqual(expectedTabCount);
        });

        it("third tab should have " + expectedTitle + " tab-title", function () {
            let directiveScope = getCompiledDirective(boundDirective);
            expect(directiveScope.vm.tabs[2].tabTitle).toEqual(expectedTitle);
        });

        it("should change tab on binding change", function () {
            scope.binding = "first";
            let directiveScope = getCompiledDirective(boundDirective);
            expect(directiveScope.vm.tabs[0].selected).toEqual(true);
            expect(directiveScope.vm.tabs[1].selected).toEqual(false);
            expect(directiveScope.vm.tabs[2].selected).toEqual(false);
            scope.binding = "second";
            scope.$digest();
            expect(directiveScope.vm.tabs[0].selected).toEqual(false);
            expect(directiveScope.vm.tabs[1].selected).toEqual(true);
            expect(directiveScope.vm.tabs[2].selected).toEqual(false);
        });

        it("should select the first tab when \"selected-tab-id\" is not specified", function () {
            let directiveScope = getCompiledDirective(noDefaultSpecifiedDirective);
            expect(directiveScope.vm.tabs[0].selected).toEqual(true);
            expect(directiveScope.vm.tabs[1].selected).toEqual(false);
            expect(directiveScope.vm.tabs[2].selected).toEqual(false);
        });
    });
});
