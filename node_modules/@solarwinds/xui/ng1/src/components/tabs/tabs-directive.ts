import {TabsController} from "./tabs-controller";
/**
 * @ngdoc directive
 * @name xui.directive:xuiTabs
 * @restrict E
 *
 * @description
 * Responsive shell for hosting collection of xui-tab.
 *
 * @parameters
 * @param {string} selected-tab-id Used to monitor and set the selected tab.
 *
 * @example
 *    <example module="xui">
 *        <file src="src/components/tabs/docs/tabs-examples.html" name="index.html"></file>
 *        <file src="src/components/tabs/docs/tabs-examples.js" name="app.js"></file>
 *    </example>
 */

export class Tabs implements ng.IDirective {
    public require = "xuiTabs";
    public restrict = "E";
    public templateUrl = "xui/components/tabs/tabs-directive.html";
    public replace = true;
    public transclude = true;
    public scope = {};
    public controller = "xuiTabsController";
    public controllerAs = "vm";
    public bindToController = {
        selectedTabId: "=?"
    };

    public link = (scope: ng.IScope, element: ng.IAugmentedJQuery,
                   attrs: ng.IAttributes, controller: TabsController) => {
        let tabsSlider = element.find(".nav"),
            tabsContainer = element.find(".xui-tabs__header-container"),
            caretLeft = element.find(".xui-tabs__header-caret--left"),
            caretRight = element.find(".xui-tabs__header-caret--right"),
            firstVisibleTabIndex = 0;

        const onResize = (event?: JQueryEventObject) => {
            if (tabsSlider.outerWidth() > tabsContainer.outerWidth()) {
                element.addClass("carets-shown");
            } else {
                element.removeClass("carets-shown");
                tabsSlider.css("transform", "translateX(0)");
            }
        };

        //tabs moving and caret disabling/enabling
        const moveTabs = (translateOn: number) => {
            tabsSlider.css("transform", `translateX(${translateOn}px)`);

            caretLeft.removeClass("disabled");
            caretRight.removeClass("disabled");

            if (!translateOn) {
                caretLeft.addClass("disabled");
            } else {
                if ((Math.abs(translateOn) + tabsContainer.outerWidth()) >= tabsSlider.outerWidth()) {
                    caretRight.addClass("disabled");
                }
            }
        };

        const getTranslateX = (elem: ng.IAugmentedJQuery) => {
            //expression for analyzing css transform property value, extracts translateX value
            const transXExp = /^matrix\((?:-?\d+, ){4}-?(\d+), -?\d+\)$/;

            if (transXExp.test(elem.css("transform"))) {
                return +transXExp.exec(elem.css("transform"))[1];
            } else {
                return 0;
            }
        };

        const onRightCaretClick = (event?: JQueryEventObject) => {
            let tabs = element.find(".xui-tabs__header-item"),
                tabsTotalWidth = tabsSlider.outerWidth(),
                headerWidth = tabsContainer.outerWidth(),
                tabsSliderShift = 0,
                translateX = getTranslateX(tabsSlider);

            if ((tabsTotalWidth - headerWidth - translateX) < headerWidth) {
                tabsSliderShift = tabsTotalWidth - headerWidth;
                caretRight.addClass("disabled");
            } else {
                let tab: ng.IAugmentedJQuery,
                    tabWidth: number;

                for (let i = 0; i < tabs.length; i++) {
                    tab = angular.element(tabs.get(i));
                    tabWidth = tab.outerWidth();
                    if ((tabsSliderShift - translateX + tabWidth) < headerWidth) {
                        tabsSliderShift += tabWidth;
                    } else {
                        firstVisibleTabIndex = i;
                        break;
                    }
                }
            }
            moveTabs(-tabsSliderShift);
        };

        const onLeftCaretClick = (event?: JQueryEventObject) => {
            let tabs = element.find(".xui-tabs__header-item"),
                headerWidth = tabsContainer.outerWidth(),
                tab: ng.IAugmentedJQuery,
                tabWidth: number,
                tabsSliderShift = 0,
                translateX = getTranslateX(tabsSlider);

            if (translateX < headerWidth) {
                //moving first at the beginning, keeping tabsSliderShift equal to 0
                firstVisibleTabIndex = 0;
            } else if (caretRight.hasClass("disabled")) {
                for (let i = tabs.length - 1; i >= 0; i--) {
                    tab = angular.element(tabs.get(i));
                    tabWidth = tab.outerWidth();
                    tabsSliderShift += tabWidth;
                    if (tabsSliderShift > headerWidth) {
                        firstVisibleTabIndex = i;
                        break;
                    }
                }

                tabsSliderShift += -headerWidth - translateX;
            } else {
                for (let i = firstVisibleTabIndex - 1; i >= 0; i--) {
                    tab = angular.element(tabs.get(i));
                    tabWidth = tab.outerWidth();

                    if (tabsSliderShift + tabWidth < headerWidth) {
                        tabsSliderShift += tabWidth;
                        firstVisibleTabIndex = i;
                    } else {
                        break;
                    }
                }
                tabsSliderShift -= translateX;
            }

            moveTabs(tabsSliderShift);
        };

        const onTabSelectResize = (selectedTabIndex: number) => {
            let tabs = element.find(".xui-tabs__header-item"),
                headerWidth = tabsContainer.outerWidth(),
                tabsSliderShift = 0,
                translateX = getTranslateX(tabsSlider),
                selectedTabWidth: number;

            for (let i = 0; i <= selectedTabIndex; i++) {
                tabsSliderShift += angular.element(tabs[i]).outerWidth();
            }

            selectedTabWidth = angular.element(tabs[selectedTabIndex]).outerWidth();
            //ignoring of initial call
            if (!translateX && !selectedTabIndex) {
                return;
            }
            // calculating proper aligning length
            if ((tabsSliderShift - translateX) < selectedTabWidth) {
                tabsSliderShift = selectedTabWidth - tabsSliderShift;
                moveTabs(tabsSliderShift);
            } else if ((tabsSliderShift - translateX) > headerWidth) {
                tabsSliderShift = headerWidth - tabsSliderShift;
                moveTabs(tabsSliderShift);
            }
        };

        element.on("resize", onResize);
        caretRight.on("click", onRightCaretClick);
        caretLeft.on("click", onLeftCaretClick);

        controller.onTabSelectResize = onTabSelectResize;

        //checks whether carets should be shown after component initialization
        onResize();
    };
}
