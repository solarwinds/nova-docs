import {ITabsController} from "./tabs-controller";
import SpecHelper from "../../specHelper";

interface IScopeWithTabsController extends ng.IScope {
    vm: ITabsController;
}

describe("components >", () => {
    "use strict";
    describe("tabs >", () => {
        describe("tabsRouter >", () => {
            let scope: any;
            let compile: ng.ICompileService;
            let state: angular.ui.IStateService;

            beforeEach(angular.mock.module("xui"));

            beforeEach(angular.mock.module("ui.router"));
            beforeEach(angular.mock.module("ui.router.state.events"));

            beforeEach(angular.mock.module(($stateProvider: angular.ui.IStateProvider) => {
                $stateProvider.state("tabsRouter", {
                    url: "/tabsRouter",
                    template: "template content"
                });

                $stateProvider.state("tabsRouter.first", {
                    url: "/first",
                    template: "first template content"
                });

                $stateProvider.state("tabsRouter.second", {
                    url: "/second",
                    template: "second template content"
                });
            }));

            beforeEach(inject(($rootScope: ng.IRootScopeService, $compile: ng.ICompileService,
                $log: ng.ILogService, $state: angular.ui.IStateService) => {

                scope = $rootScope.$new();
                compile = $compile;
                state = $state;
            }));

            it("writes warning if tabId does not refer to any valid state",
                angular.mock.inject(($log: ng.ILogService) => {

                    const directive = `<xui-tabs xui-tabs-router="">
                            <xui-tab tab-id="first_tab_which_do_not_exist" title='FIRST TAB'></xui-tab>
                            </xui-tabs>`;

                    const element = SpecHelper.getCompiledElement(compile, scope, directive);
                    expect($log.warn.logs[0]).toMatch(/does not refer to any existing state/i);
                }));

            it("automatically selects first tab and redirects to related state", () => {
                const directive = `<xui-tabs xui-tabs-router="">
                        <xui-tab tab-id="first" title='FIRST TAB'></xui-tab>
                        <xui-tab tab-id="second" title='SECOND TAB'></xui-tab>
                        </xui-tabs>`;

                state.current.name = "tabsRouter";

                const element = SpecHelper.getCompiledElement(compile, scope, directive);

                const childrenScope = element.isolateScope() as IScopeWithTabsController;

                expect(childrenScope.vm.tabs[0].selected).toBe(true);
                expect(state.current.name).toBe("tabsRouter.first");
            });

            it("automatically selects first tab and does not call state.go if already there", () => {
                const directive = `<xui-tabs xui-tabs-router="">
                        <xui-tab tab-id="first" title='FIRST TAB'></xui-tab>
                        <xui-tab tab-id="second" title='SECOND TAB'></xui-tab>
                        </xui-tabs>`;

                state.current.name = "tabsRouter.first";

                spyOn(state, "go");

                const element = SpecHelper.getCompiledElement(compile, scope, directive);
                const childrenScope = element.isolateScope() as IScopeWithTabsController;

                expect(childrenScope.vm.tabs[0].selected).toBe(true);
                expect(state.current.name).toBe("tabsRouter.first");
                expect(state.go).not.toHaveBeenCalled();
            });

            it("automatically selects tab with current state", () => {
                const directive = `<xui-tabs xui-tabs-router="">
                        <xui-tab tab-id="first" title='FIRST TAB'></xui-tab>
                        <xui-tab tab-id="second" title='SECOND TAB'></xui-tab>
                        </xui-tabs>`;

                const secondStateName = "tabsRouter.second";
                state.current.name = secondStateName;

                const element = SpecHelper.getCompiledElement(compile, scope, directive);
                const childrenScope = element.isolateScope() as IScopeWithTabsController;

                expect(childrenScope.vm.tabs[1].selected).toBe(true);
                expect(state.current.name).toBe(secondStateName);
            });

            it("automatically selects tab with current state if tabId refers to fully qualified state name", () => {
                const directive = `<xui-tabs xui-tabs-router="">
                        <xui-tab tab-id="first" title='FIRST TAB'></xui-tab>
                        <xui-tab tab-id="tabsRouter.second" title='SECOND TAB'></xui-tab>
                        </xui-tabs>`;

                const secondStateName = "tabsRouter.second";
                state.current.name = secondStateName;

                const element = SpecHelper.getCompiledElement(compile, scope, directive);
                const childrenScope = element.isolateScope() as IScopeWithTabsController;

                expect(childrenScope.vm.tabs[1].selected).toBe(true);
                expect(state.current.name).toBe(secondStateName);
            });

            it("redirects to state after tab is selected", () => {
                const directive = `<xui-tabs xui-tabs-router="">
                        <xui-tab tab-id="first" title='FIRST TAB'></xui-tab>
                        <xui-tab tab-id="second" title='SECOND TAB'></xui-tab>
                        </xui-tabs>`;

                state.current.name = "tabsRouter.first";

                const element = SpecHelper.getCompiledElement(compile, scope, directive);
                const childrenScope = element.isolateScope() as IScopeWithTabsController;

                spyOn(state, "go").and.callThrough();

                childrenScope.vm.tabs[1].select();
                scope.$apply();
                expect(state.current.name).toBe("tabsRouter.second");
                expect(state.go).toHaveBeenCalledWith("tabsRouter.second", {}, {});
            });

            it("redirects to state after tab is selected with custom params", () => {
                const directive = `<xui-tabs xui-tabs-router="">
                        <xui-tab tab-id="first" title='FIRST TAB'></xui-tab>
                        <xui-tab tab-id="second" title='SECOND TAB' xui-tab-router="secondStateSettings"></xui-tab>
                        </xui-tabs>`;

                state.current.name = "tabsRouter.first";
                const params = {
                    param1: "value"
                };
                scope.secondStateSettings = {
                    params: params
                };

                const element = SpecHelper.getCompiledElement(compile, scope, directive);
                const childrenScope = element.isolateScope() as IScopeWithTabsController;

                spyOn(state, "go").and.callThrough();

                childrenScope.vm.tabs[1].select();
                scope.$apply();
                expect(state.current.name).toBe("tabsRouter.second");
                expect(state.go).toHaveBeenCalledWith("tabsRouter.second", params, {});
            });
        });
    });
});
