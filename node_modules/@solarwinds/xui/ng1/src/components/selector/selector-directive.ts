import {SelectorController} from "./selector-controller";

/**
 * @ngdoc directive
 * @name xui.directive:xuiSelector
 * @restrict E
 *
 * @description
 * Control used to easily select items.
 *
 * @parameters
 * @param {boolean=} is-disabled Expression to determine if menu should be disabled.
 * @param {function} on-items-click Callback function to be executed when the user clicks on an item.
 * @param {boolean=} is-indeterminate True to indicate that the state of the checkbox is indeterminate.
 * @param {boolean} checked Checkbox status (lowercase).
 * @param {boolean=} [allow-select-all-pages=true] False to hide "All Pages" item in default item list.
 * @param {ISelectorItem[]=} itemsSource If defined, it overwrites the default items of the selector.
 * Defaults are used and possible to be re-used from xuiSelectorService.getDefaultItems().
 * @param {function} on-checkbox-click Callback function to be executed after the button wrapping
 * the checkbox is clicked.
 *
 * @example
 *    <example module="xui">
 *        <file name="config.js">
 *            Xui.translations = {
 *              xui_selector_all: "All",
 *              xui_selector_all_pages: "All Pages",
 *              xui_selector_none: "None"
 *              };
 *        </file>
 *        <file src="src/components/selector/docs/selector-examples.html" name="index.html"></file>
 *        <file src="src/components/selector/docs/selector-examples.js" name="script.js"></file>
 *    </example>
 **/

class Selector implements ng.IDirective {
    public static $inject = ["swUtil"];

    constructor(private swUtil:any) {
    }

    public restrict = "E";
    public require = ["xuiSelector"];
    public scope = {};
    public templateUrl = "xui/components/selector/selector-directive.html";
    public replace = true;
    public transclude = false;
    public controller = SelectorController;
    public controllerAs = "vm";
    public bindToController = {
        isDisabled: "=?",
        checked: "=",
        allowSelectAllPages: "=?",
        isIndeterminate: "=",
        onItemsClick: "&",
        onCheckboxClick: "&",
        itemsSource: "=?"
    };

    public compile = (element:ng.IAugmentedJQuery, attrs:ng.IAttributes) => {
        if ("isDisabled" in attrs) {
            const $btns = element.find(".xui-selector__toggle, .xui-selector__action");
            $btns.attr("ng-disabled", "vm.isDisabled");
        }

        return {
            post: this.postLink
        };
    };

    private postLink = (scope:ng.IScope, element:ng.IAugmentedJQuery, attrs: ng.IAttributes, controllers: any) => {
        this.swUtil.initComponent(attrs, "selector");
    };
}

export default Selector;
