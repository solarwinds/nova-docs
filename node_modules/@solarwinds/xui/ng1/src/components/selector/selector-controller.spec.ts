import {SelectorController, ISelectorController} from "./selector-controller";
import SpecHelper from "../../specHelper";

describe("components >", ()=> {
    describe("selector >", ()=> {
        describe("controller >", ()=> {
            let $scope:ng.IRootScopeService;
            let $controller:ng.IControllerService;
            let $element:ng.IAugmentedJQuery;
            let $translate:angular.translate.ITranslateService;
            let $window:ng.IWindowService;
            let ctrl:ISelectorController;
            let compile:ng.ICompileService;
            let scope: any;

            beforeEach(angular.mock.module("xui"));
            beforeEach(inject(($injector:any)=> {
                $scope = $injector.get("$rootScope");
                $controller = $injector.get("$controller");
                $element = angular.element("<div></div>");
                $translate = $injector.get("$translate");
                $window = $injector.get("$window");

                spyOn($translate, "instant").and.callFake((key:string) => {
                    if (key === "xui_selector_all") {
                        return "all";
                    } else if (key === "xui_selector_none") {
                        return "none";
                    } else if (key === "xui_selector_all_pages") {
                        return "all pages";
                    } else {
                        return "";
                    }
                });

                ctrl = <ISelectorController>$controller("xuiSelectorController", {
                    $element: $element,
                    $scope: $scope,
                    $translate: $translate,
                    $window: $window
                });
            }));

            describe("when is-indeterminate is true ", ()=> {
                describe("and checked is false,", ()=> {
                    it("click should change to checked", () => {
                        ctrl.isIndeterminate = true;
                        ctrl.checked = false;

                        ctrl.checkboxClick();

                        expect(ctrl.checked).toEqual(true);
                    });
                });

                describe("and checked is true,", ()=> {
                    it("click should change to checked", () => {
                        ctrl.isIndeterminate = true;
                        ctrl.checked = true;

                        ctrl.checkboxClick();

                        expect(ctrl.checked).toEqual(true);
                    });
                });
            });

            describe("when is-indeterminate is false ", ()=> {
                describe("and checked is false,", ()=> {
                    it("click should change to checked", () => {
                        ctrl.isIndeterminate = false;
                        ctrl.checked = false;

                        ctrl.checkboxClick();

                        expect(ctrl.checked).toEqual(true);
                    });
                });

                describe("and checked is true,", ()=> {
                    it("click should change to unchecked", () => {
                        ctrl.isIndeterminate = false;
                        ctrl.checked = true;

                        ctrl.checkboxClick();

                        expect(ctrl.checked).toEqual(false);
                    });
                });
            });
            describe("when itemsSource property", () => {
                beforeEach(inject(function ($compile:ng.ICompileService, $rootScope:any) {
                    compile = $compile;
                    scope = $rootScope.$new();
                }));
                it("is not set, the default items are listed", () => {
                    const defaultSelector = `<xui-selector></xui-selector>`;
                    let element = SpecHelper.getCompiledElement(compile, scope, defaultSelector);
                    const menuItems = element.find(".xui-selector__menuitem .xui-listitem__content > div");
                    expect(menuItems.length).toBe(3);
                    expect($(menuItems[0]).text()).toBe("all");
                    expect($(menuItems[1]).text()).toBe("none");
                    expect($(menuItems[2]).text()).toBe("all pages");
                });

                it("is not set, but allow-select-all-page is set 'false', 'All pages' item is not shown", () => {
                    const defaultSelector = `<xui-selector allow-select-all-pages="false"></xui-selector>`;
                    let element = SpecHelper.getCompiledElement(compile, scope, defaultSelector);
                    const menuItems = element.find(".xui-selector__menuitem .xui-listitem__content > div");
                    expect(menuItems.length).toBe(2);
                    expect($(menuItems[0]).text()).toBe("all");
                    expect($(menuItems[1]).text()).toBe("none");
                });

                it("is correctly, it overwrites the default items", () => {
                    const customSelector = `<xui-selector items-source="vm.itemsSource"></xui-selector>`;
                    let element = SpecHelper.getCompiledElement(compile, scope, customSelector);
                    ctrl = element.controller("xuiSelector");
                    ctrl.itemsSource = [
                        {
                            name: "name1",
                            value: "value1"
                        },
                        {
                            name: "name2",
                            value: "value2"
                        }
                    ];
                    scope.$apply();
                    const menuItems = element.find(".xui-selector__menuitem .xui-listitem__content > div");
                    expect(menuItems.length).toBe(2);
                    expect($(menuItems[0]).text()).toBe("value1");
                    expect($(menuItems[1]).text()).toBe("value2");
                });
            });
        });
    });
});
