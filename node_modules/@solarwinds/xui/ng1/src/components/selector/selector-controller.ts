import ISelectorItem = xui.ISelectorItem;
export interface ISelectorController {
    isIndeterminate:Boolean;
    ngModelCtrl:ng.INgModelController;
    isDisabled:Boolean;
    checked:Boolean;
    allowSelectAllPages:Boolean;
    onItemsClick:(params:any)=>void;
    onCheckboxClick:()=>void;
    checkboxClick:()=>void;
    itemsSource: ISelectorItem[];
}

export class SelectorController implements ISelectorController {
    public static $inject = ["$element", "$scope", "$translate", "$window", "xuiSelectorService"];

    constructor(private $element:ng.IAugmentedJQuery, private $scope:ng.IScope,
                private $translate:angular.translate.ITranslateService, private $window:ng.IWindowService,
                private selectorService:xui.ISelectorService
    ) {
        if (angular.isUndefined(this.allowSelectAllPages)) {
            this.allowSelectAllPages = true;
        };
        if (angular.isUndefined(this.itemsSource)) {
            this.itemsSource = selectorService.getDefaultItems(this.allowSelectAllPages);
        }
    }

    public isDisabled:boolean;
    public isIndeterminate:boolean;
    public checked:boolean;
    public allowSelectAllPages:boolean;
    public ngModelCtrl:ng.INgModelController;
    public onCheckboxClick:() => void;
    public onItemsClick:(params:any) => void;
    public itemsSource:ISelectorItem[];

    public select = (item:any) => {
        if (angular.isFunction(this.onItemsClick)) {
            this.$scope.$evalAsync(() => {
                this.onItemsClick({item: item});
            });
        }
    };

    public checkboxClick = () => {
        this.triggerState(this.checked, this.isIndeterminate);
        this.$scope.$evalAsync(() => {
            this.onCheckboxClick();
        });
    };

    public adjustMenuPosition = (event:MouseEvent):void => {
        const win:any = angular.element(this.$window),
            menu = this.$element.find(".xui-selector__menu"),
            mouseX = event.clientX,
            mouseY = event.clientY,
            buttonWidth = (<HTMLElement>event.currentTarget).offsetWidth,
            buttonHeight = (<HTMLElement>event.currentTarget).offsetHeight,
            menuWidth = menu.outerWidth(),
            menuHeight = menu.outerHeight(),
            canBeRightAlign = mouseX > (menuWidth - buttonWidth),
            canBeLeftAlign = (win.innerWidth() - mouseX) > (menuWidth - buttonWidth),
            canBeUpside = (mouseY - (buttonHeight + menuHeight)) > 0,
            canBeDownside = (win.innerHeight() - (mouseY + buttonHeight + menuHeight)) > 0;

        // switch menu expand direction if needed
        if (!canBeDownside && canBeUpside) {
            this.$element.find(".dropdown").addClass("dropup").removeClass("dropdown");
        } else {
            // default
            this.$element.find(".dropup").addClass("dropdown").removeClass("dropup");
        }

        // switch menu alignment if needed
        if (!canBeRightAlign && canBeLeftAlign) {
            menu.removeClass("dropdown-menu-right");
        } else if (canBeRightAlign && !canBeLeftAlign) {
            menu.addClass("dropdown-menu-right");
        } else {
            // default
            menu.hasClass("menu-right")
                ? menu.removeClass("dropdown-menu-right")
                : menu.addClass("dropdown-menu-right");
        }
    };

    private triggerState(checked:boolean, isIndeterminate:boolean) {
        if (isIndeterminate) {
            this.isIndeterminate = false;
            this.checked = true;
            return;
        }
        this.checked = !checked;
    }
}

export default SelectorController;
