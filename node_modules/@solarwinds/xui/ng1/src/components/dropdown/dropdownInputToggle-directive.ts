/// <reference path="../../ref.d.ts" />

import Inject from "../../decorators/di";
import {Constants} from "../../common/constants";

/**
 * This is modified uib-dropdown-toggle directive that opens the dropdown-menu by focusing an input
 */
class DropdownInputToggle {

    public require = "?^uibDropdown";

    constructor(@Inject("$timeout") private $timeout:ng.ITimeoutService,
                @Inject("xuiConstants") private xuiConstants:Constants) {
    }

    public link = (scope:ng.IScope, element:ng.IAugmentedJQuery, attrs:ng.IAttributes, dropdownCtrl:any)=> {
        if (!dropdownCtrl) {
            return;
        }
        dropdownCtrl.toggleElement = element;

        const toggleDropdown = (open:boolean, filterFn?:(event:JQueryEventObject)=>boolean) => {
            return (event:JQueryEventObject)=> {
                if ((angular.isFunction(filterFn) && !filterFn(event)) ||
                    (element.hasClass("disabled") || attrs["disabled"])) {
                    return;
                }
                this.$timeout(()=> {
                    if (dropdownCtrl.isOpen() === !open) {
                        dropdownCtrl.toggle();
                    }
                }, 0);
            };
        };

        const openDropdown = toggleDropdown(true);
        //const closeDropdown = toggleDropdown(false);

        element.bind("focus", openDropdown);
        element.bind("click", openDropdown);
        element.bind("keydown", toggleDropdown(false,
            ($event)=> $event.keyCode === this.xuiConstants.KEY_CODE.ENTER ||
            $event.keyCode === this.xuiConstants.KEY_CODE.TAB));
        //element.bind("blur", closeDropdown);

        // WAI-ARIA
        element.attr({"aria-haspopup": true, "aria-expanded": false});
        scope.$watch(dropdownCtrl.isOpen, (isOpen:any)=> {
            element.attr("aria-expanded", <any>!!isOpen);
        });

        scope.$on("$destroy", function () {
            element.unbind("focus", openDropdown);
            element.unbind("click", openDropdown);
            //element.unbind("blur", closeDropdown);
        });
    };

}

export default DropdownInputToggle;
