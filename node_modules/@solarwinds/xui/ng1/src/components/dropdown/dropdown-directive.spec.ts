/// <reference path="../../ref.d.ts" />

describe("components >", () => {
    describe("dropdown >", () => {
        let scope:any, compile:ng.ICompileService;

        beforeEach(angular.mock.module("xui"));

        beforeEach(inject(($templateCache:ng.ITemplateCacheService, $rootScope:ng.IRootScopeService,
                           _$compile_:ng.ICompileService) => {
            scope = $rootScope.$new();
            scope.itemsSource = ["Item 1", "Item 2", "Item 3"];
            scope.itemsSourceComplex = [{ name: "Item 4", value: "Bonobo" },
                { name: "Item 5", value: "Zelda" },
                { name: "Item 6", value: "Max" }];
            scope.itemsSourceGrouped = [["Item 1", "Item 2", "Item 3"], ["Item 4", "Item 5", "Item 6"]];
            scope.selectedItem = scope.itemsSource[1];
            scope.selectedComplexItem = scope.itemsSourceComplex[1];
            compile = _$compile_;
        }));

        const plainDirective = `<xui-dropdown caption='xui-dropdown'
            selected-item='selectedItem' items-source='itemsSource'
            help-text='Help hint for xui-dropdown'
            display-format='This is {0}'></xui-dropdown>`;

        const emptyDirective = `<xui-dropdown selected-item='selectedItem' items-source='itemsSource'>,
            </xui-dropdown>`;

        const requiredDirective = `<xui-dropdown ng-model="selectedItem"
            is-required="true" placeholder="select item" items-source="itemsSource">
            </xui-dropdown>`;

        const editableWithIconDirective = `<xui-dropdown
            selected-item="selectedItem" items-source="itemsSource"
            is-editable="true" icon="clock"
            help-text="Help hint for xui-dropdown"
            display-format="This is {0}"></xui-dropdown>`;

        const editableDirective = `<xui-dropdown
            selected-item="selectedItem" items-source="itemsSource"
            is-editable="true"
            help-text="Help hint for xui-dropdown"
            display-format="This is {0}"></xui-dropdown>`;

        const displayValueDirective = `<xui-dropdown
            selected-item="selectedComplexItem" items-source="itemsSourceComplex"
            display-value="name"></xui-dropdown>`;

        const disabledDirective = `<xui-dropdown is-disabled="true"
            selected-item="selectedItem" items-source="itemsSource">
            </xui-dropdown>`;

        const directiveWithSeparator = `<xui-dropdown caption='xui-dropdown'
            selected-item='selectedItem' items-source='itemsSourceGrouped'
            help-text='Help hint for xui-dropdown'></xui-dropdown>`;

        it("should copy caption to label", () => {
            const compiledElement = compile(plainDirective)(scope);
            scope.$digest();
            const caption = compiledElement.find("label");
            expect(caption).toBeTruthy();
            expect(caption.length).toBe(1);
            expect(caption[0].innerText).toEqual("xui-dropdown");
        });

        it("should contain proper number of items", () => {
            const compiledElement = compile(plainDirective)(scope);
            scope.$digest();
            const listItems = compiledElement.find(".xui-dropdown__menu > .xui-dropdown__menuitem");
            expect(listItems).toBeTruthy();
            expect(listItems.length).toBe(3);
        });

        it("should highlight selected item", () => {
            const compiledElement = compile(plainDirective)(scope);
            scope.$digest();
            const selected = compiledElement
                .find(".xui-dropdown__menu > .xui-dropdown__menuitem.xui-listitem--selected");
            expect(selected).toBeDefined();
            expect(selected.length).toBe(1);
        });

        it("should show help hint", () => {
            const compiledElement = compile(plainDirective)(scope);
            scope.$digest();
            const hint = compiledElement.find("div.xui-input-help");
            expect(hint).toBeTruthy();
            expect(hint.length).toBe(1);
            expect(hint[0].innerText).toEqual("Help hint for xui-dropdown");
        });

        it("should respect 'disabled' attribute", () => {
            const compiledElement = compile(disabledDirective)(scope);
            scope.$digest();
            const button = compiledElement.find(".xui-dropdown__toggle[disabled]");
            expect(button).toBeTruthy();
            expect(button.length).toBe(1);
        });

        it("should compile required dropdown with placeholder", () => {
            const dropdown = compile(requiredDirective)(scope);
            expect(dropdown).toBeDefined();
            scope.$digest();
        });

        it("should show icon when is editable and the icon is set ", () => {
            const compiledElement = compile(editableWithIconDirective)(scope);
            scope.$digest();
            const icon = compiledElement.find(".xui-dropdown__icon");
            expect(icon.length).toBe(1);
            expect($(icon[0]).hasClass("ng-hide")).toBe(false);
        });

        it("should modify text position when is editable and the icon is set ", () => {
            const compiledElement = compile(editableWithIconDirective)(scope);
            scope.$digest();
            const modifiedInputElement = compiledElement.find(".xui-dropdown__input-icon");
            expect(modifiedInputElement.length).toBe(1);
        });

        it("should display some property value of complex object on view", () => {
            const compiledElement = compile(displayValueDirective)(scope);
            scope.$digest();
            const selected = compiledElement
                .find(".xui-dropdown__menu > .xui-dropdown__menuitem.xui-listitem--selected");
            expect(selected).toBeDefined();
            expect(selected[0].innerText.trim()).toEqual("Item 5");
        });

		// Negative cases
        it("should not show icon when the icon is not set ", () => {
            const compiledElement = compile(editableDirective)(scope);
            scope.$digest();
            const icon = compiledElement.find(".xui-dropdown__icon");
            expect(icon.length).toBe(1);
            expect($(icon[0]).hasClass("ng-hide")).toBe(true);
        });

        it("should not modify text position when is not editable and the icon is not set ", () => {
            const compiledElement = compile(editableDirective)(scope);
            scope.$digest();
            const modifiedInputElement = compiledElement.find(".xui-dropdown__input-icon");
            expect(modifiedInputElement.length).toBe(0);
        });

        it("should not display label if caption was not set", () => {
            const compiledElement = compile(emptyDirective)(scope);
            scope.$digest();
            const caption = compiledElement.find("label");
            expect(caption).toBeTruthy();
            expect(caption.length).toBe(1);
            expect(caption[0].innerText).toEqual("");
            expect($(caption[0]).hasClass("ng-hide")).toBe(true);
        });

        it("should not display help hint if it was not set", () => {
            const compiledElement = compile(emptyDirective)(scope);
            scope.$digest();
            const hint = compiledElement.find("div.xui-input-help");
            expect(hint.length).toBe(0);
        });

        it("should insert separator object and flatten itemsSource", () => {
            const compiledElement = compile(directiveWithSeparator)(scope);
            scope.$digest();
            const ctrl = compiledElement.controller("xuiDropdown"),
                separatedItemsSource = ["Item 1", "Item 2", "Item 3", {separator: true}, "Item 4", "Item 5", "Item 6"];
            expect(angular.copy(scope.itemsSourceGrouped)).toEqual(separatedItemsSource);
        });
    });
});
