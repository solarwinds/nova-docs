/// <reference path="../../ref.d.ts" />

import DropdownController from "./dropdown-controller";

describe("components >", ()=> {
    describe("dropdown >", ()=> {
        describe("controller >", ()=> {
            let $scope:ng.IRootScopeService;
            let $controller:ng.IControllerService;
            let ctrl:DropdownController;

            const mockItemsSource = [
                    [
                        {value: "Bonobo"},
                        {value: "Quartz"}
                    ],
                    [
                        {value: "Zelda"}
                    ],
                    [
                        {value: "Max"},
                        {value: "Apple"}
                    ]
                ],
                separatedItemsSource = [
                    {value: "Bonobo"},
                    {value: "Quartz"},
                    {separator: true},
                    {value: "Zelda"},
                    {separator: true},
                    {value: "Max"},
                    {value: "Apple"}
                ];

            beforeEach(angular.mock.module("xui"));
            beforeEach(inject(($injector:any) => {
                $scope = $injector.get("$rootScope");
                $controller = $injector.get("$controller");
                ctrl = <DropdownController>$controller("xuiDropdownController", {$scope: $scope});
            }));

            it("should set default item template url", () => {
                expect(ctrl.itemTemplateUrl).toBeDefined();
                expect(ctrl.itemTemplateUrl).toBe("xui/components/dropdown/templates/dropdown-item-default.html");
            });

            it("should return invalid when isRequired is true and selectedItem is empty", () => {
                expect(ctrl.isValid()).toBe(true);
                ctrl.isRequired = true;
                expect(ctrl.isValid()).toBe(false);
                ctrl.selectedItem = "item 1";
                expect(ctrl.isValid()).toBe(true);
            });

            it("should return true when invalid and placeholder is set", () => {
                ctrl.isRequired = true;
                expect(ctrl.isValid()).toBe(false);
                expect(ctrl.displayPlaceholder()).toBe(false);
                ctrl.placeholder = "select item";
                expect(ctrl.displayPlaceholder()).toBe(true);
            });

            it("should add separators and flatten itemsSource", () => {
                ctrl.itemsSource = mockItemsSource;
                ctrl.insertSeparators();
                expect(JSON.stringify(ctrl.itemsSource)).toEqual(JSON.stringify(separatedItemsSource));
            });
        });
    });
});
