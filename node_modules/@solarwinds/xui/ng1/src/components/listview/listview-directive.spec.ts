import SpecHelper from "../../specHelper";

describe("components >", ()=> {
    describe("listview >", ()=> {
        let element:any,
            $scope:any,
            $compile:ng.ICompileService,
            ctrl:any,
            $templateCache:ng.ITemplateCacheService;
        beforeEach(angular.mock.module("xui"));

        beforeEach(inject(($injector:any)=> {
            $compile = $injector.get("$compile");
            $scope = $injector.get("$rootScope").$new();
            $templateCache = $injector.get("$templateCache");
        }));

        const itemTemplate = `<script type="text/ng-template" id="item-template"
                ><div>{{::item.name}} = {{::item.value}}</div></script>`;

        const listviewHtml = `<xui-listview items-source="items" />`;

        function compile(directiveHtml:string) {
            element = SpecHelper.getCompiledElement($compile, $scope, directiveHtml);
            $scope.$apply();
            ctrl = element.controller("xuiListview");
        }

        it("compiles", ()=> {
            $scope.items = [{name: "NAME", value: "VALUE"}];
            compile(listviewHtml);
            expect(element.is(".xui-listview")).toBeTruthy();
        });

        it("uses missing template calling item.toString()", ()=> {
            $scope.items = [{toString: ()=> "this is toString"}];
            compile(listviewHtml);
            const items = element.find(".list-group-item");
            expect(items.length).toBe(1);
            expect($(items[0]).text().trim()).toBe("this is toString");
        });

        it("shows all items", ()=> {
            const itemCount = 10;
            $scope.items = [];
            for (let i = 0; i < itemCount; i++) {
                $scope.items.push({name: "NAME" + i, value: "VALUE" + i});
            }
            compile(listviewHtml);
            const items = element.find(".list-group-item");
            expect(items.length).toBe(itemCount);
        });

        const listviewWithTemplateUrlHtml = `<xui-listview items-source="items" template-url="item-template"/>`;

        it("uses listview's template", ()=> {
            $scope.items = [{name: "name", value: "value"}];
            compile(itemTemplate + listviewWithTemplateUrlHtml);
            const items = element.find(".list-group-item");
            expect($(items[0]).text().trim()).toBe("name = value");
        });

        it("uses item's template", ()=> {
            $scope.items = [{name: "name", value: "value", templateUrl: "item-template"}];
            compile(itemTemplate + listviewHtml);
            const items = element.find(".list-group-item");
            expect($(items[0]).text().trim()).toBe("name = value");
        });

        const listviewWithTemplateFuncHtml = `<xui-listview items-source="items" template-fn="getTemplate"/>`;

        it("uses listview's template function", ()=> {
            $scope.getTemplate = (item:any)=>item.src;
            $scope.items = [{src: "item-template", name: "name", value: "value"}];
            compile(itemTemplate + listviewWithTemplateFuncHtml);
            const items = element.find(".list-group-item");
            expect($(items[0]).text().trim()).toBe("name = value");
        });

        const listviewSelectionModeHtml = `<xui-listview items-source="items" selection-mode="{{mode}}"/>`;

        it("allows item selection by checkboxes", ()=> {
            $scope.items = [{templateUrl: "item-template", name: "name", value: "value"}];
            $scope.mode = "multi";
            compile(itemTemplate + listviewSelectionModeHtml);
            const checkboxes = element.find(".xui-checkbox");
            expect(checkboxes.length).toBe(1);
        });

        it("throws an error when invalid selection-mode is given", ()=> {
            $scope.items = [{templateUrl: "item-template", name: "name", value: "value"}];
            $scope.mode = "zblabl";
            const compilationFn = ()=> {
                compile(itemTemplate + listviewSelectionModeHtml);
            };
            expect(compilationFn).toThrowError();
        });

        const withController = `<xui-listview items-source="items" controller="controller"/>`;

        it("can call controller function in template", ()=> {
            $scope.items = [{templateUrl: "item-template", name: "name", value: "value"}];
            $templateCache.put("item-template",
                `<div class="controller-function-result">{{vm.getRandomNumber()}}</div>`);
            $scope.controller = {
                getRandomNumber: () => 4 // guaranteed to be random by fair dice roll
            };
            compile(withController);
            expect(element.find(".controller-function-result").text()).toBe("4");
        });

        it("is using track by functionality", () => {
            /*
            * can be verified with checking that the html elements not rerendered by changing the model
            */
            const itemCount = 5;
            $scope.items = [];
            $scope.trackBy = "value";
            for (let i = 0; i < itemCount; i++) {
                $scope.items.push({name: "NAME" + i, value: "VALUE" + i});
            }
            compile(listviewHtml);
            const firstItem = element.find(".list-group-item:first-child");
            firstItem.html("");
            $scope.items.push({name: "new", value: "newValue"});
            $scope.$apply();
            let firstItemAgain = element.find(".list-group-item:first-child");
            expect(firstItemAgain.html()).toBe("");
        });
    });
});
