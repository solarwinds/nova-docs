
/**
 * @ngdoc directive
 * @name xui.directive:xuiListview
 * @restrict E
 * @description
 * XUI ListView component. Supports row/list-item toast highlighting
 *  via {@link xui.services:xuiToastService ToastService}.
 *
 * @parameters
 * @param {string} name The name of the element.
 * @param {object []} items-source List of items {name, value, $templateUrl}.
 * @param {boolean} stripe Whether the rows should be striped.
 * @param {IEmptyData} empty-data Empty data parameters object
 * @param {boolean=} show-empty Show empty state or not(Hiding empty state before data is loaded for example)
 * @param {string} template-url Parameter specifying common URL for templates if none is provided by the item.
 * @param {function} template-fn (item:any)=>string function returning template based on given item.
 * @param {ListSelectionModeEnum} [selection-mode=disabled] Can be "single", "radio" or "multi".
 * Use "multi" to display checkboxes on every row. "Radio" has the same behavior than "single" but adds radio buttons
 * @param {string} selection-property Property of item that will be used for selection model.
 * @param {boolean} [selection-invert] Whether inner checkboxes should display inverted values.
 * Related only to selection-mode='multi'.
 * @param {string} [track-by] The property name that would be used for tracking by ngRepeat. If no value is specified,
 * or the property does not exist on the item, the auto-generated value by Angular hashing will be used as the key.
 * @param {object []|object} selection Selected rows/collection.
 * @param {any} [controller] Controller used in a template.
 * @param {string="regular"} [row-padding='regular'] Determines the padding of the row around the content. Options are:
 * 'regular' (15px), 'narrow' (15px; 7px), 'compact' ( 5px; 7px), or 'none' (0px).
 * @param {string} highlightText Value holder for text highlight in search used by other components
 * 
 * @example Example that demonstrates basic bindings via the xui-listview directive.
 * <example module="xui" deps="xui /js/vendor.js /js/xui.js /css/xui.css">
 *     <file src="src/components/listview/docs/listview-examples.html" name="index.html"></file>
 *     <file src="src/components/listview/docs/listview-examples.css" name="app.css"></file>
 *     <file src="src/components/listview/docs/listview-examples.js" name="app.js"></file>
 * </example>
 */
export default class Listview implements ng.IDirective {
    public static $inject = ["swUtil"];

    constructor(private swUtil:any) {
    }

    public restrict = "E";
    public scope = {
        vm: "=?controller" // we want this one to be present directly on scope
    };
    public bindToController = {
        name: "@?",
        itemsSource: "<",
        headerTemplateUrl: "@?",
        templateUrl: "@?",
        templateFn: "&?",
        emptyText: "@?", // [DEPRECATED]
        emptyTemplateUrl: "@?", // [DEPRECATED]
        emptyData: "=?",
        showEmpty: "<?",
        stripe: "<?",
        selectionMode: "@?",
        selectionProperty: "@?",
        selection: "=?",
        rowPadding: "@?",
        selectionInvert: "=?",
        trackBy: "@?",
        highlightText: "@?"
    };
    public controller = "xuiListviewController";
    public controllerAs = "ctrl"; // avoid conflict with supplied controller vm
    public templateUrl = "xui/components/listview/listview-directive.html";
    public replace = true;
    public transclude = false;

    public link = (scope:ng.IScope, element:ng.IAugmentedJQuery,
                   attrs:ng.IAttributes) => {
        this.swUtil.initComponent(attrs, "listview");
    };
}
