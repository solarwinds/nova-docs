import ListviewController from "./listview-controller";
import NotificationService from "../../services/notification-service";
import NotificationHandler = xui.NotificationHandler;

describe("components >", ()=> {
    describe("listview >", ()=> {
        describe("controller >", ()=> {
            let $controller:ng.IControllerService,
                ctrl:ListviewController;

            beforeEach(angular.mock.module("xui"));
            beforeEach(inject(($injector:any)=> {
                const $templateCache:ng.ITemplateCacheService = $injector.get("$templateCache");
                $templateCache.put("itemTemplate", "-");
                $templateCache.put("itemTemplate2", "-");
                $templateCache.put("controllerTemplate", "-");
                $templateCache.put("itemSrc", "-");

                const notificationSvc = jasmine.createSpyObj("xuiNotificationService", ["subscribe", "unsubscribe"]);
                notificationSvc.subscribe.and.callFake((channel:string, handler:NotificationHandler) => {return;});
                notificationSvc.unsubscribe.and.callFake((channel:string, handler:NotificationHandler) => {
                    return;
                });

                const $scope = $injector.get("$rootScope");
                const $log = $injector.get("$log");
                $controller = $injector.get("$controller");
                ctrl = <ListviewController>$controller("xuiListviewController",
                    {$templateCache, notificationSvc, $scope, $log});
            }));

            it("uses standard internal template", () => {
                ctrl.selectionMode = null;
                expect(ctrl.getInternalTemplateUrl())
                    .toBe("xui/components/listview/templates/listview-default.html");

                ctrl.selectionMode = null;
                expect(ctrl.getInternalTemplateUrl())
                    .toBe("xui/components/listview/templates/listview-default.html");
            });

            it("uses selectable internal template", () => {
                ctrl.selectionMode = "multi";
                expect(ctrl.getInternalTemplateUrl())
                    .toBe("xui/components/listview/templates/listview-multi.html");
                ctrl.selectionMode = "single";
                expect(ctrl.getInternalTemplateUrl())
                    .toBe("xui/components/listview/templates/listview-single.html");
                ctrl.selectionMode = "radio";
                expect(ctrl.getInternalTemplateUrl())
                    .toBe("xui/components/listview/templates/listview-radio.html");
            });

            it("uses item template", () => {
                let item1 = {templateUrl: "itemTemplate"};
                expect(ctrl.getTemplateUrl(item1)).toBe(item1.templateUrl);

                let item2 = {$templateUrl: "itemTemplate2"};
                expect(ctrl.getTemplateUrl(item2)).toBe(item2.$templateUrl);
            });

            it("uses controller template", () => {
                let item = {};
                ctrl.templateUrl = "controllerTemplate";
                expect(ctrl.getTemplateUrl(item)).toBe(ctrl.templateUrl);
            });

            it("uses controller template function", ()=> {
                ctrl.templateFn = () => ((item:any)=> item.src);
                let item:any = {src: "itemSrc"};
                expect(ctrl.getTemplateUrl(item)).toBe(item.src);
            });

            it("uses 'missing' template", () => {
                let item = {};
                expect(ctrl.getTemplateUrl(item))
                    .toBe("xui/components/listview/templates/listview-missing.html");
            });

            it("ctrl.isItemSelected(item) should return correct value for single selection mode", () => {
                let item: any;
                ctrl.selectionMode = "single";

                ctrl.selectionProperty = undefined;
                ctrl.selection = ["item1"];
                item = "item1";
                expect(ctrl.isItemSelected(item))
                    .toBe(true);
                item = "item2";
                expect(ctrl.isItemSelected(item))
                    .toBe(false);

                ctrl.selectionProperty = "selectionProp";
                ctrl.selection = ["item1"];
                item = {selectionProp: "item1"};
                expect(ctrl.isItemSelected(item))
                    .toBe(true);
                item = {selectionProp: "item2"};
                expect(ctrl.isItemSelected(item))
                    .toBe(false);
            });

            it("ctrl.isItemSelected(item) should return correct value for radio selection mode", () => {
                let item: any;
                ctrl.selectionMode = "radio";

                ctrl.selectionProperty = undefined;
                ctrl.selection = ["item1"];
                item = "item1";
                expect(ctrl.isItemSelected(item))
                    .toBe(true);
                item = "item2";
                expect(ctrl.isItemSelected(item))
                    .toBe(false);

                ctrl.selectionProperty = "selectionProp";
                ctrl.selection = ["item1"];
                item = {selectionProp: "item1"};
                expect(ctrl.isItemSelected(item))
                    .toBe(true);
                item = {selectionProp: "item2"};
                expect(ctrl.isItemSelected(item))
                    .toBe(false);
            });

            it("ctrl.isItemSelected(item) should return correct value for multi selection mode", () => {
                let item: any;
                ctrl.selectionMode = "multi";

                ctrl.selectionProperty = undefined;
                ctrl.selection = ["item1"];
                item = "item1";
                expect(ctrl.isItemSelected(item))
                    .toBe(true);
                item = "item2";
                expect(ctrl.isItemSelected(item))
                    .toBe(false);
                ctrl.selection = ["item1", "item2"];
                item = "item1";
                expect(ctrl.isItemSelected(item))
                    .toBe(true);
                ctrl.selection = ["item1", "item3"];
                item = "item2";
                expect(ctrl.isItemSelected(item))
                    .toBe(false);

                ctrl.selectionProperty = "selectionProp";
                ctrl.selection = ["item1"];
                item = {selectionProp: "item1"};
                expect(ctrl.isItemSelected(item))
                    .toBe(true);
                item = {selectionProp: "item2"};
                expect(ctrl.isItemSelected(item))
                    .toBe(false);
                ctrl.selection = ["item1", "item2"];
                item = {selectionProp: "item1"};
                expect(ctrl.isItemSelected(item))
                    .toBe(true);
                item = {selectionProp: "item2"};
                expect(ctrl.isItemSelected(item))
                    .toBe(true);
                item = {selectionProp: "item3"};
                expect(ctrl.isItemSelected(item))
                    .toBe(false);
            });
        });
    });
});
