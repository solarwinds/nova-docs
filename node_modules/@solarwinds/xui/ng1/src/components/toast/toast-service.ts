import IToastService = xui.IToastService;
import NotificationService from "../../services/notification-service";
import {SwitchState} from "../../services/notification-args";
import IToastOptions = xui.IToastOptions;
import IMap = xui.IMap;
import ISanitizeService = angular.sanitize.ISanitizeService;

/**
 * @ngdoc service
 *
 * @name xui.services:xuiToastService
 *
 * @description
 * Service that provides {@link https://codeseven.github.io/toastr/ toastr} notifications.
 *
 * @example
 * <example module="xui">
 *   <file src="src/components/toast/docs/toast-examples.html" name="index.html"></file>
 *   <file src="src/components/toast/docs/toast-examples.js" name="app.js"></file>
 * </example>
 */

export default class ToastService implements IToastService {
    /** @ngInject */
    constructor(private xuiNotificationService:NotificationService,
                private $rootScope:ng.IRootScopeService,
                private $log:ng.ILogService,
                private $sanitize:ISanitizeService) {}

    /** @ngdoc method
     *  @name clear
     *  @methodOf xui.services:xuiToastService
     *  @description Clears all toast messages.
     **/
    public clear = toastr.clear;

    /** @ngdoc method
     *  @name warning
     *  @methodOf xui.services:xuiToastService
     *  @description Displays a message with "warning" stylings based on the parameters provided.
     *  @param {string} message Text displayed in the body of the message.
     *  @param {string=} title Title of the message.
     *  @param {IToastOptions=} options Options to tailor the message.
     *  @param {any=} itemsToHighlight To be highlighted while the message is displayed.
     **/
    public warning = (message: string,
                      title?: string,
                      options?: IToastOptions,
                      itemsToHighlight?:any[]) => {
        toastr.warning(this.sanitize(message),
            this.sanitize(title),
            this.assembleOptions(options, itemsToHighlight));
        this.notifyHighlights(itemsToHighlight, "warning");
    };

    /** @ngdoc method
     *  @name info
     *  @methodOf xui.services:xuiToastService
     *  @description Displays an informational message based on the parameters provided.
     *  @param {string} message Text displayed in the body of the message.
     *  @param {string=} title Title of the message.
     *  @param {IToastOptions=} options Options to tailor the message.
     *  @param {any=} itemsToHighlight To be highlighted while the message is displayed.
     **/
    public info = (message: string,
                   title?: string,
                   options?: IToastOptions,
                   itemsToHighlight?:any[]) => {
        toastr.info(this.sanitize(message),
            this.sanitize(title),
            this.assembleOptions(options, itemsToHighlight));
        this.notifyHighlights(itemsToHighlight, "info");
    };

    /** @ngdoc method
     *  @name success
     *  @methodOf xui.services:xuiToastService
     *  @description Displays a message with "success" stylings based on the parameters provided.
     *  @param {string} Message text displayed in the body of the message.
     *  @param {string=} title Title of the message.
     *  @param {IToastOptions=} options Options to tailor the message.
     *  @param {any=} itemsToHighlight To be highlighted while the message is displayed.
     **/
    public success = (message: string,
                      title?: string,
                      options?: IToastOptions,
                      itemsToHighlight?:any[]) => {
        toastr.success(this.sanitize(message),
            this.sanitize(title),
            this.assembleOptions(options, itemsToHighlight));
        this.notifyHighlights(itemsToHighlight, "success");
    };

    /** @ngdoc method
     *  @name error
     *  @methodOf xui.services:xuiToastService
     *  @description Displays a message with "error" stylings based on the parameters provided. Note that
     *              error toast messages are always displayed in the top-right corner.
     *  @param {string} message Text displayed in the body of the message.
     *  @param {string=} title Title of the message.
     *  @param {IToastOptions=} options Options to taylor the message.
     *  @param {any=} itemsToHighlight To be highlighted while the message is displayed.
     **/
    public error = (message: string,
                    title?: string,
                    options?: IToastOptions,
                    itemsToHighlight?:any[]) => {
        options = <IToastOptions>_.extend(options || {}, {
            positionClass: "toast-top-right",
            timeOut: 30000,
            extendedTimeOut: 10000
        });

        if (options.stickyError) {
            options.timeOut = 0;
            options.extendedTimeOut = 0;
            options.closeButton = false;
        }

        toastr.error(this.sanitize(message),
            this.sanitize(title),
            this.assembleOptions(options, itemsToHighlight));
        this.notifyHighlights(itemsToHighlight, "success");
    };

    private assembleOptions = (options: IToastOptions,
                                 itemsToHighlight:any[]):ToastrOptions => {
        if (!options) {
            return options;
        }

        const toastrOptions:ToastrOptions = _.extend({}, options);

        if (angular.isArray(itemsToHighlight) && itemsToHighlight.length > 0) {
            toastrOptions.onHidden = ():void => {
                this.$rootScope.$apply(() => {
                    this.xuiNotificationService.post(this.xuiNotificationService.Channel.highlight, {
                        highlightState: SwitchState.off,
                        items: itemsToHighlight
                    });
                    if (options && angular.isFunction(options.onHidden)) {
                        options.onHidden();
                    }
                });
            };
        }

        return toastrOptions;
    };

    private notifyHighlights = (itemsToHighlight:any[], status:string):void => {
        if (itemsToHighlight) {
            this.xuiNotificationService.post(this.xuiNotificationService.Channel.highlight, {
                highlightState: SwitchState.on,
                status: status,
                items: itemsToHighlight
            });
        }
    };

    private sanitize = (text:string):string => {
        if (!text) {
            return;
        }
        return this.$sanitize(text);
    };
}

export class ToastServiceObsolete extends ToastService {
    public static $inject = ["$log", "xuiNotificationService", "$rootScope","$sanitize"];
    constructor($log:ng.ILogService, notificationService:NotificationService, $rootScope:ng.IRootScopeService,
                $sanitize:ISanitizeService) {
        super(notificationService, $rootScope, $log, $sanitize);
        $log.warn("toastService is now deprecated. Use xuiToastService instead.");
    }
}
