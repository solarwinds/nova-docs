///<reference path="../../ref.d.ts"/>

import ToastController from "./toast-controller";
import NotificationService from "../../services/notification-service";
import NotificationHandler = xui.NotificationHandler;
import {SwitchState} from "../../services/notification-args";

describe("components >", ()=> {
    describe("toast >", ()=> {
        describe("controller >", ()=> {
            let $controller:ng.IControllerService,
                $scope:ng.IScope,
                $timeout:ng.ITimeoutService,
                ctrl:ToastController,
                highlightHandler:NotificationHandler,
                mockModel = {model:"mockModel"},
                successStatus = "success";

            let getMockArgs = (state:SwitchState, model:any) => {
                return {
                    highlightState: state,
                    status:successStatus,
                    items:[model],
                    itemType:""
                };
            };

            beforeEach(angular.mock.module("xui"));
            beforeEach(inject(($injector:any)=> {
                const notificationSvc = jasmine.createSpyObj("xuiNotificationService", ["subscribe", "unsubscribe"]);
                notificationSvc.subscribe.and.callFake((channel:string, handler:NotificationHandler) => {
                    highlightHandler = handler;
                    return;
                });
                notificationSvc.unsubscribe.and.callFake((channel:string, handler:NotificationHandler) => {
                    highlightHandler = null;
                    return;
                });

                $scope = $injector.get("$rootScope");
                $timeout = $injector.get("$timeout");
                $controller = $injector.get("$controller");
                ctrl = <ToastController>$controller("xuiToastController", {$scope, notificationSvc, $timeout});
            }));

            it("set the element to be highlighted", () => {
                const element = angular.element("<div id='highlightTestEl'></div>");
                expect(ctrl.element).toBeUndefined();
                ctrl.setElement(element);
                expect(ctrl.element).toBe(element);
            });

            it("does nothing to the element when the model is not a match", () => {
                const element = angular.element("<div id='highlightTestEl'></div>");
                ctrl.setElement(element);
                ctrl.xuiToast = () => mockModel;
                const args = getMockArgs(SwitchState.on, {model:"someOtherModel"});
                ctrl.onHighlight(args);
                expect(element.hasClass(successStatus)).toBe(false);
                expect(element.hasClass(ctrl.highlightOnClass)).toBe(false);
                expect(element.hasClass(ctrl.highlightFadeOutClass)).toBe(false);
            });

            it("highlights the element when highlightState is 'on' and the model is a match", () => {
                const element = angular.element("<div id='highlightTestEl'></div>");
                ctrl.setElement(element);
                ctrl.xuiToast = () => mockModel;
                const args = getMockArgs(SwitchState.on, mockModel);
                ctrl.onHighlight(args);
                expect(element.hasClass(ctrl.highlightOnClass)).toBe(true);
                expect(element.hasClass(ctrl.highlightFadeOutClass)).toBe(false);
            });

            it("turns off element highlights when highlightState is 'off' and the model is a match", () => {
                const element = angular.element("<div id='highlightTestEl'></div>");
                ctrl.setElement(element);
                ctrl.xuiToast = () => mockModel;
                const args = getMockArgs(SwitchState.on, mockModel);
                ctrl.onHighlight(args);
                expect(element.hasClass(successStatus)).toBe(true);
                expect(element.hasClass(ctrl.highlightOnClass)).toBe(true);
                expect(element.hasClass(ctrl.highlightFadeOutClass)).toBe(false);

                args.highlightState = SwitchState.off;
                ctrl.onHighlight(args);
                expect(element.hasClass(successStatus)).toBe(false);
                expect(element.hasClass(ctrl.highlightOnClass)).toBe(false);
                expect(element.hasClass(ctrl.highlightFadeOutClass)).toBe(true);
            });

            it("applies the appropriate highlight status to the element when highlight is added", () => {
                const element = angular.element("<div id='highlightTestEl'></div>");
                ctrl.setElement(element);
                ctrl.xuiToast = () => mockModel;
                const args = getMockArgs(SwitchState.on, mockModel);
                ctrl.onHighlight(args);
                expect(element.hasClass(successStatus)).toBe(true);
                expect(element.hasClass("info")).toBe(false);
                expect(element.hasClass(ctrl.highlightOnClass)).toBe(true);

                args.highlightState = SwitchState.off;
                ctrl.onHighlight(args);
                expect(element.hasClass(successStatus)).toBe(false);
                expect(element.hasClass(ctrl.highlightOnClass)).toBe(false);
                expect(element.hasClass(ctrl.highlightFadeOutClass)).toBe(true);

                args.highlightState = SwitchState.on;
                args.status = "info";
                ctrl.onHighlight(args);
                expect(element.hasClass(successStatus)).toBe(false);
                expect(element.hasClass("info")).toBe(true);
                expect(element.hasClass(ctrl.highlightOnClass)).toBe(true);
            });

            it("ignores requests to highlight when already highlighted", () => {
                const element = angular.element("<div id='highlightTestEl'></div>");
                ctrl.setElement(element);
                ctrl.xuiToast = () => mockModel;
                const args = getMockArgs(SwitchState.on, mockModel);
                ctrl.onHighlight(args);
                expect(element.hasClass(successStatus)).toBe(true);
                expect(element.hasClass("info")).toBe(false);
                expect(element.hasClass(ctrl.highlightOnClass)).toBe(true);

                args.status = "info";
                ctrl.onHighlight(args);
                expect(element.hasClass(successStatus)).toBe(true);
                expect(element.hasClass("info")).toBe(false);
                expect(element.hasClass(ctrl.highlightOnClass)).toBe(true);
            });
        });
    });
});
