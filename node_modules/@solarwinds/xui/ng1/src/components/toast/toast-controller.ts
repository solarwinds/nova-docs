/// <reference path="../../ref.d.ts" />

import INotificationService = xui.INotificationService;
import {SwitchState} from "../../services/notification-args";
import {IHighlightArgs} from "../../services/notification-args";
import IAugmentedJQuery = angular.IAugmentedJQuery;
export default class ToastController {
    public xuiToast:any;
    public isHighlighted:boolean;
    public status:string;
    public element:IAugmentedJQuery;

    public get highlightOnClass() { return "highlight-on"; }
    public get highlightFadeOutClass() { return "highlight-fadeout"; }

    public static $inject = ["$scope", "xuiNotificationService", "$timeout"];
    constructor(private $scope:ng.IScope,
                private notificationService:INotificationService,
                private $timeout:ng.ITimeoutService) {
        this.notificationService.subscribe(this.notificationService.Channel.highlight, this.onHighlight);
        $scope.$on("$destroy", () => {
            this.notificationService.unsubscribe(this.notificationService.Channel.highlight, this.onHighlight);
        });
    }

    public setElement = (element:IAugmentedJQuery):void => {
        this.element = element;
    };

    public onHighlight = (args:any): void => {
        if (!this.element) {
            return;
        }
        const highlightArgs = <IHighlightArgs>args;
        _.forEach(highlightArgs.items, (item:any) => {
            if (this.shouldElementBeHighlighted(item)) {
                if (highlightArgs.highlightState === SwitchState.on) {
                    if (this.isHighlighted) {
                        return;
                    }
                    this.isHighlighted = true;
                    this.status = highlightArgs.status;
                    this.element.addClass(this.highlightOnClass);
                    this.element.addClass(this.status);
                } else if (this.isHighlighted) {
                    this.element.removeClass(this.highlightOnClass);
                    this.element.removeClass(this.status);
                    this.element.addClass(this.highlightFadeOutClass);
                    this.isHighlighted = false;
                    this.$timeout(() => {
                        this.element.removeClass(this.highlightFadeOutClass);
                    }, 3000);
                }
            }
        });
    };

    private shouldElementBeHighlighted = (itemToHighlight: any): boolean => {
        const toastItem = this.xuiToast();
        const hashKey = "$$hashKey";

        // fix for xui-grid, $$hashKey props might be different, therefore omitted
        return _.isEqual(
            _.omit(itemToHighlight, [hashKey]),
            _.omit(toastItem, [hashKey])
        );
    }
}
