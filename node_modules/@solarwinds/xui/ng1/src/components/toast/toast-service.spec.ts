import ToastService from "./toast-service";
import IToastOptions = xui.IToastOptions;
import IToastService = xui.IToastService;
import INotificationService = xui.INotificationService;
import {IHighlightArgs} from "../../services/notification-args";
import {SwitchState} from "../../services/notification-args";

describe("services >", () => {
    describe("toast-service >", () => {
        let toastService:IToastService,
            notificationService:INotificationService,
            notificationChannel:string,
            notificationArgs:any,
            onHiddenDelegate:() => void,
            emptyToastOptions:IToastOptions = {},
            stickyErrorOptions:IToastOptions = {stickyError:true},
            toastDisplays = {
                success: {  msg:"", title:"", options:emptyToastOptions },
                info: {  msg:"", title:"", options:emptyToastOptions },
                warning: {  msg:"", title:"", options:emptyToastOptions },
                error: {  msg:"", title:"", options:emptyToastOptions }
            },
            toast = {
                success: (message: string,
                          title?: string,
                          options?: IToastOptions) => {
                    toastDisplays.success.msg = message;
                    toastDisplays.success.title = title;
                    toastDisplays.success.options = options;
                    if (angular.isDefined(options) && angular.isDefined(options.onHidden)) {
                        onHiddenDelegate = options.onHidden;
                    }
                },
                info: (message: string,
                       title?: string,
                       options?: IToastOptions) => {
                    toastDisplays.info.msg = message;
                    toastDisplays.info.title = title;
                    toastDisplays.info.options = options;
                },
                warning: (message: string,
                          title?: string,
                          options?: IToastOptions) => {
                    toastDisplays.warning.msg = message;
                    toastDisplays.warning.title = title;
                    toastDisplays.warning.options = options;
                },
                error: (message: string,
                        title?: string,
                        options?: IToastOptions) => {
                    toastDisplays.error.msg = message;
                    toastDisplays.error.title = title;
                    toastDisplays.error.options = options;
                }
            };

        beforeEach(angular.mock.module("xui"));
        beforeEach(inject(($injector:any) => {

            toastService = $injector.get("xuiToastService");

            spyOn(toastr, "success").and.callFake(toast.success);
            spyOn(toastr, "info").and.callFake(toast.info);
            spyOn(toastr, "warning").and.callFake(toast.warning);
            spyOn(toastr, "error").and.callFake(toast.error);

            notificationService = $injector.get("xuiNotificationService");
            spyOn(notificationService, "post").and.callFake((channel:string, args:any): void => {
                notificationChannel = channel;
                notificationArgs = args;
            });
        }));

        it("should display success message", () => {
            expect(toastDisplays.success.msg).toBe("");
            const msg = "hello info toast!";
            const title = "Success";
            toastService.success(msg, title);
            expect(toastDisplays.success.msg).toBe(msg);
            expect(toastDisplays.success.title).toBe(title);
            expect(toastDisplays.success.options).toBeUndefined();
        });

        it("should display info message", () => {
            expect(toastDisplays.info.msg).toBe("");
            const msg = "hello info toast!";
            const title = "Info";
            toastService.info(msg, title);
            expect(toastDisplays.info.msg).toBe(msg);
            expect(toastDisplays.info.title).toBe(title);
            expect(toastDisplays.info.options).toBeUndefined();
        });

        it("should display warning message", () => {
            expect(toastDisplays.warning.msg).toBe("");
            const msg = "hello warning toast!";
            const title = "Warning";
            toastService.warning(msg, title);
            expect(toastDisplays.warning.msg).toBe(msg);
            expect(toastDisplays.warning.title).toBe(title);
            expect(toastDisplays.warning.options).toBeUndefined();
        });

        it("should display error message", () => {
            expect(toastDisplays.error.msg).toBe("");
            const msg = "hello error toast!";
            const title = "Error";
            toastService.error(msg, title);
            expect(toastDisplays.error.msg).toBe(msg);
            expect(toastDisplays.error.title).toBe(title);
            expect(toastDisplays.error.options).toBeDefined();
            expect(toastDisplays.error.options.positionClass).toBe("toast-top-right");
            expect(toastDisplays.error.options.timeOut).toBe(30000);
        });

        it("should display error message indefinitely", () => {
            const msg = "permanent error";
            const title = "Error";
            toastService.error(msg, title, stickyErrorOptions);
            expect(toastDisplays.error.msg).toBe(msg);
            expect(toastDisplays.error.title).toBe(title);
            expect(toastDisplays.error.options).toBeDefined();
            expect(toastDisplays.error.options.timeOut).toBe(0);
        });

        it("should post a highlight 'on' notification", () => {
            const msg = "hello toast!";
            const title = "Highlights";
            const highlightObj = { name: "toBeHighlighted" };
            expect(notificationChannel).toBeUndefined();
            expect(notificationArgs).toBeUndefined();
            toastService.success(msg, title, emptyToastOptions, [highlightObj]);
            expect(notificationChannel).toBe(notificationService.Channel.highlight);
            const highlightArgs = <IHighlightArgs>notificationArgs;
            expect(highlightArgs).toBeDefined();
            expect(highlightArgs.highlightState).toBe(SwitchState.on);
            expect(highlightArgs.items.length).toEqual(1);
            expect(highlightArgs.items[0]).toEqual(highlightObj);
        });

        it("should post a highlight 'off' notification on-toast-hidden", () => {
            const msg = "hello toast!";
            const title = "Highlights";
            let wasMyOnHiddenCalled = false;
            const options:IToastOptions = { onHidden: () => wasMyOnHiddenCalled = true };
            const highlightObj = { name: "toBeHighlighted" };
            toastService.success(msg, title, options, [highlightObj]);
            expect(notificationChannel).toBe(notificationService.Channel.highlight);
            notificationChannel = "";
            expect(wasMyOnHiddenCalled).toBe(false);
            expect(onHiddenDelegate).toBeDefined();
            onHiddenDelegate();
            // since the toast service effectively replaces the onHidden callback, make sure the consumer
            // callback gets invoked.
            expect(wasMyOnHiddenCalled).toBe(true);
            expect(notificationChannel).toBe(notificationService.Channel.highlight);
            const highlightArgs = <IHighlightArgs>notificationArgs;
            expect(highlightArgs).toBeDefined();
            expect(highlightArgs.highlightState).toBe(SwitchState.off);
            expect(highlightArgs.items.length).toEqual(1);
            expect(highlightArgs.items[0]).toEqual(highlightObj);
        });

        it("should remove script tags from message", () => {
            const msgFrags = ["hello, i am a ",
                "<script>sinister</script>",
                "<script type='text/javascript'>sinister</script>",
                "<sCriPt >sinister, evil, very bad stuff</sCriPt>",
                ` <a href="http://www.dictionary.com/browse/sanitized?s=t">sanitized</a> `,
                "message!"];
            const title = "Title";
            const sanitizedMsg = [msgFrags[0], msgFrags[4], msgFrags[5]].join("");
            const testMsg1 = [msgFrags[0], msgFrags[1], msgFrags[4],  msgFrags[5]].join("");
            toastService.info(testMsg1, title);
            expect(toastDisplays.info.msg).toBe(sanitizedMsg);
            const testMsg2 = [msgFrags[0], msgFrags[2], msgFrags[4],  msgFrags[5]].join("");
            toastService.info(testMsg2, title);
            expect(toastDisplays.info.msg).toBe(sanitizedMsg);
            const testMsg3 = [msgFrags[0], msgFrags[3], msgFrags[4],  msgFrags[5]].join("");
            toastService.info(testMsg3, title);
            expect(toastDisplays.info.msg).toBe(sanitizedMsg);
        });

        it("should remove script tags from title", () => {
            const title = "<sCriPt type='text/javascript'>Sinister</sCriPt> Title";
            const msg = "hello";
            toastService.info(msg, title);
            expect(toastDisplays.info.msg).toBe(msg);
            expect(toastDisplays.info.title).toBe(" Title");
        });

        it("should sanitize iframe", () => {
            const title = "<iframe src='www.google.com'></iframe><a>foo</a>";
            const msg = "hello";
            toastService.info(msg, title);
            expect(toastDisplays.info.msg).toBe(msg);
            expect(toastDisplays.info.title).toBe("<a>foo</a>");
        });

        it("should gracefully handle unitialized text", () => {
            let title:string;
            let msg:string;
            toastService.info(msg, title);
            expect(toastDisplays.info.msg).toBeUndefined();
            expect(toastDisplays.info.title).toBeUndefined();
        });
    });
});
