/// <reference path="../../ref.d.ts" />

import Inject from "../../decorators/di";

class DatetimePickerController {

    public model:Date;
    public ngModel:ng.INgModelController;
    public date:Date;
    public time:Date;

    constructor(@Inject("$scope") $scope:ng.IScope) {
        this.updateChildrenModels();

        if (angular.isUndefined(this.model)) {
            this.model = null;
        }

        $scope.$watch(()=> this.model, (newValue:Date, oldValue:Date)=> {
            const combinedMoment = this.getCombinedMoment();
            if ((combinedMoment && Math.abs(combinedMoment.diff(moment(newValue), "minute")) <= 0) ||
                (oldValue === newValue)) {
                return;
            }
            //console.log("External model change to:", newValue, "from:", oldValue);

            this.updateChildrenModels();
        });

        $scope.$watch(()=> this.time, this.checkedUpdateParentModel);
        $scope.$watch(()=> this.date, this.checkedUpdateParentModel);
    }

    private checkedUpdateParentModel = (newValue:Date, oldValue:Date)=> {
        if (newValue !== oldValue) {
            this.updateParentModel();
        }
    };

    private updateParentModel = ()=> {
        const combinedMoment = this.getCombinedMoment();
        const viewValue = combinedMoment ? combinedMoment.toDate() : null;
        //console.log("Combined model to:", viewValue);
        this.ngModel.$setViewValue(viewValue);
    };

    private updateChildrenModels() {
        if (this.model != null) {
            this.date = moment(this.model).toDate();
            this.time = moment(this.model).toDate();
        }
    }

    private getCombinedMoment():moment.Moment {
        if (!this.date || !this.time) {
            return null;
        }
        const timeMoment = moment(this.time);
        const dateMoment = moment(this.date);
        return dateMoment.set({
            hours: timeMoment.hours(),
            minutes: timeMoment.minutes()
        });
    }

}

export default DatetimePickerController;
