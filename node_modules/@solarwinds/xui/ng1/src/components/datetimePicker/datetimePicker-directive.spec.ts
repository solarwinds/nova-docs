import DatetimePickerController from "./datetimePicker-controller";
import SpecHelper from "../../specHelper";
import {ITestScope} from "../../specHelper";

describe("components >", ()=> {
    describe("datetimePicker >", ()=> {
        let $controller:ng.IControllerService,
            $compile:ng.ICompileService,
            $scope:ITestScope,
            ctrl:DatetimePickerController;

        const modelValue = moment().set({year: 2101, day: 5, month: 2, hour: 18, minute: 15});
        const html = `<xui-datetime-picker ng-model="model"></xui-datetime-picker>`;

        beforeEach(angular.mock.module("xui"));
        beforeEach(inject(($injector:any)=> {
            $controller = $injector.get("$controller");
            $scope = $injector.get("$rootScope");
            $compile = $injector.get("$compile");

            $scope["model"] = modelValue.toDate();
            const element = SpecHelper.getCompiledElement($compile, $scope, html);

            ctrl = element.controller("xuiDatetimePicker");
        }));

        describe("when parent model is updated", ()=> {
            it("distributes the changes to the children values", ()=> {
                const momentDate = moment(ctrl.date);
                expect(momentDate.get("year")).toBe(modelValue.get("year"));
                expect(momentDate.get("month")).toBe(modelValue.get("month"));
                expect(momentDate.get("day")).toBe(modelValue.get("day"));

                const momentTime = moment(ctrl.time);
                expect(momentTime.get("hour")).toBe(modelValue.get("hour"));
                expect(momentTime.get("minute")).toBe(modelValue.get("minute"));
            });
        });

        describe("when child model is updated", ()=> {
            it("distributes the changes to the parent model", ()=> {
                const timeValue = moment().set({hour: 18, minute: 15});
                const dateValue = moment().set({year: 2101, date: 5, month: 2});
                ctrl.time = timeValue.toDate();
                ctrl.date = dateValue.toDate();

                $scope.$apply();

                const modelMoment = moment(ctrl.model);
                expect(modelMoment.get("year")).toBe(dateValue.get("year"));
                expect(modelMoment.get("month")).toBe(dateValue.get("month"));
                expect(modelMoment.get("day")).toBe(dateValue.get("day"));
                expect(modelMoment.get("hour")).toBe(timeValue.get("hour"));
                expect(modelMoment.get("minute")).toBe(timeValue.get("minute"));
            });
        });

    });
});
