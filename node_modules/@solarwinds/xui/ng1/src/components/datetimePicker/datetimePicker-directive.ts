/// <reference path="../../ref.d.ts" />

import DatetimePickerController from "./datetimePicker-controller";
import InputProxyService from "../../services/inputProxy-service";
import Inject from "../../decorators/di";
import IAngularEvent = angular.IAngularEvent;

/**
 * @ngdoc directive
 * @name xui.directive:xuiDatetimePicker
 * @restrict E
 *
 * @description
 * XUI component for date and time selection.
 *
 * @parameters
 * @param {date} ngModel `ng-model` is supported to provide underlying data for this component.
 * @param {string=} caption Label of this component.
 * @param {string=} name Name to be used for form level validation.
 * @param {boolean=} is-required Make this component fail if the value is not fully specified (date and time have to
 * be filled in).
 * @param {boolean=} is-disabled Whether this component is enabled or not.
 * @param {date} min-date Limit minimal available date.
 * @param {date} max-date Limit maximum available date.
 * @param {string=} display-mode.
 * <p>Possible value: <code>inline</code> - for displaying inline version of date/time picker (on one line).
 * The inline version of date/time picker uses no outer margins to make it fit into any tight space layout scenario
 * without further tweaks.
 * </p>
 *
 * @example
 * <example module="xui">
 *   <file src="src/components/datetimePicker/docs/datetimePicker-examples.html" name="index.html"></file>
 *   <file src="src/components/datetimePicker/docs/datetimePicker-examples.js" name="app.js"></file>
 * </example>
 */
class DatetimePicker implements ng.IDirective {

    public restrict = "E";
    public templateUrl = "xui/components/datetimePicker/datetimePicker-directive.html";
    public replace = true;
    public scope = {};
    public transclude = true;
    public bindToController = {
        model: "=ngModel",
        caption: "@",
        name: "@",
        isRequired: "<?",
        isDisabled: "<?",
        maxDate: "<?",
        minDate: "<?",
        displayMode: "@"
    };
    public require = ["xuiDatetimePicker", "ngModel"];
    public controller = "xuiDatetimePickerController";
    public controllerAs = "vm";

    constructor(@Inject("xuiInputProxyService") private xuiInputProxyService: InputProxyService) {
    }

    public compile = (element: ng.IAugmentedJQuery, attrs: ng.IAttributes) => {
        const timePicker = element.find("xui-time-picker");
        const timePickerHandlers = this.xuiInputProxyService.proxyAttributesCompile(attrs, timePicker);

        const datePicker = element.find("xui-date-picker");
        const datePickerHandlers = this.xuiInputProxyService.proxyAttributesCompile(attrs, datePicker);

        const inline = attrs["displayMode"] === "inline";
        if (inline) {
            element.addClass("xui-datetime-picker--inline");
            element.find("xui-time-picker").addClass("xui-dropdown--inline");
        }

        return {
            post: (scope: ng.IScope,
                   iElement: ng.IAugmentedJQuery,
                   iAttrs: ng.IAttributes,
                   controllers: any) => {
                const datetimePickerCtrl: DatetimePickerController = controllers[0];
                datetimePickerCtrl.ngModel = controllers[1];

                this.xuiInputProxyService.proxyAttributesLink(timePickerHandlers, datetimePickerCtrl, scope);
                this.xuiInputProxyService.proxyAttributesLink(datePickerHandlers, datetimePickerCtrl, scope);
            }
        };
    };

}

export default DatetimePicker;
