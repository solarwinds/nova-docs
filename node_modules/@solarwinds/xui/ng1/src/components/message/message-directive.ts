/**
 * @ngdoc directive
 * @name xui.directive:xuiMessage
 * @restrict E
 *
 * @description
 * XUI wrapper for displaying different kind of messages. Message content can be text or any valid HTML code.
 *
 * @parameters
 * @param {string} name Name of the element.
 * @param {string} type Message type. Values: 'ok', 'success', 'error', 'info', 'hint', 'warning', or 'critical'.
 * @param {boolean} allow-dismiss Set to true if the message can be dismissed by the user.
 * @param {function} on-dismiss ()=>boolean Callback function that is executed when the user has asked to dismiss
 *                                          the message.
 *
 * @example
 *    <example module="xui">
 *        <file src="src/components/message/docs/message-examples.html" name="index.html"></file>
 *        <file src="src/components/message/docs/message-examples.js" name="script.js"></file>
 *    </example>
 */

export interface IMessageScope extends ng.IScope {
    type:string;
    icon:string;
    allowDismiss:boolean|string;
    dismissMessage():void;
    onDismiss():boolean;
}

const iconMap:{[id:string]:string} = {
    "ok": "severity_ok",
    "success": "severity_ok",
    "error": "severity_error",
    "warning": "severity_warning",
    "critical": "severity_critical",
    "info": "severity_info",
    "hint": "severity_tip"
};

/**
 * Directive function for message component
 */
export class Message implements ng.IDirective {
    public static $inject = ["swUtil"];

    constructor(private swUtil:any) {
    }

    public restrict = "E";
    public templateUrl = "xui/components/message/message-directive.html";
    public replace = true;
    public transclude = true;
    public scope = {
        name: "@?",
        type: "@?",
        allowDismiss: "@?",
        onDismiss: "&?"
    };

    public link = (scope:IMessageScope, element:ng.IAugmentedJQuery, attrs:ng.IAttributes) => {
        // name
        this.swUtil.initComponent(attrs, "message");

        // allowDismiss
        if (scope.allowDismiss === true || scope.allowDismiss === "true") {
            element.addClass("xui-message-allow-dismiss");

            scope.dismissMessage = () => {
                if (angular.isFunction(scope.onDismiss)) {
                    if (scope.onDismiss() === false) {
                        return;
                    }
                }

                element.animate({height: 0, opacity: 0}, 300, () => {
                    element.remove();
                });
            };
        }

        // type
        let type = attrs["type"];
        if (type) {
            type = type.toLowerCase();
            element.addClass("xui-message-" + type);

            scope.icon = iconMap[type] || "severity_unknown";
        }
    };
}
