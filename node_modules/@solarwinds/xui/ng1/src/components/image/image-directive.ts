import * as _ from "lodash";

/**
 * @ngdoc directive
 * @name xui.directive:xuiImage
 * @restrict E
 *
 * @description
 * XUI wrapper for images.
 *
 * @parameters
 * @param {string} image The image to be rendered. Able to handle custom paths and default graphics library. Supported
 * images: "sw-logo", "no-search-results", "no-alerts", "no-data-to-show", "ok-robot", "404-robot", "500-robot",
 * "empty-dashboard".
 * @param {string=} [size=70% of parent block] Width, specified in "px" or "%", calculated from the parent block (height
 * calculates automatically based on origin image ratio).
 * @param {string=} [float=none] Options are "left", "right", or "centered".
 * @param {string=} [margin="large"] Options are "small" or "large".
 *
 * @example
 *    <example module="xui">
 *        <file src="src/components/image/docs/image-examples.html" name="index.html"></file>
 *        <file src="src/components/image/docs/image-examples.js" name="app.js"></file>
 *    </example>
 */

const images = require<any[]>("../../../../data/images.json");

export interface IImageScope extends ng.IScope {
}

export class Image implements ng.IDirective {

    public static $inject = ["swUtil"];

    public restrict = "E";
    public templateUrl = "xui/components/image/image-directive.html";
    public replace = true;
    public transclude = false;
    public scope = {
        image: "@",
        size: "@",
        float: "@?",
        margin: "@?",
    };

    constructor(private swUtil: any) {
    }

    public link = (scope: ng.IScope, element: ng.IAugmentedJQuery, attrs: ng.IAttributes): void => {
        this.renderImage(element, attrs);
    };

    private renderImage = (element: ng.IAugmentedJQuery, attrs: ng.IAttributes) => {

        const imageName = attrs["image"];
        const imageSize = attrs["size"];
        const imageFloat = attrs["float"];
        const imageMargin = attrs["margin"];
        const image = this.getImage(imageName);

        if (angular.isObject(image) && image.code) {
            element.append(image.code);
        } else {
            element.append("<img src='" + imageName + "' >");
        }

        if (imageSize) {
            if (_.endsWith(imageSize, "px") || _.endsWith(imageSize, "%")) {
                element.width(imageSize);
            } else {
                throw new Error("Image size should be specified in 'px' or '%'");
            }
        }

        if (imageFloat) {
            element.addClass("xui-image__" + imageFloat);
        }

        if (imageMargin) {
            element.addClass("xui-image__margin-" + imageMargin);
        }

    };

    private getImage = (imageName: string) => {

        let imageObj = _.find(images, function (el: any) {
            return el.name === imageName;
        });

        return imageObj ? imageObj : imageName;
    };

}
