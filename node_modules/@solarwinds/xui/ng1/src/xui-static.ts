/// <reference path="ref.d.ts" />

import Module from "./common/module";
import IModule = xui.IModule;
import IXuiStatic = xui.IXuiStatic;
import xuiModule from "./xui-module";

declare var toDebugString:any;

class XuiStatic implements IXuiStatic {

    public apiKey:string;
    public translations:{[key:string]:string};
    public region:string;
    public module:IModule;
    public version = {
        full: "BUILDMEISTER_VERSION_FULL"
    };

    constructor(apiKey:string, region:string, module:IModule) {
        this.apiKey = apiKey;
        this.region = region;
        this.module = module;
    }

    public registerModule(name:string):IModule {
        return new Module(name);
    }

    public registerTranslations(translations:{[key:string]:string}):()=>void {
        return () => {
            this.translations = this.translations || {};

            for (let key in translations) {
                if (!this.translations.hasOwnProperty(key)) {
                    this.translations[key] = translations[key];
                }
            }
        };
    }

    /**
     * Pulled directly from the angular implementation and converted to TypeScript.
     * https://github.com/angular/angular.js/blob/master/src/minErr.js
     */
    public minErr(moduleName:string):((...templateArgs:any[])=> Error) {
        return (...templateArgs:any[]):Error => {
            let SKIP_INDEXES = 2,
                code = templateArgs[0],
                message = "[" + (moduleName ? moduleName + ":" : "") + code + "] ",
                template = templateArgs[1],
                paramPrefix:string, i:number;

            message += template.replace(/\{\d+\}/g, (match:string) => {
                const index = +match.slice(1, -1),
                    shiftedIndex = index + SKIP_INDEXES;

                if (shiftedIndex < templateArgs.length) {
                    return toDebugString(templateArgs[shiftedIndex]);
                }

                return match;
            });

            message += "\n" + (module ? module + "/" : "") + code;

            for (i = SKIP_INDEXES, paramPrefix = "?"; i < templateArgs.length; i++, paramPrefix = "&") {
                message += paramPrefix + "p" + (i - SKIP_INDEXES) + "=" +
                    encodeURIComponent(toDebugString(templateArgs[i]));
            }

            return new Error(message);
        };
    }
}

const nav = <INavigator>window.navigator;
const region = ((nav.languages ? nav.languages[0] : (nav.language || nav.userLanguage)) || "").toLowerCase();

let xuiStatic = new XuiStatic("892BE7A4298FC8D4", region, xuiModule);

angular.extend(xuiStatic, xuiModule);

export default xuiStatic;
