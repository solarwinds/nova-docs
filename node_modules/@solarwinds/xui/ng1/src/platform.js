/* String Extensions
--------------------------------------- */
if (!String.prototype.format && !String.format) {
    // NOTE: this functionality shouln't be used if possible. Instead use swUtil.formatString which does not use globals and code is properly tested.
    String.format = function(source,params) {
        var toString = function (obj, format) {
            var ctor = function (o) {
                if (typeof o == 'number')
                    return Number;
                else if (typeof o == 'boolean')
                    return Boolean;
                else if (typeof o == 'string')
                    return String;
                else
                    return o.constructor;
            }(obj);
            var proto = ctor.prototype;
            var formatter = typeof obj != 'string' ? proto ? proto.format || proto.toString : obj.format || obj.toString : obj.toString;
            if (formatter)
                if (typeof format == 'undefined' || format == "")
                    return formatter.call(obj);
                else
                    return formatter.call(obj, format);
            else
                return "";
        };
        if (arguments.length == 1)
            return function () {
                return String.format.apply(null, [source].concat(Array.prototype.slice.call(arguments, 0)));
            };
        if (arguments.length == 2 && typeof params != 'object' && typeof params != 'array')
            params = [params];
        if (arguments.length > 2)
            params = Array.prototype.slice.call(arguments, 1);
        source = source.replace(/\{\{|\}\}|\{([^}: ]+?)(?::([^}]*?))?\}/g, function (match, num, format) {
            if (match == "{{") return "{";
            if (match == "}}") return "}";
            if (typeof params[num] != 'undefined' && params[num] !== null) {
                return toString(params[num], format);
            } else {
                return match;
            }
        });
        return source;
    }

    String.prototype.format = function () {    
        return String.format(this, arguments.length == 1 ? arguments[0] : arguments);
    };
}

var Browser = {
    name: getBrowser(),
    version: getBrowserVersion(),
    mobileDevice: {
        android: function () {
            return navigator.userAgent.match(/Android/i);
        },
        blackBerry: function () {
            return navigator.userAgent.match(/BlackBerry/i);
        },
        iOS: function () {
            return navigator.userAgent.match(/iPhone|iPad|iPod/i);
        },
        opera: function () {
            return navigator.userAgent.match(/Opera Mini/i);
        },
        windows: function () {
            return navigator.userAgent.match(/IEMobile/i);
        },
        any: function () {
            return (Browser.mobileDevice.iOS() || Browser.mobileDevice.android() || Browser.mobileDevice.blackBerry() || Browser.mobileDevice.windows() || Browser.mobileDevice.opera());
        }
    }
};

function getBrowser() {
    var ua = navigator.userAgent, tem, M = ua.match(/(opera|chrome|safari|firefox|msie|trident(?=\/))\/?\s*(\d+)/i) || [];
    if (/trident/i.test(M[1])) {
        tem = /\brv[ :]+(\d+)/g.exec(ua) || [];
        return 'IE ' + (tem[1] || '');
    }
    if (M[1] === 'Chrome') {
        tem = ua.match(/\bOPR\/(\d+)/);
        if (tem != null) { return 'Opera ' + tem[1]; }
    }
    M = M[2] ? [M[1], M[2]] : [navigator.appName, navigator.appVersion, '-?'];
    if ((tem = ua.match(/version\/(\d+)/i)) != null) { M.splice(1, 1, tem[1]); }
    return M[0];
}

function getBrowserVersion() {
    var ua = navigator.userAgent, tem, M = ua.match(/(opera|chrome|safari|firefox|msie|trident(?=\/))\/?\s*(\d+)/i) || [];
    if (/trident/i.test(M[1])) {
        tem = /\brv[ :]+(\d+)/g.exec(ua) || [];
        return 'IE ' + (tem[1] || '');
    }
    if (M[1] === 'Chrome') {
        tem = ua.match(/\bOPR\/(\d+)/);
        if (tem != null) { return 'Opera ' + tem[1]; }
    }
    M = M[2] ? [M[1], M[2]] : [navigator.appName, navigator.appVersion, '-?'];
    if ((tem = ua.match(/version\/(\d+)/i)) != null) { M.splice(1, 1, tem[1]); }
    return M[1];
}
