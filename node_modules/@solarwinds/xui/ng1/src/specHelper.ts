/// <reference path="ref.d.ts" />

import { ICompileService, IScope, IAugmentedJQuery } from "angular";

class SpecHelper {

    public static getCompiledElement(compile: ICompileService,
                                     scope: IScope,
                                     directive: string): IAugmentedJQuery {

        const el = angular.element(directive);
        const compiledElement = compile(el)(scope);

        scope.$apply();
        return compiledElement;
    }

    public static getCompiledElementRequiringParentCtrl(compile: ICompileService,
                                                        scope: IScope,
                                                        directive: string,
                                                        requiringDirectiveName: string,
                                                        requiringDirectiveCtrl: any): IAugmentedJQuery {
        const el = angular.element(directive);
        el.data(`$${requiringDirectiveName}Controller`, requiringDirectiveCtrl);
        const compiledElement = compile(el)(scope);

        scope.$apply();
        return compiledElement;
    }

    public static getCompiledElementInParentElement(compile: ICompileService,
                                             scope: IScope,
                                             directive: string,
                                             parentElementName: string): IAugmentedJQuery {

        directive = `<${parentElementName} name='${parentElementName}'>${directive}</${parentElementName}>`;
        return SpecHelper.getCompiledElement(compile, scope, directive);
    }

}

/**
 * This scope allows typed access to all $scope methods and properties, but adds a [] operator to access anything else.
 */
export interface ITestScope extends IScope {
    [key: string]: any;
}

export default SpecHelper;
