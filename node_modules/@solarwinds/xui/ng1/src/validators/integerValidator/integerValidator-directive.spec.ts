///<reference path="../../ref.d.ts"/>

describe("directives >", () => {
    describe("validators >", () => {
        describe("integerValidator >", () => {
            let $scope: ng.IScope;            
            let testForm: any;
            let createElementWithValidator = (signed: boolean) => {
                inject(($compile: any, $rootScope: ng.IScope, $log:ng.ILogService, $injector: any) => {
                    $scope = $rootScope.$new();
                    
                    let element = angular.element(`<form name='testForm'> 
                            <input name= 'intInput' ng-model='model.value' 
                                   xui-integer-validator${signed ? "" : "='unsigned'"} />
                        </form>`);

                    (<any>$scope).model = { value: null };
                    $compile(element)($scope);
                    testForm = (<any>$scope).testForm;
                });
            };
            let executeTestCases = (testCases: Array<{num: string, result:boolean}>) => {
                testCases.forEach((test, idx) => {
                    it(`integer validation test case ${test.num} should be ${test.result}`, () => {
                        testForm.intInput.$setViewValue(test.num);
                        $scope.$digest();
                        expect(testForm.intInput.$valid).toBe(test.result);
                    });
                });
            };
            let commonTestCases = [
                { num: "0", result: true },
                { num: "108", result: true },                
                { num: "0108", result: false },                
                { num: "10.8", result: false },
                { num: "-10.8", result: false },
                { num: "0.8", result: false }                
            ];

            beforeEach(angular.mock.module("xui"));
            
            describe("signed integer validation >", () => {
                beforeEach(() => createElementWithValidator(true));
                
                let testCases = [                    
                    { num: "-108", result: true }
                ].concat(commonTestCases);
                
                executeTestCases(testCases);
            });
            
            describe("unsigned signed integer validation >", () => {
                beforeEach(() => createElementWithValidator(false));
                
                let testCases = [                    
                    { num: "-108", result: false },
                ].concat(commonTestCases);
                
                executeTestCases(testCases);
            });
        });
    });
});
