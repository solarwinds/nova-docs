"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const protractor_1 = require("@solarwinds/uzi/protractor");
const index_atom_1 = require("../index.atom");
const uzi_1 = require("@solarwinds/uzi");
const helpers_1 = require("../helpers");
describe("USERCONTROL Busy", () => {
    let busyAtom;
    let buttonAtom;
    beforeEach(() => {
        helpers_1.default.prepareBrowser("busy");
        busyAtom = uzi_1.Atom.find(index_atom_1.BusyAtom, "xuiBusyElement");
        buttonAtom = uzi_1.Atom.find(index_atom_1.ButtonAtom, "saveButton");
    });
    it("should append itself to the attached element", () => {
        expect(busyAtom.isAppended()).toBe(true);
    });
    it("should not be visible when inactive", () => {
        expect(busyAtom.isDisplayed()).toBe(false);
    });
    it("should be visible when active", () => {
        buttonAtom.click();
        expect(busyAtom.isDisplayed()).toBe(true);
    });
    it("should have xui-busy--active css class when active", () => {
        buttonAtom.click();
        expect(busyAtom.isBusy()).toBe(true);
    });
    it("should be inactive when cancelled", () => {
        buttonAtom.click();
        busyAtom.getProgress().cancelProgress();
        expect(busyAtom.isBusy()).toBe(false);
    });
    it("should not display progress bar when show-progress is false", () => {
        buttonAtom.click();
        expect(busyAtom.isBusy()).toBe(true);
        expect(busyAtom.isProgressBarDisplayed()).toBe(false);
    });
    it("should display progress bar when show-progress is true", () => {
        const busyNotesAtom = uzi_1.Atom.find(index_atom_1.BusyAtom, "xuiBusyElementNotes");
        const buttonNotes = uzi_1.Atom.find(index_atom_1.ButtonAtom, "saveButtonNotes");
        buttonNotes.click();
        expect(busyNotesAtom.isDisplayed()).toBe(true);
        expect(busyNotesAtom.isProgressBarDisplayed()).toBe(true);
    });
    it("should set overflow to hidden while busy", () => {
        const busyButton = uzi_1.Atom.find(index_atom_1.ButtonAtom, "makeBusyButton");
        const idleButton = uzi_1.Atom.find(index_atom_1.ButtonAtom, "makeIdleButton");
        const listViewBusy = uzi_1.Atom.find(index_atom_1.BusyAtom, "xuiListViewBusy");
        const parentContainer = protractor_1.element(protractor_1.by.id("xuiListViewBusy"));
        expect(listViewBusy.getOverflow(parentContainer)).toBe("scroll");
        busyButton.click();
        expect(listViewBusy.getOverflow(parentContainer)).toBe("hidden");
        idleButton.click();
        expect(listViewBusy.getOverflow(parentContainer)).toBe("scroll");
    });
});

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbXBvbmVudHMvYnVzeS9idXN5LmUyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLDJEQUFrRTtBQUNsRSw4Q0FBcUQ7QUFDckQseUNBQXVDO0FBQ3ZDLHdDQUFpQztBQUVqQyxRQUFRLENBQUMsa0JBQWtCLEVBQUUsR0FBRyxFQUFFO0lBQzlCLElBQUksUUFBa0IsQ0FBQztJQUN2QixJQUFJLFVBQXNCLENBQUM7SUFFM0IsVUFBVSxDQUFDLEdBQUcsRUFBRTtRQUNaLGlCQUFPLENBQUMsY0FBYyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQy9CLFFBQVEsR0FBRyxVQUFJLENBQUMsSUFBSSxDQUFDLHFCQUFRLEVBQUUsZ0JBQWdCLENBQUMsQ0FBQztRQUNqRCxVQUFVLEdBQUcsVUFBSSxDQUFDLElBQUksQ0FBQyx1QkFBVSxFQUFFLFlBQVksQ0FBQyxDQUFDO0lBQ3JELENBQUMsQ0FBQyxDQUFDO0lBRUgsRUFBRSxDQUFDLDhDQUE4QyxFQUFFLEdBQUcsRUFBRTtRQUNwRCxNQUFNLENBQUMsUUFBUSxDQUFDLFVBQVUsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQzdDLENBQUMsQ0FBQyxDQUFDO0lBRUgsRUFBRSxDQUFDLHFDQUFxQyxFQUFFLEdBQUcsRUFBRTtRQUMzQyxNQUFNLENBQUMsUUFBUSxDQUFDLFdBQVcsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQy9DLENBQUMsQ0FBQyxDQUFDO0lBRUgsRUFBRSxDQUFDLCtCQUErQixFQUFFLEdBQUcsRUFBRTtRQUNyQyxVQUFVLENBQUMsS0FBSyxFQUFFLENBQUM7UUFDbkIsTUFBTSxDQUFDLFFBQVEsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUM5QyxDQUFDLENBQUMsQ0FBQztJQUVILEVBQUUsQ0FBQyxvREFBb0QsRUFBRSxHQUFHLEVBQUU7UUFDMUQsVUFBVSxDQUFDLEtBQUssRUFBRSxDQUFDO1FBQ25CLE1BQU0sQ0FBQyxRQUFRLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDekMsQ0FBQyxDQUFDLENBQUM7SUFFSCxFQUFFLENBQUMsbUNBQW1DLEVBQUUsR0FBRyxFQUFFO1FBQ3pDLFVBQVUsQ0FBQyxLQUFLLEVBQUUsQ0FBQztRQUNuQixRQUFRLENBQUMsV0FBVyxFQUFFLENBQUMsY0FBYyxFQUFFLENBQUM7UUFDeEMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUMxQyxDQUFDLENBQUMsQ0FBQztJQUVILEVBQUUsQ0FBQyw2REFBNkQsRUFBRSxHQUFHLEVBQUU7UUFDbkUsVUFBVSxDQUFDLEtBQUssRUFBRSxDQUFDO1FBQ25CLE1BQU0sQ0FBQyxRQUFRLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDckMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxzQkFBc0IsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQzFELENBQUMsQ0FBQyxDQUFDO0lBRUgsRUFBRSxDQUFDLHdEQUF3RCxFQUFFLEdBQUcsRUFBRTtRQUM5RCxNQUFNLGFBQWEsR0FBRyxVQUFJLENBQUMsSUFBSSxDQUFDLHFCQUFRLEVBQUUscUJBQXFCLENBQUMsQ0FBQztRQUNqRSxNQUFNLFdBQVcsR0FBRyxVQUFJLENBQUMsSUFBSSxDQUFDLHVCQUFVLEVBQUUsaUJBQWlCLENBQUMsQ0FBQztRQUM3RCxXQUFXLENBQUMsS0FBSyxFQUFFLENBQUM7UUFDcEIsTUFBTSxDQUFDLGFBQWEsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUMvQyxNQUFNLENBQUMsYUFBYSxDQUFDLHNCQUFzQixFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDOUQsQ0FBQyxDQUFDLENBQUM7SUFFSCxFQUFFLENBQUMsMENBQTBDLEVBQUUsR0FBRyxFQUFFO1FBQ2hELE1BQU0sVUFBVSxHQUFHLFVBQUksQ0FBQyxJQUFJLENBQUMsdUJBQVUsRUFBRSxnQkFBZ0IsQ0FBQyxDQUFDO1FBQzNELE1BQU0sVUFBVSxHQUFHLFVBQUksQ0FBQyxJQUFJLENBQUMsdUJBQVUsRUFBRSxnQkFBZ0IsQ0FBQyxDQUFDO1FBQzNELE1BQU0sWUFBWSxHQUFHLFVBQUksQ0FBQyxJQUFJLENBQUMscUJBQVEsRUFBRSxpQkFBaUIsQ0FBQyxDQUFDO1FBQzVELE1BQU0sZUFBZSxHQUFHLG9CQUFPLENBQUMsZUFBRSxDQUFDLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDLENBQUM7UUFDMUQsTUFBTSxDQUFDLFlBQVksQ0FBQyxXQUFXLENBQUMsZUFBZSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDakUsVUFBVSxDQUFDLEtBQUssRUFBRSxDQUFDO1FBQ25CLE1BQU0sQ0FBQyxZQUFZLENBQUMsV0FBVyxDQUFDLGVBQWUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQ2pFLFVBQVUsQ0FBQyxLQUFLLEVBQUUsQ0FBQztRQUNuQixNQUFNLENBQUMsWUFBWSxDQUFDLFdBQVcsQ0FBQyxlQUFlLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUNyRSxDQUFDLENBQUMsQ0FBQztBQUNQLENBQUMsQ0FBQyxDQUFDIiwiZmlsZSI6ImNvbXBvbmVudHMvYnVzeS9idXN5LmUyZS5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGJ5LCBlbGVtZW50LCBwcm9taXNlIH0gZnJvbSBcIkBzb2xhcndpbmRzL3V6aS9wcm90cmFjdG9yXCI7XG5pbXBvcnQgeyBCdXN5QXRvbSwgQnV0dG9uQXRvbSB9IGZyb20gXCIuLi9pbmRleC5hdG9tXCI7XG5pbXBvcnQgeyBBdG9tIH0gZnJvbSBcIkBzb2xhcndpbmRzL3V6aVwiO1xuaW1wb3J0IEhlbHBlcnMgZnJvbSBcIi4uL2hlbHBlcnNcIjtcblxuZGVzY3JpYmUoXCJVU0VSQ09OVFJPTCBCdXN5XCIsICgpID0+IHtcbiAgICBsZXQgYnVzeUF0b206IEJ1c3lBdG9tO1xuICAgIGxldCBidXR0b25BdG9tOiBCdXR0b25BdG9tO1xuXG4gICAgYmVmb3JlRWFjaCgoKSA9PiB7XG4gICAgICAgIEhlbHBlcnMucHJlcGFyZUJyb3dzZXIoXCJidXN5XCIpO1xuICAgICAgICBidXN5QXRvbSA9IEF0b20uZmluZChCdXN5QXRvbSwgXCJ4dWlCdXN5RWxlbWVudFwiKTtcbiAgICAgICAgYnV0dG9uQXRvbSA9IEF0b20uZmluZChCdXR0b25BdG9tLCBcInNhdmVCdXR0b25cIik7XG4gICAgfSk7XG5cbiAgICBpdChcInNob3VsZCBhcHBlbmQgaXRzZWxmIHRvIHRoZSBhdHRhY2hlZCBlbGVtZW50XCIsICgpID0+IHtcbiAgICAgICAgZXhwZWN0KGJ1c3lBdG9tLmlzQXBwZW5kZWQoKSkudG9CZSh0cnVlKTtcbiAgICB9KTtcblxuICAgIGl0KFwic2hvdWxkIG5vdCBiZSB2aXNpYmxlIHdoZW4gaW5hY3RpdmVcIiwgKCkgPT4ge1xuICAgICAgICBleHBlY3QoYnVzeUF0b20uaXNEaXNwbGF5ZWQoKSkudG9CZShmYWxzZSk7XG4gICAgfSk7XG5cbiAgICBpdChcInNob3VsZCBiZSB2aXNpYmxlIHdoZW4gYWN0aXZlXCIsICgpID0+IHtcbiAgICAgICAgYnV0dG9uQXRvbS5jbGljaygpO1xuICAgICAgICBleHBlY3QoYnVzeUF0b20uaXNEaXNwbGF5ZWQoKSkudG9CZSh0cnVlKTtcbiAgICB9KTtcblxuICAgIGl0KFwic2hvdWxkIGhhdmUgeHVpLWJ1c3ktLWFjdGl2ZSBjc3MgY2xhc3Mgd2hlbiBhY3RpdmVcIiwgKCkgPT4ge1xuICAgICAgICBidXR0b25BdG9tLmNsaWNrKCk7XG4gICAgICAgIGV4cGVjdChidXN5QXRvbS5pc0J1c3koKSkudG9CZSh0cnVlKTtcbiAgICB9KTtcblxuICAgIGl0KFwic2hvdWxkIGJlIGluYWN0aXZlIHdoZW4gY2FuY2VsbGVkXCIsICgpID0+IHtcbiAgICAgICAgYnV0dG9uQXRvbS5jbGljaygpO1xuICAgICAgICBidXN5QXRvbS5nZXRQcm9ncmVzcygpLmNhbmNlbFByb2dyZXNzKCk7XG4gICAgICAgIGV4cGVjdChidXN5QXRvbS5pc0J1c3koKSkudG9CZShmYWxzZSk7XG4gICAgfSk7XG5cbiAgICBpdChcInNob3VsZCBub3QgZGlzcGxheSBwcm9ncmVzcyBiYXIgd2hlbiBzaG93LXByb2dyZXNzIGlzIGZhbHNlXCIsICgpID0+IHtcbiAgICAgICAgYnV0dG9uQXRvbS5jbGljaygpO1xuICAgICAgICBleHBlY3QoYnVzeUF0b20uaXNCdXN5KCkpLnRvQmUodHJ1ZSk7XG4gICAgICAgIGV4cGVjdChidXN5QXRvbS5pc1Byb2dyZXNzQmFyRGlzcGxheWVkKCkpLnRvQmUoZmFsc2UpO1xuICAgIH0pO1xuXG4gICAgaXQoXCJzaG91bGQgZGlzcGxheSBwcm9ncmVzcyBiYXIgd2hlbiBzaG93LXByb2dyZXNzIGlzIHRydWVcIiwgKCkgPT4ge1xuICAgICAgICBjb25zdCBidXN5Tm90ZXNBdG9tID0gQXRvbS5maW5kKEJ1c3lBdG9tLCBcInh1aUJ1c3lFbGVtZW50Tm90ZXNcIik7XG4gICAgICAgIGNvbnN0IGJ1dHRvbk5vdGVzID0gQXRvbS5maW5kKEJ1dHRvbkF0b20sIFwic2F2ZUJ1dHRvbk5vdGVzXCIpO1xuICAgICAgICBidXR0b25Ob3Rlcy5jbGljaygpO1xuICAgICAgICBleHBlY3QoYnVzeU5vdGVzQXRvbS5pc0Rpc3BsYXllZCgpKS50b0JlKHRydWUpO1xuICAgICAgICBleHBlY3QoYnVzeU5vdGVzQXRvbS5pc1Byb2dyZXNzQmFyRGlzcGxheWVkKCkpLnRvQmUodHJ1ZSk7XG4gICAgfSk7XG5cbiAgICBpdChcInNob3VsZCBzZXQgb3ZlcmZsb3cgdG8gaGlkZGVuIHdoaWxlIGJ1c3lcIiwgKCkgPT4ge1xuICAgICAgICBjb25zdCBidXN5QnV0dG9uID0gQXRvbS5maW5kKEJ1dHRvbkF0b20sIFwibWFrZUJ1c3lCdXR0b25cIik7XG4gICAgICAgIGNvbnN0IGlkbGVCdXR0b24gPSBBdG9tLmZpbmQoQnV0dG9uQXRvbSwgXCJtYWtlSWRsZUJ1dHRvblwiKTtcbiAgICAgICAgY29uc3QgbGlzdFZpZXdCdXN5ID0gQXRvbS5maW5kKEJ1c3lBdG9tLCBcInh1aUxpc3RWaWV3QnVzeVwiKTtcbiAgICAgICAgY29uc3QgcGFyZW50Q29udGFpbmVyID0gZWxlbWVudChieS5pZChcInh1aUxpc3RWaWV3QnVzeVwiKSk7XG4gICAgICAgIGV4cGVjdChsaXN0Vmlld0J1c3kuZ2V0T3ZlcmZsb3cocGFyZW50Q29udGFpbmVyKSkudG9CZShcInNjcm9sbFwiKTtcbiAgICAgICAgYnVzeUJ1dHRvbi5jbGljaygpO1xuICAgICAgICBleHBlY3QobGlzdFZpZXdCdXN5LmdldE92ZXJmbG93KHBhcmVudENvbnRhaW5lcikpLnRvQmUoXCJoaWRkZW5cIik7XG4gICAgICAgIGlkbGVCdXR0b24uY2xpY2soKTtcbiAgICAgICAgZXhwZWN0KGxpc3RWaWV3QnVzeS5nZXRPdmVyZmxvdyhwYXJlbnRDb250YWluZXIpKS50b0JlKFwic2Nyb2xsXCIpO1xuICAgIH0pO1xufSk7XG4iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=
