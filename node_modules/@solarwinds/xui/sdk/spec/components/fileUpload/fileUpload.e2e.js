"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
/* Temporary solution for getting absolute file path */
const path = require("path");
const helpers_1 = require("../helpers");
const uzi_1 = require("@solarwinds/uzi");
const index_atom_1 = require("../index.atom");
//region Test cases
describe("USERCONTROL fileUpload: ", () => {
    let atom;
    beforeEach(() => {
        helpers_1.default.prepareBrowser("fileUpload");
        atom = uzi_1.Atom.find(index_atom_1.FileUploadAtom, "fileUpload");
    });
    it("has only 'Browse' and hint visible by default", () => {
        expect(atom.getBrowseButton().isDisplayed()).toBeTruthy();
        expect(atom.getNofileHint().isDisplayed()).toBeTruthy();
        expect(atom.getChangeButton().isDisplayed()).toBeFalsy();
        expect(atom.getRemoveButton().isDisplayed()).toBeFalsy();
        expect(atom.getDisplayedFileName()).toBe("");
    });
    it("changes state after file was selected", () => __awaiter(this, void 0, void 0, function* () {
        const fileToUpload = __filename;
        //Set file's path as input (file type) value
        yield atom.selectFile(fileToUpload);
        expect(yield atom.getBrowseButton().isDisplayed()).toBeFalsy();
        expect(yield atom.getNofileHint().isDisplayed()).toBeFalsy();
        expect(yield atom.getChangeButton().isDisplayed()).toBeTruthy();
        expect(yield atom.getRemoveButton().isDisplayed()).toBeTruthy();
        expect(yield atom.getDisplayedFileName()).toBe(path.basename(fileToUpload));
    }));
    it("returns to default state on clicking 'Remove'", () => __awaiter(this, void 0, void 0, function* () {
        const fileToUpload = __filename;
        yield atom.selectFile(fileToUpload);
        expect(yield atom.getRemoveButton().isDisplayed()).toBeTruthy();
        yield atom.getRemoveButton().click();
        expect(yield atom.getBrowseButton().isDisplayed()).toBeTruthy();
        expect(yield atom.getNofileHint().isDisplayed()).toBeTruthy();
        expect(yield atom.getChangeButton().isDisplayed()).toBeFalsy();
        expect(yield atom.getRemoveButton().isDisplayed()).toBeFalsy();
        expect(yield atom.getDisplayedFileName()).toBe("");
    }));
});
//endregion

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbXBvbmVudHMvZmlsZVVwbG9hZC9maWxlVXBsb2FkLmUyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBQ0EsdURBQXVEO0FBQ3ZELDZCQUE2QjtBQUU3Qix3Q0FBaUM7QUFDakMseUNBQXVDO0FBQ3ZDLDhDQUErQztBQUUvQyxtQkFBbUI7QUFDbkIsUUFBUSxDQUFDLDBCQUEwQixFQUFFLEdBQUcsRUFBRTtJQUN0QyxJQUFJLElBQW9CLENBQUM7SUFFekIsVUFBVSxDQUFDLEdBQUcsRUFBRTtRQUNaLGlCQUFPLENBQUMsY0FBYyxDQUFDLFlBQVksQ0FBQyxDQUFDO1FBQ3JDLElBQUksR0FBRyxVQUFJLENBQUMsSUFBSSxDQUFDLDJCQUFjLEVBQUUsWUFBWSxDQUFDLENBQUM7SUFDbkQsQ0FBQyxDQUFDLENBQUM7SUFFSCxFQUFFLENBQUMsK0NBQStDLEVBQUUsR0FBRyxFQUFFO1FBQ3JELE1BQU0sQ0FBQyxJQUFJLENBQUMsZUFBZSxFQUFFLENBQUMsV0FBVyxFQUFFLENBQUMsQ0FBQyxVQUFVLEVBQUUsQ0FBQztRQUMxRCxNQUFNLENBQUMsSUFBSSxDQUFDLGFBQWEsRUFBRSxDQUFDLFdBQVcsRUFBRSxDQUFDLENBQUMsVUFBVSxFQUFFLENBQUM7UUFDeEQsTUFBTSxDQUFDLElBQUksQ0FBQyxlQUFlLEVBQUUsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxDQUFDLFNBQVMsRUFBRSxDQUFDO1FBQ3pELE1BQU0sQ0FBQyxJQUFJLENBQUMsZUFBZSxFQUFFLENBQUMsV0FBVyxFQUFFLENBQUMsQ0FBQyxTQUFTLEVBQUUsQ0FBQztRQUN6RCxNQUFNLENBQUMsSUFBSSxDQUFDLG9CQUFvQixFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDakQsQ0FBQyxDQUFDLENBQUM7SUFFSCxFQUFFLENBQUMsdUNBQXVDLEVBQUUsR0FBUyxFQUFFO1FBQ25ELE1BQU0sWUFBWSxHQUFHLFVBQVUsQ0FBQztRQUVoQyw0Q0FBNEM7UUFDNUMsTUFBTSxJQUFJLENBQUMsVUFBVSxDQUFDLFlBQVksQ0FBQyxDQUFDO1FBRXBDLE1BQU0sQ0FBQyxNQUFNLElBQUksQ0FBQyxlQUFlLEVBQUUsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxDQUFDLFNBQVMsRUFBRSxDQUFDO1FBQy9ELE1BQU0sQ0FBQyxNQUFNLElBQUksQ0FBQyxhQUFhLEVBQUUsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxDQUFDLFNBQVMsRUFBRSxDQUFDO1FBQzdELE1BQU0sQ0FBQyxNQUFNLElBQUksQ0FBQyxlQUFlLEVBQUUsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxDQUFDLFVBQVUsRUFBRSxDQUFDO1FBQ2hFLE1BQU0sQ0FBQyxNQUFNLElBQUksQ0FBQyxlQUFlLEVBQUUsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxDQUFDLFVBQVUsRUFBRSxDQUFDO1FBQ2hFLE1BQU0sQ0FBQyxNQUFNLElBQUksQ0FBQyxvQkFBb0IsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQztJQUNoRixDQUFDLENBQUEsQ0FBQyxDQUFDO0lBRUgsRUFBRSxDQUFDLCtDQUErQyxFQUFFLEdBQVMsRUFBRTtRQUMzRCxNQUFNLFlBQVksR0FBRyxVQUFVLENBQUM7UUFFaEMsTUFBTSxJQUFJLENBQUMsVUFBVSxDQUFDLFlBQVksQ0FBQyxDQUFDO1FBQ3BDLE1BQU0sQ0FBQyxNQUFNLElBQUksQ0FBQyxlQUFlLEVBQUUsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxDQUFDLFVBQVUsRUFBRSxDQUFDO1FBQ2hFLE1BQU0sSUFBSSxDQUFDLGVBQWUsRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDO1FBRXJDLE1BQU0sQ0FBQyxNQUFNLElBQUksQ0FBQyxlQUFlLEVBQUUsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxDQUFDLFVBQVUsRUFBRSxDQUFDO1FBQ2hFLE1BQU0sQ0FBQyxNQUFNLElBQUksQ0FBQyxhQUFhLEVBQUUsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxDQUFDLFVBQVUsRUFBRSxDQUFDO1FBQzlELE1BQU0sQ0FBQyxNQUFNLElBQUksQ0FBQyxlQUFlLEVBQUUsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxDQUFDLFNBQVMsRUFBRSxDQUFDO1FBQy9ELE1BQU0sQ0FBQyxNQUFNLElBQUksQ0FBQyxlQUFlLEVBQUUsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxDQUFDLFNBQVMsRUFBRSxDQUFDO1FBQy9ELE1BQU0sQ0FBQyxNQUFNLElBQUksQ0FBQyxvQkFBb0IsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQ3ZELENBQUMsQ0FBQSxDQUFDLENBQUM7QUFFUCxDQUFDLENBQUMsQ0FBQztBQUNILFdBQVciLCJmaWxlIjoiY29tcG9uZW50cy9maWxlVXBsb2FkL2ZpbGVVcGxvYWQuZTJlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgcHJvbWlzZSB9IGZyb20gXCJAc29sYXJ3aW5kcy91emkvcHJvdHJhY3RvclwiO1xuLyogVGVtcG9yYXJ5IHNvbHV0aW9uIGZvciBnZXR0aW5nIGFic29sdXRlIGZpbGUgcGF0aCAqL1xuaW1wb3J0ICogYXMgcGF0aCBmcm9tIFwicGF0aFwiO1xuXG5pbXBvcnQgSGVscGVycyBmcm9tIFwiLi4vaGVscGVyc1wiO1xuaW1wb3J0IHsgQXRvbSB9IGZyb20gXCJAc29sYXJ3aW5kcy91emlcIjtcbmltcG9ydCB7IEZpbGVVcGxvYWRBdG9tIH0gZnJvbSBcIi4uL2luZGV4LmF0b21cIjtcblxuLy9yZWdpb24gVGVzdCBjYXNlc1xuZGVzY3JpYmUoXCJVU0VSQ09OVFJPTCBmaWxlVXBsb2FkOiBcIiwgKCkgPT4ge1xuICAgIGxldCBhdG9tOiBGaWxlVXBsb2FkQXRvbTtcblxuICAgIGJlZm9yZUVhY2goKCkgPT4ge1xuICAgICAgICBIZWxwZXJzLnByZXBhcmVCcm93c2VyKFwiZmlsZVVwbG9hZFwiKTtcbiAgICAgICAgYXRvbSA9IEF0b20uZmluZChGaWxlVXBsb2FkQXRvbSwgXCJmaWxlVXBsb2FkXCIpO1xuICAgIH0pO1xuXG4gICAgaXQoXCJoYXMgb25seSAnQnJvd3NlJyBhbmQgaGludCB2aXNpYmxlIGJ5IGRlZmF1bHRcIiwgKCkgPT4ge1xuICAgICAgICBleHBlY3QoYXRvbS5nZXRCcm93c2VCdXR0b24oKS5pc0Rpc3BsYXllZCgpKS50b0JlVHJ1dGh5KCk7XG4gICAgICAgIGV4cGVjdChhdG9tLmdldE5vZmlsZUhpbnQoKS5pc0Rpc3BsYXllZCgpKS50b0JlVHJ1dGh5KCk7XG4gICAgICAgIGV4cGVjdChhdG9tLmdldENoYW5nZUJ1dHRvbigpLmlzRGlzcGxheWVkKCkpLnRvQmVGYWxzeSgpO1xuICAgICAgICBleHBlY3QoYXRvbS5nZXRSZW1vdmVCdXR0b24oKS5pc0Rpc3BsYXllZCgpKS50b0JlRmFsc3koKTtcbiAgICAgICAgZXhwZWN0KGF0b20uZ2V0RGlzcGxheWVkRmlsZU5hbWUoKSkudG9CZShcIlwiKTtcbiAgICB9KTtcblxuICAgIGl0KFwiY2hhbmdlcyBzdGF0ZSBhZnRlciBmaWxlIHdhcyBzZWxlY3RlZFwiLCBhc3luYyAoKSA9PiB7XG4gICAgICAgIGNvbnN0IGZpbGVUb1VwbG9hZCA9IF9fZmlsZW5hbWU7XG5cbiAgICAgICAgLy9TZXQgZmlsZSdzIHBhdGggYXMgaW5wdXQgKGZpbGUgdHlwZSkgdmFsdWVcbiAgICAgICAgYXdhaXQgYXRvbS5zZWxlY3RGaWxlKGZpbGVUb1VwbG9hZCk7XG5cbiAgICAgICAgZXhwZWN0KGF3YWl0IGF0b20uZ2V0QnJvd3NlQnV0dG9uKCkuaXNEaXNwbGF5ZWQoKSkudG9CZUZhbHN5KCk7XG4gICAgICAgIGV4cGVjdChhd2FpdCBhdG9tLmdldE5vZmlsZUhpbnQoKS5pc0Rpc3BsYXllZCgpKS50b0JlRmFsc3koKTtcbiAgICAgICAgZXhwZWN0KGF3YWl0IGF0b20uZ2V0Q2hhbmdlQnV0dG9uKCkuaXNEaXNwbGF5ZWQoKSkudG9CZVRydXRoeSgpO1xuICAgICAgICBleHBlY3QoYXdhaXQgYXRvbS5nZXRSZW1vdmVCdXR0b24oKS5pc0Rpc3BsYXllZCgpKS50b0JlVHJ1dGh5KCk7XG4gICAgICAgIGV4cGVjdChhd2FpdCBhdG9tLmdldERpc3BsYXllZEZpbGVOYW1lKCkpLnRvQmUocGF0aC5iYXNlbmFtZShmaWxlVG9VcGxvYWQpKTtcbiAgICB9KTtcblxuICAgIGl0KFwicmV0dXJucyB0byBkZWZhdWx0IHN0YXRlIG9uIGNsaWNraW5nICdSZW1vdmUnXCIsIGFzeW5jICgpID0+IHtcbiAgICAgICAgY29uc3QgZmlsZVRvVXBsb2FkID0gX19maWxlbmFtZTtcblxuICAgICAgICBhd2FpdCBhdG9tLnNlbGVjdEZpbGUoZmlsZVRvVXBsb2FkKTtcbiAgICAgICAgZXhwZWN0KGF3YWl0IGF0b20uZ2V0UmVtb3ZlQnV0dG9uKCkuaXNEaXNwbGF5ZWQoKSkudG9CZVRydXRoeSgpO1xuICAgICAgICBhd2FpdCBhdG9tLmdldFJlbW92ZUJ1dHRvbigpLmNsaWNrKCk7XG5cbiAgICAgICAgZXhwZWN0KGF3YWl0IGF0b20uZ2V0QnJvd3NlQnV0dG9uKCkuaXNEaXNwbGF5ZWQoKSkudG9CZVRydXRoeSgpO1xuICAgICAgICBleHBlY3QoYXdhaXQgYXRvbS5nZXROb2ZpbGVIaW50KCkuaXNEaXNwbGF5ZWQoKSkudG9CZVRydXRoeSgpO1xuICAgICAgICBleHBlY3QoYXdhaXQgYXRvbS5nZXRDaGFuZ2VCdXR0b24oKS5pc0Rpc3BsYXllZCgpKS50b0JlRmFsc3koKTtcbiAgICAgICAgZXhwZWN0KGF3YWl0IGF0b20uZ2V0UmVtb3ZlQnV0dG9uKCkuaXNEaXNwbGF5ZWQoKSkudG9CZUZhbHN5KCk7XG4gICAgICAgIGV4cGVjdChhd2FpdCBhdG9tLmdldERpc3BsYXllZEZpbGVOYW1lKCkpLnRvQmUoXCJcIik7XG4gICAgfSk7XG5cbn0pO1xuLy9lbmRyZWdpb25cbiJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==
