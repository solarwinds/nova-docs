"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const protractor_1 = require("@solarwinds/uzi/protractor");
const uzi_1 = require("@solarwinds/uzi");
const index_atom_1 = require("../index.atom");
const helpers_1 = require("../helpers");
describe("USERCONTROL resizable:", () => {
    const demo = protractor_1.element(protractor_1.by.className("demo-resizable"));
    const demoAbsolute = protractor_1.element(protractor_1.by.className("demo-resizable--absolute"));
    let resizableAtom;
    let resizableAtomAbsolute;
    const widthFromStyleAttributeOf = (element) => {
        return element.getAttribute("style").then((attr) => {
            return parseInt(attr.replace("px;", "").replace("width: ", ""), 10);
        });
    };
    describe("Dragging resizable:", () => {
        beforeEach(() => {
            helpers_1.default.prepareBrowser("resizable");
            resizableAtom = uzi_1.Atom.findIn(index_atom_1.ResizableAtom, demo);
            resizableAtomAbsolute = uzi_1.Atom.findIn(index_atom_1.ResizableAtom, demoAbsolute);
            expect(resizableAtom.getElement().isDisplayed()).toBeTruthy();
            expect(widthFromStyleAttributeOf(demo)).toEqual(800);
        });
        it("should not drag right", () => {
            resizableAtom.setOffset(300, 0);
            const resizer = demo.element(protractor_1.by.className("xui-resizer"));
            protractor_1.browser.actions()
                .dragAndDrop(resizer, resizableAtom.offset)
                .perform();
            expect(widthFromStyleAttributeOf(demo)).toEqual(800);
        });
        it("should dragg left", () => {
            resizableAtom.setOffset(-300, 0);
            const resizer = demo.element(protractor_1.by.className("xui-resizer"));
            protractor_1.browser.actions()
                .dragAndDrop(resizer, resizableAtom.offset)
                .perform();
            expect(widthFromStyleAttributeOf(demo)).toBeLessThan(800);
        });
        it("should not drag left (absolute element)", () => {
            resizableAtomAbsolute.setOffset(-300, 0);
            const resizer = demoAbsolute.element(protractor_1.by.className("xui-resizer"));
            resizer.getLocation().then((location) => {
                protractor_1.browser.actions()
                    .mouseMove({ x: location.x + 2, y: location.y })
                    .mouseDown()
                    .mouseMove({ x: location.x - 300, y: location.y })
                    .mouseUp()
                    .perform();
            });
            expect(widthFromStyleAttributeOf(demoAbsolute)).toEqual(500);
        });
        it("should dragg right (absolute element)", () => {
            resizableAtomAbsolute.setOffset(300, 0);
            const resizer = demoAbsolute.element(protractor_1.by.className("xui-resizer"));
            protractor_1.browser.actions()
                .dragAndDrop(resizer, resizableAtom.offset)
                .perform();
            expect(widthFromStyleAttributeOf(demoAbsolute)).toBeLessThan(500);
        });
    });
});

//# sourceMappingURL=data:application/json;base64,
