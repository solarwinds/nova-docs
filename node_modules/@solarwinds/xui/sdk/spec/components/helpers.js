"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const protractor_1 = require("@solarwinds/uzi/protractor");
const eyes_protractor_1 = require("eyes.protractor");
///<reference path="../typings/index.d.ts"/>
let eyes;
class Helpers {
    static prepareBrowser(pageName) {
        return __awaiter(this, void 0, void 0, function* () {
            const url = pageName
                ? `/e2e/${pageName}.html`
                : "/demo";
            yield protractor_1.browser.get(url);
        });
    }
    static prepareEyes() {
        if (!eyes) {
            eyes = new eyes_protractor_1.Eyes();
            eyes.setApiKey(process.env.EYES_API_KEY);
            let branchName = process.env.EYES_BRANCH || "Unknown";
            branchName = branchName.substring(branchName.lastIndexOf("/") + 1);
            eyes.setBatch("Visual Testing - " + branchName);
            eyes.setBranchName(branchName);
            if (branchName !== "develop") {
                eyes.setParentBranchName("develop");
            }
            eyes.setForceFullPageScreenshot(true);
            eyes.setStitchMode("CSS");
        }
        return eyes;
    }
    static getElementByXpath(elementXpath) {
        return protractor_1.browser.driver.findElement(protractor_1.by.xpath(elementXpath));
    }
    static getElementByCSS(elementCSS) {
        return protractor_1.browser.driver.findElement(protractor_1.by.css(elementCSS));
    }
}
exports.default = Helpers;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbXBvbmVudHMvaGVscGVycy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBQUEsMkRBQWtFO0FBRWxFLHFEQUF1QztBQUV2Qyw0Q0FBNEM7QUFFNUMsSUFBSSxJQUFVLENBQUM7QUFLZjtJQUNJLE1BQU0sQ0FBTyxjQUFjLENBQUMsUUFBaUI7O1lBQ3pDLE1BQU0sR0FBRyxHQUFHLFFBQVE7Z0JBQ2hCLENBQUMsQ0FBQyxRQUFRLFFBQVEsT0FBTztnQkFDekIsQ0FBQyxDQUFDLE9BQU8sQ0FBQztZQUNkLE1BQU0sb0JBQU8sQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDM0IsQ0FBQztLQUFBO0lBRUQsTUFBTSxDQUFDLFdBQVc7UUFDZCxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7WUFDUixJQUFJLEdBQUcsSUFBSSxzQkFBSSxFQUFFLENBQUM7WUFDbEIsSUFBSSxDQUFDLFNBQVMsQ0FBVSxPQUFPLENBQUMsR0FBRyxDQUFDLFlBQVksQ0FBQyxDQUFDO1lBQ2xELElBQUksVUFBVSxHQUFZLE9BQU8sQ0FBQyxHQUFHLENBQUMsV0FBVyxJQUFJLFNBQVMsQ0FBQztZQUMvRCxVQUFVLEdBQUcsVUFBVSxDQUFDLFNBQVMsQ0FBQyxVQUFVLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO1lBQ25FLElBQUksQ0FBQyxRQUFRLENBQUMsbUJBQW1CLEdBQUcsVUFBVSxDQUFDLENBQUM7WUFDaEQsSUFBSSxDQUFDLGFBQWEsQ0FBQyxVQUFVLENBQUMsQ0FBQztZQUMvQixFQUFFLENBQUMsQ0FBQyxVQUFVLEtBQUssU0FBUyxDQUFDLENBQUMsQ0FBQztnQkFDM0IsSUFBSSxDQUFDLG1CQUFtQixDQUFDLFNBQVMsQ0FBQyxDQUFDO1lBQ3hDLENBQUM7WUFDRCxJQUFJLENBQUMsMEJBQTBCLENBQUMsSUFBSSxDQUFDLENBQUM7WUFDdEMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUM5QixDQUFDO1FBQ0QsTUFBTSxDQUFDLElBQUksQ0FBQztJQUNoQixDQUFDO0lBRU0sTUFBTSxDQUFDLGlCQUFpQixDQUFDLFlBQW9CO1FBQ2hELE1BQU0sQ0FBQyxvQkFBTyxDQUFDLE1BQU0sQ0FBQyxXQUFXLENBQUMsZUFBRSxDQUFDLEtBQUssQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDO0lBQzlELENBQUM7SUFFTSxNQUFNLENBQUMsZUFBZSxDQUFDLFVBQWtCO1FBQzVDLE1BQU0sQ0FBQyxvQkFBTyxDQUFDLE1BQU0sQ0FBQyxXQUFXLENBQUMsZUFBRSxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDO0lBQzFELENBQUM7Q0FFSjtBQWpDRCwwQkFpQ0MiLCJmaWxlIjoiY29tcG9uZW50cy9oZWxwZXJzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgYnJvd3NlciwgYnksIHByb21pc2UgfSBmcm9tIFwiQHNvbGFyd2luZHMvdXppL3Byb3RyYWN0b3JcIjtcbmltcG9ydCB7IFdlYkVsZW1lbnRQcm9taXNlIH0gZnJvbSBcIkBzb2xhcndpbmRzL3V6aS93ZWJkcml2ZXJcIjtcbmltcG9ydCB7IEV5ZXMgfSBmcm9tIFwiZXllcy5wcm90cmFjdG9yXCI7XG5cbi8vLzxyZWZlcmVuY2UgcGF0aD1cIi4uL3R5cGluZ3MvaW5kZXguZC50c1wiLz5cblxubGV0IGV5ZXM6IEV5ZXM7XG5cbi8vIE5vZGUgdHlwaW5ncyBoYXZlIGNvbmZsaWN0cyB3aXRoIHdlYnBhY2stZW52XG5kZWNsYXJlIHZhciBwcm9jZXNzOiBhbnk7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEhlbHBlcnMge1xuICAgIHN0YXRpYyBhc3luYyBwcmVwYXJlQnJvd3NlcihwYWdlTmFtZT86IHN0cmluZykge1xuICAgICAgICBjb25zdCB1cmwgPSBwYWdlTmFtZVxuICAgICAgICAgICAgPyBgL2UyZS8ke3BhZ2VOYW1lfS5odG1sYFxuICAgICAgICAgICAgOiBcIi9kZW1vXCI7XG4gICAgICAgIGF3YWl0IGJyb3dzZXIuZ2V0KHVybCk7XG4gICAgfVxuXG4gICAgc3RhdGljIHByZXBhcmVFeWVzKCkge1xuICAgICAgICBpZiAoIWV5ZXMpIHtcbiAgICAgICAgICAgIGV5ZXMgPSBuZXcgRXllcygpO1xuICAgICAgICAgICAgZXllcy5zZXRBcGlLZXkoPHN0cmluZz4gcHJvY2Vzcy5lbnYuRVlFU19BUElfS0VZKTtcbiAgICAgICAgICAgIGxldCBicmFuY2hOYW1lID0gPHN0cmluZz4gcHJvY2Vzcy5lbnYuRVlFU19CUkFOQ0ggfHwgXCJVbmtub3duXCI7XG4gICAgICAgICAgICBicmFuY2hOYW1lID0gYnJhbmNoTmFtZS5zdWJzdHJpbmcoYnJhbmNoTmFtZS5sYXN0SW5kZXhPZihcIi9cIikgKyAxKTtcbiAgICAgICAgICAgIGV5ZXMuc2V0QmF0Y2goXCJWaXN1YWwgVGVzdGluZyAtIFwiICsgYnJhbmNoTmFtZSk7XG4gICAgICAgICAgICBleWVzLnNldEJyYW5jaE5hbWUoYnJhbmNoTmFtZSk7XG4gICAgICAgICAgICBpZiAoYnJhbmNoTmFtZSAhPT0gXCJkZXZlbG9wXCIpIHtcbiAgICAgICAgICAgICAgICBleWVzLnNldFBhcmVudEJyYW5jaE5hbWUoXCJkZXZlbG9wXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZXllcy5zZXRGb3JjZUZ1bGxQYWdlU2NyZWVuc2hvdCh0cnVlKTtcbiAgICAgICAgICAgIGV5ZXMuc2V0U3RpdGNoTW9kZShcIkNTU1wiKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZXllcztcbiAgICB9XG5cbiAgICBwdWJsaWMgc3RhdGljIGdldEVsZW1lbnRCeVhwYXRoKGVsZW1lbnRYcGF0aDogc3RyaW5nKTogV2ViRWxlbWVudFByb21pc2Uge1xuICAgICAgICByZXR1cm4gYnJvd3Nlci5kcml2ZXIuZmluZEVsZW1lbnQoYnkueHBhdGgoZWxlbWVudFhwYXRoKSk7XG4gICAgfVxuXG4gICAgcHVibGljIHN0YXRpYyBnZXRFbGVtZW50QnlDU1MoZWxlbWVudENTUzogc3RyaW5nKTogV2ViRWxlbWVudFByb21pc2Uge1xuICAgICAgICByZXR1cm4gYnJvd3Nlci5kcml2ZXIuZmluZEVsZW1lbnQoYnkuY3NzKGVsZW1lbnRDU1MpKTtcbiAgICB9XG5cbn1cbiJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==
