"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const protractor_1 = require("@solarwinds/uzi/protractor");
const uzi_1 = require("@solarwinds/uzi");
const index_atom_1 = require("../index.atom");
class PageContentAtom extends uzi_1.Atom {
    constructor() {
        super(...arguments);
        this.getTitle = () => {
            return super.getElement().element(protractor_1.by.className("xui-page-content__header-title")).getText();
        };
        this.isIconDisplayed = (iconName) => {
            return super.getElement().all(protractor_1.by.css(".xui-page-content__header-link i")).get(0)
                .getAttribute("icon")
                .then((attrVal) => {
                return attrVal === iconName;
            });
        };
        this.getLink = () => {
            return super.getElement().all(protractor_1.by.css(".xui-page-content__header-link a")).get(0);
        };
        this.getLinkText = () => {
            return this.getLink().getText();
        };
        this.getLinkUrl = () => {
            return this.getLink().getAttribute("href");
        };
        this.getLinkTarget = () => {
            return this.getLink().getAttribute("target");
        };
        this.isBusyIndicatorDisplayed = (elId) => {
            return uzi_1.Atom.find(index_atom_1.BusyAtom, elId).isDisplayed();
        };
        this.getBusyMessage = () => {
            const busy = uzi_1.Atom.findIn(index_atom_1.BusyAtom, super.getElement());
            return busy.getProgress().getMessage();
        };
        this.getHeader = () => {
            return super.getElement().element(protractor_1.by.css("[ng-transclude='header']"));
        };
        this.isDefaultHeader = () => {
            return this.getHeader()
                .element(protractor_1.by.className("xui-page-content__header"))
                .isPresent()
                .then((isPresent) => isPresent);
        };
        this.getFooter = (elId) => {
            return super.getElement()
                .element(protractor_1.by.css("[ng-transclude='header']"))
                .element(protractor_1.by.id(elId));
        };
        this.getBreadcrumbs = () => {
            return super.getElement().element(protractor_1.by.css("[ng-transclude='breadcrumbs']"));
        };
        this.isBodyScrollable = () => {
            const body = super.getElement().element(protractor_1.by.className("xui-page-content__body"));
            const scrollbarAtom = uzi_1.Atom.findIn(index_atom_1.ScrollbarAtom, body);
            return scrollbarAtom.hasScrollbar(body);
        };
    }
}
PageContentAtom.CSS_CLASS = "xui-page-content";
exports.PageContentAtom = PageContentAtom;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbXBvbmVudHMvcGFnZUNvbnRlbnQvcGFnZUNvbnRlbnQuYXRvbS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLDJEQUFzRTtBQUN0RSx5Q0FBcUM7QUFDckMsOENBQXNEO0FBRXRELHFCQUE2QixTQUFRLFVBQUk7SUFBekM7O1FBR1csYUFBUSxHQUFHLEdBQUcsRUFBRTtZQUNuQixNQUFNLENBQUMsS0FBSyxDQUFDLFVBQVUsRUFBRSxDQUFDLE9BQU8sQ0FBQyxlQUFFLENBQUMsU0FBUyxDQUFDLGdDQUFnQyxDQUFDLENBQUMsQ0FBQyxPQUFPLEVBQUUsQ0FBQztRQUNoRyxDQUFDLENBQUM7UUFFSyxvQkFBZSxHQUFHLENBQUMsUUFBZ0IsRUFBRSxFQUFFO1lBQzFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsVUFBVSxFQUFFLENBQUMsR0FBRyxDQUFDLGVBQUUsQ0FBQyxHQUFHLENBQUMsa0NBQWtDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7aUJBQzNFLFlBQVksQ0FBQyxNQUFNLENBQUM7aUJBQ3BCLElBQUksQ0FBQyxDQUFDLE9BQWUsRUFBRSxFQUFFO2dCQUN0QixNQUFNLENBQUMsT0FBTyxLQUFLLFFBQVEsQ0FBQztZQUNoQyxDQUFDLENBQUMsQ0FBQztRQUNYLENBQUMsQ0FBQztRQUVLLFlBQU8sR0FBRyxHQUFHLEVBQUU7WUFDbEIsTUFBTSxDQUFDLEtBQUssQ0FBQyxVQUFVLEVBQUUsQ0FBQyxHQUFHLENBQUMsZUFBRSxDQUFDLEdBQUcsQ0FBQyxrQ0FBa0MsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3JGLENBQUMsQ0FBQztRQUVLLGdCQUFXLEdBQUcsR0FBRyxFQUFFO1lBQ3RCLE1BQU0sQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLENBQUMsT0FBTyxFQUFFLENBQUM7UUFDcEMsQ0FBQyxDQUFDO1FBRUssZUFBVSxHQUFHLEdBQUcsRUFBRTtZQUNyQixNQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDLFlBQVksQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUMvQyxDQUFDLENBQUM7UUFFSyxrQkFBYSxHQUFHLEdBQUcsRUFBRTtZQUN4QixNQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDLFlBQVksQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUNqRCxDQUFDLENBQUM7UUFFSyw2QkFBd0IsR0FBRyxDQUFDLElBQVksRUFBRSxFQUFFO1lBQy9DLE1BQU0sQ0FBQyxVQUFJLENBQUMsSUFBSSxDQUFDLHFCQUFRLEVBQUUsSUFBSSxDQUFDLENBQUMsV0FBVyxFQUFFLENBQUM7UUFDbkQsQ0FBQyxDQUFDO1FBRUssbUJBQWMsR0FBRyxHQUFHLEVBQUU7WUFDekIsTUFBTSxJQUFJLEdBQUcsVUFBSSxDQUFDLE1BQU0sQ0FBQyxxQkFBUSxFQUFFLEtBQUssQ0FBQyxVQUFVLEVBQUUsQ0FBQyxDQUFDO1lBQ3ZELE1BQU0sQ0FBQyxJQUFJLENBQUMsV0FBVyxFQUFFLENBQUMsVUFBVSxFQUFFLENBQUM7UUFDM0MsQ0FBQyxDQUFDO1FBRUssY0FBUyxHQUFHLEdBQUcsRUFBRTtZQUNwQixNQUFNLENBQUMsS0FBSyxDQUFDLFVBQVUsRUFBRSxDQUFDLE9BQU8sQ0FBQyxlQUFFLENBQUMsR0FBRyxDQUFDLDBCQUEwQixDQUFDLENBQUMsQ0FBQztRQUMxRSxDQUFDLENBQUM7UUFFSyxvQkFBZSxHQUFHLEdBQTZCLEVBQUU7WUFDcEQsTUFBTSxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUU7aUJBQ2xCLE9BQU8sQ0FBQyxlQUFFLENBQUMsU0FBUyxDQUFDLDBCQUEwQixDQUFDLENBQUM7aUJBQ2pELFNBQVMsRUFBRTtpQkFDWCxJQUFJLENBQUMsQ0FBQyxTQUFrQixFQUFFLEVBQUUsQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUNqRCxDQUFDLENBQUM7UUFFSyxjQUFTLEdBQUcsQ0FBQyxJQUFZLEVBQWlCLEVBQUU7WUFDL0MsTUFBTSxDQUFDLEtBQUssQ0FBQyxVQUFVLEVBQUU7aUJBQ3BCLE9BQU8sQ0FBQyxlQUFFLENBQUMsR0FBRyxDQUFDLDBCQUEwQixDQUFDLENBQUM7aUJBQzNDLE9BQU8sQ0FBQyxlQUFFLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7UUFDOUIsQ0FBQyxDQUFDO1FBRUssbUJBQWMsR0FBRyxHQUFHLEVBQUU7WUFDekIsTUFBTSxDQUFDLEtBQUssQ0FBQyxVQUFVLEVBQUUsQ0FBQyxPQUFPLENBQUMsZUFBRSxDQUFDLEdBQUcsQ0FBQywrQkFBK0IsQ0FBQyxDQUFDLENBQUM7UUFDL0UsQ0FBQyxDQUFDO1FBRUsscUJBQWdCLEdBQUcsR0FBNkIsRUFBRTtZQUNyRCxNQUFNLElBQUksR0FBRyxLQUFLLENBQUMsVUFBVSxFQUFFLENBQUMsT0FBTyxDQUFDLGVBQUUsQ0FBQyxTQUFTLENBQUMsd0JBQXdCLENBQUMsQ0FBQyxDQUFDO1lBQ2hGLE1BQU0sYUFBYSxHQUFHLFVBQUksQ0FBQyxNQUFNLENBQUMsMEJBQWEsRUFBRSxJQUFJLENBQUMsQ0FBQztZQUN2RCxNQUFNLENBQUMsYUFBYSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUM1QyxDQUFDLENBQUM7SUFDTixDQUFDOztBQWpFaUIseUJBQVMsR0FBRyxrQkFBa0IsQ0FBQztBQURqRCwwQ0FrRUMiLCJmaWxlIjoiY29tcG9uZW50cy9wYWdlQ29udGVudC9wYWdlQ29udGVudC5hdG9tLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtieSwgRWxlbWVudEZpbmRlciwgcHJvbWlzZX0gZnJvbSBcIkBzb2xhcndpbmRzL3V6aS9wcm90cmFjdG9yXCI7XG5pbXBvcnQge0F0b219IGZyb20gXCJAc29sYXJ3aW5kcy91emlcIjtcbmltcG9ydCB7QnVzeUF0b20sIFNjcm9sbGJhckF0b219IGZyb20gXCIuLi9pbmRleC5hdG9tXCI7XG5cbmV4cG9ydCBjbGFzcyBQYWdlQ29udGVudEF0b20gZXh0ZW5kcyBBdG9tIHtcbiAgICBwdWJsaWMgc3RhdGljIENTU19DTEFTUyA9IFwieHVpLXBhZ2UtY29udGVudFwiO1xuXG4gICAgcHVibGljIGdldFRpdGxlID0gKCkgPT4ge1xuICAgICAgICByZXR1cm4gc3VwZXIuZ2V0RWxlbWVudCgpLmVsZW1lbnQoYnkuY2xhc3NOYW1lKFwieHVpLXBhZ2UtY29udGVudF9faGVhZGVyLXRpdGxlXCIpKS5nZXRUZXh0KCk7XG4gICAgfTtcblxuICAgIHB1YmxpYyBpc0ljb25EaXNwbGF5ZWQgPSAoaWNvbk5hbWU6IHN0cmluZykgPT4ge1xuICAgICAgICByZXR1cm4gc3VwZXIuZ2V0RWxlbWVudCgpLmFsbChieS5jc3MoXCIueHVpLXBhZ2UtY29udGVudF9faGVhZGVyLWxpbmsgaVwiKSkuZ2V0KDApXG4gICAgICAgICAgICAuZ2V0QXR0cmlidXRlKFwiaWNvblwiKVxuICAgICAgICAgICAgLnRoZW4oKGF0dHJWYWw6IHN0cmluZykgPT4ge1xuICAgICAgICAgICAgICAgIHJldHVybiBhdHRyVmFsID09PSBpY29uTmFtZTtcbiAgICAgICAgICAgIH0pO1xuICAgIH07XG5cbiAgICBwdWJsaWMgZ2V0TGluayA9ICgpID0+IHtcbiAgICAgICAgcmV0dXJuIHN1cGVyLmdldEVsZW1lbnQoKS5hbGwoYnkuY3NzKFwiLnh1aS1wYWdlLWNvbnRlbnRfX2hlYWRlci1saW5rIGFcIikpLmdldCgwKTtcbiAgICB9O1xuXG4gICAgcHVibGljIGdldExpbmtUZXh0ID0gKCkgPT4ge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRMaW5rKCkuZ2V0VGV4dCgpO1xuICAgIH07XG5cbiAgICBwdWJsaWMgZ2V0TGlua1VybCA9ICgpID0+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0TGluaygpLmdldEF0dHJpYnV0ZShcImhyZWZcIik7XG4gICAgfTtcblxuICAgIHB1YmxpYyBnZXRMaW5rVGFyZ2V0ID0gKCkgPT4ge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRMaW5rKCkuZ2V0QXR0cmlidXRlKFwidGFyZ2V0XCIpO1xuICAgIH07XG5cbiAgICBwdWJsaWMgaXNCdXN5SW5kaWNhdG9yRGlzcGxheWVkID0gKGVsSWQ6IHN0cmluZykgPT4ge1xuICAgICAgICByZXR1cm4gQXRvbS5maW5kKEJ1c3lBdG9tLCBlbElkKS5pc0Rpc3BsYXllZCgpO1xuICAgIH07XG5cbiAgICBwdWJsaWMgZ2V0QnVzeU1lc3NhZ2UgPSAoKSA9PiB7XG4gICAgICAgIGNvbnN0IGJ1c3kgPSBBdG9tLmZpbmRJbihCdXN5QXRvbSwgc3VwZXIuZ2V0RWxlbWVudCgpKTtcbiAgICAgICAgcmV0dXJuIGJ1c3kuZ2V0UHJvZ3Jlc3MoKS5nZXRNZXNzYWdlKCk7XG4gICAgfTtcblxuICAgIHB1YmxpYyBnZXRIZWFkZXIgPSAoKSA9PiB7XG4gICAgICAgIHJldHVybiBzdXBlci5nZXRFbGVtZW50KCkuZWxlbWVudChieS5jc3MoXCJbbmctdHJhbnNjbHVkZT0naGVhZGVyJ11cIikpO1xuICAgIH07XG5cbiAgICBwdWJsaWMgaXNEZWZhdWx0SGVhZGVyID0gKCk6IHByb21pc2UuUHJvbWlzZTxib29sZWFuPiA9PiB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldEhlYWRlcigpXG4gICAgICAgICAgICAuZWxlbWVudChieS5jbGFzc05hbWUoXCJ4dWktcGFnZS1jb250ZW50X19oZWFkZXJcIikpXG4gICAgICAgICAgICAuaXNQcmVzZW50KClcbiAgICAgICAgICAgIC50aGVuKChpc1ByZXNlbnQ6IGJvb2xlYW4pID0+IGlzUHJlc2VudCk7XG4gICAgfTtcblxuICAgIHB1YmxpYyBnZXRGb290ZXIgPSAoZWxJZDogc3RyaW5nKTogRWxlbWVudEZpbmRlciA9PiB7XG4gICAgICAgIHJldHVybiBzdXBlci5nZXRFbGVtZW50KClcbiAgICAgICAgICAgIC5lbGVtZW50KGJ5LmNzcyhcIltuZy10cmFuc2NsdWRlPSdoZWFkZXInXVwiKSlcbiAgICAgICAgICAgIC5lbGVtZW50KGJ5LmlkKGVsSWQpKTtcbiAgICB9O1xuXG4gICAgcHVibGljIGdldEJyZWFkY3J1bWJzID0gKCkgPT4ge1xuICAgICAgICByZXR1cm4gc3VwZXIuZ2V0RWxlbWVudCgpLmVsZW1lbnQoYnkuY3NzKFwiW25nLXRyYW5zY2x1ZGU9J2JyZWFkY3J1bWJzJ11cIikpO1xuICAgIH07XG5cbiAgICBwdWJsaWMgaXNCb2R5U2Nyb2xsYWJsZSA9ICgpOiBwcm9taXNlLlByb21pc2U8Ym9vbGVhbj4gPT4ge1xuICAgICAgICBjb25zdCBib2R5ID0gc3VwZXIuZ2V0RWxlbWVudCgpLmVsZW1lbnQoYnkuY2xhc3NOYW1lKFwieHVpLXBhZ2UtY29udGVudF9fYm9keVwiKSk7XG4gICAgICAgIGNvbnN0IHNjcm9sbGJhckF0b20gPSBBdG9tLmZpbmRJbihTY3JvbGxiYXJBdG9tLCBib2R5KTtcbiAgICAgICAgcmV0dXJuIHNjcm9sbGJhckF0b20uaGFzU2Nyb2xsYmFyKGJvZHkpO1xuICAgIH07XG59XG4iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=
