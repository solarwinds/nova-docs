"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const protractor_1 = require("@solarwinds/uzi/protractor");
const helpers_1 = require("../helpers");
const index_atom_1 = require("../index.atom");
const uzi_1 = require("@solarwinds/uzi");
describe("USERCONTROL pageContent", () => {
    let atom;
    let busyAtom;
    let negationAtom;
    let breadcrumbsAtom;
    beforeEach(() => {
        helpers_1.default.prepareBrowser("pageContent");
        atom = uzi_1.Atom.find(index_atom_1.PageContentAtom, "mockPageContentNoBusy");
        busyAtom = uzi_1.Atom.find(index_atom_1.PageContentAtom, "mockPageContentBusy");
        negationAtom = uzi_1.Atom.find(index_atom_1.PageContentAtom, "negationTest");
        breadcrumbsAtom = uzi_1.Atom.find(index_atom_1.PageContentAtom, "mockBreadcrumbs");
    });
    const expectedTitle = "Ballad Of Serenity";
    const expectedLinkText = "what is Firefly?";
    const expectedBreadcrumbsText = "We > are > breadcrumbs";
    const expectedLinkTarget = "_blank";
    const expectedUrl = "https://en.wikipedia.org/wiki/Firefly_(TV_series)";
    it("should display title in the header", () => {
        expect(atom.getTitle()).toBe(expectedTitle);
    });
    it("should display the link text in the header", () => {
        expect(atom.getLinkText()).toBe(expectedLinkText);
    });
    it("should have link target", () => {
        expect(atom.getLinkTarget()).toBe(expectedLinkTarget);
    });
    it("should not have link target when unset", () => {
        expect(negationAtom.getLinkTarget()).toBe("");
    });
    it("should associate the url with the link text", () => {
        expect(atom.getLinkUrl()).toBe(expectedUrl);
    });
    it("should associate the 'help' link icon", () => {
        expect(atom.isIconDisplayed("help")).toBe(true);
        expect(atom.isIconDisplayed("notAnIcon")).toBe(false);
    });
    it("should not include a busy indicator", () => {
        expect(atom).toBeDefined();
        expect(atom.isBusyIndicatorDisplayed("mockPageContentNoBusy")).toBe(false);
    });
    it("should include a busy indicator with message", () => {
        expect(busyAtom).toBeDefined();
        expect(busyAtom.isBusyIndicatorDisplayed("mockPageContentBusy")).toBe(true);
        expect(busyAtom.getBusyMessage()).toBe("Loading...");
    });
    it("should use transcluded header when title is not specified", () => {
        expect(atom.isDefaultHeader()).toBe(true);
        expect(busyAtom.isDefaultHeader()).toBe(false);
        const transcludedHeader = busyAtom.getHeader();
        expect(transcludedHeader).toBeDefined();
        const title = transcludedHeader.element(protractor_1.by.id("busyBeeTitle"));
        expect(title).toBeDefined();
        expect(title.getText()).toBe("Busy Bee");
    });
    it("should show transcluded footer", () => {
        expect(atom.getFooter("fireflyFooter")).toBeDefined();
    });
    it("should show transcluded breadcrumbs", () => {
        const transcludedBreadcrumbs = breadcrumbsAtom.getBreadcrumbs();
        expect(transcludedBreadcrumbs).toBeDefined();
        const text = transcludedBreadcrumbs.element(protractor_1.by.id("breadcrumbsText"));
        expect(text).toBeDefined();
        expect(text.getText()).toBe(expectedBreadcrumbsText);
    });
    it("should apply scrollbars only when pageLayout=fill", () => {
        expect(atom.isBodyScrollable()).toBe(true);
        expect(busyAtom.isBodyScrollable()).toBe(false);
        const nonFillAtom = uzi_1.Atom.find(index_atom_1.PageContentAtom, "negationTest");
        expect(nonFillAtom.isBodyScrollable()).toBe(false);
    });
});

//# sourceMappingURL=data:application/json;base64,
