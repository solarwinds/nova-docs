"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const protractor_1 = require("@solarwinds/uzi/protractor");
const uzi_1 = require("@solarwinds/uzi");
const ellipsis_atom_1 = require("./ellipsis.atom");
const helpers_1 = require("../helpers");
const _ = require("lodash");
describe("USERCONTROL ellipsis", () => {
    beforeEach(() => {
        helpers_1.default.prepareBrowser("ellipsis");
    });
    const defaultEllipsis = uzi_1.Atom.find(ellipsis_atom_1.EllipsisAtom, "defaultEllipsis");
    const tooltipOptionsEllipsis = uzi_1.Atom.find(ellipsis_atom_1.EllipsisAtom, "tooltipOptionsEllipsis");
    const tooltipOptionsWithParent = uzi_1.Atom.find(ellipsis_atom_1.EllipsisAtom, "optionsTooltipWithParent");
    const defaultTitle = "HTML is great for declaring static documents, " +
        "but it falters when we try to use it for declaring dynamic views in web-applications.";
    const defaultTooltip = "The tooltip differs from actual title";
    it("should properly render/populate 'title', 'uib-tooltip'", () => {
        expect(defaultEllipsis.getTitle()).toBe(defaultTitle);
        expect(defaultEllipsis.getEllipsedAttribute("uib-tooltip")).toBe(defaultTooltip);
    });
    it("should check difference between tooltip and text", () => {
        expect(defaultEllipsis.getTitle()).not.toBe(defaultTooltip);
    });
    xit("should show tooltip on 'mouseenter'", () => {
        expect(defaultEllipsis.getEllipsedAttribute("tooltip-enable")).toBe("false");
        expect(defaultEllipsis.isTooltipDisplayed()).toBe(false);
        protractor_1.browser.manage().window().setSize(640, 880);
        protractor_1.browser.wait(() => defaultEllipsis.getEllipsedAttribute("tooltip-enable")
            .then(isEnabled => _.isEqual(isEnabled, "true")));
        defaultEllipsis.moveMouseToTarget(defaultEllipsis);
        expect(defaultEllipsis.getEllipsedAttribute("tooltip-enable")).toBe("true");
        expect(defaultEllipsis.isTooltipDisplayed()).toBe(true);
    });
    xit("should not show tooltip while text is full length", () => {
        protractor_1.browser.manage().window().setSize(1540, 880);
        protractor_1.browser.wait(() => defaultEllipsis.getEllipsedAttribute("tooltip-enable")
            .then(isEnabled => _.isEqual(isEnabled, "false")));
        defaultEllipsis.moveMouseToTarget(defaultEllipsis);
        expect(defaultEllipsis.getEllipsedAttribute("tooltip-enable")).toBe("false");
        expect(defaultEllipsis.isTooltipDisplayed()).toBe(false);
    });
    xit("should use tooltip options", () => {
        const tooltipPlacement = "bottom";
        expect(tooltipOptionsEllipsis.getEllipsedAttribute("tooltip-enable")).toBe("false");
        expect(tooltipOptionsEllipsis.isTooltipDisplayed()).toBe(false);
        protractor_1.browser.manage().window().setSize(640, 880);
        protractor_1.browser.wait(() => tooltipOptionsEllipsis.getEllipsedAttribute("tooltip-enable")
            .then(isEnabled => _.isEqual(isEnabled, "true")));
        tooltipOptionsEllipsis.moveMouseToTarget(tooltipOptionsEllipsis);
        expect(tooltipOptionsEllipsis.getTooltipAttribute("placement")).toBe(tooltipPlacement);
        expect(tooltipOptionsEllipsis.isTooltipDisplayed()).toBe(true);
    });
    it("should compile bindHtmlTemplate with xuiHighlight:'HTML' filter", () => {
        expect(defaultEllipsis.getElement().element(protractor_1.by.css(".xui-highlighted")).getText()).toBe("HTML");
    });
    it("should compile bindHtmlTemplate with lowercase filter", () => {
        const loweCasedTitle = defaultTitle.toLowerCase();
        expect(tooltipOptionsEllipsis.getTitle()).toBe(loweCasedTitle);
    });
    xdescribe("with attribute find-parent-class=true", () => {
        beforeEach(() => {
            helpers_1.default.prepareBrowser("ellipsis");
        });
        it("shouldn't add ellipsis when text is shorter than parent element", () => {
            protractor_1.browser.manage().window().setSize(1540, 880);
            protractor_1.browser.wait(() => tooltipOptionsWithParent.getEllipsedAttribute("tooltip-enable")
                .then(isEnabled => _.isEqual(isEnabled, "false")));
            expect(tooltipOptionsWithParent.getEllipsedAttribute("tooltip-enable")).toBe("false");
        });
        it("should show tooltip when ellipsis is enabled and mouseenter", () => {
            protractor_1.browser.manage().window().setSize(640, 880);
            protractor_1.browser.wait(() => tooltipOptionsWithParent.getEllipsedAttribute("tooltip-enable")
                .then(isEnabled => _.isEqual(isEnabled, "true")));
            tooltipOptionsWithParent.moveMouseToTarget(tooltipOptionsWithParent);
            expect(tooltipOptionsWithParent.isTooltipDisplayed()).toBe(true);
        });
        it("shouldn't show tooltip when ellipsis is disabled and mouseenter", () => {
            protractor_1.browser.manage().window().setSize(1500, 880);
            protractor_1.browser.wait(() => tooltipOptionsWithParent.getEllipsedAttribute("tooltip-enable")
                .then(isEnabled => _.isEqual(isEnabled, "false")));
            tooltipOptionsWithParent.moveMouseToTarget(tooltipOptionsWithParent);
            expect(tooltipOptionsWithParent.isTooltipDisplayed()).toBe(false);
        });
    });
});

//# sourceMappingURL=data:application/json;base64,
