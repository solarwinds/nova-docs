"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const protractor_1 = require("@solarwinds/uzi/protractor");
const helpers_1 = require("../helpers");
const index_atom_1 = require("../index.atom");
const uzi_1 = require("@solarwinds/uzi");
describe("USERCONTROL Panel", () => {
    let firstPanel;
    let secondPanel;
    let expandCheckbox;
    let collapseCheckbox;
    beforeEach(() => {
        helpers_1.default.prepareBrowser("panel");
        const page = protractor_1.element(protractor_1.by.id("xui-demo-components-panel"));
        firstPanel = uzi_1.Atom.findIn(index_atom_1.PanelAtom, page, 0);
        secondPanel = uzi_1.Atom.findIn(index_atom_1.PanelAtom, page, 1);
        expandCheckbox = uzi_1.Atom.findIn(index_atom_1.CheckboxAtom, page, 0);
        collapseCheckbox = uzi_1.Atom.findIn(index_atom_1.CheckboxAtom, page, 1);
    });
    it("Should be clickable icon inside", () => {
        let headerIcon = firstPanel.icon();
        expect(headerIcon.isDisplayed()).toBeTruthy();
        headerIcon.click();
        expect(headerIcon.isEnabled()).toBeTruthy();
    });
    it("Should toggle panel css class upon icon click ", () => {
        let headerIcon = firstPanel.icon();
        //initial state of panel to be expanded
        expect(firstPanel.isCollapsed()).toBe(false);
        expect(firstPanel.isExpanded()).toBe(true);
        //check if panel is collapsed upon click
        headerIcon.click();
        protractor_1.browser.sleep(400);
        expect(firstPanel.isCollapsed()).toBe(true);
        expect(firstPanel.isExpanded()).toBe(false);
        //check if panel is expanded upon click
        headerIcon.click();
        protractor_1.browser.sleep(400);
        expect(firstPanel.isCollapsed()).toBe(false);
        expect(firstPanel.isExpanded()).toBe(true);
    });
    it("Should toggle icon css class upon click ", () => {
        const toggleBtn = firstPanel.toggleButton();
        //icon of panel in initial state (expanded)
        expect(firstPanel.iconShowsCollapsed()).toBe(false);
        expect(firstPanel.iconShowsExpanded()).toBe(true);
        //check icon when panel collapsed upon click
        toggleBtn.click();
        protractor_1.browser.sleep(400);
        expect(firstPanel.iconShowsCollapsed()).toBe(true);
        expect(firstPanel.iconShowsExpanded()).toBe(false);
        //check icon when panel expanded upon click
        toggleBtn.click();
        protractor_1.browser.sleep(400);
        expect(firstPanel.iconShowsCollapsed()).toBe(false);
        expect(firstPanel.iconShowsExpanded()).toBe(true);
    });
    it("Check that icon is not present when isCollapsible is false", () => {
        expect(secondPanel.icon().isDisplayed()).toBe(false);
    });
    it("Check that correct page heading is shown", () => {
        expect(secondPanel.headingText()).toBe("TEST_CASE");
    });
    it("Check that components are correctly transcluded into the panel", () => {
        expect(protractor_1.element(protractor_1.by.id("markerId")).isDisplayed()).toBe(true);
    });
    it("should show icon counter only if the panel is collapsed", () => {
        const toggleBtn = firstPanel.toggleButton();
        //Collapsing the panel
        toggleBtn.click();
        protractor_1.browser.sleep(400);
        expect(firstPanel.getHeaderIconCounter("collapsed")).toEqual("3");
        //Expanding the panel
        toggleBtn.click();
        protractor_1.browser.sleep(400);
        expect(firstPanel.getHeaderIconCounter("expanded")).toBeNull();
    });
});

//# sourceMappingURL=data:application/json;base64,
