"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const uzi_1 = require("@solarwinds/uzi");
const actionDrawer_atom_1 = require("./actionDrawer.atom");
const helpers_1 = require("../helpers");
const _ = require("lodash");
describe("USERCONTROL action drawer", () => {
    beforeEach(() => {
        helpers_1.default.prepareBrowser("actionDrawer");
    });
    const defaultActionDrawer = uzi_1.Atom.find(actionDrawer_atom_1.ActionDrawerAtom, "defaultActionDrawer");
    const rightDirectionActionDrawer = uzi_1.Atom.find(actionDrawer_atom_1.ActionDrawerAtom, "rightDirectionActionDrawer");
    it("should show slide effect on hover/check correct text", () => {
        defaultActionDrawer.moveMouseToTarget(defaultActionDrawer);
        defaultActionDrawer.moveMouseToMenuIcon("mute");
        expect(defaultActionDrawer.getTooltipAttribute("content"))
            .toBe(defaultActionDrawer.getMenuIconAttribute("mute", "tool-tip"));
    });
    it("should have left direction menu", () => {
        expect(defaultActionDrawer.getMenuDirection()).toBe("matrix(1, 0, 0, 1, 0, 0)");
        defaultActionDrawer.moveMouseToTarget(defaultActionDrawer);
        expect(defaultActionDrawer.getMenuDirection()).toBe("matrix(1, 0, 0, 1, -90, 0)");
    });
    it("should have right direction menu", () => {
        expect(rightDirectionActionDrawer.getMenuDirection()).toBe("matrix(1, 0, 0, 1, 0, 0)");
        rightDirectionActionDrawer.moveMouseToTarget(rightDirectionActionDrawer);
        expect(rightDirectionActionDrawer.getMenuDirection()).toBe("matrix(1, 0, 0, 1, 90, 0)");
    });
    it("should trigger method action on click", () => {
        defaultActionDrawer.moveMouseToTarget(defaultActionDrawer);
        defaultActionDrawer.clickMenuIcon("mute");
        defaultActionDrawer.getToastContainer()
            .then(isVisible => !_.isEqual(isVisible, "true"));
        expect(defaultActionDrawer.getToastContainer()).toBe(true);
        defaultActionDrawer.getToastContainer()
            .then(isVisible => !_.isEqual(isVisible, "true"));
        defaultActionDrawer.clickMenuIcon("acknowledge");
        expect(defaultActionDrawer.getToastContainer()).toBe(true);
        defaultActionDrawer.getToastContainer()
            .then(isVisible => !_.isEqual(isVisible, "true"));
        defaultActionDrawer.clickMenuIcon("sound-3");
        expect(defaultActionDrawer.getToastContainer()).toBe(true);
    });
});

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbXBvbmVudHMvYWN0aW9uRHJhd2VyL2FjdGlvbkRyYXdlci5lMmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFDQSx5Q0FBdUM7QUFDdkMsMkRBQXVEO0FBQ3ZELHdDQUFpQztBQUNqQyw0QkFBNEI7QUFFNUIsUUFBUSxDQUFDLDJCQUEyQixFQUFFLEdBQUcsRUFBRTtJQUV2QyxVQUFVLENBQUMsR0FBRyxFQUFFO1FBQ1osaUJBQU8sQ0FBQyxjQUFjLENBQUMsY0FBYyxDQUFDLENBQUM7SUFDM0MsQ0FBQyxDQUFDLENBQUM7SUFFSCxNQUFNLG1CQUFtQixHQUFHLFVBQUksQ0FBQyxJQUFJLENBQUMsb0NBQWdCLEVBQUUscUJBQXFCLENBQUMsQ0FBQztJQUMvRSxNQUFNLDBCQUEwQixHQUFHLFVBQUksQ0FBQyxJQUFJLENBQUMsb0NBQWdCLEVBQUUsNEJBQTRCLENBQUMsQ0FBQztJQUU3RixFQUFFLENBQUMsc0RBQXNELEVBQUUsR0FBRyxFQUFFO1FBQzVELG1CQUFtQixDQUFDLGlCQUFpQixDQUFDLG1CQUFtQixDQUFDLENBQUM7UUFDM0QsbUJBQW1CLENBQUMsbUJBQW1CLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDaEQsTUFBTSxDQUFDLG1CQUFtQixDQUFDLG1CQUFtQixDQUFDLFNBQVMsQ0FBQyxDQUFDO2FBQ3JELElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxvQkFBb0IsQ0FBQyxNQUFNLEVBQUUsVUFBVSxDQUFDLENBQUMsQ0FBQztJQUM1RSxDQUFDLENBQUMsQ0FBQztJQUVILEVBQUUsQ0FBQyxpQ0FBaUMsRUFBRSxHQUFHLEVBQUU7UUFDdkMsTUFBTSxDQUFDLG1CQUFtQixDQUFDLGdCQUFnQixFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsMEJBQTBCLENBQUMsQ0FBQztRQUNoRixtQkFBbUIsQ0FBQyxpQkFBaUIsQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDO1FBQzNELE1BQU0sQ0FBQyxtQkFBbUIsQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLDRCQUE0QixDQUFDLENBQUM7SUFDdEYsQ0FBQyxDQUFDLENBQUM7SUFFSCxFQUFFLENBQUMsa0NBQWtDLEVBQUUsR0FBRyxFQUFFO1FBQ3hDLE1BQU0sQ0FBQywwQkFBMEIsQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLDBCQUEwQixDQUFDLENBQUM7UUFDdkYsMEJBQTBCLENBQUMsaUJBQWlCLENBQUMsMEJBQTBCLENBQUMsQ0FBQztRQUN6RSxNQUFNLENBQUMsMEJBQTBCLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQywyQkFBMkIsQ0FBQyxDQUFDO0lBQzVGLENBQUMsQ0FBQyxDQUFDO0lBRUgsRUFBRSxDQUFDLHVDQUF1QyxFQUFFLEdBQUcsRUFBRTtRQUM3QyxtQkFBbUIsQ0FBQyxpQkFBaUIsQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDO1FBQzNELG1CQUFtQixDQUFDLGFBQWEsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUMxQyxtQkFBbUIsQ0FBQyxpQkFBaUIsRUFBRTthQUNsQyxJQUFJLENBQUMsU0FBUyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsU0FBUyxFQUFFLE1BQU0sQ0FBQyxDQUFDLENBQUM7UUFDdEQsTUFBTSxDQUFDLG1CQUFtQixDQUFDLGlCQUFpQixFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDM0QsbUJBQW1CLENBQUMsaUJBQWlCLEVBQUU7YUFDbEMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLFNBQVMsRUFBRSxNQUFNLENBQUMsQ0FBQyxDQUFDO1FBQ3RELG1CQUFtQixDQUFDLGFBQWEsQ0FBQyxhQUFhLENBQUMsQ0FBQztRQUNqRCxNQUFNLENBQUMsbUJBQW1CLENBQUMsaUJBQWlCLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUMzRCxtQkFBbUIsQ0FBQyxpQkFBaUIsRUFBRTthQUNsQyxJQUFJLENBQUMsU0FBUyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsU0FBUyxFQUFFLE1BQU0sQ0FBQyxDQUFDLENBQUM7UUFDdEQsbUJBQW1CLENBQUMsYUFBYSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBQzdDLE1BQU0sQ0FBQyxtQkFBbUIsQ0FBQyxpQkFBaUIsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQy9ELENBQUMsQ0FBQyxDQUFDO0FBQ1AsQ0FBQyxDQUFDLENBQUMiLCJmaWxlIjoiY29tcG9uZW50cy9hY3Rpb25EcmF3ZXIvYWN0aW9uRHJhd2VyLmUyZS5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGJyb3dzZXIsIGJ5LCBwcm9taXNlIH0gZnJvbSBcIkBzb2xhcndpbmRzL3V6aS9wcm90cmFjdG9yXCI7XG5pbXBvcnQgeyBBdG9tIH0gZnJvbSBcIkBzb2xhcndpbmRzL3V6aVwiO1xuaW1wb3J0IHsgQWN0aW9uRHJhd2VyQXRvbSB9IGZyb20gXCIuL2FjdGlvbkRyYXdlci5hdG9tXCI7XG5pbXBvcnQgSGVscGVycyBmcm9tIFwiLi4vaGVscGVyc1wiO1xuaW1wb3J0ICogYXMgXyBmcm9tIFwibG9kYXNoXCI7XG5cbmRlc2NyaWJlKFwiVVNFUkNPTlRST0wgYWN0aW9uIGRyYXdlclwiLCAoKSA9PiB7XG5cbiAgICBiZWZvcmVFYWNoKCgpID0+IHtcbiAgICAgICAgSGVscGVycy5wcmVwYXJlQnJvd3NlcihcImFjdGlvbkRyYXdlclwiKTtcbiAgICB9KTtcblxuICAgIGNvbnN0IGRlZmF1bHRBY3Rpb25EcmF3ZXIgPSBBdG9tLmZpbmQoQWN0aW9uRHJhd2VyQXRvbSwgXCJkZWZhdWx0QWN0aW9uRHJhd2VyXCIpO1xuICAgIGNvbnN0IHJpZ2h0RGlyZWN0aW9uQWN0aW9uRHJhd2VyID0gQXRvbS5maW5kKEFjdGlvbkRyYXdlckF0b20sIFwicmlnaHREaXJlY3Rpb25BY3Rpb25EcmF3ZXJcIik7XG5cbiAgICBpdChcInNob3VsZCBzaG93IHNsaWRlIGVmZmVjdCBvbiBob3Zlci9jaGVjayBjb3JyZWN0IHRleHRcIiwgKCkgPT4ge1xuICAgICAgICBkZWZhdWx0QWN0aW9uRHJhd2VyLm1vdmVNb3VzZVRvVGFyZ2V0KGRlZmF1bHRBY3Rpb25EcmF3ZXIpO1xuICAgICAgICBkZWZhdWx0QWN0aW9uRHJhd2VyLm1vdmVNb3VzZVRvTWVudUljb24oXCJtdXRlXCIpO1xuICAgICAgICBleHBlY3QoZGVmYXVsdEFjdGlvbkRyYXdlci5nZXRUb29sdGlwQXR0cmlidXRlKFwiY29udGVudFwiKSlcbiAgICAgICAgICAgIC50b0JlKGRlZmF1bHRBY3Rpb25EcmF3ZXIuZ2V0TWVudUljb25BdHRyaWJ1dGUoXCJtdXRlXCIsIFwidG9vbC10aXBcIikpO1xuICAgIH0pO1xuXG4gICAgaXQoXCJzaG91bGQgaGF2ZSBsZWZ0IGRpcmVjdGlvbiBtZW51XCIsICgpID0+IHtcbiAgICAgICAgZXhwZWN0KGRlZmF1bHRBY3Rpb25EcmF3ZXIuZ2V0TWVudURpcmVjdGlvbigpKS50b0JlKFwibWF0cml4KDEsIDAsIDAsIDEsIDAsIDApXCIpO1xuICAgICAgICBkZWZhdWx0QWN0aW9uRHJhd2VyLm1vdmVNb3VzZVRvVGFyZ2V0KGRlZmF1bHRBY3Rpb25EcmF3ZXIpO1xuICAgICAgICBleHBlY3QoZGVmYXVsdEFjdGlvbkRyYXdlci5nZXRNZW51RGlyZWN0aW9uKCkpLnRvQmUoXCJtYXRyaXgoMSwgMCwgMCwgMSwgLTkwLCAwKVwiKTtcbiAgICB9KTtcblxuICAgIGl0KFwic2hvdWxkIGhhdmUgcmlnaHQgZGlyZWN0aW9uIG1lbnVcIiwgKCkgPT4ge1xuICAgICAgICBleHBlY3QocmlnaHREaXJlY3Rpb25BY3Rpb25EcmF3ZXIuZ2V0TWVudURpcmVjdGlvbigpKS50b0JlKFwibWF0cml4KDEsIDAsIDAsIDEsIDAsIDApXCIpO1xuICAgICAgICByaWdodERpcmVjdGlvbkFjdGlvbkRyYXdlci5tb3ZlTW91c2VUb1RhcmdldChyaWdodERpcmVjdGlvbkFjdGlvbkRyYXdlcik7XG4gICAgICAgIGV4cGVjdChyaWdodERpcmVjdGlvbkFjdGlvbkRyYXdlci5nZXRNZW51RGlyZWN0aW9uKCkpLnRvQmUoXCJtYXRyaXgoMSwgMCwgMCwgMSwgOTAsIDApXCIpO1xuICAgIH0pO1xuXG4gICAgaXQoXCJzaG91bGQgdHJpZ2dlciBtZXRob2QgYWN0aW9uIG9uIGNsaWNrXCIsICgpID0+IHtcbiAgICAgICAgZGVmYXVsdEFjdGlvbkRyYXdlci5tb3ZlTW91c2VUb1RhcmdldChkZWZhdWx0QWN0aW9uRHJhd2VyKTtcbiAgICAgICAgZGVmYXVsdEFjdGlvbkRyYXdlci5jbGlja01lbnVJY29uKFwibXV0ZVwiKTtcbiAgICAgICAgZGVmYXVsdEFjdGlvbkRyYXdlci5nZXRUb2FzdENvbnRhaW5lcigpXG4gICAgICAgICAgICAudGhlbihpc1Zpc2libGUgPT4gIV8uaXNFcXVhbChpc1Zpc2libGUsIFwidHJ1ZVwiKSk7XG4gICAgICAgIGV4cGVjdChkZWZhdWx0QWN0aW9uRHJhd2VyLmdldFRvYXN0Q29udGFpbmVyKCkpLnRvQmUodHJ1ZSk7XG4gICAgICAgIGRlZmF1bHRBY3Rpb25EcmF3ZXIuZ2V0VG9hc3RDb250YWluZXIoKVxuICAgICAgICAgICAgLnRoZW4oaXNWaXNpYmxlID0+ICFfLmlzRXF1YWwoaXNWaXNpYmxlLCBcInRydWVcIikpO1xuICAgICAgICBkZWZhdWx0QWN0aW9uRHJhd2VyLmNsaWNrTWVudUljb24oXCJhY2tub3dsZWRnZVwiKTtcbiAgICAgICAgZXhwZWN0KGRlZmF1bHRBY3Rpb25EcmF3ZXIuZ2V0VG9hc3RDb250YWluZXIoKSkudG9CZSh0cnVlKTtcbiAgICAgICAgZGVmYXVsdEFjdGlvbkRyYXdlci5nZXRUb2FzdENvbnRhaW5lcigpXG4gICAgICAgICAgICAudGhlbihpc1Zpc2libGUgPT4gIV8uaXNFcXVhbChpc1Zpc2libGUsIFwidHJ1ZVwiKSk7XG4gICAgICAgIGRlZmF1bHRBY3Rpb25EcmF3ZXIuY2xpY2tNZW51SWNvbihcInNvdW5kLTNcIik7XG4gICAgICAgIGV4cGVjdChkZWZhdWx0QWN0aW9uRHJhd2VyLmdldFRvYXN0Q29udGFpbmVyKCkpLnRvQmUodHJ1ZSk7XG4gICAgfSk7XG59KTtcbiJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==
