"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const protractor = require("@solarwinds/uzi/protractor");
const protractor_1 = require("@solarwinds/uzi/protractor");
class SpecHelpers {
    /**
     * Checks if element is not present first. If it is present, returns true if the element is not displayed.
     * Internally getElement is used. If that call fails, the error is caught and onErrorResolveAs will be returned.
     * By default this value is false under the assumption that failure to locate the elemen means it is not present.
     * Useful in combination with browser.wait:
     * browser.wait(()=>SpecHelpers.isNotPresentOrNotDisplayed(myAtom));
     */
    static isNotPresentOrNotDisplayed(atom, onErrorResolveAs = true) {
        return SpecHelpers.wrapPromise((() => __awaiter(this, void 0, void 0, function* () {
            let displayed = onErrorResolveAs;
            try {
                if (yield atom.getElement().isPresent()) {
                    displayed = yield atom.getElement().isDisplayed();
                    return !displayed;
                }
                else {
                    return true;
                }
            }
            catch (e) {
                // Catch error since we dont' want failures of getElement or isPresent to
                // stop tests. Instead we return onErrorResolveAs
            }
            return displayed;
        }))());
    }
    /**
     * Checks if element is present first before calling element.isDisplayed to avoid error when element is
     * not even present
     */
    static isPresentAndDisplayed(atom) {
        return SpecHelpers.wrapPromise((() => __awaiter(this, void 0, void 0, function* () {
            let displayed = false;
            try {
                if (yield atom.getElement().isPresent()) {
                    displayed = yield atom.getElement().isDisplayed();
                    return displayed;
                }
                else {
                    return displayed;
                }
            }
            catch (e) {
                console.log("SpecHelpers.isPresentAndDisplayed", e.message);
            }
            return false;
        }))());
    }
    static mouseOver(atom, offset) {
        return protractor_1.browser.actions().mouseMove(atom.getElement().getWebElement(), offset).perform();
    }
    static mouseDown(atom, offset) {
        return SpecHelpers.wrapPromise((() => __awaiter(this, void 0, void 0, function* () {
            try {
                yield SpecHelpers.mouseOver(atom, offset);
                return yield protractor_1.browser.actions().mouseDown().perform();
            }
            catch (e) {
                console.log("SpecHelpers.mouseDown", e.message);
            }
            return;
        }))());
    }
    static mouseUp(atom, offset) {
        return SpecHelpers.wrapPromise((() => __awaiter(this, void 0, void 0, function* () {
            try {
                yield SpecHelpers.mouseOver(atom, offset);
                return yield protractor_1.browser.actions().mouseUp().perform();
            }
            catch (e) {
                console.log("SpecHelpers.mouseUp", e.message);
            }
            return;
        }))());
    }
    /**
     * Wraps an ES6 Promise as a WebDriver promise for scenarions where promises are needed by Protractor methods.
     */
    static wrapPromise(promise) {
        let deferred = protractor.promise.defer();
        promise.then((value) => deferred.fulfill(value))
            .catch((reason) => deferred.reject(reason));
        return deferred.promise;
    }
}
exports.default = SpecHelpers;

//# sourceMappingURL=data:application/json;base64,
