"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const protractor_1 = require("@solarwinds/uzi/protractor");
const uzi_1 = require("@solarwinds/uzi");
class SelectorAtom extends uzi_1.Atom {
    constructor() {
        super(...arguments);
        this.getCheckboxElement = () => {
            return super.getElement().element(protractor_1.by.className("xui-checkbox-input"));
        };
        this.getCheckboxButton = () => {
            return super.getElement().element(protractor_1.by.className("xui-selector__action"));
        };
        this.getDropdownButton = () => {
            return super.getElement().element(protractor_1.by.className("xui-selector__toggle"));
        };
        this.clickOnDropdownItem = (index) => {
            this.getDropdownButton().click();
            this.getElementFromListByIndex(index).click();
        };
        this.isChecked = () => {
            const cbInput = this.getCheckboxElement();
            return cbInput.getAttribute("checked").then((value) => {
                return value === "true";
            });
        };
        this.isIndeterminate = () => {
            return this.getCheckboxElement().getAttribute("indeterminate").then((value) => {
                return value === "true";
            });
        };
    }
    getElementsList() {
        return super.getElement().element(protractor_1.by.className("xui-selector__menu")).getWebElement();
    }
    getElementFromListByIndex(index) {
        return super.getElement().all(protractor_1.by.className("xui-selector__menuitem"))
            .get(index).getWebElement();
    }
}
SelectorAtom.CSS_CLASS = "xui-selector";
exports.SelectorAtom = SelectorAtom;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbXBvbmVudHMvc2VsZWN0b3Ivc2VsZWN0b3IuYXRvbS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLDJEQUFzRTtBQUN0RSx5Q0FBcUM7QUFHckMsa0JBQTBCLFNBQVEsVUFBSTtJQUF0Qzs7UUFHVyx1QkFBa0IsR0FBRyxHQUFrQixFQUFFO1lBQzVDLE1BQU0sQ0FBQyxLQUFLLENBQUMsVUFBVSxFQUFFLENBQUMsT0FBTyxDQUFDLGVBQUUsQ0FBQyxTQUFTLENBQUMsb0JBQW9CLENBQUMsQ0FBQyxDQUFDO1FBQzFFLENBQUMsQ0FBQztRQUVLLHNCQUFpQixHQUFHLEdBQWtCLEVBQUU7WUFDM0MsTUFBTSxDQUFDLEtBQUssQ0FBQyxVQUFVLEVBQUUsQ0FBQyxPQUFPLENBQUMsZUFBRSxDQUFDLFNBQVMsQ0FBQyxzQkFBc0IsQ0FBQyxDQUFDLENBQUM7UUFDNUUsQ0FBQyxDQUFDO1FBRUssc0JBQWlCLEdBQUcsR0FBa0IsRUFBRTtZQUMzQyxNQUFNLENBQUMsS0FBSyxDQUFDLFVBQVUsRUFBRSxDQUFDLE9BQU8sQ0FBQyxlQUFFLENBQUMsU0FBUyxDQUFDLHNCQUFzQixDQUFDLENBQUMsQ0FBQztRQUM1RSxDQUFDLENBQUM7UUFFSyx3QkFBbUIsR0FBRyxDQUFDLEtBQWEsRUFBRSxFQUFFO1lBQzNDLElBQUksQ0FBQyxpQkFBaUIsRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDO1lBQ2pDLElBQUksQ0FBQyx5QkFBeUIsQ0FBQyxLQUFLLENBQUMsQ0FBQyxLQUFLLEVBQUUsQ0FBQztRQUNsRCxDQUFDLENBQUM7UUFFSyxjQUFTLEdBQUcsR0FBRyxFQUFFO1lBQ3BCLE1BQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxrQkFBa0IsRUFBRSxDQUFDO1lBQzFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDLFNBQVMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLEtBQUssRUFBRSxFQUFFO2dCQUNsRCxNQUFNLENBQUMsS0FBSyxLQUFLLE1BQU0sQ0FBQztZQUM1QixDQUFDLENBQUMsQ0FBQztRQUNQLENBQUMsQ0FBQztRQUVLLG9CQUFlLEdBQUcsR0FBRyxFQUFFO1lBQzFCLE1BQU0sQ0FBQyxJQUFJLENBQUMsa0JBQWtCLEVBQUUsQ0FBQyxZQUFZLENBQUMsZUFBZSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsS0FBSyxFQUFFLEVBQUU7Z0JBQzFFLE1BQU0sQ0FBQyxLQUFLLEtBQUssTUFBTSxDQUFDO1lBQzVCLENBQUMsQ0FBQyxDQUFDO1FBQ1AsQ0FBQyxDQUFDO0lBVU4sQ0FBQztJQVJVLGVBQWU7UUFDbEIsTUFBTSxDQUFDLEtBQUssQ0FBQyxVQUFVLEVBQUUsQ0FBQyxPQUFPLENBQUMsZUFBRSxDQUFDLFNBQVMsQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDLENBQUMsYUFBYSxFQUFFLENBQUM7SUFDMUYsQ0FBQztJQUVNLHlCQUF5QixDQUFDLEtBQWE7UUFDMUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxVQUFVLEVBQUUsQ0FBQyxHQUFHLENBQUMsZUFBRSxDQUFDLFNBQVMsQ0FBQyx3QkFBd0IsQ0FBQyxDQUFDO2FBQ2hFLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxhQUFhLEVBQUUsQ0FBQztJQUNwQyxDQUFDOztBQXZDYSxzQkFBUyxHQUFHLGNBQWMsQ0FBQztBQUQ3QyxvQ0F5Q0MiLCJmaWxlIjoiY29tcG9uZW50cy9zZWxlY3Rvci9zZWxlY3Rvci5hdG9tLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtieSwgcHJvbWlzZSwgRWxlbWVudEZpbmRlcn0gZnJvbSBcIkBzb2xhcndpbmRzL3V6aS9wcm90cmFjdG9yXCI7XG5pbXBvcnQge0F0b219IGZyb20gXCJAc29sYXJ3aW5kcy91emlcIjtcbmltcG9ydCB7V2ViRWxlbWVudFByb21pc2V9IGZyb20gXCJAc29sYXJ3aW5kcy91emkvd2ViZHJpdmVyXCI7XG5cbmV4cG9ydCBjbGFzcyBTZWxlY3RvckF0b20gZXh0ZW5kcyBBdG9tIHtcbiAgICBwdWJsaWMgc3RhdGljIENTU19DTEFTUyA9IFwieHVpLXNlbGVjdG9yXCI7XG5cbiAgICBwdWJsaWMgZ2V0Q2hlY2tib3hFbGVtZW50ID0gKCk6IEVsZW1lbnRGaW5kZXIgPT4ge1xuICAgICAgICByZXR1cm4gc3VwZXIuZ2V0RWxlbWVudCgpLmVsZW1lbnQoYnkuY2xhc3NOYW1lKFwieHVpLWNoZWNrYm94LWlucHV0XCIpKTtcbiAgICB9O1xuXG4gICAgcHVibGljIGdldENoZWNrYm94QnV0dG9uID0gKCk6IEVsZW1lbnRGaW5kZXIgPT4ge1xuICAgICAgICByZXR1cm4gc3VwZXIuZ2V0RWxlbWVudCgpLmVsZW1lbnQoYnkuY2xhc3NOYW1lKFwieHVpLXNlbGVjdG9yX19hY3Rpb25cIikpO1xuICAgIH07XG5cbiAgICBwdWJsaWMgZ2V0RHJvcGRvd25CdXR0b24gPSAoKTogRWxlbWVudEZpbmRlciA9PiB7XG4gICAgICAgIHJldHVybiBzdXBlci5nZXRFbGVtZW50KCkuZWxlbWVudChieS5jbGFzc05hbWUoXCJ4dWktc2VsZWN0b3JfX3RvZ2dsZVwiKSk7XG4gICAgfTtcblxuICAgIHB1YmxpYyBjbGlja09uRHJvcGRvd25JdGVtID0gKGluZGV4OiBudW1iZXIpID0+IHtcbiAgICAgICAgdGhpcy5nZXREcm9wZG93bkJ1dHRvbigpLmNsaWNrKCk7XG4gICAgICAgIHRoaXMuZ2V0RWxlbWVudEZyb21MaXN0QnlJbmRleChpbmRleCkuY2xpY2soKTtcbiAgICB9O1xuXG4gICAgcHVibGljIGlzQ2hlY2tlZCA9ICgpID0+IHtcbiAgICAgICAgY29uc3QgY2JJbnB1dCA9IHRoaXMuZ2V0Q2hlY2tib3hFbGVtZW50KCk7XG4gICAgICAgIHJldHVybiBjYklucHV0LmdldEF0dHJpYnV0ZShcImNoZWNrZWRcIikudGhlbigodmFsdWUpID0+IHtcbiAgICAgICAgICAgIHJldHVybiB2YWx1ZSA9PT0gXCJ0cnVlXCI7XG4gICAgICAgIH0pO1xuICAgIH07XG5cbiAgICBwdWJsaWMgaXNJbmRldGVybWluYXRlID0gKCkgPT4ge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRDaGVja2JveEVsZW1lbnQoKS5nZXRBdHRyaWJ1dGUoXCJpbmRldGVybWluYXRlXCIpLnRoZW4oKHZhbHVlKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gdmFsdWUgPT09IFwidHJ1ZVwiO1xuICAgICAgICB9KTtcbiAgICB9O1xuXG4gICAgcHVibGljIGdldEVsZW1lbnRzTGlzdCgpIHtcbiAgICAgICAgcmV0dXJuIHN1cGVyLmdldEVsZW1lbnQoKS5lbGVtZW50KGJ5LmNsYXNzTmFtZShcInh1aS1zZWxlY3Rvcl9fbWVudVwiKSkuZ2V0V2ViRWxlbWVudCgpO1xuICAgIH1cblxuICAgIHB1YmxpYyBnZXRFbGVtZW50RnJvbUxpc3RCeUluZGV4KGluZGV4OiBudW1iZXIpOiBXZWJFbGVtZW50UHJvbWlzZSB7XG4gICAgICAgIHJldHVybiBzdXBlci5nZXRFbGVtZW50KCkuYWxsKGJ5LmNsYXNzTmFtZShcInh1aS1zZWxlY3Rvcl9fbWVudWl0ZW1cIikpXG4gICAgICAgICAgICAuZ2V0KGluZGV4KS5nZXRXZWJFbGVtZW50KCk7XG4gICAgfVxufVxuIl0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9
