"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const protractor_1 = require("@solarwinds/uzi/protractor");
const helpers_1 = require("../helpers");
describe("USERCONTROL setFocus:", () => {
    let carrotField;
    let onionField;
    let carrotButton;
    let onionButton;
    beforeEach(() => {
        helpers_1.default.prepareBrowser("setFocus");
        carrotField = protractor_1.element(protractor_1.by.id("carrotRadio")).element(protractor_1.by.tagName("input"));
        onionField = protractor_1.element(protractor_1.by.id("onionRadio")).element(protractor_1.by.tagName("input"));
        //we can't do a simple by.id selector here, because webdriver extends the id field
        carrotButton = protractor_1.element(protractor_1.by.css("[id*='carrotButton']"));
        onionButton = protractor_1.element(protractor_1.by.css("[id*='onionButton']"));
    });
    it("clicking button will set focus", () => {
        //ensure its not the selected item
        expectIsNotSelected(carrotField);
        carrotButton.click();
        expectIsSelected(carrotField);
    });
    it("clicking buttons will change focus", () => {
        carrotButton.click();
        expectIsSelected(carrotField);
        expectIsNotSelected(onionField);
        onionButton.click();
        expectIsNotSelected(carrotField);
        expectIsSelected(onionField);
    });
    function expectIsSelected(finder) {
        expect(finder.getId()).toEqual(protractor_1.browser.driver.switchTo().activeElement().getId());
    }
    function expectIsNotSelected(finder) {
        expect(finder.getId()).not.toEqual(protractor_1.browser.driver.switchTo().activeElement().getId());
    }
});

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbXBvbmVudHMvc2V0Rm9jdXMvc2V0Rm9jdXMuZTJlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsMkRBQXdGO0FBQ3hGLHdDQUFpQztBQUVqQyxRQUFRLENBQUMsdUJBQXVCLEVBQUUsR0FBRyxFQUFFO0lBQ25DLElBQUksV0FBMEIsQ0FBQztJQUMvQixJQUFJLFVBQXlCLENBQUM7SUFDOUIsSUFBSSxZQUEyQixDQUFDO0lBQ2hDLElBQUksV0FBMEIsQ0FBQztJQUUvQixVQUFVLENBQUMsR0FBRyxFQUFFO1FBQ1osaUJBQU8sQ0FBQyxjQUFjLENBQUMsVUFBVSxDQUFDLENBQUM7UUFDbkMsV0FBVyxHQUFHLG9CQUFPLENBQUMsZUFBRSxDQUFDLEVBQUUsQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxlQUFFLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7UUFDekUsVUFBVSxHQUFHLG9CQUFPLENBQUMsZUFBRSxDQUFDLEVBQUUsQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxlQUFFLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7UUFFdkUsa0ZBQWtGO1FBQ2xGLFlBQVksR0FBRyxvQkFBTyxDQUFDLGVBQUUsQ0FBQyxHQUFHLENBQUMsc0JBQXNCLENBQUMsQ0FBQyxDQUFDO1FBQ3ZELFdBQVcsR0FBRyxvQkFBTyxDQUFDLGVBQUUsQ0FBQyxHQUFHLENBQUMscUJBQXFCLENBQUMsQ0FBQyxDQUFDO0lBQ3pELENBQUMsQ0FBQyxDQUFDO0lBRUgsRUFBRSxDQUFDLGdDQUFnQyxFQUFFLEdBQUcsRUFBRTtRQUN0QyxrQ0FBa0M7UUFDbEMsbUJBQW1CLENBQUMsV0FBVyxDQUFDLENBQUM7UUFDakMsWUFBWSxDQUFDLEtBQUssRUFBRSxDQUFDO1FBQ3JCLGdCQUFnQixDQUFDLFdBQVcsQ0FBQyxDQUFDO0lBQ2xDLENBQUMsQ0FBQyxDQUFDO0lBRUgsRUFBRSxDQUFDLG9DQUFvQyxFQUFFLEdBQUcsRUFBRTtRQUMxQyxZQUFZLENBQUMsS0FBSyxFQUFFLENBQUM7UUFDckIsZ0JBQWdCLENBQUMsV0FBVyxDQUFDLENBQUM7UUFDOUIsbUJBQW1CLENBQUMsVUFBVSxDQUFDLENBQUM7UUFDaEMsV0FBVyxDQUFDLEtBQUssRUFBRSxDQUFDO1FBQ3BCLG1CQUFtQixDQUFDLFdBQVcsQ0FBQyxDQUFDO1FBQ2pDLGdCQUFnQixDQUFDLFVBQVUsQ0FBQyxDQUFDO0lBQ2pDLENBQUMsQ0FBQyxDQUFDO0lBRUgsMEJBQTBCLE1BQXFCO1FBQzNDLE1BQU0sQ0FBQyxNQUFNLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQyxPQUFPLENBQUMsb0JBQU8sQ0FBQyxNQUFNLENBQUMsUUFBUSxFQUFFLENBQUMsYUFBYSxFQUFFLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztJQUN0RixDQUFDO0lBRUQsNkJBQTZCLE1BQXFCO1FBQzlDLE1BQU0sQ0FBQyxNQUFNLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLG9CQUFPLENBQUMsTUFBTSxDQUFDLFFBQVEsRUFBRSxDQUFDLGFBQWEsRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDLENBQUM7SUFDMUYsQ0FBQztBQUNMLENBQUMsQ0FBQyxDQUFDIiwiZmlsZSI6ImNvbXBvbmVudHMvc2V0Rm9jdXMvc2V0Rm9jdXMuZTJlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHticm93c2VyLCBieSwgZWxlbWVudCwgRWxlbWVudEZpbmRlciwgcHJvbWlzZX0gZnJvbSBcIkBzb2xhcndpbmRzL3V6aS9wcm90cmFjdG9yXCI7XG5pbXBvcnQgSGVscGVycyBmcm9tIFwiLi4vaGVscGVyc1wiO1xuXG5kZXNjcmliZShcIlVTRVJDT05UUk9MIHNldEZvY3VzOlwiLCAoKSA9PiB7XG4gICAgbGV0IGNhcnJvdEZpZWxkOiBFbGVtZW50RmluZGVyO1xuICAgIGxldCBvbmlvbkZpZWxkOiBFbGVtZW50RmluZGVyO1xuICAgIGxldCBjYXJyb3RCdXR0b246IEVsZW1lbnRGaW5kZXI7XG4gICAgbGV0IG9uaW9uQnV0dG9uOiBFbGVtZW50RmluZGVyO1xuXG4gICAgYmVmb3JlRWFjaCgoKSA9PiB7XG4gICAgICAgIEhlbHBlcnMucHJlcGFyZUJyb3dzZXIoXCJzZXRGb2N1c1wiKTtcbiAgICAgICAgY2Fycm90RmllbGQgPSBlbGVtZW50KGJ5LmlkKFwiY2Fycm90UmFkaW9cIikpLmVsZW1lbnQoYnkudGFnTmFtZShcImlucHV0XCIpKTtcbiAgICAgICAgb25pb25GaWVsZCA9IGVsZW1lbnQoYnkuaWQoXCJvbmlvblJhZGlvXCIpKS5lbGVtZW50KGJ5LnRhZ05hbWUoXCJpbnB1dFwiKSk7XG5cbiAgICAgICAgLy93ZSBjYW4ndCBkbyBhIHNpbXBsZSBieS5pZCBzZWxlY3RvciBoZXJlLCBiZWNhdXNlIHdlYmRyaXZlciBleHRlbmRzIHRoZSBpZCBmaWVsZFxuICAgICAgICBjYXJyb3RCdXR0b24gPSBlbGVtZW50KGJ5LmNzcyhcIltpZCo9J2NhcnJvdEJ1dHRvbiddXCIpKTtcbiAgICAgICAgb25pb25CdXR0b24gPSBlbGVtZW50KGJ5LmNzcyhcIltpZCo9J29uaW9uQnV0dG9uJ11cIikpO1xuICAgIH0pO1xuXG4gICAgaXQoXCJjbGlja2luZyBidXR0b24gd2lsbCBzZXQgZm9jdXNcIiwgKCkgPT4ge1xuICAgICAgICAvL2Vuc3VyZSBpdHMgbm90IHRoZSBzZWxlY3RlZCBpdGVtXG4gICAgICAgIGV4cGVjdElzTm90U2VsZWN0ZWQoY2Fycm90RmllbGQpO1xuICAgICAgICBjYXJyb3RCdXR0b24uY2xpY2soKTtcbiAgICAgICAgZXhwZWN0SXNTZWxlY3RlZChjYXJyb3RGaWVsZCk7XG4gICAgfSk7XG5cbiAgICBpdChcImNsaWNraW5nIGJ1dHRvbnMgd2lsbCBjaGFuZ2UgZm9jdXNcIiwgKCkgPT4ge1xuICAgICAgICBjYXJyb3RCdXR0b24uY2xpY2soKTtcbiAgICAgICAgZXhwZWN0SXNTZWxlY3RlZChjYXJyb3RGaWVsZCk7XG4gICAgICAgIGV4cGVjdElzTm90U2VsZWN0ZWQob25pb25GaWVsZCk7XG4gICAgICAgIG9uaW9uQnV0dG9uLmNsaWNrKCk7XG4gICAgICAgIGV4cGVjdElzTm90U2VsZWN0ZWQoY2Fycm90RmllbGQpO1xuICAgICAgICBleHBlY3RJc1NlbGVjdGVkKG9uaW9uRmllbGQpO1xuICAgIH0pO1xuXG4gICAgZnVuY3Rpb24gZXhwZWN0SXNTZWxlY3RlZChmaW5kZXI6IEVsZW1lbnRGaW5kZXIpIHtcbiAgICAgICAgZXhwZWN0KGZpbmRlci5nZXRJZCgpKS50b0VxdWFsKGJyb3dzZXIuZHJpdmVyLnN3aXRjaFRvKCkuYWN0aXZlRWxlbWVudCgpLmdldElkKCkpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGV4cGVjdElzTm90U2VsZWN0ZWQoZmluZGVyOiBFbGVtZW50RmluZGVyKSB7XG4gICAgICAgIGV4cGVjdChmaW5kZXIuZ2V0SWQoKSkubm90LnRvRXF1YWwoYnJvd3Nlci5kcml2ZXIuc3dpdGNoVG8oKS5hY3RpdmVFbGVtZW50KCkuZ2V0SWQoKSk7XG4gICAgfVxufSk7XG4iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=
