import { promise } from "@solarwinds/uzi/protractor";
import * as webdriver from "@solarwinds/uzi/webdriver";
import { Atom } from "@solarwinds/uzi";
export default class SpecHelpers {
    /**
     * Checks if element is not present first. If it is present, returns true if the element is not displayed.
     * Internally getElement is used. If that call fails, the error is caught and onErrorResolveAs will be returned.
     * By default this value is false under the assumption that failure to locate the elemen means it is not present.
     * Useful in combination with browser.wait:
     * browser.wait(()=>SpecHelpers.isNotPresentOrNotDisplayed(myAtom));
     */
    static isNotPresentOrNotDisplayed(atom: Atom, onErrorResolveAs?: boolean): promise.Promise<boolean>;
    /**
     * Checks if element is present first before calling element.isDisplayed to avoid error when element is
     * not even present
     */
    static isPresentAndDisplayed(atom: Atom): promise.Promise<boolean>;
    static mouseOver(atom: Atom, offset?: webdriver.ILocation): promise.Promise<void>;
    static mouseDown(atom: Atom, offset?: webdriver.ILocation): promise.Promise<void>;
    static mouseUp(atom: Atom, offset?: webdriver.ILocation): promise.Promise<void>;
    /**
     * Wraps an ES6 Promise as a WebDriver promise for scenarions where promises are needed by Protractor methods.
     */
    static wrapPromise<T>(promise: Promise<T>): promise.Promise<T>;
}
