"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const protractor_1 = require("@solarwinds/uzi/protractor");
const helpers_1 = require("../helpers");
const index_atom_1 = require("../index.atom");
const uzi_1 = require("@solarwinds/uzi");
describe("USERCONTROL Checkbox", () => {
    let atom;
    beforeEach(() => {
        helpers_1.default.prepareBrowser("checkbox");
        atom = uzi_1.Atom.find(index_atom_1.CheckboxAtom, "testElement");
    });
    describe("Value section:", () => {
        it("should check and uncheck when clicked", () => {
            expect(atom).toBeDefined();
            expect(atom.isChecked()).toBe(true);
            atom.click();
            expect(atom.isChecked()).toBe(false);
            atom.click();
            expect(atom.isChecked()).toBe(true);
        });
        it("should check and uncheck when the model changes", () => {
            expect(atom).toBeDefined();
            expect(atom.isChecked()).toBe(true);
            const toggle = protractor_1.element(protractor_1.by.id("valueToggle"));
            toggle.click();
            expect(atom.isChecked()).toBe(false);
            toggle.click();
            expect(atom.isChecked()).toBe(true);
        });
    });
    describe("Disable section:", () => {
        it("should disable and enable when the model changes", () => {
            expect(atom).toBeDefined();
            expect(atom.isDisabled()).toBe(false);
            const toggle = protractor_1.element(protractor_1.by.id("disableToggle"));
            toggle.click();
            expect(atom.isDisabled()).toBe(true);
            toggle.click();
            expect(atom.isDisabled()).toBe(false);
        });
    });
    describe("Attribute section:", () => {
        it("should have title based on 'title' attribute", () => {
            const label = atom.getLabel();
            expect(label.getAttribute("title")).toEqual("TITLE TEXT");
        });
        it("should use help text based 'help-text' attribute", () => {
            expect(atom.getHelpHintText()).toEqual("HELP TEXT");
        });
        it("should be required if 'require-text' is set", function () {
            expect(atom.isRequired()).toBe(true);
        });
        xit("should show validation message from 'require-text' attribute", function () {
            const text = atom.getValidationText();
            expect(text).toEqual("REQUIRED TEXT");
        });
        it("should set indeterminate value on script object from 'is-indeterminate' attribute", function () {
            expect(atom.isIndeterminate()).toEqual(true);
        });
    });
    describe("Content section:", () => {
        it("content should be transcluded", () => {
            expect(atom.getContent()).toEqual("INNER CONTENT");
        });
    });
});

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbXBvbmVudHMvY2hlY2tib3gvY2hlY2tib3guZTJlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsMkRBQWdFO0FBQ2hFLHdDQUFpQztBQUNqQyw4Q0FBMkM7QUFDM0MseUNBQXFDO0FBRXJDLFFBQVEsQ0FBQyxzQkFBc0IsRUFBRSxHQUFHLEVBQUU7SUFDbEMsSUFBSSxJQUFrQixDQUFDO0lBRXZCLFVBQVUsQ0FBQyxHQUFHLEVBQUU7UUFDWixpQkFBTyxDQUFDLGNBQWMsQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUNuQyxJQUFJLEdBQUcsVUFBSSxDQUFDLElBQUksQ0FBQyx5QkFBWSxFQUFFLGFBQWEsQ0FBQyxDQUFDO0lBQ2xELENBQUMsQ0FBQyxDQUFDO0lBRUgsUUFBUSxDQUFDLGdCQUFnQixFQUFFLEdBQUcsRUFBRTtRQUM1QixFQUFFLENBQUMsdUNBQXVDLEVBQUUsR0FBRyxFQUFFO1lBQzdDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxXQUFXLEVBQUUsQ0FBQztZQUMzQixNQUFNLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1lBRXBDLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQztZQUNiLE1BQU0sQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7WUFFckMsSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDO1lBQ2IsTUFBTSxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUN4QyxDQUFDLENBQUMsQ0FBQztRQUVILEVBQUUsQ0FBQyxpREFBaUQsRUFBRSxHQUFHLEVBQUU7WUFDdkQsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLFdBQVcsRUFBRSxDQUFDO1lBQzNCLE1BQU0sQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQyxJQUFJLENB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QUFDLENBQUMiLCJmaWxlIjoiY29tcG9uZW50cy9jaGVja2JveC9jaGVja2JveC5lMmUuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge2J5LCBlbGVtZW50LCBwcm9taXNlfSBmcm9tIFwiQHNvbGFyd2luZHMvdXppL3Byb3RyYWN0b3JcIjtcbmltcG9ydCBIZWxwZXJzIGZyb20gXCIuLi9oZWxwZXJzXCI7XG5pbXBvcnQge0NoZWNrYm94QXRvbX0gZnJvbSBcIi4uL2luZGV4LmF0b21cIjtcbmltcG9ydCB7QXRvbX0gZnJvbSBcIkBzb2xhcndpbmRzL3V6aVwiO1xuXG5kZXNjcmliZShcIlVTRVJDT05UUk9MIENoZWNrYm94XCIsICgpID0+IHtcbiAgICBsZXQgYXRvbTogQ2hlY2tib3hBdG9tO1xuXG4gICAgYmVmb3JlRWFjaCgoKSA9PiB7XG4gICAgICAgIEhlbHBlcnMucHJlcGFyZUJyb3dzZXIoXCJjaGVja2JveFwiKTtcbiAgICAgICAgYXRvbSA9IEF0b20uZmluZChDaGVja2JveEF0b20sIFwidGVzdEVsZW1lbnRcIik7XG4gICAgfSk7XG5cbiAgICBkZXNjcmliZShcIlZhbHVlIHNlY3Rpb246XCIsICgpID0+IHtcbiAgICAgICAgaXQoXCJzaG91bGQgY2hlY2sgYW5kIHVuY2hlY2sgd2hlbiBjbGlja2VkXCIsICgpID0+IHtcbiAgICAgICAgICAgIGV4cGVjdChhdG9tKS50b0JlRGVmaW5lZCgpO1xuICAgICAgICAgICAgZXhwZWN0KGF0b20uaXNDaGVja2VkKCkpLnRvQmUodHJ1ZSk7XG5cbiAgICAgICAgICAgIGF0b20uY2xpY2soKTtcbiAgICAgICAgICAgIGV4cGVjdChhdG9tLmlzQ2hlY2tlZCgpKS50b0JlKGZhbHNlKTtcblxuICAgICAgICAgICAgYXRvbS5jbGljaygpO1xuICAgICAgICAgICAgZXhwZWN0KGF0b20uaXNDaGVja2VkKCkpLnRvQmUodHJ1ZSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGl0KFwic2hvdWxkIGNoZWNrIGFuZCB1bmNoZWNrIHdoZW4gdGhlIG1vZGVsIGNoYW5nZXNcIiwgKCkgPT4ge1xuICAgICAgICAgICAgZXhwZWN0KGF0b20pLnRvQmVEZWZpbmVkKCk7XG4gICAgICAgICAgICBleHBlY3QoYXRvbS5pc0NoZWNrZWQoKSkudG9CZSh0cnVlKTtcblxuICAgICAgICAgICAgY29uc3QgdG9nZ2xlID0gZWxlbWVudChieS5pZChcInZhbHVlVG9nZ2xlXCIpKTtcbiAgICAgICAgICAgIHRvZ2dsZS5jbGljaygpO1xuXG4gICAgICAgICAgICBleHBlY3QoYXRvbS5pc0NoZWNrZWQoKSkudG9CZShmYWxzZSk7XG5cbiAgICAgICAgICAgIHRvZ2dsZS5jbGljaygpO1xuICAgICAgICAgICAgZXhwZWN0KGF0b20uaXNDaGVja2VkKCkpLnRvQmUodHJ1ZSk7XG4gICAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgZGVzY3JpYmUoXCJEaXNhYmxlIHNlY3Rpb246XCIsICgpID0+IHtcbiAgICAgICAgaXQoXCJzaG91bGQgZGlzYWJsZSBhbmQgZW5hYmxlIHdoZW4gdGhlIG1vZGVsIGNoYW5nZXNcIiwgKCkgPT4ge1xuICAgICAgICAgICAgZXhwZWN0KGF0b20pLnRvQmVEZWZpbmVkKCk7XG4gICAgICAgICAgICBleHBlY3QoYXRvbS5pc0Rpc2FibGVkKCkpLnRvQmUoZmFsc2UpO1xuXG4gICAgICAgICAgICBjb25zdCB0b2dnbGUgPSBlbGVtZW50KGJ5LmlkKFwiZGlzYWJsZVRvZ2dsZVwiKSk7XG4gICAgICAgICAgICB0b2dnbGUuY2xpY2soKTtcblxuICAgICAgICAgICAgZXhwZWN0KGF0b20uaXNEaXNhYmxlZCgpKS50b0JlKHRydWUpO1xuXG4gICAgICAgICAgICB0b2dnbGUuY2xpY2soKTtcbiAgICAgICAgICAgIGV4cGVjdChhdG9tLmlzRGlzYWJsZWQoKSkudG9CZShmYWxzZSk7XG4gICAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgZGVzY3JpYmUoXCJBdHRyaWJ1dGUgc2VjdGlvbjpcIiwgKCkgPT4ge1xuICAgICAgICBpdChcInNob3VsZCBoYXZlIHRpdGxlIGJhc2VkIG9uICd0aXRsZScgYXR0cmlidXRlXCIsICgpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGxhYmVsID0gYXRvbS5nZXRMYWJlbCgpO1xuICAgICAgICAgICAgZXhwZWN0KGxhYmVsLmdldEF0dHJpYnV0ZShcInRpdGxlXCIpKS50b0VxdWFsKFwiVElUTEUgVEVYVFwiKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaXQoXCJzaG91bGQgdXNlIGhlbHAgdGV4dCBiYXNlZCAnaGVscC10ZXh0JyBhdHRyaWJ1dGVcIiwgKCkgPT4ge1xuICAgICAgICAgICAgZXhwZWN0KGF0b20uZ2V0SGVscEhpbnRUZXh0KCkpLnRvRXF1YWwoXCJIRUxQIFRFWFRcIik7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGl0KFwic2hvdWxkIGJlIHJlcXVpcmVkIGlmICdyZXF1aXJlLXRleHQnIGlzIHNldFwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBleHBlY3QoYXRvbS5pc1JlcXVpcmVkKCkpLnRvQmUodHJ1ZSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHhpdChcInNob3VsZCBzaG93IHZhbGlkYXRpb24gbWVzc2FnZSBmcm9tICdyZXF1aXJlLXRleHQnIGF0dHJpYnV0ZVwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBjb25zdCB0ZXh0ID0gYXRvbS5nZXRWYWxpZGF0aW9uVGV4dCgpO1xuICAgICAgICAgICAgZXhwZWN0KHRleHQpLnRvRXF1YWwoXCJSRVFVSVJFRCBURVhUXCIpO1xuICAgICAgICB9KTtcblxuICAgICAgICBpdChcInNob3VsZCBzZXQgaW5kZXRlcm1pbmF0ZSB2YWx1ZSBvbiBzY3JpcHQgb2JqZWN0IGZyb20gJ2lzLWluZGV0ZXJtaW5hdGUnIGF0dHJpYnV0ZVwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBleHBlY3QoYXRvbS5pc0luZGV0ZXJtaW5hdGUoKSkudG9FcXVhbCh0cnVlKTtcbiAgICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBkZXNjcmliZShcIkNvbnRlbnQgc2VjdGlvbjpcIiwgKCkgPT4ge1xuICAgICAgICBpdChcImNvbnRlbnQgc2hvdWxkIGJlIHRyYW5zY2x1ZGVkXCIsICgpID0+IHtcbiAgICAgICAgICAgIGV4cGVjdChhdG9tLmdldENvbnRlbnQoKSkudG9FcXVhbChcIklOTkVSIENPTlRFTlRcIik7XG4gICAgICAgIH0pO1xuICAgIH0pO1xufSk7XG4iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=
