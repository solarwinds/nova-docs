"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const protractor_1 = require("@solarwinds/uzi/protractor");
const helpers_1 = require("../helpers");
const index_atom_1 = require("../index.atom");
xdescribe("USERCONTROL Accordion", () => {
    let accordion;
    beforeEach(() => {
        helpers_1.default.prepareBrowser("accordion");
        let section = protractor_1.element(protractor_1.by.id("accordion-page"));
        accordion = index_atom_1.AccordionAtom.findIn(index_atom_1.AccordionAtom, section);
    });
    it("will expand when header is clicked", () => {
        let group = accordion.getGroup("group1");
        expect(group.isCollapsed()).toEqual(true);
        group.toggleExpand();
        expect(group.isExpanded()).toEqual(true);
    });
    it("will not collapse original section when new one is expanded by default", () => {
        let group1 = accordion.getGroup("group1");
        let group2 = accordion.getGroup("group2");
        expect(group1.isCollapsed()).toEqual(true);
        expect(group2.isCollapsed()).toEqual(true);
        group1.toggleExpand();
        expect(group1.isExpanded()).toEqual(true);
        group2.toggleExpand();
        expect(group2.isExpanded()).toEqual(true);
    });
    it("will collapse original section when new one is expanded when close-others=true", () => {
        //default value is false so clicking over it sets to true
        protractor_1.element(protractor_1.by.id("oneAtTimeCheckBox")).click();
        let group1 = accordion.getGroup("group1");
        let group2 = accordion.getGroup("group2");
        expect(group1.isCollapsed()).toEqual(true);
        expect(group2.isCollapsed()).toEqual(true);
        group1.toggleExpand();
        expect(group1.isExpanded()).toEqual(true);
        expect(group1.isExpanded()).toEqual(true);
        group2.toggleExpand();
        expect(group1.isCollapsed()).toEqual(true);
        expect(group2.isExpanded()).toEqual(true);
    });
});

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbXBvbmVudHMvYWNjb3JkaW9uL2FjY29yZGlvbi5lMmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSwyREFBZ0U7QUFDaEUsd0NBQWlDO0FBQ2pDLDhDQUE0QztBQUU1QyxTQUFTLENBQUMsdUJBQXVCLEVBQUUsR0FBRyxFQUFFO0lBQ3BDLElBQUksU0FBd0IsQ0FBQztJQUM3QixVQUFVLENBQUMsR0FBRyxFQUFFO1FBQ1osaUJBQU8sQ0FBQyxjQUFjLENBQUMsV0FBVyxDQUFDLENBQUM7UUFDcEMsSUFBSSxPQUFPLEdBQUcsb0JBQU8sQ0FBQyxlQUFFLENBQUMsRUFBRSxDQUFDLGdCQUFnQixDQUFDLENBQUMsQ0FBQztRQUMvQyxTQUFTLEdBQUcsMEJBQWEsQ0FBQyxNQUFNLENBQUMsMEJBQWEsRUFBRSxPQUFPLENBQUMsQ0FBQztJQUM3RCxDQUFDLENBQUMsQ0FBQztJQUVILEVBQUUsQ0FBQyxvQ0FBb0MsRUFBRSxHQUFHLEVBQUU7UUFDMUMsSUFBSSxLQUFLLEdBQUcsU0FBUyxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUN6QyxNQUFNLENBQUMsS0FBSyxDQUFDLFdBQVcsRUFBRSxDQUFDLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQzFDLEtBQUssQ0FBQyxZQUFZLEVBQUUsQ0FBQztRQUNyQixNQUFNLENBQUMsS0FBSyxDQUFDLFVBQVUsRUFBRSxDQUFDLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQzdDLENBQUMsQ0FBQyxDQUFDO0lBRUgsRUFBRSxDQUFDLHdFQUF3RSxFQUFFLEdBQUcsRUFBRTtRQUM5RSxJQUFJLE1BQU0sR0FBRyxTQUFTLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQzFDLElBQUksTUFBTSxHQUFHLFNBQVMsQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDMUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxXQUFXLEVBQUUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUMzQyxNQUFNLENBQUMsTUFBTSxDQUFDLFdBQVcsRUFBRSxDQUFDLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQzNDLE1BQU0sQ0FBQyxZQUFZLEVBQUUsQ0FBQztRQUN0QixNQUFNLENBQUMsTUFBTSxDQUFDLFVBQVUsRUFBRSxDQUFDLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQzFDLE1BQU0sQ0FBQyxZQUFZLEVBQUUsQ0FBQztRQUN0QixNQUFNLENBQUMsTUFBTSxDQUFDLFVBQVUsRUFBRSxDQUFDLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQzlDLENBQUMsQ0FBQyxDQUFDO0lBRUgsRUFBRSxDQUFDLGdGQUFnRixFQUFFLEdBQUcsRUFBRTtRQUN0Rix5REFBeUQ7UUFDekQsb0JBQU8sQ0FBQyxlQUFFLENBQUMsRUFBRSxDQUFDLG1CQUFtQixDQUFDLENBQUMsQ0FBQyxLQUFLLEVBQUUsQ0FBQztRQUM1QyxJQUFJLE1BQU0sR0FBRyxTQUFTLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQzFDLElBQUksTUFBTSxHQUFHLFNBQVMsQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDMUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxXQUFXLEVBQUUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUMzQyxNQUFNLENBQUMsTUFBTSxDQUFDLFdBQVcsRUFBRSxDQUFDLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQzNDLE1BQU0sQ0FBQyxZQUFZLEVBQUUsQ0FBQztRQUN0QixNQUFNLENBQUMsTUFBTSxDQUFDLFVBQVUsRUFBRSxDQUFDLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQzFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsVUFBVSxFQUFFLENBQUMsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDMUMsTUFBTSxDQUFDLFlBQVksRUFBRSxDQUFDO1FBQ3RCLE1BQU0sQ0FBQyxNQUFNLENBQUMsV0FBVyxFQUFFLENBQUMsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDM0MsTUFBTSxDQUFDLE1BQU0sQ0FBQyxVQUFVLEVBQUUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUM5QyxDQUFDLENBQUMsQ0FBQztBQUNQLENBQUMsQ0FBQyxDQUFDIiwiZmlsZSI6ImNvbXBvbmVudHMvYWNjb3JkaW9uL2FjY29yZGlvbi5lMmUuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge2J5LCBlbGVtZW50LCBwcm9taXNlfSBmcm9tIFwiQHNvbGFyd2luZHMvdXppL3Byb3RyYWN0b3JcIjtcbmltcG9ydCBIZWxwZXJzIGZyb20gXCIuLi9oZWxwZXJzXCI7XG5pbXBvcnQge0FjY29yZGlvbkF0b219IGZyb20gXCIuLi9pbmRleC5hdG9tXCI7XG5cbnhkZXNjcmliZShcIlVTRVJDT05UUk9MIEFjY29yZGlvblwiLCAoKSA9PiB7XG4gICAgbGV0IGFjY29yZGlvbjogQWNjb3JkaW9uQXRvbTtcbiAgICBiZWZvcmVFYWNoKCgpID0+IHtcbiAgICAgICAgSGVscGVycy5wcmVwYXJlQnJvd3NlcihcImFjY29yZGlvblwiKTtcbiAgICAgICAgbGV0IHNlY3Rpb24gPSBlbGVtZW50KGJ5LmlkKFwiYWNjb3JkaW9uLXBhZ2VcIikpO1xuICAgICAgICBhY2NvcmRpb24gPSBBY2NvcmRpb25BdG9tLmZpbmRJbihBY2NvcmRpb25BdG9tLCBzZWN0aW9uKTtcbiAgICB9KTtcblxuICAgIGl0KFwid2lsbCBleHBhbmQgd2hlbiBoZWFkZXIgaXMgY2xpY2tlZFwiLCAoKSA9PiB7XG4gICAgICAgIGxldCBncm91cCA9IGFjY29yZGlvbi5nZXRHcm91cChcImdyb3VwMVwiKTtcbiAgICAgICAgZXhwZWN0KGdyb3VwLmlzQ29sbGFwc2VkKCkpLnRvRXF1YWwodHJ1ZSk7XG4gICAgICAgIGdyb3VwLnRvZ2dsZUV4cGFuZCgpO1xuICAgICAgICBleHBlY3QoZ3JvdXAuaXNFeHBhbmRlZCgpKS50b0VxdWFsKHRydWUpO1xuICAgIH0pO1xuXG4gICAgaXQoXCJ3aWxsIG5vdCBjb2xsYXBzZSBvcmlnaW5hbCBzZWN0aW9uIHdoZW4gbmV3IG9uZSBpcyBleHBhbmRlZCBieSBkZWZhdWx0XCIsICgpID0+IHtcbiAgICAgICAgbGV0IGdyb3VwMSA9IGFjY29yZGlvbi5nZXRHcm91cChcImdyb3VwMVwiKTtcbiAgICAgICAgbGV0IGdyb3VwMiA9IGFjY29yZGlvbi5nZXRHcm91cChcImdyb3VwMlwiKTtcbiAgICAgICAgZXhwZWN0KGdyb3VwMS5pc0NvbGxhcHNlZCgpKS50b0VxdWFsKHRydWUpO1xuICAgICAgICBleHBlY3QoZ3JvdXAyLmlzQ29sbGFwc2VkKCkpLnRvRXF1YWwodHJ1ZSk7XG4gICAgICAgIGdyb3VwMS50b2dnbGVFeHBhbmQoKTtcbiAgICAgICAgZXhwZWN0KGdyb3VwMS5pc0V4cGFuZGVkKCkpLnRvRXF1YWwodHJ1ZSk7XG4gICAgICAgIGdyb3VwMi50b2dnbGVFeHBhbmQoKTtcbiAgICAgICAgZXhwZWN0KGdyb3VwMi5pc0V4cGFuZGVkKCkpLnRvRXF1YWwodHJ1ZSk7XG4gICAgfSk7XG5cbiAgICBpdChcIndpbGwgY29sbGFwc2Ugb3JpZ2luYWwgc2VjdGlvbiB3aGVuIG5ldyBvbmUgaXMgZXhwYW5kZWQgd2hlbiBjbG9zZS1vdGhlcnM9dHJ1ZVwiLCAoKSA9PiB7XG4gICAgICAgIC8vZGVmYXVsdCB2YWx1ZSBpcyBmYWxzZSBzbyBjbGlja2luZyBvdmVyIGl0IHNldHMgdG8gdHJ1ZVxuICAgICAgICBlbGVtZW50KGJ5LmlkKFwib25lQXRUaW1lQ2hlY2tCb3hcIikpLmNsaWNrKCk7XG4gICAgICAgIGxldCBncm91cDEgPSBhY2NvcmRpb24uZ2V0R3JvdXAoXCJncm91cDFcIik7XG4gICAgICAgIGxldCBncm91cDIgPSBhY2NvcmRpb24uZ2V0R3JvdXAoXCJncm91cDJcIik7XG4gICAgICAgIGV4cGVjdChncm91cDEuaXNDb2xsYXBzZWQoKSkudG9FcXVhbCh0cnVlKTtcbiAgICAgICAgZXhwZWN0KGdyb3VwMi5pc0NvbGxhcHNlZCgpKS50b0VxdWFsKHRydWUpO1xuICAgICAgICBncm91cDEudG9nZ2xlRXhwYW5kKCk7XG4gICAgICAgIGV4cGVjdChncm91cDEuaXNFeHBhbmRlZCgpKS50b0VxdWFsKHRydWUpO1xuICAgICAgICBleHBlY3QoZ3JvdXAxLmlzRXhwYW5kZWQoKSkudG9FcXVhbCh0cnVlKTtcbiAgICAgICAgZ3JvdXAyLnRvZ2dsZUV4cGFuZCgpO1xuICAgICAgICBleHBlY3QoZ3JvdXAxLmlzQ29sbGFwc2VkKCkpLnRvRXF1YWwodHJ1ZSk7XG4gICAgICAgIGV4cGVjdChncm91cDIuaXNFeHBhbmRlZCgpKS50b0VxdWFsKHRydWUpO1xuICAgIH0pO1xufSk7XG4iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=
