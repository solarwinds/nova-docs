"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const protractor_1 = require("@solarwinds/uzi/protractor");
const uzi_1 = require("@solarwinds/uzi");
var IconSize;
(function (IconSize) {
    IconSize[IconSize["small"] = 0] = "small";
    IconSize[IconSize["default"] = 1] = "default";
    IconSize[IconSize["large"] = 2] = "large";
    IconSize[IconSize["xlarge"] = 3] = "xlarge";
})(IconSize = exports.IconSize || (exports.IconSize = {}));
class IconAtom extends uzi_1.Atom {
    constructor() {
        super(...arguments);
        this.name = () => {
            return super.getElement().getAttribute("icon");
        };
    }
    static count(element, extStyle = "") {
        return element.all(protractor_1.by.css(".xui-icon" + extStyle)).count();
    }
    getSize() {
        return super.getElement().getAttribute("class").then((css) => {
            if (css.search(IconAtom.iconSize.small) !== -1) {
                return IconAtom.iconSize.small;
            }
            else if (css.search(IconAtom.iconSize.xlarge) !== -1) {
                return IconAtom.iconSize.xlarge;
            }
            else if (css.search(IconAtom.iconSize.large) !== -1) {
                return IconAtom.iconSize.large;
            }
            else {
                return IconAtom.iconSize.default;
            }
        });
    }
    getStatus() {
        return super.getElement().getAttribute("status");
    }
    getCounter() {
        return super.getElement().getAttribute("counter");
    }
    getExtraStyling() {
        return super.getElement().getAttribute("css-class");
    }
    getTooltip() {
        const _super = name => super[name];
        return __awaiter(this, void 0, void 0, function* () {
            const tooltipElem = _super("getElement").call(this).element(protractor_1.by.xpath(".."))
                .element(protractor_1.by.xpath(".//div[@uib-tooltip-popup]/div[contains(@class, 'tooltip-inner')]"));
            const isDisplayed = yield tooltipElem.isDisplayed();
            if (!isDisplayed) {
                return undefined;
            }
            return yield tooltipElem.getText();
        });
    }
}
IconAtom.CSS_CLASS = "xui-icon";
IconAtom.iconSize = {
    small: "sm",
    default: "default",
    large: "lg",
    xlarge: "xlg"
};
exports.IconAtom = IconAtom;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbXBvbmVudHMvaWNvbi9pY29uLmF0b20udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUFBLDJEQUErRTtBQUMvRSx5Q0FBcUM7QUFFckMsSUFBWSxRQUtYO0FBTEQsV0FBWSxRQUFRO0lBQ2hCLHlDQUFLLENBQUE7SUFDTCw2Q0FBTyxDQUFBO0lBQ1AseUNBQUssQ0FBQTtJQUNMLDJDQUFNLENBQUE7QUFDVixDQUFDLEVBTFcsUUFBUSxHQUFSLGdCQUFRLEtBQVIsZ0JBQVEsUUFLbkI7QUFFRCxjQUFzQixTQUFRLFVBQUk7SUFBbEM7O1FBY1csU0FBSSxHQUFHLEdBQTRCLEVBQUU7WUFDeEMsTUFBTSxDQUFDLEtBQUssQ0FBQyxVQUFVLEVBQUUsQ0FBQyxZQUFZLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDbkQsQ0FBQyxDQUFDO0lBdUNOLENBQUM7SUE3Q0csTUFBTSxDQUFDLEtBQUssQ0FBQyxPQUFzQixFQUFFLFFBQVEsR0FBRyxFQUFFO1FBQzlDLE1BQU0sQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLGVBQUUsQ0FBQyxHQUFHLENBQUMsV0FBVyxHQUFHLFFBQVEsQ0FBQyxDQUFDLENBQUMsS0FBSyxFQUFFLENBQUM7SUFDL0QsQ0FBQztJQU1NLE9BQU87UUFDVixNQUFNLENBQUMsS0FBSyxDQUFDLFVBQVUsRUFBRSxDQUFDLFlBQVksQ0FBQyxPQUFPLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxHQUFXLEVBQUUsRUFBRTtZQUNqRSxFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUM3QyxNQUFNLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUM7WUFDbkMsQ0FBQztZQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUNyRCxNQUFNLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUM7WUFDcEMsQ0FBQztZQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUNwRCxNQUFNLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUM7WUFDbkMsQ0FBQztZQUFDLElBQUksQ0FBQyxDQUFDO2dCQUNKLE1BQU0sQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQztZQUNyQyxDQUFDO1FBQ0wsQ0FBQyxDQUFDLENBQUM7SUFDUCxDQUFDO0lBRU0sU0FBUztRQUNaLE1BQU0sQ0FBQyxLQUFLLENBQUMsVUFBVSxFQUFFLENBQUMsWUFBWSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQ3JELENBQUM7SUFFTSxVQUFVO1FBQ2IsTUFBTSxDQUFDLEtBQUssQ0FBQyxVQUFVLEVBQUUsQ0FBQyxZQUFZLENBQUMsU0FBUyxDQUFDLENBQUM7SUFDdEQsQ0FBQztJQUVNLGVBQWU7UUFDbEIsTUFBTSxDQUFDLEtBQUssQ0FBQyxVQUFVLEVBQUUsQ0FBQyxZQUFZLENBQUMsV0FBVyxDQUFDLENBQUM7SUFDeEQsQ0FBQztJQUVZLFVBQVU7OztZQUNuQixNQUFNLFdBQVcsR0FBRyxvQkFBZ0IsWUFBRyxPQUFPLENBQUMsZUFBRSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQztpQkFDekQsT0FBTyxDQUFDLGVBQUUsQ0FBQyxLQUFLLENBQUMsbUVBQW1FLENBQUMsQ0FBQyxDQUFDO1lBRTVGLE1BQU0sV0FBVyxHQUFHLE1BQU0sV0FBVyxDQUFDLFdBQVcsRUFBRSxDQUFDO1lBQ3BELEVBQUUsQ0FBQyxDQUFDLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQztnQkFDZixNQUFNLENBQUMsU0FBUyxDQUFDO1lBQ3JCLENBQUM7WUFFRCxNQUFNLENBQUMsTUFBTSxXQUFXLENBQUMsT0FBTyxFQUFFLENBQUM7UUFDdkMsQ0FBQztLQUFBOztBQXJEYSxrQkFBUyxHQUFHLFVBQVUsQ0FBQztBQUV2QixpQkFBUSxHQUFHO0lBQ3JCLEtBQUssRUFBRSxJQUFJO0lBQ1gsT0FBTyxFQUFFLFNBQVM7SUFDbEIsS0FBSyxFQUFFLElBQUk7SUFDWCxNQUFNLEVBQUUsS0FBSztDQUNoQixDQUFDO0FBUk4sNEJBdURDIiwiZmlsZSI6ImNvbXBvbmVudHMvaWNvbi9pY29uLmF0b20uanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge2J5LCBlbGVtZW50LCBFbGVtZW50RmluZGVyLCBwcm9taXNlfSBmcm9tIFwiQHNvbGFyd2luZHMvdXppL3Byb3RyYWN0b3JcIjtcbmltcG9ydCB7QXRvbX0gZnJvbSBcIkBzb2xhcndpbmRzL3V6aVwiO1xuXG5leHBvcnQgZW51bSBJY29uU2l6ZSB7XG4gICAgc21hbGwsXG4gICAgZGVmYXVsdCxcbiAgICBsYXJnZSxcbiAgICB4bGFyZ2Vcbn1cblxuZXhwb3J0IGNsYXNzIEljb25BdG9tIGV4dGVuZHMgQXRvbSB7XG4gICAgcHVibGljIHN0YXRpYyBDU1NfQ0xBU1MgPSBcInh1aS1pY29uXCI7XG5cbiAgICBwdWJsaWMgc3RhdGljIGljb25TaXplID0ge1xuICAgICAgICBzbWFsbDogXCJzbVwiLFxuICAgICAgICBkZWZhdWx0OiBcImRlZmF1bHRcIixcbiAgICAgICAgbGFyZ2U6IFwibGdcIixcbiAgICAgICAgeGxhcmdlOiBcInhsZ1wiXG4gICAgfTtcblxuICAgIHN0YXRpYyBjb3VudChlbGVtZW50OiBFbGVtZW50RmluZGVyLCBleHRTdHlsZSA9IFwiXCIpOiBwcm9taXNlLlByb21pc2U8bnVtYmVyPiB7XG4gICAgICAgIHJldHVybiBlbGVtZW50LmFsbChieS5jc3MoXCIueHVpLWljb25cIiArIGV4dFN0eWxlKSkuY291bnQoKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgbmFtZSA9ICgpOiBwcm9taXNlLlByb21pc2U8c3RyaW5nPiA9PiB7XG4gICAgICAgIHJldHVybiBzdXBlci5nZXRFbGVtZW50KCkuZ2V0QXR0cmlidXRlKFwiaWNvblwiKTtcbiAgICB9O1xuXG4gICAgcHVibGljIGdldFNpemUoKTogcHJvbWlzZS5Qcm9taXNlPHN0cmluZz4ge1xuICAgICAgICByZXR1cm4gc3VwZXIuZ2V0RWxlbWVudCgpLmdldEF0dHJpYnV0ZShcImNsYXNzXCIpLnRoZW4oKGNzczogc3RyaW5nKSA9PiB7XG4gICAgICAgICAgICBpZiAoY3NzLnNlYXJjaChJY29uQXRvbS5pY29uU2l6ZS5zbWFsbCkgIT09IC0xKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIEljb25BdG9tLmljb25TaXplLnNtYWxsO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChjc3Muc2VhcmNoKEljb25BdG9tLmljb25TaXplLnhsYXJnZSkgIT09IC0xKSB7ICAgIC8vIG9yZGVyIGlzIGltcG9ydGFudCBoZXJlXG4gICAgICAgICAgICAgICAgcmV0dXJuIEljb25BdG9tLmljb25TaXplLnhsYXJnZTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoY3NzLnNlYXJjaChJY29uQXRvbS5pY29uU2l6ZS5sYXJnZSkgIT09IC0xKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIEljb25BdG9tLmljb25TaXplLmxhcmdlO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gSWNvbkF0b20uaWNvblNpemUuZGVmYXVsdDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgcHVibGljIGdldFN0YXR1cygpOiBwcm9taXNlLlByb21pc2U8c3RyaW5nPiB7XG4gICAgICAgIHJldHVybiBzdXBlci5nZXRFbGVtZW50KCkuZ2V0QXR0cmlidXRlKFwic3RhdHVzXCIpO1xuICAgIH1cblxuICAgIHB1YmxpYyBnZXRDb3VudGVyKCk6IHByb21pc2UuUHJvbWlzZTxzdHJpbmc+IHtcbiAgICAgICAgcmV0dXJuIHN1cGVyLmdldEVsZW1lbnQoKS5nZXRBdHRyaWJ1dGUoXCJjb3VudGVyXCIpO1xuICAgIH1cblxuICAgIHB1YmxpYyBnZXRFeHRyYVN0eWxpbmcoKTogcHJvbWlzZS5Qcm9taXNlPHN0cmluZz4ge1xuICAgICAgICByZXR1cm4gc3VwZXIuZ2V0RWxlbWVudCgpLmdldEF0dHJpYnV0ZShcImNzcy1jbGFzc1wiKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgYXN5bmMgZ2V0VG9vbHRpcCgpOiBQcm9taXNlPHN0cmluZz4ge1xuICAgICAgICBjb25zdCB0b29sdGlwRWxlbSA9IHN1cGVyLmdldEVsZW1lbnQoKS5lbGVtZW50KGJ5LnhwYXRoKFwiLi5cIikpXG4gICAgICAgICAgICAuZWxlbWVudChieS54cGF0aChcIi4vL2RpdltAdWliLXRvb2x0aXAtcG9wdXBdL2Rpdltjb250YWlucyhAY2xhc3MsICd0b29sdGlwLWlubmVyJyldXCIpKTtcblxuICAgICAgICBjb25zdCBpc0Rpc3BsYXllZCA9IGF3YWl0IHRvb2x0aXBFbGVtLmlzRGlzcGxheWVkKCk7XG4gICAgICAgIGlmICghaXNEaXNwbGF5ZWQpIHtcbiAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gYXdhaXQgdG9vbHRpcEVsZW0uZ2V0VGV4dCgpO1xuICAgIH1cbn1cbiJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==
