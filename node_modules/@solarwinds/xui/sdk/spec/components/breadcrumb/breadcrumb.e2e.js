"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const protractor_1 = require("@solarwinds/uzi/protractor");
const index_atom_1 = require("../index.atom");
const uzi_1 = require("@solarwinds/uzi");
const helpers_1 = require("../helpers");
describe("USERCONTROL Breadcrumb", () => {
    let twoCrumbs;
    let oneCrumbs;
    let zeroCrumbs;
    let undefinedCrumbs;
    beforeEach(() => {
        helpers_1.default.prepareBrowser("breadcrumb");
        twoCrumbs = uzi_1.Atom.findIn(index_atom_1.BreadcrumbAtom, protractor_1.element(protractor_1.by.id("ex2")));
        oneCrumbs = uzi_1.Atom.findIn(index_atom_1.BreadcrumbAtom, protractor_1.element(protractor_1.by.id("ex1")));
        zeroCrumbs = uzi_1.Atom.findIn(index_atom_1.BreadcrumbAtom, protractor_1.element(protractor_1.by.id("ex0")));
        undefinedCrumbs = uzi_1.Atom.findIn(index_atom_1.BreadcrumbAtom, protractor_1.element(protractor_1.by.id("ex")));
    });
    it("should only show when 2 or more crumbs exist", () => __awaiter(this, void 0, void 0, function* () {
        expect(yield twoCrumbs.getCrumbs().count()).toBe(2);
        expect(yield oneCrumbs.getCrumbs().count()).toBe(0);
        expect(yield zeroCrumbs.getCrumbs().count()).toBe(0);
        expect(yield undefinedCrumbs.getCrumbs().count()).toBe(0);
    }));
    it("should show labels passed in", () => __awaiter(this, void 0, void 0, function* () {
        const labels = yield twoCrumbs.getCrumbLabels();
        expect(labels[0]).toBe("root");
        expect(labels[1]).toBe("intermediate page");
    }));
    it("last crumb should not be clickable", () => __awaiter(this, void 0, void 0, function* () {
        const hrefs = yield twoCrumbs.getCrumbTargets();
        //since this give a full url, we're just interested in the end part
        expect(hrefs[0].indexOf("someurl")).toBeGreaterThan(0);
        expect(hrefs[1]).toBeNull();
    }));
    it("should change to currect url on breadcrumb click", () => __awaiter(this, void 0, void 0, function* () {
        let getRootHref = yield twoCrumbs.getCrumbTargets();
        //clicking the first breadcrumb in array
        yield twoCrumbs.getCrumbs().first().click();
        //checking if the url was changed
        expect(yield protractor_1.browser.getCurrentUrl()).toBe(getRootHref[0]);
    }));
});

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbXBvbmVudHMvYnJlYWRjcnVtYi9icmVhZGNydW1iLmUyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBQUEsMkRBQTJFO0FBQzNFLDhDQUErQztBQUMvQyx5Q0FBdUM7QUFDdkMsd0NBQWlDO0FBRWpDLFFBQVEsQ0FBQyx3QkFBd0IsRUFBRSxHQUFHLEVBQUU7SUFDcEMsSUFBSSxTQUF5QixDQUFDO0lBQzlCLElBQUksU0FBeUIsQ0FBQztJQUM5QixJQUFJLFVBQTBCLENBQUM7SUFDL0IsSUFBSSxlQUErQixDQUFDO0lBRXBDLFVBQVUsQ0FBQyxHQUFHLEVBQUU7UUFDWixpQkFBTyxDQUFDLGNBQWMsQ0FBQyxZQUFZLENBQUMsQ0FBQztRQUNyQyxTQUFTLEdBQUcsVUFBSSxDQUFDLE1BQU0sQ0FBQywyQkFBYyxFQUFFLG9CQUFPLENBQUMsZUFBRSxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDL0QsU0FBUyxHQUFHLFVBQUksQ0FBQyxNQUFNLENBQUMsMkJBQWMsRUFBRSxvQkFBTyxDQUFDLGVBQUUsQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQy9ELFVBQVUsR0FBRyxVQUFJLENBQUMsTUFBTSxDQUFDLDJCQUFjLEVBQUUsb0JBQU8sQ0FBQyxlQUFFLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNoRSxlQUFlLEdBQUcsVUFBSSxDQUFDLE1BQU0sQ0FBQywyQkFBYyxFQUFFLG9CQUFPLENBQUMsZUFBRSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDeEUsQ0FBQyxDQUFDLENBQUM7SUFFSCxFQUFFLENBQUMsOENBQThDLEVBQUUsR0FBUyxFQUFFO1FBQzFELE1BQU0sQ0FBQyxNQUFNLFNBQVMsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNwRCxNQUFNLENBQUMsTUFBTSxTQUFTLENBQUMsU0FBUyxFQUFFLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDcEQsTUFBTSxDQUFDLE1BQU0sVUFBVSxDQUFDLFNBQVMsRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3JELE1BQU0sQ0FBQyxNQUFNLGVBQWUsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUM5RCxDQUFDLENBQUEsQ0FBQyxDQUFDO0lBRUgsRUFBRSxDQUFDLDhCQUE4QixFQUFFLEdBQVMsRUFBRTtRQUMxQyxNQUFNLE1BQU0sR0FBRyxNQUFNLFNBQVMsQ0FBQyxjQUFjLEVBQUUsQ0FBQztRQUVoRCxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQy9CLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsbUJBQW1CLENBQUMsQ0FBQztJQUNoRCxDQUFDLENBQUEsQ0FBQyxDQUFDO0lBRUgsRUFBRSxDQUFDLG9DQUFvQyxFQUFFLEdBQVMsRUFBRTtRQUNoRCxNQUFNLEtBQUssR0FBRyxNQUFNLFNBQVMsQ0FBQyxlQUFlLEVBQUUsQ0FBQztRQUNoRCxtRUFBbUU7UUFDbkUsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxlQUFlLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDdkQsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQ2hDLENBQUMsQ0FBQSxDQUFDLENBQUM7SUFFSCxFQUFFLENBQUMsa0RBQWtELEVBQUUsR0FBUyxFQUFFO1FBQzlELElBQUksV0FBVyxHQUFHLE1BQU0sU0FBUyxDQUFDLGVBQWUsRUFBRSxDQUFDO1FBQ3BELHdDQUF3QztRQUN4QyxNQUFNLFNBQVMsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxLQUFLLEVBQUUsQ0FBQztRQUM1QyxpQ0FBaUM7UUFDakMsTUFBTSxDQUFDLE1BQU0sb0JBQU8sQ0FBQyxhQUFhLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvRCxDQUFDLENBQUEsQ0FBQyxDQUFDO0FBQ1AsQ0FBQyxDQUFDLENBQUMiLCJmaWxlIjoiY29tcG9uZW50cy9icmVhZGNydW1iL2JyZWFkY3J1bWIuZTJlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgYnJvd3NlciwgYnksIGVsZW1lbnQsIHByb21pc2UgfSBmcm9tIFwiQHNvbGFyd2luZHMvdXppL3Byb3RyYWN0b3JcIjtcbmltcG9ydCB7IEJyZWFkY3J1bWJBdG9tIH0gZnJvbSBcIi4uL2luZGV4LmF0b21cIjtcbmltcG9ydCB7IEF0b20gfSBmcm9tIFwiQHNvbGFyd2luZHMvdXppXCI7XG5pbXBvcnQgSGVscGVycyBmcm9tIFwiLi4vaGVscGVyc1wiO1xuXG5kZXNjcmliZShcIlVTRVJDT05UUk9MIEJyZWFkY3J1bWJcIiwgKCkgPT4ge1xuICAgIGxldCB0d29DcnVtYnM6IEJyZWFkY3J1bWJBdG9tO1xuICAgIGxldCBvbmVDcnVtYnM6IEJyZWFkY3J1bWJBdG9tO1xuICAgIGxldCB6ZXJvQ3J1bWJzOiBCcmVhZGNydW1iQXRvbTtcbiAgICBsZXQgdW5kZWZpbmVkQ3J1bWJzOiBCcmVhZGNydW1iQXRvbTtcblxuICAgIGJlZm9yZUVhY2goKCkgPT4ge1xuICAgICAgICBIZWxwZXJzLnByZXBhcmVCcm93c2VyKFwiYnJlYWRjcnVtYlwiKTtcbiAgICAgICAgdHdvQ3J1bWJzID0gQXRvbS5maW5kSW4oQnJlYWRjcnVtYkF0b20sIGVsZW1lbnQoYnkuaWQoXCJleDJcIikpKTtcbiAgICAgICAgb25lQ3J1bWJzID0gQXRvbS5maW5kSW4oQnJlYWRjcnVtYkF0b20sIGVsZW1lbnQoYnkuaWQoXCJleDFcIikpKTtcbiAgICAgICAgemVyb0NydW1icyA9IEF0b20uZmluZEluKEJyZWFkY3J1bWJBdG9tLCBlbGVtZW50KGJ5LmlkKFwiZXgwXCIpKSk7XG4gICAgICAgIHVuZGVmaW5lZENydW1icyA9IEF0b20uZmluZEluKEJyZWFkY3J1bWJBdG9tLCBlbGVtZW50KGJ5LmlkKFwiZXhcIikpKTtcbiAgICB9KTtcblxuICAgIGl0KFwic2hvdWxkIG9ubHkgc2hvdyB3aGVuIDIgb3IgbW9yZSBjcnVtYnMgZXhpc3RcIiwgYXN5bmMgKCkgPT4ge1xuICAgICAgICBleHBlY3QoYXdhaXQgdHdvQ3J1bWJzLmdldENydW1icygpLmNvdW50KCkpLnRvQmUoMik7XG4gICAgICAgIGV4cGVjdChhd2FpdCBvbmVDcnVtYnMuZ2V0Q3J1bWJzKCkuY291bnQoKSkudG9CZSgwKTtcbiAgICAgICAgZXhwZWN0KGF3YWl0IHplcm9DcnVtYnMuZ2V0Q3J1bWJzKCkuY291bnQoKSkudG9CZSgwKTtcbiAgICAgICAgZXhwZWN0KGF3YWl0IHVuZGVmaW5lZENydW1icy5nZXRDcnVtYnMoKS5jb3VudCgpKS50b0JlKDApO1xuICAgIH0pO1xuXG4gICAgaXQoXCJzaG91bGQgc2hvdyBsYWJlbHMgcGFzc2VkIGluXCIsIGFzeW5jICgpID0+IHtcbiAgICAgICAgY29uc3QgbGFiZWxzID0gYXdhaXQgdHdvQ3J1bWJzLmdldENydW1iTGFiZWxzKCk7XG5cbiAgICAgICAgZXhwZWN0KGxhYmVsc1swXSkudG9CZShcInJvb3RcIik7XG4gICAgICAgIGV4cGVjdChsYWJlbHNbMV0pLnRvQmUoXCJpbnRlcm1lZGlhdGUgcGFnZVwiKTtcbiAgICB9KTtcblxuICAgIGl0KFwibGFzdCBjcnVtYiBzaG91bGQgbm90IGJlIGNsaWNrYWJsZVwiLCBhc3luYyAoKSA9PiB7XG4gICAgICAgIGNvbnN0IGhyZWZzID0gYXdhaXQgdHdvQ3J1bWJzLmdldENydW1iVGFyZ2V0cygpO1xuICAgICAgICAvL3NpbmNlIHRoaXMgZ2l2ZSBhIGZ1bGwgdXJsLCB3ZSdyZSBqdXN0IGludGVyZXN0ZWQgaW4gdGhlIGVuZCBwYXJ0XG4gICAgICAgIGV4cGVjdChocmVmc1swXS5pbmRleE9mKFwic29tZXVybFwiKSkudG9CZUdyZWF0ZXJUaGFuKDApO1xuICAgICAgICBleHBlY3QoaHJlZnNbMV0pLnRvQmVOdWxsKCk7XG4gICAgfSk7XG5cbiAgICBpdChcInNob3VsZCBjaGFuZ2UgdG8gY3VycmVjdCB1cmwgb24gYnJlYWRjcnVtYiBjbGlja1wiLCBhc3luYyAoKSA9PiB7XG4gICAgICAgIGxldCBnZXRSb290SHJlZiA9IGF3YWl0IHR3b0NydW1icy5nZXRDcnVtYlRhcmdldHMoKTtcbiAgICAgICAgLy9jbGlja2luZyB0aGUgZmlyc3QgYnJlYWRjcnVtYiBpbiBhcnJheVxuICAgICAgICBhd2FpdCB0d29DcnVtYnMuZ2V0Q3J1bWJzKCkuZmlyc3QoKS5jbGljaygpO1xuICAgICAgICAvL2NoZWNraW5nIGlmIHRoZSB1cmwgd2FzIGNoYW5nZWRcbiAgICAgICAgZXhwZWN0KGF3YWl0IGJyb3dzZXIuZ2V0Q3VycmVudFVybCgpKS50b0JlKGdldFJvb3RIcmVmWzBdKTtcbiAgICB9KTtcbn0pO1xuIl0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9
