"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const protractor_1 = require("@solarwinds/uzi/protractor");
const uzi_1 = require("@solarwinds/uzi");
const specHelpers_1 = require("../specHelpers");
class ToastAtom extends uzi_1.Atom {
    static get(index = 0) {
        return new ToastAtom(protractor_1.element.all(protractor_1.by.css(`.${ToastAtom.CSS_CLASS}`)).get(index));
    }
    static close(waitForNotDisplayed = false) {
        return specHelpers_1.default.wrapPromise((() => __awaiter(this, void 0, void 0, function* () {
            try {
                const toastAtom = ToastAtom.get();
                if (yield toastAtom.getElement().isDisplayed()) {
                    const closed = yield toastAtom.close(waitForNotDisplayed);
                    return closed;
                }
            }
            catch (e) {
                console.log("static ToastAtom.close", e);
            }
            return false;
        }))());
    }
    getTitle() {
        return this.getElement().element(protractor_1.by.css(".toast-title")).getText();
    }
    getMessage() {
        return this.getMessageElement().getText();
    }
    getMessageElement() {
        return this.getElement().element(protractor_1.by.css(".toast-message"));
    }
    isToastType(type) {
        return this.getElement().getAttribute("class")
            .then((className) => className.indexOf(`xui-toast--${type}`) > -1);
    }
    close(waitForNotDisplayed = false) {
        return specHelpers_1.default.wrapPromise((() => __awaiter(this, void 0, void 0, function* () {
            try {
                yield this.getElement().element(protractor_1.by.className("toast-close-button")).click();
                if (!waitForNotDisplayed) {
                    return true;
                }
                const closed = yield this.waitUntilNotDisplayed();
                return closed;
            }
            catch (e) {
                console.log("ToastAtom.close", e);
            }
            return false;
        }))());
    }
    isSuccessType() {
        return this.isToastType("success");
    }
    isWarningType() {
        return this.isToastType("warning");
    }
    isInfoType() {
        return this.isToastType("info");
    }
    isErrorType() {
        return this.isToastType("error");
    }
    waitUntilDisplayed() {
        return specHelpers_1.default.wrapPromise((() => __awaiter(this, void 0, void 0, function* () {
            try {
                return yield protractor_1.browser.wait(() => this.getMessageElement().isDisplayed(), ToastAtom.toastTimeout);
            }
            catch (e) {
                console.log("Toast.waitUntilDisplayed", e);
            }
            return false;
        }))());
    }
    waitUntilNotDisplayed() {
        return specHelpers_1.default.wrapPromise((() => __awaiter(this, void 0, void 0, function* () {
            try {
                return yield protractor_1.browser.wait(() => specHelpers_1.default.isNotPresentOrNotDisplayed(this), ToastAtom.toastTimeout);
            }
            catch (e) {
                console.log("Toast.waitUntilNotDisplayed", e);
            }
            return false;
        }))());
    }
}
ToastAtom.CSS_CLASS = "xui-toast";
ToastAtom.toastTimeout = 7000;
exports.ToastAtom = ToastAtom;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbXBvbmVudHMvdG9hc3QvdG9hc3QuYXRvbS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBQUEsMkRBQXdGO0FBQ3hGLHlDQUFxQztBQUNyQyxnREFBeUM7QUFFekMsZUFBdUIsU0FBUSxVQUFJO0lBSXhCLE1BQU0sQ0FBQyxHQUFHLENBQUMsUUFBZ0IsQ0FBQztRQUMvQixNQUFNLENBQUMsSUFBSSxTQUFTLENBQUMsb0JBQU8sQ0FBQyxHQUFHLENBQUMsZUFBRSxDQUFDLEdBQUcsQ0FBQyxJQUFJLFNBQVMsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7SUFDcEYsQ0FBQztJQUVNLE1BQU0sQ0FBQyxLQUFLLENBQUMsc0JBQStCLEtBQUs7UUFDcEQsTUFBTSxDQUFDLHFCQUFXLENBQUMsV0FBVyxDQUFVLENBQUMsR0FBUyxFQUFFO1lBQ2hELElBQUksQ0FBQztnQkFDRCxNQUFNLFNBQVMsR0FBYyxTQUFTLENBQUMsR0FBRyxFQUFFLENBQUM7Z0JBQzdDLEVBQUUsQ0FBQyxDQUFDLE1BQU0sU0FBUyxDQUFDLFVBQVUsRUFBRSxDQUFDLFdBQVcsRUFBRSxDQUFDLENBQUMsQ0FBQztvQkFDN0MsTUFBTSxNQUFNLEdBQUcsTUFBTSxTQUFTLENBQUMsS0FBSyxDQUFDLG1CQUFtQixDQUFDLENBQUM7b0JBQzFELE1BQU0sQ0FBQyxNQUFNLENBQUM7Z0JBQ2xCLENBQUM7WUFDTCxDQUFDO1lBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFDVCxPQUFPLENBQUMsR0FBRyxDQUFDLHdCQUF3QixFQUFFLENBQUMsQ0FBQyxDQUFDO1lBQzdDLENBQUM7WUFDRCxNQUFNLENBQUMsS0FBSyxDQUFDO1FBQ2pCLENBQUMsQ0FBQSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQ1YsQ0FBQztJQUVNLFFBQVE7UUFDWCxNQUFNLENBQUMsSUFBSSxDQUFDLFVBQVUsRUFB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LE1BQU0sb0JBQU8sQ0FBQyxJQUFJLENBQUUsR0FBRyxFQUFFLENBQzNCLHFCQUFXLENBQUMsMEJBQTBCLENBQUMsSUFBSSxDQUFDLEVBQzdDLFNBQVMsQ0FBQyxZQUFZLENBQUMsQ0FBQztZQUNoQyxDQUFDO1lBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFDVCxPQUFPLENBQUMsR0FBRyxDQUFDLDZCQUE2QixFQUFFLENBQUMsQ0FBQyxDQUFDO1lBQ2xELENBQUM7WUFDRCxNQUFNLENBQUMsS0FBSyxDQUFDO1FBQ2pCLENBQUMsQ0FBQSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQ1YsQ0FBQzs7QUFoR2EsbUJBQVMsR0FBRyxXQUFXLENBQUM7QUFDdkIsc0JBQVksR0FBVyxJQUFJLENBQUM7QUFGL0MsOEJBa0dDIiwiZmlsZSI6ImNvbXBvbmVudHMvdG9hc3QvdG9hc3QuYXRvbS5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7YnJvd3NlciwgYnksIGVsZW1lbnQsIEVsZW1lbnRGaW5kZXIsIHByb21pc2V9IGZyb20gXCJAc29sYXJ3aW5kcy91emkvcHJvdHJhY3RvclwiO1xuaW1wb3J0IHtBdG9tfSBmcm9tIFwiQHNvbGFyd2luZHMvdXppXCI7XG5pbXBvcnQgU3BlY0hlbHBlcnMgZnJvbSBcIi4uL3NwZWNIZWxwZXJzXCI7XG5cbmV4cG9ydCBjbGFzcyBUb2FzdEF0b20gZXh0ZW5kcyBBdG9tIHtcbiAgICBwdWJsaWMgc3RhdGljIENTU19DTEFTUyA9IFwieHVpLXRvYXN0XCI7XG4gICAgcHJpdmF0ZSBzdGF0aWMgdG9hc3RUaW1lb3V0OiBudW1iZXIgPSA3MDAwO1xuXG4gICAgcHVibGljIHN0YXRpYyBnZXQoaW5kZXg6IG51bWJlciA9IDApOiBUb2FzdEF0b20ge1xuICAgICAgICByZXR1cm4gbmV3IFRvYXN0QXRvbShlbGVtZW50LmFsbChieS5jc3MoYC4ke1RvYXN0QXRvbS5DU1NfQ0xBU1N9YCkpLmdldChpbmRleCkpO1xuICAgIH1cblxuICAgIHB1YmxpYyBzdGF0aWMgY2xvc2Uod2FpdEZvck5vdERpc3BsYXllZDogYm9vbGVhbiA9IGZhbHNlKTogcHJvbWlzZS5Qcm9taXNlPGJvb2xlYW4+IHtcbiAgICAgICAgcmV0dXJuIFNwZWNIZWxwZXJzLndyYXBQcm9taXNlPGJvb2xlYW4+KChhc3luYyAoKSA9PiB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHRvYXN0QXRvbTogVG9hc3RBdG9tID0gVG9hc3RBdG9tLmdldCgpO1xuICAgICAgICAgICAgICAgIGlmIChhd2FpdCB0b2FzdEF0b20uZ2V0RWxlbWVudCgpLmlzRGlzcGxheWVkKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgY2xvc2VkID0gYXdhaXQgdG9hc3RBdG9tLmNsb3NlKHdhaXRGb3JOb3REaXNwbGF5ZWQpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gY2xvc2VkO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcInN0YXRpYyBUb2FzdEF0b20uY2xvc2VcIiwgZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH0pKCkpO1xuICAgIH1cblxuICAgIHB1YmxpYyBnZXRUaXRsZSgpOiBwcm9taXNlLlByb21pc2U8c3RyaW5nPiB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldEVsZW1lbnQoKS5lbGVtZW50KGJ5LmNzcyhcIi50b2FzdC10aXRsZVwiKSkuZ2V0VGV4dCgpO1xuICAgIH1cblxuICAgIHB1YmxpYyBnZXRNZXNzYWdlKCk6IHByb21pc2UuUHJvbWlzZTxzdHJpbmc+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0TWVzc2FnZUVsZW1lbnQoKS5nZXRUZXh0KCk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBnZXRNZXNzYWdlRWxlbWVudCgpOiBFbGVtZW50RmluZGVyIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0RWxlbWVudCgpLmVsZW1lbnQoYnkuY3NzKFwiLnRvYXN0LW1lc3NhZ2VcIikpO1xuICAgIH1cblxuICAgIHByaXZhdGUgaXNUb2FzdFR5cGUodHlwZTogc3RyaW5nKTogcHJvbWlzZS5Qcm9taXNlPGJvb2xlYW4+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0RWxlbWVudCgpLmdldEF0dHJpYnV0ZShcImNsYXNzXCIpXG4gICAgICAgICAgICAudGhlbigoY2xhc3NOYW1lKSA9PiBjbGFzc05hbWUuaW5kZXhPZihgeHVpLXRvYXN0LS0ke3R5cGV9YCkgPiAtMSk7XG4gICAgfVxuXG4gICAgcHVibGljIGNsb3NlKHdhaXRGb3JOb3REaXNwbGF5ZWQ6IGJvb2xlYW4gPSBmYWxzZSk6IHByb21pc2UuUHJvbWlzZTxib29sZWFuPiB7XG4gICAgICAgIHJldHVybiBTcGVjSGVscGVycy53cmFwUHJvbWlzZTxib29sZWFuPigoYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLmdldEVsZW1lbnQoKS5lbGVtZW50KGJ5LmNsYXNzTmFtZShcInRvYXN0LWNsb3NlLWJ1dHRvblwiKSkuY2xpY2soKTtcbiAgICAgICAgICAgICAgICBpZiAoIXdhaXRGb3JOb3REaXNwbGF5ZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNvbnN0IGNsb3NlZCA9IGF3YWl0IHRoaXMud2FpdFVudGlsTm90RGlzcGxheWVkKCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNsb3NlZDtcblxuICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiVG9hc3RBdG9tLmNsb3NlXCIsIGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9KSgpKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgaXNTdWNjZXNzVHlwZSgpOiBwcm9taXNlLlByb21pc2U8Ym9vbGVhbj4ge1xuICAgICAgICByZXR1cm4gdGhpcy5pc1RvYXN0VHlwZShcInN1Y2Nlc3NcIik7XG4gICAgfVxuXG4gICAgcHVibGljIGlzV2FybmluZ1R5cGUoKTogcHJvbWlzZS5Qcm9taXNlPGJvb2xlYW4+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaXNUb2FzdFR5cGUoXCJ3YXJuaW5nXCIpO1xuICAgIH1cblxuICAgIHB1YmxpYyBpc0luZm9UeXBlKCk6IHByb21pc2UuUHJvbWlzZTxib29sZWFuPiB7XG4gICAgICAgIHJldHVybiB0aGlzLmlzVG9hc3RUeXBlKFwiaW5mb1wiKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgaXNFcnJvclR5cGUoKTogcHJvbWlzZS5Qcm9taXNlPGJvb2xlYW4+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaXNUb2FzdFR5cGUoXCJlcnJvclwiKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgd2FpdFVudGlsRGlzcGxheWVkKCk6IHByb21pc2UuUHJvbWlzZTxib29sZWFuPiB7XG4gICAgICAgIHJldHVybiBTcGVjSGVscGVycy53cmFwUHJvbWlzZTxib29sZWFuPigoYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gYXdhaXQgYnJvd3Nlci53YWl0KCAoKSA9PlxuICAgICAgICAgICAgICAgICAgICAgdGhpcy5nZXRNZXNzYWdlRWxlbWVudCgpLmlzRGlzcGxheWVkKCksXG4gICAgICAgICAgICAgICAgICAgIFRvYXN0QXRvbS50b2FzdFRpbWVvdXQpO1xuICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiVG9hc3Qud2FpdFVudGlsRGlzcGxheWVkXCIsIGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9KSgpKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgd2FpdFVudGlsTm90RGlzcGxheWVkKCk6IHByb21pc2UuUHJvbWlzZTxib29sZWFuPiB7XG4gICAgICAgIHJldHVybiBTcGVjSGVscGVycy53cmFwUHJvbWlzZTxib29sZWFuPigoYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gYXdhaXQgYnJvd3Nlci53YWl0KCAoKSA9PlxuICAgICAgICAgICAgICAgICAgICAgU3BlY0hlbHBlcnMuaXNOb3RQcmVzZW50T3JOb3REaXNwbGF5ZWQodGhpcyksXG4gICAgICAgICAgICAgICAgICAgIFRvYXN0QXRvbS50b2FzdFRpbWVvdXQpO1xuICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiVG9hc3Qud2FpdFVudGlsTm90RGlzcGxheWVkXCIsIGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9KSgpKTtcbiAgICB9XG59XG4iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=
