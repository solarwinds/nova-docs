"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const protractor_1 = require("@solarwinds/uzi/protractor");
const helpers_1 = require("../helpers");
const uzi_1 = require("@solarwinds/uzi");
const index_atom_1 = require("../index.atom");
describe("USERCONTROL spinner: ", () => {
    let section;
    beforeEach(() => {
        helpers_1.default.prepareBrowser("spinner");
        section = protractor_1.element(protractor_1.by.id("content-page"));
    });
    it("will show/hide based on property", () => {
        const spinner = uzi_1.Atom.findIn(index_atom_1.SpinnerAtom, section, 0);
        const spinnerButton = protractor_1.element(protractor_1.by.css("[id*='spinnerButton1']"));
        expect(spinner.isDisplayed()).toBe(false);
        spinnerButton.click();
        expect(spinner.isDisplayed()).toBe(true);
        spinnerButton.click();
        protractor_1.browser.wait(spinner.waitForHidden(), 3000);
        expect(spinner.isDisplayed()).toBe(false);
    });
    it("will respect size", () => {
        const spinner = uzi_1.Atom.findIn(index_atom_1.SpinnerAtom, section, 0);
        const spinnerButton = protractor_1.element(protractor_1.by.css("[id*='spinnerButton1']"));
        spinnerButton.click();
        let width = 4;
        let height = 4;
        spinner.getSize().then((size) => {
            width = size.width;
            height = size.height;
            expect(width).toBe(20);
            expect(height).toBe(20);
        });
    });
    it("will wait for display", () => {
        const spinner = uzi_1.Atom.findIn(index_atom_1.SpinnerAtom, section, 1);
        const spinnerButton = protractor_1.element(protractor_1.by.css("[id*='spinnerButton2']"));
        spinnerButton.click();
        protractor_1.browser.ignoreSynchronization = true;
        //if you do not ignore sync, this promise will wait until the
        // timeout has been evaluated, which not what we are testing
        expect(spinner.isDisplayed()).toBe(false);
        protractor_1.browser.ignoreSynchronization = false;
        protractor_1.browser.wait(spinner.isDisplayed(), 4000); //wait up to 4 seconds
        expect(spinner.isDisplayed()).toBe(true);
    });
});

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbXBvbmVudHMvc3Bpbm5lci9zcGlubmVyLmUyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLDJEQUF3RjtBQUN4Rix3Q0FBaUM7QUFDakMseUNBQXFDO0FBQ3JDLDhDQUEwQztBQUUxQyxRQUFRLENBQUMsdUJBQXVCLEVBQUUsR0FBRyxFQUFFO0lBQ25DLElBQUksT0FBc0IsQ0FBQztJQUUzQixVQUFVLENBQUMsR0FBRyxFQUFFO1FBQ1osaUJBQU8sQ0FBQyxjQUFjLENBQUMsU0FBUyxDQUFDLENBQUM7UUFDbEMsT0FBTyxHQUFHLG9CQUFPLENBQUMsZUFBRSxDQUFDLEVBQUUsQ0FBQyxjQUFjLENBQUMsQ0FBQyxDQUFDO0lBQzdDLENBQUMsQ0FBQyxDQUFDO0lBRUgsRUFBRSxDQUFDLGtDQUFrQyxFQUFFLEdBQUcsRUFBRTtRQUN4QyxNQUFNLE9BQU8sR0FBRyxVQUFJLENBQUMsTUFBTSxDQUFDLHdCQUFXLEVBQUUsT0FBTyxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBQ3JELE1BQU0sYUFBYSxHQUFHLG9CQUFPLENBQUMsZUFBRSxDQUFDLEdBQUcsQ0FBQyx3QkFBd0IsQ0FBQyxDQUFDLENBQUM7UUFDaEUsTUFBTSxDQUFDLE9BQU8sQ0FBQyxXQUFXLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUMxQyxhQUFhLENBQUMsS0FBSyxFQUFFLENBQUM7UUFDdEIsTUFBTSxDQUFDLE9BQU8sQ0FBQyxXQUFXLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUN6QyxhQUFhLENBQUMsS0FBSyxFQUFFLENBQUM7UUFDdEIsb0JBQU8sQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLGFBQWEsRUFBRSxFQUFFLElBQUksQ0FBQyxDQUFDO1FBQzVDLE1BQU0sQ0FBQyxPQUFPLENBQUMsV0FBVyxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDOUMsQ0FBQyxDQUFDLENBQUM7SUFFSCxFQUFFLENBQUMsbUJBQW1CLEVBQUUsR0FBRyxFQUFFO1FBQ3pCLE1BQU0sT0FBTyxHQUFHLFVBQUksQ0FBQyxNQUFNLENBQUMsd0JBQVcsRUFBRSxPQUFPLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFDckQsTUFBTSxhQUFhLEdBQUcsb0JBQU8sQ0FBQyxlQUFFLENBQUMsR0FBRyxDQUFDLHdCQUF3QixDQUFDLENBQUMsQ0FBQztRQUNoRSxhQUFhLENBQUMsS0FBSyxFQUFFLENBQUM7UUFDdEIsSUFBSSxLQUFLLEdBQUcsQ0FBQyxDQUFDO1FBQ2QsSUFBSSxNQUFNLEdBQUcsQ0FBQyxDQUFDO1FBQ2YsT0FBTyxDQUFDLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLElBQVMsRUFBQyxFQUFFO1lBQ2hDLEtBQUssR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDO1lBQ25CLE1BQU0sR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDO1lBQ3JCLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUM7WUFDdkIsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUM1QixDQUFDLENBQUMsQ0FBQztJQUNQLENBQUMsQ0FBQyxDQUFDO0lBRUgsRUFBRSxDQUFDLHVCQUF1QixFQUFFLEdBQUcsRUFBRTtRQUM3QixNQUFNLE9BQU8sR0FBRyxVQUFJLENBQUMsTUFBTSxDQUFDLHdCQUFXLEVBQUUsT0FBTyxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBQ3JELE1BQU0sYUFBYSxHQUFHLG9CQUFPLENBQUMsZUFBRSxDQUFDLEdBQUcsQ0FBQyx3QkFBd0IsQ0FBQyxDQUFDLENBQUM7UUFDaEUsYUFBYSxDQUFDLEtBQUssRUFBRSxDQUFDO1FBQ3RCLG9CQUFPLENBQUMscUJBQXFCLEdBQUcsSUFBSSxDQUFDO1FBQ3JDLDZEQUE2RDtRQUM3RCw0REFBNEQ7UUFDNUQsTUFBTSxDQUFDLE9BQU8sQ0FBQyxXQUFXLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUMxQyxvQkFBTyxDQUFDLHFCQUFxQixHQUFHLEtBQUssQ0FBQztRQUN0QyxvQkFBTyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsV0FBVyxFQUFFLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQyxzQkFBc0I7UUFDakUsTUFBTSxDQUFDLE9BQU8sQ0FBQyxXQUFXLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUU3QyxDQUFDLENBQUMsQ0FBQztBQUNQLENBQUMsQ0FBQyxDQUFDIiwiZmlsZSI6ImNvbXBvbmVudHMvc3Bpbm5lci9zcGlubmVyLmUyZS5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7YnJvd3NlciwgYnksIGVsZW1lbnQsIEVsZW1lbnRGaW5kZXIsIHByb21pc2V9IGZyb20gXCJAc29sYXJ3aW5kcy91emkvcHJvdHJhY3RvclwiO1xuaW1wb3J0IEhlbHBlcnMgZnJvbSBcIi4uL2hlbHBlcnNcIjtcbmltcG9ydCB7QXRvbX0gZnJvbSBcIkBzb2xhcndpbmRzL3V6aVwiO1xuaW1wb3J0IHtTcGlubmVyQXRvbX0gZnJvbSBcIi4uL2luZGV4LmF0b21cIjtcblxuZGVzY3JpYmUoXCJVU0VSQ09OVFJPTCBzcGlubmVyOiBcIiwgKCkgPT4ge1xuICAgIGxldCBzZWN0aW9uOiBFbGVtZW50RmluZGVyO1xuXG4gICAgYmVmb3JlRWFjaCgoKSA9PiB7XG4gICAgICAgIEhlbHBlcnMucHJlcGFyZUJyb3dzZXIoXCJzcGlubmVyXCIpO1xuICAgICAgICBzZWN0aW9uID0gZWxlbWVudChieS5pZChcImNvbnRlbnQtcGFnZVwiKSk7XG4gICAgfSk7XG5cbiAgICBpdChcIndpbGwgc2hvdy9oaWRlIGJhc2VkIG9uIHByb3BlcnR5XCIsICgpID0+IHtcbiAgICAgICAgY29uc3Qgc3Bpbm5lciA9IEF0b20uZmluZEluKFNwaW5uZXJBdG9tLCBzZWN0aW9uLCAwKTtcbiAgICAgICAgY29uc3Qgc3Bpbm5lckJ1dHRvbiA9IGVsZW1lbnQoYnkuY3NzKFwiW2lkKj0nc3Bpbm5lckJ1dHRvbjEnXVwiKSk7XG4gICAgICAgIGV4cGVjdChzcGlubmVyLmlzRGlzcGxheWVkKCkpLnRvQmUoZmFsc2UpO1xuICAgICAgICBzcGlubmVyQnV0dG9uLmNsaWNrKCk7XG4gICAgICAgIGV4cGVjdChzcGlubmVyLmlzRGlzcGxheWVkKCkpLnRvQmUodHJ1ZSk7XG4gICAgICAgIHNwaW5uZXJCdXR0b24uY2xpY2soKTtcbiAgICAgICAgYnJvd3Nlci53YWl0KHNwaW5uZXIud2FpdEZvckhpZGRlbigpLCAzMDAwKTtcbiAgICAgICAgZXhwZWN0KHNwaW5uZXIuaXNEaXNwbGF5ZWQoKSkudG9CZShmYWxzZSk7XG4gICAgfSk7XG5cbiAgICBpdChcIndpbGwgcmVzcGVjdCBzaXplXCIsICgpID0+IHtcbiAgICAgICAgY29uc3Qgc3Bpbm5lciA9IEF0b20uZmluZEluKFNwaW5uZXJBdG9tLCBzZWN0aW9uLCAwKTtcbiAgICAgICAgY29uc3Qgc3Bpbm5lckJ1dHRvbiA9IGVsZW1lbnQoYnkuY3NzKFwiW2lkKj0nc3Bpbm5lckJ1dHRvbjEnXVwiKSk7XG4gICAgICAgIHNwaW5uZXJCdXR0b24uY2xpY2soKTtcbiAgICAgICAgbGV0IHdpZHRoID0gNDtcbiAgICAgICAgbGV0IGhlaWdodCA9IDQ7XG4gICAgICAgIHNwaW5uZXIuZ2V0U2l6ZSgpLnRoZW4oKHNpemU6IGFueSk9PiB7XG4gICAgICAgICAgICB3aWR0aCA9IHNpemUud2lkdGg7XG4gICAgICAgICAgICBoZWlnaHQgPSBzaXplLmhlaWdodDtcbiAgICAgICAgICAgIGV4cGVjdCh3aWR0aCkudG9CZSgyMCk7XG4gICAgICAgICAgICBleHBlY3QoaGVpZ2h0KS50b0JlKDIwKTtcbiAgICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBpdChcIndpbGwgd2FpdCBmb3IgZGlzcGxheVwiLCAoKSA9PiB7XG4gICAgICAgIGNvbnN0IHNwaW5uZXIgPSBBdG9tLmZpbmRJbihTcGlubmVyQXRvbSwgc2VjdGlvbiwgMSk7XG4gICAgICAgIGNvbnN0IHNwaW5uZXJCdXR0b24gPSBlbGVtZW50KGJ5LmNzcyhcIltpZCo9J3NwaW5uZXJCdXR0b24yJ11cIikpO1xuICAgICAgICBzcGlubmVyQnV0dG9uLmNsaWNrKCk7XG4gICAgICAgIGJyb3dzZXIuaWdub3JlU3luY2hyb25pemF0aW9uID0gdHJ1ZTtcbiAgICAgICAgLy9pZiB5b3UgZG8gbm90IGlnbm9yZSBzeW5jLCB0aGlzIHByb21pc2Ugd2lsbCB3YWl0IHVudGlsIHRoZVxuICAgICAgICAvLyB0aW1lb3V0IGhhcyBiZWVuIGV2YWx1YXRlZCwgd2hpY2ggbm90IHdoYXQgd2UgYXJlIHRlc3RpbmdcbiAgICAgICAgZXhwZWN0KHNwaW5uZXIuaXNEaXNwbGF5ZWQoKSkudG9CZShmYWxzZSk7XG4gICAgICAgIGJyb3dzZXIuaWdub3JlU3luY2hyb25pemF0aW9uID0gZmFsc2U7XG4gICAgICAgIGJyb3dzZXIud2FpdChzcGlubmVyLmlzRGlzcGxheWVkKCksIDQwMDApOyAvL3dhaXQgdXAgdG8gNCBzZWNvbmRzXG4gICAgICAgIGV4cGVjdChzcGlubmVyLmlzRGlzcGxheWVkKCkpLnRvQmUodHJ1ZSk7XG5cbiAgICB9KTtcbn0pO1xuIl0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9
