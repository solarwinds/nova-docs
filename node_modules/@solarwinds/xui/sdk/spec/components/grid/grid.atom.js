"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const protractor_1 = require("@solarwinds/uzi/protractor");
const uzi_1 = require("@solarwinds/uzi");
const index_atom_1 = require("../index.atom");
const specHelpers_1 = require("../specHelpers");
class GridAtom extends uzi_1.Atom {
    getListView() {
        return uzi_1.Atom.findIn(index_atom_1.ListViewAtom, this.getElement());
    }
    getPager() {
        return uzi_1.Atom.findIn(index_atom_1.PagerAtom, this.getElement());
    }
    getSorter() {
        return uzi_1.Atom.findIn(index_atom_1.SorterAtom, this.getElement());
    }
    getSelector() {
        return uzi_1.Atom.findIn(index_atom_1.SelectorAtom, this.getElement());
    }
    getToolbar() {
        return uzi_1.Atom.findIn(index_atom_1.ToolbarAtom, this.getElement());
    }
    getSelectionTitleElement() {
        return super.getElement().element(protractor_1.by.className("xui-grid__selection-title"));
    }
    clickSearchButton() {
        let searchButton = super.getElement().element(protractor_1.by.className("xui-search__button"));
        return searchButton.click();
    }
    clickSearchClearButton() {
        let clearSearchButton = super.getElement().element(protractor_1.by.className("xui-icon-close"));
        return clearSearchButton.click();
    }
    /**
     * Clicks the Clear Search button if present otherwise does nothing.
     */
    clickSearchClearButtonIfPresent() {
        return specHelpers_1.default.wrapPromise((() => __awaiter(this, void 0, void 0, function* () {
            try {
                let clearSearchButton = this.getElement().element(protractor_1.by.className("xui-icon-close"));
                if ((yield clearSearchButton.isPresent()) && (yield clearSearchButton.isDisplayed())) {
                    return yield clearSearchButton.click();
                }
            }
            catch (e) {
                console.log("GridAtom.clickSearchClearButtonIfPresent", e);
            }
        }))());
    }
    writeIntoSearch(value) {
        let inputField = super.getElement().element(protractor_1.by.className("xui-search__input-control"));
        return inputField.sendKeys(value);
    }
}
GridAtom.CSS_CLASS = "xui-grid";
exports.GridAtom = GridAtom;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbXBvbmVudHMvZ3JpZC9ncmlkLmF0b20udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUFBLDJEQUFzRTtBQUN0RSx5Q0FBcUM7QUFDckMsOENBQTZGO0FBQzdGLGdEQUF5QztBQUV6QyxjQUFzQixTQUFRLFVBQUk7SUFHdkIsV0FBVztRQUNkLE1BQU0sQ0FBQyxVQUFJLENBQUMsTUFBTSxDQUFDLHlCQUFZLEVBQUUsSUFBSSxDQUFDLFVBQVUsRUFBRSxDQUFDLENBQUM7SUFDeEQsQ0FBQztJQUVNLFFBQVE7UUFDWCxNQUFNLENBQUMsVUFBSSxDQUFDLE1BQU0sQ0FBQyxzQkFBUyxFQUFFLElBQUksQ0FBQyxVQUFVLEVBQUUsQ0FBQyxDQUFDO0lBQ3JELENBQUM7SUFFTSxTQUFTO1FBQ1osTUFBTSxDQUFDLFVBQUksQ0FBQyxNQUFNLENBQUMsdUJBQVUsRUFBRSxJQUFJLENBQUMsVUFBVSxFQUFFLENBQUMsQ0FBQztJQUN0RCxDQUFDO0lBRU0sV0FBVztRQUNkLE1BQU0sQ0FBQyxVQUFJLENBQUMsTUFBTSxDQUFDLHlCQUFZLEVBQUUsSUFBSSxDQUFDLFVBQVUsRUFBRSxDQUFDLENBQUM7SUFDeEQsQ0FBQztJQUVNLFVBQVU7UUFDYixNQUFNLENBQUMsVUFBSSxDQUFDLE1BQU0sQ0FBQyx3QkFBVyxFQUFFLElBQUksQ0FBQyxVQUFVLEVBQUUsQ0FBQyxDQUFDO0lBQ3ZELENBQUM7SUFFTSx3QkFBd0I7UUFDM0IsTUFBTSxDQUFDLEtBQUssQ0FBQyxVQUFVLEVBQUUsQ0FBQyxPQUFPLENBQUMsZUFBRSxDQUFDLFNBQVMsQ0FBQywyQkFBMkIsQ0FBQyxDQUFDLENBQUM7SUFDakYsQ0FBQztJQUVNLGlCQUFpQjtRQUNwQixJQUFJLFlBQVksR0FBRyxLQUFLLENBQUMsVUFBVSxFQUFFLENBQUMsT0FBTyxDQUFDLGVBQUUsQ0FBQyxTQUFTLENBQUMsb0JBQW9CLENBQUMsQ0FBQyxDQUFDO1FBQ2xGLE1BQU0sQ0FBQyxZQUFZLENBQUMsS0FBSyxFQUFFLENBQUM7SUFDaEMsQ0FBQztJQUVNLHNCQUFzQjtRQUN6QixJQUFJLGlCQUFpQixHQUFHLEtBQUssQ0FBQyxVQUFVLEVBQUUsQ0FBQyxPQUFPLENBQUMsZUFBRSxDQUFDLFNBQVMsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDLENBQUM7UUFDbkYsTUFBTSxDQUFDLGlCQUFpQixDQUFDLEtBQUssRUFBRSxDQUFDO0lBQ3JDLENBQUM7SUFFRDs7T0FFRztJQUNJLCtCQUErQjtRQUNsQyxNQUFNLENBQUMscUJBQVcsQ0FBQyxXQUFXLENBQU8sQ0FBQyxHQUFTLEVBQUU7WUFDN0MsSUFBSSxDQUFDO2dCQUNELElBQUksaUJBQWlCLEdBQUcsSUFBSSxDQUFDLFVBQVUsRUFBRSxDQUFDLE9BQU8sQ0FBQyxlQUFFLENBQUMsU0FBUyxDQUFDLGdCQUFnQixDQUFDLENBQUMsQ0FBQztnQkFDbEYsRUFBRSxDQUFDLENBQUMsQ0FBQSxNQUFNLGlCQUFpQixDQUFDLFNBQVMsRUFBRSxNQUFJLE1BQU0saUJBQWlCLENBQUMsV0FBVyxFQUFFLENBQUEsQ0FBQyxDQUFDLENBQUM7b0JBQy9FLE1BQU0sQ0FBQyxNQUFNLGlCQUFpQixDQUFDLEtBQUssRUFBRSxDQUFDO2dCQUMzQyxDQUFDO1lBQ0wsQ0FBQztZQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQ1QsT0FBTyxDQUFDLEdBQUcsQ0FBQywwQ0FBMEMsRUFBRSxDQUFDLENBQUMsQ0FBQztZQUMvRCxDQUFDO1FBQ0wsQ0FBQyxDQUFBLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDVixDQUFDO0lBRU0sZUFBZSxDQUFDLEtBQWE7UUFDaEMsSUFBSSxVQUFVLEdBQUcsS0FBSyxDQUFDLFVBQVUsRUFBRSxDQUFDLE9BQU8sQ0FBQyxlQUFFLENBQUMsU0FBUyxDQUFDLDJCQUEyQixDQUFDLENBQUMsQ0FBQztRQUN2RixNQUFNLENBQUMsVUFBVSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUN0QyxDQUFDOztBQXZEYSxrQkFBUyxHQUFHLFVBQVUsQ0FBQztBQUR6Qyw0QkF5REMiLCJmaWxlIjoiY29tcG9uZW50cy9ncmlkL2dyaWQuYXRvbS5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7YnksIEVsZW1lbnRGaW5kZXIsIHByb21pc2V9IGZyb20gXCJAc29sYXJ3aW5kcy91emkvcHJvdHJhY3RvclwiO1xuaW1wb3J0IHtBdG9tfSBmcm9tIFwiQHNvbGFyd2luZHMvdXppXCI7XG5pbXBvcnQge0xpc3RWaWV3QXRvbSwgUGFnZXJBdG9tLCBTZWxlY3RvckF0b20sIFNvcnRlckF0b20sIFRvb2xiYXJBdG9tfSBmcm9tIFwiLi4vaW5kZXguYXRvbVwiO1xuaW1wb3J0IFNwZWNIZWxwZXJzIGZyb20gXCIuLi9zcGVjSGVscGVyc1wiO1xuXG5leHBvcnQgY2xhc3MgR3JpZEF0b20gZXh0ZW5kcyBBdG9tIHtcbiAgICBwdWJsaWMgc3RhdGljIENTU19DTEFTUyA9IFwieHVpLWdyaWRcIjtcblxuICAgIHB1YmxpYyBnZXRMaXN0VmlldygpOiBMaXN0Vmlld0F0b20ge1xuICAgICAgICByZXR1cm4gQXRvbS5maW5kSW4oTGlzdFZpZXdBdG9tLCB0aGlzLmdldEVsZW1lbnQoKSk7XG4gICAgfVxuXG4gICAgcHVibGljIGdldFBhZ2VyKCk6IFBhZ2VyQXRvbSB7XG4gICAgICAgIHJldHVybiBBdG9tLmZpbmRJbihQYWdlckF0b20sIHRoaXMuZ2V0RWxlbWVudCgpKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0U29ydGVyKCk6IFNvcnRlckF0b20ge1xuICAgICAgICByZXR1cm4gQXRvbS5maW5kSW4oU29ydGVyQXRvbSwgdGhpcy5nZXRFbGVtZW50KCkpO1xuICAgIH1cblxuICAgIHB1YmxpYyBnZXRTZWxlY3RvcigpOiBTZWxlY3RvckF0b20ge1xuICAgICAgICByZXR1cm4gQXRvbS5maW5kSW4oU2VsZWN0b3JBdG9tLCB0aGlzLmdldEVsZW1lbnQoKSk7XG4gICAgfVxuXG4gICAgcHVibGljIGdldFRvb2xiYXIoKTogVG9vbGJhckF0b20ge1xuICAgICAgICByZXR1cm4gQXRvbS5maW5kSW4oVG9vbGJhckF0b20sIHRoaXMuZ2V0RWxlbWVudCgpKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0U2VsZWN0aW9uVGl0bGVFbGVtZW50KCk6IEVsZW1lbnRGaW5kZXIge1xuICAgICAgICByZXR1cm4gc3VwZXIuZ2V0RWxlbWVudCgpLmVsZW1lbnQoYnkuY2xhc3NOYW1lKFwieHVpLWdyaWRfX3NlbGVjdGlvbi10aXRsZVwiKSk7XG4gICAgfVxuXG4gICAgcHVibGljIGNsaWNrU2VhcmNoQnV0dG9uKCk6IHByb21pc2UuUHJvbWlzZTx2b2lkPiB7XG4gICAgICAgIGxldCBzZWFyY2hCdXR0b24gPSBzdXBlci5nZXRFbGVtZW50KCkuZWxlbWVudChieS5jbGFzc05hbWUoXCJ4dWktc2VhcmNoX19idXR0b25cIikpO1xuICAgICAgICByZXR1cm4gc2VhcmNoQnV0dG9uLmNsaWNrKCk7XG4gICAgfVxuXG4gICAgcHVibGljIGNsaWNrU2VhcmNoQ2xlYXJCdXR0b24oKTogcHJvbWlzZS5Qcm9taXNlPHZvaWQ+IHtcbiAgICAgICAgbGV0IGNsZWFyU2VhcmNoQnV0dG9uID0gc3VwZXIuZ2V0RWxlbWVudCgpLmVsZW1lbnQoYnkuY2xhc3NOYW1lKFwieHVpLWljb24tY2xvc2VcIikpO1xuICAgICAgICByZXR1cm4gY2xlYXJTZWFyY2hCdXR0b24uY2xpY2soKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDbGlja3MgdGhlIENsZWFyIFNlYXJjaCBidXR0b24gaWYgcHJlc2VudCBvdGhlcndpc2UgZG9lcyBub3RoaW5nLlxuICAgICAqL1xuICAgIHB1YmxpYyBjbGlja1NlYXJjaENsZWFyQnV0dG9uSWZQcmVzZW50KCk6IHByb21pc2UuUHJvbWlzZTx2b2lkPiB7XG4gICAgICAgIHJldHVybiBTcGVjSGVscGVycy53cmFwUHJvbWlzZTx2b2lkPigoYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBsZXQgY2xlYXJTZWFyY2hCdXR0b24gPSB0aGlzLmdldEVsZW1lbnQoKS5lbGVtZW50KGJ5LmNsYXNzTmFtZShcInh1aS1pY29uLWNsb3NlXCIpKTtcbiAgICAgICAgICAgICAgICBpZiAoYXdhaXQgY2xlYXJTZWFyY2hCdXR0b24uaXNQcmVzZW50KCkgJiYgYXdhaXQgY2xlYXJTZWFyY2hCdXR0b24uaXNEaXNwbGF5ZWQoKSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gYXdhaXQgY2xlYXJTZWFyY2hCdXR0b24uY2xpY2soKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJHcmlkQXRvbS5jbGlja1NlYXJjaENsZWFyQnV0dG9uSWZQcmVzZW50XCIsIGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KSgpKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgd3JpdGVJbnRvU2VhcmNoKHZhbHVlOiBzdHJpbmcpOiBwcm9taXNlLlByb21pc2U8dm9pZD4ge1xuICAgICAgICBsZXQgaW5wdXRGaWVsZCA9IHN1cGVyLmdldEVsZW1lbnQoKS5lbGVtZW50KGJ5LmNsYXNzTmFtZShcInh1aS1zZWFyY2hfX2lucHV0LWNvbnRyb2xcIikpO1xuICAgICAgICByZXR1cm4gaW5wdXRGaWVsZC5zZW5kS2V5cyh2YWx1ZSk7XG4gICAgfVxufVxuIl0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9
