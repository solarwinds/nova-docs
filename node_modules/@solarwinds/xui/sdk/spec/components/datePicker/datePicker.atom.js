"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const protractor_1 = require("@solarwinds/uzi/protractor");
const uzi_1 = require("@solarwinds/uzi");
/**
 * Lukas: WARNING FOR TRESPASSERS
 *
 * For anyone who's going to touch datepicker e2e tests - this atom doesn't have proper API for simply setting date
 * value to the field ... something like setValue(date:Date), or setValue(int year, int month, int day) would be
 * really nice to have, because the users don't want to mess with internal structure of the datepicker component.
 * Current API is more likely for internal testing only.
 */
class DatePickerAtom extends uzi_1.Atom {
    clickTitle() {
        let title = this.getElementByCss("button[id*='title']");
        return title.click();
    }
    getPopup() {
        return this.getElementByCss(".dropdown-menu");
    }
    clickCalendarIcon() {
        let icon = this.getElementByCss(".xui-datepicker__icon");
        return icon.click();
    }
    isOpened() {
        return this.getElement().element(protractor_1.by.className("uib-datepicker-popup")).isPresent();
    }
    clickInput() {
        let icon = this.getElementByCss(".form-control");
        return icon.click();
    }
    clickToday() {
        return this.clickButton("Today");
    }
    formatDate(date) {
        return date.toLocaleDateString("en-US");
    }
    getInput() {
        return this.getElement().element(protractor_1.by.css(".form-control"));
    }
    getInputValue() {
        return this.getElementValue(".form-control");
    }
    acceptText(value) {
        return this.acceptKeys(value);
    }
    acceptKeys(...keys) {
        return this.getInput().sendKeys(...keys);
    }
    clearText() {
        return this.getInput().clear();
    }
    getTitle() {
        return this.getElementText("button[id*='title']");
    }
    getNextTitle() {
        let newTitle;
        let nextTitle = this.getTitle().then(function (currentTitle) {
            if (currentTitle.length === 4) {
                let coef = Math.floor((parseInt(currentTitle, 10) - 2000) / 20);
                let rangeStart = 2000 + 20 * coef + 1;
                let rangeEnd = rangeStart + 20 - 1;
                newTitle = rangeStart + " - " + rangeEnd;
            }
            else {
                newTitle = currentTitle.substring(currentTitle.length - 4);
            }
            return newTitle;
        });
        return nextTitle;
    }
    goNext() {
        return this.clickElement(".btn.uib-right");
    }
    goBack() {
        return this.clickElement(".btn.uib-left");
    }
    selectDay(day, index) {
        return this.clickButton(day.toString(), index);
    }
    selectMonth(month, index) {
        return this.clickButton(month, index);
    }
    selectYear(year, index) {
        return this.clickButton(year, index);
    }
    getYearElement(year, index) {
        return this.selectButton(year, index);
    }
    getMonthElement(month, index) {
        return this.selectButton(month, index);
    }
    getActiveDay() {
        return this.getElementText(".btn.btn-info.active");
    }
    isValid() {
        return this.getInput().getAttribute("class").then((result) => {
            return result.split(/ +/).indexOf("ng-invalid") === -1;
        });
    }
    getElementTest(className) {
        return this.getElementByCss(className);
    }
    // private helpers
    getClassValueByCss(title) {
        return this.getElementByCss(title).getAttribute("class");
    }
    getClassValueByButtonText(title, index) {
        return this.selectButton(title, index).getAttribute("class");
    }
    clickButton(buttonTitle, index = 0) {
        let button = super.getElement().all(protractor_1.by.buttonText(buttonTitle)).get(index);
        return button.click();
    }
    getElementValue(identifier, deep) {
        return this.getElementByCss(identifier, deep).getAttribute("value");
    }
    getElementText(identifier, deep) {
        return this.getElementByCss(identifier, deep).getText();
    }
    clickElement(identifier) {
        return this.getElementByCss(identifier).click();
    }
    getElementByCss(identifier, deep) {
        //if deep is passed then look in shadow DOM
        if (deep) {
            return super.getElement().element(protractor_1.by.css("* /deep/ " + identifier));
        }
        else {
            return super.getElement().element(protractor_1.by.css(identifier));
        }
    }
    selectButton(identifier, index = 0) {
        return super.getElement().all(protractor_1.by.buttonText(identifier)).get(index);
    }
}
DatePickerAtom.CSS_CLASS = "xui-datepicker";
DatePickerAtom.MONTHNAMES_SHORT = ["Jan", "Feb", "Mar", "Apr", "May", "Jun",
    "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"];
DatePickerAtom.MONTHNAMES_LONG = ["January", "February", "March", "April", "May", "June",
    "July", "August", "September", "October", "November", "December"];
DatePickerAtom.ACCEPTED_DATES = [
    "10-1-1988",
    "11-02-88",
    "1999-Feb-5",
    "2000-5-15",
    "99-5-25",
    "88-Nov-5",
    "4-12-2000",
    "6-Apr-1999",
    "7-10-99",
    "1-Oct-82",
    "10/1/1988",
    "11/02/88",
    "1999/Feb/5",
    "2000/5/15",
    "99/5/25",
    "88/Nov/5",
    "4/12/2000",
    "6/Apr/1999",
    "7/10/99",
    "1/Oct/82",
    "10 1 1988",
    "01 02 88",
    "1999 Feb 5",
    "2000 5 15",
    "99 5 25",
    "88 Nov 5",
    "4 12 2000",
    "6 Apr 1999",
    "7 10 99",
    "1 Oct 82",
    "10.1.1988",
    "01.02.88",
    "1999.Feb.5",
    "2000.5.15",
    "99.5.25",
    "88.Nov.5",
    "4.12.2000",
    "6.Apr.1999",
    "7.10.99",
    "1.Oct.82"
];
exports.DatePickerAtom = DatePickerAtom;

//# sourceMappingURL=data:application/json;base64,
