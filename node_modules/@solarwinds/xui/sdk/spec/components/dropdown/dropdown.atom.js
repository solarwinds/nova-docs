"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const protractor = require("@solarwinds/uzi/protractor");
const protractor_1 = require("@solarwinds/uzi/protractor");
const uzi_1 = require("@solarwinds/uzi");
const index_atom_1 = require("../index.atom");
class DropdownAtom extends uzi_1.Atom {
    constructor() {
        super(...arguments);
        this.click = () => {
            return this.getToggleElement().click();
        };
        /**
         * Toggle dropdown and select a new item from the options.
         */
        this.select = (title) => {
            // Have to click (toggle the list) first because
            // you can't interact with hidden elements.
            this.click();
            return this.getItemByText(title).click();
        };
        this.scrollToAndSelect = (itemText) => {
            return this.scrollToItem(itemText).then((item) => {
                return item.click();
            });
        };
        this.scrollToItem = (itemText) => {
            this.click();
            const itemEl = this.getItemByText(itemText);
            const scrollbar = uzi_1.Atom.findIn(index_atom_1.ScrollbarAtom, super.getElement());
            return scrollbar.scrollToElement(itemEl).then(() => {
                return itemEl;
            });
        };
        this.getItemByText = (itemText) => {
            // Using xpath, because I need a specific item inside of collection, and
            // css doesn't have text selector
            const xpath = ".//div/ul/li/div/ng-include/div[text()='" + itemText + "']";
            return super.getElement().element(protractor_1.by.xpath(xpath));
        };
        this.getNumberOfItems = () => {
            return this.getItems().count();
        };
        /**
         * @returns {string} The value displayed in dropdown.
         */
        this.getCurrentValue = () => {
            return this.getMainTitleElement().getText();
        };
        this.getPlaceholder = () => {
            return super.getElement()
                .element(protractor_1.by.className("xui-dropdown__placeholder"))
                .getText();
        };
        this.getLabelElement = () => {
            return super.getElement().element(protractor_1.by.className("xui-dropdown__label"));
        };
        this.getGroupElement = () => {
            return super.getElement().element(protractor_1.by.className("xui-dropdown__btn-group"));
        };
        this.getItems = () => {
            return super.getElement().all(protractor_1.by.className("xui-dropdown__menuitem"));
        };
        this.getItemsWithClass = (className) => {
            return super.getElement().all(protractor_1.by.css(".xui-dropdown__menuitem." + className));
        };
        this.getItemsWithNestedClass = (className) => {
            return super.getElement().all(protractor_1.by.css(".xui-dropdown__menuitem ." + className));
        };
        this.isValidationTextDisplayed = () => {
            return super.getElement()
                .element(protractor_1.by.css(".xui-dropdown__messages"))
                .isDisplayed();
        };
        this.isRequiredStyleDisplayed = () => {
            return this.getToggleElement()
                .getAttribute("class")
                .then((classes) => {
                const index = classes.indexOf("xui-dropdown__invalid");
                return index >= 0;
            });
        };
        this.areSuggestionsDisplayed = () => {
            return this.getSuggestionsDropdown().isDisplayed();
        };
        this.acceptInput = (input) => {
            return super.getElement().element(protractor_1.by.tagName("input")).sendKeys(input);
        };
        this.getSuggestions = () => {
            return this.getSuggestionsDropdown().all(protractor_1.by.css("li"));
        };
        this.getSuggestion = (index) => {
            return this.getSuggestionsDropdown().all(protractor_1.by.css("li")).get(index);
        };
        this.getSuggestionLink = (index) => {
            return this.getSuggestionLinks().get(index);
        };
        this.getSuggestionLinks = () => {
            return this.getSuggestionsDropdown().all(protractor_1.by.css("li a"));
        };
        this.getValueAttr = () => {
            return super.getElement().element(protractor_1.by.tagName("input")).getAttribute("value");
        };
        this.areItemsDisplayed = () => {
            return this.getItemsDropdown().isDisplayed();
        };
        this.getDividers = () => {
            return super.getElement().all(protractor_1.by.className("divider"));
        };
        // private helpers
        this.getToggleElement = () => {
            return super.getElement().element(protractor_1.by.className("xui-dropdown__toggle"));
        };
        this.getMainTitleElement = () => {
            return super.getElement().element(protractor_1.by.className("xui-dropdown__display-value"));
        };
        this.getItemsDropdown = () => {
            return super.getElement().element(protractor_1.by.css("ul.xui-dropdown__menu"));
        };
        this.getSuggestionsDropdown = () => {
            return super.getElement().element(protractor_1.by.css("input + ul.dropdown-menu"));
        };
    }
    getItemText(idx) {
        const item = this.getItems().get(idx);
        const textElement = item.element(protractor_1.by.xpath(".//div/ng-include/div"));
        return textElement.getAttribute("innerText");
    }
    ;
    getInput() {
        return super.getElement().element(protractor_1.by.className("xui-dropdown__input"));
    }
    acceptText(text) {
        return this.clearText().then(() => {
            return this.getInput().sendKeys(text, protractor.Key.ENTER);
        });
    }
    getInputValue() {
        return this.getInput().getAttribute("value");
    }
    clearText() {
        return this.getInput().clear();
    }
    isValid() {
        return this.getElement().getAttribute("class").then((result) => {
            return result.split(/ +/).indexOf("ng-invalid") === -1;
        });
    }
}
DropdownAtom.CSS_CLASS = "xui-dropdown";
exports.DropdownAtom = DropdownAtom;

//# sourceMappingURL=data:application/json;base64,
