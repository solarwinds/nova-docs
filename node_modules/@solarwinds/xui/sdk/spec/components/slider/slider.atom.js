"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const protractor = require("@solarwinds/uzi/protractor");
const protractor_1 = require("@solarwinds/uzi/protractor");
const uzi_1 = require("@solarwinds/uzi");
const textbox_atom_1 = require("../textbox/textbox.atom");
const _ = require("lodash");
;
class SliderAtom extends uzi_1.Atom {
    constructor(element) {
        super(element);
        // internal methods
        this.defaultOptions = {
            finishDrag: true,
            useTouch: false
        };
        protractor_1.browser.executeScript(() => {
            const clientWidth = document.documentElement.clientWidth || document.body.clientWidth;
            return clientWidth;
        }).then((clientWidth) => {
            // The real width must be decremented by 1
            // otherwise webdriver will throw exception when you try to move touch to the edge of area width
            this.adjustedClientWidth = clientWidth - 1;
        });
    }
    // public API
    // Params:
    // value - number - distance in pixels to grag
    // finish - boolean - flag, if mouse has to release grabbed element after move is done.
    //
    dragRangeLineTo(value, finish = true) {
        const sequence = protractor_1.browser.actions()
            .mouseMove(this.getRangeLine().getWebElement())
            .mouseDown();
        if (+value) {
            this.moveMouseIteratively(sequence, +value);
        }
        if (finish) {
            sequence.mouseUp();
        }
        return sequence.perform();
    }
    ;
    setSingleSliderValueByLineclick(value, min, max) {
        return this.clickSliderLineAtValue(value, min, max);
    }
    setRangeStartValueByClicking(value, min, max) {
        return this.clickSliderLineAtValue(value, min, max, true);
    }
    setRangeEndValueByClicking(value, min, max) {
        return this.clickSliderLineAtValue(value, min, max, true, true);
    }
    getValue(expectedValue) {
        let label = super.getElement().element(protractor_1.by.css(".xui-slider__lines-label.xui-slider-end-label"));
        return label.getText().then((text) => {
            return Number(text);
        });
    }
    getValueFromPosition(min, max) {
        let value;
        let lineWidth;
        let handleWidth;
        let handleX;
        let lineX;
        return this.getRangeLine().getSize().then((lineSize) => {
            lineWidth = lineSize.width;
            return this.getRangeLine().getLocation().then((lineLocation) => {
                lineX = lineLocation.x;
                return this.getValueHandle().getSize().then((buttonSize) => {
                    handleWidth = buttonSize.width;
                    return this.getValueHandle().getLocation().then((handleLocation) => {
                        handleX = handleLocation.x - lineX;
                        let percent = handleX / (lineWidth - handleWidth);
                        value = (max - min) * percent + min;
                        return Math.round(value);
                    });
                });
            });
        });
    }
    dragSingleSliderToValue(value, min, max, options) {
        let lineWidth;
        let handleWidth;
        let handleX;
        let lineX;
        return this.getRangeLine().getSize().then((lineSize) => {
            lineWidth = lineSize.width;
            return this.getRangeLine().getLocation().then((lineLocation) => {
                lineX = lineLocation.x;
                return this.getValueHandle().getSize().then((buttonSize) => {
                    handleWidth = buttonSize.width;
                    return this.getValueHandle().getLocation().then((handleLocation) => {
                        handleX = handleLocation.x;
                        let moveTo = (value - min) /
                            (max - min) *
                            (lineWidth - handleWidth);
                        let moveBy = moveTo - handleX + lineX;
                        moveBy = Math.round(moveBy);
                        return this.dragSingleSliderTo(moveBy, options);
                    });
                });
            });
        });
    }
    dragSingleSliderTo(value, options) {
        return this.dragHandleTo(this.getValueHandle().getWebElement(), value, options);
    }
    dragRangeStartTo(value, options) {
        return this.dragHandleTo(this.getRangeStartHandle().getWebElement(), value, options);
    }
    dragRangeEndTo(value, options) {
        return this.dragHandleTo(this.getRangeEndHandle().getWebElement(), value, options);
    }
    dragRangeStartToValue(value, min, max, options) {
        let lineWidth;
        let handleWidth;
        let handleX;
        let lineX;
        return this.getRangeLine().getSize().then((lineSize) => {
            lineWidth = lineSize.width;
            return this.getRangeLine().getLocation().then((lineLocation) => {
                lineX = lineLocation.x;
                return this.getRangeStartHandle().getSize().then((buttonSize) => {
                    handleWidth = buttonSize.width;
                    return this.getRangeStartHandle().getLocation().then((handleLocation) => {
                        handleX = handleLocation.x;
                        let moveTo = (value - min) /
                            (max - min) *
                            (lineWidth - 2 * handleWidth);
                        let moveBy = moveTo - handleX + lineX;
                        moveBy = Math.round(moveBy);
                        return this.dragRangeStartTo(moveBy, options);
                    });
                });
            });
        });
    }
    dragRangeEndToValue(value, min, max, options) {
        let lineWidth;
        let handleWidth;
        let handleX;
        let lineX;
        return this.getRangeLine().getSize().then((lineSize) => {
            lineWidth = lineSize.width;
            return this.getRangeLine().getLocation().then((lineLocation) => {
                lineX = lineLocation.x;
                return this.getRangeEndHandle().getSize().then((buttonSize) => {
                    handleWidth = buttonSize.width;
                    return this.getRangeEndHandle().getLocation().then((handleLocation) => {
                        handleX = handleLocation.x;
                        let moveTo = (value - min) /
                            (max - min) *
                            (lineWidth - 2 * handleWidth) +
                            handleWidth;
                        let moveBy = moveTo - handleX + lineX;
                        moveBy = Math.round(moveBy);
                        return this.dragRangeEndTo(moveBy, options);
                    });
                });
            });
        });
    }
    cancelDragging() {
        return protractor_1.browser.actions().sendKeys(protractor.Key.ESCAPE).perform();
    }
    getRange() {
        let startLabel = super.getElement().element(protractor_1.by.css(".xui-slider__lines-label.xui-slider-first-label"));
        let endLabel = super.getElement().element(protractor_1.by.css(".xui-slider__lines-label.xui-slider-end-label"));
        return startLabel.getText().then((startLabelText) => {
            return endLabel.getText().then((endLabelText) => {
                return {
                    start: Number(startLabelText),
                    end: Number(endLabelText)
                };
            });
        });
    }
    getInputValue() {
        const input = uzi_1.Atom.findIn(textbox_atom_1.TextboxAtom, this.getElement());
        return input.getText().then((value) => {
            return Number(value);
        });
    }
    setInputValue(value, expectedValue = null) {
        const expected = expectedValue || value;
        const input = uzi_1.Atom.findIn(textbox_atom_1.TextboxAtom, this.getElement());
        input.acceptText(protractor.Key.BACK_SPACE + protractor.Key.BACK_SPACE + value.toString());
        protractor_1.browser.wait(() => {
            return this.getInputValue().then((result) => {
                return result === expected;
            });
        }, 1000);
    }
    getSteps() {
        return super.getElement().all(protractor_1.by.css(".xui-slider__lines-step"));
    }
    getStartsideSteps() {
        return super.getElement().all(protractor_1.by.css(".xui-slider__lines-startside-steps .xui-slider__lines-step"));
    }
    getEndsideSteps() {
        return super.getElement().all(protractor_1.by.css(".xui-slider__lines-endside-steps .xui-slider__lines-step"));
    }
    getValueHandle() {
        return super.getElement().element(protractor_1.by.css(".xui-slider__button.xui-slider-end-button"));
    }
    getRangeStartHandle() {
        return super.getElement().element(protractor_1.by.css(".xui-slider__button.xui-slider-first-button"));
    }
    getRangeEndHandle() {
        return super.getElement().element(protractor_1.by.css(".xui-slider__button.xui-slider-end-button"));
    }
    getRangeLine() {
        return super.getElement().element(protractor_1.by.css(".xui-slider__lines"));
    }
    clickSliderLineAtValue(value, min, max, isRange = false, isRangeEnd = false, options) {
        let lineLength;
        let lineThickness;
        let lineX;
        let lineY;
        let handlerDiameter;
        let rangeLine = this.getRangeLine();
        options = _.defaults({}, options, this.defaultOptions);
        return rangeLine.getSize().then((lineSize) => {
            lineLength = lineSize.width;
            lineThickness = lineSize.height;
            return this.getRangeLine().getLocation().then((lineLocation) => {
                lineX = lineLocation.x;
                lineY = lineLocation.y;
                return this.getRangeEndHandle().getSize().then((buttonSize) => {
                    handlerDiameter = buttonSize.width;
                    const usefulLineDimension = isRange ?
                        lineLength - 2 * handlerDiameter :
                        lineLength - handlerDiameter;
                    let clickTo = (value - min) /
                        (max - min) *
                        usefulLineDimension;
                    // protractor counts the origin from the center instead of it's docs
                    clickTo -= lineLength / 2;
                    // within slider there is a radius offset for better user experience
                    clickTo += handlerDiameter / 2;
                    if (isRange && isRangeEnd) {
                        clickTo += handlerDiameter;
                    }
                    clickTo = Math.round(clickTo);
                    let promise;
                    if (options.useTouch) {
                        promise = protractor_1.browser.touchActions()
                            .tapAndHold({ x: lineX + clickTo, y: lineY })
                            .release({ x: lineX + clickTo, y: lineY })
                            .perform();
                    }
                    else {
                        promise = protractor_1.browser.actions()
                            .mouseMove(this.getRangeLine().getWebElement())
                            .mouseMove({ x: clickTo, y: 0 })
                            .click()
                            .perform();
                    }
                    return promise;
                });
            });
        });
    }
    dragHandleTo(handle, value, options) {
        options = _.defaults({}, options, this.defaultOptions);
        if (options.useTouch) {
            return handle.getLocation()
                .then((location) => {
                return handle.getSize()
                    .then((size) => {
                    return { location, size };
                });
            })
                .then(({ location, size }) => {
                location.y += size.height / 2;
                let destination = { x: location.x + value, y: location.y };
                this.makeForTouch(location);
                this.makeForTouch(destination);
                let sequence = protractor_1.browser.touchActions()
                    .tapAndHold(location)
                    .move(destination);
                if (options.finishDrag) {
                    sequence.release(destination);
                }
                return sequence.perform();
            });
        }
        else {
            let sequence = protractor_1.browser.actions()
                .mouseMove(handle)
                .mouseDown();
            if (+value) {
                this.moveMouseIteratively(sequence, +value);
            }
            if (options.finishDrag) {
                sequence.mouseUp();
            }
            return sequence.perform();
        }
    }
    // location for touch events must by rounded to int and bounded to viewport without vertical scrollbar
    // "adjustedClientWidth" fits this
    makeForTouch(location) {
        location.x = Math.min(Math.max(Math.round(location.x), 0), this.adjustedClientWidth);
        location.y = Math.max(Math.round(location.y), 0);
    }
    // Adds set of mouse iteratively moves to pass required px-distance ("value") to given sequence.
    // It splits all distance into steps to prevent moving over start/end of slider
    // without being located at it.
    //
    // More:
    // An issue it solves is when the end of move is out of item container, no move happens at all.
    moveMouseIteratively(sequence, value) {
        // These values are empiric:
        const maxAllowedStep = 10; // (pixels) max step
        const minAllowedAmountOfSteps = 10;
        const maxIterations = 400;
        let iterationInd = 0;
        let goneTrack = 0;
        // <direction (1 or -1)> * <size of step>
        // limitation of step size prevails to amount of steps
        let step = (Math.sign(value) || 1)
            * Math.round(Math.min(maxAllowedStep, Math.abs(value) / minAllowedAmountOfSteps));
        while (Math.abs(goneTrack) < Math.abs(value)
            && (maxIterations > iterationInd)) {
            // reduce step up to one-pixel
            // not to step over end of slider range
            if ((Math.abs(value) - Math.abs(goneTrack)) <= Math.abs(step)) {
                step = Math.sign(step);
            }
            iterationInd++;
            goneTrack += step;
            sequence.mouseMove({ x: step, y: 0 });
        }
    }
}
SliderAtom.CSS_CLASS = "xui-slider";
exports.SliderAtom = SliderAtom;

//# sourceMappingURL=data:application/json;base64,
