"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const protractor_1 = require("@solarwinds/uzi/protractor");
const uzi_1 = require("@solarwinds/uzi");
const index_atom_1 = require("../index.atom");
class DialogAtom extends uzi_1.Atom {
    constructor() {
        super(...arguments);
        this.getHeader = () => {
            return super.getElement().element(protractor_1.by.className("modal-header"));
        };
        this.getHeaderClose = () => {
            return super.getElement().element(protractor_1.by.className("xui-icon-close"));
        };
        this.getTitle = () => {
            return super.getElement().element(protractor_1.by.className("modal-title")).getText();
        };
        this.isWarningStatusIconPresent = () => {
            return super.getElement()
                .element(protractor_1.by.className("xui-icon-status_warning"))
                .isPresent();
        };
        this.isErrorStatusIconPresent = () => {
            return super.getElement()
                .element(protractor_1.by.className("xui-icon-status_critical"))
                .isPresent();
        };
        this.isStatusIconPresent = () => {
            return this.isWarningStatusIconPresent().then((isWarningIconPresent) => {
                return isWarningIconPresent ? true : this.isErrorStatusIconPresent();
            });
        };
        this.getBody = () => {
            return super.getElement().element(protractor_1.by.className("modal-body"));
        };
        this.getMessage = () => {
            return this.getBody()
                .all(protractor_1.by.tagName("p"))
                .get(0)
                .getText();
        };
        this.getTranscludedContent = () => {
            return this.getBody().all(protractor_1.by.css("[ng-transclude]")).get(0);
        };
        this.getContent = (id) => {
            return this.getTranscludedContent().element(protractor_1.by.id(id));
        };
        this.getFooterButtons = () => {
            return super.getElement()
                .element(protractor_1.by.className("modal-footer"))
                .all(protractor_1.by.className("xui-button"));
        };
        this.getFooter = () => {
            return super.getElement()
                .element(protractor_1.by.className("modal-footer"));
        };
        this.getVisibleFooterButtons = () => {
            return this.getFooterButtons().filter((button) => {
                return button.isDisplayed();
            });
        };
        this.getVisibleFooterButton = (buttonText) => {
            return this.getVisibleFooterButtons().filter((button) => {
                return button.getText().then((text) => {
                    return buttonText.toLowerCase() === text.toLowerCase();
                });
            }).first();
        };
        this.footerButtonCount = () => {
            return this.getVisibleFooterButtons().count();
        };
        this.clickFooterButton = (buttonText) => {
            const button = this.getVisibleFooterButton(buttonText);
            if (button) {
                return button.click();
            }
        };
        this.isBusyOverlayDisplayed = () => {
            return uzi_1.Atom.findIn(index_atom_1.ProgressAtom, undefined, 0).isDisplayed();
        };
        this.cancelBusy = () => {
            return uzi_1.Atom.findIn(index_atom_1.ProgressAtom, undefined, 0).cancelProgress();
        };
        this.isBusyOverlayHidden = () => {
            return uzi_1.Atom.findIn(index_atom_1.ProgressAtom, undefined, 0)
                .isDisplayed()
                .then((isDisplayed) => {
                return !isDisplayed;
            });
        };
        this.isFooterBtnHasClass = (buttonIndex, className) => {
            return this.getVisibleFooterButtons().get(buttonIndex).getAttribute("class").then((classes) => {
                return classes.includes(className);
            });
        };
        this.isFooterBtnIconHasClass = (buttonIndex, className) => {
            return this.getVisibleFooterButtons().get(buttonIndex).element(protractor_1.by.css("i")).getAttribute("class")
                .then((classes) => {
                return classes.includes(className);
            });
        };
    }
}
DialogAtom.CSS_CLASS = "xui-dialog";
DialogAtom.get = () => {
    const dialogEl = protractor_1.browser.element(protractor_1.by.css("body .xui-modal-top .xui-dialog"));
    return new DialogAtom(dialogEl);
};
DialogAtom.waitUntilHidden = () => {
    return protractor_1.browser.wait(() => {
        const element = protractor_1.browser.element(protractor_1.by.css("body .xui-modal-top .xui-dialog"));
        return element.isPresent().then((isPresent) => !isPresent);
    });
};
DialogAtom.isPresent = () => {
    const element = protractor_1.browser.element(protractor_1.by.css("body .xui-modal-top .xui-dialog"));
    return element.isPresent();
};
exports.DialogAtom = DialogAtom;

//# sourceMappingURL=data:application/json;base64,
