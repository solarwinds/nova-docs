"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const protractor_1 = require("@solarwinds/uzi/protractor");
const helpers_1 = require("../helpers");
const index_atom_1 = require("../index.atom");
const uzi_1 = require("@solarwinds/uzi");
describe("USERCONTROL dialog", () => {
    let pageContainer;
    beforeEach(() => {
        helpers_1.default.prepareBrowser("dialog");
        pageContainer = protractor_1.element(protractor_1.by.id("xui-demo-components-dialog"));
    });
    let showDialog = (buttonIndex) => {
        const buttonAtom = uzi_1.Atom.findIn(index_atom_1.ButtonAtom, pageContainer, buttonIndex);
        buttonAtom.click();
    };
    let showMessageDialog = () => {
        showDialog(0);
    };
    let showWarningDialog = () => {
        showDialog(1);
    };
    let showErrorDialog = () => {
        showDialog(2);
    };
    let showCustomDialog = () => {
        showDialog(3);
    };
    let showDialogWithTemplate = () => {
        showDialog(4);
    };
    let showCustomFooterDialog = () => {
        showDialog(5);
    };
    let showDialogWithBtnIcons = () => {
        showDialog(6);
    };
    it("should appear when showModal is invoked", () => {
        expect(index_atom_1.DialogAtom.isPresent()).toBe(false);
        showMessageDialog();
        expect(index_atom_1.DialogAtom.isPresent()).toBe(true);
        const dialogAtom = index_atom_1.DialogAtom.get();
        expect(dialogAtom).toBeDefined();
    });
    it("should display message dialog on button-click with correct title", () => {
        showMessageDialog();
        const dialogAtom = index_atom_1.DialogAtom.get();
        expect(dialogAtom.getTitle()).toBe("Gothos");
        expect(dialogAtom.getMessage()).toBe("Greetings and Felicitations!");
    });
    it("should display an OK button in the footer which closes the dialog", () => {
        expect(index_atom_1.DialogAtom.isPresent()).toBe(false);
        showMessageDialog();
        expect(index_atom_1.DialogAtom.isPresent()).toBe(true);
        const dialogAtom = index_atom_1.DialogAtom.get();
        expect(dialogAtom.footerButtonCount()).toBe(1);
        dialogAtom.clickFooterButton("OK");
        index_atom_1.DialogAtom.waitUntilHidden();
        expect(index_atom_1.DialogAtom.isPresent()).toBe(false);
    });
    it("should close when the closeX is clicked", () => {
        expect(index_atom_1.DialogAtom.isPresent()).toBe(false);
        showMessageDialog();
        expect(index_atom_1.DialogAtom.isPresent()).toBe(true);
        const dialogAtom = index_atom_1.DialogAtom.get();
        const closeXButton = uzi_1.Atom.findIn(index_atom_1.ButtonAtom, dialogAtom.getHeader());
        expect(closeXButton).toBeDefined();
        closeXButton.click();
        index_atom_1.DialogAtom.waitUntilHidden();
        expect(index_atom_1.DialogAtom.isPresent()).toBe(false);
    });
    it("should not include a status icon", () => {
        showMessageDialog();
        const dialogAtom = index_atom_1.DialogAtom.get();
        expect(dialogAtom.isStatusIconPresent()).toBe(false);
    });
    it("should include warning icon in title", () => {
        showWarningDialog();
        const dialogAtom = index_atom_1.DialogAtom.get();
        expect(dialogAtom.isStatusIconPresent()).toBe(true);
        expect(dialogAtom.isWarningStatusIconPresent()).toBe(true);
        expect(dialogAtom.isErrorStatusIconPresent()).toBe(false);
    });
    it("should include error icon in title", () => {
        showErrorDialog();
        const dialogAtom = index_atom_1.DialogAtom.get();
        expect(dialogAtom.isStatusIconPresent()).toBe(true);
        expect(dialogAtom.isErrorStatusIconPresent()).toBe(true);
        expect(dialogAtom.isWarningStatusIconPresent()).toBe(false);
    });
    it("should include CLOSE footer-button for status dialogs", () => {
        showWarningDialog();
        expect(index_atom_1.DialogAtom.isPresent()).toBe(true);
        let dialogAtom = index_atom_1.DialogAtom.get();
        dialogAtom.clickFooterButton("CLOSE");
        index_atom_1.DialogAtom.waitUntilHidden();
        expect(index_atom_1.DialogAtom.isPresent()).toBe(false);
        showErrorDialog();
        expect(index_atom_1.DialogAtom.isPresent()).toBe(true);
        dialogAtom = index_atom_1.DialogAtom.get();
        dialogAtom.clickFooterButton("CLOSE");
        index_atom_1.DialogAtom.waitUntilHidden();
        expect(index_atom_1.DialogAtom.isPresent()).toBe(false);
    });
    it("should include optional action footer-button for warning dialogs", () => {
        showWarningDialog();
        expect(index_atom_1.DialogAtom.isPresent()).toBe(true);
        let dialogAtom = index_atom_1.DialogAtom.get();
        dialogAtom.clickFooterButton("PROCEED");
        index_atom_1.DialogAtom.waitUntilHidden();
        expect(index_atom_1.DialogAtom.isPresent()).toBe(false);
    });
    it("should include START and CLOSE footer-buttons for custom dialog", () => {
        showCustomDialog();
        expect(index_atom_1.DialogAtom.isPresent()).toBe(true);
        let dialogAtom = index_atom_1.DialogAtom.get();
        expect(dialogAtom.getVisibleFooterButton("START")).toBeDefined();
        expect(dialogAtom.getVisibleFooterButton("CLOSE")).toBeDefined();
    });
    it("should include START and CLOSE footer-buttons for custom dialog", () => {
        showCustomDialog();
        expect(index_atom_1.DialogAtom.isPresent()).toBe(true);
        let dialogAtom = index_atom_1.DialogAtom.get();
        expect(dialogAtom.getVisibleFooterButton("START")).toBeDefined();
        expect(dialogAtom.getVisibleFooterButton("CLOSE")).toBeDefined();
    });
    it("should disable footer buttons while busy", () => {
        showCustomDialog();
        let dialogAtom = index_atom_1.DialogAtom.get();
        expect(dialogAtom.isBusyOverlayDisplayed()).toBe(false);
        const startButton = new index_atom_1.ButtonAtom(dialogAtom.getVisibleFooterButton("START"));
        expect(startButton).toBeDefined();
        expect(startButton.isDisabled()).toBe(false);
        const closeButton = new index_atom_1.ButtonAtom(dialogAtom.getVisibleFooterButton("CLOSE"));
        expect(closeButton).toBeDefined();
        expect(closeButton.isDisabled()).toBe(false);
        startButton.click();
        // allow dialog action promise to resolve so that we can
        // test busy state while it's actually busy
        protractor_1.browser.ignoreSynchronization = true;
        protractor_1.browser.wait(() => dialogAtom.isBusyOverlayDisplayed());
        expect(dialogAtom.isBusyOverlayDisplayed()).toBe(true);
        expect(startButton.isDisabled()).toBe(true);
        expect(closeButton.isDisabled()).toBe(true);
        dialogAtom.cancelBusy();
        protractor_1.browser.ignoreSynchronization = false;
    });
    it("should close the dialog when busy canceled is clicked", () => {
        showCustomDialog();
        let dialogAtom = index_atom_1.DialogAtom.get();
        const startButton = new index_atom_1.ButtonAtom(dialogAtom.getVisibleFooterButton("START"));
        startButton.click();
        // allow dialog action promise to resolve so that we can
        // test busy state while it's actually busy
        protractor_1.browser.ignoreSynchronization = true;
        protractor_1.browser.wait(() => dialogAtom.isBusyOverlayDisplayed());
        expect(dialogAtom.isBusyOverlayDisplayed()).toBe(true);
        dialogAtom.cancelBusy();
        protractor_1.browser.ignoreSynchronization = false;
        index_atom_1.DialogAtom.waitUntilHidden();
        expect(index_atom_1.DialogAtom.isPresent()).toBe(false);
    });
    it("should handle nested dialogs", () => {
        showDialogWithTemplate();
        let dialogAtom = index_atom_1.DialogAtom.get();
        const launchButton = uzi_1.Atom.findIn(index_atom_1.ButtonAtom, dialogAtom.getBody(), 0);
        launchButton.click();
        //second dialog should be open at this point- the atom should automatically refocus to it
        expect(dialogAtom.isBusyOverlayDisplayed()).toBe(false);
        expect(dialogAtom.getVisibleFooterButton("START")).toBeDefined();
        dialogAtom.clickFooterButton("START");
        // allow dialog action promise to resolve so that we can
        // test busy state while it's actually busy
        protractor_1.browser.ignoreSynchronization = true;
        protractor_1.browser.wait(() => dialogAtom.isBusyOverlayDisplayed());
        expect(dialogAtom.isBusyOverlayDisplayed()).toBe(true);
        dialogAtom.cancelBusy();
        protractor_1.browser.ignoreSynchronization = false;
    });
    it("should transclude custom dialog templates", () => {
        showDialogWithTemplate();
        let dialogAtom = index_atom_1.DialogAtom.get();
        expect(dialogAtom.getContent("xui-demo-components-dialog").isDisplayed()).toBe(true);
    });
    it("should hide top close button", () => {
        showCustomDialog();
        let dialogAtom = index_atom_1.DialogAtom.get();
        expect(dialogAtom.getHeaderClose().isPresent()).toBeFalsy();
    });
    it("should show top close button", () => {
        showDialogWithTemplate();
        let dialogAtom = index_atom_1.DialogAtom.get();
        expect(dialogAtom.getHeaderClose().isPresent()).toBeTruthy();
    });
    it("should show dialog with text message instead of buttons", () => {
        showCustomFooterDialog();
        let dialogAtom = index_atom_1.DialogAtom.get();
        expect(dialogAtom.getVisibleFooterButtons().count()).toBe(0);
        expect(dialogAtom.getFooter().getText()).toContain("buttons");
    });
    it("should show dialog with specified icons on footer buttons and align them properly", () => {
        showDialogWithBtnIcons();
        let dialogAtom = index_atom_1.DialogAtom.get();
        expect(dialogAtom.isFooterBtnHasClass(0, "icon-right")).toBeTruthy();
        expect(dialogAtom.isFooterBtnIconHasClass(0, "xui-icon-state_running")).toBeTruthy();
    });
});

//# sourceMappingURL=data:application/json;base64,
