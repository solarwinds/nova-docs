import * as protractor from "@solarwinds/uzi/protractor";

declare module "eyes.protractor" {
    export class Eyes {
        /**
         * Setting the API key allows you to work with the Eyes server. Note that you use a static function for that,
         * so it will be available to all of your objects. In order to obtain your API Key, login to Applitools Eyes
         * web application and open your account details page.
         * 
         * @param apiKey
         * Accepts the API key provided by Applitools as a string value.
         */
        setApiKey(apiKey: string): void;

        constructor();

        /**
         * The object BatchInfo represent a batch/collection of tests that will be unified as one group in the Test Manager
         * screen and the result of all tests in a batch will determine the batch result. In order to start a batch,
         * you should create a BatchInfo object, and associate it to the Eyes object (before calling the “eyes.open”).
         * In order to add additional tests to the same batch, make sure to call eyes.setBatch for each of the tests/Eyes objects
         * (so every test in the batch should start with creating an Eyes object, calling eyes.setBatch, eyes.open and ending
         * the test with eyes.close).
         * 
         * eyes.setBatch(batchName, id, startDate);
         * 
         * @param batchName
         * (required) String that represents the logical name that will be assigned to this batch
         * 
         * @param id
         * (nullable, optional) Unique id to distinguish between the batches.
         * 
         * @param startDate
         * (nullable, optional) Starting date string.
         */
        setBatch(batchName: string, id?: string, startDate?: Date): void;

        /**
         * The open() method returns a custom web driver object that monitors all the driver actions.
         * From this point, the new custom driver object should be used for all the actions in the test.
         * 
         * @param browser 
         * (required) The relevant Selenium Webdriver object.
         * 
         * @param appName 
         * (required) String that represents the logical name of the AUT (this name will be presented in the test result)
         * 
         * @param testName 
         * (required) String that represents the name of the test (this name will be presented in the test result
         */
        open(browser: protractor.ProtractorBrowser, appName: string, testName: string): void;

        /**
         * The check window command will take a snapshot of the current window in the AUT and will perform smart visual
         * comparison of that window with the baseline. In case this is a new window that does not exist in the baseline,
         * this window will be added to the baseline.
         * 
         * @param screenName 
         * (required) String that represents the logical name of this window/validation point that will appear in the test result report.
         * 
         * @param matchTimeout 
         * (optional) MatchTimeout in milliseconds, given for the step to pass.
         */
        checkWindow(screenName: string, matchTimeout?: number): void;

        /**
        * Sets the branch name.
        *
        * @param branchName {String} The branch name.
        */
        setBranchName(branchName: string): void;

        /**
        * Sets the parent branch name.
        *
        * @param parentBranchName {String} The parent branch name.
        */
        setParentBranchName(branchName: string): void;

        /**
         * Overriding test comparison level
         * 
         * Comparison sensitivity, aka ‘match level’ is set by default to Strict to get optimal coverage. 
         * Sometimes for specific tests it is required to change the default comparison level
         * 
         * Exact - Pixel to pixel comparison, for demonstration purposes and debugging, will fail a test if a pixel is not in place. (not lace. (not recommended)
         * Strict - Strict is the default match level, it mimics human eyes so only significant visual changes will be spotted, while small changes that are not visible to a human eye will be ignored.
         * Content - Ignores style and anti-aliasing differences, while spotting content changes. (the content level can be useful if your website includes different styles which are not relevant for your tests).
         * Layout - Ignores content changes, and detects only layout changes. (useful for pages with dynamic content and localized pages)
         * 
         * @param matchLevel 
         * Accepts the level of comparison sensitivity. List of available options are listed above.
         */
        setMatchLevel(matchLevel: string): void;

        /**
         * Force full page screenshot
         * 
         * By default when calling ‘CheckWindow’ on Chrome and Safari, only the visible area (viewport) 
         * will be taken as screenshot (this is the default behavior of ChromeDrive and SafariDriver) 
         * while with Firefox and IE a full image of the entire page will be captured.
         * 
         * @param isEnabled          
         * Enables or disables full page screenshot mode for Chrome and Safari.
         * Default value is 'true'.
         */
        setForceFullPageScreenshot(isEnabled: boolean): void;
        
        /**
         * Enables user to switch between the regular and CSS type of scrolling. Comes to help
         * with floating elements to stay in place when scrolling.
         * 
         * @param mode
         * Scroll - Uses scrolling to get to the different parts of the page.
         * CSS -    Uses CSS transitions to get to the different parts of the page.
         * Default value - 'Scroll'.
         */
        setStitchMode(mode: string): void;

        close(): void;
    }
}
