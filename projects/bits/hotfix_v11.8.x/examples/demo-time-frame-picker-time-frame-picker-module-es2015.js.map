{"version":3,"sources":["webpack:///./demo/src/components/demo/time-frame-picker/index.ts?fede","webpack:///./demo/src/components/demo/time-frame-picker/time-frame-picker-basic/time-frame-picker-basic.example.component.ts?de7a","webpack:///./demo/src/components/demo/time-frame-picker/time-frame-picker-basic/time-frame-picker-basic.example.component.html?e100","webpack:///./node_modules/raw-loader/dist/cjs.js .*\\.(ts|html|less)$?d5d0","webpack:///./demo/src/components/demo/time-frame-picker/time-frame-picker-docs/time-frame-picker-docs.example.component.html?f02f","./demo/src/components/demo/time-frame-picker/time-frame-picker-multiple-custom-pickers/time-frame-picker-multiple-custom-pickers.example.component.ts","./demo/src/components/demo/time-frame-picker/time-frame-picker-multiple-custom-pickers/time-frame-picker-multiple-custom-pickers.example.component.html","webpack:///./demo/src/components/demo/time-frame-picker/time-frame-picker.module.ts?108b","webpack:///./demo/src/components/demo/time-frame-picker/time-frame-picker-multiple-custom-pickers/time-frame-picker-multiple-custom-pickers.example.component.html?112c","./demo/src/components/demo/time-frame-picker/quick-picker-basic/quick-picker-basic.example.component.ts","./demo/src/components/demo/time-frame-picker/quick-picker-basic/quick-picker-basic.example.component.html","webpack:///./demo/src/components/demo/time-frame-picker/time-frame-picker-visual-test/time-frame-picker-visual-test.component.ts?1a2b","webpack:///./demo/src/components/demo/time-frame-picker/time-frame-picker-inline/time-frame-picker-inline.example.component.ts?23f9","webpack:///./demo/src/components/demo/time-frame-picker/time-frame-picker-test/time-frame-picker-test.example.component.html?211c","./demo/src/components/demo/time-frame-picker/time-frame-picker-custom/time-frame-picker-custom.example.component.ts","./demo/src/components/demo/time-frame-picker/time-frame-picker-custom/time-frame-picker-custom.example.component.html","webpack:///./demo/src/components/demo/time-frame-picker/time-frame-picker-test/time-frame-picker-test.example.component.ts?2ad9","webpack:///./demo/src/components/demo/time-frame-picker/time-frame-picker-custom/time-frame-picker-custom.example.component.html?380c","./demo/src/components/demo/time-frame-picker/time-frame-picker-docs/time-frame-picker-docs.example.component.ts","./demo/src/components/demo/time-frame-picker/time-frame-picker-docs/time-frame-picker-docs.example.component.html","./demo/src/components/demo/time-frame-picker/time-frame-picker-date/time-frame-picker-date.example.component.ts","./demo/src/components/demo/time-frame-picker/time-frame-picker-date/time-frame-picker-date.example.component.html","webpack:///./demo/src/components/demo/time-frame-picker/quick-picker-basic/quick-picker-basic.example.component.ts?4cd6","./demo/src/components/demo/time-frame-picker/time-frame-picker-visual-test/time-frame-picker-visual-test.component.ts","./demo/src/components/demo/time-frame-picker/time-frame-picker-visual-test/time-frame-picker-visual-test.component.html","./demo/src/components/demo/time-frame-picker/time-frame-picker-basic/time-frame-picker-basic.example.component.ts","./demo/src/components/demo/time-frame-picker/time-frame-picker-basic/time-frame-picker-basic.example.component.html","webpack:///./demo/src/components/demo/time-frame-picker/time-frame-picker-docs/time-frame-picker-docs.example.component.ts?5b2b","webpack:///./demo/src/components/demo/time-frame-picker/time-frame-picker-date/time-frame-picker-date.example.component.ts?6085","./demo/src/components/demo/time-frame-picker/time-frame-picker-inline/time-frame-picker-inline.example.component.ts","./demo/src/components/demo/time-frame-picker/time-frame-picker-inline/time-frame-picker-inline.example.component.html","webpack:///./demo/src/components/demo/time-frame-picker/time-frame-picker-date/time-frame-picker-date.example.component.html?6acf","./demo/src/components/demo/time-frame-picker/index.ts","webpack:///./demo/src/components/demo/time-frame-picker/time-frame-picker-visual-test/time-frame-picker-visual-test.component.html?730e","webpack:///./demo/src/components/demo/time-frame-picker/time-frame-picker-inline/time-frame-picker-inline.example.component.html?757a","webpack:///./demo/src/components/demo/time-frame-picker/quick-picker-basic/quick-picker-basic.example.component.html?7b2f","webpack:///./demo/src/components/demo/time-frame-picker/time-frame-picker-multiple-custom-pickers/time-frame-picker-multiple-custom-pickers.example.component.ts?8e55","webpack:///./demo/src/components/demo/time-frame-picker/time-frame-picker-custom/time-frame-picker-custom.example.component.ts?aefa","./demo/src/components/demo/time-frame-picker/time-frame-picker-test/time-frame-picker-test.example.component.ts","./demo/src/components/demo/time-frame-picker/time-frame-picker-test/time-frame-picker-test.example.component.html","./demo/src/components/demo/time-frame-picker/time-frame-picker.module.ts"],"names":[],"mappings":"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","file":"demo-time-frame-picker-time-frame-picker-module-es2015.js","sourcesContent":["export default \"export * from \\\"./time-frame-picker-docs/time-frame-picker-docs.example.component\\\";\\nexport * from \\\"./time-frame-picker-basic/time-frame-picker-basic.example.component\\\";\\nexport * from \\\"./time-frame-picker-custom/time-frame-picker-custom.example.component\\\";\\nexport * from \\\"./quick-picker-basic/quick-picker-basic.example.component\\\";\\nexport * from \\\"./time-frame-picker-inline/time-frame-picker-inline.example.component\\\";\\nexport * from \\\"./time-frame-picker-date/time-frame-picker-date.example.component\\\";\\nexport * from \\\"./time-frame-picker-test/time-frame-picker-test.example.component\\\";\\nexport * from \\\"./time-frame-picker-visual-test/time-frame-picker-visual-test.component\\\";\\nexport * from \\\"./time-frame-picker-multiple-custom-pickers/time-frame-picker-multiple-custom-pickers.example.component\\\";\\n\";","export default \"import { Component } from \\\"@angular/core\\\";\\nimport { ITimeframe, ITimeFramePresetDictionary, TimeframeService } from \\\"@nova-ui/bits\\\";\\nimport { Subject } from \\\"rxjs\\\";\\n\\n@Component({\\n    selector: \\\"nui-time-frame-picker-basic-example\\\",\\n    templateUrl: \\\"./time-frame-picker-basic.example.component.html\\\",\\n})\\n\\nexport class TimeFramePickerBasicExampleComponent {\\n    public presets: ITimeFramePresetDictionary;\\n    public selectedPresetKey?: string = \\\"lastHour\\\";\\n    public acceptedTimeframe: ITimeframe;\\n    public tf: ITimeframe;\\n\\n    public showFooter: boolean = false;\\n\\n    constructor(public timeframeService: TimeframeService) {\\n        this.presets = timeframeService.getDefaultPresets();\\n        this.acceptedTimeframe = this.timeframeService.getTimeframeByPresetId(this.selectedPresetKey);\\n        this.tf = this.acceptedTimeframe;\\n    }\\n\\n    public closePopoverSubject = new Subject();\\n    public openPopoverSubject = new Subject();\\n\\n    public updateTf(value: ITimeframe) {\\n        this.tf = value;\\n\\n        const timeFrameDatesValid = () => this.timeframeService.areTimeFrameDatesValid(value);\\n        const timeFrameDatesEqual = () => this.timeframeService.isEqual(this.tf, this.acceptedTimeframe);\\n        if (timeFrameDatesValid() && !timeFrameDatesEqual()) { this.showFooter = true; }\\n\\n        this.selectedPresetKey = this.tf.selectedPresetId;\\n    }\\n\\n    public confirmPopover() {\\n        this.showFooter = false;\\n        this.closePopoverSubject.next();\\n        this.acceptedTimeframe = this.tf;\\n    }\\n    public cancelPopover() {\\n        this.showFooter = false;\\n        this.closePopoverSubject.next();\\n    }\\n\\n    public handlePresetSelection(presetKey: string) {\\n        this.selectedPresetKey = presetKey;\\n        this.tf = this.timeframeService.getTimeframeByPresetId(presetKey);\\n        this.acceptedTimeframe = this.tf;\\n        this.closePopoverSubject.next();\\n    }\\n}\\n\";","export default \"<nui-popover trigger='click'\\n             [template]=\\\"popoverTimeFramePicker\\\"\\n             [hasPadding]=\\\"false\\\"\\n             [closePopover]=\\\"closePopoverSubject\\\"\\n             [modal]=\\\"true\\\">\\n    <span class=\\\"nui-text-link\\\" style=\\\"cursor: pointer;\\\">{{ acceptedTimeframe | timeFrame }}</span>\\n</nui-popover>\\n\\n<ng-template #popoverTimeFramePicker>\\n    <div>\\n        <nui-quick-picker [presets]=\\\"presets\\\"\\n                          [selectedPreset]=\\\"acceptedTimeframe.selectedPresetId\\\"\\n                          (presetSelected)=\\\"handlePresetSelection($event)\\\"\\n                          pickerTitle=\\\"Custom Range\\\"\\n                          i18n-pickerTitle>\\n            <nui-time-frame-picker [startModel]=\\\"acceptedTimeframe\\\"\\n                                          (changed)=\\\"updateTf($event)\\\">\\n            </nui-time-frame-picker>\\n        </nui-quick-picker>\\n    </div>\\n    <nui-dialog-footer *ngIf=\\\"showFooter\\\">\\n        <button nui-button\\n                type=\\\"button\\\"\\n                displayStyle=\\\"action\\\"\\n                class=\\\"pr-3 nui-time-frame-picker__cancel\\\"\\n                (click)=\\\"cancelPopover()\\\"\\n                i18n>\\n            Cancel\\n        </button>\\n        <button nui-button\\n                type=\\\"button\\\"\\n                displayStyle=\\\"primary\\\"\\n                class=\\\"nui-time-frame-picker__use\\\"\\n                (click)=\\\"confirmPopover()\\\"\\n                i18n>\\n            Use\\n        </button>\\n    </nui-dialog-footer>\\n</ng-template>\\n\";","var map = {\n\t\"./index.ts\": \"/t6y\",\n\t\"./quick-picker-basic/quick-picker-basic.example.component.html\": \"ey9Y\",\n\t\"./quick-picker-basic/quick-picker-basic.example.component.ts\": \"TNbh\",\n\t\"./time-frame-picker-basic/time-frame-picker-basic.example.component.html\": \"4QCL\",\n\t\"./time-frame-picker-basic/time-frame-picker-basic.example.component.ts\": \"3nrA\",\n\t\"./time-frame-picker-custom/time-frame-picker-custom.example.component.html\": \"OAyX\",\n\t\"./time-frame-picker-custom/time-frame-picker-custom.example.component.ts\": \"rvpb\",\n\t\"./time-frame-picker-date/time-frame-picker-date.example.component.html\": \"as+W\",\n\t\"./time-frame-picker-date/time-frame-picker-date.example.component.ts\": \"YIVX\",\n\t\"./time-frame-picker-docs/time-frame-picker-docs.example.component.html\": \"8C/+\",\n\t\"./time-frame-picker-docs/time-frame-picker-docs.example.component.ts\": \"WyuH\",\n\t\"./time-frame-picker-inline/time-frame-picker-inline.example.component.html\": \"dXpY\",\n\t\"./time-frame-picker-inline/time-frame-picker-inline.example.component.ts\": \"I/lz\",\n\t\"./time-frame-picker-multiple-custom-pickers/time-frame-picker-multiple-custom-pickers.example.component.html\": \"ESxD\",\n\t\"./time-frame-picker-multiple-custom-pickers/time-frame-picker-multiple-custom-pickers.example.component.ts\": \"jlVH\",\n\t\"./time-frame-picker-test/time-frame-picker-test.example.component.html\": \"IRxw\",\n\t\"./time-frame-picker-test/time-frame-picker-test.example.component.ts\": \"Ktlp\",\n\t\"./time-frame-picker-visual-test/time-frame-picker-visual-test.component.html\": \"cw5P\",\n\t\"./time-frame-picker-visual-test/time-frame-picker-visual-test.component.ts\": \"Gis4\",\n\t\"./time-frame-picker.module.ts\": \"EIs/\"\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = \"5/Sd\";","export default \"<h2>Required Modules</h2>\\n<ul>\\n    <li>\\n        <code>NuiTimeFramePickerModule</code>\\n    </li>\\n</ul>\\n\\n<h2>Basic Usage</h2>\\n\\n<p>\\n    The <code>&lt;nui-time-frame-picker&gt;</code> component allows the user to select a time range. Its model is\\n    an <code><a href=\\\"../interfaces/ITimeframe.html\\\" target=\\\"_blank\\\">ITimeframe</a></code> which can be set using the\\n    <code>startModel</code> input. All changes can be detected using the <code>changed</code> output. Additionally,\\n    max and min dates can be defined by setting the <code>maxDate</code> and <code>minDate</code> inputs with moment\\n    instances.\\n</p>\\n<p>\\n    If the user selects a start time that's later than the currently selected end time, the selected end time will\\n    adjust accordingly to preserve the current timeframe duration.\\n</p>\\n<p>\\n    If the user attempts to select an end time that's the same as or earlier than the currently selected start time,\\n    no changes occur on either the view or the model.\\n</p>\\n\\n<nui-example-wrapper filenamePrefix=\\\"time-frame-picker-inline\\\" exampleTitle=\\\"Basic Usage\\\">\\n    <nui-time-frame-picker-inline></nui-time-frame-picker-inline>\\n</nui-example-wrapper>\\n\\n<h2>Quick Picker Component</h2>\\n\\n<p>\\n    The <code>&lt;nui-quick-picker&gt;</code> component is a helper component in the TimeFramePicker module.\\n</p>\\n<p>\\n    In most cases, the default title \\\"Quick Picks\\\" on the left pane should be sufficient; however, if needed, the\\n\\ttitle can be customized using the <code>presetsTitle</code> input.\\n</p>\\n<p>\\n    If a custom ordering of presets is needed, an array of keys can be passed to the <code>presetKeysOrder</code> input.\\n</p>\\n<nui-example-wrapper filenamePrefix=\\\"quick-picker-basic\\\" exampleTitle=\\\"Quick Picker\\\">\\n    <nui-quick-picker-basic></nui-quick-picker-basic>\\n</nui-example-wrapper>\\n\\n<h2>Timeframe Picker in a Popover</h2>\\n\\n<p>\\n    To implement the common use-case of a timeframe picker in a popover, combine the <code>&lt;nui-time-frame-picker&gt;</code>,\\n\\t<code>nui-quick-picker</code> and <code>nui-popover</code> elements as shown below.\\n</p>\\n<p>\\n    To achieve a modal effect, you can set the popover's <code>[modal]</code> input to <code>true</code>.\\n</p>\\n<nui-example-wrapper filenamePrefix=\\\"time-frame-picker-basic\\\" exampleTitle=\\\"Timeframe Picker in a Popover\\\">\\n    <nui-time-frame-picker-basic-example></nui-time-frame-picker-basic-example>\\n</nui-example-wrapper>\\n\\n<h2>Date-Based Picker in Popover</h2>\\n\\n<nui-message type=\\\"info\\\"  [allowDismiss]=\\\"false\\\">\\n    Please note that in order to adjust popover to the width of inner components you may need to pass <code>[unlimited]=\\\"true\\\"</code> to it.\\n</nui-message>\\n<p>\\n    You are free to use different types of components inside a Quick Picker. The following example shows how to put a DatePicker inside.\\n</p>\\n\\n<nui-example-wrapper filenamePrefix=\\\"time-frame-picker-date\\\" exampleTitle=\\\"Date-Based Picker in Popover\\\">\\n    <nui-time-frame-picker-date></nui-time-frame-picker-date>\\n</nui-example-wrapper>\\n\\n<h2>Custom presets with Timeframe Picker</h2>\\n\\n<p>\\n    Presets can be changed using <code>timeframeService.currentPresets</code> field.\\n</p>\\n<nui-message type=\\\"info\\\" [allowDismiss]=\\\"false\\\">\\n    Please note that TimeFrameService is provided in scope of NuiTimeFramePickerModule once, and\\n    since one TimeFrameService instance can keep only one set of presets, in order to have different presets in 2 different\\n    components of an application, please provide different TimeFrameService instances in scope of those components\\n    (as in the example below, which includes <code>providers: [TimeframeService]</code> in a component decorator).\\n</nui-message>\\n\\n<nui-example-wrapper filenamePrefix=\\\"time-frame-picker-custom\\\" exampleTitle=\\\"Date-Based Picker in Popover\\\">\\n    <nui-time-frame-picker-custom></nui-time-frame-picker-custom>\\n</nui-example-wrapper>\\n\\n<h2>Multiple pickers with custom presets</h2>\\n<p>\\n    If you want to have multiple instances of <code>TimeFrameService</code> for your time frame pickers, you should provide one in the components providers.\\n</p>\\n<p>\\n    The example below shows how to create a component that will be responsible for creating <code>TimeFrameService</code> per component.\\n</p>\\n<nui-example-wrapper filenamePrefix=\\\"time-frame-picker-multiple-custom-pickers\\\" exampleTitle=\\\"Multiple pickers with custom presets\\\">\\n    <nui-time-frame-picker-multiple-custom-pickers></nui-time-frame-picker-multiple-custom-pickers>\\n</nui-example-wrapper>\\n\";","import { AfterViewInit, ChangeDetectorRef, Component, QueryList, ViewChildren } from \"@angular/core\";\nimport { ITimeframe, ITimeFramePresetDictionary, TimeframeService } from \"@nova-ui/bits\";\nimport { Subject } from \"rxjs\";\n\ninterface IPicker {\n    id: string;\n    presets: ITimeFramePresetDictionary;\n    timeframeService?: TimeframeService;\n    tf?: ITimeframe;\n    acceptedTimeframe?: ITimeframe;\n    selectedPresetKey: string;\n}\n\n@Component({\n    selector: \"nui-time-frame-picker-multiple-custom-pickers\",\n    templateUrl: \"./time-frame-picker-multiple-custom-pickers.example.component.html\",\n})\nexport class TimeFramePickerMultipleCustomPickersExampleComponent implements AfterViewInit {\n    @ViewChildren(\"scoper\")\n    private tfScopers: QueryList<TimeframeServiceScoperExampleComponent>;\n\n    public pickers: IPicker[] = [\n        {\n            id: \"1\",\n            presets: {\n                \"last42Hours\": {\n                    name: $localize `Last 42 hours`,\n                    startDatetimePattern: {hours: -42},\n                    endDatetimePattern: {},\n                },\n                \"last749Days\": {\n                    name: $localize `Last 749 days`,\n                    startDatetimePattern: {days: -749},\n                    endDatetimePattern: {},\n                },\n            },\n            selectedPresetKey: \"last749Days\",\n        },\n        {\n            id: \"2\",\n            presets: {\n                \"last42Hours\": {\n                    name: $localize `Last 42 hours`,\n                    startDatetimePattern: {hours: -42},\n                    endDatetimePattern: {},\n                },\n            },\n            selectedPresetKey: \"last42Hours\",\n        },\n        {\n            id: \"3\",\n            presets: {\n                \"lastYear\": {\n                    name: $localize `Last year`,\n                    startDatetimePattern: {year: -1},\n                    endDatetimePattern: {},\n                },\n                \"last10Years\": {\n                    name: $localize `Last 10 years`,\n                    startDatetimePattern: {year: -10},\n                    endDatetimePattern: {},\n                },\n            },\n            selectedPresetKey: \"lastYear\",\n        },\n    ];\n\n\n    public presets: ITimeFramePresetDictionary = {\n        \"last42Hours\": {\n            name: $localize `Last 42 hours`,\n            startDatetimePattern: {hours: -42},\n            endDatetimePattern: {},\n        },\n        \"last749Days\": {\n            name: $localize `Last 749 days`,\n            startDatetimePattern: {days: -749},\n            endDatetimePattern: {},\n        },\n    };\n\n    public showFooter: boolean = false;\n\n    public closePopoverSubject = new Subject();\n    public openPopoverSubject = new Subject();\n\n\n    constructor(private cdRef: ChangeDetectorRef) {\n    }\n\n    public updateTf(value: ITimeframe, index: number) {\n        const picker = this.pickers[index];\n        picker.tf = value;\n\n        const timeFrameDatesValid = () => picker.timeframeService?.areTimeFrameDatesValid(value);\n        const timeFrameDatesEqual = () => picker.timeframeService?.isEqual(\n            <ITimeframe>picker.tf,\n            <ITimeframe>picker.acceptedTimeframe\n        );\n        if (timeFrameDatesValid() && !timeFrameDatesEqual()) { this.showFooter = true; }\n\n        picker.selectedPresetKey = <string>picker.tf.selectedPresetId;\n    }\n\n    public ngAfterViewInit() {\n        this.tfScopers.forEach((scoper, i) => {\n            const picker = this.pickers[i];\n            const timeframeService = scoper.timeframeService;\n\n            picker.timeframeService = timeframeService;\n            timeframeService.currentPresets = picker.presets;\n            picker.acceptedTimeframe = timeframeService.getTimeframeByPresetId(picker.selectedPresetKey);\n            picker.tf = picker.acceptedTimeframe;\n        });\n        this.cdRef.detectChanges();\n    }\n\n    public confirmPopover(index: number) {\n        const picker = this.pickers[index];\n\n        this.showFooter = false;\n        this.closePopoverSubject.next();\n        picker.acceptedTimeframe = picker.tf;\n    }\n    public cancelPopover(index: number) {\n        this.showFooter = false;\n        this.closePopoverSubject.next();\n    }\n\n    public handlePresetSelection(presetKey: string, index: number) {\n        const picker = this.pickers[index];\n\n        picker.selectedPresetKey = presetKey;\n        picker.tf = picker.timeframeService?.getTimeframeByPresetId(presetKey);\n        picker.acceptedTimeframe = picker.tf;\n        this.closePopoverSubject.next();\n    }\n}\n\n@Component({\n    selector: \"nui-time-frame-service-scoper\",\n    providers: [TimeframeService],\n    template: `<ng-content></ng-content>`,\n})\nexport class TimeframeServiceScoperExampleComponent {\n    constructor(public timeframeService: TimeframeService) { }\n}\n","\n<div class=\"d-flex\" *ngFor=\"let picker of pickers; let index = index\">\n    <nui-time-frame-service-scoper #scoper>\n        <nui-popover trigger='click'\n            [template]=\"popoverTimeFramePicker\"\n            [hasPadding]=\"false\"\n            [closePopover]=\"closePopoverSubject\"\n            [modal]=\"true\"\n            ><span class=\"nui-text-link\" style=\"cursor: pointer;\">{{ picker.acceptedTimeframe | timeFrame }}</span>\n        </nui-popover>\n\n        <ng-template #popoverTimeFramePicker>\n            <div>\n                <nui-quick-picker [presets]=\"picker.presets\"\n                    [selectedPreset]=\"picker.acceptedTimeframe.selectedPresetId\"\n                    (presetSelected)=\"handlePresetSelection($event, index)\"\n                    pickerTitle=\"Custom Range\"\n                    i18n-pickerTitle>\n                    <nui-time-frame-picker [startModel]=\"picker.acceptedTimeframe\"\n                        (changed)=\"updateTf($event, index)\"\n                    ></nui-time-frame-picker>\n                </nui-quick-picker>\n            </div>\n            <nui-dialog-footer *ngIf=\"showFooter\">\n                <button nui-button type=\"button\" displayStyle=\"action\" class=\"pr-3 nui-time-frame-picker__cancel\"\n                        (click)=\"cancelPopover(index)\" i18n>\n                    Cancel\n                </button>\n                <button nui-button type=\"button\" displayStyle=\"primary\" class=\"nui-time-frame-picker__use\"\n                        (click)=\"confirmPopover(index)\" i18n>\n                    Use\n                </button>\n            </nui-dialog-footer>\n        </ng-template>\n    </nui-time-frame-service-scoper>\n</div>\n","export default \"import { NgModule } from \\\"@angular/core\\\";\\nimport { FormsModule } from \\\"@angular/forms\\\";\\nimport { RouterModule } from \\\"@angular/router\\\";\\nimport {\\n    DEMO_PATH_TOKEN,\\n    NuiButtonModule,\\n    NuiDatePickerModule,\\n    NuiDialogModule,\\n    NuiDividerModule,\\n    NuiDocsModule,\\n    NuiMessageModule,\\n    NuiPopoverModule,\\n    NuiTextboxModule,\\n    NuiTimeFramePickerModule,\\n    SrlcStage,\\n} from \\\"@nova-ui/bits\\\";\\n\\nimport {\\n    QuickPickerBasicExampleComponent,\\n    TimeFramePickerBasicExampleComponent,\\n    TimeFramePickerCustomExampleComponent,\\n    TimeFramePickerDateExampleComponent,\\n    TimeFramePickerDocsExampleComponent,\\n    TimeFramePickerInlineExampleComponent,\\n    TimeFramePickerMultipleCustomPickersExampleComponent,\\n    TimeFramePickerTestExampleComponent,\\n    TimeFramePickerVisualTestComponent,\\n    TimeframeServiceScoperExampleComponent,\\n} from \\\"./index\\\";\\n\\nconst routes = [\\n    {\\n        path: \\\"\\\",\\n        component: TimeFramePickerDocsExampleComponent,\\n        data: {\\n            \\\"srlc\\\": {\\n                \\\"stage\\\": SrlcStage.ga,\\n            },\\n            showThemeSwitcher: true,\\n        },\\n    },\\n    {\\n        path: \\\"time-frame-picker-test\\\",\\n        component: TimeFramePickerTestExampleComponent,\\n        data: {\\n            \\\"srlc\\\": {\\n                \\\"hideIndicator\\\": true,\\n            },\\n        },\\n    },\\n    {\\n        path: \\\"time-frame-picker-visual-test\\\",\\n        component: TimeFramePickerVisualTestComponent,\\n        data: {\\n            \\\"srlc\\\": {\\n                \\\"hideIndicator\\\": true,\\n            },\\n        },\\n    },\\n    {\\n        path: \\\"multiple-custom-pickers\\\",\\n        component: TimeFramePickerMultipleCustomPickersExampleComponent,\\n        data: {\\n            \\\"srlc\\\": {\\n                \\\"hideIndicator\\\": true,\\n            },\\n        },\\n    },\\n];\\n\\n@NgModule({\\n    imports: [\\n        NuiButtonModule,\\n        NuiTimeFramePickerModule,\\n        NuiDividerModule,\\n        NuiMessageModule,\\n        FormsModule,\\n        NuiPopoverModule,\\n        NuiDocsModule,\\n        NuiTextboxModule,\\n        RouterModule.forChild(routes),\\n        NuiDialogModule,\\n        NuiDatePickerModule,\\n    ],\\n    declarations: [\\n        QuickPickerBasicExampleComponent,\\n        TimeFramePickerBasicExampleComponent,\\n        TimeFramePickerCustomExampleComponent,\\n        TimeFramePickerDateExampleComponent,\\n        TimeFramePickerInlineExampleComponent,\\n        TimeFramePickerTestExampleComponent,\\n        TimeFramePickerDocsExampleComponent,\\n        TimeFramePickerVisualTestComponent,\\n        TimeFramePickerMultipleCustomPickersExampleComponent,\\n        TimeframeServiceScoperExampleComponent,\\n    ],\\n    providers: [\\n        {\\n            provide: DEMO_PATH_TOKEN,\\n            useFactory: () => (<any>require).context(`!!raw-loader!./`, true, /.*\\\\.(ts|html|less)$/),\\n        },\\n    ],\\n    exports: [\\n        RouterModule,\\n    ],\\n})\\nexport class TimeFramePickerModule {\\n}\\n\";","export default \"\\n<div class=\\\"d-flex\\\" *ngFor=\\\"let picker of pickers; let index = index\\\">\\n    <nui-time-frame-service-scoper #scoper>\\n        <nui-popover trigger='click'\\n            [template]=\\\"popoverTimeFramePicker\\\"\\n            [hasPadding]=\\\"false\\\"\\n            [closePopover]=\\\"closePopoverSubject\\\"\\n            [modal]=\\\"true\\\"\\n            ><span class=\\\"nui-text-link\\\" style=\\\"cursor: pointer;\\\">{{ picker.acceptedTimeframe | timeFrame }}</span>\\n        </nui-popover>\\n\\n        <ng-template #popoverTimeFramePicker>\\n            <div>\\n                <nui-quick-picker [presets]=\\\"picker.presets\\\"\\n                    [selectedPreset]=\\\"picker.acceptedTimeframe.selectedPresetId\\\"\\n                    (presetSelected)=\\\"handlePresetSelection($event, index)\\\"\\n                    pickerTitle=\\\"Custom Range\\\"\\n                    i18n-pickerTitle>\\n                    <nui-time-frame-picker [startModel]=\\\"picker.acceptedTimeframe\\\"\\n                        (changed)=\\\"updateTf($event, index)\\\"\\n                    ></nui-time-frame-picker>\\n                </nui-quick-picker>\\n            </div>\\n            <nui-dialog-footer *ngIf=\\\"showFooter\\\">\\n                <button nui-button type=\\\"button\\\" displayStyle=\\\"action\\\" class=\\\"pr-3 nui-time-frame-picker__cancel\\\"\\n                        (click)=\\\"cancelPopover(index)\\\" i18n>\\n                    Cancel\\n                </button>\\n                <button nui-button type=\\\"button\\\" displayStyle=\\\"primary\\\" class=\\\"nui-time-frame-picker__use\\\"\\n                        (click)=\\\"confirmPopover(index)\\\" i18n>\\n                    Use\\n                </button>\\n            </nui-dialog-footer>\\n        </ng-template>\\n    </nui-time-frame-service-scoper>\\n</div>\\n\";","import { Component } from \"@angular/core\";\nimport { IQuickPickPresetDictionary } from \"@nova-ui/bits\";\n\n@Component({\n    selector: \"nui-quick-picker-basic\",\n    templateUrl: \"./quick-picker-basic.example.component.html\",\n})\n\nexport class QuickPickerBasicExampleComponent {\n    public presets: IQuickPickPresetDictionary = {\n        \"99\": {\n            name: \"99-th percentile\",\n        },\n        \"95\": {\n            name: \"95-th percentile\",\n        },\n        \"80\": {\n            name: \"80-th percentile\",\n        },\n    };\n    public presetKeysOrder = [\"95\", \"99\", \"80\"];\n    public selectedPresetKey?: string = \"95\";\n    public selectedValue: number = +(this.selectedPresetKey || \"\");\n    public handlePresetSelection(presetKey: string) {\n        this.selectedPresetKey = presetKey;\n        if (presetKey) {\n            this.selectedValue = +this.selectedPresetKey;\n        }\n    }\n    public handleCustomSelection(num: number) {\n        if (Object.keys(this.presets).indexOf(num.toString()) !== -1) {\n            this.selectedPresetKey = num.toString();\n        } else {\n            this.selectedPresetKey = undefined;\n        }\n        this.selectedValue = num;\n    }\n\n    public getTextboxValue() {\n        return +(this.selectedPresetKey || \"\") || this.selectedValue;\n    }\n}\n","<nui-quick-picker [presets]=\"presets\"\n                  [selectedPreset]=\"selectedPresetKey\"\n                  (presetSelected)=\"handlePresetSelection($event)\"\n                  pickerTitle=\"Custom percentiles\"\n                  [presetKeysOrder]=\"presetKeysOrder\"\n                  i18n-pickerTitle>\n    <nui-textbox-number [maxValue]=\"100\"\n                        (valueChange)=\"handleCustomSelection($event)\"\n                        [value]=\"getTextboxValue()\">\n    </nui-textbox-number>\n</nui-quick-picker>\n\n<span class=\"nui-text-secondary\">Selected Quick Pick is {{selectedPresetKey||\"null\"}}, Selected Value is {{selectedValue}}</span>\n","export default \"import { Component } from \\\"@angular/core\\\";\\nimport {\\n    IQuickPickPresetDictionary, ITimeframe, ITimeFramePresetDictionary, TimeframeService,\\n} from \\\"@nova-ui/bits\\\";\\nimport _find from \\\"lodash/find\\\";\\nimport _isUndefined from \\\"lodash/isUndefined\\\";\\nimport moment, { Moment } from \\\"moment/moment\\\";\\nimport { Subject } from \\\"rxjs\\\";\\n\\n@Component({\\n    selector: \\\"nui-time-frame-picker-visual-test\\\",\\n    templateUrl: \\\"./time-frame-picker-visual-test.component.html\\\",\\n})\\n\\nexport class TimeFramePickerVisualTestComponent {\\n    public presets: ITimeFramePresetDictionary;\\n    public presetsDatePicker: IQuickPickPresetDictionary;\\n    public selectedPresetKey?: string = \\\"lastHour\\\";\\n    public selectedPresetKeyDatePicker = \\\"dimasBirthday\\\";\\n    public acceptedTimeframe: ITimeframe;\\n    public tf: ITimeframe;\\n    public selectedDate: Moment;\\n\\n    public showFooter: boolean = false;\\n\\n    constructor(public timeframeService: TimeframeService) {\\n        this.presets = timeframeService.getDefaultPresets();\\n        this.acceptedTimeframe = this.timeframeService.getTimeframeByPresetId(this.selectedPresetKey, \\\"02/17/1986\\\");\\n        this.tf = this.acceptedTimeframe;\\n        this.presetsDatePicker = this.getDefaultPresets();\\n        this.selectedDate = this.getDateFromPreset(this.selectedPresetKeyDatePicker);\\n    }\\n\\n    public closePopoverSubject = new Subject();\\n    public openPopoverSubject = new Subject();\\n\\n    public updateTf(value: ITimeframe) {\\n        this.tf = value;\\n        const timeFrameDatesValid = () => this.timeframeService.areTimeFrameDatesValid(value);\\n        const timeFrameDatesEqual = () => this.timeframeService.isEqual(this.tf, this.acceptedTimeframe);\\n        if (timeFrameDatesValid() && !timeFrameDatesEqual()) { this.showFooter = true; }\\n        this.selectedPresetKey = this.tf.selectedPresetId;\\n    }\\n\\n    public confirmPopover() {\\n        this.showFooter = false;\\n        this.closePopoverSubject.next();\\n        this.acceptedTimeframe = this.tf;\\n    }\\n    public cancelPopover() {\\n        this.showFooter = false;\\n        this.closePopoverSubject.next();\\n    }\\n\\n    public handlePresetSelection(presetKey: string) {\\n        this.selectedPresetKeyDatePicker = presetKey;\\n        this.tf = this.timeframeService.getTimeframeByPresetId(presetKey, \\\"02/17/1986\\\");\\n        this.acceptedTimeframe = this.tf;\\n        this.closePopoverSubject.next();\\n    }\\n\\n    public confirmPopoverDatePicker() {\\n        this.closePopoverSubject.next();\\n    }\\n\\n    public handlePresetSelectionDatePicker(presetKey: string) {\\n        this.selectedDate = this.getDateFromPreset(presetKey);\\n        this.selectedPresetKeyDatePicker = presetKey;\\n        this.confirmPopoverDatePicker();\\n    }\\n\\n    public dateChanged(value: Moment) {\\n        if (!this.selectedDate.isSame(value, \\\"day\\\")) {\\n            this.selectedDate = value;\\n            this.selectedPresetKeyDatePicker = this.getPresetFromDate(value); // will return undefined if not found, exactly what's needed\\n            this.confirmPopoverDatePicker();\\n        }\\n    }\\n\\n    private getDefaultPresets(): {[key: string]: any} {\\n        return {\\n            today: {name: \\\"Today\\\", pattern: () => moment()},\\n            yesterday: { name: \\\"Yesterday\\\", pattern: () => moment().subtract(1, \\\"days\\\")},\\n            dimasBirthday: {name: \\\"Dima's Birthday\\\", pattern: () => moment(\\\"1986-02-17\\\")},\\n            random: {\\n                name: \\\"Random date (to show that we can)\\\",\\n                pattern: () => moment(+(new Date()) - Math.floor(Math.random() * 100000000000)),\\n            },\\n        };\\n    }\\n\\n    private getDateFromPreset(presetKey: string): Moment {\\n        const preset = this.getDefaultPresets()[presetKey];\\n        return preset ? preset.pattern() : moment();\\n    }\\n\\n    private getPresetFromDate(date: Moment): string {\\n        const preset: string | undefined = _find(Object.keys(this.presets), (key) => date.isSame(this.getDateFromPreset(key), \\\"day\\\"));\\n        if (_isUndefined(preset)) {\\n            throw new Error(\\\"DatePreset was not found\\\");\\n        }\\n        return preset;\\n    }\\n}\\n\";","export default \"import { Component } from \\\"@angular/core\\\";\\nimport { ITimeframe } from \\\"@nova-ui/bits\\\";\\nimport moment from \\\"moment/moment\\\";\\n\\n@Component({\\n    selector: \\\"nui-time-frame-picker-inline\\\",\\n    templateUrl: \\\"./time-frame-picker-inline.example.component.html\\\",\\n})\\n\\nexport class TimeFramePickerInlineExampleComponent {\\n    public tf: ITimeframe = {\\n        startDatetime: moment(\\\"04/09/2018\\\", \\\"L\\\"),\\n        endDatetime: moment(\\\"04/10/2018\\\", \\\"L\\\"),\\n        // @ts-ignore\\n        selectedPresetId: null,\\n    };\\n\\n    public minDate = moment(\\\"04/07/2018\\\", \\\"L\\\"); // \\\"L\\\" is \\\"MM/DD/YYY\\\" in moment.js\\n    public maxDate = moment();\\n\\n    public updateTf(value: any) {\\n        this.tf = value;\\n    }\\n}\\n\";","export default \"<nui-popover id=\\\"nui-demo-basic-time-frame-picker\\\"\\n             trigger='click'\\n             [template]=\\\"popoverTimeFramePicker\\\"\\n             [hasPadding]=\\\"false\\\"\\n             [closePopover]=\\\"closePopoverSubject\\\">\\n    <span class=\\\"nui-text-link\\\" style=\\\"cursor: pointer;\\\">{{ acceptedTimeframe | timeFrame }}</span>\\n</nui-popover>\\n\\n<div>{{ acceptedTimeframe | timeFrame:\\\"LL LTS\\\" }}</div>\\n\\n<ng-template #popoverTimeFramePicker>\\n    <div>\\n        <nui-quick-picker [presets]=\\\"presets\\\"\\n                          [selectedPreset]=\\\"acceptedTimeframe.selectedPresetId\\\"\\n                          (presetSelected)=\\\"handlePresetSelection($event)\\\"\\n                          pickerTitle=\\\"Custom Range\\\"\\n                          i18n-pickerTitle>\\n            <nui-time-frame-picker [startModel]=\\\"acceptedTimeframe\\\"\\n                                   (changed)=\\\"updateTf($event)\\\"\\n                                   [maxDate]=\\\"maxDate\\\"\\n                                   [minDate]=\\\"minDate\\\">\\n            </nui-time-frame-picker>\\n        </nui-quick-picker>\\n    </div>\\n    <nui-dialog-footer *ngIf=\\\"showFooter\\\">\\n        <button nui-button\\n                type=\\\"button\\\"\\n                displayStyle=\\\"action\\\"\\n                class=\\\"pr-3 nui-time-frame-picker__cancel\\\"\\n                (click)=\\\"cancelPopover()\\\"\\n                id=\\\"nui-demo-basic-time-frame-picker-cancel\\\"\\n                i18n>\\n            Cancel\\n        </button>\\n        <button nui-button\\n                type=\\\"button\\\"\\n                displayStyle=\\\"primary\\\"\\n                class=\\\"nui-time-frame-picker__use\\\"\\n                (click)=\\\"confirmPopover()\\\"\\n                id=\\\"nui-demo-basic-time-frame-picker-use\\\"\\n                i18n>\\n            Use\\n        </button>\\n    </nui-dialog-footer>\\n</ng-template>\\n\";","import { Component } from \"@angular/core\";\nimport { ITimeframe, ITimeFramePresetDictionary, TimeframeService } from \"@nova-ui/bits\";\nimport { Subject } from \"rxjs\";\n\n@Component({\n    selector: \"nui-time-frame-picker-custom\",\n    templateUrl: \"./time-frame-picker-custom.example.component.html\",\n    providers: [TimeframeService],\n})\n\nexport class TimeFramePickerCustomExampleComponent {\n    public presets: ITimeFramePresetDictionary = {\n        \"last42Hours\": {\n            name: $localize `Last 42 hours`,\n            startDatetimePattern: {hours: -42},\n            endDatetimePattern: {},\n        },\n        \"last749Days\": {\n            name: $localize `Last 749 days`,\n            startDatetimePattern: {days: -749},\n            endDatetimePattern: {},\n        },\n    };\n    public selectedPresetKey?: string = \"last42Hours\";\n    public acceptedTimeframe: ITimeframe;\n    public tf: ITimeframe;\n\n    public showFooter: boolean = false;\n\n    constructor(public timeframeService: TimeframeService) {\n        this.timeframeService.currentPresets = this.presets;\n        this.acceptedTimeframe = this.timeframeService.getTimeframeByPresetId(this.selectedPresetKey);\n        this.tf = this.acceptedTimeframe;\n    }\n\n    public closePopoverSubject = new Subject();\n    public openPopoverSubject = new Subject();\n\n    public updateTf(value: ITimeframe) {\n        this.tf = value;\n        const timeFrameDatesValid = () => this.timeframeService.areTimeFrameDatesValid(value);\n        const timeFrameDatesEqual = () => this.timeframeService.isEqual(this.tf, this.acceptedTimeframe);\n        if (timeFrameDatesValid() && !timeFrameDatesEqual()) { this.showFooter = true; }\n\n        this.selectedPresetKey = this.tf.selectedPresetId;\n    }\n\n    public confirmPopover() {\n        this.showFooter = false;\n        this.closePopoverSubject.next();\n        this.acceptedTimeframe = this.tf;\n    }\n    public cancelPopover() {\n        this.showFooter = false;\n        this.closePopoverSubject.next();\n    }\n\n    public handlePresetSelection(presetKey: string) {\n        this.selectedPresetKey = presetKey;\n        this.tf = this.timeframeService.getTimeframeByPresetId(presetKey);\n        this.acceptedTimeframe = this.tf;\n        this.closePopoverSubject.next();\n    }\n}\n","<nui-popover trigger='click'\n             [template]=\"popoverTimeFramePicker\"\n             [hasPadding]=\"false\"\n             [closePopover]=\"closePopoverSubject\"\n             [modal]=\"true\">\n    <span class=\"nui-text-link\" style=\"cursor: pointer;\">{{ acceptedTimeframe | timeFrame }}</span>\n</nui-popover>\n\n<ng-template #popoverTimeFramePicker>\n    <div>\n        <nui-quick-picker [presets]=\"presets\"\n                          [selectedPreset]=\"acceptedTimeframe.selectedPresetId\"\n                          (presetSelected)=\"handlePresetSelection($event)\"\n                          pickerTitle=\"Custom Range\"\n                          i18n-pickerTitle>\n            <nui-time-frame-picker [startModel]=\"acceptedTimeframe\"\n                                          (changed)=\"updateTf($event)\">\n            </nui-time-frame-picker>\n        </nui-quick-picker>\n    </div>\n    <nui-dialog-footer *ngIf=\"showFooter\">\n        <button nui-button\n                type=\"button\"\n                displayStyle=\"action\"\n                class=\"pr-3 nui-time-frame-picker__cancel\"\n                (click)=\"cancelPopover()\"\n                i18n>\n            Cancel\n        </button>\n        <button nui-button\n                type=\"button\"\n                displayStyle=\"primary\"\n                class=\"nui-time-frame-picker__use\"\n                (click)=\"confirmPopover()\"\n                i18n>\n            Use\n        </button>\n    </nui-dialog-footer>\n</ng-template>\n","export default \"import { Component } from \\\"@angular/core\\\";\\nimport { ITimeframe, ITimeFramePresetDictionary, TimeframeService } from \\\"@nova-ui/bits\\\";\\nimport moment from \\\"moment/moment\\\";\\nimport { Subject } from \\\"rxjs\\\";\\n\\n@Component({\\n    selector: \\\"nui-time-frame-picker-test\\\",\\n    templateUrl: \\\"./time-frame-picker-test.example.component.html\\\",\\n})\\n\\nexport class TimeFramePickerTestExampleComponent {\\n    public presets: ITimeFramePresetDictionary;\\n    public selectedPresetKey?: string = \\\"lastHour\\\";\\n    public acceptedTimeframe: ITimeframe;\\n    public tf: ITimeframe;\\n\\n    public minDate = moment(\\\"04/07/2018\\\", \\\"L\\\"); // \\\"L\\\" is \\\"MM/DD/YYY\\\" in moment.js\\n    public maxDate = moment();\\n\\n    public showFooter: boolean = false;\\n\\n    constructor(public timeframeService: TimeframeService) {\\n        this.presets = timeframeService.getDefaultPresets();\\n        this.acceptedTimeframe = this.timeframeService.getTimeframeByPresetId(this.selectedPresetKey);\\n        this.tf = this.acceptedTimeframe;\\n    }\\n\\n    public closePopoverSubject = new Subject();\\n    public openPopoverSubject = new Subject();\\n\\n    public updateTf(value: ITimeframe) {\\n        this.tf = value;\\n        const timeFrameDatesValid = () => this.timeframeService.areTimeFrameDatesValid(value);\\n        const timeFrameDatesEqual = () => this.timeframeService.isEqual(this.tf, this.acceptedTimeframe);\\n        if (timeFrameDatesValid() && !timeFrameDatesEqual()) { this.showFooter = true; }\\n\\n        this.selectedPresetKey = this.tf.selectedPresetId;\\n    }\\n\\n    public confirmPopover() {\\n        this.showFooter = false;\\n        this.closePopoverSubject.next();\\n        this.acceptedTimeframe = this.tf;\\n    }\\n    public cancelPopover() {\\n        this.showFooter = false;\\n        this.closePopoverSubject.next();\\n    }\\n\\n    public handlePresetSelection(presetKey: string) {\\n        this.selectedPresetKey = presetKey;\\n        this.tf = this.timeframeService.getTimeframeByPresetId(presetKey);\\n        this.acceptedTimeframe = this.tf;\\n        this.closePopoverSubject.next();\\n    }\\n}\\n\";","export default \"<nui-popover trigger='click'\\n             [template]=\\\"popoverTimeFramePicker\\\"\\n             [hasPadding]=\\\"false\\\"\\n             [closePopover]=\\\"closePopoverSubject\\\"\\n             [modal]=\\\"true\\\">\\n    <span class=\\\"nui-text-link\\\" style=\\\"cursor: pointer;\\\">{{ acceptedTimeframe | timeFrame }}</span>\\n</nui-popover>\\n\\n<ng-template #popoverTimeFramePicker>\\n    <div>\\n        <nui-quick-picker [presets]=\\\"presets\\\"\\n                          [selectedPreset]=\\\"acceptedTimeframe.selectedPresetId\\\"\\n                          (presetSelected)=\\\"handlePresetSelection($event)\\\"\\n                          pickerTitle=\\\"Custom Range\\\"\\n                          i18n-pickerTitle>\\n            <nui-time-frame-picker [startModel]=\\\"acceptedTimeframe\\\"\\n                                          (changed)=\\\"updateTf($event)\\\">\\n            </nui-time-frame-picker>\\n        </nui-quick-picker>\\n    </div>\\n    <nui-dialog-footer *ngIf=\\\"showFooter\\\">\\n        <button nui-button\\n                type=\\\"button\\\"\\n                displayStyle=\\\"action\\\"\\n                class=\\\"pr-3 nui-time-frame-picker__cancel\\\"\\n                (click)=\\\"cancelPopover()\\\"\\n                i18n>\\n            Cancel\\n        </button>\\n        <button nui-button\\n                type=\\\"button\\\"\\n                displayStyle=\\\"primary\\\"\\n                class=\\\"nui-time-frame-picker__use\\\"\\n                (click)=\\\"confirmPopover()\\\"\\n                i18n>\\n            Use\\n        </button>\\n    </nui-dialog-footer>\\n</ng-template>\\n\";","import { Component } from \"@angular/core\";\n\n@Component({\n    selector: \"nui-time-frame-picker-docs\",\n    templateUrl: \"./time-frame-picker-docs.example.component.html\",\n})\n\nexport class TimeFramePickerDocsExampleComponent {}\n\n","<h2>Required Modules</h2>\n<ul>\n    <li>\n        <code>NuiTimeFramePickerModule</code>\n    </li>\n</ul>\n\n<h2>Basic Usage</h2>\n\n<p>\n    The <code>&lt;nui-time-frame-picker&gt;</code> component allows the user to select a time range. Its model is\n    an <code><a href=\"../interfaces/ITimeframe.html\" target=\"_blank\">ITimeframe</a></code> which can be set using the\n    <code>startModel</code> input. All changes can be detected using the <code>changed</code> output. Additionally,\n    max and min dates can be defined by setting the <code>maxDate</code> and <code>minDate</code> inputs with moment\n    instances.\n</p>\n<p>\n    If the user selects a start time that's later than the currently selected end time, the selected end time will\n    adjust accordingly to preserve the current timeframe duration.\n</p>\n<p>\n    If the user attempts to select an end time that's the same as or earlier than the currently selected start time,\n    no changes occur on either the view or the model.\n</p>\n\n<nui-example-wrapper filenamePrefix=\"time-frame-picker-inline\" exampleTitle=\"Basic Usage\">\n    <nui-time-frame-picker-inline></nui-time-frame-picker-inline>\n</nui-example-wrapper>\n\n<h2>Quick Picker Component</h2>\n\n<p>\n    The <code>&lt;nui-quick-picker&gt;</code> component is a helper component in the TimeFramePicker module.\n</p>\n<p>\n    In most cases, the default title \"Quick Picks\" on the left pane should be sufficient; however, if needed, the\n\ttitle can be customized using the <code>presetsTitle</code> input.\n</p>\n<p>\n    If a custom ordering of presets is needed, an array of keys can be passed to the <code>presetKeysOrder</code> input.\n</p>\n<nui-example-wrapper filenamePrefix=\"quick-picker-basic\" exampleTitle=\"Quick Picker\">\n    <nui-quick-picker-basic></nui-quick-picker-basic>\n</nui-example-wrapper>\n\n<h2>Timeframe Picker in a Popover</h2>\n\n<p>\n    To implement the common use-case of a timeframe picker in a popover, combine the <code>&lt;nui-time-frame-picker&gt;</code>,\n\t<code>nui-quick-picker</code> and <code>nui-popover</code> elements as shown below.\n</p>\n<p>\n    To achieve a modal effect, you can set the popover's <code>[modal]</code> input to <code>true</code>.\n</p>\n<nui-example-wrapper filenamePrefix=\"time-frame-picker-basic\" exampleTitle=\"Timeframe Picker in a Popover\">\n    <nui-time-frame-picker-basic-example></nui-time-frame-picker-basic-example>\n</nui-example-wrapper>\n\n<h2>Date-Based Picker in Popover</h2>\n\n<nui-message type=\"info\"  [allowDismiss]=\"false\">\n    Please note that in order to adjust popover to the width of inner components you may need to pass <code>[unlimited]=\"true\"</code> to it.\n</nui-message>\n<p>\n    You are free to use different types of components inside a Quick Picker. The following example shows how to put a DatePicker inside.\n</p>\n\n<nui-example-wrapper filenamePrefix=\"time-frame-picker-date\" exampleTitle=\"Date-Based Picker in Popover\">\n    <nui-time-frame-picker-date></nui-time-frame-picker-date>\n</nui-example-wrapper>\n\n<h2>Custom presets with Timeframe Picker</h2>\n\n<p>\n    Presets can be changed using <code>timeframeService.currentPresets</code> field.\n</p>\n<nui-message type=\"info\" [allowDismiss]=\"false\">\n    Please note that TimeFrameService is provided in scope of NuiTimeFramePickerModule once, and\n    since one TimeFrameService instance can keep only one set of presets, in order to have different presets in 2 different\n    components of an application, please provide different TimeFrameService instances in scope of those components\n    (as in the example below, which includes <code>providers: [TimeframeService]</code> in a component decorator).\n</nui-message>\n\n<nui-example-wrapper filenamePrefix=\"time-frame-picker-custom\" exampleTitle=\"Date-Based Picker in Popover\">\n    <nui-time-frame-picker-custom></nui-time-frame-picker-custom>\n</nui-example-wrapper>\n\n<h2>Multiple pickers with custom presets</h2>\n<p>\n    If you want to have multiple instances of <code>TimeFrameService</code> for your time frame pickers, you should provide one in the components providers.\n</p>\n<p>\n    The example below shows how to create a component that will be responsible for creating <code>TimeFrameService</code> per component.\n</p>\n<nui-example-wrapper filenamePrefix=\"time-frame-picker-multiple-custom-pickers\" exampleTitle=\"Multiple pickers with custom presets\">\n    <nui-time-frame-picker-multiple-custom-pickers></nui-time-frame-picker-multiple-custom-pickers>\n</nui-example-wrapper>\n","import { Component } from \"@angular/core\";\nimport { IQuickPickPresetDictionary } from \"@nova-ui/bits\";\nimport _find from \"lodash/find\";\nimport _isUndefined from \"lodash/isUndefined\";\nimport moment, { Moment } from \"moment/moment\";\nimport { Subject } from \"rxjs\";\n\n@Component({\n    selector: \"nui-time-frame-picker-date\",\n    templateUrl: \"./time-frame-picker-date.example.component.html\",\n})\n\nexport class TimeFramePickerDateExampleComponent {\n    public presets: IQuickPickPresetDictionary;\n    public selectedPresetKey = \"ihorsBirthday\";\n    public selectedDate: Moment;\n\n    public showFooter: boolean = true;\n\n    constructor() {\n        this.presets = this.getDefaultPresets();\n        this.selectedDate = this.getDateFromPreset(this.selectedPresetKey);\n    }\n\n    public closePopoverSubject = new Subject();\n\n    public handlePresetSelection(presetKey: string) {\n        this.selectedDate = this.getDateFromPreset(presetKey);\n        this.selectedPresetKey = presetKey;\n        this.confirmPopover();\n    }\n\n    public dateChanged(value: Moment) {\n        if (!this.selectedDate.isSame(value, \"day\")) {\n            this.selectedDate = value;\n            this.selectedPresetKey = this.getPresetFromDate(value); // will return undefined if not found, exactly what's needed\n            this.confirmPopover();\n        }\n    }\n\n    public confirmPopover() {\n        this.closePopoverSubject.next();\n    }\n\n    // These private methods are specific and will be in any case abstracted to a service by end users:\n\n    private getDefaultPresets(): {[key: string]: any} {\n        return {\n            today: {name: \"Today\", pattern: () => moment()},\n            yesterday: { name: \"Yesterday\", pattern: () => moment().subtract(1, \"days\")},\n            ihorsBirthday: {name: \"Ihor's Birthday\", pattern: () => moment(\"1989-04-09\")},\n            random: {\n                name: \"Random date (to show that we can)\",\n                pattern: () => moment(+(new Date()) - Math.floor(Math.random() * 100000000000)),\n            },\n        };\n    }\n\n    private getDateFromPreset(presetKey: string): Moment {\n        const preset = this.getDefaultPresets()[presetKey];\n        return preset ? preset.pattern() : moment();\n    }\n\n    private getPresetFromDate(date: Moment): string {\n        const preset: string | undefined = _find(Object.keys(this.presets), (key) => date.isSame(this.getDateFromPreset(key), \"day\"));\n        if (_isUndefined(preset)) {\n            throw new Error(\"DatePreset was not found\");\n        }\n        return preset;\n    }\n}\n","<nui-popover trigger='click'\n             [template]=\"popoverDayPicker\"\n             [hasPadding]=\"false\"\n             [closePopover]=\"closePopoverSubject\"\n             [unlimited]=\"true\"\n             [modal]=\"true\">\n    <span class=\"nui-text-link\" style=\"cursor: pointer;\">Select day</span>\n</nui-popover>\n\n<p>\n    Selected date:\n    <em>{{selectedDate?.format(\"MMMM Do, YYYY\")}}</em>\n</p>\n\n<ng-template #popoverDayPicker>\n    <div>\n        <nui-quick-picker [presets]=\"presets\"\n                          [selectedPreset]=\"selectedPresetKey\"\n                          (presetSelected)=\"handlePresetSelection($event)\"\n                          pickerTitle=\"Custom Date\"\n                          i18n-pickerTitle\n                          presetsTitle=\"Baselines\"\n                          i18n-presetsTitle>\n            <nui-date-picker [inline]=\"true\"\n                             [value]=\"selectedDate\"\n                             [preserveInsignificant]=\"false\"\n                             (valueChange)=\"dateChanged($event)\">\n            </nui-date-picker>\n        </nui-quick-picker>\n    </div>\n</ng-template>\n","export default \"import { Component } from \\\"@angular/core\\\";\\nimport { IQuickPickPresetDictionary } from \\\"@nova-ui/bits\\\";\\n\\n@Component({\\n    selector: \\\"nui-quick-picker-basic\\\",\\n    templateUrl: \\\"./quick-picker-basic.example.component.html\\\",\\n})\\n\\nexport class QuickPickerBasicExampleComponent {\\n    public presets: IQuickPickPresetDictionary = {\\n        \\\"99\\\": {\\n            name: \\\"99-th percentile\\\",\\n        },\\n        \\\"95\\\": {\\n            name: \\\"95-th percentile\\\",\\n        },\\n        \\\"80\\\": {\\n            name: \\\"80-th percentile\\\",\\n        },\\n    };\\n    public presetKeysOrder = [\\\"95\\\", \\\"99\\\", \\\"80\\\"];\\n    public selectedPresetKey?: string = \\\"95\\\";\\n    public selectedValue: number = +(this.selectedPresetKey || \\\"\\\");\\n    public handlePresetSelection(presetKey: string) {\\n        this.selectedPresetKey = presetKey;\\n        if (presetKey) {\\n            this.selectedValue = +this.selectedPresetKey;\\n        }\\n    }\\n    public handleCustomSelection(num: number) {\\n        if (Object.keys(this.presets).indexOf(num.toString()) !== -1) {\\n            this.selectedPresetKey = num.toString();\\n        } else {\\n            this.selectedPresetKey = undefined;\\n        }\\n        this.selectedValue = num;\\n    }\\n\\n    public getTextboxValue() {\\n        return +(this.selectedPresetKey || \\\"\\\") || this.selectedValue;\\n    }\\n}\\n\";","import { Component } from \"@angular/core\";\nimport {\n    IQuickPickPresetDictionary, ITimeframe, ITimeFramePresetDictionary, TimeframeService,\n} from \"@nova-ui/bits\";\nimport _find from \"lodash/find\";\nimport _isUndefined from \"lodash/isUndefined\";\nimport moment, { Moment } from \"moment/moment\";\nimport { Subject } from \"rxjs\";\n\n@Component({\n    selector: \"nui-time-frame-picker-visual-test\",\n    templateUrl: \"./time-frame-picker-visual-test.component.html\",\n})\n\nexport class TimeFramePickerVisualTestComponent {\n    public presets: ITimeFramePresetDictionary;\n    public presetsDatePicker: IQuickPickPresetDictionary;\n    public selectedPresetKey?: string = \"lastHour\";\n    public selectedPresetKeyDatePicker = \"dimasBirthday\";\n    public acceptedTimeframe: ITimeframe;\n    public tf: ITimeframe;\n    public selectedDate: Moment;\n\n    public showFooter: boolean = false;\n\n    constructor(public timeframeService: TimeframeService) {\n        this.presets = timeframeService.getDefaultPresets();\n        this.acceptedTimeframe = this.timeframeService.getTimeframeByPresetId(this.selectedPresetKey, \"02/17/1986\");\n        this.tf = this.acceptedTimeframe;\n        this.presetsDatePicker = this.getDefaultPresets();\n        this.selectedDate = this.getDateFromPreset(this.selectedPresetKeyDatePicker);\n    }\n\n    public closePopoverSubject = new Subject();\n    public openPopoverSubject = new Subject();\n\n    public updateTf(value: ITimeframe) {\n        this.tf = value;\n        const timeFrameDatesValid = () => this.timeframeService.areTimeFrameDatesValid(value);\n        const timeFrameDatesEqual = () => this.timeframeService.isEqual(this.tf, this.acceptedTimeframe);\n        if (timeFrameDatesValid() && !timeFrameDatesEqual()) { this.showFooter = true; }\n        this.selectedPresetKey = this.tf.selectedPresetId;\n    }\n\n    public confirmPopover() {\n        this.showFooter = false;\n        this.closePopoverSubject.next();\n        this.acceptedTimeframe = this.tf;\n    }\n    public cancelPopover() {\n        this.showFooter = false;\n        this.closePopoverSubject.next();\n    }\n\n    public handlePresetSelection(presetKey: string) {\n        this.selectedPresetKeyDatePicker = presetKey;\n        this.tf = this.timeframeService.getTimeframeByPresetId(presetKey, \"02/17/1986\");\n        this.acceptedTimeframe = this.tf;\n        this.closePopoverSubject.next();\n    }\n\n    public confirmPopoverDatePicker() {\n        this.closePopoverSubject.next();\n    }\n\n    public handlePresetSelectionDatePicker(presetKey: string) {\n        this.selectedDate = this.getDateFromPreset(presetKey);\n        this.selectedPresetKeyDatePicker = presetKey;\n        this.confirmPopoverDatePicker();\n    }\n\n    public dateChanged(value: Moment) {\n        if (!this.selectedDate.isSame(value, \"day\")) {\n            this.selectedDate = value;\n            this.selectedPresetKeyDatePicker = this.getPresetFromDate(value); // will return undefined if not found, exactly what's needed\n            this.confirmPopoverDatePicker();\n        }\n    }\n\n    private getDefaultPresets(): {[key: string]: any} {\n        return {\n            today: {name: \"Today\", pattern: () => moment()},\n            yesterday: { name: \"Yesterday\", pattern: () => moment().subtract(1, \"days\")},\n            dimasBirthday: {name: \"Dima's Birthday\", pattern: () => moment(\"1986-02-17\")},\n            random: {\n                name: \"Random date (to show that we can)\",\n                pattern: () => moment(+(new Date()) - Math.floor(Math.random() * 100000000000)),\n            },\n        };\n    }\n\n    private getDateFromPreset(presetKey: string): Moment {\n        const preset = this.getDefaultPresets()[presetKey];\n        return preset ? preset.pattern() : moment();\n    }\n\n    private getPresetFromDate(date: Moment): string {\n        const preset: string | undefined = _find(Object.keys(this.presets), (key) => date.isSame(this.getDateFromPreset(key), \"day\"));\n        if (_isUndefined(preset)) {\n            throw new Error(\"DatePreset was not found\");\n        }\n        return preset;\n    }\n}\n","<div class=\"container\">\n    <div class=\"row\">\n        <div class=\"col\">\n            <h4>TimeFrame Picker in Popover</h4>\n            <nui-popover trigger='click'\n                         [template]=\"popoverTimeFramePicker\"\n                         [hasPadding]=\"false\"\n                         [closePopover]=\"closePopoverSubject\"\n                         [modal]=\"true\"\n                         id=\"nui-demo-visual-default-popover\">\n                        <span class=\"nui-text-link\" style=\"cursor: pointer;\">{{ acceptedTimeframe | timeFrame }}</span>\n            </nui-popover>\n\n            <ng-template #popoverTimeFramePicker>\n                <div>\n                    <nui-quick-picker [presets]=\"presets\"\n                                      [selectedPreset]=\"acceptedTimeframe.selectedPresetId\"\n                                      (presetSelected)=\"handlePresetSelection($event)\"\n                                      pickerTitle=\"Custom Range\">\n                        <nui-time-frame-picker [startModel]=\"acceptedTimeframe\"\n                                               (changed)=\"updateTf($event)\">\n                        </nui-time-frame-picker>\n                    </nui-quick-picker>\n                </div>\n                <nui-dialog-footer *ngIf=\"showFooter\">\n                    <button nui-button\n                            type=\"button\"\n                            displayStyle=\"action\"\n                            class=\"pr-3 nui-time-frame-picker__cancel\"\n                            (click)=\"cancelPopover()\">\n                        Cancel\n                    </button>\n                    <button nui-button\n                            type=\"button\"\n                            displayStyle=\"primary\"\n                            class=\"nui-time-frame-picker__use\"\n                            (click)=\"confirmPopover()\">\n                        Use\n                    </button>\n                </nui-dialog-footer>\n            </ng-template>\n        </div>\n        <div class=\"col\">\n            <h4>TimeFrame Picker with other components</h4>\n            <nui-popover trigger='click'\n                         [template]=\"popoverDayPicker\"\n                         [hasPadding]=\"false\"\n                         [closePopover]=\"closePopoverSubject\"\n                         [unlimited]=\"true\"\n                         [modal]=\"true\"\n                         id=\"nui-demo-visual-datepicker-popover\">\n                         <span class=\"nui-text-link\" style=\"cursor: pointer;\">Select day</span>\n            </nui-popover>\n\n            <p>\n            Selected date:\n            <em>{{selectedDate?.format(\"MMMM Do, YYYY\")}}</em>\n            </p>\n\n            <ng-template #popoverDayPicker>\n            <div>\n                <nui-quick-picker [presets]=\"presetsDatePicker\"\n                                  [selectedPreset]=\"selectedPresetKeyDatePicker\"\n                                  (presetSelected)=\"handlePresetSelectionDatePicker($event)\"\n                                  pickerTitle=\"Custom Date\"\n                                  presetsTitle=\"Baselines\">\n                    <nui-date-picker [inline]=\"true\"\n                                     [value]=\"selectedDate\"\n                                     [preserveInsignificant]=\"false\"\n                                     (valueChange)=\"dateChanged($event)\">\n                    </nui-date-picker>\n                </nui-quick-picker>\n            </div>\n            </ng-template>\n        </div>\n        <div class=\"col\">\n            <h4>TimeFrame Picker + Date picker with unlimited width in Popover</h4>\n            <nui-popover trigger='click'\n                            [template]=\"popoverTimeFramePickerUnlimited\"\n                            [hasPadding]=\"false\"\n                            [closePopover]=\"closePopoverSubject\"\n                            [modal]=\"true\"\n                            [unlimited]=\"true\"\n                            id=\"nui-demo-visual-complex-popover\">\n                        <span class=\"nui-text-link\" style=\"cursor: pointer;\">{{ acceptedTimeframe | timeFrame }}</span>\n            </nui-popover>\n\n            <ng-template #popoverTimeFramePickerUnlimited>\n                <div>\n                    <nui-quick-picker [presets]=\"presets\"\n                                      [selectedPreset]=\"acceptedTimeframe.selectedPresetId\"\n                                      (presetSelected)=\"handlePresetSelection($event)\"\n                                      pickerTitle=\"Custom Range\">\n                        <nui-time-frame-picker [startModel]=\"acceptedTimeframe\"\n                                                    (changed)=\"updateTf($event)\">\n                        </nui-time-frame-picker>\n                        <nui-date-picker [inline]=\"true\"\n                                         [value]=\"selectedDate\"\n                                         [preserveInsignificant]=\"false\"\n                                         (valueChange)=\"dateChanged($event)\">\n                        </nui-date-picker>\n                    </nui-quick-picker>\n                </div>\n            </ng-template>\n        </div>\n    </div>\n</div>\n","import { Component } from \"@angular/core\";\nimport { ITimeframe, ITimeFramePresetDictionary, TimeframeService } from \"@nova-ui/bits\";\nimport { Subject } from \"rxjs\";\n\n@Component({\n    selector: \"nui-time-frame-picker-basic-example\",\n    templateUrl: \"./time-frame-picker-basic.example.component.html\",\n})\n\nexport class TimeFramePickerBasicExampleComponent {\n    public presets: ITimeFramePresetDictionary;\n    public selectedPresetKey?: string = \"lastHour\";\n    public acceptedTimeframe: ITimeframe;\n    public tf: ITimeframe;\n\n    public showFooter: boolean = false;\n\n    constructor(public timeframeService: TimeframeService) {\n        this.presets = timeframeService.getDefaultPresets();\n        this.acceptedTimeframe = this.timeframeService.getTimeframeByPresetId(this.selectedPresetKey);\n        this.tf = this.acceptedTimeframe;\n    }\n\n    public closePopoverSubject = new Subject();\n    public openPopoverSubject = new Subject();\n\n    public updateTf(value: ITimeframe) {\n        this.tf = value;\n\n        const timeFrameDatesValid = () => this.timeframeService.areTimeFrameDatesValid(value);\n        const timeFrameDatesEqual = () => this.timeframeService.isEqual(this.tf, this.acceptedTimeframe);\n        if (timeFrameDatesValid() && !timeFrameDatesEqual()) { this.showFooter = true; }\n\n        this.selectedPresetKey = this.tf.selectedPresetId;\n    }\n\n    public confirmPopover() {\n        this.showFooter = false;\n        this.closePopoverSubject.next();\n        this.acceptedTimeframe = this.tf;\n    }\n    public cancelPopover() {\n        this.showFooter = false;\n        this.closePopoverSubject.next();\n    }\n\n    public handlePresetSelection(presetKey: string) {\n        this.selectedPresetKey = presetKey;\n        this.tf = this.timeframeService.getTimeframeByPresetId(presetKey);\n        this.acceptedTimeframe = this.tf;\n        this.closePopoverSubject.next();\n    }\n}\n","<nui-popover trigger='click'\n             [template]=\"popoverTimeFramePicker\"\n             [hasPadding]=\"false\"\n             [closePopover]=\"closePopoverSubject\"\n             [modal]=\"true\">\n    <span class=\"nui-text-link\" style=\"cursor: pointer;\">{{ acceptedTimeframe | timeFrame }}</span>\n</nui-popover>\n\n<ng-template #popoverTimeFramePicker>\n    <div>\n        <nui-quick-picker [presets]=\"presets\"\n                          [selectedPreset]=\"acceptedTimeframe.selectedPresetId\"\n                          (presetSelected)=\"handlePresetSelection($event)\"\n                          pickerTitle=\"Custom Range\"\n                          i18n-pickerTitle>\n            <nui-time-frame-picker [startModel]=\"acceptedTimeframe\"\n                                          (changed)=\"updateTf($event)\">\n            </nui-time-frame-picker>\n        </nui-quick-picker>\n    </div>\n    <nui-dialog-footer *ngIf=\"showFooter\">\n        <button nui-button\n                type=\"button\"\n                displayStyle=\"action\"\n                class=\"pr-3 nui-time-frame-picker__cancel\"\n                (click)=\"cancelPopover()\"\n                i18n>\n            Cancel\n        </button>\n        <button nui-button\n                type=\"button\"\n                displayStyle=\"primary\"\n                class=\"nui-time-frame-picker__use\"\n                (click)=\"confirmPopover()\"\n                i18n>\n            Use\n        </button>\n    </nui-dialog-footer>\n</ng-template>\n","export default \"import { Component } from \\\"@angular/core\\\";\\n\\n@Component({\\n    selector: \\\"nui-time-frame-picker-docs\\\",\\n    templateUrl: \\\"./time-frame-picker-docs.example.component.html\\\",\\n})\\n\\nexport class TimeFramePickerDocsExampleComponent {}\\n\\n\";","export default \"import { Component } from \\\"@angular/core\\\";\\nimport { IQuickPickPresetDictionary } from \\\"@nova-ui/bits\\\";\\nimport _find from \\\"lodash/find\\\";\\nimport _isUndefined from \\\"lodash/isUndefined\\\";\\nimport moment, { Moment } from \\\"moment/moment\\\";\\nimport { Subject } from \\\"rxjs\\\";\\n\\n@Component({\\n    selector: \\\"nui-time-frame-picker-date\\\",\\n    templateUrl: \\\"./time-frame-picker-date.example.component.html\\\",\\n})\\n\\nexport class TimeFramePickerDateExampleComponent {\\n    public presets: IQuickPickPresetDictionary;\\n    public selectedPresetKey = \\\"ihorsBirthday\\\";\\n    public selectedDate: Moment;\\n\\n    public showFooter: boolean = true;\\n\\n    constructor() {\\n        this.presets = this.getDefaultPresets();\\n        this.selectedDate = this.getDateFromPreset(this.selectedPresetKey);\\n    }\\n\\n    public closePopoverSubject = new Subject();\\n\\n    public handlePresetSelection(presetKey: string) {\\n        this.selectedDate = this.getDateFromPreset(presetKey);\\n        this.selectedPresetKey = presetKey;\\n        this.confirmPopover();\\n    }\\n\\n    public dateChanged(value: Moment) {\\n        if (!this.selectedDate.isSame(value, \\\"day\\\")) {\\n            this.selectedDate = value;\\n            this.selectedPresetKey = this.getPresetFromDate(value); // will return undefined if not found, exactly what's needed\\n            this.confirmPopover();\\n        }\\n    }\\n\\n    public confirmPopover() {\\n        this.closePopoverSubject.next();\\n    }\\n\\n    // These private methods are specific and will be in any case abstracted to a service by end users:\\n\\n    private getDefaultPresets(): {[key: string]: any} {\\n        return {\\n            today: {name: \\\"Today\\\", pattern: () => moment()},\\n            yesterday: { name: \\\"Yesterday\\\", pattern: () => moment().subtract(1, \\\"days\\\")},\\n            ihorsBirthday: {name: \\\"Ihor's Birthday\\\", pattern: () => moment(\\\"1989-04-09\\\")},\\n            random: {\\n                name: \\\"Random date (to show that we can)\\\",\\n                pattern: () => moment(+(new Date()) - Math.floor(Math.random() * 100000000000)),\\n            },\\n        };\\n    }\\n\\n    private getDateFromPreset(presetKey: string): Moment {\\n        const preset = this.getDefaultPresets()[presetKey];\\n        return preset ? preset.pattern() : moment();\\n    }\\n\\n    private getPresetFromDate(date: Moment): string {\\n        const preset: string | undefined = _find(Object.keys(this.presets), (key) => date.isSame(this.getDateFromPreset(key), \\\"day\\\"));\\n        if (_isUndefined(preset)) {\\n            throw new Error(\\\"DatePreset was not found\\\");\\n        }\\n        return preset;\\n    }\\n}\\n\";","import { Component } from \"@angular/core\";\nimport { ITimeframe } from \"@nova-ui/bits\";\nimport moment from \"moment/moment\";\n\n@Component({\n    selector: \"nui-time-frame-picker-inline\",\n    templateUrl: \"./time-frame-picker-inline.example.component.html\",\n})\n\nexport class TimeFramePickerInlineExampleComponent {\n    public tf: ITimeframe = {\n        startDatetime: moment(\"04/09/2018\", \"L\"),\n        endDatetime: moment(\"04/10/2018\", \"L\"),\n        // @ts-ignore\n        selectedPresetId: null,\n    };\n\n    public minDate = moment(\"04/07/2018\", \"L\"); // \"L\" is \"MM/DD/YYY\" in moment.js\n    public maxDate = moment();\n\n    public updateTf(value: any) {\n        this.tf = value;\n    }\n}\n","<nui-time-frame-picker [startModel]=\"tf\"\n                       (changed)=\"updateTf($event)\"\n                       [maxDate]=\"maxDate\"\n                       [minDate]=\"minDate\">\n</nui-time-frame-picker>\n\n<span class=\"nui-text-secondary\">Selected timeframe is {{ tf | timeFrame }}</span>\n","export default \"<nui-popover trigger='click'\\n             [template]=\\\"popoverDayPicker\\\"\\n             [hasPadding]=\\\"false\\\"\\n             [closePopover]=\\\"closePopoverSubject\\\"\\n             [unlimited]=\\\"true\\\"\\n             [modal]=\\\"true\\\">\\n    <span class=\\\"nui-text-link\\\" style=\\\"cursor: pointer;\\\">Select day</span>\\n</nui-popover>\\n\\n<p>\\n    Selected date:\\n    <em>{{selectedDate?.format(\\\"MMMM Do, YYYY\\\")}}</em>\\n</p>\\n\\n<ng-template #popoverDayPicker>\\n    <div>\\n        <nui-quick-picker [presets]=\\\"presets\\\"\\n                          [selectedPreset]=\\\"selectedPresetKey\\\"\\n                          (presetSelected)=\\\"handlePresetSelection($event)\\\"\\n                          pickerTitle=\\\"Custom Date\\\"\\n                          i18n-pickerTitle\\n                          presetsTitle=\\\"Baselines\\\"\\n                          i18n-presetsTitle>\\n            <nui-date-picker [inline]=\\\"true\\\"\\n                             [value]=\\\"selectedDate\\\"\\n                             [preserveInsignificant]=\\\"false\\\"\\n                             (valueChange)=\\\"dateChanged($event)\\\">\\n            </nui-date-picker>\\n        </nui-quick-picker>\\n    </div>\\n</ng-template>\\n\";","export * from \"./time-frame-picker-docs/time-frame-picker-docs.example.component\";\nexport * from \"./time-frame-picker-basic/time-frame-picker-basic.example.component\";\nexport * from \"./time-frame-picker-custom/time-frame-picker-custom.example.component\";\nexport * from \"./quick-picker-basic/quick-picker-basic.example.component\";\nexport * from \"./time-frame-picker-inline/time-frame-picker-inline.example.component\";\nexport * from \"./time-frame-picker-date/time-frame-picker-date.example.component\";\nexport * from \"./time-frame-picker-test/time-frame-picker-test.example.component\";\nexport * from \"./time-frame-picker-visual-test/time-frame-picker-visual-test.component\";\nexport * from \"./time-frame-picker-multiple-custom-pickers/time-frame-picker-multiple-custom-pickers.example.component\";\n","export default \"<div class=\\\"container\\\">\\n    <div class=\\\"row\\\">\\n        <div class=\\\"col\\\">\\n            <h4>TimeFrame Picker in Popover</h4>\\n            <nui-popover trigger='click'\\n                         [template]=\\\"popoverTimeFramePicker\\\"\\n                         [hasPadding]=\\\"false\\\"\\n                         [closePopover]=\\\"closePopoverSubject\\\"\\n                         [modal]=\\\"true\\\"\\n                         id=\\\"nui-demo-visual-default-popover\\\">\\n                        <span class=\\\"nui-text-link\\\" style=\\\"cursor: pointer;\\\">{{ acceptedTimeframe | timeFrame }}</span>\\n            </nui-popover>\\n\\n            <ng-template #popoverTimeFramePicker>\\n                <div>\\n                    <nui-quick-picker [presets]=\\\"presets\\\"\\n                                      [selectedPreset]=\\\"acceptedTimeframe.selectedPresetId\\\"\\n                                      (presetSelected)=\\\"handlePresetSelection($event)\\\"\\n                                      pickerTitle=\\\"Custom Range\\\">\\n                        <nui-time-frame-picker [startModel]=\\\"acceptedTimeframe\\\"\\n                                               (changed)=\\\"updateTf($event)\\\">\\n                        </nui-time-frame-picker>\\n                    </nui-quick-picker>\\n                </div>\\n                <nui-dialog-footer *ngIf=\\\"showFooter\\\">\\n                    <button nui-button\\n                            type=\\\"button\\\"\\n                            displayStyle=\\\"action\\\"\\n                            class=\\\"pr-3 nui-time-frame-picker__cancel\\\"\\n                            (click)=\\\"cancelPopover()\\\">\\n                        Cancel\\n                    </button>\\n                    <button nui-button\\n                            type=\\\"button\\\"\\n                            displayStyle=\\\"primary\\\"\\n                            class=\\\"nui-time-frame-picker__use\\\"\\n                            (click)=\\\"confirmPopover()\\\">\\n                        Use\\n                    </button>\\n                </nui-dialog-footer>\\n            </ng-template>\\n        </div>\\n        <div class=\\\"col\\\">\\n            <h4>TimeFrame Picker with other components</h4>\\n            <nui-popover trigger='click'\\n                         [template]=\\\"popoverDayPicker\\\"\\n                         [hasPadding]=\\\"false\\\"\\n                         [closePopover]=\\\"closePopoverSubject\\\"\\n                         [unlimited]=\\\"true\\\"\\n                         [modal]=\\\"true\\\"\\n                         id=\\\"nui-demo-visual-datepicker-popover\\\">\\n                         <span class=\\\"nui-text-link\\\" style=\\\"cursor: pointer;\\\">Select day</span>\\n            </nui-popover>\\n\\n            <p>\\n            Selected date:\\n            <em>{{selectedDate?.format(\\\"MMMM Do, YYYY\\\")}}</em>\\n            </p>\\n\\n            <ng-template #popoverDayPicker>\\n            <div>\\n                <nui-quick-picker [presets]=\\\"presetsDatePicker\\\"\\n                                  [selectedPreset]=\\\"selectedPresetKeyDatePicker\\\"\\n                                  (presetSelected)=\\\"handlePresetSelectionDatePicker($event)\\\"\\n                                  pickerTitle=\\\"Custom Date\\\"\\n                                  presetsTitle=\\\"Baselines\\\">\\n                    <nui-date-picker [inline]=\\\"true\\\"\\n                                     [value]=\\\"selectedDate\\\"\\n                                     [preserveInsignificant]=\\\"false\\\"\\n                                     (valueChange)=\\\"dateChanged($event)\\\">\\n                    </nui-date-picker>\\n                </nui-quick-picker>\\n            </div>\\n            </ng-template>\\n        </div>\\n        <div class=\\\"col\\\">\\n            <h4>TimeFrame Picker + Date picker with unlimited width in Popover</h4>\\n            <nui-popover trigger='click'\\n                            [template]=\\\"popoverTimeFramePickerUnlimited\\\"\\n                            [hasPadding]=\\\"false\\\"\\n                            [closePopover]=\\\"closePopoverSubject\\\"\\n                            [modal]=\\\"true\\\"\\n                            [unlimited]=\\\"true\\\"\\n                            id=\\\"nui-demo-visual-complex-popover\\\">\\n                        <span class=\\\"nui-text-link\\\" style=\\\"cursor: pointer;\\\">{{ acceptedTimeframe | timeFrame }}</span>\\n            </nui-popover>\\n\\n            <ng-template #popoverTimeFramePickerUnlimited>\\n                <div>\\n                    <nui-quick-picker [presets]=\\\"presets\\\"\\n                                      [selectedPreset]=\\\"acceptedTimeframe.selectedPresetId\\\"\\n                                      (presetSelected)=\\\"handlePresetSelection($event)\\\"\\n                                      pickerTitle=\\\"Custom Range\\\">\\n                        <nui-time-frame-picker [startModel]=\\\"acceptedTimeframe\\\"\\n                                                    (changed)=\\\"updateTf($event)\\\">\\n                        </nui-time-frame-picker>\\n                        <nui-date-picker [inline]=\\\"true\\\"\\n                                         [value]=\\\"selectedDate\\\"\\n                                         [preserveInsignificant]=\\\"false\\\"\\n                                         (valueChange)=\\\"dateChanged($event)\\\">\\n                        </nui-date-picker>\\n                    </nui-quick-picker>\\n                </div>\\n            </ng-template>\\n        </div>\\n    </div>\\n</div>\\n\";","export default \"<nui-time-frame-picker [startModel]=\\\"tf\\\"\\n                       (changed)=\\\"updateTf($event)\\\"\\n                       [maxDate]=\\\"maxDate\\\"\\n                       [minDate]=\\\"minDate\\\">\\n</nui-time-frame-picker>\\n\\n<span class=\\\"nui-text-secondary\\\">Selected timeframe is {{ tf | timeFrame }}</span>\\n\";","export default \"<nui-quick-picker [presets]=\\\"presets\\\"\\n                  [selectedPreset]=\\\"selectedPresetKey\\\"\\n                  (presetSelected)=\\\"handlePresetSelection($event)\\\"\\n                  pickerTitle=\\\"Custom percentiles\\\"\\n                  [presetKeysOrder]=\\\"presetKeysOrder\\\"\\n                  i18n-pickerTitle>\\n    <nui-textbox-number [maxValue]=\\\"100\\\"\\n                        (valueChange)=\\\"handleCustomSelection($event)\\\"\\n                        [value]=\\\"getTextboxValue()\\\">\\n    </nui-textbox-number>\\n</nui-quick-picker>\\n\\n<span class=\\\"nui-text-secondary\\\">Selected Quick Pick is {{selectedPresetKey||\\\"null\\\"}}, Selected Value is {{selectedValue}}</span>\\n\";","export default \"import { AfterViewInit, ChangeDetectorRef, Component, QueryList, ViewChildren } from \\\"@angular/core\\\";\\nimport { ITimeframe, ITimeFramePresetDictionary, TimeframeService } from \\\"@nova-ui/bits\\\";\\nimport { Subject } from \\\"rxjs\\\";\\n\\ninterface IPicker {\\n    id: string;\\n    presets: ITimeFramePresetDictionary;\\n    timeframeService?: TimeframeService;\\n    tf?: ITimeframe;\\n    acceptedTimeframe?: ITimeframe;\\n    selectedPresetKey: string;\\n}\\n\\n@Component({\\n    selector: \\\"nui-time-frame-picker-multiple-custom-pickers\\\",\\n    templateUrl: \\\"./time-frame-picker-multiple-custom-pickers.example.component.html\\\",\\n})\\nexport class TimeFramePickerMultipleCustomPickersExampleComponent implements AfterViewInit {\\n    @ViewChildren(\\\"scoper\\\")\\n    private tfScopers: QueryList<TimeframeServiceScoperExampleComponent>;\\n\\n    public pickers: IPicker[] = [\\n        {\\n            id: \\\"1\\\",\\n            presets: {\\n                \\\"last42Hours\\\": {\\n                    name: $localize `Last 42 hours`,\\n                    startDatetimePattern: {hours: -42},\\n                    endDatetimePattern: {},\\n                },\\n                \\\"last749Days\\\": {\\n                    name: $localize `Last 749 days`,\\n                    startDatetimePattern: {days: -749},\\n                    endDatetimePattern: {},\\n                },\\n            },\\n            selectedPresetKey: \\\"last749Days\\\",\\n        },\\n        {\\n            id: \\\"2\\\",\\n            presets: {\\n                \\\"last42Hours\\\": {\\n                    name: $localize `Last 42 hours`,\\n                    startDatetimePattern: {hours: -42},\\n                    endDatetimePattern: {},\\n                },\\n            },\\n            selectedPresetKey: \\\"last42Hours\\\",\\n        },\\n        {\\n            id: \\\"3\\\",\\n            presets: {\\n                \\\"lastYear\\\": {\\n                    name: $localize `Last year`,\\n                    startDatetimePattern: {year: -1},\\n                    endDatetimePattern: {},\\n                },\\n                \\\"last10Years\\\": {\\n                    name: $localize `Last 10 years`,\\n                    startDatetimePattern: {year: -10},\\n                    endDatetimePattern: {},\\n                },\\n            },\\n            selectedPresetKey: \\\"lastYear\\\",\\n        },\\n    ];\\n\\n\\n    public presets: ITimeFramePresetDictionary = {\\n        \\\"last42Hours\\\": {\\n            name: $localize `Last 42 hours`,\\n            startDatetimePattern: {hours: -42},\\n            endDatetimePattern: {},\\n        },\\n        \\\"last749Days\\\": {\\n            name: $localize `Last 749 days`,\\n            startDatetimePattern: {days: -749},\\n            endDatetimePattern: {},\\n        },\\n    };\\n\\n    public showFooter: boolean = false;\\n\\n    public closePopoverSubject = new Subject();\\n    public openPopoverSubject = new Subject();\\n\\n\\n    constructor(private cdRef: ChangeDetectorRef) {\\n    }\\n\\n    public updateTf(value: ITimeframe, index: number) {\\n        const picker = this.pickers[index];\\n        picker.tf = value;\\n\\n        const timeFrameDatesValid = () => picker.timeframeService?.areTimeFrameDatesValid(value);\\n        const timeFrameDatesEqual = () => picker.timeframeService?.isEqual(\\n            <ITimeframe>picker.tf,\\n            <ITimeframe>picker.acceptedTimeframe\\n        );\\n        if (timeFrameDatesValid() && !timeFrameDatesEqual()) { this.showFooter = true; }\\n\\n        picker.selectedPresetKey = <string>picker.tf.selectedPresetId;\\n    }\\n\\n    public ngAfterViewInit() {\\n        this.tfScopers.forEach((scoper, i) => {\\n            const picker = this.pickers[i];\\n            const timeframeService = scoper.timeframeService;\\n\\n            picker.timeframeService = timeframeService;\\n            timeframeService.currentPresets = picker.presets;\\n            picker.acceptedTimeframe = timeframeService.getTimeframeByPresetId(picker.selectedPresetKey);\\n            picker.tf = picker.acceptedTimeframe;\\n        });\\n        this.cdRef.detectChanges();\\n    }\\n\\n    public confirmPopover(index: number) {\\n        const picker = this.pickers[index];\\n\\n        this.showFooter = false;\\n        this.closePopoverSubject.next();\\n        picker.acceptedTimeframe = picker.tf;\\n    }\\n    public cancelPopover(index: number) {\\n        this.showFooter = false;\\n        this.closePopoverSubject.next();\\n    }\\n\\n    public handlePresetSelection(presetKey: string, index: number) {\\n        const picker = this.pickers[index];\\n\\n        picker.selectedPresetKey = presetKey;\\n        picker.tf = picker.timeframeService?.getTimeframeByPresetId(presetKey);\\n        picker.acceptedTimeframe = picker.tf;\\n        this.closePopoverSubject.next();\\n    }\\n}\\n\\n@Component({\\n    selector: \\\"nui-time-frame-service-scoper\\\",\\n    providers: [TimeframeService],\\n    template: `<ng-content></ng-content>`,\\n})\\nexport class TimeframeServiceScoperExampleComponent {\\n    constructor(public timeframeService: TimeframeService) { }\\n}\\n\";","export default \"import { Component } from \\\"@angular/core\\\";\\nimport { ITimeframe, ITimeFramePresetDictionary, TimeframeService } from \\\"@nova-ui/bits\\\";\\nimport { Subject } from \\\"rxjs\\\";\\n\\n@Component({\\n    selector: \\\"nui-time-frame-picker-custom\\\",\\n    templateUrl: \\\"./time-frame-picker-custom.example.component.html\\\",\\n    providers: [TimeframeService],\\n})\\n\\nexport class TimeFramePickerCustomExampleComponent {\\n    public presets: ITimeFramePresetDictionary = {\\n        \\\"last42Hours\\\": {\\n            name: $localize `Last 42 hours`,\\n            startDatetimePattern: {hours: -42},\\n            endDatetimePattern: {},\\n        },\\n        \\\"last749Days\\\": {\\n            name: $localize `Last 749 days`,\\n            startDatetimePattern: {days: -749},\\n            endDatetimePattern: {},\\n        },\\n    };\\n    public selectedPresetKey?: string = \\\"last42Hours\\\";\\n    public acceptedTimeframe: ITimeframe;\\n    public tf: ITimeframe;\\n\\n    public showFooter: boolean = false;\\n\\n    constructor(public timeframeService: TimeframeService) {\\n        this.timeframeService.currentPresets = this.presets;\\n        this.acceptedTimeframe = this.timeframeService.getTimeframeByPresetId(this.selectedPresetKey);\\n        this.tf = this.acceptedTimeframe;\\n    }\\n\\n    public closePopoverSubject = new Subject();\\n    public openPopoverSubject = new Subject();\\n\\n    public updateTf(value: ITimeframe) {\\n        this.tf = value;\\n        const timeFrameDatesValid = () => this.timeframeService.areTimeFrameDatesValid(value);\\n        const timeFrameDatesEqual = () => this.timeframeService.isEqual(this.tf, this.acceptedTimeframe);\\n        if (timeFrameDatesValid() && !timeFrameDatesEqual()) { this.showFooter = true; }\\n\\n        this.selectedPresetKey = this.tf.selectedPresetId;\\n    }\\n\\n    public confirmPopover() {\\n        this.showFooter = false;\\n        this.closePopoverSubject.next();\\n        this.acceptedTimeframe = this.tf;\\n    }\\n    public cancelPopover() {\\n        this.showFooter = false;\\n        this.closePopoverSubject.next();\\n    }\\n\\n    public handlePresetSelection(presetKey: string) {\\n        this.selectedPresetKey = presetKey;\\n        this.tf = this.timeframeService.getTimeframeByPresetId(presetKey);\\n        this.acceptedTimeframe = this.tf;\\n        this.closePopoverSubject.next();\\n    }\\n}\\n\";","import { Component } from \"@angular/core\";\nimport { ITimeframe, ITimeFramePresetDictionary, TimeframeService } from \"@nova-ui/bits\";\nimport moment from \"moment/moment\";\nimport { Subject } from \"rxjs\";\n\n@Component({\n    selector: \"nui-time-frame-picker-test\",\n    templateUrl: \"./time-frame-picker-test.example.component.html\",\n})\n\nexport class TimeFramePickerTestExampleComponent {\n    public presets: ITimeFramePresetDictionary;\n    public selectedPresetKey?: string = \"lastHour\";\n    public acceptedTimeframe: ITimeframe;\n    public tf: ITimeframe;\n\n    public minDate = moment(\"04/07/2018\", \"L\"); // \"L\" is \"MM/DD/YYY\" in moment.js\n    public maxDate = moment();\n\n    public showFooter: boolean = false;\n\n    constructor(public timeframeService: TimeframeService) {\n        this.presets = timeframeService.getDefaultPresets();\n        this.acceptedTimeframe = this.timeframeService.getTimeframeByPresetId(this.selectedPresetKey);\n        this.tf = this.acceptedTimeframe;\n    }\n\n    public closePopoverSubject = new Subject();\n    public openPopoverSubject = new Subject();\n\n    public updateTf(value: ITimeframe) {\n        this.tf = value;\n        const timeFrameDatesValid = () => this.timeframeService.areTimeFrameDatesValid(value);\n        const timeFrameDatesEqual = () => this.timeframeService.isEqual(this.tf, this.acceptedTimeframe);\n        if (timeFrameDatesValid() && !timeFrameDatesEqual()) { this.showFooter = true; }\n\n        this.selectedPresetKey = this.tf.selectedPresetId;\n    }\n\n    public confirmPopover() {\n        this.showFooter = false;\n        this.closePopoverSubject.next();\n        this.acceptedTimeframe = this.tf;\n    }\n    public cancelPopover() {\n        this.showFooter = false;\n        this.closePopoverSubject.next();\n    }\n\n    public handlePresetSelection(presetKey: string) {\n        this.selectedPresetKey = presetKey;\n        this.tf = this.timeframeService.getTimeframeByPresetId(presetKey);\n        this.acceptedTimeframe = this.tf;\n        this.closePopoverSubject.next();\n    }\n}\n","<nui-popover id=\"nui-demo-basic-time-frame-picker\"\n             trigger='click'\n             [template]=\"popoverTimeFramePicker\"\n             [hasPadding]=\"false\"\n             [closePopover]=\"closePopoverSubject\">\n    <span class=\"nui-text-link\" style=\"cursor: pointer;\">{{ acceptedTimeframe | timeFrame }}</span>\n</nui-popover>\n\n<div>{{ acceptedTimeframe | timeFrame:\"LL LTS\" }}</div>\n\n<ng-template #popoverTimeFramePicker>\n    <div>\n        <nui-quick-picker [presets]=\"presets\"\n                          [selectedPreset]=\"acceptedTimeframe.selectedPresetId\"\n                          (presetSelected)=\"handlePresetSelection($event)\"\n                          pickerTitle=\"Custom Range\"\n                          i18n-pickerTitle>\n            <nui-time-frame-picker [startModel]=\"acceptedTimeframe\"\n                                   (changed)=\"updateTf($event)\"\n                                   [maxDate]=\"maxDate\"\n                                   [minDate]=\"minDate\">\n            </nui-time-frame-picker>\n        </nui-quick-picker>\n    </div>\n    <nui-dialog-footer *ngIf=\"showFooter\">\n        <button nui-button\n                type=\"button\"\n                displayStyle=\"action\"\n                class=\"pr-3 nui-time-frame-picker__cancel\"\n                (click)=\"cancelPopover()\"\n                id=\"nui-demo-basic-time-frame-picker-cancel\"\n                i18n>\n            Cancel\n        </button>\n        <button nui-button\n                type=\"button\"\n                displayStyle=\"primary\"\n                class=\"nui-time-frame-picker__use\"\n                (click)=\"confirmPopover()\"\n                id=\"nui-demo-basic-time-frame-picker-use\"\n                i18n>\n            Use\n        </button>\n    </nui-dialog-footer>\n</ng-template>\n","import { NgModule } from \"@angular/core\";\nimport { FormsModule } from \"@angular/forms\";\nimport { RouterModule } from \"@angular/router\";\nimport {\n    DEMO_PATH_TOKEN,\n    NuiButtonModule,\n    NuiDatePickerModule,\n    NuiDialogModule,\n    NuiDividerModule,\n    NuiDocsModule,\n    NuiMessageModule,\n    NuiPopoverModule,\n    NuiTextboxModule,\n    NuiTimeFramePickerModule,\n    SrlcStage,\n} from \"@nova-ui/bits\";\n\nimport {\n    QuickPickerBasicExampleComponent,\n    TimeFramePickerBasicExampleComponent,\n    TimeFramePickerCustomExampleComponent,\n    TimeFramePickerDateExampleComponent,\n    TimeFramePickerDocsExampleComponent,\n    TimeFramePickerInlineExampleComponent,\n    TimeFramePickerMultipleCustomPickersExampleComponent,\n    TimeFramePickerTestExampleComponent,\n    TimeFramePickerVisualTestComponent,\n    TimeframeServiceScoperExampleComponent,\n} from \"./index\";\n\nconst routes = [\n    {\n        path: \"\",\n        component: TimeFramePickerDocsExampleComponent,\n        data: {\n            \"srlc\": {\n                \"stage\": SrlcStage.ga,\n            },\n            showThemeSwitcher: true,\n        },\n    },\n    {\n        path: \"time-frame-picker-test\",\n        component: TimeFramePickerTestExampleComponent,\n        data: {\n            \"srlc\": {\n                \"hideIndicator\": true,\n            },\n        },\n    },\n    {\n        path: \"time-frame-picker-visual-test\",\n        component: TimeFramePickerVisualTestComponent,\n        data: {\n            \"srlc\": {\n                \"hideIndicator\": true,\n            },\n        },\n    },\n    {\n        path: \"multiple-custom-pickers\",\n        component: TimeFramePickerMultipleCustomPickersExampleComponent,\n        data: {\n            \"srlc\": {\n                \"hideIndicator\": true,\n            },\n        },\n    },\n];\n\n@NgModule({\n    imports: [\n        NuiButtonModule,\n        NuiTimeFramePickerModule,\n        NuiDividerModule,\n        NuiMessageModule,\n        FormsModule,\n        NuiPopoverModule,\n        NuiDocsModule,\n        NuiTextboxModule,\n        RouterModule.forChild(routes),\n        NuiDialogModule,\n        NuiDatePickerModule,\n    ],\n    declarations: [\n        QuickPickerBasicExampleComponent,\n        TimeFramePickerBasicExampleComponent,\n        TimeFramePickerCustomExampleComponent,\n        TimeFramePickerDateExampleComponent,\n        TimeFramePickerInlineExampleComponent,\n        TimeFramePickerTestExampleComponent,\n        TimeFramePickerDocsExampleComponent,\n        TimeFramePickerVisualTestComponent,\n        TimeFramePickerMultipleCustomPickersExampleComponent,\n        TimeframeServiceScoperExampleComponent,\n    ],\n    providers: [\n        {\n            provide: DEMO_PATH_TOKEN,\n            useFactory: () => (<any>require).context(`!!raw-loader!./`, true, /.*\\.(ts|html|less)$/),\n        },\n    ],\n    exports: [\n        RouterModule,\n    ],\n})\nexport class TimeFramePickerModule {\n}\n"],"sourceRoot":"webpack:///"}