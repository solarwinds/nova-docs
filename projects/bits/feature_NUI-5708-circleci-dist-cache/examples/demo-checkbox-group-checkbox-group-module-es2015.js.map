{"version":3,"sources":["webpack:///./demo/src/components/demo/checkbox-group/checkbox-group-docs/checkbox-group-docs.example.component.ts?f947","webpack:///./node_modules/raw-loader/dist/cjs.js .*\\.(ts|html|less)$?33fc","./demo/src/components/demo/checkbox-group/checkbox-group-in-form/checkbox-group-in-form.example.component.ts","./demo/src/components/demo/checkbox-group/checkbox-group-in-form/checkbox-group-in-form.example.component.html","webpack:///./demo/src/components/demo/checkbox-group/checkbox-group-inline/checkbox-group-inline.example.component.ts?f19e","./demo/src/components/demo/checkbox-group/checkbox-group-test/checkbox-group-test.component.ts","./demo/src/components/demo/checkbox-group/checkbox-group-test/checkbox-group-test.component.html","webpack:///./demo/src/components/demo/checkbox-group/checkbox-group-visual-test/checkbox-group-visual-test.component.ts?1050","webpack:///./demo/src/components/demo/checkbox-group/checkbox-group-justified/checkbox-group-justified.example.component.ts?1225","webpack:///./demo/src/components/demo/checkbox-group/index.ts?1435","webpack:///./demo/src/components/demo/checkbox-group/checkbox-group-inline/checkbox-group-inline.example.component.html?16c6","./demo/src/components/demo/checkbox-group/checkbox-group-docs/checkbox-group-docs.example.component.ts","./demo/src/components/demo/checkbox-group/checkbox-group-docs/checkbox-group-docs.example.component.html","webpack:///./demo/src/components/demo/checkbox-group/checkbox-group-justified/checkbox-group-justified.example.component.html?2682","webpack:///./demo/src/components/demo/checkbox-group/checkbox-group.module.ts?2693","webpack:///./demo/src/components/demo/checkbox-group/checkbox-group-in-form/checkbox-group-in-form.example.component.html?36f3","webpack:///./demo/src/components/demo/checkbox-group/checkbox-group-test/checkbox-group-test.component.html?52df","webpack:///./demo/src/components/demo/checkbox-group/checkbox-group-in-form/checkbox-group-in-form.example.component.ts?63b6","webpack:///./demo/src/components/demo/checkbox-group/checkbox-group-basic/checkbox-group-basic.example.component.ts?67b8","./demo/src/components/demo/checkbox-group/checkbox-group.module.ts","webpack:///./demo/src/components/demo/checkbox-group/checkbox-group-basic/checkbox-group-basic.example.component.html?7662","webpack:///./demo/src/components/demo/checkbox-group/checkbox-group-test/checkbox-group-test.component.ts?7ee4","webpack:///./demo/src/components/demo/checkbox-group/checkbox-group-visual-test/checkbox-group-visual-test.component.html?8f7c","./demo/src/components/demo/checkbox-group/checkbox-group-visual-test/checkbox-group-visual-test.component.ts","./demo/src/components/demo/checkbox-group/checkbox-group-visual-test/checkbox-group-visual-test.component.html","webpack:///./demo/src/components/demo/checkbox-group/checkbox-group-docs/checkbox-group-docs.example.component.html?9464","./demo/src/components/demo/checkbox-group/index.ts","./demo/src/components/demo/checkbox-group/checkbox-group-basic/checkbox-group-basic.example.component.ts","./demo/src/components/demo/checkbox-group/checkbox-group-basic/checkbox-group-basic.example.component.html","./demo/src/components/demo/checkbox-group/checkbox-group-inline/checkbox-group-inline.example.component.html","./demo/src/components/demo/checkbox-group/checkbox-group-inline/checkbox-group-inline.example.component.ts","./demo/src/components/demo/checkbox-group/checkbox-group-justified/checkbox-group-justified.example.component.html","./demo/src/components/demo/checkbox-group/checkbox-group-justified/checkbox-group-justified.example.component.ts"],"names":[],"mappings":"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","file":"demo-checkbox-group-checkbox-group-module-es2015.js","sourcesContent":["export default \"import { Component } from \\\"@angular/core\\\";\\n\\n@Component({\\n    selector: \\\"nui-checkbox-group-docs-example\\\",\\n    templateUrl: \\\"./checkbox-group-docs.example.component.html\\\",\\n})\\nexport class CheckboxGroupExampleComponent {}\\n\";","var map = {\n\t\"./checkbox-group-basic/checkbox-group-basic.example.component.html\": \"dmI9\",\n\t\"./checkbox-group-basic/checkbox-group-basic.example.component.ts\": \"Z7g5\",\n\t\"./checkbox-group-docs/checkbox-group-docs.example.component.html\": \"lGTv\",\n\t\"./checkbox-group-docs/checkbox-group-docs.example.component.ts\": \"+Uf0\",\n\t\"./checkbox-group-in-form/checkbox-group-in-form.example.component.html\": \"NvPO\",\n\t\"./checkbox-group-in-form/checkbox-group-in-form.example.component.ts\": \"Y7Yd\",\n\t\"./checkbox-group-inline/checkbox-group-inline.example.component.html\": \"FsbB\",\n\t\"./checkbox-group-inline/checkbox-group-inline.example.component.ts\": \"8Z72\",\n\t\"./checkbox-group-justified/checkbox-group-justified.example.component.html\": \"JoKC\",\n\t\"./checkbox-group-justified/checkbox-group-justified.example.component.ts\": \"EiW/\",\n\t\"./checkbox-group-test/checkbox-group-test.component.html\": \"Ut/2\",\n\t\"./checkbox-group-test/checkbox-group-test.component.ts\": \"fuQ5\",\n\t\"./checkbox-group-visual-test/checkbox-group-visual-test.component.html\": \"j3x3\",\n\t\"./checkbox-group-visual-test/checkbox-group-visual-test.component.ts\": \"EFDT\",\n\t\"./checkbox-group.module.ts\": \"JpOM\",\n\t\"./index.ts\": \"FDVP\"\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = \"19SM\";","import { Component, OnInit } from \"@angular/core\";\nimport { FormBuilder, FormGroup, Validators } from \"@angular/forms\";\nimport { ToastService } from \"@nova-ui/bits\";\n\n@Component({\n    selector: \"nui-checkbox-group-in-form-example\",\n    templateUrl: \"./checkbox-group-in-form.example.component.html\",\n})\nexport class CheckboxGroupInFormExampleComponent implements OnInit {\n    public myForm: FormGroup;\n    public cabbage = $localize `Cabbage`;\n    public potato = $localize `Potato`;\n    public tomato = $localize `Tomato`;\n    public carrot = $localize `Carrot`;\n    public vegetables = [this.cabbage, this.potato, this.tomato, this.carrot];\n    public selectedVegetables = [this.cabbage];\n\n    constructor(private formBuilder: FormBuilder,\n                private toastService: ToastService) {}\n\n    public ngOnInit() {\n        this.myForm = this.formBuilder.group({\n            checkboxGroup: this.formBuilder.control([this.cabbage, this.potato], [\n                Validators.required, Validators.minLength(3)]),\n        });\n    }\n\n    public onSubmit() {\n        console.log(this.myForm);\n        this.toastService.success({message: $localize `Your form is valid!`});\n    }\n\n    public isChecked(vegetable: string): boolean {\n        return this.selectedVegetables.indexOf(vegetable) > -1;\n    }\n}\n","<form [formGroup]=\"myForm\" (submit)=\"onSubmit()\">\n    <div class=\"form-group\">\n        <nui-message [allowDismiss]=\"true\" type=\"critical\" *ngIf=\"!myForm.controls['checkboxGroup'].valid && myForm.controls['checkboxGroup'].touched\" >\n            <b i18n>Select minimum 3 checkboxes!</b>\n        </nui-message>\n        <nui-checkbox-group id=\"nui-demo-checkbox-group-in-form\"\n                            formControlName=\"checkboxGroup\"\n                            name=\"vegetable\" required>\n            <nui-checkbox *ngFor=\"let vegetable of vegetables\"\n                          [value]=\"vegetable\">\n                {{vegetable}}\n            </nui-checkbox>\n        </nui-checkbox-group>\n    </div>\n    <button nui-button type=\"submit\" [disabled]=\"myForm.disabled || myForm.controls['checkboxGroup'].invalid\" i18n>Submit</button>\n</form>\n","export default \"import { Component } from \\\"@angular/core\\\";\\n\\n@Component({\\n    selector: \\\"nui-checkbox-group-inline-example\\\",\\n    templateUrl: \\\"./checkbox-group-inline.example.component.html\\\",\\n})\\nexport class CheckboxGroupInlineExampleComponent {\\n    public cabbage = $localize `Cabbage`;\\n    public potato = $localize `Potato`;\\n    public tomato = $localize `Tomato`;\\n    public carrot = $localize `Carrot`;\\n    public vegetables = [this.cabbage, this.potato, this.tomato, this.carrot];\\n    public selectedVegetables = [this.potato, this.tomato];\\n\\n    constructor() {}\\n}\\n\";","import { Component, OnInit } from \"@angular/core\";\nimport { FormBuilder, FormGroup } from \"@angular/forms\";\n\n@Component({\n    selector: \"nui-checkbox-group-test-example\",\n    templateUrl: \"checkbox-group-test.component.html\",\n})\n\nexport class CheckboxGroupTestComponent implements OnInit {\n    public testForm: FormGroup;\n    public cabbage = \"Cabbage\";\n    public potato = \"Potato\";\n    public tomato = \"Tomato\";\n    public carrot = \"Carrot\";\n    public disabledOne = \"DISABLED\";\n    public vegetables = [this.cabbage, this.potato, this.tomato, this.carrot];\n    public hints = [this.cabbage, this.tomato];\n    public selectedVegetables = [this.potato, this.tomato, this.disabledOne];\n\n    constructor(private formBuilder: FormBuilder) {}\n\n    ngOnInit() {\n        this.testForm = this.formBuilder.group({\n            checkboxGroup: this.formBuilder.control({\n                value: this.selectedVegetables, disabled: true,\n            }),\n            checkboxGroup2: this.formBuilder.control({\n                value: this.selectedVegetables, disabled: false,\n            }),\n        });\n    }\n\n    public isChecked(vegetable: string): boolean {\n        return this.selectedVegetables.indexOf(vegetable) > -1;\n    }\n}\n","<div class=\"container d-flex\">\n    <div class=\"d-flex flex-column mr-5\">\n        <nui-checkbox-group id=\"nui-demo-checkbox-group-basic\"\n                            name=\"vegetable\"\n                            [values]=\"selectedVegetables\">\n            <nui-checkbox *ngFor=\"let vegetable of vegetables\"\n                          [value]=\"vegetable\"\n                          hint=\"This is some help text\"\n                          [checked]=\"isChecked(vegetable)\">\n                {{vegetable}}\n            </nui-checkbox>\n            <nui-checkbox hint=\"If it's not disabled ring the alarm!\"\n                          id=\"nui-demo-checkbox-group-1-disabled-checkbox\"\n                          [value]=\"disabledOne\"\n                          [checked]=\"!isChecked(disabledOne)\"\n                          disabled=\"true\">{{disabledOne}}</nui-checkbox>\n        </nui-checkbox-group>\n    </div>\n    <div class=\"d-flex flex-column mt-5\">\n        <nui-checkbox-group id=\"nui-demo-checkbox-group-justified\"\n                        name=\"vegetable\"\n                        [values]=\"selectedVegetables\">\n            <nui-checkbox *ngFor=\"let vegetable of vegetables\"\n                        [value]=\"vegetable\"\n                        [hint]=\"(hints.indexOf(vegetable) >=0) ? hints[hints.indexOf(vegetable)] : null\"\n                        [checked]=\"isChecked(vegetable)\"\n                        class=\"nui-checkbox--justified\">\n                {{vegetable}}\n            </nui-checkbox>\n        </nui-checkbox-group>\n    </div>\n    <div class=\"d-flex flex-column mt-5\">\n        <form [formGroup]=\"testForm\">\n            <nui-checkbox-group id=\"nui-demo-checkbox-group-in-form\"\n                            name=\"vegetable\"\n                            formControlName=\"checkboxGroup\">\n                <nui-checkbox *ngFor=\"let vegetable of vegetables\"\n                            [value]=\"vegetable\"\n                            [checked]=\"isChecked(vegetable)\">\n                    {{vegetable}}\n                </nui-checkbox>\n            </nui-checkbox-group>\n        </form>\n    </div>\n    <div class=\"d-flex flex-column mt-5\">\n        <form [formGroup]=\"testForm\">\n            <nui-checkbox-group id=\"nui-demo-checkbox-group-in-form-disabled-checkboxes\"\n                            name=\"vegetable\"\n                            formControlName=\"checkboxGroup2\">\n                <nui-checkbox [value]=\"vegetables[0]\"\n                                [disabled]=\"true\"\n                                [checked]=\"isChecked(vegetables[0])\">\n                    {{vegetables[0]}}</nui-checkbox>\n                <nui-checkbox [value]=\"vegetables[1]\"\n                                [disabled]=\"false\"\n                                [checked]=\"isChecked(vegetables[1])\">\n                    {{vegetables[1]}}</nui-checkbox>\n                <nui-checkbox [value]=\"vegetables[2]\"\n                                [disabled]=\"true\"\n                                [checked]=\"isChecked(vegetables[2])\">\n                    {{vegetables[2]}}</nui-checkbox>\n                <nui-checkbox [value]=\"vegetables[3]\"\n                                [disabled]=\"false\"\n                                [checked]=\"isChecked(vegetables[3])\">\n                    {{vegetables[3]}}</nui-checkbox>\n            </nui-checkbox-group>\n        </form>\n    </div>\n</div>\n","export default \"import { Component, OnInit } from \\\"@angular/core\\\";\\nimport { FormBuilder, FormGroup } from \\\"@angular/forms\\\";\\n\\n@Component({\\n    selector: \\\"nui-checkbox-group-visual-test\\\",\\n    templateUrl: \\\"./checkbox-group-visual-test.component.html\\\",\\n})\\nexport class CheckboxGroupVisualTestComponent implements OnInit {\\n    public testForm: FormGroup;\\n    public cabbage = \\\"Cabbage\\\";\\n    public potato = \\\"Potato\\\";\\n    public tomato = \\\"Tomato\\\";\\n    public carrot = \\\"Carrot\\\";\\n    public disabledOne = \\\"DISABLED\\\";\\n    public vegetables = [this.cabbage, this.potato, this.tomato, this.carrot];\\n    public selectedVegetables = [this.potato, this.tomato, this.disabledOne];\\n\\n    constructor(private formBuilder: FormBuilder) {}\\n\\n    ngOnInit() {\\n        this.testForm = this.formBuilder.group({\\n            checkboxGroup: this.formBuilder.control({\\n                value: this.selectedVegetables, disabled: true,\\n            }),\\n            checkboxGroup2: this.formBuilder.control({\\n                value: this.selectedVegetables, disabled: false,\\n            }),\\n        });\\n    }\\n\\n    public isChecked(vegetable: string): boolean {\\n        return this.selectedVegetables.indexOf(vegetable) > -1;\\n    }\\n}\\n\";","export default \"import { Component } from \\\"@angular/core\\\";\\n\\n@Component({\\n    selector: \\\"nui-checkbox-group-justified-example\\\",\\n    templateUrl: \\\"./checkbox-group-justified.example.component.html\\\",\\n})\\nexport class CheckboxGroupJustifiedExampleComponent {\\n    public cabbage = $localize `Cabbage`;\\n    public potato = $localize `Potato`;\\n    public tomato = $localize `Tomato`;\\n    public carrot = $localize `Carrot`;\\n    public vegetables = [this.cabbage, this.potato, this.tomato, this.carrot];\\n    public hints = [this.cabbage, this.tomato];\\n    public selectedVegetables = [this.potato, this.tomato];\\n\\n    constructor() { }\\n\\n    public isChecked(vegetable: string): boolean {\\n        return this.selectedVegetables.indexOf(vegetable) > -1;\\n    }\\n}\\n\";","export default \"export * from \\\"./checkbox-group-docs/checkbox-group-docs.example.component\\\";\\nexport * from \\\"./checkbox-group-inline/checkbox-group-inline.example.component\\\";\\nexport * from \\\"./checkbox-group-basic/checkbox-group-basic.example.component\\\";\\nexport * from \\\"./checkbox-group-in-form/checkbox-group-in-form.example.component\\\";\\nexport * from \\\"./checkbox-group-visual-test/checkbox-group-visual-test.component\\\";\\nexport * from \\\"./checkbox-group-justified/checkbox-group-justified.example.component\\\";\\nexport * from \\\"./checkbox-group-test/checkbox-group-test.component\\\";\\n\";","export default \"<nui-checkbox-group id=\\\"nui-demo-checkbox-group-inline\\\"\\n                    class=\\\"nui-checkbox-group-inline\\\"\\n                    [values]=\\\"selectedVegetables\\\"\\n                    name=\\\"vegetable\\\">\\n    <nui-checkbox *ngFor=\\\"let vegetable of vegetables\\\"\\n                  [value]=\\\"vegetable\\\">\\n        {{vegetable}}\\n    </nui-checkbox>\\n</nui-checkbox-group>\\n\";","import { Component } from \"@angular/core\";\n\n@Component({\n    selector: \"nui-checkbox-group-docs-example\",\n    templateUrl: \"./checkbox-group-docs.example.component.html\",\n})\nexport class CheckboxGroupExampleComponent {}\n","<h2>Required Modules</h2>\n<ul>\n    <li>\n        <code>NuiCheckboxModule</code>\n    </li>\n</ul>\n\n<h2>Basic Usage</h2>\n<p>\n    The <code>&lt;nui-checkbox-group&gt;</code> component is used for combining <code>&lt;nui-checkbox&gt;</code> components into a\n    group. Use the <code>name</code> input to set the \"name\" attribute for the inner <code>&lt;nui-checkbox&gt;</code> input elements. To get the\n    values of the <code>&lt;nui-checkbox&gt;</code> child components use the <code>values</code> input which is an array of checked state values.\n    To act on checkbox value changes, bind to the <code>(valuesChange)</code> output.\n</p>\n<nui-example-wrapper filenamePrefix=\"checkbox-group-basic\" exampleTitle=\"Basic Usage\">\n    <nui-checkbox-group-basic-example></nui-checkbox-group-basic-example>\n</nui-example-wrapper>\n\n<h2>Inline</h2>\n<p>\n    Use the <code>nui-checkbox-group-inline</code> class to display checkbox group inline.\n</p>\n<nui-example-wrapper filenamePrefix=\"checkbox-group-inline\" exampleTitle=\"Inline\">\n    <nui-checkbox-group-inline-example></nui-checkbox-group-inline-example>\n</nui-example-wrapper>\n\n<h2>Part of Form</h2>\n<p>\n    <code>&lt;nui-checkbox-group&gt;</code> can be used in reactive forms.\n</p>\n<nui-example-wrapper filenamePrefix=\"checkbox-group-in-form\" exampleTitle=\"Part of Form\">\n    <nui-checkbox-group-in-form-example></nui-checkbox-group-in-form-example>\n</nui-example-wrapper>\n\n<h2>Justified</h2>\n<p>\n    To justify <code>&lt;nui-checkbox&gt;</code> to the width of <code>&lt;nui-checkbox-group&gt;</code> (or simply parent element,\n    in case <code>&lt;nui-checkbox&gt;</code> is used not as a part of <code>&lt;nui-checkbox-group&gt;</code>), add\n    <code>nui-checkbox--justified</code> class to the <code>&lt;nui-checkbox&gt;</code>.\n</p>\n<nui-example-wrapper filenamePrefix=\"checkbox-group-justified\" exampleTitle=\"Justified\">\n    <nui-checkbox-group-justified-example></nui-checkbox-group-justified-example>\n</nui-example-wrapper>\n","export default \"<nui-checkbox-group id=\\\"nui-demo-checkbox-group-justified\\\"\\n                    name=\\\"vegetable\\\"\\n                    [values]=\\\"selectedVegetables\\\">\\n    <nui-checkbox *ngFor=\\\"let vegetable of vegetables\\\"\\n                  [value]=\\\"vegetable\\\"\\n                  i18n-hint\\n                  [hint]=\\\"(hints.indexOf(vegetable) >=0) ? hints[hints.indexOf(vegetable)] : null\\\"\\n                  [checked]=\\\"isChecked(vegetable)\\\"\\n                  class=\\\"nui-checkbox--justified\\\">\\n        {{vegetable}}\\n    </nui-checkbox>\\n</nui-checkbox-group>\\n\";","export default \"import { NgModule } from \\\"@angular/core\\\";\\nimport { FormsModule, ReactiveFormsModule } from \\\"@angular/forms\\\";\\nimport { RouterModule } from \\\"@angular/router\\\";\\nimport { DEMO_PATH_TOKEN, NuiButtonModule, NuiCheckboxModule, NuiDocsModule, SrlcStage } from \\\"@nova-ui/bits\\\";\\n\\nimport { CheckboxGroupTestComponent } from \\\"./checkbox-group-test/checkbox-group-test.component\\\";\\nimport {\\n    CheckboxGroupBasicExampleComponent,\\n    CheckboxGroupExampleComponent,\\n    CheckboxGroupInFormExampleComponent,\\n    CheckboxGroupInlineExampleComponent,\\n    CheckboxGroupJustifiedExampleComponent,\\n    CheckboxGroupVisualTestComponent,\\n} from \\\"./index\\\";\\n\\nconst routes = [\\n    {\\n        path: \\\"\\\",\\n        component: CheckboxGroupExampleComponent,\\n        data: {\\n            \\\"srlc\\\": {\\n                \\\"stage\\\": SrlcStage.ga,\\n            },\\n            showThemeSwitcher: true,\\n        },\\n    },\\n    {\\n        path: \\\"checkbox-group-visual-test\\\",\\n        component: CheckboxGroupVisualTestComponent,\\n        data: {\\n            \\\"srlc\\\": {\\n                \\\"hideIndicator\\\": true,\\n            },\\n        },\\n    },\\n    {\\n        path: \\\"checkbox-group-test\\\",\\n        component: CheckboxGroupTestComponent,\\n        data: {\\n            \\\"srlc\\\": {\\n                \\\"hideIndicator\\\": true,\\n            },\\n        },\\n    },\\n];\\n\\n@NgModule({\\n    imports: [\\n        NuiCheckboxModule,\\n        NuiDocsModule,\\n        FormsModule,\\n        ReactiveFormsModule,\\n        NuiButtonModule,\\n        RouterModule.forChild(routes),\\n    ],\\n    declarations: [\\n        CheckboxGroupExampleComponent,\\n        CheckboxGroupInlineExampleComponent,\\n        CheckboxGroupInFormExampleComponent,\\n        CheckboxGroupBasicExampleComponent,\\n        CheckboxGroupVisualTestComponent,\\n        CheckboxGroupJustifiedExampleComponent,\\n        CheckboxGroupTestComponent,\\n    ],\\n    providers: [\\n        {\\n            provide: DEMO_PATH_TOKEN,\\n            useFactory: () => (<any>require).context(`!!raw-loader!./`, true, /.*\\\\.(ts|html|less)$/),\\n        },\\n    ],\\n    exports: [\\n        RouterModule,\\n    ],\\n})\\nexport class CheckboxGroupModule {\\n}\\n\";","export default \"<form [formGroup]=\\\"myForm\\\" (submit)=\\\"onSubmit()\\\">\\n    <div class=\\\"form-group\\\">\\n        <nui-message [allowDismiss]=\\\"true\\\" type=\\\"critical\\\" *ngIf=\\\"!myForm.controls['checkboxGroup'].valid && myForm.controls['checkboxGroup'].touched\\\" >\\n            <b i18n>Select minimum 3 checkboxes!</b>\\n        </nui-message>\\n        <nui-checkbox-group id=\\\"nui-demo-checkbox-group-in-form\\\"\\n                            formControlName=\\\"checkboxGroup\\\"\\n                            name=\\\"vegetable\\\" required>\\n            <nui-checkbox *ngFor=\\\"let vegetable of vegetables\\\"\\n                          [value]=\\\"vegetable\\\">\\n                {{vegetable}}\\n            </nui-checkbox>\\n        </nui-checkbox-group>\\n    </div>\\n    <button nui-button type=\\\"submit\\\" [disabled]=\\\"myForm.disabled || myForm.controls['checkboxGroup'].invalid\\\" i18n>Submit</button>\\n</form>\\n\";","export default \"<div class=\\\"container d-flex\\\">\\n    <div class=\\\"d-flex flex-column mr-5\\\">\\n        <nui-checkbox-group id=\\\"nui-demo-checkbox-group-basic\\\"\\n                            name=\\\"vegetable\\\"\\n                            [values]=\\\"selectedVegetables\\\">\\n            <nui-checkbox *ngFor=\\\"let vegetable of vegetables\\\"\\n                          [value]=\\\"vegetable\\\"\\n                          hint=\\\"This is some help text\\\"\\n                          [checked]=\\\"isChecked(vegetable)\\\">\\n                {{vegetable}}\\n            </nui-checkbox>\\n            <nui-checkbox hint=\\\"If it's not disabled ring the alarm!\\\"\\n                          id=\\\"nui-demo-checkbox-group-1-disabled-checkbox\\\"\\n                          [value]=\\\"disabledOne\\\"\\n                          [checked]=\\\"!isChecked(disabledOne)\\\"\\n                          disabled=\\\"true\\\">{{disabledOne}}</nui-checkbox>\\n        </nui-checkbox-group>\\n    </div>\\n    <div class=\\\"d-flex flex-column mt-5\\\">\\n        <nui-checkbox-group id=\\\"nui-demo-checkbox-group-justified\\\"\\n                        name=\\\"vegetable\\\"\\n                        [values]=\\\"selectedVegetables\\\">\\n            <nui-checkbox *ngFor=\\\"let vegetable of vegetables\\\"\\n                        [value]=\\\"vegetable\\\"\\n                        [hint]=\\\"(hints.indexOf(vegetable) >=0) ? hints[hints.indexOf(vegetable)] : null\\\"\\n                        [checked]=\\\"isChecked(vegetable)\\\"\\n                        class=\\\"nui-checkbox--justified\\\">\\n                {{vegetable}}\\n            </nui-checkbox>\\n        </nui-checkbox-group>\\n    </div>\\n    <div class=\\\"d-flex flex-column mt-5\\\">\\n        <form [formGroup]=\\\"testForm\\\">\\n            <nui-checkbox-group id=\\\"nui-demo-checkbox-group-in-form\\\"\\n                            name=\\\"vegetable\\\"\\n                            formControlName=\\\"checkboxGroup\\\">\\n                <nui-checkbox *ngFor=\\\"let vegetable of vegetables\\\"\\n                            [value]=\\\"vegetable\\\"\\n                            [checked]=\\\"isChecked(vegetable)\\\">\\n                    {{vegetable}}\\n                </nui-checkbox>\\n            </nui-checkbox-group>\\n        </form>\\n    </div>\\n    <div class=\\\"d-flex flex-column mt-5\\\">\\n        <form [formGroup]=\\\"testForm\\\">\\n            <nui-checkbox-group id=\\\"nui-demo-checkbox-group-in-form-disabled-checkboxes\\\"\\n                            name=\\\"vegetable\\\"\\n                            formControlName=\\\"checkboxGroup2\\\">\\n                <nui-checkbox [value]=\\\"vegetables[0]\\\"\\n                                [disabled]=\\\"true\\\"\\n                                [checked]=\\\"isChecked(vegetables[0])\\\">\\n                    {{vegetables[0]}}</nui-checkbox>\\n                <nui-checkbox [value]=\\\"vegetables[1]\\\"\\n                                [disabled]=\\\"false\\\"\\n                                [checked]=\\\"isChecked(vegetables[1])\\\">\\n                    {{vegetables[1]}}</nui-checkbox>\\n                <nui-checkbox [value]=\\\"vegetables[2]\\\"\\n                                [disabled]=\\\"true\\\"\\n                                [checked]=\\\"isChecked(vegetables[2])\\\">\\n                    {{vegetables[2]}}</nui-checkbox>\\n                <nui-checkbox [value]=\\\"vegetables[3]\\\"\\n                                [disabled]=\\\"false\\\"\\n                                [checked]=\\\"isChecked(vegetables[3])\\\">\\n                    {{vegetables[3]}}</nui-checkbox>\\n            </nui-checkbox-group>\\n        </form>\\n    </div>\\n</div>\\n\";","export default \"import { Component, OnInit } from \\\"@angular/core\\\";\\nimport { FormBuilder, FormGroup, Validators } from \\\"@angular/forms\\\";\\nimport { ToastService } from \\\"@nova-ui/bits\\\";\\n\\n@Component({\\n    selector: \\\"nui-checkbox-group-in-form-example\\\",\\n    templateUrl: \\\"./checkbox-group-in-form.example.component.html\\\",\\n})\\nexport class CheckboxGroupInFormExampleComponent implements OnInit {\\n    public myForm: FormGroup;\\n    public cabbage = $localize `Cabbage`;\\n    public potato = $localize `Potato`;\\n    public tomato = $localize `Tomato`;\\n    public carrot = $localize `Carrot`;\\n    public vegetables = [this.cabbage, this.potato, this.tomato, this.carrot];\\n    public selectedVegetables = [this.cabbage];\\n\\n    constructor(private formBuilder: FormBuilder,\\n                private toastService: ToastService) {}\\n\\n    public ngOnInit() {\\n        this.myForm = this.formBuilder.group({\\n            checkboxGroup: this.formBuilder.control([this.cabbage, this.potato], [\\n                Validators.required, Validators.minLength(3)]),\\n        });\\n    }\\n\\n    public onSubmit() {\\n        console.log(this.myForm);\\n        this.toastService.success({message: $localize `Your form is valid!`});\\n    }\\n\\n    public isChecked(vegetable: string): boolean {\\n        return this.selectedVegetables.indexOf(vegetable) > -1;\\n    }\\n}\\n\";","export default \"import { Component } from \\\"@angular/core\\\";\\nimport { ToastService } from \\\"@nova-ui/bits\\\";\\n\\n@Component({\\n    selector: \\\"nui-checkbox-group-basic-example\\\",\\n    templateUrl: \\\"./checkbox-group-basic.example.component.html\\\",\\n})\\nexport class CheckboxGroupBasicExampleComponent {\\n    public cabbage = $localize `Cabbage`;\\n    public potato = $localize `Potato`;\\n    public tomato = $localize `Tomato`;\\n    public carrot = $localize `Carrot`;\\n    public vegetables = [this.cabbage, this.potato, this.tomato, this.carrot];\\n    public selectedVegetables = [this.potato, this.tomato];\\n\\n    constructor(private toastService: ToastService) {}\\n\\n    public isChecked(vegetable: string): boolean {\\n        return this.selectedVegetables.indexOf(vegetable) > -1;\\n    }\\n\\n    public onValueChange (event: any) {\\n        this.toastService.success({message: $localize `Selected checkboxes: ` + event});\\n    }\\n\\n}\\n\";","import { NgModule } from \"@angular/core\";\nimport { FormsModule, ReactiveFormsModule } from \"@angular/forms\";\nimport { RouterModule } from \"@angular/router\";\nimport { DEMO_PATH_TOKEN, NuiButtonModule, NuiCheckboxModule, NuiDocsModule, SrlcStage } from \"@nova-ui/bits\";\n\nimport { CheckboxGroupTestComponent } from \"./checkbox-group-test/checkbox-group-test.component\";\nimport {\n    CheckboxGroupBasicExampleComponent,\n    CheckboxGroupExampleComponent,\n    CheckboxGroupInFormExampleComponent,\n    CheckboxGroupInlineExampleComponent,\n    CheckboxGroupJustifiedExampleComponent,\n    CheckboxGroupVisualTestComponent,\n} from \"./index\";\n\nconst routes = [\n    {\n        path: \"\",\n        component: CheckboxGroupExampleComponent,\n        data: {\n            \"srlc\": {\n                \"stage\": SrlcStage.ga,\n            },\n            showThemeSwitcher: true,\n        },\n    },\n    {\n        path: \"checkbox-group-visual-test\",\n        component: CheckboxGroupVisualTestComponent,\n        data: {\n            \"srlc\": {\n                \"hideIndicator\": true,\n            },\n        },\n    },\n    {\n        path: \"checkbox-group-test\",\n        component: CheckboxGroupTestComponent,\n        data: {\n            \"srlc\": {\n                \"hideIndicator\": true,\n            },\n        },\n    },\n];\n\n@NgModule({\n    imports: [\n        NuiCheckboxModule,\n        NuiDocsModule,\n        FormsModule,\n        ReactiveFormsModule,\n        NuiButtonModule,\n        RouterModule.forChild(routes),\n    ],\n    declarations: [\n        CheckboxGroupExampleComponent,\n        CheckboxGroupInlineExampleComponent,\n        CheckboxGroupInFormExampleComponent,\n        CheckboxGroupBasicExampleComponent,\n        CheckboxGroupVisualTestComponent,\n        CheckboxGroupJustifiedExampleComponent,\n        CheckboxGroupTestComponent,\n    ],\n    providers: [\n        {\n            provide: DEMO_PATH_TOKEN,\n            useFactory: () => (<any>require).context(`!!raw-loader!./`, true, /.*\\.(ts|html|less)$/),\n        },\n    ],\n    exports: [\n        RouterModule,\n    ],\n})\nexport class CheckboxGroupModule {\n}\n","export default \"<nui-checkbox-group id=\\\"nui-demo-checkbox-group-basic\\\"\\n                    name=\\\"vegetable\\\"\\n                    [values]=\\\"selectedVegetables\\\"\\n                    (valuesChange)=\\\"onValueChange($event)\\\">\\n    <nui-checkbox *ngFor=\\\"let vegetable of vegetables\\\"\\n                  [value]=\\\"vegetable\\\"\\n                  i18n-hint\\n                  hint=\\\"This is some help text\\\"\\n                  [checked]=\\\"isChecked(vegetable)\\\">\\n        {{vegetable}}\\n    </nui-checkbox>\\n</nui-checkbox-group>\\n\";","export default \"import { Component, OnInit } from \\\"@angular/core\\\";\\nimport { FormBuilder, FormGroup } from \\\"@angular/forms\\\";\\n\\n@Component({\\n    selector: \\\"nui-checkbox-group-test-example\\\",\\n    templateUrl: \\\"checkbox-group-test.component.html\\\",\\n})\\n\\nexport class CheckboxGroupTestComponent implements OnInit {\\n    public testForm: FormGroup;\\n    public cabbage = \\\"Cabbage\\\";\\n    public potato = \\\"Potato\\\";\\n    public tomato = \\\"Tomato\\\";\\n    public carrot = \\\"Carrot\\\";\\n    public disabledOne = \\\"DISABLED\\\";\\n    public vegetables = [this.cabbage, this.potato, this.tomato, this.carrot];\\n    public hints = [this.cabbage, this.tomato];\\n    public selectedVegetables = [this.potato, this.tomato, this.disabledOne];\\n\\n    constructor(private formBuilder: FormBuilder) {}\\n\\n    ngOnInit() {\\n        this.testForm = this.formBuilder.group({\\n            checkboxGroup: this.formBuilder.control({\\n                value: this.selectedVegetables, disabled: true,\\n            }),\\n            checkboxGroup2: this.formBuilder.control({\\n                value: this.selectedVegetables, disabled: false,\\n            }),\\n        });\\n    }\\n\\n    public isChecked(vegetable: string): boolean {\\n        return this.selectedVegetables.indexOf(vegetable) > -1;\\n    }\\n}\\n\";","export default \"<div class=\\\"container\\\">\\n    <div class=\\\"row\\\">\\n        <div class=\\\"col\\\">\\n            <h3>Basic Checkbox-Group with Hint Text</h3>\\n            <nui-checkbox-group id=\\\"nui-demo-checkbox-group-basic\\\"\\n                                name=\\\"vegetable\\\"\\n                                [values]=\\\"selectedVegetables\\\">\\n                <nui-checkbox *ngFor=\\\"let vegetable of vegetables\\\"\\n                              [value]=\\\"vegetable\\\"\\n                              hint=\\\"This is some help text\\\"\\n                              [checked]=\\\"isChecked(vegetable)\\\">\\n                    {{vegetable}}\\n                </nui-checkbox>\\n                <nui-checkbox hint=\\\"If it's not disabled ring the alarm!\\\"\\n                                id=\\\"nui-demo-checkbox-group-1-disabled-checkbox\\\"\\n                                [value]=\\\"disabledOne\\\"\\n                                [checked]=\\\"!isChecked(disabledOne)\\\"\\n                                disabled=\\\"true\\\">{{disabledOne}}</nui-checkbox>\\n            </nui-checkbox-group>\\n            <hr />\\n        </div>\\n        <div class=\\\"col\\\">\\n            <h3>Inline Checkbox-Group</h3>\\n            <nui-checkbox-group id=\\\"nui-demo-checkbox-group-inline\\\"\\n                                class=\\\"nui-checkbox-group-inline\\\"\\n                                [values]=\\\"selectedVegetables\\\"\\n                                name=\\\"vegetable\\\">\\n                <nui-checkbox *ngFor=\\\"let vegetable of vegetables\\\"\\n                              [value]=\\\"vegetable\\\">\\n                    {{vegetable}}\\n                </nui-checkbox>\\n            </nui-checkbox-group>\\n            <hr />\\n        </div>\\n        <div class=\\\"w-100\\\"></div>\\n        <div class=\\\"col\\\">\\n            <h3>Justified Checkbox-Group</h3>\\n            <nui-checkbox-group id=\\\"nui-demo-checkbox-group-justified\\\"\\n                                name=\\\"vegetable\\\"\\n                                [values]=\\\"selectedVegetables\\\">\\n                <nui-checkbox *ngFor=\\\"let vegetable of vegetables\\\"\\n                              [value]=\\\"vegetable\\\"\\n                              [checked]=\\\"isChecked(vegetable)\\\"\\n                              class=\\\"nui-checkbox--justified\\\">\\n                    {{vegetable}}\\n                </nui-checkbox>\\n            </nui-checkbox-group>\\n            <hr />\\n        </div>\\n        <div class=\\\"col\\\">\\n            <h3>Disabled checkboxes within the form</h3>\\n            <form [formGroup]=\\\"testForm\\\">\\n                <nui-checkbox-group id=\\\"nui-demo-checkbox-group-in-form-disabled-checkboxes\\\"\\n                                name=\\\"vegetable\\\"\\n                                formControlName=\\\"checkboxGroup2\\\">\\n                    <nui-checkbox [value]=\\\"vegetables[0]\\\"\\n                                    [disabled]=\\\"true\\\"\\n                                    [checked]=\\\"isChecked(vegetables[0])\\\">\\n                        {{vegetables[0]}}</nui-checkbox>\\n                    <nui-checkbox [value]=\\\"vegetables[1]\\\"\\n                                    [disabled]=\\\"false\\\"\\n                                    [checked]=\\\"isChecked(vegetables[1])\\\">\\n                        {{vegetables[1]}}</nui-checkbox>\\n                    <nui-checkbox [value]=\\\"vegetables[2]\\\"\\n                                    [disabled]=\\\"true\\\"\\n                                    [checked]=\\\"isChecked(vegetables[2])\\\">\\n                        {{vegetables[2]}}</nui-checkbox>\\n                    <nui-checkbox [value]=\\\"vegetables[3]\\\"\\n                                    [disabled]=\\\"false\\\"\\n                                    [checked]=\\\"isChecked(vegetables[3])\\\">\\n                        {{vegetables[3]}}</nui-checkbox>\\n                </nui-checkbox-group>\\n            </form>\\n        </div>\\n    </div>\\n</div>\\n\";","import { Component, OnInit } from \"@angular/core\";\nimport { FormBuilder, FormGroup } from \"@angular/forms\";\n\n@Component({\n    selector: \"nui-checkbox-group-visual-test\",\n    templateUrl: \"./checkbox-group-visual-test.component.html\",\n})\nexport class CheckboxGroupVisualTestComponent implements OnInit {\n    public testForm: FormGroup;\n    public cabbage = \"Cabbage\";\n    public potato = \"Potato\";\n    public tomato = \"Tomato\";\n    public carrot = \"Carrot\";\n    public disabledOne = \"DISABLED\";\n    public vegetables = [this.cabbage, this.potato, this.tomato, this.carrot];\n    public selectedVegetables = [this.potato, this.tomato, this.disabledOne];\n\n    constructor(private formBuilder: FormBuilder) {}\n\n    ngOnInit() {\n        this.testForm = this.formBuilder.group({\n            checkboxGroup: this.formBuilder.control({\n                value: this.selectedVegetables, disabled: true,\n            }),\n            checkboxGroup2: this.formBuilder.control({\n                value: this.selectedVegetables, disabled: false,\n            }),\n        });\n    }\n\n    public isChecked(vegetable: string): boolean {\n        return this.selectedVegetables.indexOf(vegetable) > -1;\n    }\n}\n","<div class=\"container\">\n    <div class=\"row\">\n        <div class=\"col\">\n            <h3>Basic Checkbox-Group with Hint Text</h3>\n            <nui-checkbox-group id=\"nui-demo-checkbox-group-basic\"\n                                name=\"vegetable\"\n                                [values]=\"selectedVegetables\">\n                <nui-checkbox *ngFor=\"let vegetable of vegetables\"\n                              [value]=\"vegetable\"\n                              hint=\"This is some help text\"\n                              [checked]=\"isChecked(vegetable)\">\n                    {{vegetable}}\n                </nui-checkbox>\n                <nui-checkbox hint=\"If it's not disabled ring the alarm!\"\n                                id=\"nui-demo-checkbox-group-1-disabled-checkbox\"\n                                [value]=\"disabledOne\"\n                                [checked]=\"!isChecked(disabledOne)\"\n                                disabled=\"true\">{{disabledOne}}</nui-checkbox>\n            </nui-checkbox-group>\n            <hr />\n        </div>\n        <div class=\"col\">\n            <h3>Inline Checkbox-Group</h3>\n            <nui-checkbox-group id=\"nui-demo-checkbox-group-inline\"\n                                class=\"nui-checkbox-group-inline\"\n                                [values]=\"selectedVegetables\"\n                                name=\"vegetable\">\n                <nui-checkbox *ngFor=\"let vegetable of vegetables\"\n                              [value]=\"vegetable\">\n                    {{vegetable}}\n                </nui-checkbox>\n            </nui-checkbox-group>\n            <hr />\n        </div>\n        <div class=\"w-100\"></div>\n        <div class=\"col\">\n            <h3>Justified Checkbox-Group</h3>\n            <nui-checkbox-group id=\"nui-demo-checkbox-group-justified\"\n                                name=\"vegetable\"\n                                [values]=\"selectedVegetables\">\n                <nui-checkbox *ngFor=\"let vegetable of vegetables\"\n                              [value]=\"vegetable\"\n                              [checked]=\"isChecked(vegetable)\"\n                              class=\"nui-checkbox--justified\">\n                    {{vegetable}}\n                </nui-checkbox>\n            </nui-checkbox-group>\n            <hr />\n        </div>\n        <div class=\"col\">\n            <h3>Disabled checkboxes within the form</h3>\n            <form [formGroup]=\"testForm\">\n                <nui-checkbox-group id=\"nui-demo-checkbox-group-in-form-disabled-checkboxes\"\n                                name=\"vegetable\"\n                                formControlName=\"checkboxGroup2\">\n                    <nui-checkbox [value]=\"vegetables[0]\"\n                                    [disabled]=\"true\"\n                                    [checked]=\"isChecked(vegetables[0])\">\n                        {{vegetables[0]}}</nui-checkbox>\n                    <nui-checkbox [value]=\"vegetables[1]\"\n                                    [disabled]=\"false\"\n                                    [checked]=\"isChecked(vegetables[1])\">\n                        {{vegetables[1]}}</nui-checkbox>\n                    <nui-checkbox [value]=\"vegetables[2]\"\n                                    [disabled]=\"true\"\n                                    [checked]=\"isChecked(vegetables[2])\">\n                        {{vegetables[2]}}</nui-checkbox>\n                    <nui-checkbox [value]=\"vegetables[3]\"\n                                    [disabled]=\"false\"\n                                    [checked]=\"isChecked(vegetables[3])\">\n                        {{vegetables[3]}}</nui-checkbox>\n                </nui-checkbox-group>\n            </form>\n        </div>\n    </div>\n</div>\n","export default \"<h2>Required Modules</h2>\\n<ul>\\n    <li>\\n        <code>NuiCheckboxModule</code>\\n    </li>\\n</ul>\\n\\n<h2>Basic Usage</h2>\\n<p>\\n    The <code>&lt;nui-checkbox-group&gt;</code> component is used for combining <code>&lt;nui-checkbox&gt;</code> components into a\\n    group. Use the <code>name</code> input to set the \\\"name\\\" attribute for the inner <code>&lt;nui-checkbox&gt;</code> input elements. To get the\\n    values of the <code>&lt;nui-checkbox&gt;</code> child components use the <code>values</code> input which is an array of checked state values.\\n    To act on checkbox value changes, bind to the <code>(valuesChange)</code> output.\\n</p>\\n<nui-example-wrapper filenamePrefix=\\\"checkbox-group-basic\\\" exampleTitle=\\\"Basic Usage\\\">\\n    <nui-checkbox-group-basic-example></nui-checkbox-group-basic-example>\\n</nui-example-wrapper>\\n\\n<h2>Inline</h2>\\n<p>\\n    Use the <code>nui-checkbox-group-inline</code> class to display checkbox group inline.\\n</p>\\n<nui-example-wrapper filenamePrefix=\\\"checkbox-group-inline\\\" exampleTitle=\\\"Inline\\\">\\n    <nui-checkbox-group-inline-example></nui-checkbox-group-inline-example>\\n</nui-example-wrapper>\\n\\n<h2>Part of Form</h2>\\n<p>\\n    <code>&lt;nui-checkbox-group&gt;</code> can be used in reactive forms.\\n</p>\\n<nui-example-wrapper filenamePrefix=\\\"checkbox-group-in-form\\\" exampleTitle=\\\"Part of Form\\\">\\n    <nui-checkbox-group-in-form-example></nui-checkbox-group-in-form-example>\\n</nui-example-wrapper>\\n\\n<h2>Justified</h2>\\n<p>\\n    To justify <code>&lt;nui-checkbox&gt;</code> to the width of <code>&lt;nui-checkbox-group&gt;</code> (or simply parent element,\\n    in case <code>&lt;nui-checkbox&gt;</code> is used not as a part of <code>&lt;nui-checkbox-group&gt;</code>), add\\n    <code>nui-checkbox--justified</code> class to the <code>&lt;nui-checkbox&gt;</code>.\\n</p>\\n<nui-example-wrapper filenamePrefix=\\\"checkbox-group-justified\\\" exampleTitle=\\\"Justified\\\">\\n    <nui-checkbox-group-justified-example></nui-checkbox-group-justified-example>\\n</nui-example-wrapper>\\n\";","export * from \"./checkbox-group-docs/checkbox-group-docs.example.component\";\nexport * from \"./checkbox-group-inline/checkbox-group-inline.example.component\";\nexport * from \"./checkbox-group-basic/checkbox-group-basic.example.component\";\nexport * from \"./checkbox-group-in-form/checkbox-group-in-form.example.component\";\nexport * from \"./checkbox-group-visual-test/checkbox-group-visual-test.component\";\nexport * from \"./checkbox-group-justified/checkbox-group-justified.example.component\";\nexport * from \"./checkbox-group-test/checkbox-group-test.component\";\n","import { Component } from \"@angular/core\";\nimport { ToastService } from \"@nova-ui/bits\";\n\n@Component({\n    selector: \"nui-checkbox-group-basic-example\",\n    templateUrl: \"./checkbox-group-basic.example.component.html\",\n})\nexport class CheckboxGroupBasicExampleComponent {\n    public cabbage = $localize `Cabbage`;\n    public potato = $localize `Potato`;\n    public tomato = $localize `Tomato`;\n    public carrot = $localize `Carrot`;\n    public vegetables = [this.cabbage, this.potato, this.tomato, this.carrot];\n    public selectedVegetables = [this.potato, this.tomato];\n\n    constructor(private toastService: ToastService) {}\n\n    public isChecked(vegetable: string): boolean {\n        return this.selectedVegetables.indexOf(vegetable) > -1;\n    }\n\n    public onValueChange (event: any) {\n        this.toastService.success({message: $localize `Selected checkboxes: ` + event});\n    }\n\n}\n","<nui-checkbox-group id=\"nui-demo-checkbox-group-basic\"\n                    name=\"vegetable\"\n                    [values]=\"selectedVegetables\"\n                    (valuesChange)=\"onValueChange($event)\">\n    <nui-checkbox *ngFor=\"let vegetable of vegetables\"\n                  [value]=\"vegetable\"\n                  i18n-hint\n                  hint=\"This is some help text\"\n                  [checked]=\"isChecked(vegetable)\">\n        {{vegetable}}\n    </nui-checkbox>\n</nui-checkbox-group>\n","<nui-checkbox-group id=\"nui-demo-checkbox-group-inline\"\n                    class=\"nui-checkbox-group-inline\"\n                    [values]=\"selectedVegetables\"\n                    name=\"vegetable\">\n    <nui-checkbox *ngFor=\"let vegetable of vegetables\"\n                  [value]=\"vegetable\">\n        {{vegetable}}\n    </nui-checkbox>\n</nui-checkbox-group>\n","import { Component } from \"@angular/core\";\n\n@Component({\n    selector: \"nui-checkbox-group-inline-example\",\n    templateUrl: \"./checkbox-group-inline.example.component.html\",\n})\nexport class CheckboxGroupInlineExampleComponent {\n    public cabbage = $localize `Cabbage`;\n    public potato = $localize `Potato`;\n    public tomato = $localize `Tomato`;\n    public carrot = $localize `Carrot`;\n    public vegetables = [this.cabbage, this.potato, this.tomato, this.carrot];\n    public selectedVegetables = [this.potato, this.tomato];\n\n    constructor() {}\n}\n","<nui-checkbox-group id=\"nui-demo-checkbox-group-justified\"\n                    name=\"vegetable\"\n                    [values]=\"selectedVegetables\">\n    <nui-checkbox *ngFor=\"let vegetable of vegetables\"\n                  [value]=\"vegetable\"\n                  i18n-hint\n                  [hint]=\"(hints.indexOf(vegetable) >=0) ? hints[hints.indexOf(vegetable)] : null\"\n                  [checked]=\"isChecked(vegetable)\"\n                  class=\"nui-checkbox--justified\">\n        {{vegetable}}\n    </nui-checkbox>\n</nui-checkbox-group>\n","import { Component } from \"@angular/core\";\n\n@Component({\n    selector: \"nui-checkbox-group-justified-example\",\n    templateUrl: \"./checkbox-group-justified.example.component.html\",\n})\nexport class CheckboxGroupJustifiedExampleComponent {\n    public cabbage = $localize `Cabbage`;\n    public potato = $localize `Potato`;\n    public tomato = $localize `Tomato`;\n    public carrot = $localize `Carrot`;\n    public vegetables = [this.cabbage, this.potato, this.tomato, this.carrot];\n    public hints = [this.cabbage, this.tomato];\n    public selectedVegetables = [this.potato, this.tomato];\n\n    constructor() { }\n\n    public isChecked(vegetable: string): boolean {\n        return this.selectedVegetables.indexOf(vegetable) > -1;\n    }\n}\n"],"sourceRoot":"webpack:///"}