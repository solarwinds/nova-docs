import{a as u}from"./chunk-JK3ZZ6IM.js";import{a as S}from"./chunk-QINHWLMV.js";import{a as E}from"./chunk-TRAB42JL.js";import{a as D}from"./chunk-FX42IRBV.js";import{a as x}from"./chunk-BAVR6N6M.js";import{a as g}from"./chunk-NDLD2H6R.js";import{a as h}from"./chunk-S7DLOPUS.js";import{a as s}from"./chunk-LE7PH44S.js";import{c as p,g as c}from"./chunk-BCBJTPRO.js";import{Qb as d,Wb as t,Xb as i,Yb as n,nb as a,yc as e,zb as m}from"./chunk-MC3BMXIX.js";var L=(()=>{class l{constructor(){this.initialSetupCode=`
// our module where we want to use drag-and-drop features
import { DragDropModule } from "@angular/cdk/drag-drop";

@NgModule({
    imports: [
        DragDropModule,
        // other modules that we might need
    ],
    declarations: [ /* our module declaration */],
    exports:      [ /* our exports */ ],
})
export class MyModule {}`.replace(`\r
`,"<br/>"),this.hideHandleWhileDragging=`
.dnd-drag-preview .drag-handle {
    display: none;
}
    `}static{this.\u0275fac=function(r){return new(r||l)}}static{this.\u0275cmp=m({type:l,selectors:[["nui-dnd-docs"]],standalone:!1,decls:205,vars:7,consts:[["language","typescript",3,"code"],["href","https://material.angular.io/cdk/drag-drop/overview","target","_blank"],["type","info",3,"allowDismiss"],["filenamePrefix","dnd-basic","exampleTitle","Drag & Drop"],["filenamePrefix","dnd-axis-constraints","exampleTitle","Drag Axis Constraints"],["filenamePrefix","dnd-drag-disabled","exampleTitle","Disabled draggable items"],["type","warning",3,"allowDismiss"],["filenamePrefix","dnd-drag-preview","exampleTitle","Custom Drag Preview"],["filenamePrefix","dnd-custom-handle","exampleTitle","Custom Drag Handle"],["language","css",3,"code"],["filenamePrefix","dnd-drag-placeholder","exampleTitle","Custom Placeholder"],["href","../directives/DndDropTargetDirective.html","target","_parent"],["filenamePrefix","dnd-dropzone","exampleTitle","Dropzones"]],template:function(r,o){r&1&&(t(0,"p"),e(1,` The Angular CDK drag and drop module provides a way to easily and declaratively create drag and drop interfaces.
`),i(),t(2,"p"),e(3," To get started, import "),t(4,"code"),e(5,"DragDropModule"),i(),e(6," into the "),t(7,"code"),e(8,"NgModule"),i(),e(9,` where you want to use drag-and-drop features:
`),i(),n(10,"nui-example-code",0),t(11,"p"),e(12," For more details on the implementation of the @angular/cdk/drag-drop, check the documentation "),t(13,"a",1),e(14,"here"),i()(),t(15,"h2"),e(16,"Required Modules"),i(),t(17,"ul")(18,"li")(19,"code"),e(20,"NuiDndModule"),i()(),t(21,"li"),e(22,"Angular CDK's "),t(23,"code"),e(24,"DragDropModule"),i()()(),t(25,"h2"),e(26,"Basic Usage"),i(),t(27,"p"),e(28," This example shows how easy it is to create a draggable element by adding the "),t(29,"code"),e(30,"cdkDrag"),i(),e(31," directive on the DOM element we want to become draggable. Since it can be dragged without any handle, hovering the element will alter its state to both "),t(32,"code"),e(33,"nui-dnd-raised-state"),i(),e(34," and "),t(35,"code"),e(36,"nui-dnd-hover-state"),i(),e(37,`.
`),i(),t(38,"nui-message",2)(39,"p"),e(40," In case you want to customize the styles for your draggable elements, it may be helpful to know that all "),t(41,"code"),e(42,"cdkDrag"),i(),e(43," DOM elements have the "),t(44,"code"),e(45,".cdk-drag"),i(),e(46," CSS class applied to them. "),i()(),t(47,"nui-example-wrapper",3),n(48,"dnd-basic"),i(),t(49,"h2"),e(50,"Drag Axis Constraints"),i(),t(51,"p"),e(52," By default, "),t(53,"code"),e(54,"cdkDrag"),i(),e(55," allows free movement in all directions. To restrict dragging to a specific axis, you can set the "),t(56,"code"),e(57,"cdkDragLockAxis"),i(),e(58," input on "),t(59,"code"),e(60,"cdkDrag"),i(),e(61," or the "),t(62,"code"),e(63,"cdkDropListLockAxis"),i(),e(64," input on "),t(65,"code"),e(66,"cdkDropList"),i(),e(67,` to either "x" or "y".
`),i(),t(68,"nui-example-wrapper",4),n(69,"dnd-axis-constraints"),i(),t(70,"h2"),e(71,"Disabled draggable items"),i(),t(72,"p"),e(73," A collection of "),t(74,"code"),e(75,"cdkDrag"),i(),e(76," elements are usually placed inside a "),t(77,"code"),e(78,"cdkDropList"),i(),e(79,`.
`),i(),t(80,"p"),e(81," To prevent an item from being dragged set the "),t(82,"code"),e(83,"cdkDragDisabled"),i(),e(84," input on the "),t(85,"code"),e(86,"cdkDrag"),i(),e(87,` element to true:
`),i(),t(88,"nui-message",2)(89,"p"),e(90," Disabled draggable DOM elements have the "),t(91,"code"),e(92,".cdk-drag-disabled"),i(),e(93," CSS class appended to them. "),i(),t(94,"p"),e(95," See the styles customization applied to the disabled draggable items in the LESS source code tab in the source expander below for inspiration. "),i()(),t(96,"nui-example-wrapper",5),n(97,"dnd-drag-disabled"),i(),t(98,"h2"),e(99,"Custom Drag Preview"),i(),t(100,"p"),e(101," It is possible to display custom preview content instead of cloning the original element by specifying the "),t(102,"code"),e(103,"cdkDragPreview"),i(),e(104,` directive.
`),i(),t(105,"p"),e(106," The directive must be specified for each "),t(107,"code"),e(108,"cdkDrag"),i(),e(109,` element that we want to have preview content.
`),i(),t(110,"nui-message",6)(111,"p")(112,"strong"),e(113,"Important:"),i(),e(114," In order for the "),t(115,"code"),e(116,"cdkDragPreview"),i(),e(117," directive to work, it must be wrapped inside a DOM element with the "),t(118,"code"),e(119,"cdkDropList"),i(),e(120," directive specified. "),i(),e(121,` Take a look at the source of the following example to see how.
`),i(),t(122,"nui-example-wrapper",7),n(123,"dnd-drag-preview"),i(),t(124,"h2"),e(125,"Custom Drag Handle"),i(),t(126,"p"),e(127," The handle by which an element can be dragged can be customized by specifying the directive "),t(128,"code"),e(129,"cdkDragHandle"),i(),e(130,` on the element we want to become the handle.
`),i(),t(131,"nui-example-wrapper",8),n(132,"dnd-custom-handle"),i(),t(133,"p"),e(134," In the example above the handle is still displayed while dragging an element; to hide the handle we just need to apply the properer styling on the cloned preview element as shown below: "),n(135,"nui-example-code",9),i(),t(136,"h2"),e(137,"Custom Placeholder"),i(),t(138,"p"),e(139," While a "),t(140,"code"),e(141,"cdkDrag"),i(),e(142,` element is being dragged, the Angular CDK will create a placeholder element that will show the user where the dragged element will be placed when it's dropped.
`),i(),t(143,"p"),e(144," By default the placeholder is a clone of the element that is being dragged, however you can replace it with a custom one using the "),t(145,"code"),e(146,"*cdkDragPlaceholder"),i(),e(147,` directive.
`),i(),t(148,"nui-example-wrapper",10),n(149,"dnd-drag-placeholder"),i(),t(150,"h2"),e(151,"Dropzones Visualization"),i(),t(152,"p"),e(153," A drag container is a collection of "),t(154,"code"),e(155,"cdkDrag"),i(),e(156," elements within a "),t(157,"code"),e(158,"cdkDropList"),i(),e(159,". Decorating a drag container with the "),t(160,"code")(161,"a",11),e(162,"nuiDndDropTarget"),i()(),e(163,` directive defines a dropzone.
`),i(),t(164,"nui-message",6),e(165," In order use multiple drag containers, both sources and destinations must be wrapped within a "),t(166,"code"),e(167,"cdkDropListGroup"),i(),e(168,` directive.
`),i(),t(169,"p"),e(170," Once the user starts dragging an item from the source, the destination is highlighted as an available destination dropzone; the "),t(171,"code"),e(172,"nui-dnd-dropzone--active"),i(),e(173," CSS class is added to the dropzone once dragging starts. The destination uses the "),t(174,"code"),e(175,"nuiDndDropTarget"),i(),e(176," directive helper in order to inform the user visually whether a dropzone will accept or reject a dragged item. In the following example, all items are accepted except for "),t(177,"em"),e(178,"IBM"),i(),e(179,`;
`),i(),t(180,"nui-message",2),e(181," The following CSS classes are added to the dropzone once the conditions are met as described below: "),t(182,"ul")(183,"li"),e(184,"- "),t(185,"code"),e(186,"nui-dnd-dropzone--active"),i(),e(187," - once dragging starts"),i(),t(188,"li"),e(189," - "),t(190,"code"),e(191,"nui-dnd-dropzone--drop-allowed"),i(),e(192," - once the user is over the dropzone and the dragged item is accepted "),i(),t(193,"li"),e(194," - "),t(195,"code"),e(196,"nui-dnd-dropzone--drop-not-allowed"),i(),e(197," - once the user is over the dropzone and the dragged item is NOT accepted "),i()()(),t(198,"p"),e(199," To define acceptance conditions for a dropzone, the user can provide a callback method to the "),t(200,"code"),e(201,"canBeDropped"),i(),e(202,` input.
`),i(),t(203,"nui-example-wrapper",12),n(204,"dnd-dropzone"),i()),r&2&&(a(10),d("code",o.initialSetupCode),a(28),d("allowDismiss",!1),a(50),d("allowDismiss",!1),a(22),d("allowDismiss",!1),a(25),d("code",o.hideHandleWhileDragging),a(29),d("allowDismiss",!1),a(16),d("allowDismiss",!1))},dependencies:[c,p,s,g,h,u,S,E,D,x],encapsulation:2})}}return l})();export{L as a};
