{"version":3,"sources":["webpack:///demo/src/components/demo/radio-group/radio-group.module.ts","webpack:///demo/src/components/demo/radio-group/disabled-radio-group/disabled-radio-group.example.component.html?f923","webpack:///demo/src/components/demo/radio-group/radio-group.module.ts?d317","webpack:///demo/src/components/demo/radio-group/disabled-radio-group/disabled-radio-group.example.component.html","webpack:///demo/src/components/demo/radio-group/disabled-radio-group/disabled-radio-group.example.component.ts","webpack:///demo/src/components/demo/radio-group/radio-group-visual-test/radio-group-visual-test.component.ts","webpack:///demo/src/components/demo/radio-group/radio-group-visual-test/radio-group-visual-test.component.html","webpack:///node_modules/raw-loader/dist/cjs.js .*\\.(ts|html|less)$?c614","webpack:///demo/src/components/demo/radio-group/radio-group-inline/radio-group-inline.example.component.html?ef7b","webpack:///demo/src/components/demo/radio-group/radio-group-test/radio-group-test.component.ts?f1db","webpack:///demo/src/components/demo/radio-group/radio-group-in-form/radio-group-in-form.example.component.ts","webpack:///demo/src/components/demo/radio-group/radio-group-in-form/radio-group-in-form.example.component.html","webpack:///demo/src/components/demo/radio-group/radio-group-in-form/radio-group-in-form.example.component.html?f615","webpack:///demo/src/components/demo/radio-group/radio-group-visual-test/radio-group-visual-test.component.html?0568","webpack:///demo/src/components/demo/radio-group/radio-group-docs/radio-group-docs.example.component.ts?0fdc","webpack:///demo/src/components/demo/radio-group/radio-group-with-hints/radio-group-hints.example.component.ts?17c0","webpack:///demo/src/components/demo/radio-group/value-change-radio-group/value-change-radio-group.example.component.ts?1866","webpack:///demo/src/components/demo/radio-group/basic-radio-group/basic-radio-group.example.component.html","webpack:///demo/src/components/demo/radio-group/basic-radio-group/basic-radio-group.example.component.ts","webpack:///demo/src/components/demo/radio-group/radio-group-with-hints/radio-group-hints.example.component.html?3b8d","webpack:///demo/src/components/demo/radio-group/index.ts","webpack:///demo/src/components/demo/radio-group/basic-radio-group/basic-radio-group.example.component.ts?3df2","webpack:///demo/src/components/demo/radio-group/radio-group-docs/radio-group-docs.example.component.html?3e8b","webpack:///demo/src/components/demo/radio-group/radio-group-inline/radio-group-inline.example.component.ts?443f","webpack:///demo/src/components/demo/radio-group/radio-group-with-hints/radio-group-hints.example.component.html","webpack:///demo/src/components/demo/radio-group/radio-group-with-hints/radio-group-hints.example.component.ts","webpack:///demo/src/components/demo/radio-group/basic-radio-group/basic-radio-group.example.component.html?4e3a","webpack:///demo/src/components/demo/radio-group/radio-group-docs/radio-group-docs.example.component.ts","webpack:///demo/src/components/demo/radio-group/radio-group-docs/radio-group-docs.example.component.html","webpack:///demo/src/components/demo/radio-group/radio-group-test/radio-group-test.component.ts","webpack:///demo/src/components/demo/radio-group/radio-group-test/radio-group-test.component.html","webpack:///demo/src/components/demo/radio-group/radio-group-test/radio-group-test.component.html?7bc3","webpack:///demo/src/components/demo/radio-group/value-change-radio-group/value-change-radio-group.example.component.html?8164","webpack:///demo/src/components/demo/radio-group/value-change-radio-group/value-change-radio-group.example.component.ts","webpack:///demo/src/components/demo/radio-group/value-change-radio-group/value-change-radio-group.example.component.html","webpack:///demo/src/components/demo/radio-group/radio-group-inline/radio-group-inline.example.component.html","webpack:///demo/src/components/demo/radio-group/radio-group-inline/radio-group-inline.example.component.ts","webpack:///demo/src/components/demo/radio-group/radio-group-in-form/radio-group-in-form.example.component.ts?96ac","webpack:///demo/src/components/demo/radio-group/disabled-radio-group/disabled-radio-group.example.component.ts?ab96","webpack:///demo/src/components/demo/radio-group/index.ts?b276","webpack:///demo/src/components/demo/radio-group/radio-group-visual-test/radio-group-visual-test.component.ts?cd0f"],"names":["routes","path","component","data","ga","showThemeSwitcher","RadioGroupModule","provide","useFactory","forChild","DisabledRadioGroupExampleComponent","fruits","$localize","RadioGroupVisualTestComponent","formBuilder","colors","colorHints","disabledForm","group","radioGroup","control","value","disabled","map","webpackContext","req","id","webpackContextResolve","__webpack_require__","o","e","Error","code","keys","webpackContextKeys","Object","resolve","module","exports","RadioGroupInFormExampleComponent","vegetables","fancyForm","required","BasicRadioGroupExampleComponent","RadioGroupHintsExampleComponent","RadioGroupDocsExampleComponent","RadioGroupTestComponent","event","get","target","checked","toggleDisabled","ValueChangeRadioGroupExampleComponent","toastService","success","message","selectedColor","showSelected","RadioGroupInlineExampleComponent"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AACA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;AAwBA,UAAMA,MAAM,GAAG,CACX;AACIC,YAAI,EAAE,EADV;AAEIC,iBAAS,EAAE,qEAFf;AAGIC,YAAI,EAAE;AACF,kBAAQ;AACJ,qBAAS,wDAAUC;AADf,WADN;AAIFC,2BAAiB,EAAE;AAJjB;AAHV,OADW,EAWX;AACIJ,YAAI,EAAE,kBADV;AAEIC,iBAAS,EAAE;AAFf,OAXW,EAeX;AACID,YAAI,EAAE,yBADV;AAEIC,iBAAS,EAAE,oEAFf;AAGIC,YAAI,EAAE;AACF,kBAAQ;AACJ,6BAAiB;AADb;AADN;AAHV,OAfW,CAAf;;UA0DaG,gB;;;;;cAAAA;;;;2BAAAA,gB;AAAgB,S;AAAA,mBAVd,CACP;AACIC,iBAAO,EAAE,6DADb;AAEIC,oBAAU,EAAE;AAAA,mBAAY,2BAAZ;AAAA;AAFhB,SADO,C;AAKV,kBA1BQ,CACL,4DADK,EAEL,+DAFK,EAGL,gEAHK,EAIL,kEAJK,EAKL,0DALK,EAML,wEANK,EAOL,2DAPK,EAQL,6DAAaC,QAAb,CAAsBT,MAAtB,CARK,CA0BR,EAEG,4DAFH;;;;4HAKQM,gB,EAAgB;AAAA,yBApBrB,sEAoBqB,EAnBrB,yEAmBqB,EAlBrB,qEAkBqB,EAjBrB,sEAiBqB,EAhBrB,uEAgBqB,EAfrB,uEAeqB,EAdrB,8DAcqB,EAbrB,oEAaqB,EAZrB,4EAYqB;AAZgB,oBAlBrC,4DAkBqC,EAjBrC,+DAiBqC,EAhBrC,gEAgBqC,EAfrC,kEAeqC,EAdrC,0DAcqC,EAbrC,wEAaqC,EAZrC,2DAYqC,EAZxB,4DAYwB,CAYhB;AAxBR,oBAqBb,4DArBa;AAwBQ,S;AAHT,O;;;;;;;;;;;;;;;;;AChFpB;AAAe;;;AAAA;;;;;;;;;;;;;;;;ACAf;AAAe;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACIX;;AAII;;AACJ;;;;;;AAJW,sFAAe,SAAf,EAAe,qBAAf,EAAe,UAAf,EAAe,qBAAf;;AAGP;;AAAA;;;;UCDKI,kC,GAIT,8CAAc;AAAA;;AAHP,aAAAC,MAAA,GAAS,CAACC,SAAD,6EAAqBA,SAArB,+EAAyCA,SAAzC,6EAA2DA,SAA3D,8EAAT;AAGU,O;;;yBAJRF,kC;AAAkC,O;;;cAAlCA,kC;AAAkC,yD;AAAA,gB;AAAA,e;AAAA;AAAA;;AAAA;;;;;WAAA,M;qBDPtC,S,oLAAgB,e;;;;;;;AAAzB;;AAAA;;AAA0C;;AAC1C;;AAEiB;AAAA;AAAA;;AACb;;AAMJ;;;;AAV0C;;AAAA;;AAAA;;AAGzB;;AAAA;;AACgB;;AAAA;;;;;;;;;;;;;;;;;;;;;AEHjC;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;;ACIQ;;AAII;;AACJ;;;;;;AAJY,sFAAe,SAAf,EAAe,qBAAf,EAAe,UAAf,EAAe,mBAAf;;AAGR;;AAAA;;;;;;AASJ;;AAKI;;AACJ;;;;;;;;AALY,sFAAe,MAAf,EAAe,2BAAf,EAAe,UAAf,EAAe,mBAAf,EAAe,SAAf,EAAe,oBAAf;;AAIR;;AAAA;;;;;;AAUJ;;AAKI;;AACJ;;;;;;;;AALY,sFAAe,MAAf,EAAe,2BAAf,EAAe,UAAf,EAAe,kBAAf,EAAe,SAAf,EAAe,oBAAf;;AAIR;;AAAA;;;;;;AAUI;;AAEI;;AACJ;;;;;;AAFY;;AACR;;AAAA;;;;UD3CPG,6B;AAQT,+CAAoBC,WAApB,EAA8C;AAAA;;AAA1B,eAAAA,WAAA,GAAAA,WAAA;AANb,eAAAC,MAAA,GAAS,CAAC,KAAD,EAAQ,OAAR,EAAiB,MAAjB,CAAT;AACA,eAAAC,UAAA,GAAa;AAAE,mBAAO,WAAT;AAAsB,qBAAS,iBAA/B;AAAkD,oBAAQ;AAA1D,WAAb;AACA,eAAAL,MAAA,GAAS,CAAC,QAAD,EAAW,QAAX,EAAqB,MAArB,EAA6B,QAA7B,CAAT;AAIyC;;;;iBAEzC,oBAAW;AACd,iBAAKM,YAAL,GAAoB,KAAKH,WAAL,CAAiBI,KAAjB,CAAuB;AACvCC,wBAAU,EAAE,KAAKL,WAAL,CAAiBM,OAAjB,CAAyB;AAACC,qBAAK,EAAE,EAAR;AAAYC,wBAAQ,EAAE;AAAtB,eAAzB;AAD2B,aAAvB,CAApB;AAGH;;;;;;;yBAdQT,6B,EAA6B,2H;AAAA,O;;;cAA7BA,6B;AAA6B,oD;AAAA,iB;AAAA,e;AAAA,otB;AAAA;AAAA;ACP1C;;AACI;;AAAI;;AAAiB;;AACrB;;AAEgB;AAAA;AAAA;;AACZ;;AAMJ;;AACA;;AAEA;;AAAI;;AAA8C;;AAClD;;AAEgB;AAAA;AAAA;;AACZ;;AAOJ;;AACA;;AAEA;;AAAI;;AAAuB;;AAC3B;;AAGgB;AAAA;AAAA;;AACZ;;AAOJ;;AACA;;AACA;;AACI;;AAEI;;AAGI;;AAIJ;;AACJ;;AACJ;;AACJ;;;;AAnDoB;;AAAA;;AACiB;;AAAA;;AAYjB;;AAAA;;AACiB;;AAAA;;AAcjB;;AAAA;;AACiB;;AAAA;;AAS3B;;AAAA;;AAEc;;AAAA;;AAIqB;;AAAA;;;;;;;;;;;;;;;;;;;AChD7C,UAAIU,GAAG,GAAG;AACT,wEAAgE,MADvD;AAET,sEAA8D,MAFrD;AAGT,8EAAsE,MAH7D;AAIT,4EAAoE,MAJ3D;AAKT,sBAAc,MALL;AAMT,sEAA8D,MANrD;AAOT,oEAA4D,MAPnD;AAQT,4EAAoE,MAR3D;AAST,0EAAkE,MATzD;AAUT,0EAAkE,MAVzD;AAWT,wEAAgE,MAXvD;AAYT,8DAAsD,MAZ7C;AAaT,4DAAoD,MAb3C;AAcT,4EAAoE,MAd3D;AAeT,0EAAkE,MAfzD;AAgBT,6EAAqE,MAhB5D;AAiBT,2EAAmE,MAjB1D;AAkBT,mCAA2B,MAlBlB;AAmBT,sFAA8E,MAnBrE;AAoBT,oFAA4E;AApBnE,OAAV;;AAwBA,eAASC,cAAT,CAAwBC,GAAxB,EAA6B;AAC5B,YAAIC,EAAE,GAAGC,qBAAqB,CAACF,GAAD,CAA9B;AACA,eAAOG,mBAAmB,CAACF,EAAD,CAA1B;AACA;;AACD,eAASC,qBAAT,CAA+BF,GAA/B,EAAoC;AACnC,YAAG,CAACG,mBAAmB,CAACC,CAApB,CAAsBN,GAAtB,EAA2BE,GAA3B,CAAJ,EAAqC;AACpC,cAAIK,CAAC,GAAG,IAAIC,KAAJ,CAAU,yBAAyBN,GAAzB,GAA+B,GAAzC,CAAR;AACAK,WAAC,CAACE,IAAF,GAAS,kBAAT;AACA,gBAAMF,CAAN;AACA;;AACD,eAAOP,GAAG,CAACE,GAAD,CAAV;AACA;;AACDD,oBAAc,CAACS,IAAf,GAAsB,SAASC,kBAAT,GAA8B;AACnD,eAAOC,MAAM,CAACF,IAAP,CAAYV,GAAZ,CAAP;AACA,OAFD;;AAGAC,oBAAc,CAACY,OAAf,GAAyBT,qBAAzB;AACAU,YAAM,CAACC,OAAP,GAAiBd,cAAjB;AACAA,oBAAc,CAACE,EAAf,GAAoB,MAApB;;;;;;;;;;;;;;;;ACzCA;AAAe;;;AAAA;;;;;;;;;;;;;;;;ACAf;AAAe;;;AAAA;;;;;;;;;;;;;;;;ACCf;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;;ACSY;;AAEI;;AACJ;;;;;;AAFW;;AACP;;AAAA;;;;UDJHa,gC;AAIT,kDAAoBzB,WAApB,EAA8C;AAAA;;AAA1B,eAAAA,WAAA,GAAAA,WAAA;AADb,eAAA0B,UAAA,GAAa,CAAC5B,SAAD,gFAAsBA,SAAtB,+EAA0CA,SAA1C,+EAA8DA,SAA9D,8EAAb;AACyC;;;;iBACzC,oBAAW;AACd,iBAAK6B,SAAL,GAAiB,KAAK3B,WAAL,CAAiBI,KAAjB,CAAuB;AACpCC,wBAAU,EAAE,KAAKL,WAAL,CAAiBM,OAAjB,CAAyB,KAAKoB,UAAL,CAAgB,CAAhB,CAAzB,EAA6C,CACrD,0DAAWE,QAD0C,CAA7C;AADwB,aAAvB,CAAjB;AAKH;;;;;;;yBAXQH,gC,EAAgC,2H;AAAA,O;;;cAAhCA,gC;AAAgC,wD;AAAA,gB;AAAA,e;AAAA;AAAA;;AAAA;;;WAAA,M;qBCPhB,S;;;;;;;;;qBAEH,S;;;;;;;;;qBAad,S;;;;;;;AAhBZ;;AACI;;AAMI;;AAGI;;AAIJ;;AACA;;AAAA;;AAEA;;AACJ;;AACJ;;;;AAnBM;;AAMc;;AAAA;;AAIyB;;AAAA;;;;;;;;;;;;;;;;;;;;;ACV7C;AAAe;;;AAAA;;;;;;;;;;;;;;;;ACAf;AAAe;;;AAAA;;;;;;;;;;;;;;;;ACAf;AAAe;;;AAAA;;;;;;;;;;;;;;;;ACAf;AAAe;;;AAAA;;;;;;;;;;;;;;;;ACAf;AAAe;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACGX;;AAGI;;AACJ;;;;;;AAHW,sFAAe,SAAf,EAAe,qBAAf;;AAEP;;AAAA;;;;UCCKI,+B,GAIT,2CAAc;AAAA;;AAHP,aAAAhC,MAAA,GAAS,CAACC,SAAD,iFAAqBA,SAArB,iFAAyCA,SAAzC,+EAA2DA,SAA3D,gFAAT;AAGU,O;;;yBAJR+B,+B;AAA+B,O;;;cAA/BA,+B;AAA+B,sD;AAAA,gB;AAAA,e;AAAA;AAAA;;AAAA;;;;;WAAA,M;qBDPnC,S,sLAAgB,e;;;;;;;AAAzB;;AAAA;;AAA0C;;AAC1C;;AACiB;AAAA;AAAA;;AACb;;AAKJ;;;;AAR0C;;AAAA;;AAAA;;AAEzB;;AAAA;;AACgB;;AAAA;;;;;;;;;;;;;;;;;;;;;AEHjC;AAAe;;;AAAA;;;;;;;;;;;;;;;;ACAf;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;ACAA;AAAe;;;AAAA;;;;;;;;;;;;;;;;ACAf;AAAe;;;AAAA;;;;;;;;;;;;;;;;ACAf;AAAe;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACIX;;AAII;;AACJ;;;;;;;;AAJW,sFAAe,SAAf,EAAe,oBAAf,EAAe,MAAf,EAAe,2BAAf;;AAGP;;AAAA;;;;UCDKC,+B,GAKT,2CAAc;AAAA;;AAJP,aAAA7B,MAAA,GAAS,CAACH,SAAD,8EAAkBA,SAAlB,gFAAqCA,SAArC,8EAAT;AACA,aAAAI,UAAA,GAAa;AAAE,iBAAOJ,SAAP,kFAAF;AAAgC,mBAASA,SAAT,wFAAhC;AAAsE,kBAAQA,SAAR;AAAtE,SAAb;AAGU,O;;;yBALRgC,+B;AAA+B,O;;;cAA/BA,+B;AAA+B,2D;AAAA,gB;AAAA,e;AAAA;AAAA;;AAAA;;;;;WAAA,M;qBDPnC,S,sLAAgB,e;;;;;;;AAAzB;;AAAA;;AAA0C;;AAC1C;;AAEiB;AAAA;AAAA;;AACb;;AAMJ;;;;AAV0C;;AAAA;;AAAA;;AAGzB;;AAAA;;AACgB;;AAAA;;;;;;;;;;;;;;;;;;;;;AEJjC;AAAe;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;UCMFC,8B;;;;;yBAAAA,8B;AAA8B,O;;;cAA9BA,8B;AAA8B,+C;AAAA,iB;AAAA,e;AAAA,kc;AAAA;AAAA;ACN3C;;AACI;;AAAM;;AAAuB;;AAAQ;;AAA2C;;AAAM;;AAAiB;;AACvG;;AAEJ;;AAEA;;AAAI;;AAAgB;;AACpB;;AACI;;AACI;;AAAM;;AAAc;;AACxB;;AACJ;;AAEA;;AAAI;;AAAW;;AACf;;AACI;;AAA0D;;AAAM;;AAAS;;AAAQ;;AAEnE;;AAAM;;AAAiB;;AAAQ;;AAAK;;AAAM;;AAAO;;AAAQ;;AACvE;;AAAM;;AAAuB;;AAAO;;AACJ;;AAAM;;AAAiB;;AAAQ;;AAAM;;AAAM;;AAAS;;AAAQ;;AAChG;;AACA;;AACI;;AACJ;;AAEA;;AAAI;;AAAM;;AACV;;AACI;;AAAI;;AAAM;;AAA8B;;AAAQ;;AAAG;;AAAM;;AAAuB;;AAChF;;AACJ;;AACA;;AACI;;AACJ;;AAEA;;AAAI;;AAAQ;;AACZ;;AACI;;AAA8D;;AAAM;;AAAU;;AAC9E;;AAAgB;;AAAM;;AAAiB;;AAAO;;AAClD;;AACA;;AACI;;AACJ;;AAEA;;AAAI;;AAAK;;AACT;;AACI;;AAAwE;;AAAM;;AAAM;;AAAQ;;AAC5F;;AAAM;;AAAiB;;AAAO;;AAClC;;AACA;;AACI;;AACJ;;AAEA;;AAAI;;AAAkB;;AACtB;;AACI;;AAAa;;AAAM;;AAAa;;AAAQ;;AAAgB;;AAAM;;AAAuB;;AAAQ;;AAEjG;;AACA;;AACI;;AACJ;;AAEA;;AAAI;;AAAY;;AAChB;;AACI;;AAAM;;AAAuB;;AAAQ;;AACzC;;AACA;;AACI;;AACJ;;;;;;;;;;;;;;;;;;;;;AClEA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;;ACGI;;AAII;;AACJ;;;;;;AAJW,sFAAe,SAAf,EAAe,qBAAf,EAAe,UAAf,EAAe,qBAAf;;AAGP;;AAAA;;;;;;AASJ;;AAGI;;AACJ;;;;;;AAHY,sFAAe,SAAf,EAAe,qBAAf;;AAER;;AAAA;;;;;;AAQJ;;AAII;;AACJ;;;;;;;;AAJY,sFAAe,SAAf,EAAe,oBAAf,EAAe,MAAf,EAAe,2BAAf;;AAGR;;AAAA;;;;;;AAYI;;AAEI;;AACJ;;;;;;AAFY;;AACR;;AAAA;;;;;;AAeJ;;AAEI;;AACJ;;;;;;AAFY;;AACR;;AAAA;;;;UDvDHC,uB;AAaT,yCAAoBhC,WAApB,EAA8C;AAAA;;AAA1B,eAAAA,WAAA,GAAAA,WAAA;AATb,eAAAH,MAAA,GAAS,CAACC,SAAD,iFAAqBA,SAArB,iFAAyCA,SAAzC,+EAA2DA,SAA3D,gFAAT;AACA,eAAA4B,UAAA,GAAa,CAAC5B,SAAD,kFAAsBA,SAAtB,iFAA0CA,SAA1C,iFAA8DA,SAA9D,gFAAb;AACA,eAAAG,MAAA,GAAS,CAACH,SAAD,8EAAkBA,SAAlB,gFAAqCA,SAArC,8EAAT;AACA,eAAAI,UAAA,GAAa;AAAC,mBAAOJ,SAAP,kFAAD;AAA+B,qBAASA,SAAT,wFAA/B;AAAqE,oBAAQA,SAAR;AAArE,WAAb;AAMyC;;;;iBAEzC,oBAAW;AACd,iBAAKK,YAAL,GAAoB,KAAKH,WAAL,CAAiBI,KAAjB,CAAuB;AACvCC,wBAAU,EAAE,KAAKL,WAAL,CAAiBM,OAAjB,CAAyB;AAACC,qBAAK,EAAE,EAAR;AAAYC,wBAAQ,EAAE;AAAtB,eAAzB;AAD2B,aAAvB,CAApB;AAGA,iBAAKmB,SAAL,GAAiB,KAAK3B,WAAL,CAAiBI,KAAjB,CAAuB;AACpCC,wBAAU,EAAE,KAAKL,WAAL,CAAiBM,OAAjB,CAAyB,KAAKoB,UAAL,CAAgB,CAAhB,CAAzB,EAA6C,CACrD,0DAAWE,QAD0C,CAA7C;AADwB,aAAvB,CAAjB;AAKH;;;iBAEM,wBAAeK,KAAf,EAA2C;;;AAC9C,uBAAK9B,YAAL,CAAkB+B,GAAlB,CAAsB,YAAtB,OAAmC,IAAnC,IAAmC,aAAnC,GAAmC,MAAnC,GAAmC,GAAG,CAACD,KAAK,CAACE,MAAN,CAAaC,OAAd,GAAwB,QAAxB,GAAmC,SAAtC,GAAnC;AACH;;;;;;;yBA5BQJ,uB,EAAuB,2H;AAAA,O;;;cAAvBA,uB;AAAuB,6C;AAAA,iB;AAAA,gB;AAAA;AAAA;;AAAA;;;;;WAAA,M;qBCR3B,S,sLAAgB,e;;;;;;;;;;;qBAYhB,S,sLAAgB,e;;;;;;;;;;;qBAYhB,S,sLAAgB,e;;;;;;;AAxBzB;;AAAA;;AAA0C;;AAC1C;;AAEiB;AAAA;AAAA;;AACb;;AAMJ;;AAEA;;AAAA;;AAAgD;;AAChD;;AAGiB;AAAA;AAAA;;AACb;;AAKJ;;AAEA;;AAAA;;AAA0C;;AAC1C;;AAEiB;AAAA;AAAA;;AACb;;AAMJ;;AAEA;;AACI;;AAII;;AAGI;;AAIJ;;AACA;;AACI;;AACJ;;AACJ;;AACJ;;AAEA;;AACI;;AAEI;;AAGI;;AAIJ;;AACJ;;AACJ;;AACA;;AAAmE;AAAA,qBAAe,IAAAK,cAAA,QAAf;AAAqC,aAArC;;AAAuC;;AAAQ;;;;AApExE;;AAAA;;AAAA;;AAGzB;;AAAA;;AACgB;;AAAA;;AAQe;;AAAA;;AAAA;;AAI/B;;AAAA;;AACgB;;AAAA;;AAOS;;AAAA;;AAAA;;AAGzB;;AAAA;;AACgB;;AAAA;;AAQ3B;;AAAA;;AAIc;;AAAA;;AAIyB;;AAAA;;AAWvC;;AAAA;;AAEc;;AAAA;;AAIyB;;AAAA;;AAOK;;AAAA;;;;;;;;;;;;;;;;;;;;;ACpElD;AAAe;;;AAAA;;;;;;;;;;;;;;;;ACAf;AAAe;;;AAAA;;;;;;;;;;;;;;;;ACCf;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;;ACGI;;AAGI;;AACJ;;;;;;;;AAHW,sFAAe,MAAf,EAAe,2BAAf;;AAEP;;AAAA;;;;UDAKC,qC;AAKT,uDAA0CC,YAA1C,EAAuE;AAAA;;AAA7B,eAAAA,YAAA,GAAAA,YAAA;AAJnC,eAAAtC,MAAA,GAAS,CAACH,SAAD,8EAAkBA,SAAlB,gFAAqCA,SAArC,8EAAT;AACA,eAAAI,UAAA,GAAa;AAAE,mBAAOJ,SAAP,kFAAF;AAAgC,qBAASA,SAAT,wFAAhC;AAAsE,oBAAQA,SAAR;AAAtE,WAAb;AAGkE;;;;iBAElE,wBAAe;AAClB,iBAAKyC,YAAL,CAAkBC,OAAlB,CAA0B;AACtBC,qBAAO,EAAE3C,SAAF,kGAA4B,KAAK4C,aAAjC;AADe,aAA1B;AAGH;;;;;;;yBAXQJ,qC,EAAqC,gEAK1B,0DAL0B,C;AAKd,O;;;cALvBA,qC;AAAqC,6D;AAAA,gB;AAAA,e;AAAA;AAAA;;AAAA;;;;;WAAA,M;qBCPzC,S,sLAAgB,e;;;;;;;AAAzB;;AAAA;;AAA0C;;AAC1C;;AACiB;AAAA;AAAA,eAAyB,aAAzB,EAAyB;AAAA,qBACV,IAAAK,YAAA,EADU;AACI,aAD7B;;AAEb;;AAKJ;;;;AAT0C;;AAAA;;AAAA;;AAEzB;;AAAA;;AAEgB;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACC7B;;AAGI;;AACJ;;;;;;AAHW,sFAAe,SAAf,EAAe,qBAAf;;AAEP;;AAAA;;;;UCDKC,gC,GAIT,4CAAc;AAAA;;AAHP,aAAA/C,MAAA,GAAS,CAACC,SAAD,iFAAqBA,SAArB,iFAAyCA,SAAzC,+EAA2DA,SAA3D,gFAAT;AAGU,O;;;yBAJR8C,gC;AAAgC,O;;;cAAhCA,gC;AAAgC,uD;AAAA,gB;AAAA,e;AAAA;AAAA;;AAAA;;;;;WAAA,M;qBDPpC,S,sLAAgB,e;;;;;;;AAAzB;;AAAA;;AAA0C;;AAC1C;;AAGiB;AAAA;AAAA;;AACb;;AAKJ;;;;AAV0C;;AAAA;;AAAA;;AAIzB;;AAAA;;AACgB;;AAAA;;;;;;;;;;;;;;;;;;;;;AELjC;AAAe;;;AAAA;;;;;;;;;;;;;;;;ACAf;AAAe;;;AAAA;;;;;;;;;;;;;;;;ACAf;AAAe;;;AAAA;;;;;;;;;;;;;;;;ACAf;AAAe;;;AAAA","file":"demo-radio-group-radio-group-module-es5.js","sourcesContent":["import { NgModule } from \"@angular/core\";\nimport { FormsModule, ReactiveFormsModule } from \"@angular/forms\";\nimport { RouterModule } from \"@angular/router\";\nimport {\n    DEMO_PATH_TOKEN,\n    NuiCheckboxModule,\n    NuiDocsModule,\n    NuiFormFieldModule,\n    NuiRadioModule,\n    NuiValidationMessageModule,\n    SrlcStage,\n} from \"@nova-ui/bits\";\n\nimport {\n    BasicRadioGroupExampleComponent,\n    DisabledRadioGroupExampleComponent,\n    RadioGroupDocsExampleComponent,\n    RadioGroupHintsExampleComponent,\n    RadioGroupInFormExampleComponent,\n    RadioGroupInlineExampleComponent,\n    RadioGroupTestComponent,\n    RadioGroupVisualTestComponent,\n    ValueChangeRadioGroupExampleComponent,\n} from \"./index\";\n\nconst routes = [\n    {\n        path: \"\",\n        component: RadioGroupDocsExampleComponent,\n        data: {\n            \"srlc\": {\n                \"stage\": SrlcStage.ga,\n            },\n            showThemeSwitcher: true,\n        },\n    },\n    {\n        path: \"radio-group-test\",\n        component: RadioGroupTestComponent,\n    },\n    {\n        path: \"radio-group-visual-test\",\n        component: RadioGroupVisualTestComponent,\n        data: {\n            \"srlc\": {\n                \"hideIndicator\": true,\n            },\n        },\n    },\n];\n\n@NgModule({\n    imports: [\n        NuiRadioModule,\n        NuiCheckboxModule,\n        NuiFormFieldModule,\n        ReactiveFormsModule,\n        FormsModule,\n        NuiValidationMessageModule,\n        NuiDocsModule,\n        RouterModule.forChild(routes),\n    ],\n    declarations: [\n        BasicRadioGroupExampleComponent,\n        DisabledRadioGroupExampleComponent,\n        RadioGroupDocsExampleComponent,\n        RadioGroupHintsExampleComponent,\n        RadioGroupInFormExampleComponent,\n        RadioGroupInlineExampleComponent,\n        RadioGroupTestComponent,\n        RadioGroupVisualTestComponent,\n        ValueChangeRadioGroupExampleComponent,\n    ],\n    providers: [\n        {\n            provide: DEMO_PATH_TOKEN,\n            useFactory: () => (<any>require).context(`!!raw-loader!./`, true, /.*\\.(ts|html|less)$/),\n        },\n    ],\n    exports: [\n        RouterModule,\n    ],\n})\nexport class RadioGroupModule {\n}\n","export default \"<h1 i18n>Selected fruit: {{selectedFruit}}</h1>\\n<nui-radio-group id=\\\"fruit-radio-group\\\"\\n                 name=\\\"fruit\\\"\\n                 [(value)]=\\\"selectedFruit\\\">\\n    <nui-radio *ngFor=\\\"let fruit of fruits\\\"\\n               [value]=\\\"fruit\\\"\\n               [checked]=\\\"fruit === 'Orange'\\\"\\n               [disabled]=\\\"fruit === 'Banana'\\\">\\n        {{fruit}}\\n    </nui-radio>\\n</nui-radio-group>\\n\";","export default \"import { NgModule } from \\\"@angular/core\\\";\\nimport { FormsModule, ReactiveFormsModule } from \\\"@angular/forms\\\";\\nimport { RouterModule } from \\\"@angular/router\\\";\\nimport {\\n    DEMO_PATH_TOKEN,\\n    NuiCheckboxModule,\\n    NuiDocsModule,\\n    NuiFormFieldModule,\\n    NuiRadioModule,\\n    NuiValidationMessageModule,\\n    SrlcStage,\\n} from \\\"@nova-ui/bits\\\";\\n\\nimport {\\n    BasicRadioGroupExampleComponent,\\n    DisabledRadioGroupExampleComponent,\\n    RadioGroupDocsExampleComponent,\\n    RadioGroupHintsExampleComponent,\\n    RadioGroupInFormExampleComponent,\\n    RadioGroupInlineExampleComponent,\\n    RadioGroupTestComponent,\\n    RadioGroupVisualTestComponent,\\n    ValueChangeRadioGroupExampleComponent,\\n} from \\\"./index\\\";\\n\\nconst routes = [\\n    {\\n        path: \\\"\\\",\\n        component: RadioGroupDocsExampleComponent,\\n        data: {\\n            \\\"srlc\\\": {\\n                \\\"stage\\\": SrlcStage.ga,\\n            },\\n            showThemeSwitcher: true,\\n        },\\n    },\\n    {\\n        path: \\\"radio-group-test\\\",\\n        component: RadioGroupTestComponent,\\n    },\\n    {\\n        path: \\\"radio-group-visual-test\\\",\\n        component: RadioGroupVisualTestComponent,\\n        data: {\\n            \\\"srlc\\\": {\\n                \\\"hideIndicator\\\": true,\\n            },\\n        },\\n    },\\n];\\n\\n@NgModule({\\n    imports: [\\n        NuiRadioModule,\\n        NuiCheckboxModule,\\n        NuiFormFieldModule,\\n        ReactiveFormsModule,\\n        FormsModule,\\n        NuiValidationMessageModule,\\n        NuiDocsModule,\\n        RouterModule.forChild(routes),\\n    ],\\n    declarations: [\\n        BasicRadioGroupExampleComponent,\\n        DisabledRadioGroupExampleComponent,\\n        RadioGroupDocsExampleComponent,\\n        RadioGroupHintsExampleComponent,\\n        RadioGroupInFormExampleComponent,\\n        RadioGroupInlineExampleComponent,\\n        RadioGroupTestComponent,\\n        RadioGroupVisualTestComponent,\\n        ValueChangeRadioGroupExampleComponent,\\n    ],\\n    providers: [\\n        {\\n            provide: DEMO_PATH_TOKEN,\\n            useFactory: () => (<any>require).context(`!!raw-loader!./`, true, /.*\\\\.(ts|html|less)$/),\\n        },\\n    ],\\n    exports: [\\n        RouterModule,\\n    ],\\n})\\nexport class RadioGroupModule {\\n}\\n\";","<h1 i18n>Selected fruit: {{selectedFruit}}</h1>\n<nui-radio-group id=\"fruit-radio-group\"\n                 name=\"fruit\"\n                 [(value)]=\"selectedFruit\">\n    <nui-radio *ngFor=\"let fruit of fruits\"\n               [value]=\"fruit\"\n               [checked]=\"fruit === 'Orange'\"\n               [disabled]=\"fruit === 'Banana'\">\n        {{fruit}}\n    </nui-radio>\n</nui-radio-group>\n","import { Component } from \"@angular/core\";\n\n\n@Component({\n    selector: \"nui-disabled-radio-group-example\",\n    templateUrl: \"./disabled-radio-group.example.component.html\",\n})\nexport class DisabledRadioGroupExampleComponent {\n    public fruits = [$localize `Banana`, $localize `Orange`, $localize `Kiwi`, $localize `Papaya`];\n    public selectedFruit: string;\n\n    constructor() { }\n}\n","import { Component, OnInit } from \"@angular/core\";\nimport { FormBuilder, FormGroup } from \"@angular/forms\";\n\n@Component({\n    selector: \"nui-radio-group-visual-test\",\n    templateUrl: \"./radio-group-visual-test.component.html\",\n})\nexport class RadioGroupVisualTestComponent implements OnInit {\n    public disabledForm: FormGroup;\n    public colors = [\"Red\", \"Green\", \"Blue\"];\n    public colorHints = { \"Red\": \"hot color\", \"Green\": \"color of nature\", \"Blue\": \"color of sky\" };\n    public fruits = [\"Banana\", \"Orange\", \"Kiwi\", \"Papaya\"];\n    public selectedFruit: string;\n    public selectedColor: string;\n\n    constructor(private formBuilder: FormBuilder) {}\n\n    public ngOnInit() {\n        this.disabledForm = this.formBuilder.group({\n            radioGroup: this.formBuilder.control({value: \"\", disabled: true}),\n        });\n    }\n}\n","<div class=\"container\">\n    <h3>Basic Radio Group</h3>\n    <nui-radio-group id=\"fruit-radio-group\"\n                    name=\"fruit\"\n                    [(value)]=\"selectedFruit\">\n        <nui-radio *ngFor=\"let fruit of fruits\"\n                    [value]=\"fruit\"\n                    [checked]=\"fruit === 'Orange'\"\n                    [disabled]=\"fruit === 'Kiwi'\">\n            {{fruit}}\n        </nui-radio>\n    </nui-radio-group>\n    <hr />\n\n    <h3>Radio Group with pre-selected option and hints</h3>\n    <nui-radio-group id=\"color-radio-group\"\n                    name=\"color\"\n                    [(value)]=\"selectedColor\">\n        <nui-radio *ngFor=\"let color of colors\"\n                    [value]=\"color\"\n                    [hint]=\"colorHints[color]\"\n                    [disabled]=\"color === 'Blue'\"\n                    [checked]=\"color === 'Green'\">\n            {{color}}\n        </nui-radio>\n    </nui-radio-group>\n    <hr />\n\n    <h3>Inline Horizontal Group</h3>\n    <nui-radio-group class=\"nui-radio-group-inline\"\n                    id=\"inline-color-radio-group\"\n                    name=\"color\"\n                    [(value)]=\"selectedColor\">\n        <nui-radio *ngFor=\"let color of colors\"\n                    [value]=\"color\"\n                    [hint]=\"colorHints[color]\"\n                    [disabled]=\"color === 'Red'\"\n                    [checked]=\"color === 'Green'\">\n            {{color}}\n        </nui-radio>\n    </nui-radio-group>\n    <hr />\n    <form [formGroup]=\"disabledForm\">\n        <nui-form-field caption=\"Disabled Radio Group in form\"\n                        [control]=\"disabledForm.controls['radioGroup']\">\n            <nui-radio-group id=\"fruit-radio-group-disabled\"\n                             formControlName=\"radioGroup\"\n                             name=\"fruit-disabled\">\n                <nui-radio *ngFor=\"let fruit of fruits\"\n                            [value]=\"fruit\">\n                    {{fruit}}\n                </nui-radio>\n            </nui-radio-group>\n        </nui-form-field>\n    </form>\n</div>\n","var map = {\n\t\"./basic-radio-group/basic-radio-group.example.component.html\": \"Tjpb\",\n\t\"./basic-radio-group/basic-radio-group.example.component.ts\": \"PfI1\",\n\t\"./disabled-radio-group/disabled-radio-group.example.component.html\": \"+SPn\",\n\t\"./disabled-radio-group/disabled-radio-group.example.component.ts\": \"q5Yi\",\n\t\"./index.ts\": \"snYg\",\n\t\"./radio-group-docs/radio-group-docs.example.component.html\": \"Posh\",\n\t\"./radio-group-docs/radio-group-docs.example.component.ts\": \"D9z8\",\n\t\"./radio-group-in-form/radio-group-in-form.example.component.html\": \"9hV4\",\n\t\"./radio-group-in-form/radio-group-in-form.example.component.ts\": \"lqxX\",\n\t\"./radio-group-inline/radio-group-inline.example.component.html\": \"73us\",\n\t\"./radio-group-inline/radio-group-inline.example.component.ts\": \"RD99\",\n\t\"./radio-group-test/radio-group-test.component.html\": \"e8M6\",\n\t\"./radio-group-test/radio-group-test.component.ts\": \"8dux\",\n\t\"./radio-group-visual-test/radio-group-visual-test.component.html\": \"BWgK\",\n\t\"./radio-group-visual-test/radio-group-visual-test.component.ts\": \"zQ9T\",\n\t\"./radio-group-with-hints/radio-group-hints.example.component.html\": \"O42u\",\n\t\"./radio-group-with-hints/radio-group-hints.example.component.ts\": \"F8B8\",\n\t\"./radio-group.module.ts\": \"0xcr\",\n\t\"./value-change-radio-group/value-change-radio-group.example.component.html\": \"gWQZ\",\n\t\"./value-change-radio-group/value-change-radio-group.example.component.ts\": \"GGa2\"\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = \"6EFm\";","export default \"<h1 i18n>Selected fruit: {{selectedFruit}}</h1>\\n<nui-radio-group id=\\\"fruit-radio-group-inline\\\"\\n                 name=\\\"fruit\\\"\\n                 class=\\\"nui-radio-group-inline\\\"\\n                 [(value)]=\\\"selectedFruit\\\">\\n    <nui-radio *ngFor=\\\"let fruit of fruits\\\"\\n               [value]=\\\"fruit\\\"\\n               [checked]=\\\"fruit === 'Orange'\\\">\\n        {{fruit}}\\n    </nui-radio>\\n</nui-radio-group>\\n\";","export default \"import { Component, OnInit } from \\\"@angular/core\\\";\\nimport { FormBuilder, FormGroup, Validators } from \\\"@angular/forms\\\";\\nimport { CheckboxChangeEvent } from \\\"@nova-ui/bits\\\";\\n\\n@Component({\\n    selector: \\\"nui-radio-group-test\\\",\\n    templateUrl: \\\"./radio-group-test.component.html\\\",\\n})\\nexport class RadioGroupTestComponent implements OnInit {\\n    public disabledForm: FormGroup;\\n    public fancyForm: FormGroup;\\n\\n    public fruits = [$localize `Banana`, $localize `Orange`, $localize `Kiwi`, $localize `Papaya`];\\n    public vegetables = [$localize `Cabbage`, $localize `Potato`, $localize `Tomato`, $localize `Carrot`];\\n    public colors = [$localize `Red`, $localize `Green`, $localize `Blue`];\\n    public colorHints = {\\\"Red\\\": $localize `hot color`, \\\"Green\\\": $localize `color of nature`, \\\"Blue\\\": $localize `color of sky`};\\n\\n    public selectedColor: string;\\n    public selectedFruit: string;\\n    public selectedFruitInline: string;\\n\\n    constructor(private formBuilder: FormBuilder) {}\\n\\n    public ngOnInit() {\\n        this.disabledForm = this.formBuilder.group({\\n            radioGroup: this.formBuilder.control({value: \\\"\\\", disabled: true}),\\n        });\\n        this.fancyForm = this.formBuilder.group({\\n            radioGroup: this.formBuilder.control(this.vegetables[1], [\\n                Validators.required,\\n            ]),\\n        });\\n    }\\n\\n    public toggleDisabled(event: CheckboxChangeEvent) {\\n        this.disabledForm.get(\\\"radioGroup\\\")?.[!event.target.checked ? \\\"enable\\\" : \\\"disable\\\"]();\\n    }\\n}\\n\";","import { Component, OnInit } from \"@angular/core\";\nimport { FormBuilder, FormGroup, Validators } from \"@angular/forms\";\n\n\n@Component({\n    selector: \"nui-radio-group-in-form-example\",\n    templateUrl: \"./radio-group-in-form.example.component.html\",\n})\nexport class RadioGroupInFormExampleComponent implements OnInit {\n    public fancyForm: FormGroup;\n\n    public vegetables = [$localize `Cabbage`, $localize `Potato`, $localize `Tomato`, $localize `Carrot`];\n    constructor(private formBuilder: FormBuilder) {}\n    public ngOnInit() {\n        this.fancyForm = this.formBuilder.group({\n            radioGroup: this.formBuilder.control(this.vegetables[1], [\n                Validators.required,\n            ]),\n        });\n    }\n}\n","<form [formGroup]=\"fancyForm\">\n    <nui-form-field caption=\"Radio Group\"\n                    i18n-caption\n                    hint=\"Some pretty long text with hint\"\n                    i18n-hint\n                    info=\"text\"\n                    [control]=\"fancyForm.controls['radioGroup']\">\n        <nui-radio-group id=\"input-radioGroup\"\n                         formControlName=\"radioGroup\"\n                         name=\"vegetable\" required>\n            <nui-radio *ngFor=\"let vegetable of vegetables\"\n                       [value]=\"vegetable\">\n                {{vegetable}}\n            </nui-radio>\n        </nui-radio-group>\n        <nui-validation-message for=\"required\" i18n>\n            This is required. C'mon\n        </nui-validation-message>\n    </nui-form-field>\n</form>\n","export default \"<form [formGroup]=\\\"fancyForm\\\">\\n    <nui-form-field caption=\\\"Radio Group\\\"\\n                    i18n-caption\\n                    hint=\\\"Some pretty long text with hint\\\"\\n                    i18n-hint\\n                    info=\\\"text\\\"\\n                    [control]=\\\"fancyForm.controls['radioGroup']\\\">\\n        <nui-radio-group id=\\\"input-radioGroup\\\"\\n                         formControlName=\\\"radioGroup\\\"\\n                         name=\\\"vegetable\\\" required>\\n            <nui-radio *ngFor=\\\"let vegetable of vegetables\\\"\\n                       [value]=\\\"vegetable\\\">\\n                {{vegetable}}\\n            </nui-radio>\\n        </nui-radio-group>\\n        <nui-validation-message for=\\\"required\\\" i18n>\\n            This is required. C'mon\\n        </nui-validation-message>\\n    </nui-form-field>\\n</form>\\n\";","export default \"<div class=\\\"container\\\">\\n    <h3>Basic Radio Group</h3>\\n    <nui-radio-group id=\\\"fruit-radio-group\\\"\\n                    name=\\\"fruit\\\"\\n                    [(value)]=\\\"selectedFruit\\\">\\n        <nui-radio *ngFor=\\\"let fruit of fruits\\\"\\n                    [value]=\\\"fruit\\\"\\n                    [checked]=\\\"fruit === 'Orange'\\\"\\n                    [disabled]=\\\"fruit === 'Kiwi'\\\">\\n            {{fruit}}\\n        </nui-radio>\\n    </nui-radio-group>\\n    <hr />\\n\\n    <h3>Radio Group with pre-selected option and hints</h3>\\n    <nui-radio-group id=\\\"color-radio-group\\\"\\n                    name=\\\"color\\\"\\n                    [(value)]=\\\"selectedColor\\\">\\n        <nui-radio *ngFor=\\\"let color of colors\\\"\\n                    [value]=\\\"color\\\"\\n                    [hint]=\\\"colorHints[color]\\\"\\n                    [disabled]=\\\"color === 'Blue'\\\"\\n                    [checked]=\\\"color === 'Green'\\\">\\n            {{color}}\\n        </nui-radio>\\n    </nui-radio-group>\\n    <hr />\\n\\n    <h3>Inline Horizontal Group</h3>\\n    <nui-radio-group class=\\\"nui-radio-group-inline\\\"\\n                    id=\\\"inline-color-radio-group\\\"\\n                    name=\\\"color\\\"\\n                    [(value)]=\\\"selectedColor\\\">\\n        <nui-radio *ngFor=\\\"let color of colors\\\"\\n                    [value]=\\\"color\\\"\\n                    [hint]=\\\"colorHints[color]\\\"\\n                    [disabled]=\\\"color === 'Red'\\\"\\n                    [checked]=\\\"color === 'Green'\\\">\\n            {{color}}\\n        </nui-radio>\\n    </nui-radio-group>\\n    <hr />\\n    <form [formGroup]=\\\"disabledForm\\\">\\n        <nui-form-field caption=\\\"Disabled Radio Group in form\\\"\\n                        [control]=\\\"disabledForm.controls['radioGroup']\\\">\\n            <nui-radio-group id=\\\"fruit-radio-group-disabled\\\"\\n                             formControlName=\\\"radioGroup\\\"\\n                             name=\\\"fruit-disabled\\\">\\n                <nui-radio *ngFor=\\\"let fruit of fruits\\\"\\n                            [value]=\\\"fruit\\\">\\n                    {{fruit}}\\n                </nui-radio>\\n            </nui-radio-group>\\n        </nui-form-field>\\n    </form>\\n</div>\\n\";","export default \"import { Component } from \\\"@angular/core\\\";\\n\\n@Component({\\n    selector: \\\"nui-radio-docs-example\\\",\\n    templateUrl: \\\"./radio-group-docs.example.component.html\\\",\\n})\\nexport class RadioGroupDocsExampleComponent {\\n}\\n\";","export default \"import { Component } from \\\"@angular/core\\\";\\n\\n\\n@Component({\\n    selector: \\\"nui-with-hints-radio-group-example\\\",\\n    templateUrl: \\\"./radio-group-hints.example.component.html\\\",\\n})\\nexport class RadioGroupHintsExampleComponent {\\n    public colors = [$localize `Red`, $localize `Green`, $localize `Blue`];\\n    public colorHints = { \\\"Red\\\": $localize `hot color`, \\\"Green\\\": $localize `color of nature`, \\\"Blue\\\": $localize `color of sky` };\\n    public selectedColor: string;\\n\\n    constructor() { }\\n}\\n\";","export default \"import { Component, Inject } from \\\"@angular/core\\\";\\nimport { IToastService, ToastService } from \\\"@nova-ui/bits\\\";\\n\\n@Component({\\n    selector: \\\"nui-value-change-radio-group-example\\\",\\n    templateUrl: \\\"./value-change-radio-group.example.component.html\\\",\\n})\\nexport class ValueChangeRadioGroupExampleComponent {\\n    public colors = [$localize `Red`, $localize `Green`, $localize `Blue`];\\n    public colorHints = { \\\"Red\\\": $localize `hot color`, \\\"Green\\\": $localize `color of nature`, \\\"Blue\\\": $localize `color of sky` };\\n    public selectedColor: string;\\n\\n    constructor(@Inject(ToastService) private toastService: IToastService) {}\\n\\n    public showSelected() {\\n        this.toastService.success({\\n            message: $localize `You selected ${this.selectedColor}. Nice!`,\\n        });\\n    }\\n}\\n\";","<h1 i18n>Selected fruit: {{selectedFruit}}</h1>\n<nui-radio-group name=\"fruit\"\n                 [(value)]=\"selectedFruit\">\n    <nui-radio *ngFor=\"let fruit of fruits\"\n               [value]=\"fruit\"\n               [checked]=\"fruit === 'Orange'\">\n        {{fruit}}\n    </nui-radio>\n</nui-radio-group>\n","import { Component } from \"@angular/core\";\n\n\n@Component({\n    selector: \"nui-basic-radio-group-example\",\n    templateUrl: \"./basic-radio-group.example.component.html\",\n})\nexport class BasicRadioGroupExampleComponent {\n    public fruits = [$localize `Banana`, $localize `Orange`, $localize `Kiwi`, $localize `Papaya`];\n    public selectedFruit: string;\n\n    constructor() { }\n}\n","export default \"<h1 i18n>Selected color: {{selectedColor}}</h1>\\n<nui-radio-group id=\\\"color-radio-group\\\"\\n                 name=\\\"color\\\"\\n                 [(value)]=\\\"selectedColor\\\">\\n    <nui-radio *ngFor=\\\"let color of colors\\\"\\n               [value]=\\\"color\\\"\\n               [checked]=\\\"color === 'Green'\\\"\\n               [hint]=\\\"colorHints[color]\\\">\\n        {{color}}\\n    </nui-radio>\\n</nui-radio-group>\\n\";","export * from \"./radio-group-docs/radio-group-docs.example.component\";\nexport * from \"./basic-radio-group/basic-radio-group.example.component\";\nexport * from \"./disabled-radio-group/disabled-radio-group.example.component\";\nexport * from \"./radio-group-with-hints/radio-group-hints.example.component\";\nexport * from \"./value-change-radio-group/value-change-radio-group.example.component\";\nexport * from \"./radio-group-inline/radio-group-inline.example.component\";\nexport * from \"./radio-group-visual-test/radio-group-visual-test.component\";\nexport * from \"./radio-group-in-form/radio-group-in-form.example.component\";\nexport * from \"./radio-group-test/radio-group-test.component\";\n","export default \"import { Component } from \\\"@angular/core\\\";\\n\\n\\n@Component({\\n    selector: \\\"nui-basic-radio-group-example\\\",\\n    templateUrl: \\\"./basic-radio-group.example.component.html\\\",\\n})\\nexport class BasicRadioGroupExampleComponent {\\n    public fruits = [$localize `Banana`, $localize `Orange`, $localize `Kiwi`, $localize `Papaya`];\\n    public selectedFruit: string;\\n\\n    constructor() { }\\n}\\n\";","export default \"<p>\\n    <code>&lt;nui-radio-group&gt;</code> is used to get and store value of selected <code>&lt;nui-radio&gt;</code>\\n    buttons. Radio buttons allow users to choose one option from a set of mutually exclusive options.\\n    The user must select only one option, never zero.\\n</p>\\n\\n<h2>Required Modules</h2>\\n<ul>\\n    <li>\\n        <code>NuiRadioModule</code>\\n    </li>\\n</ul>\\n\\n<h2>Basic Usage</h2>\\n<p>\\n    To implement a radio group you need to pass a variable to <code>[(value)]</code> where you want to store the\\n    selected radio button.\\n    Then just add <code>&lt;nui-radio&gt;</code> with <code>[value]</code> property inside\\n    <code>&lt;nui-radio-group&gt;</code>.\\n    Also you can preselect value of <code>&lt;nui-radio&gt;</code> using <code>[checked]</code> property.\\n</p>\\n<nui-example-wrapper filenamePrefix=\\\"basic-radio-group\\\" exampleTitle=\\\"Basic usage\\\">\\n    <nui-basic-radio-group-example></nui-basic-radio-group-example>\\n</nui-example-wrapper>\\n\\n<h2>Inline</h2>\\n<p>\\n    Add <code>class=\\\"nui-radio-group-inline\\\"</code> to <code>&lt;nui-radio-group&gt;</code>\\n    to display radio group inline.\\n</p>\\n<nui-example-wrapper filenamePrefix=\\\"radio-group-inline\\\" exampleTitle=\\\"Inline\\\">\\n    <nui-radio-group-inline-example></nui-radio-group-inline-example>\\n</nui-example-wrapper>\\n\\n<h2>Disabled</h2>\\n<p>\\n    To disable a radio button inside radio group you need to pass <code>[disabled]</code>\\n    property to the <code>&lt;nui-radio&gt;</code>.\\n</p>\\n<nui-example-wrapper filenamePrefix=\\\"disabled-radio-group\\\" exampleTitle=\\\"Disabled\\\">\\n    <nui-disabled-radio-group-example></nui-disabled-radio-group-example>\\n</nui-example-wrapper>\\n\\n<h2>Hints</h2>\\n<p>\\n    If you want to have hints below the radio buttons then you need to pass <code>[hint]</code> property to the\\n    <code>&lt;nui-radio&gt;</code>.\\n</p>\\n<nui-example-wrapper filenamePrefix=\\\"radio-group-hints\\\" exampleTitle=\\\"Hints\\\">\\n    <nui-with-hints-radio-group-example></nui-with-hints-radio-group-example>\\n</nui-example-wrapper>\\n\\n<h2>Value Change Event</h2>\\n<p>\\n    You can pass <code>(valueChange)</code> property to the <code>&lt;nui-radio-group&gt;</code> and do something\\n    when the value of radio group changes.\\n</p>\\n<nui-example-wrapper filenamePrefix=\\\"value-change-radio-group\\\" exampleTitle=\\\"Value change event\\\">\\n    <nui-value-change-radio-group-example></nui-value-change-radio-group-example>\\n</nui-example-wrapper>\\n\\n<h2>Part Of Form</h2>\\n<p>\\n    <code>&lt;nui-radio-group&gt;</code> can be used in reactive forms.\\n</p>\\n<nui-example-wrapper filenamePrefix=\\\"radio-group-in-form\\\" exampleTitle=\\\"In form\\\">\\n    <nui-radio-group-in-form-example></nui-radio-group-in-form-example>\\n</nui-example-wrapper>\\n\";","export default \"import { Component } from \\\"@angular/core\\\";\\n\\n\\n@Component({\\n    selector: \\\"nui-radio-group-inline-example\\\",\\n    templateUrl: \\\"./radio-group-inline.example.component.html\\\",\\n})\\nexport class RadioGroupInlineExampleComponent {\\n    public fruits = [$localize `Banana`, $localize `Orange`, $localize `Kiwi`, $localize `Papaya`];\\n    public selectedFruit: string;\\n\\n    constructor() { }\\n}\\n\";","<h1 i18n>Selected color: {{selectedColor}}</h1>\n<nui-radio-group id=\"color-radio-group\"\n                 name=\"color\"\n                 [(value)]=\"selectedColor\">\n    <nui-radio *ngFor=\"let color of colors\"\n               [value]=\"color\"\n               [checked]=\"color === 'Green'\"\n               [hint]=\"colorHints[color]\">\n        {{color}}\n    </nui-radio>\n</nui-radio-group>\n","import { Component } from \"@angular/core\";\n\n\n@Component({\n    selector: \"nui-with-hints-radio-group-example\",\n    templateUrl: \"./radio-group-hints.example.component.html\",\n})\nexport class RadioGroupHintsExampleComponent {\n    public colors = [$localize `Red`, $localize `Green`, $localize `Blue`];\n    public colorHints = { \"Red\": $localize `hot color`, \"Green\": $localize `color of nature`, \"Blue\": $localize `color of sky` };\n    public selectedColor: string;\n\n    constructor() { }\n}\n","export default \"<h1 i18n>Selected fruit: {{selectedFruit}}</h1>\\n<nui-radio-group name=\\\"fruit\\\"\\n                 [(value)]=\\\"selectedFruit\\\">\\n    <nui-radio *ngFor=\\\"let fruit of fruits\\\"\\n               [value]=\\\"fruit\\\"\\n               [checked]=\\\"fruit === 'Orange'\\\">\\n        {{fruit}}\\n    </nui-radio>\\n</nui-radio-group>\\n\";","import { Component } from \"@angular/core\";\n\n@Component({\n    selector: \"nui-radio-docs-example\",\n    templateUrl: \"./radio-group-docs.example.component.html\",\n})\nexport class RadioGroupDocsExampleComponent {\n}\n","<p>\n    <code>&lt;nui-radio-group&gt;</code> is used to get and store value of selected <code>&lt;nui-radio&gt;</code>\n    buttons. Radio buttons allow users to choose one option from a set of mutually exclusive options.\n    The user must select only one option, never zero.\n</p>\n\n<h2>Required Modules</h2>\n<ul>\n    <li>\n        <code>NuiRadioModule</code>\n    </li>\n</ul>\n\n<h2>Basic Usage</h2>\n<p>\n    To implement a radio group you need to pass a variable to <code>[(value)]</code> where you want to store the\n    selected radio button.\n    Then just add <code>&lt;nui-radio&gt;</code> with <code>[value]</code> property inside\n    <code>&lt;nui-radio-group&gt;</code>.\n    Also you can preselect value of <code>&lt;nui-radio&gt;</code> using <code>[checked]</code> property.\n</p>\n<nui-example-wrapper filenamePrefix=\"basic-radio-group\" exampleTitle=\"Basic usage\">\n    <nui-basic-radio-group-example></nui-basic-radio-group-example>\n</nui-example-wrapper>\n\n<h2>Inline</h2>\n<p>\n    Add <code>class=\"nui-radio-group-inline\"</code> to <code>&lt;nui-radio-group&gt;</code>\n    to display radio group inline.\n</p>\n<nui-example-wrapper filenamePrefix=\"radio-group-inline\" exampleTitle=\"Inline\">\n    <nui-radio-group-inline-example></nui-radio-group-inline-example>\n</nui-example-wrapper>\n\n<h2>Disabled</h2>\n<p>\n    To disable a radio button inside radio group you need to pass <code>[disabled]</code>\n    property to the <code>&lt;nui-radio&gt;</code>.\n</p>\n<nui-example-wrapper filenamePrefix=\"disabled-radio-group\" exampleTitle=\"Disabled\">\n    <nui-disabled-radio-group-example></nui-disabled-radio-group-example>\n</nui-example-wrapper>\n\n<h2>Hints</h2>\n<p>\n    If you want to have hints below the radio buttons then you need to pass <code>[hint]</code> property to the\n    <code>&lt;nui-radio&gt;</code>.\n</p>\n<nui-example-wrapper filenamePrefix=\"radio-group-hints\" exampleTitle=\"Hints\">\n    <nui-with-hints-radio-group-example></nui-with-hints-radio-group-example>\n</nui-example-wrapper>\n\n<h2>Value Change Event</h2>\n<p>\n    You can pass <code>(valueChange)</code> property to the <code>&lt;nui-radio-group&gt;</code> and do something\n    when the value of radio group changes.\n</p>\n<nui-example-wrapper filenamePrefix=\"value-change-radio-group\" exampleTitle=\"Value change event\">\n    <nui-value-change-radio-group-example></nui-value-change-radio-group-example>\n</nui-example-wrapper>\n\n<h2>Part Of Form</h2>\n<p>\n    <code>&lt;nui-radio-group&gt;</code> can be used in reactive forms.\n</p>\n<nui-example-wrapper filenamePrefix=\"radio-group-in-form\" exampleTitle=\"In form\">\n    <nui-radio-group-in-form-example></nui-radio-group-in-form-example>\n</nui-example-wrapper>\n","import { Component, OnInit } from \"@angular/core\";\nimport { FormBuilder, FormGroup, Validators } from \"@angular/forms\";\nimport { CheckboxChangeEvent } from \"@nova-ui/bits\";\n\n@Component({\n    selector: \"nui-radio-group-test\",\n    templateUrl: \"./radio-group-test.component.html\",\n})\nexport class RadioGroupTestComponent implements OnInit {\n    public disabledForm: FormGroup;\n    public fancyForm: FormGroup;\n\n    public fruits = [$localize `Banana`, $localize `Orange`, $localize `Kiwi`, $localize `Papaya`];\n    public vegetables = [$localize `Cabbage`, $localize `Potato`, $localize `Tomato`, $localize `Carrot`];\n    public colors = [$localize `Red`, $localize `Green`, $localize `Blue`];\n    public colorHints = {\"Red\": $localize `hot color`, \"Green\": $localize `color of nature`, \"Blue\": $localize `color of sky`};\n\n    public selectedColor: string;\n    public selectedFruit: string;\n    public selectedFruitInline: string;\n\n    constructor(private formBuilder: FormBuilder) {}\n\n    public ngOnInit() {\n        this.disabledForm = this.formBuilder.group({\n            radioGroup: this.formBuilder.control({value: \"\", disabled: true}),\n        });\n        this.fancyForm = this.formBuilder.group({\n            radioGroup: this.formBuilder.control(this.vegetables[1], [\n                Validators.required,\n            ]),\n        });\n    }\n\n    public toggleDisabled(event: CheckboxChangeEvent) {\n        this.disabledForm.get(\"radioGroup\")?.[!event.target.checked ? \"enable\" : \"disable\"]();\n    }\n}\n","<h1 i18n>Selected fruit: {{selectedFruit}}</h1>\n<nui-radio-group id=\"fruit-radio-group\"\n                 name=\"fruit\"\n                 [(value)]=\"selectedFruit\">\n    <nui-radio *ngFor=\"let fruit of fruits\"\n               [value]=\"fruit\"\n               [checked]=\"fruit === 'Orange'\"\n               [disabled]=\"fruit === 'Banana'\">\n        {{fruit}}\n    </nui-radio>\n</nui-radio-group>\n\n<h1 i18n>Selected fruit: {{selectedFruitInline}}</h1>\n<nui-radio-group id=\"fruit-radio-group-inline\"\n                 name=\"fruit-inline\"\n                 class=\"nui-radio-group-inline\"\n                 [(value)]=\"selectedFruitInline\">\n    <nui-radio *ngFor=\"let fruit of fruits\"\n                [value]=\"fruit\"\n                [checked]=\"fruit === 'Orange'\">\n        {{fruit}}\n    </nui-radio>\n</nui-radio-group>\n\n<h1 i18n>Selected color: {{selectedColor}}</h1>\n<nui-radio-group id=\"color-radio-group\"\n                 name=\"color\"\n                 [(value)]=\"selectedColor\">\n    <nui-radio *ngFor=\"let color of colors\"\n                [value]=\"color\"\n                [checked]=\"color === 'Green'\"\n                [hint]=\"colorHints[color]\">\n        {{color}}\n    </nui-radio>\n</nui-radio-group>\n\n<form [formGroup]=\"fancyForm\">\n    <nui-form-field caption=\"Radio Group\"\n                    hint=\"Some pretty long text with hint\"\n                    info=\"text\"\n                    [control]=\"fancyForm.controls['radioGroup']\">\n        <nui-radio-group id=\"vegetable-radio-group\"\n                         formControlName=\"radioGroup\"\n                         name=\"vegetable\" required>\n            <nui-radio *ngFor=\"let vegetable of vegetables\"\n                        [value]=\"vegetable\">\n                {{vegetable}}\n            </nui-radio>\n        </nui-radio-group>\n        <nui-validation-message for=\"required\">\n            This is required. C'mon\n        </nui-validation-message>\n    </nui-form-field>\n</form>\n\n<form [formGroup]=\"disabledForm\">\n    <nui-form-field caption=\"Radio Group\"\n                    [control]=\"disabledForm.controls['radioGroup']\">\n        <nui-radio-group id=\"disabled-radio-group\"\n                         formControlName=\"radioGroup\"\n                         name=\"vegetable\">\n            <nui-radio *ngFor=\"let vegetable of vegetables\"\n                        [value]=\"vegetable\">\n                {{vegetable}}\n            </nui-radio>\n        </nui-radio-group>\n    </nui-form-field>\n</form>\n<nui-checkbox id=\"toggle-disabled-group-checkbox\" [checked]=\"true\" (valueChange)=\"toggleDisabled($event)\">Disabled</nui-checkbox>\n","export default \"<h1 i18n>Selected fruit: {{selectedFruit}}</h1>\\n<nui-radio-group id=\\\"fruit-radio-group\\\"\\n                 name=\\\"fruit\\\"\\n                 [(value)]=\\\"selectedFruit\\\">\\n    <nui-radio *ngFor=\\\"let fruit of fruits\\\"\\n               [value]=\\\"fruit\\\"\\n               [checked]=\\\"fruit === 'Orange'\\\"\\n               [disabled]=\\\"fruit === 'Banana'\\\">\\n        {{fruit}}\\n    </nui-radio>\\n</nui-radio-group>\\n\\n<h1 i18n>Selected fruit: {{selectedFruitInline}}</h1>\\n<nui-radio-group id=\\\"fruit-radio-group-inline\\\"\\n                 name=\\\"fruit-inline\\\"\\n                 class=\\\"nui-radio-group-inline\\\"\\n                 [(value)]=\\\"selectedFruitInline\\\">\\n    <nui-radio *ngFor=\\\"let fruit of fruits\\\"\\n                [value]=\\\"fruit\\\"\\n                [checked]=\\\"fruit === 'Orange'\\\">\\n        {{fruit}}\\n    </nui-radio>\\n</nui-radio-group>\\n\\n<h1 i18n>Selected color: {{selectedColor}}</h1>\\n<nui-radio-group id=\\\"color-radio-group\\\"\\n                 name=\\\"color\\\"\\n                 [(value)]=\\\"selectedColor\\\">\\n    <nui-radio *ngFor=\\\"let color of colors\\\"\\n                [value]=\\\"color\\\"\\n                [checked]=\\\"color === 'Green'\\\"\\n                [hint]=\\\"colorHints[color]\\\">\\n        {{color}}\\n    </nui-radio>\\n</nui-radio-group>\\n\\n<form [formGroup]=\\\"fancyForm\\\">\\n    <nui-form-field caption=\\\"Radio Group\\\"\\n                    hint=\\\"Some pretty long text with hint\\\"\\n                    info=\\\"text\\\"\\n                    [control]=\\\"fancyForm.controls['radioGroup']\\\">\\n        <nui-radio-group id=\\\"vegetable-radio-group\\\"\\n                         formControlName=\\\"radioGroup\\\"\\n                         name=\\\"vegetable\\\" required>\\n            <nui-radio *ngFor=\\\"let vegetable of vegetables\\\"\\n                        [value]=\\\"vegetable\\\">\\n                {{vegetable}}\\n            </nui-radio>\\n        </nui-radio-group>\\n        <nui-validation-message for=\\\"required\\\">\\n            This is required. C'mon\\n        </nui-validation-message>\\n    </nui-form-field>\\n</form>\\n\\n<form [formGroup]=\\\"disabledForm\\\">\\n    <nui-form-field caption=\\\"Radio Group\\\"\\n                    [control]=\\\"disabledForm.controls['radioGroup']\\\">\\n        <nui-radio-group id=\\\"disabled-radio-group\\\"\\n                         formControlName=\\\"radioGroup\\\"\\n                         name=\\\"vegetable\\\">\\n            <nui-radio *ngFor=\\\"let vegetable of vegetables\\\"\\n                        [value]=\\\"vegetable\\\">\\n                {{vegetable}}\\n            </nui-radio>\\n        </nui-radio-group>\\n    </nui-form-field>\\n</form>\\n<nui-checkbox id=\\\"toggle-disabled-group-checkbox\\\" [checked]=\\\"true\\\" (valueChange)=\\\"toggleDisabled($event)\\\">Disabled</nui-checkbox>\\n\";","export default \"<h1 i18n>Selected color: {{selectedColor}}</h1>\\n<nui-radio-group name=\\\"color\\\"\\n                 [(value)]=\\\"selectedColor\\\"\\n                 (valueChange)=\\\"showSelected()\\\">\\n    <nui-radio *ngFor=\\\"let color of colors\\\"\\n               [value]=\\\"color\\\"\\n               [hint]=\\\"colorHints[color]\\\">\\n        {{color}}\\n    </nui-radio>\\n</nui-radio-group>\\n\";","import { Component, Inject } from \"@angular/core\";\nimport { IToastService, ToastService } from \"@nova-ui/bits\";\n\n@Component({\n    selector: \"nui-value-change-radio-group-example\",\n    templateUrl: \"./value-change-radio-group.example.component.html\",\n})\nexport class ValueChangeRadioGroupExampleComponent {\n    public colors = [$localize `Red`, $localize `Green`, $localize `Blue`];\n    public colorHints = { \"Red\": $localize `hot color`, \"Green\": $localize `color of nature`, \"Blue\": $localize `color of sky` };\n    public selectedColor: string;\n\n    constructor(@Inject(ToastService) private toastService: IToastService) {}\n\n    public showSelected() {\n        this.toastService.success({\n            message: $localize `You selected ${this.selectedColor}. Nice!`,\n        });\n    }\n}\n","<h1 i18n>Selected color: {{selectedColor}}</h1>\n<nui-radio-group name=\"color\"\n                 [(value)]=\"selectedColor\"\n                 (valueChange)=\"showSelected()\">\n    <nui-radio *ngFor=\"let color of colors\"\n               [value]=\"color\"\n               [hint]=\"colorHints[color]\">\n        {{color}}\n    </nui-radio>\n</nui-radio-group>\n","<h1 i18n>Selected fruit: {{selectedFruit}}</h1>\n<nui-radio-group id=\"fruit-radio-group-inline\"\n                 name=\"fruit\"\n                 class=\"nui-radio-group-inline\"\n                 [(value)]=\"selectedFruit\">\n    <nui-radio *ngFor=\"let fruit of fruits\"\n               [value]=\"fruit\"\n               [checked]=\"fruit === 'Orange'\">\n        {{fruit}}\n    </nui-radio>\n</nui-radio-group>\n","import { Component } from \"@angular/core\";\n\n\n@Component({\n    selector: \"nui-radio-group-inline-example\",\n    templateUrl: \"./radio-group-inline.example.component.html\",\n})\nexport class RadioGroupInlineExampleComponent {\n    public fruits = [$localize `Banana`, $localize `Orange`, $localize `Kiwi`, $localize `Papaya`];\n    public selectedFruit: string;\n\n    constructor() { }\n}\n","export default \"import { Component, OnInit } from \\\"@angular/core\\\";\\nimport { FormBuilder, FormGroup, Validators } from \\\"@angular/forms\\\";\\n\\n\\n@Component({\\n    selector: \\\"nui-radio-group-in-form-example\\\",\\n    templateUrl: \\\"./radio-group-in-form.example.component.html\\\",\\n})\\nexport class RadioGroupInFormExampleComponent implements OnInit {\\n    public fancyForm: FormGroup;\\n\\n    public vegetables = [$localize `Cabbage`, $localize `Potato`, $localize `Tomato`, $localize `Carrot`];\\n    constructor(private formBuilder: FormBuilder) {}\\n    public ngOnInit() {\\n        this.fancyForm = this.formBuilder.group({\\n            radioGroup: this.formBuilder.control(this.vegetables[1], [\\n                Validators.required,\\n            ]),\\n        });\\n    }\\n}\\n\";","export default \"import { Component } from \\\"@angular/core\\\";\\n\\n\\n@Component({\\n    selector: \\\"nui-disabled-radio-group-example\\\",\\n    templateUrl: \\\"./disabled-radio-group.example.component.html\\\",\\n})\\nexport class DisabledRadioGroupExampleComponent {\\n    public fruits = [$localize `Banana`, $localize `Orange`, $localize `Kiwi`, $localize `Papaya`];\\n    public selectedFruit: string;\\n\\n    constructor() { }\\n}\\n\";","export default \"export * from \\\"./radio-group-docs/radio-group-docs.example.component\\\";\\nexport * from \\\"./basic-radio-group/basic-radio-group.example.component\\\";\\nexport * from \\\"./disabled-radio-group/disabled-radio-group.example.component\\\";\\nexport * from \\\"./radio-group-with-hints/radio-group-hints.example.component\\\";\\nexport * from \\\"./value-change-radio-group/value-change-radio-group.example.component\\\";\\nexport * from \\\"./radio-group-inline/radio-group-inline.example.component\\\";\\nexport * from \\\"./radio-group-visual-test/radio-group-visual-test.component\\\";\\nexport * from \\\"./radio-group-in-form/radio-group-in-form.example.component\\\";\\nexport * from \\\"./radio-group-test/radio-group-test.component\\\";\\n\";","export default \"import { Component, OnInit } from \\\"@angular/core\\\";\\nimport { FormBuilder, FormGroup } from \\\"@angular/forms\\\";\\n\\n@Component({\\n    selector: \\\"nui-radio-group-visual-test\\\",\\n    templateUrl: \\\"./radio-group-visual-test.component.html\\\",\\n})\\nexport class RadioGroupVisualTestComponent implements OnInit {\\n    public disabledForm: FormGroup;\\n    public colors = [\\\"Red\\\", \\\"Green\\\", \\\"Blue\\\"];\\n    public colorHints = { \\\"Red\\\": \\\"hot color\\\", \\\"Green\\\": \\\"color of nature\\\", \\\"Blue\\\": \\\"color of sky\\\" };\\n    public fruits = [\\\"Banana\\\", \\\"Orange\\\", \\\"Kiwi\\\", \\\"Papaya\\\"];\\n    public selectedFruit: string;\\n    public selectedColor: string;\\n\\n    constructor(private formBuilder: FormBuilder) {}\\n\\n    public ngOnInit() {\\n        this.disabledForm = this.formBuilder.group({\\n            radioGroup: this.formBuilder.control({value: \\\"\\\", disabled: true}),\\n        });\\n    }\\n}\\n\";"]}