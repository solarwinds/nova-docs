{"version":3,"sources":["webpack:///demo/src/components/demo/toast/toast-events/toast-events.example.component.html?f924","webpack:///demo/src/components/demo/toast/toast-type/toast-type.example.component.ts?fda1","webpack:///demo/src/components/demo/toast/toast-docs/toast-docs.example.component.html?d3ff","webpack:///demo/src/components/demo/toast/toast-position/toast-position.example.component.ts?d45a","webpack:///demo/src/components/demo/toast/toast-sticky-error/toast-sticky-error.example.component.html?df64","webpack:///demo/src/components/demo/toast/toast-basic/toast-basic.example.component.ts","webpack:///demo/src/components/demo/toast/toast-basic/toast-basic.example.component.html","webpack:///demo/src/components/demo/toast/toast-visual-test/toast-visual-test.component.html?09fa","webpack:///demo/src/components/demo/toast/toast-basic/toast-basic.example.component.html?0f2f","webpack:///demo/src/components/demo/toast/toast-config/toast-config.example.component.ts?17e4","webpack:///demo/src/components/demo/toast/toast-test/toast-test.component.html?178e","webpack:///demo/src/components/demo/toast/toast-events/toast-events.example.component.ts","webpack:///demo/src/components/demo/toast/toast-events/toast-events.example.component.html","webpack:///demo/src/components/demo/toast/toast.module.ts?1a33","webpack:///demo/src/components/demo/toast/toast-type/toast-type.example.component.html?2692","webpack:///demo/src/components/demo/toast/index.ts?2fdc","webpack:///demo/src/components/demo/toast/toast-position/toast-position.example.component.ts","webpack:///demo/src/components/demo/toast/toast-position/toast-position.example.component.html","webpack:///demo/src/components/demo/toast/toast-events/toast-events.example.component.ts?41f9","webpack:///demo/src/components/demo/toast/toast-sticky-error/toast-sticky-error.example.component.ts","webpack:///demo/src/components/demo/toast/toast-sticky-error/toast-sticky-error.example.component.html","webpack:///demo/src/components/demo/toast/toast-visual-test/toast-visual-test.component.ts?4e49","webpack:///demo/src/components/demo/toast/toast-type/toast-type.example.component.ts","webpack:///demo/src/components/demo/toast/toast-type/toast-type.example.component.html","webpack:///demo/src/components/demo/toast/toast-config/toast-config.example.component.html?582c","webpack:///demo/src/components/demo/toast/toast-test/toast-test.component.ts","webpack:///demo/src/components/demo/toast/toast-test/toast-test.component.html","webpack:///demo/src/components/demo/toast/toast-sticky-error/toast-sticky-error.example.component.ts?688f","webpack:///demo/src/components/demo/toast/index.ts","webpack:///demo/src/components/demo/toast/toast.module.ts","webpack:///demo/src/components/demo/toast/toast-basic/toast-basic.example.component.ts?7af6","webpack:///demo/src/components/demo/toast/toast-basic-html/toast-basic-html.example.component.ts?88c7","webpack:///demo/src/components/demo/toast/toast-visual-test/toast-visual-test.component.ts","webpack:///demo/src/components/demo/toast/toast-visual-test/toast-visual-test.component.html","webpack:///demo/src/components/demo/toast/toast-test/toast-test.component.ts?8ad8","webpack:///demo/src/components/demo/toast/toast-docs/toast-docs.example.component.ts?8b15","webpack:///node_modules/raw-loader/dist/cjs.js .*\\.(ts|html|less)$?65b5","webpack:///demo/src/components/demo/toast/toast-basic-html/toast-basic-html.example.component.html?9553","webpack:///demo/src/components/demo/toast/toast-position/toast-position.example.component.html?a393","webpack:///demo/src/components/demo/toast/toast-basic-html/toast-basic-html.example.component.ts","webpack:///demo/src/components/demo/toast/toast-basic-html/toast-basic-html.example.component.html","webpack:///demo/src/components/demo/toast/toast-config/toast-config.example.component.ts","webpack:///demo/src/components/demo/toast/toast-config/toast-config.example.component.html","webpack:///demo/src/components/demo/toast/toast-docs/toast-docs.example.component.ts","webpack:///demo/src/components/demo/toast/toast-docs/toast-docs.example.component.html"],"names":["ToastBasicExampleComponent","toastService","setConfig","highlightMode","info","title","$localize","message","options","getOptions","timeOut","extendedTimeOut","onShowToast","ToastEventsExampleComponent","clickCount","toastCount","toastInstance","onShown","subscribe","isDisplayed","lastShown","toastId","onClick","onHidden","clickToDismiss","closeButton","positionClass","progressBar","progressAnimation","ToastPositionExampleComponent","toastPositions","displayValue","className","selectedPosition","ToastStickyErrorExampleComponent","error","clear","stickyError","onShowStickyError","onHideStickyError","ToastTypeExampleComponent","success","warning","onShowInfo","onShowSuccess","onShowWarning","onShowError","ToastTestComponent","defaults","toastClass","maxOpened","newestOnTop","enableHtml","reset","funcs","toast","i","count","type","fireToast","routes","path","component","data","ga","showThemeSwitcher","ToastModule","provide","useFactory","forChild","ToastVisualTestComponent","errorMessage","timeout","progress","header","position","enableProgressBar","showToastsAllPositions","showToastsFullWidth","clearToast","callStickyToast","showToastsAdjustSize","showToastsNoHeader","map","webpackContext","req","id","webpackContextResolve","__webpack_require__","o","e","Error","code","keys","webpackContextKeys","Object","resolve","module","exports","ToastBasicHtmlExampleComponent","showToastWithEnabledHtml","showToastWithDisabledHtml","showToastWithScriptTagIncluded","ToastConfigExampleComponent","ToastExampleComponent","key"],"mappings":"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","file":"demo-toast-toast-module-es5.js","sourcesContent":["export default \"<div *ngIf=\\\"isDisplayed; else notoast\\\">\\n    <nui-message type=\\\"info\\\" [allowDismiss]=\\\"false\\\">\\n        <div i18n>ID of last toast shown: {{lastShown}}</div>\\n    </nui-message>\\n    <nui-message type=\\\"info\\\" [allowDismiss]=\\\"false\\\">\\n        <div id=\\\"toast-example-click-counter\\\" i18n>Clicks on toast: {{clickCount}}</div>\\n    </nui-message>\\n</div>\\n<ng-template #notoast><nui-message type=\\\"info\\\" [allowDismiss]=\\\"false\\\" i18n>No toast displayed</nui-message></ng-template>\\n<nui-divider></nui-divider>\\n<button nui-button type=\\\"button\\\" id=\\\"nui-toast-events-example\\\" (click)=\\\"onShowToast($event)\\\" i18n>Show Toast</button>\\n\";","export default \"import { Component, Inject, OnInit } from \\\"@angular/core\\\";\\nimport { IToastConfig, IToastService, ToastService } from \\\"@nova-ui/bits\\\";\\n\\n@Component({\\n    selector: \\\"nui-toast-type-example\\\",\\n    templateUrl: \\\"./toast-type.example.component.html\\\",\\n})\\nexport class ToastTypeExampleComponent implements OnInit {\\n    constructor(@Inject(ToastService) private toastService: IToastService) { }\\n\\n    ngOnInit() {\\n        this.toastService.setConfig({}, \\\"id\\\");\\n    }\\n\\n    public onShowInfo(highlightMode: boolean): void {\\n        this.toastService.info({\\n            title: $localize `Info`,\\n            message: $localize `E pluribus unum (/ˈiː ˈplʊərɪbəs ˈjuːnəm/; Latin: [ˈeː ˈpluːrɪbʊs ˈuːnũː]) is Latin for 'Out of many, one'`,\\n            options: this.getOptions(),\\n        });\\n    }\\n\\n    public onShowSuccess(highlightMode: boolean): void {\\n        this.toastService.success({\\n            title: $localize `Success`,\\n            message: $localize `Well done!`,\\n            options:  this.getOptions(),\\n        });\\n    }\\n\\n    public onShowWarning(highlightMode: boolean): void {\\n        this.toastService.warning({\\n            title: $localize `Warning`,\\n            message: $localize `There can be only one.`,\\n            options:  this.getOptions(),\\n        });\\n    }\\n\\n    public onShowError(highlightMode: boolean): void {\\n        this.toastService.error({\\n            title: $localize `Error`,\\n            message: $localize `Nope.`,\\n            options:  this.getOptions(),\\n        });\\n    }\\n\\n    public clear(): void {\\n        this.toastService.clear();\\n    }\\n\\n    private getOptions(): IToastConfig {\\n        return {\\n            timeOut: 3000,\\n            extendedTimeOut: 1000,\\n        };\\n    }\\n}\\n\";","export default \"<h2>Required Modules</h2>\\n<ul>\\n    <li>\\n        <code>NuiToastModule</code>\\n    </li>\\n</ul>\\n\\n<h2>Basic Usage</h2>\\n<div>\\n    You can use <code>IToastService</code>, <code>ToastService</code> to show a (usually) temporary message (toast),\\n    associated with some event. In example below we're showing a toast message when the \\\"Show Toast\\\" button is clicked.\\n    Following construction is used to create a toast:\\n    <code>IToastService.info(toastDeclaration: <a href=\\\"../interfaces/IToastDeclaration.html\\\">IToastDeclaration</a>)</code>.\\n    Any property in <a href=\\\"../interfaces/IToastDeclaration.html\\\"><code>IToastDeclaration</code></a> is optional.\\n</div>\\n<p>\\n    When using the toast component with a title, a space is automatically inserted in front of the message body to create spacial separation from the title.\\n    In addition to the provided space, it's suggested that the user add a sentence-ending punctuation mark to the title to further emphasize this separation.\\n</p>\\n<nui-example-wrapper filenamePrefix=\\\"toast-basic\\\" exampleTitle=\\\"Basic usage\\\">\\n    <nui-toast-basic-example></nui-toast-basic-example>\\n</nui-example-wrapper>\\n\\n<h2>Basic Usage With Html</h2>\\n<p>\\n    Toast allows HTML usage inside the <code>{{getToastDeclarationKey(\\\"message\\\")}}</code> container by\\n    default. Note: The provided value will be sanitized and rendered.\\n</p>\\n<p>\\n    To configure a toast to display HTML as plain text, set the\\n    <code>{{getToastConfigKey(\\\"enableHtml\\\")}}</code> property in\\n    <code>{{getToastDeclarationKey(\\\"options\\\")}}</code> to <code>false</code>.\\n</p>\\n<p>\\n    When the <code>{{getToastConfigKey(\\\"enableHtml\\\")}}</code> flag is turned on, all the content will be\\n    sanitized, basic tags for changing fonts are often allowed, such as <code>&lt;b&gt;</code>, \\n    <code>&lt;i&gt;</code>, <code>&lt;u&gt;</code>, <code>&lt;em&gt;</code>, and \\n    <code>&lt;strong&gt;</code>. More advanced tags such as <code>&lt;script&gt;</code>,\\n    <code>&lt;object&gt;</code>, <code>&lt;embed&gt;</code>, and <code>&lt;link&gt;</code> are removed by\\n    the sanitization process. Additionally, potentially dangerous attributes such as\\n    <code>onclick</code> are removed in order to prevent malicious code from being injected.\\n</p>\\n<nui-example-wrapper filenamePrefix=\\\"toast-basic-html\\\" exampleTitle=\\\"Basic HTML Usage\\\">\\n    <nui-toast-basic-html-example></nui-toast-basic-html-example>\\n</nui-example-wrapper>\\n\\n<h2>Types</h2>\\n<p>\\n    Toast types allows you to convey some contextual information about the message by applying different styles to toasts.\\n</p>\\n<nui-example-wrapper filenamePrefix=\\\"toast-type\\\" exampleTitle=\\\"Types\\\">\\n    <nui-toast-type-example></nui-toast-type-example>\\n</nui-example-wrapper>\\n\\n<h2>Configuration</h2>\\n<p>\\n    Toast messages are highly configurable via <a href=\\\"../interfaces/IToastConfig.html\\\">IToastConfig</a> interface.\\n    The following example employs some of the more common settings:\\n    <br/>\\n    <code>\\n        extendedTimeOut: 2000,\\n        clickToDismiss: true,\\n        closeButton: true,\\n        positionClass: \\\"toast-bottom-right\\\",\\n        progressBar: true,\\n        progressAnimation: \\\"increasing\\\",\\n        timeOut: 5000\\n    </code>\\n</p>\\n<nui-example-wrapper filenamePrefix=\\\"toast-config\\\" exampleTitle=\\\"Configuration\\\">\\n    <nui-toast-config-example></nui-toast-config-example>\\n</nui-example-wrapper>\\n\\n<h2>Positioning</h2>\\n<p>\\n    The position of a toast message is determined by the value of <code>IToastConfig.positionClass</code>.\\n    By default toast is positioned top-right. To implement different positioning you must pass one of available\\n    options from <a href=\\\"../miscellaneous/enumerations.html#ToastPositionClass\\\"><code>ToastPositionClass</code></a>\\n    to <a href=\\\"../interfaces/IToastConfig.html\\\"><code>IToastConfig</code></a> positionClass property.<br /><br />\\n\\n    It is also possible to set a custom class to configure the position of the <code>nui-toast</code>.  Simply populate\\n    the <code>IToastConfig.positionClass</code> with the custom css class name.\\n\\n    <nui-message type=\\\"warning\\\" [allowDismiss]=\\\"false\\\">\\n        Make sure you defined a custom class in a global stylesheet\\n    </nui-message>\\n</p>\\n<nui-example-wrapper filenamePrefix=\\\"toast-position\\\" exampleTitle=\\\"Positioning\\\">\\n    <nui-toast-position-example></nui-toast-position-example>\\n</nui-example-wrapper>\\n\\n<h2>Sticky Error</h2>\\n<p>\\n    You can also optionally force error toasts to remain visible indefinitely using <code>IToastConfig.stickyError</code>.\\n    Note, that this option is only available with <code>IToastService.error</code>.\\n</p>\\n<nui-example-wrapper filenamePrefix=\\\"toast-sticky-error\\\" exampleTitle=\\\"Sticky error\\\">\\n    <nui-toast-sticky-error-example></nui-toast-sticky-error-example>\\n</nui-example-wrapper>\\n\\n<h2>Events</h2>\\n<p>\\n    With <a href=\\\"../interfaces/IActiveToast.html\\\">IActiveToast</a>, it's possible to\\n    capture (and act upon) following events per toast instance:\\n</p>\\n<ul>\\n    <li><code>onShown</code></li>\\n    <li><code>onHidden</code></li>\\n    <li><code>onClick</code></li>\\n</ul>\\n<nui-example-wrapper filenamePrefix=\\\"toast-events\\\" exampleTitle=\\\"Events\\\">\\n    <nui-toast-events-example></nui-toast-events-example>\\n</nui-example-wrapper>\\n\";","export default \"import { Component, Inject, OnInit } from \\\"@angular/core\\\";\\nimport { IToastConfig, IToastService, ToastPositionClass, ToastService } from \\\"@nova-ui/bits\\\";\\n\\n@Component({\\n    selector: \\\"nui-toast-position-example\\\",\\n    templateUrl: \\\"./toast-position.example.component.html\\\",\\n})\\nexport class ToastPositionExampleComponent implements OnInit {\\n    public toastPositions = [\\n        {\\n            displayValue: $localize `Top Right`,\\n            className: ToastPositionClass.TOP_RIGHT,\\n        },\\n        {\\n            displayValue: $localize `Top Left`,\\n            className: ToastPositionClass.TOP_LEFT,\\n        },\\n        {\\n            displayValue: $localize `Bottom Right`,\\n            className: ToastPositionClass.BOTTOM_RIGHT,\\n        },\\n        {\\n            displayValue: $localize `Bottom Left`,\\n            className: ToastPositionClass.BOTTOM_LEFT,\\n        },\\n        {\\n            displayValue: $localize `Top Full Width`,\\n            className: ToastPositionClass.TOP_FULL_WIDTH,\\n        },\\n        {\\n            displayValue: $localize `Bottom Full Width`,\\n            className: ToastPositionClass.BOTTOM_FULL_WIDTH,\\n        },\\n        {\\n            displayValue: $localize `Top Center`,\\n            className: ToastPositionClass.TOP_CENTER,\\n        },\\n        {\\n            displayValue: $localize `Bottom Center`,\\n            className: ToastPositionClass.BOTTOM_CENTER,\\n        },\\n        {\\n            displayValue: $localize `CUSTOM CLASS (top: 200px; right: 200px)`,\\n            className: \\\"demoToastCustomClass\\\",\\n        },\\n    ];\\n    public selectedPosition: ToastPositionClass | string = this.toastPositions[0].className;\\n\\n    constructor(@Inject(ToastService) private toastService: IToastService) { }\\n\\n    ngOnInit() {\\n        this.toastService.setConfig({}, \\\"id\\\");\\n    }\\n\\n    public onShowToast(highlightMode: boolean): void {\\n        this.toastService.info({\\n            title: $localize `Position Example`,\\n            message: this.selectedPosition,\\n            options: this.getOptions(),\\n        });\\n    }\\n\\n    private getOptions(): IToastConfig {\\n        return {\\n            timeOut: 5000,\\n            extendedTimeOut: 2000,\\n            positionClass: this.selectedPosition,\\n        };\\n    }\\n}\\n\";","export default \"<button nui-button type=\\\"button\\\" id=\\\"nui-show-sticky-error-toast-example\\\" (click)=\\\"onShowStickyError($event)\\\" i18n>Show Sticky Error</button>\\n<button nui-button type=\\\"button\\\" id=\\\"nui-hide-sticky-error-toast-example\\\" (click)=\\\"onHideStickyError($event)\\\" i18n>Hide Sticky Error</button>\\n\";","import { Component, Inject, OnInit } from \"@angular/core\";\nimport { IToastConfig, IToastService, ToastService } from \"@nova-ui/bits\";\n\n@Component({\n    selector: \"nui-toast-basic-example\",\n    templateUrl: \"./toast-basic.example.component.html\",\n})\nexport class ToastBasicExampleComponent implements OnInit {\n    constructor(@Inject(ToastService) private toastService: IToastService) { }\n\n    ngOnInit() {\n        this.toastService.setConfig({}, \"id\");\n    }\n\n    public onShowToast(highlightMode: boolean): void {\n        this.toastService.info({\n            title: $localize `Simple Toast.`,\n            message: $localize `Hi there! I'm a simple toast message`,\n            options: this.getOptions(),\n        });\n    }\n\n    private getOptions(): IToastConfig {\n        return {\n            timeOut: 5000,\n            extendedTimeOut: 2000,\n        };\n    }\n}\n","<button nui-button type=\"button\" id=\"nui-basic-toast-example\" (click)=\"onShowToast($event)\" i18n>Show Toast</button>\n","export default \"<div class=\\\"container pt-5\\\">\\n    <div class=\\\"row\\\">\\n        <div class=\\\"col\\\">\\n            <h3>Basic Toast Positioned defferently</h3>\\n        </div>\\n    </div>\\n    <div class=\\\"row\\\">\\n        <div class=\\\"col\\\">\\n            <div class=\\\"d-flex justify-content-start\\\" id=\\\"nui-toast-positions\\\">\\n                <button id=\\\"nui-toast-button-all-positions\\\" (click)=\\\"showToastsAllPositions($event, 200000)\\\">Trigger all positions</button>\\n            </div>\\n            <div class=\\\"d-flex justify-content-start\\\" id=\\\"nui-toast-fw\\\">\\n                <button id=\\\"nui-toast-position-fw\\\" (click)=\\\"showToastsFullWidth($event, 10000)\\\">Full Width</button>\\n            </div>\\n        </div>\\n    </div>\\n    <div class=\\\"row\\\">\\n        <div class=\\\"col\\\">\\n            <h3>Basic Toast Positioned defferently</h3>\\n        </div>\\n    </div>\\n    <div class=\\\"row\\\">\\n        <div class=\\\"col\\\">\\n            <div class=\\\"d-flex justify-content-start\\\">\\n                <button id=\\\"nui-toast-clear-all-toasts\\\" (click)=\\\"clearToast($event)\\\">Clear All Toasts</button>\\n                <button id=\\\"nui-toast-sticky\\\" (click)=\\\"callStickyToast($event)\\\">Call Sticky Error!</button>\\n            </div>\\n        </div>\\n    </div>\\n    <div class=\\\"row\\\">\\n        <div class=\\\"col\\\">\\n            <h3>Toast messages adjust size</h3>\\n        </div>\\n    </div>\\n    <div class=\\\"row\\\">\\n        <div class=\\\"col\\\">\\n            <div class=\\\"d-flex justify-content-start\\\" id=\\\"nui-toast-buttons-chain\\\">\\n                <button id=\\\"nui-toast-adjust-size\\\" (click)=\\\"showToastsAdjustSize($event, 10000)\\\">Trigger all toast messages</button>\\n            </div>\\n        </div>\\n    </div>\\n    <div class=\\\"row\\\">\\n        <div class=\\\"col\\\">\\n            <h3>Toast messages with no header</h3>\\n        </div>\\n    </div>\\n    <div class=\\\"row\\\">\\n        <div class=\\\"col\\\">\\n            <div class=\\\"d-flex justify-content-start\\\" id=\\\"nui-toast-buttons-chain-no-header\\\">\\n                <button id=\\\"nui-toast-no-header\\\" (click)=\\\"showToastsNoHeader($event, 10000)\\\">Trigger all toast messages</button>\\n            </div>\\n        </div>\\n    </div>\\n    <div class=\\\"row\\\">\\n        <div class=\\\"col\\\">\\n            <h3>Toast messages with progress bar</h3>\\n        </div>\\n    </div>\\n    <div class=\\\"row\\\">\\n        <div class=\\\"col\\\">\\n            <div class=\\\"d-flex justify-content-start\\\" id=\\\"nui-toast-positions\\\">\\n                <button id=\\\"nui-toast-button-all-positions-progress-bar\\\" (click)=\\\"showToastsAllPositions($event, 300000, true)\\\">Trigger all positions</button>\\n            </div>\\n        </div>\\n    </div>\\n</div>\\n\";","export default \"<button nui-button type=\\\"button\\\" id=\\\"nui-basic-toast-example\\\" (click)=\\\"onShowToast($event)\\\" i18n>Show Toast</button>\\n\";","export default \"import { Component, Inject, OnInit } from \\\"@angular/core\\\";\\nimport { IToastConfig, IToastService, ToastPositionClass, ToastService } from \\\"@nova-ui/bits\\\";\\n\\n@Component({\\n    selector: \\\"nui-toast-config-example\\\",\\n    templateUrl: \\\"./toast-config.example.component.html\\\",\\n})\\nexport class ToastConfigExampleComponent implements OnInit {\\n    public selectedPosition: string;\\n\\n    constructor(@Inject(ToastService) private toastService: IToastService) { }\\n\\n    ngOnInit() {\\n        this.toastService.setConfig({}, \\\"id\\\");\\n    }\\n\\n    public onShowToast(highlightMode: boolean): void {\\n        this.toastService.info({\\n            title: $localize `Toast Configuration`,\\n            message: $localize `I'm pretty easy to configure`,\\n            options: this.getOptions(),\\n        });\\n    }\\n\\n    private getOptions(): IToastConfig {\\n        return {\\n            extendedTimeOut: 2000,\\n            clickToDismiss: true,\\n            closeButton: true,\\n            positionClass: ToastPositionClass.BOTTOM_RIGHT,\\n            progressBar: true,\\n            progressAnimation: \\\"increasing\\\",\\n            timeOut: 5000,\\n        };\\n    }\\n}\\n\";","export default \"<div id=\\\"nui-toast-test\\\" class=\\\"container\\\">\\n    <div class=\\\"py-2\\\">\\n        <h3>Page settings</h3>\\n        <div>\\n            <label class=\\\"px-3 w-25\\\" for=\\\"txtCount\\\"> Number of toasts to show: </label>\\n            <input type=\\\"number\\\" id=\\\"txtCount\\\" [(ngModel)]=\\\"count\\\">\\n        </div>\\n\\n        <label class=\\\"px-3 w-25\\\"> Toast type </label>\\n        <input id=\\\"radioError\\\" type=\\\"radio\\\" name=\\\"type\\\" value=\\\"error\\\" [(ngModel)]=\\\"type\\\">\\n        <label for=\\\"radioError\\\" class=\\\"px-3\\\"> error </label>\\n        <input id=\\\"radioInfo\\\" type=\\\"radio\\\" name=\\\"type\\\" value=\\\"info\\\" [(ngModel)]=\\\"type\\\">\\n        <label for=\\\"radioInfo\\\" class=\\\"px-3\\\"> info </label>\\n        <input id=\\\"radioSuccess\\\" type=\\\"radio\\\" name=\\\"type\\\" value=\\\"success\\\" [(ngModel)]=\\\"type\\\">\\n        <label for=\\\"radioSuccess\\\" class=\\\"px-3\\\"> success </label>\\n        <input id=\\\"radioWarning\\\" type=\\\"radio\\\" name=\\\"type\\\" value=\\\"warning\\\" [(ngModel)]=\\\"type\\\">\\n        <label for=\\\"radioWarning\\\" class=\\\"px-3\\\"> warning </label>\\n    </div>\\n\\n    <div class=\\\"py-2\\\">\\n        <h3>Toast Configuration</h3>\\n        <div>\\n            <label class=\\\"px-3 w-25\\\" for=\\\"txtMessage\\\"> message </label>\\n            <input type=\\\"text\\\" id=\\\"txtMessage\\\" [(ngModel)]=\\\"toast.message\\\">\\n        </div>\\n        <div>\\n            <label class=\\\"px-3 w-25\\\" for=\\\"txtTitle\\\"> title </label>\\n            <input type=\\\"text\\\" id=\\\"txtTitle\\\" [(ngModel)]=\\\"toast.title\\\">\\n        </div>\\n    </div>\\n\\n    <div class=\\\"py-2\\\">\\n        <h3>Options</h3>\\n        <div>\\n            <label class=\\\"px-3 w-25\\\" for=\\\"txtTimeOut\\\"> timeOut </label>\\n            <input type=\\\"text\\\" id=\\\"txtTimeOut\\\" [(ngModel)]=\\\"toast.options.timeOut\\\">\\n        </div>\\n        <div>\\n            <label class=\\\"px-3 w-25\\\" for=\\\"txtExtendedTimeOut\\\"> extendedTimeOut </label>\\n            <input type=\\\"text\\\" id=\\\"txtExtendedTimeOut\\\" [(ngModel)]=\\\"toast.options.extendedTimeOut\\\">\\n        </div>\\n        <div>\\n            <label class=\\\"px-3 w-25\\\" for=\\\"chbCloseButton\\\">closeButton</label>\\n            <input type=\\\"checkbox\\\" id=\\\"chbCloseButton\\\" [(ngModel)]=\\\"toast.options.closeButton\\\">\\n        </div>\\n        <div>\\n            <label class=\\\"px-3 w-25\\\" for=\\\"chbProgressBar\\\">progressBar</label>\\n            <input type=\\\"checkbox\\\" id=\\\"chbProgressBar\\\" [(ngModel)]=\\\"toast.options.progressBar\\\">\\n        </div>\\n        <div>\\n            <label class=\\\"px-3 w-25\\\">progressAnimation</label>\\n            <input id=\\\"radioIncreasing\\\" type=\\\"radio\\\" name=\\\"progressAnimation\\\" value=\\\"increasing\\\"\\n                [(ngModel)]=\\\"toast.options.progressAnimation\\\">\\n            <label for=\\\"radioIncreasing\\\" class=\\\"px-3\\\"> increasing </label>\\n            <input id=\\\"radioDecreasing\\\" type=\\\"radio\\\" name=\\\"progressAnimation\\\" value=\\\"decreasing\\\"\\n                [(ngModel)]=\\\"toast.options.progressAnimation\\\">\\n            <label for=\\\"radioDecreasing\\\" class=\\\"px-3\\\"> decreasing </label>\\n        </div>\\n        <div>\\n            <label class=\\\"px-3 w-25\\\" for=\\\"chbEnableHtml\\\">enableHtml</label>\\n            <input type=\\\"checkbox\\\" id=\\\"chbEnableHtml\\\" [(ngModel)]=\\\"toast.options.enableHtml\\\">\\n        </div>\\n        <div>\\n            <label class=\\\"px-3 w-25\\\" for=\\\"txtToastClass\\\">toastClass</label>\\n            <input type=\\\"text\\\" id=\\\"txtToastClass\\\" [(ngModel)]=\\\"toast.options.toastClass\\\">\\n        </div>\\n        <div>\\n            <label class=\\\"px-3 w-25\\\">positionClass</label>\\n            <span class=\\\"d-inline-block\\\" style=\\\"vertical-align: middle;\\\">\\n                <input id=\\\"radioTopCenter\\\" type=\\\"radio\\\" name=\\\"positionClass\\\" value=\\\"nui-toast--top-center\\\"\\n                    [(ngModel)]=\\\"toast.options.positionClass\\\">\\n                <label for=\\\"radioTopCenter\\\" class=\\\"px-3\\\"> TOP_CENTER </label>\\n                <input id=\\\"radioTopLeft\\\" type=\\\"radio\\\" name=\\\"positionClass\\\" value=\\\"nui-toast--top-left\\\"\\n                    [(ngModel)]=\\\"toast.options.positionClass\\\">\\n                <label for=\\\"radioTopLeft\\\" class=\\\"px-3\\\"> TOP_LEFT </label>\\n                <input id=\\\"radioTopRight\\\" type=\\\"radio\\\" name=\\\"positionClass\\\" value=\\\"nui-toast--top-right\\\"\\n                    [(ngModel)]=\\\"toast.options.positionClass\\\">\\n                <label for=\\\"radioTopRight\\\" class=\\\"px-3\\\"> TOP_RIGHT </label>\\n                <input id=\\\"radioTopFullWidth\\\" type=\\\"radio\\\" name=\\\"positionClass\\\" value=\\\"nui-toast--top-full-width\\\"\\n                    [(ngModel)]=\\\"toast.options.positionClass\\\">\\n                <label for=\\\"radioTopFullWidth\\\" class=\\\"px-3\\\"> TOP_FULL_WIDTH </label>\\n                <br>\\n                <input id=\\\"radioBottomCenter\\\" type=\\\"radio\\\" name=\\\"positionClass\\\" value=\\\"nui-toast--bottom-center\\\"\\n                    [(ngModel)]=\\\"toast.options.positionClass\\\">\\n                <label for=\\\"radioBottomCenter\\\" class=\\\"px-3\\\"> BOTTOM_CENTER </label>\\n                <input id=\\\"radioBottomLeft\\\" type=\\\"radio\\\" name=\\\"positionClass\\\" value=\\\"nui-toast--bottom-left\\\"\\n                    [(ngModel)]=\\\"toast.options.positionClass\\\">\\n                <label for=\\\"radioBottomLeft\\\" class=\\\"px-3\\\"> BOTTOM_LEFT </label>\\n                <input id=\\\"radioBottomRight\\\" type=\\\"radio\\\" name=\\\"positionClass\\\" value=\\\"nui-toast--bottom-right\\\"\\n                    [(ngModel)]=\\\"toast.options.positionClass\\\">\\n                <label for=\\\"radioBottomRight\\\" class=\\\"px-3\\\"> BOTTOM_RIGHT </label>\\n                <input id=\\\"radioBottomFullWidth\\\" type=\\\"radio\\\" name=\\\"positionClass\\\" value=\\\"nui-toast--bottom-full-width\\\"\\n                    [(ngModel)]=\\\"toast.options.positionClass\\\">\\n                <label for=\\\"radioBottomFullWidth\\\" class=\\\"px-3\\\"> BOTTOM_FULL_WIDTH </label>\\n                <input id=\\\"radioCustomClass\\\" type=\\\"radio\\\" name=\\\"positionClass\\\" value=\\\"demoToastCustomClass\\\"\\n                    [(ngModel)]=\\\"toast.options.positionClass\\\">\\n                <label for=\\\"radioCustomClass\\\" class=\\\"px-3\\\"> CUSTOM_CLASS </label>\\n            </span>\\n        </div>\\n        <div>\\n            <label class=\\\"px-3 w-25\\\" for=\\\"chbClickToDismiss\\\">clickToDismiss</label>\\n            <input type=\\\"checkbox\\\" id=\\\"chbClickToDismiss\\\" [(ngModel)]=\\\"toast.options.clickToDismiss\\\">\\n        </div>\\n        <div>\\n            <label class=\\\"px-3 w-25\\\" for=\\\"chbStickyError\\\">stickyError</label>\\n            <input type=\\\"checkbox\\\" id=\\\"chbStickyError\\\" [(ngModel)]=\\\"toast.options.stickyError\\\">\\n        </div>\\n        <div>\\n            <label class=\\\"px-3 w-25\\\" for=\\\"txtMaxOpened\\\">maxOpened</label>\\n            <input type=\\\"number\\\" id=\\\"txtMaxOpened\\\" [(ngModel)]=\\\"toast.options.maxOpened\\\">\\n        </div>\\n        <div>\\n            <label class=\\\"px-3 w-25\\\" for=\\\"chbAutoDismiss\\\">autoDismiss</label>\\n            <input type=\\\"checkbox\\\" id=\\\"chbAutoDismiss\\\" [(ngModel)]=\\\"toast.options.autoDismiss\\\">\\n        </div>\\n        <div>\\n            <label class=\\\"px-3 w-25\\\" for=\\\"chbNewestOnTop\\\">newestOnTop</label>\\n            <input type=\\\"checkbox\\\" id=\\\"chbNewestOnTop\\\" [(ngModel)]=\\\"toast.options.newestOnTop\\\">\\n        </div>\\n        <div>\\n            <label class=\\\"px-3 w-25\\\" for=\\\"chbPreventDuplicates\\\">preventDuplicates</label>\\n            <input type=\\\"checkbox\\\" id=\\\"chbPreventDuplicates\\\" [(ngModel)]=\\\"toast.options.preventDuplicates\\\">\\n        </div>\\n\\n    </div>\\n\\n    <div class=\\\"p-5\\\" style=\\\"text-align: center\\\">\\n        <button class=\\\"px-5\\\" id=\\\"btnFire\\\" (click)=\\\"fireToast()\\\">Fire Toast(s)!</button>\\n        <button class=\\\"px-3 ml-3\\\" id=\\\"btnReset\\\" (click)=\\\"reset()\\\">Reset form</button>\\n    </div>\\n</div>\\n\";","import { Component, Inject, OnInit } from \"@angular/core\";\nimport { IActiveToast, IToastConfig, IToastService, ToastPositionClass, ToastService } from \"@nova-ui/bits\";\n\n@Component({\n    selector: \"nui-toast-events-example\",\n    templateUrl: \"./toast-events.example.component.html\",\n})\n\nexport class ToastEventsExampleComponent implements OnInit {\n    public lastShown?: number;\n    public clickCount = 0;\n    public toastCount = 0;\n    public isDisplayed: boolean;\n\n    constructor(@Inject(ToastService) private toastService: IToastService) { }\n\n    ngOnInit() {\n        this.toastService.setConfig({}, \"id\");\n    }\n\n    public onShowToast(highlightMode: boolean): void {\n        const toastInstance: IActiveToast = this.toastService.info({\n            title: $localize `Toast Events`,\n            message: $localize `Click Me!`,\n            options: this.getOptions(),\n        });\n        toastInstance.onShown?.subscribe(() => {\n            ++this.toastCount;\n            this.isDisplayed = true;\n            this.lastShown = toastInstance.toastId;\n        });\n\n        toastInstance.onClick?.subscribe(() => {\n            ++this.clickCount;\n        });\n\n        toastInstance.onHidden?.subscribe(() => {\n            --this.toastCount;\n            this.isDisplayed = this.toastCount > 0;\n        });\n    }\n\n    private getOptions(): IToastConfig {\n        return {\n            extendedTimeOut: 5000,\n            clickToDismiss: false,\n            closeButton: false,\n            positionClass: ToastPositionClass.TOP_RIGHT,\n            progressBar: true,\n            progressAnimation: \"increasing\",\n            timeOut: 10000,\n        };\n    }\n}\n","<div *ngIf=\"isDisplayed; else notoast\">\n    <nui-message type=\"info\" [allowDismiss]=\"false\">\n        <div i18n>ID of last toast shown: {{lastShown}}</div>\n    </nui-message>\n    <nui-message type=\"info\" [allowDismiss]=\"false\">\n        <div id=\"toast-example-click-counter\" i18n>Clicks on toast: {{clickCount}}</div>\n    </nui-message>\n</div>\n<ng-template #notoast><nui-message type=\"info\" [allowDismiss]=\"false\" i18n>No toast displayed</nui-message></ng-template>\n<nui-divider></nui-divider>\n<button nui-button type=\"button\" id=\"nui-toast-events-example\" (click)=\"onShowToast($event)\" i18n>Show Toast</button>\n","export default \"import { NgModule } from \\\"@angular/core\\\";\\nimport { FormsModule, ReactiveFormsModule } from \\\"@angular/forms\\\";\\nimport { RouterModule } from \\\"@angular/router\\\";\\nimport {\\n    DEMO_PATH_TOKEN,\\n    NuiButtonModule,\\n    NuiDividerModule,\\n    NuiDocsModule,\\n    NuiMessageModule,\\n    NuiRadioModule,\\n    NuiToastModule,\\n    SrlcStage,\\n} from \\\"@nova-ui/bits\\\";\\n\\nimport {\\n    ToastBasicExampleComponent,\\n    ToastConfigExampleComponent,\\n    ToastEventsExampleComponent,\\n    ToastExampleComponent,\\n    ToastPositionExampleComponent,\\n    ToastStickyErrorExampleComponent,\\n    ToastTestComponent,\\n    ToastTypeExampleComponent,\\n    ToastVisualTestComponent,\\n} from \\\"./index\\\";\\nimport { ToastBasicHtmlExampleComponent } from \\\"./toast-basic-html/toast-basic-html.example.component\\\";\\n\\nconst routes = [\\n    {\\n        path: \\\"\\\",\\n        component: ToastExampleComponent,\\n        data: {\\n            \\\"srlc\\\": {\\n                \\\"stage\\\": SrlcStage.ga,\\n            },\\n            showThemeSwitcher: true,\\n        },\\n    },\\n    {\\n        path: \\\"toast-visual-test\\\",\\n        component: ToastVisualTestComponent,\\n        data: {\\n            \\\"srlc\\\": {\\n                \\\"hideIndicator\\\": true,\\n            },\\n        },\\n    },\\n    {\\n        path: \\\"test\\\",\\n        component: ToastTestComponent,\\n        data: {\\n            \\\"srlc\\\": {\\n                \\\"hideIndicator\\\": true,\\n            },\\n        },\\n    },\\n];\\n\\n@NgModule({\\n    imports: [\\n        NuiButtonModule,\\n        NuiToastModule,\\n        FormsModule,\\n        ReactiveFormsModule,\\n        NuiMessageModule,\\n        NuiRadioModule,\\n        NuiDividerModule,\\n        NuiDocsModule,\\n        RouterModule.forChild(routes),\\n    ],\\n    declarations: [\\n        ToastBasicExampleComponent,\\n        ToastBasicHtmlExampleComponent,\\n        ToastConfigExampleComponent,\\n        ToastEventsExampleComponent,\\n        ToastExampleComponent,\\n        ToastPositionExampleComponent,\\n        ToastStickyErrorExampleComponent,\\n        ToastTestComponent,\\n        ToastTypeExampleComponent,\\n        ToastVisualTestComponent,\\n    ],\\n    providers: [\\n        {\\n            provide: DEMO_PATH_TOKEN,\\n            useFactory: () => (<any>require).context(`!!raw-loader!./`, true, /.*\\\\.(ts|html|less)$/),\\n        },\\n    ],\\n    exports: [\\n        RouterModule,\\n    ],\\n})\\nexport class ToastModule {\\n}\\n\";","export default \"<button nui-button type=\\\"button\\\" id=\\\"nui-info-toast\\\" (click)=\\\"onShowInfo($event)\\\" i18n>Info</button>\\n<button nui-button type=\\\"button\\\" id=\\\"nui-success-toast\\\" (click)=\\\"onShowSuccess($event)\\\" i18n>Success</button>\\n<button nui-button type=\\\"button\\\" id=\\\"nui-warning-toast\\\" (click)=\\\"onShowWarning($event)\\\" i18n>Warning</button>\\n<button nui-button type=\\\"button\\\" id=\\\"nui-error-toast\\\" (click)=\\\"onShowError($event)\\\" i18n>Error</button>\\n<button nui-button type=\\\"button\\\" id=\\\"nui-hide-all-toasts\\\" (click)=\\\"clear()\\\" i18n>Hide Toasts</button>\\n\";","export default \"export * from \\\"./toast-basic/toast-basic.example.component\\\";\\nexport * from \\\"./toast-sticky-error/toast-sticky-error.example.component\\\";\\nexport * from \\\"./toast-config/toast-config.example.component\\\";\\nexport * from \\\"./toast-docs/toast-docs.example.component\\\";\\nexport * from \\\"./toast-events/toast-events.example.component\\\";\\nexport * from \\\"./toast-position/toast-position.example.component\\\";\\nexport * from \\\"./toast-type/toast-type.example.component\\\";\\nexport * from \\\"./toast-visual-test/toast-visual-test.component\\\";\\nexport * from \\\"./toast-test/toast-test.component\\\";\\n\";","import { Component, Inject, OnInit } from \"@angular/core\";\nimport { IToastConfig, IToastService, ToastPositionClass, ToastService } from \"@nova-ui/bits\";\n\n@Component({\n    selector: \"nui-toast-position-example\",\n    templateUrl: \"./toast-position.example.component.html\",\n})\nexport class ToastPositionExampleComponent implements OnInit {\n    public toastPositions = [\n        {\n            displayValue: $localize `Top Right`,\n            className: ToastPositionClass.TOP_RIGHT,\n        },\n        {\n            displayValue: $localize `Top Left`,\n            className: ToastPositionClass.TOP_LEFT,\n        },\n        {\n            displayValue: $localize `Bottom Right`,\n            className: ToastPositionClass.BOTTOM_RIGHT,\n        },\n        {\n            displayValue: $localize `Bottom Left`,\n            className: ToastPositionClass.BOTTOM_LEFT,\n        },\n        {\n            displayValue: $localize `Top Full Width`,\n            className: ToastPositionClass.TOP_FULL_WIDTH,\n        },\n        {\n            displayValue: $localize `Bottom Full Width`,\n            className: ToastPositionClass.BOTTOM_FULL_WIDTH,\n        },\n        {\n            displayValue: $localize `Top Center`,\n            className: ToastPositionClass.TOP_CENTER,\n        },\n        {\n            displayValue: $localize `Bottom Center`,\n            className: ToastPositionClass.BOTTOM_CENTER,\n        },\n        {\n            displayValue: $localize `CUSTOM CLASS (top: 200px; right: 200px)`,\n            className: \"demoToastCustomClass\",\n        },\n    ];\n    public selectedPosition: ToastPositionClass | string = this.toastPositions[0].className;\n\n    constructor(@Inject(ToastService) private toastService: IToastService) { }\n\n    ngOnInit() {\n        this.toastService.setConfig({}, \"id\");\n    }\n\n    public onShowToast(highlightMode: boolean): void {\n        this.toastService.info({\n            title: $localize `Position Example`,\n            message: this.selectedPosition,\n            options: this.getOptions(),\n        });\n    }\n\n    private getOptions(): IToastConfig {\n        return {\n            timeOut: 5000,\n            extendedTimeOut: 2000,\n            positionClass: this.selectedPosition,\n        };\n    }\n}\n","<div class=\"nui-flex-container\">\n    <div>\n        <nui-radio-group [(value)]=\"selectedPosition\">\n            <nui-radio *ngFor=\"let position of toastPositions\"\n                        id=\"{{'nui-toast-position-'+position.className}}\"\n                        [checked]=\"position.className === 'nui-toast--top-right'\"\n                        [value]=\"position.className\">\n                {{position.displayValue}}\n            </nui-radio>\n        </nui-radio-group>\n    </div>\n</div>\n<button nui-button type=\"button\" id=\"nui-toast-position-example\" (click)=\"onShowToast($event)\" i18n>Show Toast</button>\n","export default \"import { Component, Inject, OnInit } from \\\"@angular/core\\\";\\nimport { IActiveToast, IToastConfig, IToastService, ToastPositionClass, ToastService } from \\\"@nova-ui/bits\\\";\\n\\n@Component({\\n    selector: \\\"nui-toast-events-example\\\",\\n    templateUrl: \\\"./toast-events.example.component.html\\\",\\n})\\n\\nexport class ToastEventsExampleComponent implements OnInit {\\n    public lastShown?: number;\\n    public clickCount = 0;\\n    public toastCount = 0;\\n    public isDisplayed: boolean;\\n\\n    constructor(@Inject(ToastService) private toastService: IToastService) { }\\n\\n    ngOnInit() {\\n        this.toastService.setConfig({}, \\\"id\\\");\\n    }\\n\\n    public onShowToast(highlightMode: boolean): void {\\n        const toastInstance: IActiveToast = this.toastService.info({\\n            title: $localize `Toast Events`,\\n            message: $localize `Click Me!`,\\n            options: this.getOptions(),\\n        });\\n        toastInstance.onShown?.subscribe(() => {\\n            ++this.toastCount;\\n            this.isDisplayed = true;\\n            this.lastShown = toastInstance.toastId;\\n        });\\n\\n        toastInstance.onClick?.subscribe(() => {\\n            ++this.clickCount;\\n        });\\n\\n        toastInstance.onHidden?.subscribe(() => {\\n            --this.toastCount;\\n            this.isDisplayed = this.toastCount > 0;\\n        });\\n    }\\n\\n    private getOptions(): IToastConfig {\\n        return {\\n            extendedTimeOut: 5000,\\n            clickToDismiss: false,\\n            closeButton: false,\\n            positionClass: ToastPositionClass.TOP_RIGHT,\\n            progressBar: true,\\n            progressAnimation: \\\"increasing\\\",\\n            timeOut: 10000,\\n        };\\n    }\\n}\\n\";","import { Component, Inject, OnInit } from \"@angular/core\";\nimport { IToastConfig, IToastService, ToastPositionClass, ToastService } from \"@nova-ui/bits\";\n\n@Component({\n    selector: \"nui-toast-sticky-error-example\",\n    templateUrl: \"./toast-sticky-error.example.component.html\",\n})\nexport class ToastStickyErrorExampleComponent implements OnInit {\n    public selectedPosition: string;\n\n    constructor(@Inject(ToastService) private toastService: IToastService) { }\n\n    ngOnInit() {\n        this.toastService.setConfig({}, \"id\");\n    }\n\n    public onShowStickyError(highlightMode: boolean): void {\n        this.toastService.error({\n            title: $localize `Sticky Error`,\n            message: $localize `Red Alert`,\n            options: this.getOptions(),\n        });\n    }\n\n    public onHideStickyError(highlightMode: boolean): void {\n        this.toastService.clear();\n    }\n\n    private getOptions(): IToastConfig {\n        return {\n            clickToDismiss: false,\n            closeButton: false,\n            positionClass: ToastPositionClass.TOP_RIGHT,\n            stickyError: true,\n        };\n    }\n}\n","<button nui-button type=\"button\" id=\"nui-show-sticky-error-toast-example\" (click)=\"onShowStickyError($event)\" i18n>Show Sticky Error</button>\n<button nui-button type=\"button\" id=\"nui-hide-sticky-error-toast-example\" (click)=\"onHideStickyError($event)\" i18n>Hide Sticky Error</button>\n","export default \"import { Component, Inject, OnInit } from \\\"@angular/core\\\";\\nimport { IToastConfig, IToastService, ToastPositionClass, ToastService } from \\\"@nova-ui/bits\\\";\\n\\n@Component({\\n    selector: \\\"nui-toast-visual\\\",\\n    templateUrl: \\\"./toast-visual-test.component.html\\\",\\n})\\nexport class ToastVisualTestComponent implements OnInit {\\n\\n    private errorMessage: string = `Something went wrong + in addition there is an extremely\\n    long line that verifies that the toast expands as more text comes into it. More or less text -\\n    Toast messages must look good either way!`;\\n\\n    constructor(@Inject(ToastService) private toastService: IToastService) { }\\n\\n    ngOnInit() {\\n        this.toastService.setConfig({}, \\\"id\\\");\\n    }\\n\\n    public showToastsAllPositions(highlightMode: boolean, timeout: number, progress: boolean = false): void {\\n        this.onShowInfo(highlightMode, timeout, progress, ToastPositionClass.TOP_LEFT);\\n        this.onShowError(highlightMode, timeout, progress, ToastPositionClass.TOP_RIGHT, \\\"Error\\\", this.errorMessage);\\n        this.onShowSuccess(highlightMode, timeout, progress, ToastPositionClass.BOTTOM_LEFT);\\n        this.onShowWarning(highlightMode, timeout, progress, ToastPositionClass.BOTTOM_RIGHT);\\n        this.onShowInfo(highlightMode, timeout, progress, ToastPositionClass.TOP_CENTER);\\n        this.onShowError(highlightMode, timeout, progress, ToastPositionClass.BOTTOM_CENTER);\\n    }\\n\\n    public showToastsFullWidth(highlightMode: boolean, timeout: number, progress: boolean = false) {\\n        this.onShowSuccess(highlightMode, timeout, progress, ToastPositionClass.TOP_FULL_WIDTH);\\n        this.onShowWarning(highlightMode, timeout, progress, ToastPositionClass.BOTTOM_FULL_WIDTH);\\n    }\\n\\n    public showToastsAdjustSize(highlightMode: boolean, timeout: number, progress: boolean = false): void {\\n        this.onShowInfo(highlightMode, timeout, progress, ToastPositionClass.TOP_RIGHT);\\n        this.onShowSuccess(highlightMode, timeout, progress, ToastPositionClass.TOP_RIGHT);\\n        this.onShowWarning(highlightMode, timeout, progress, ToastPositionClass.TOP_RIGHT);\\n        this.onShowError(highlightMode, timeout, progress, ToastPositionClass.TOP_RIGHT, \\\"Error\\\", this.errorMessage);\\n    }\\n\\n    public showToastsNoHeader(highlightMode: boolean, timeout: number, progress: boolean = false, header: string = \\\"\\\"): void {\\n        this.onShowInfo(highlightMode, timeout, progress, ToastPositionClass.TOP_RIGHT, header);\\n        this.onShowSuccess(highlightMode, timeout, progress, ToastPositionClass.TOP_RIGHT, header);\\n        this.onShowWarning(highlightMode, timeout, progress, ToastPositionClass.TOP_RIGHT, header);\\n        this.onShowError(highlightMode, timeout, progress, ToastPositionClass.TOP_RIGHT, header);\\n    }\\n\\n    // eslint-disable-next-line max-len\\n    public onShowInfo(highlightMode: boolean, timeout: number, progress: boolean = false, position: ToastPositionClass, title: string = \\\"Information\\\", message: string = \\\"Some info message\\\"): void {\\n        this.toastService.info({\\n            title: title,\\n            message: `${message}`,\\n            options:  this.getOptions(timeout, position, progress),\\n        });\\n    }\\n\\n    // eslint-disable-next-line max-len\\n    public onShowError(highlightMode: boolean, timeout: number, progress: boolean = false, position: ToastPositionClass, title: string = \\\"Failure!\\\", message: string = \\\"Something went wrong\\\"): void {\\n        this.toastService.error({\\n            title: title,\\n            message: `${message}`,\\n            options:  this.getOptions(timeout, position, progress),\\n        });\\n    }\\n\\n    // eslint-disable-next-line max-len\\n    public onShowSuccess(highlightMode: boolean, timeout: number, progress: boolean = false, position: ToastPositionClass, title: string = \\\"Well Done!\\\", message: string = \\\"You're great!\\\"): void {\\n        this.toastService.success({\\n            title: title,\\n            message: `${message}`,\\n            options:  this.getOptions(timeout, position, progress),\\n        });\\n    }\\n\\n    // eslint-disable-next-line max-len\\n    public onShowWarning(highlightMode: boolean, timeout: number, progress: boolean = false, position: ToastPositionClass, title: string = \\\"Attention!\\\", message: string = \\\"Pay attention!\\\"): void {\\n        this.toastService.warning({\\n            title: title,\\n            message: `${message}`,\\n            options:  this.getOptions(timeout, position, progress),\\n        });\\n    }\\n\\n    public callStickyToast(highlightMode: boolean) {\\n        this.toastService.error({\\n            title: \\\"Failure\\\",\\n            message: \\\"This error is sticky!\\\",\\n            options: { stickyError: true },\\n        });\\n    }\\n\\n    public clearToast(highlightMode: boolean): void {\\n        this.toastService.clear();\\n    }\\n\\n    private getOptions(timeout: number, position: ToastPositionClass, enableProgressBar: boolean = false): IToastConfig {\\n        return {\\n            timeOut: timeout,\\n            extendedTimeOut: 2000,\\n            positionClass: position,\\n            progressBar: enableProgressBar,\\n        };\\n    }\\n}\\n\";","import { Component, Inject, OnInit } from \"@angular/core\";\nimport { IToastConfig, IToastService, ToastService } from \"@nova-ui/bits\";\n\n@Component({\n    selector: \"nui-toast-type-example\",\n    templateUrl: \"./toast-type.example.component.html\",\n})\nexport class ToastTypeExampleComponent implements OnInit {\n    constructor(@Inject(ToastService) private toastService: IToastService) { }\n\n    ngOnInit() {\n        this.toastService.setConfig({}, \"id\");\n    }\n\n    public onShowInfo(highlightMode: boolean): void {\n        this.toastService.info({\n            title: $localize `Info`,\n            message: $localize `E pluribus unum (/ˈiː ˈplʊərɪbəs ˈjuːnəm/; Latin: [ˈeː ˈpluːrɪbʊs ˈuːnũː]) is Latin for 'Out of many, one'`,\n            options: this.getOptions(),\n        });\n    }\n\n    public onShowSuccess(highlightMode: boolean): void {\n        this.toastService.success({\n            title: $localize `Success`,\n            message: $localize `Well done!`,\n            options:  this.getOptions(),\n        });\n    }\n\n    public onShowWarning(highlightMode: boolean): void {\n        this.toastService.warning({\n            title: $localize `Warning`,\n            message: $localize `There can be only one.`,\n            options:  this.getOptions(),\n        });\n    }\n\n    public onShowError(highlightMode: boolean): void {\n        this.toastService.error({\n            title: $localize `Error`,\n            message: $localize `Nope.`,\n            options:  this.getOptions(),\n        });\n    }\n\n    public clear(): void {\n        this.toastService.clear();\n    }\n\n    private getOptions(): IToastConfig {\n        return {\n            timeOut: 3000,\n            extendedTimeOut: 1000,\n        };\n    }\n}\n","<button nui-button type=\"button\" id=\"nui-info-toast\" (click)=\"onShowInfo($event)\" i18n>Info</button>\n<button nui-button type=\"button\" id=\"nui-success-toast\" (click)=\"onShowSuccess($event)\" i18n>Success</button>\n<button nui-button type=\"button\" id=\"nui-warning-toast\" (click)=\"onShowWarning($event)\" i18n>Warning</button>\n<button nui-button type=\"button\" id=\"nui-error-toast\" (click)=\"onShowError($event)\" i18n>Error</button>\n<button nui-button type=\"button\" id=\"nui-hide-all-toasts\" (click)=\"clear()\" i18n>Hide Toasts</button>\n","export default \"<button nui-button type=\\\"button\\\" id=\\\"nui-toast-config-example\\\" (click)=\\\"onShowToast($event)\\\" i18n>Show Toast</button>\\n\";","import { Component, Inject, OnInit } from \"@angular/core\";\nimport {\n    IActiveToast,\n    IToastConfig,\n    IToastDeclaration,\n    IToastService,\n    ToastPositionClass,\n    ToastService,\n} from \"@nova-ui/bits\";\n\n@Component({\n    selector: \"nui-toast-test\",\n    templateUrl: \"./toast-test.component.html\",\n})\nexport class ToastTestComponent implements OnInit {\n    constructor(@Inject(ToastService) private toastService: IToastService) { }\n\n    private defaults: IToastDeclaration = {\n        message: \"\",\n        title: \"\",\n        options: {\n            timeOut: 5000,\n            extendedTimeOut: 2000,\n            closeButton: true,\n            progressBar: true,\n            progressAnimation: \"decreasing\",\n            toastClass: \"nui-toast\",\n            positionClass: ToastPositionClass.TOP_RIGHT,\n            maxOpened: 0,           // unlimited\n            newestOnTop: true,\n            enableHtml: false,\n        },\n    };\n    // Using intersection type to avoid adding optional chaining operator (?) multiple times in template\n    // because options property is optional.\n    public toast: IToastDeclaration & {options: IToastConfig};\n    public count: number;\n    public type: string;\n\n    ngOnInit() {\n        this.reset();\n    }\n\n    public fireToast() {\n        const funcs: Record<string, (toast: IToastDeclaration) => IActiveToast> = {\n            \"error\": (toast) => this.toastService.error(toast),\n            \"info\": (toast) => this.toastService.info(toast),\n            \"success\": (toast) => this.toastService.success(toast),\n            \"warning\": (toast) => this.toastService.warning(toast),\n        };\n\n        for (let i = 0; i < this.count; i++) {\n            funcs[this.type](this.toast);\n        }\n    }\n\n    public reset() {\n        this.count = 1;\n        this.type = \"info\";\n        this.toast = { ...this.defaults, options: { ...this.defaults.options } };\n        this.toastService.clear();\n    }\n}\n","<div id=\"nui-toast-test\" class=\"container\">\n    <div class=\"py-2\">\n        <h3>Page settings</h3>\n        <div>\n            <label class=\"px-3 w-25\" for=\"txtCount\"> Number of toasts to show: </label>\n            <input type=\"number\" id=\"txtCount\" [(ngModel)]=\"count\">\n        </div>\n\n        <label class=\"px-3 w-25\"> Toast type </label>\n        <input id=\"radioError\" type=\"radio\" name=\"type\" value=\"error\" [(ngModel)]=\"type\">\n        <label for=\"radioError\" class=\"px-3\"> error </label>\n        <input id=\"radioInfo\" type=\"radio\" name=\"type\" value=\"info\" [(ngModel)]=\"type\">\n        <label for=\"radioInfo\" class=\"px-3\"> info </label>\n        <input id=\"radioSuccess\" type=\"radio\" name=\"type\" value=\"success\" [(ngModel)]=\"type\">\n        <label for=\"radioSuccess\" class=\"px-3\"> success </label>\n        <input id=\"radioWarning\" type=\"radio\" name=\"type\" value=\"warning\" [(ngModel)]=\"type\">\n        <label for=\"radioWarning\" class=\"px-3\"> warning </label>\n    </div>\n\n    <div class=\"py-2\">\n        <h3>Toast Configuration</h3>\n        <div>\n            <label class=\"px-3 w-25\" for=\"txtMessage\"> message </label>\n            <input type=\"text\" id=\"txtMessage\" [(ngModel)]=\"toast.message\">\n        </div>\n        <div>\n            <label class=\"px-3 w-25\" for=\"txtTitle\"> title </label>\n            <input type=\"text\" id=\"txtTitle\" [(ngModel)]=\"toast.title\">\n        </div>\n    </div>\n\n    <div class=\"py-2\">\n        <h3>Options</h3>\n        <div>\n            <label class=\"px-3 w-25\" for=\"txtTimeOut\"> timeOut </label>\n            <input type=\"text\" id=\"txtTimeOut\" [(ngModel)]=\"toast.options.timeOut\">\n        </div>\n        <div>\n            <label class=\"px-3 w-25\" for=\"txtExtendedTimeOut\"> extendedTimeOut </label>\n            <input type=\"text\" id=\"txtExtendedTimeOut\" [(ngModel)]=\"toast.options.extendedTimeOut\">\n        </div>\n        <div>\n            <label class=\"px-3 w-25\" for=\"chbCloseButton\">closeButton</label>\n            <input type=\"checkbox\" id=\"chbCloseButton\" [(ngModel)]=\"toast.options.closeButton\">\n        </div>\n        <div>\n            <label class=\"px-3 w-25\" for=\"chbProgressBar\">progressBar</label>\n            <input type=\"checkbox\" id=\"chbProgressBar\" [(ngModel)]=\"toast.options.progressBar\">\n        </div>\n        <div>\n            <label class=\"px-3 w-25\">progressAnimation</label>\n            <input id=\"radioIncreasing\" type=\"radio\" name=\"progressAnimation\" value=\"increasing\"\n                [(ngModel)]=\"toast.options.progressAnimation\">\n            <label for=\"radioIncreasing\" class=\"px-3\"> increasing </label>\n            <input id=\"radioDecreasing\" type=\"radio\" name=\"progressAnimation\" value=\"decreasing\"\n                [(ngModel)]=\"toast.options.progressAnimation\">\n            <label for=\"radioDecreasing\" class=\"px-3\"> decreasing </label>\n        </div>\n        <div>\n            <label class=\"px-3 w-25\" for=\"chbEnableHtml\">enableHtml</label>\n            <input type=\"checkbox\" id=\"chbEnableHtml\" [(ngModel)]=\"toast.options.enableHtml\">\n        </div>\n        <div>\n            <label class=\"px-3 w-25\" for=\"txtToastClass\">toastClass</label>\n            <input type=\"text\" id=\"txtToastClass\" [(ngModel)]=\"toast.options.toastClass\">\n        </div>\n        <div>\n            <label class=\"px-3 w-25\">positionClass</label>\n            <span class=\"d-inline-block\" style=\"vertical-align: middle;\">\n                <input id=\"radioTopCenter\" type=\"radio\" name=\"positionClass\" value=\"nui-toast--top-center\"\n                    [(ngModel)]=\"toast.options.positionClass\">\n                <label for=\"radioTopCenter\" class=\"px-3\"> TOP_CENTER </label>\n                <input id=\"radioTopLeft\" type=\"radio\" name=\"positionClass\" value=\"nui-toast--top-left\"\n                    [(ngModel)]=\"toast.options.positionClass\">\n                <label for=\"radioTopLeft\" class=\"px-3\"> TOP_LEFT </label>\n                <input id=\"radioTopRight\" type=\"radio\" name=\"positionClass\" value=\"nui-toast--top-right\"\n                    [(ngModel)]=\"toast.options.positionClass\">\n                <label for=\"radioTopRight\" class=\"px-3\"> TOP_RIGHT </label>\n                <input id=\"radioTopFullWidth\" type=\"radio\" name=\"positionClass\" value=\"nui-toast--top-full-width\"\n                    [(ngModel)]=\"toast.options.positionClass\">\n                <label for=\"radioTopFullWidth\" class=\"px-3\"> TOP_FULL_WIDTH </label>\n                <br>\n                <input id=\"radioBottomCenter\" type=\"radio\" name=\"positionClass\" value=\"nui-toast--bottom-center\"\n                    [(ngModel)]=\"toast.options.positionClass\">\n                <label for=\"radioBottomCenter\" class=\"px-3\"> BOTTOM_CENTER </label>\n                <input id=\"radioBottomLeft\" type=\"radio\" name=\"positionClass\" value=\"nui-toast--bottom-left\"\n                    [(ngModel)]=\"toast.options.positionClass\">\n                <label for=\"radioBottomLeft\" class=\"px-3\"> BOTTOM_LEFT </label>\n                <input id=\"radioBottomRight\" type=\"radio\" name=\"positionClass\" value=\"nui-toast--bottom-right\"\n                    [(ngModel)]=\"toast.options.positionClass\">\n                <label for=\"radioBottomRight\" class=\"px-3\"> BOTTOM_RIGHT </label>\n                <input id=\"radioBottomFullWidth\" type=\"radio\" name=\"positionClass\" value=\"nui-toast--bottom-full-width\"\n                    [(ngModel)]=\"toast.options.positionClass\">\n                <label for=\"radioBottomFullWidth\" class=\"px-3\"> BOTTOM_FULL_WIDTH </label>\n                <input id=\"radioCustomClass\" type=\"radio\" name=\"positionClass\" value=\"demoToastCustomClass\"\n                    [(ngModel)]=\"toast.options.positionClass\">\n                <label for=\"radioCustomClass\" class=\"px-3\"> CUSTOM_CLASS </label>\n            </span>\n        </div>\n        <div>\n            <label class=\"px-3 w-25\" for=\"chbClickToDismiss\">clickToDismiss</label>\n            <input type=\"checkbox\" id=\"chbClickToDismiss\" [(ngModel)]=\"toast.options.clickToDismiss\">\n        </div>\n        <div>\n            <label class=\"px-3 w-25\" for=\"chbStickyError\">stickyError</label>\n            <input type=\"checkbox\" id=\"chbStickyError\" [(ngModel)]=\"toast.options.stickyError\">\n        </div>\n        <div>\n            <label class=\"px-3 w-25\" for=\"txtMaxOpened\">maxOpened</label>\n            <input type=\"number\" id=\"txtMaxOpened\" [(ngModel)]=\"toast.options.maxOpened\">\n        </div>\n        <div>\n            <label class=\"px-3 w-25\" for=\"chbAutoDismiss\">autoDismiss</label>\n            <input type=\"checkbox\" id=\"chbAutoDismiss\" [(ngModel)]=\"toast.options.autoDismiss\">\n        </div>\n        <div>\n            <label class=\"px-3 w-25\" for=\"chbNewestOnTop\">newestOnTop</label>\n            <input type=\"checkbox\" id=\"chbNewestOnTop\" [(ngModel)]=\"toast.options.newestOnTop\">\n        </div>\n        <div>\n            <label class=\"px-3 w-25\" for=\"chbPreventDuplicates\">preventDuplicates</label>\n            <input type=\"checkbox\" id=\"chbPreventDuplicates\" [(ngModel)]=\"toast.options.preventDuplicates\">\n        </div>\n\n    </div>\n\n    <div class=\"p-5\" style=\"text-align: center\">\n        <button class=\"px-5\" id=\"btnFire\" (click)=\"fireToast()\">Fire Toast(s)!</button>\n        <button class=\"px-3 ml-3\" id=\"btnReset\" (click)=\"reset()\">Reset form</button>\n    </div>\n</div>\n","export default \"import { Component, Inject, OnInit } from \\\"@angular/core\\\";\\nimport { IToastConfig, IToastService, ToastPositionClass, ToastService } from \\\"@nova-ui/bits\\\";\\n\\n@Component({\\n    selector: \\\"nui-toast-sticky-error-example\\\",\\n    templateUrl: \\\"./toast-sticky-error.example.component.html\\\",\\n})\\nexport class ToastStickyErrorExampleComponent implements OnInit {\\n    public selectedPosition: string;\\n\\n    constructor(@Inject(ToastService) private toastService: IToastService) { }\\n\\n    ngOnInit() {\\n        this.toastService.setConfig({}, \\\"id\\\");\\n    }\\n\\n    public onShowStickyError(highlightMode: boolean): void {\\n        this.toastService.error({\\n            title: $localize `Sticky Error`,\\n            message: $localize `Red Alert`,\\n            options: this.getOptions(),\\n        });\\n    }\\n\\n    public onHideStickyError(highlightMode: boolean): void {\\n        this.toastService.clear();\\n    }\\n\\n    private getOptions(): IToastConfig {\\n        return {\\n            clickToDismiss: false,\\n            closeButton: false,\\n            positionClass: ToastPositionClass.TOP_RIGHT,\\n            stickyError: true,\\n        };\\n    }\\n}\\n\";","export * from \"./toast-basic/toast-basic.example.component\";\nexport * from \"./toast-sticky-error/toast-sticky-error.example.component\";\nexport * from \"./toast-config/toast-config.example.component\";\nexport * from \"./toast-docs/toast-docs.example.component\";\nexport * from \"./toast-events/toast-events.example.component\";\nexport * from \"./toast-position/toast-position.example.component\";\nexport * from \"./toast-type/toast-type.example.component\";\nexport * from \"./toast-visual-test/toast-visual-test.component\";\nexport * from \"./toast-test/toast-test.component\";\n","import { NgModule } from \"@angular/core\";\nimport { FormsModule, ReactiveFormsModule } from \"@angular/forms\";\nimport { RouterModule } from \"@angular/router\";\nimport {\n    DEMO_PATH_TOKEN,\n    NuiButtonModule,\n    NuiDividerModule,\n    NuiDocsModule,\n    NuiMessageModule,\n    NuiRadioModule,\n    NuiToastModule,\n    SrlcStage,\n} from \"@nova-ui/bits\";\n\nimport {\n    ToastBasicExampleComponent,\n    ToastConfigExampleComponent,\n    ToastEventsExampleComponent,\n    ToastExampleComponent,\n    ToastPositionExampleComponent,\n    ToastStickyErrorExampleComponent,\n    ToastTestComponent,\n    ToastTypeExampleComponent,\n    ToastVisualTestComponent,\n} from \"./index\";\nimport { ToastBasicHtmlExampleComponent } from \"./toast-basic-html/toast-basic-html.example.component\";\n\nconst routes = [\n    {\n        path: \"\",\n        component: ToastExampleComponent,\n        data: {\n            \"srlc\": {\n                \"stage\": SrlcStage.ga,\n            },\n            showThemeSwitcher: true,\n        },\n    },\n    {\n        path: \"toast-visual-test\",\n        component: ToastVisualTestComponent,\n        data: {\n            \"srlc\": {\n                \"hideIndicator\": true,\n            },\n        },\n    },\n    {\n        path: \"test\",\n        component: ToastTestComponent,\n        data: {\n            \"srlc\": {\n                \"hideIndicator\": true,\n            },\n        },\n    },\n];\n\n@NgModule({\n    imports: [\n        NuiButtonModule,\n        NuiToastModule,\n        FormsModule,\n        ReactiveFormsModule,\n        NuiMessageModule,\n        NuiRadioModule,\n        NuiDividerModule,\n        NuiDocsModule,\n        RouterModule.forChild(routes),\n    ],\n    declarations: [\n        ToastBasicExampleComponent,\n        ToastBasicHtmlExampleComponent,\n        ToastConfigExampleComponent,\n        ToastEventsExampleComponent,\n        ToastExampleComponent,\n        ToastPositionExampleComponent,\n        ToastStickyErrorExampleComponent,\n        ToastTestComponent,\n        ToastTypeExampleComponent,\n        ToastVisualTestComponent,\n    ],\n    providers: [\n        {\n            provide: DEMO_PATH_TOKEN,\n            useFactory: () => (<any>require).context(`!!raw-loader!./`, true, /.*\\.(ts|html|less)$/),\n        },\n    ],\n    exports: [\n        RouterModule,\n    ],\n})\nexport class ToastModule {\n}\n","export default \"import { Component, Inject, OnInit } from \\\"@angular/core\\\";\\nimport { IToastConfig, IToastService, ToastService } from \\\"@nova-ui/bits\\\";\\n\\n@Component({\\n    selector: \\\"nui-toast-basic-example\\\",\\n    templateUrl: \\\"./toast-basic.example.component.html\\\",\\n})\\nexport class ToastBasicExampleComponent implements OnInit {\\n    constructor(@Inject(ToastService) private toastService: IToastService) { }\\n\\n    ngOnInit() {\\n        this.toastService.setConfig({}, \\\"id\\\");\\n    }\\n\\n    public onShowToast(highlightMode: boolean): void {\\n        this.toastService.info({\\n            title: $localize `Simple Toast.`,\\n            message: $localize `Hi there! I'm a simple toast message`,\\n            options: this.getOptions(),\\n        });\\n    }\\n\\n    private getOptions(): IToastConfig {\\n        return {\\n            timeOut: 5000,\\n            extendedTimeOut: 2000,\\n        };\\n    }\\n}\\n\";","export default \"import { Component, Inject, OnInit } from \\\"@angular/core\\\";\\nimport { IToastService, ToastService } from \\\"@nova-ui/bits\\\";\\n\\n@Component({\\n    selector: \\\"nui-toast-basic-html-example\\\",\\n    templateUrl: \\\"./toast-basic-html.example.component.html\\\",\\n})\\nexport class ToastBasicHtmlExampleComponent implements OnInit {\\n\\n    constructor(@Inject(ToastService) private toastService: IToastService) { }\\n\\n    ngOnInit() {\\n        this.toastService.setConfig({ timeOut: 5000, extendedTimeOut: 2000 }, \\\"id\\\");\\n    }\\n\\n    public showToastWithEnabledHtml(): void {\\n        this.toastService.info({\\n            title: $localize `Toast with enableHtml set to true`,\\n            message: $localize `Hi there! I'm a simple toast message. <a href=\\\"#\\\">Awesome link</a>`,\\n            options: {\\n                enableHtml: true, // Note: Default value\\n            },\\n        });\\n    }\\n\\n    public showToastWithDisabledHtml(): void {\\n        this.toastService.info({\\n            title: $localize `Toast with enableHtml set to false`,\\n            message: $localize `Hi there! I'm a simple toast message <a href=\\\"#\\\">Awesome link</a>`,\\n            options: {\\n                enableHtml: false,\\n            },\\n        });\\n    }\\n\\n    public showToastWithScriptTagIncluded(): void {\\n        this.toastService.info({\\n            title: $localize `Toast with forbidden tags and enableHtml set to true`,\\n            message: $localize `\\n                Hi there! I'm a toast message with forbidden tags:\\n                <script>alert(\\\"You shall not pass\\\")</script>\\n                <object width=\\\"400\\\" height=\\\"400\\\"></object>\\n                <iframe src=\\\"https://www.solarwinds.com/\\\"></iframe>\\n                <embed src=\\\"https://www.solarwinds.com/\\\">\\n                `,\\n            options: {\\n                enableHtml: true, // Note: Default value\\n            },\\n        });\\n    }\\n\\n}\\n\";","import { Component, Inject, OnInit } from \"@angular/core\";\nimport { IToastConfig, IToastService, ToastPositionClass, ToastService } from \"@nova-ui/bits\";\n\n@Component({\n    selector: \"nui-toast-visual\",\n    templateUrl: \"./toast-visual-test.component.html\",\n})\nexport class ToastVisualTestComponent implements OnInit {\n\n    private errorMessage: string = `Something went wrong + in addition there is an extremely\n    long line that verifies that the toast expands as more text comes into it. More or less text -\n    Toast messages must look good either way!`;\n\n    constructor(@Inject(ToastService) private toastService: IToastService) { }\n\n    ngOnInit() {\n        this.toastService.setConfig({}, \"id\");\n    }\n\n    public showToastsAllPositions(highlightMode: boolean, timeout: number, progress: boolean = false): void {\n        this.onShowInfo(highlightMode, timeout, progress, ToastPositionClass.TOP_LEFT);\n        this.onShowError(highlightMode, timeout, progress, ToastPositionClass.TOP_RIGHT, \"Error\", this.errorMessage);\n        this.onShowSuccess(highlightMode, timeout, progress, ToastPositionClass.BOTTOM_LEFT);\n        this.onShowWarning(highlightMode, timeout, progress, ToastPositionClass.BOTTOM_RIGHT);\n        this.onShowInfo(highlightMode, timeout, progress, ToastPositionClass.TOP_CENTER);\n        this.onShowError(highlightMode, timeout, progress, ToastPositionClass.BOTTOM_CENTER);\n    }\n\n    public showToastsFullWidth(highlightMode: boolean, timeout: number, progress: boolean = false) {\n        this.onShowSuccess(highlightMode, timeout, progress, ToastPositionClass.TOP_FULL_WIDTH);\n        this.onShowWarning(highlightMode, timeout, progress, ToastPositionClass.BOTTOM_FULL_WIDTH);\n    }\n\n    public showToastsAdjustSize(highlightMode: boolean, timeout: number, progress: boolean = false): void {\n        this.onShowInfo(highlightMode, timeout, progress, ToastPositionClass.TOP_RIGHT);\n        this.onShowSuccess(highlightMode, timeout, progress, ToastPositionClass.TOP_RIGHT);\n        this.onShowWarning(highlightMode, timeout, progress, ToastPositionClass.TOP_RIGHT);\n        this.onShowError(highlightMode, timeout, progress, ToastPositionClass.TOP_RIGHT, \"Error\", this.errorMessage);\n    }\n\n    public showToastsNoHeader(highlightMode: boolean, timeout: number, progress: boolean = false, header: string = \"\"): void {\n        this.onShowInfo(highlightMode, timeout, progress, ToastPositionClass.TOP_RIGHT, header);\n        this.onShowSuccess(highlightMode, timeout, progress, ToastPositionClass.TOP_RIGHT, header);\n        this.onShowWarning(highlightMode, timeout, progress, ToastPositionClass.TOP_RIGHT, header);\n        this.onShowError(highlightMode, timeout, progress, ToastPositionClass.TOP_RIGHT, header);\n    }\n\n    // eslint-disable-next-line max-len\n    public onShowInfo(highlightMode: boolean, timeout: number, progress: boolean = false, position: ToastPositionClass, title: string = \"Information\", message: string = \"Some info message\"): void {\n        this.toastService.info({\n            title: title,\n            message: `${message}`,\n            options:  this.getOptions(timeout, position, progress),\n        });\n    }\n\n    // eslint-disable-next-line max-len\n    public onShowError(highlightMode: boolean, timeout: number, progress: boolean = false, position: ToastPositionClass, title: string = \"Failure!\", message: string = \"Something went wrong\"): void {\n        this.toastService.error({\n            title: title,\n            message: `${message}`,\n            options:  this.getOptions(timeout, position, progress),\n        });\n    }\n\n    // eslint-disable-next-line max-len\n    public onShowSuccess(highlightMode: boolean, timeout: number, progress: boolean = false, position: ToastPositionClass, title: string = \"Well Done!\", message: string = \"You're great!\"): void {\n        this.toastService.success({\n            title: title,\n            message: `${message}`,\n            options:  this.getOptions(timeout, position, progress),\n        });\n    }\n\n    // eslint-disable-next-line max-len\n    public onShowWarning(highlightMode: boolean, timeout: number, progress: boolean = false, position: ToastPositionClass, title: string = \"Attention!\", message: string = \"Pay attention!\"): void {\n        this.toastService.warning({\n            title: title,\n            message: `${message}`,\n            options:  this.getOptions(timeout, position, progress),\n        });\n    }\n\n    public callStickyToast(highlightMode: boolean) {\n        this.toastService.error({\n            title: \"Failure\",\n            message: \"This error is sticky!\",\n            options: { stickyError: true },\n        });\n    }\n\n    public clearToast(highlightMode: boolean): void {\n        this.toastService.clear();\n    }\n\n    private getOptions(timeout: number, position: ToastPositionClass, enableProgressBar: boolean = false): IToastConfig {\n        return {\n            timeOut: timeout,\n            extendedTimeOut: 2000,\n            positionClass: position,\n            progressBar: enableProgressBar,\n        };\n    }\n}\n","<div class=\"container pt-5\">\n    <div class=\"row\">\n        <div class=\"col\">\n            <h3>Basic Toast Positioned defferently</h3>\n        </div>\n    </div>\n    <div class=\"row\">\n        <div class=\"col\">\n            <div class=\"d-flex justify-content-start\" id=\"nui-toast-positions\">\n                <button id=\"nui-toast-button-all-positions\" (click)=\"showToastsAllPositions($event, 200000)\">Trigger all positions</button>\n            </div>\n            <div class=\"d-flex justify-content-start\" id=\"nui-toast-fw\">\n                <button id=\"nui-toast-position-fw\" (click)=\"showToastsFullWidth($event, 10000)\">Full Width</button>\n            </div>\n        </div>\n    </div>\n    <div class=\"row\">\n        <div class=\"col\">\n            <h3>Basic Toast Positioned defferently</h3>\n        </div>\n    </div>\n    <div class=\"row\">\n        <div class=\"col\">\n            <div class=\"d-flex justify-content-start\">\n                <button id=\"nui-toast-clear-all-toasts\" (click)=\"clearToast($event)\">Clear All Toasts</button>\n                <button id=\"nui-toast-sticky\" (click)=\"callStickyToast($event)\">Call Sticky Error!</button>\n            </div>\n        </div>\n    </div>\n    <div class=\"row\">\n        <div class=\"col\">\n            <h3>Toast messages adjust size</h3>\n        </div>\n    </div>\n    <div class=\"row\">\n        <div class=\"col\">\n            <div class=\"d-flex justify-content-start\" id=\"nui-toast-buttons-chain\">\n                <button id=\"nui-toast-adjust-size\" (click)=\"showToastsAdjustSize($event, 10000)\">Trigger all toast messages</button>\n            </div>\n        </div>\n    </div>\n    <div class=\"row\">\n        <div class=\"col\">\n            <h3>Toast messages with no header</h3>\n        </div>\n    </div>\n    <div class=\"row\">\n        <div class=\"col\">\n            <div class=\"d-flex justify-content-start\" id=\"nui-toast-buttons-chain-no-header\">\n                <button id=\"nui-toast-no-header\" (click)=\"showToastsNoHeader($event, 10000)\">Trigger all toast messages</button>\n            </div>\n        </div>\n    </div>\n    <div class=\"row\">\n        <div class=\"col\">\n            <h3>Toast messages with progress bar</h3>\n        </div>\n    </div>\n    <div class=\"row\">\n        <div class=\"col\">\n            <div class=\"d-flex justify-content-start\" id=\"nui-toast-positions\">\n                <button id=\"nui-toast-button-all-positions-progress-bar\" (click)=\"showToastsAllPositions($event, 300000, true)\">Trigger all positions</button>\n            </div>\n        </div>\n    </div>\n</div>\n","export default \"import { Component, Inject, OnInit } from \\\"@angular/core\\\";\\nimport {\\n    IActiveToast,\\n    IToastConfig,\\n    IToastDeclaration,\\n    IToastService,\\n    ToastPositionClass,\\n    ToastService,\\n} from \\\"@nova-ui/bits\\\";\\n\\n@Component({\\n    selector: \\\"nui-toast-test\\\",\\n    templateUrl: \\\"./toast-test.component.html\\\",\\n})\\nexport class ToastTestComponent implements OnInit {\\n    constructor(@Inject(ToastService) private toastService: IToastService) { }\\n\\n    private defaults: IToastDeclaration = {\\n        message: \\\"\\\",\\n        title: \\\"\\\",\\n        options: {\\n            timeOut: 5000,\\n            extendedTimeOut: 2000,\\n            closeButton: true,\\n            progressBar: true,\\n            progressAnimation: \\\"decreasing\\\",\\n            toastClass: \\\"nui-toast\\\",\\n            positionClass: ToastPositionClass.TOP_RIGHT,\\n            maxOpened: 0,           // unlimited\\n            newestOnTop: true,\\n            enableHtml: false,\\n        },\\n    };\\n    // Using intersection type to avoid adding optional chaining operator (?) multiple times in template\\n    // because options property is optional.\\n    public toast: IToastDeclaration & {options: IToastConfig};\\n    public count: number;\\n    public type: string;\\n\\n    ngOnInit() {\\n        this.reset();\\n    }\\n\\n    public fireToast() {\\n        const funcs: Record<string, (toast: IToastDeclaration) => IActiveToast> = {\\n            \\\"error\\\": (toast) => this.toastService.error(toast),\\n            \\\"info\\\": (toast) => this.toastService.info(toast),\\n            \\\"success\\\": (toast) => this.toastService.success(toast),\\n            \\\"warning\\\": (toast) => this.toastService.warning(toast),\\n        };\\n\\n        for (let i = 0; i < this.count; i++) {\\n            funcs[this.type](this.toast);\\n        }\\n    }\\n\\n    public reset() {\\n        this.count = 1;\\n        this.type = \\\"info\\\";\\n        this.toast = { ...this.defaults, options: { ...this.defaults.options } };\\n        this.toastService.clear();\\n    }\\n}\\n\";","export default \"import { Component } from \\\"@angular/core\\\";\\nimport { IToastConfig, IToastDeclaration } from \\\"@nova-ui/bits\\\";\\n\\n@Component({\\n    selector: \\\"nui-toast-docs-example\\\",\\n    templateUrl: \\\"./toast-docs.example.component.html\\\",\\n})\\nexport class ToastExampleComponent {\\n    getToastDeclarationKey(key: keyof IToastDeclaration): string {\\n        return key;\\n    }\\n    getToastConfigKey(key: keyof IToastConfig): string {\\n        return key;\\n    }\\n}\\n\";","var map = {\n\t\"./index.ts\": \"L9yT\",\n\t\"./toast-basic-html/toast-basic-html.example.component.html\": \"lVOQ\",\n\t\"./toast-basic-html/toast-basic-html.example.component.ts\": \"iMfI\",\n\t\"./toast-basic/toast-basic.example.component.html\": \"Dy+8\",\n\t\"./toast-basic/toast-basic.example.component.ts\": \"evYZ\",\n\t\"./toast-config/toast-config.example.component.html\": \"WCz1\",\n\t\"./toast-config/toast-config.example.component.ts\": \"F+Re\",\n\t\"./toast-docs/toast-docs.example.component.html\": \"0/8W\",\n\t\"./toast-docs/toast-docs.example.component.ts\": \"ixWd\",\n\t\"./toast-events/toast-events.example.component.html\": \"+SQs\",\n\t\"./toast-events/toast-events.example.component.ts\": \"QfmY\",\n\t\"./toast-position/toast-position.example.component.html\": \"o5Nh\",\n\t\"./toast-position/toast-position.example.component.ts\": \"1Fq8\",\n\t\"./toast-sticky-error/toast-sticky-error.example.component.html\": \"32Qo\",\n\t\"./toast-sticky-error/toast-sticky-error.example.component.ts\": \"aI/t\",\n\t\"./toast-test/toast-test.component.html\": \"F45P\",\n\t\"./toast-test/toast-test.component.ts\": \"itjl\",\n\t\"./toast-type/toast-type.example.component.html\": \"JpLm\",\n\t\"./toast-type/toast-type.example.component.ts\": \"/aG4\",\n\t\"./toast-visual-test/toast-visual-test.component.html\": \"Cfpd\",\n\t\"./toast-visual-test/toast-visual-test.component.ts\": \"Tkmm\",\n\t\"./toast.module.ts\": \"GjN6\"\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = \"l6xF\";","export default \"<button nui-button type=\\\"button\\\" id=\\\"nui-basic-toast-html-example-1\\\" (click)=\\\"showToastWithEnabledHtml()\\\" i18n>Show Toast With Enabled Html</button>\\n<button nui-button type=\\\"button\\\" class=\\\"ml-3\\\" id=\\\"nui-basic-toast-html-example-2\\\" (click)=\\\"showToastWithDisabledHtml()\\\" i18n>Show Toast With Disabled Html</button>\\n<button nui-button type=\\\"button\\\" class=\\\"ml-3\\\" id=\\\"nui-basic-toast-html-example-3\\\" (click)=\\\"showToastWithScriptTagIncluded()\\\" i18n>Show Toast With Script Tag</button>\\n\";","export default \"<div class=\\\"nui-flex-container\\\">\\n    <div>\\n        <nui-radio-group [(value)]=\\\"selectedPosition\\\">\\n            <nui-radio *ngFor=\\\"let position of toastPositions\\\"\\n                        id=\\\"{{'nui-toast-position-'+position.className}}\\\"\\n                        [checked]=\\\"position.className === 'nui-toast--top-right'\\\"\\n                        [value]=\\\"position.className\\\">\\n                {{position.displayValue}}\\n            </nui-radio>\\n        </nui-radio-group>\\n    </div>\\n</div>\\n<button nui-button type=\\\"button\\\" id=\\\"nui-toast-position-example\\\" (click)=\\\"onShowToast($event)\\\" i18n>Show Toast</button>\\n\";","import { Component, Inject, OnInit } from \"@angular/core\";\nimport { IToastService, ToastService } from \"@nova-ui/bits\";\n\n@Component({\n    selector: \"nui-toast-basic-html-example\",\n    templateUrl: \"./toast-basic-html.example.component.html\",\n})\nexport class ToastBasicHtmlExampleComponent implements OnInit {\n\n    constructor(@Inject(ToastService) private toastService: IToastService) { }\n\n    ngOnInit() {\n        this.toastService.setConfig({ timeOut: 5000, extendedTimeOut: 2000 }, \"id\");\n    }\n\n    public showToastWithEnabledHtml(): void {\n        this.toastService.info({\n            title: $localize `Toast with enableHtml set to true`,\n            message: $localize `Hi there! I'm a simple toast message. <a href=\"#\">Awesome link</a>`,\n            options: {\n                enableHtml: true, // Note: Default value\n            },\n        });\n    }\n\n    public showToastWithDisabledHtml(): void {\n        this.toastService.info({\n            title: $localize `Toast with enableHtml set to false`,\n            message: $localize `Hi there! I'm a simple toast message <a href=\"#\">Awesome link</a>`,\n            options: {\n                enableHtml: false,\n            },\n        });\n    }\n\n    public showToastWithScriptTagIncluded(): void {\n        this.toastService.info({\n            title: $localize `Toast with forbidden tags and enableHtml set to true`,\n            message: $localize `\n                Hi there! I'm a toast message with forbidden tags:\n                <script>alert(\"You shall not pass\")</script>\n                <object width=\"400\" height=\"400\"></object>\n                <iframe src=\"https://www.solarwinds.com/\"></iframe>\n                <embed src=\"https://www.solarwinds.com/\">\n                `,\n            options: {\n                enableHtml: true, // Note: Default value\n            },\n        });\n    }\n\n}\n","<button nui-button type=\"button\" id=\"nui-basic-toast-html-example-1\" (click)=\"showToastWithEnabledHtml()\" i18n>Show Toast With Enabled Html</button>\n<button nui-button type=\"button\" class=\"ml-3\" id=\"nui-basic-toast-html-example-2\" (click)=\"showToastWithDisabledHtml()\" i18n>Show Toast With Disabled Html</button>\n<button nui-button type=\"button\" class=\"ml-3\" id=\"nui-basic-toast-html-example-3\" (click)=\"showToastWithScriptTagIncluded()\" i18n>Show Toast With Script Tag</button>\n","import { Component, Inject, OnInit } from \"@angular/core\";\nimport { IToastConfig, IToastService, ToastPositionClass, ToastService } from \"@nova-ui/bits\";\n\n@Component({\n    selector: \"nui-toast-config-example\",\n    templateUrl: \"./toast-config.example.component.html\",\n})\nexport class ToastConfigExampleComponent implements OnInit {\n    public selectedPosition: string;\n\n    constructor(@Inject(ToastService) private toastService: IToastService) { }\n\n    ngOnInit() {\n        this.toastService.setConfig({}, \"id\");\n    }\n\n    public onShowToast(highlightMode: boolean): void {\n        this.toastService.info({\n            title: $localize `Toast Configuration`,\n            message: $localize `I'm pretty easy to configure`,\n            options: this.getOptions(),\n        });\n    }\n\n    private getOptions(): IToastConfig {\n        return {\n            extendedTimeOut: 2000,\n            clickToDismiss: true,\n            closeButton: true,\n            positionClass: ToastPositionClass.BOTTOM_RIGHT,\n            progressBar: true,\n            progressAnimation: \"increasing\",\n            timeOut: 5000,\n        };\n    }\n}\n","<button nui-button type=\"button\" id=\"nui-toast-config-example\" (click)=\"onShowToast($event)\" i18n>Show Toast</button>\n","import { Component } from \"@angular/core\";\nimport { IToastConfig, IToastDeclaration } from \"@nova-ui/bits\";\n\n@Component({\n    selector: \"nui-toast-docs-example\",\n    templateUrl: \"./toast-docs.example.component.html\",\n})\nexport class ToastExampleComponent {\n    getToastDeclarationKey(key: keyof IToastDeclaration): string {\n        return key;\n    }\n    getToastConfigKey(key: keyof IToastConfig): string {\n        return key;\n    }\n}\n","<h2>Required Modules</h2>\n<ul>\n    <li>\n        <code>NuiToastModule</code>\n    </li>\n</ul>\n\n<h2>Basic Usage</h2>\n<div>\n    You can use <code>IToastService</code>, <code>ToastService</code> to show a (usually) temporary message (toast),\n    associated with some event. In example below we're showing a toast message when the \"Show Toast\" button is clicked.\n    Following construction is used to create a toast:\n    <code>IToastService.info(toastDeclaration: <a href=\"../interfaces/IToastDeclaration.html\">IToastDeclaration</a>)</code>.\n    Any property in <a href=\"../interfaces/IToastDeclaration.html\"><code>IToastDeclaration</code></a> is optional.\n</div>\n<p>\n    When using the toast component with a title, a space is automatically inserted in front of the message body to create spacial separation from the title.\n    In addition to the provided space, it's suggested that the user add a sentence-ending punctuation mark to the title to further emphasize this separation.\n</p>\n<nui-example-wrapper filenamePrefix=\"toast-basic\" exampleTitle=\"Basic usage\">\n    <nui-toast-basic-example></nui-toast-basic-example>\n</nui-example-wrapper>\n\n<h2>Basic Usage With Html</h2>\n<p>\n    Toast allows HTML usage inside the <code>{{getToastDeclarationKey(\"message\")}}</code> container by\n    default. Note: The provided value will be sanitized and rendered.\n</p>\n<p>\n    To configure a toast to display HTML as plain text, set the\n    <code>{{getToastConfigKey(\"enableHtml\")}}</code> property in\n    <code>{{getToastDeclarationKey(\"options\")}}</code> to <code>false</code>.\n</p>\n<p>\n    When the <code>{{getToastConfigKey(\"enableHtml\")}}</code> flag is turned on, all the content will be\n    sanitized, basic tags for changing fonts are often allowed, such as <code>&lt;b&gt;</code>, \n    <code>&lt;i&gt;</code>, <code>&lt;u&gt;</code>, <code>&lt;em&gt;</code>, and \n    <code>&lt;strong&gt;</code>. More advanced tags such as <code>&lt;script&gt;</code>,\n    <code>&lt;object&gt;</code>, <code>&lt;embed&gt;</code>, and <code>&lt;link&gt;</code> are removed by\n    the sanitization process. Additionally, potentially dangerous attributes such as\n    <code>onclick</code> are removed in order to prevent malicious code from being injected.\n</p>\n<nui-example-wrapper filenamePrefix=\"toast-basic-html\" exampleTitle=\"Basic HTML Usage\">\n    <nui-toast-basic-html-example></nui-toast-basic-html-example>\n</nui-example-wrapper>\n\n<h2>Types</h2>\n<p>\n    Toast types allows you to convey some contextual information about the message by applying different styles to toasts.\n</p>\n<nui-example-wrapper filenamePrefix=\"toast-type\" exampleTitle=\"Types\">\n    <nui-toast-type-example></nui-toast-type-example>\n</nui-example-wrapper>\n\n<h2>Configuration</h2>\n<p>\n    Toast messages are highly configurable via <a href=\"../interfaces/IToastConfig.html\">IToastConfig</a> interface.\n    The following example employs some of the more common settings:\n    <br/>\n    <code>\n        extendedTimeOut: 2000,\n        clickToDismiss: true,\n        closeButton: true,\n        positionClass: \"toast-bottom-right\",\n        progressBar: true,\n        progressAnimation: \"increasing\",\n        timeOut: 5000\n    </code>\n</p>\n<nui-example-wrapper filenamePrefix=\"toast-config\" exampleTitle=\"Configuration\">\n    <nui-toast-config-example></nui-toast-config-example>\n</nui-example-wrapper>\n\n<h2>Positioning</h2>\n<p>\n    The position of a toast message is determined by the value of <code>IToastConfig.positionClass</code>.\n    By default toast is positioned top-right. To implement different positioning you must pass one of available\n    options from <a href=\"../miscellaneous/enumerations.html#ToastPositionClass\"><code>ToastPositionClass</code></a>\n    to <a href=\"../interfaces/IToastConfig.html\"><code>IToastConfig</code></a> positionClass property.<br /><br />\n\n    It is also possible to set a custom class to configure the position of the <code>nui-toast</code>.  Simply populate\n    the <code>IToastConfig.positionClass</code> with the custom css class name.\n\n    <nui-message type=\"warning\" [allowDismiss]=\"false\">\n        Make sure you defined a custom class in a global stylesheet\n    </nui-message>\n</p>\n<nui-example-wrapper filenamePrefix=\"toast-position\" exampleTitle=\"Positioning\">\n    <nui-toast-position-example></nui-toast-position-example>\n</nui-example-wrapper>\n\n<h2>Sticky Error</h2>\n<p>\n    You can also optionally force error toasts to remain visible indefinitely using <code>IToastConfig.stickyError</code>.\n    Note, that this option is only available with <code>IToastService.error</code>.\n</p>\n<nui-example-wrapper filenamePrefix=\"toast-sticky-error\" exampleTitle=\"Sticky error\">\n    <nui-toast-sticky-error-example></nui-toast-sticky-error-example>\n</nui-example-wrapper>\n\n<h2>Events</h2>\n<p>\n    With <a href=\"../interfaces/IActiveToast.html\">IActiveToast</a>, it's possible to\n    capture (and act upon) following events per toast instance:\n</p>\n<ul>\n    <li><code>onShown</code></li>\n    <li><code>onHidden</code></li>\n    <li><code>onClick</code></li>\n</ul>\n<nui-example-wrapper filenamePrefix=\"toast-events\" exampleTitle=\"Events\">\n    <nui-toast-events-example></nui-toast-events-example>\n</nui-example-wrapper>\n"]}