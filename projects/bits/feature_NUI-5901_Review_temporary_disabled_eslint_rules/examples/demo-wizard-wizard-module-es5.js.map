{"version":3,"sources":["webpack:///demo/src/components/demo/wizard/wizard-steps/wizard-steps.example.component.ts?f903","webpack:///demo/src/components/demo/wizard/wizard-steps/wizard-steps.example.component.ts","webpack:///demo/src/components/demo/wizard/wizard-steps/wizard-steps.example.component.html","webpack:///demo/src/components/demo/wizard/wizard-dynamic-remove/wizard-dynamic-remove.example.component.ts","webpack:///demo/src/components/demo/wizard/wizard-dynamic-remove/wizard-dynamic-remove.example.component.html","webpack:///demo/src/components/demo/wizard/wizard-simple/wizard-simple.example.component.ts","webpack:///demo/src/components/demo/wizard/wizard-simple/wizard-simple.example.component.html","webpack:///demo/src/components/demo/wizard/wizard-disabled/wizard-disabled.example.component.ts","webpack:///demo/src/components/demo/wizard/wizard-disabled/wizard-disabled.example.component.html","webpack:///demo/src/components/demo/wizard/wizard-hide/wizard-hide.example.component.html?e509","webpack:///demo/src/components/demo/wizard/wizard-validation/wizard-validation.example.component.ts?ea9a","webpack:///demo/src/components/demo/wizard/wizard-dynamic-remove/wizard-dynamic-remove.example.component.html?0059","webpack:///demo/src/components/demo/wizard/wizard-disabled/wizard-disabled.example.component.ts?074e","webpack:///demo/src/components/demo/wizard/wizard-docs/wizard-docs.example.component.ts?0cd7","webpack:///demo/src/components/demo/wizard/wizard-dialog/wizard-dialog.example.component.ts","webpack:///demo/src/components/demo/wizard/wizard-dialog/wizard-dialog.example.component.html","webpack:///demo/src/components/demo/wizard/wizard-visual-test/wizard-visual-test.component.ts","webpack:///demo/src/components/demo/wizard/wizard-visual-test/wizard-visual-test.component.html","webpack:///demo/src/components/demo/wizard/wizard-custom-step-line-width/wizard-custom-step-line-width.example.component.ts?2f9e","webpack:///demo/src/components/demo/wizard/wizard-confirmation-dialog/wizard-confirmation-dialog.example.component.html?2d78","webpack:///demo/src/components/demo/wizard/wizard-docs/wizard-docs.example.component.html?2d95","webpack:///demo/src/components/demo/wizard/wizard-visual-test/wizard-visual-test.component.html?315c","webpack:///demo/src/components/demo/wizard/wizard-validation/wizard-validation.example.component.html?3b33","webpack:///demo/src/components/demo/wizard/wizard-hide/wizard-hide.example.component.ts","webpack:///demo/src/components/demo/wizard/wizard-hide/wizard-hide.example.component.html","webpack:///demo/src/components/demo/wizard/index.ts","webpack:///demo/src/components/demo/wizard/wizard-dynamic-remove/wizard-dynamic-remove.example.component.ts?486e","webpack:///demo/src/components/demo/wizard/wizard-custom-step-line-width/wizard-custom-step-line-width.example.component.html?4af8","webpack:///demo/src/components/demo/wizard/index.ts?4e5f","webpack:///demo/src/components/demo/wizard/wizard-custom-step-line-width/wizard-custom-step-line-width.example.component.ts","webpack:///demo/src/components/demo/wizard/wizard-custom-step-line-width/wizard-custom-step-line-width.example.component.html","webpack:///demo/src/components/demo/wizard/wizard-dynamic/wizard-dynamic.example.component.ts?5baf","webpack:///demo/src/components/demo/wizard/wizard-busy/wizard-busy.example.component.html?5d0b","webpack:///demo/src/components/demo/wizard/wizard-confirmation-dialog/wizard-confirmation-dialog.example.component.ts?5d38","webpack:///demo/src/components/demo/wizard/wizard-visual-test/wizard-visual-test.component.ts?5deb","webpack:///demo/src/components/demo/wizard/wizard-busy/wizard-busy.example.component.ts?6348","webpack:///demo/src/components/demo/wizard/wizard-busy/wizard-busy.example.component.ts","webpack:///demo/src/components/demo/wizard/wizard-busy/wizard-busy.example.component.html","webpack:///demo/src/components/demo/wizard/wizard-additional-button/wizard-additional-button.example.component.ts?6bcd","webpack:///demo/src/components/demo/wizard/wizard.module.ts?6c3d","webpack:///demo/src/components/demo/wizard/wizard-simple/wizard-simple.example.component.html?6c33","webpack:///demo/src/components/demo/wizard/wizard-dialog/wizard-dialog.example.component.ts?6e86","webpack:///demo/src/components/demo/wizard/wizard-constant-height/wizard-constant-height.example.component.html","webpack:///demo/src/components/demo/wizard/wizard-constant-height/wizard-constant-height.example.component.ts","webpack:///demo/src/components/demo/wizard/wizard-docs/wizard-docs.example.component.ts","webpack:///demo/src/components/demo/wizard/wizard-docs/wizard-docs.example.component.html","webpack:///demo/src/components/demo/wizard/wizard-disabled/wizard-disabled.example.component.html?77af","webpack:///demo/src/components/demo/wizard/wizard-dynamic/wizard-dynamic.example.component.ts","webpack:///demo/src/components/demo/wizard/wizard-dynamic/wizard-dynamic.example.component.html","webpack:///node_modules/raw-loader/dist/cjs.js .*\\.(ts|html|less)$?9d4e","webpack:///demo/src/components/demo/wizard/wizard-additional-button/wizard-additional-button.example.component.html?7f5a","webpack:///demo/src/components/demo/wizard/wizard-constant-height/wizard-constant-height.example.component.html?7ca3","webpack:///demo/src/components/demo/wizard/wizard-additional-button/wizard-additional-button.example.component.ts","webpack:///demo/src/components/demo/wizard/wizard-additional-button/wizard-additional-button.example.component.html","webpack:///demo/src/components/demo/wizard/wizard-dynamic/wizard-dynamic.example.component.html?81f7","webpack:///demo/src/components/demo/wizard/wizard-hide/wizard-hide.example.component.ts?8765","webpack:///demo/src/components/demo/wizard/wizard-validation/wizard-validation.example.component.ts","webpack:///demo/src/components/demo/wizard/wizard-validation/wizard-validation.example.component.html","webpack:///demo/src/components/demo/wizard/wizard-dialog/wizard-dialog.example.component.html?9640","webpack:///demo/src/components/demo/wizard/wizard-confirmation-dialog/wizard-confirmation-dialog.example.component.ts","webpack:///demo/src/components/demo/wizard/wizard-confirmation-dialog/wizard-confirmation-dialog.example.component.html","webpack:///demo/src/components/demo/wizard/wizard-constant-height/wizard-constant-height.example.component.ts?a77e","webpack:///demo/src/components/demo/wizard/wizard.module.ts","webpack:///demo/src/components/demo/wizard/wizard-steps/wizard-steps.example.component.html?b8b2","webpack:///demo/src/components/demo/wizard/wizard-simple/wizard-simple.example.component.ts?ceed"],"names":["WizardStepsExampleComponent","formBuilder","destroy$","myForm","group","name","control","required","email","pattern","password","minLength","event","selectedIndex","step","wizardComponent","addStepDynamic","dynamicStep","enter","pipe","subscribe","console","log","exit","next","complete","select","WizardDynamicRemoveExampleComponent","index","removeStep","WizardSimpleExampleComponent","toastService","dialogService","hint","$localize","caption","vegetables","selectedVegetables","secondStepBusyConfig","busy","message","busyConfig","value","vegetable","indexOf","values","disableStep","wizardStep2Component","hideStep","wizardStep3Component","showStep","navigationControl","busyState","allowStepChange","setTimeout","info","title","content","steps","toArray","filter","length","activeDialog","open","size","actionDone","actionCanceled","close","success","WizardDisabledExampleComponent","wizardStepDisabledComponent","enableStep","WizardDialogExampleComponent","openDialog","WizardVisualTestComponent","dialogWizardBusy","WizardHiddenExampleComponent","wizardStepHiddenComponent","WizardCustomStepLineWidthComponent","WizardBusyExampleComponent","toggleStepBusy","WizardConstantHeightExampleComponent","wizardBodyHeight","parseInt","WizardExampleComponent","WizardDynamicExampleComponent","dynamicStepsSubscriptions","push","forEach","subscription","unsubscribe","map","webpackContext","req","id","webpackContextResolve","__webpack_require__","o","e","Error","code","keys","webpackContextKeys","Object","resolve","module","exports","WizardAdditionalButtonExampleComponent","onAdditionalButtonClick","WizardValidationExampleComponent","secondStepForm","formCheckbox","requiredTrue","get","updateValueAndValidity","updateValidity","WizardConfirmationDialogExampleComponent","$event","openConfirmationDialog","routes","path","component","data","ga","showThemeSwitcher","WizardModule","provide","useFactory","forChild"],"mappings":"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","file":"demo-wizard-wizard-module-es5.js","sourcesContent":["export default \"import { Component, OnDestroy, OnInit, ViewChild } from \\\"@angular/core\\\";\\nimport { IWizardSelectionEvent, WizardComponent, WizardStepComponent } from \\\"@nova-ui/bits\\\";\\nimport { Subject } from \\\"rxjs\\\";\\nimport { FormBuilder, FormGroup, Validators } from \\\"@angular/forms\\\";\\nimport { takeUntil } from \\\"rxjs/operators\\\";\\n\\n@Component({\\n    selector: \\\"nui-wizard-steps-example\\\",\\n    templateUrl: \\\"./wizard-steps.example.component.html\\\",\\n})\\nexport class WizardStepsExampleComponent implements OnDestroy, OnInit {\\n    @ViewChild(\\\"wizardComponent\\\") wizardComponent: WizardComponent;\\n    @ViewChild(\\\"dynamicStep\\\") dynamicStep: WizardStepComponent;\\n\\n    public selectedIndex: number;\\n\\n    private destroy$ = new Subject();\\n    \\n    public myForm: FormGroup;\\n\\n    constructor(private formBuilder: FormBuilder) {}\\n\\n    public ngOnInit(): void {\\n        this.myForm = this.formBuilder.group({\\n            name: this.formBuilder.control(\\\"\\\",\\n                                           Validators.required),\\n            email: this.formBuilder.control(\\\"\\\", [\\n                Validators.required,\\n                Validators.pattern(\\\"[^ @]*@[^ @]*\\\"),\\n                Validators.email,\\n            ]),\\n            password: this.formBuilder.control(\\\"\\\", [\\n                Validators.required,\\n                Validators.minLength(8),\\n            ]),\\n        });\\n    }\\n\\n    public select(event: IWizardSelectionEvent): void {\\n        this.selectedIndex = event.selectedIndex;\\n    }\\n\\n    public addStep(): void {\\n        // addStepDynamic returns an instance of WizardStepComponent that was dynamically added\\n        const step: WizardStepComponent = this.wizardComponent.addStepDynamic(this.dynamicStep, this.selectedIndex + 1);\\n        \\n        step.enter.pipe(takeUntil(this.destroy$))\\n            .subscribe(() => console.log(`Enter event has been emitted from WizardStepComponent`));\\n\\n        step.exit.pipe(takeUntil(this.destroy$))\\n            .subscribe(() => console.log(`Exit event has been emitted from WizardStepComponent`));\\n    }\\n\\n    public ngOnDestroy(): void {\\n        this.destroy$.next();\\n        this.destroy$.complete();\\n    }\\n}\\n\";","import { Component, OnDestroy, OnInit, ViewChild } from \"@angular/core\";\nimport { IWizardSelectionEvent, WizardComponent, WizardStepComponent } from \"@nova-ui/bits\";\nimport { Subject } from \"rxjs\";\nimport { FormBuilder, FormGroup, Validators } from \"@angular/forms\";\nimport { takeUntil } from \"rxjs/operators\";\n\n@Component({\n    selector: \"nui-wizard-steps-example\",\n    templateUrl: \"./wizard-steps.example.component.html\",\n})\nexport class WizardStepsExampleComponent implements OnDestroy, OnInit {\n    @ViewChild(\"wizardComponent\") wizardComponent: WizardComponent;\n    @ViewChild(\"dynamicStep\") dynamicStep: WizardStepComponent;\n\n    public selectedIndex: number;\n\n    private destroy$ = new Subject();\n    \n    public myForm: FormGroup;\n\n    constructor(private formBuilder: FormBuilder) {}\n\n    public ngOnInit(): void {\n        this.myForm = this.formBuilder.group({\n            name: this.formBuilder.control(\"\",\n                                           Validators.required),\n            email: this.formBuilder.control(\"\", [\n                Validators.required,\n                Validators.pattern(\"[^ @]*@[^ @]*\"),\n                Validators.email,\n            ]),\n            password: this.formBuilder.control(\"\", [\n                Validators.required,\n                Validators.minLength(8),\n            ]),\n        });\n    }\n\n    public select(event: IWizardSelectionEvent): void {\n        this.selectedIndex = event.selectedIndex;\n    }\n\n    public addStep(): void {\n        // addStepDynamic returns an instance of WizardStepComponent that was dynamically added\n        const step: WizardStepComponent = this.wizardComponent.addStepDynamic(this.dynamicStep, this.selectedIndex + 1);\n        \n        step.enter.pipe(takeUntil(this.destroy$))\n            .subscribe(() => console.log(`Enter event has been emitted from WizardStepComponent`));\n\n        step.exit.pipe(takeUntil(this.destroy$))\n            .subscribe(() => console.log(`Exit event has been emitted from WizardStepComponent`));\n    }\n\n    public ngOnDestroy(): void {\n        this.destroy$.next();\n        this.destroy$.complete();\n    }\n}\n","<nui-wizard #wizardComponent\n            id=\"nui-demo-wizard-add-dynamic\"\n            (selectionChange)=\"select($event)\"\n            finishText=\"Finish\"\n            i18n-finishText>\n        <nui-wizard-step #wizardStepAdd i18n-title title=\"Add step dynamically\" [stepTemplate]=\"step1\"></nui-wizard-step>\n        <nui-wizard-step i18n-title #wizardStep3 title=\"Third step\" [stepTemplate]=\"step3\"></nui-wizard-step>\n</nui-wizard>\n<nui-wizard-step #dynamicStep \n                [title]=\"'Dynamic'\" \n                [stepTemplate]=\"stepWithValidation\"\n                [stepControl]=\"myForm.valid\"></nui-wizard-step>\n<!-- 1 step -->\n<ng-template #step1>\n    <p i18n>Hi! You can add next step dynamically</p>\n    <button nui-button type=\"button\" id=\"nui-demo-dynamic-button\" (click)=\"addStep()\" i18n>Add dynamic step</button>\n</ng-template>\n<!-- 2 step dynamic -->\n<ng-template #stepWithValidation>\n    <form [formGroup]=\"myForm\">\n        <div class=\"form-group\">\n            <nui-form-field class=\"d-block mb-4\"\n                            i18n-caption caption=\"Name\">\n                <nui-textbox id=\"stepInputName\"\n                             formControlName=\"name\"></nui-textbox>\n            </nui-form-field>\n        </div>\n        <div class=\"form-group\">\n            <nui-form-field class=\"d-block mb-4\"\n                            [control]=\"myForm.controls['email']\"\n                            i18n-caption\n                            caption=\"Email\">\n                <nui-textbox type=\"email\"\n                             id=\"stepInputEmail\"\n                             formControlName=\"email\"></nui-textbox>\n                <nui-validation-message for=\"required\" *ngIf=\"myForm.get(['email'])?.errors?.required\" i18n>\n                    This is required\n                </nui-validation-message>\n                <nui-validation-message for=\"pattern\" *ngIf=\"myForm.get(['email'])?.errors?.pattern\" i18n>\n                    Please put at least \"@\" to pass this validator\n                </nui-validation-message>\n                <nui-validation-message for=\"email\" *ngIf=\"myForm.get(['email'])?.errors?.email\" i18n>\n                    This should be a valid email?\n                </nui-validation-message>\n                <nui-validation-message [show]=\"true\" i18n>\n                    This message is always here\n                </nui-validation-message>\n            </nui-form-field>\n        </div>\n        <div class=\"form-group\">\n            <nui-form-field class=\"d-block mb-4\"\n                            [control]=\"myForm.controls['password']\"\n                            i18n-caption\n                            caption=\"Password\"\n                            [showOptionalText]=\"false\">\n                <nui-textbox type=\"password\"\n                             id=\"stepInputPassword\"\n                             formControlName=\"password\"></nui-textbox>\n                <nui-validation-message for=\"required\" *ngIf=\"myForm.get(['password'])?.errors?.required\" i18n>\n                    This is required\n                </nui-validation-message>\n                <nui-validation-message for=\"minlength\" *ngIf=\"myForm.get(['password'])?.errors?.minlength\" i18n>\n                    Minimum length is 8\n                </nui-validation-message>\n                <nui-validation-message [show]=\"true\" i18n>\n                    This message is always here\n                </nui-validation-message>\n            </nui-form-field>\n        </div>\n    </form>\n</ng-template>\n<!-- 3 step -->\n<ng-template #step3>\n    <p i18n>This is step #3</p>\n</ng-template>\n","import { Component, OnDestroy, ViewChild } from \"@angular/core\";\nimport { IWizardSelectionEvent, WizardComponent, WizardStepComponent } from \"@nova-ui/bits\";\nimport { Subject } from \"rxjs\";\nimport { takeUntil } from \"rxjs/operators\";\n\n@Component({\n    selector: \"nui-wizard-dynamic-remove-example\",\n    templateUrl: \"./wizard-dynamic-remove.example.component.html\",\n})\nexport class WizardDynamicRemoveExampleComponent implements OnDestroy {\n    @ViewChild(\"wizardComponent\") wizardComponent: WizardComponent;\n    @ViewChild(\"dynamicStep\") dynamicStep: WizardStepComponent;\n\n    public selectedIndex: number;\n\n    private destroy$ = new Subject();\n\n    public select(event: IWizardSelectionEvent): void {\n        this.selectedIndex = event.selectedIndex;\n    }\n\n    public addStep(): void {\n        const index = this.selectedIndex + 1;\n        const step: WizardStepComponent = this.wizardComponent.addStepDynamic(this.dynamicStep, index);\n\n        step.enter.pipe(takeUntil(this.destroy$))\n            .subscribe(() => console.log(`Enter event has been emitted from WizardStepComponent`));\n\n        step.exit.pipe(takeUntil(this.destroy$))\n            .subscribe(() => console.log(`Exit event has been emitted from WizardStepComponent`));\n    }\n\n    public removeStep(index: number): void {\n        this.wizardComponent.removeStep(index);\n    }\n\n    public ngOnDestroy(): void {\n        this.destroy$.next();\n        this.destroy$.complete();\n    }\n}\n","<nui-wizard #wizardComponent\n            id=\"nui-demo-wizard-remove-dynamic\"\n            finishText=\"Finish\"\n            (selectionChange)=\"select($event)\"\n            i18n-finishText>\n    <nui-wizard-step #wizardStepAdd i18n-title title=\"Add step dynamically\" [stepTemplate]=\"step1\"></nui-wizard-step>\n</nui-wizard>\n<nui-wizard-step #dynamicStep [title]=\"'Dynamic'\" [stepTemplate]=\"dynamicStepTemplate\"></nui-wizard-step>\n<ng-template #step1>\n    <p i18n>Hi! You can add next step dynamically</p>\n    <button nui-button type=\"button\" (click)=\"addStep()\" i18n>Add dynamic step</button>\n</ng-template>\n<ng-template #dynamicStepTemplate>\n    <p i18n>Hi! I'm dynamic step!</p>\n</ng-template>\n\n<div class=\"d-flex\">\n    <div class=\"\">\n        <span class=\"nui-textbox--bold\" [ngStyle]=\"{ 'font-weight': 'bold' }\">Step index to remove</span> <br>\n        <nui-textbox-number [minValue]=\"1\" #number></nui-textbox-number>\n    </div>\n    <button class=\"ml-3 h-25 align-self-end\"\n            displayStyle=\"destructive\"\n            nui-button type=\"button\"\n            (click)=\"removeStep(+number.value)\"\n            i18n>\n        Remove step dynamically\n    </button>\n</div>\n\n","import { Component, Inject, OnInit, TemplateRef, ViewChild } from \"@angular/core\";\nimport { FormBuilder, FormGroup, Validators } from \"@angular/forms\";\nimport {\n    DialogService, IBusyConfig, IWizardSelectionEvent, NuiDialogRef, ToastService, WizardComponent, WizardStepComponent,\n} from \"@nova-ui/bits\";\n\n@Component({\n    selector: \"nui-wizard-simple-example\",\n    templateUrl: \"./wizard-simple.example.component.html\",\n})\nexport class WizardSimpleExampleComponent implements OnInit {\n    @ViewChild(\"wizardComponent\") wizardComponent: WizardComponent;\n    @ViewChild(\"wizardStep2\") wizardStep2Component: WizardStepComponent;\n    @ViewChild(\"wizardStep3\") wizardStep3Component: WizardStepComponent;\n    @ViewChild(\"dynamicStep\") dynamicStep: WizardStepComponent;\n\n    public myForm: FormGroup;\n    public hint = $localize `example-hint`;\n    public caption = $localize `example-caption`;\n    public vegetables = [$localize `Cabbage`, $localize `Potato`, $localize `Tomato`, $localize `Carrot`];\n    public selectedVegetables = [$localize `Potato`, $localize `Tomato`];\n    public secondStepBusyConfig: IBusyConfig = {\n        busy: false,\n        message: $localize `Step is busy`,\n    };\n    public busyConfig: IBusyConfig = {\n        busy: false,\n        message: $localize `Step is busy`,\n    };\n    public selectedIndex: number;\n\n    private activeDialog: NuiDialogRef;\n\n    constructor(private formBuilder: FormBuilder,\n        @Inject(ToastService) private toastService: ToastService,\n        @Inject(DialogService) private dialogService: DialogService) { }\n\n    public ngOnInit() {\n        this.myForm = this.formBuilder.group({\n            name: this.formBuilder.control(\"\",\n                                           Validators.required),\n            email: this.formBuilder.control(\"\", [\n                Validators.required,\n                Validators.pattern(\"[^ @]*@[^ @]*\"),\n            ]),\n            password: this.formBuilder.control(\"\", [\n                Validators.required,\n                Validators.minLength(8),\n            ]),\n        });\n    }\n\n    public onOptionChange(value: string) {\n        this.hint = value;\n    }\n\n    public isChecked(vegetable: string): boolean {\n        return this.selectedVegetables.indexOf(vegetable) > -1;\n    }\n\n    public valuesChanged(values: any[]) {\n        this.selectedVegetables = [...values];\n    }\n\n    public addStep() {\n        this.wizardComponent.addStepDynamic(this.dynamicStep, this.selectedIndex + 1);\n    }\n\n    public disableSecondStep() {\n        this.wizardComponent.disableStep(this.wizardStep2Component);\n    }\n\n    public hideThirdStep() {\n        this.wizardComponent.hideStep(this.wizardStep3Component);\n    }\n\n    public visibleThirdStep() {\n        this.wizardComponent.showStep(this.wizardStep3Component);\n    }\n\n    public makeSecondStepBusy() {\n        this.secondStepBusyConfig.busy = true;\n        this.wizardComponent.navigationControl.next({ busyState: this.secondStepBusyConfig, allowStepChange: false});\n        setTimeout(() => {\n            this.secondStepBusyConfig.busy = false;\n            this.wizardComponent.navigationControl.next({ busyState: this.secondStepBusyConfig, allowStepChange: true});\n        }, 1000);\n    }\n\n    public onNextClick() {\n        this.toastService.info({\n            message: $localize `Next button clicked!`,\n            title: $localize `Event`,\n        });\n    }\n\n    public onCancelClick(content: TemplateRef<string>) {\n        if (this.wizardComponent.steps.toArray().filter((step: WizardStepComponent) => step.complete).length !== 0) {\n            this.activeDialog = this.dialogService.open(content, {size: \"sm\"});\n        } else {\n            this.toastService.info({\n                message: $localize `Cancel button clicked!`,\n                title: $localize `Event`,\n            });\n        }\n    }\n\n    public onFinishClick() {\n        this.toastService.info({\n            message: $localize `Finish button clicked!`,\n            title: $localize `Event`,\n        });\n    }\n\n    public handleClick() {\n        this.toastService.info({\n            message: $localize `Additional button clicked!`,\n            title: $localize `Event`,\n        });\n    }\n\n    public select(event: IWizardSelectionEvent) {\n        this.selectedIndex = event.selectedIndex;\n    }\n    public onButtonClick(title: string) {\n        title === \"Leave\" ? this.actionDone() : this.actionCanceled();\n        this.activeDialog.close();\n    }\n\n    public preventGoingNext() {\n        this.busyConfig.busy = true;\n        this.wizardComponent.navigationControl.next({ busyState: this.busyConfig, allowStepChange: false});\n        setTimeout(() => {\n            this.busyConfig.busy = false;\n            this.wizardComponent.navigationControl.next({ busyState: this.busyConfig, allowStepChange: true});\n        }, 1000);\n    }\n\n    private actionDone(): void {\n        this.toastService.success({message: $localize `Leave Done!`, title: $localize `Event`});\n    }\n\n    private actionCanceled(): void {\n        this.toastService.info({message: $localize `Action Canceled!`, title: $localize `Event`});\n    }\n}\n","<ng-template #step1>\n    <nui-textbox\n        i18n-caption\n        caption=\"First\"\n        name=\"hint\"\n        [value]=\"hint\"\n        customBoxWidth=\"150px\"\n        (textChange)=\"onOptionChange($event)\">\n    </nui-textbox>\n</ng-template>\n<ng-template #step2>\n    <nui-checkbox name=\"nui-demo-checkbox\"\n                  i18n-title\n                  title=\"Check box with help text\"\n                  i18n-hint\n                  hint=\"This is some help text\"\n                  required=\"true\"\n                  [value]=\"false\" i18n>Check box with help text\n    </nui-checkbox>\n</ng-template>\n\n<nui-wizard #wizardComponent\n            id=\"nui-demo-wizard\"\n            finishText=\"Finish\"\n            i18n-finishText>\n    <nui-wizard-step id=\"nui-demo-wizard-step\" i18n-title title=\"First\" [stepTemplate]=\"step1\"></nui-wizard-step>\n    <nui-wizard-step i18n-title title=\"Final\" [stepTemplate]=\"step2\"></nui-wizard-step>\n</nui-wizard>\n","import { Component, ViewChild } from \"@angular/core\";\nimport { WizardComponent, WizardStepComponent } from \"@nova-ui/bits\";\n\n@Component({\n    selector: \"nui-wizard-disabled-example\",\n    templateUrl: \"./wizard-disabled.example.component.html\",\n})\nexport class WizardDisabledExampleComponent  {\n    @ViewChild(\"wizardComponent\") wizardComponent: WizardComponent;\n    @ViewChild(\"wizardStepDisable\") wizardStepDisabledComponent: WizardStepComponent;\n\n    public disableStep() {\n        this.wizardComponent.disableStep(this.wizardStepDisabledComponent);\n    }\n\n    public  enableStep() {\n        this.wizardComponent.enableStep(this.wizardStepDisabledComponent);\n    }\n}\n","<nui-wizard #wizardComponent\n            id=\"nui-demo-wizard-disable\"\n            finishText=\"Finish\"\n            i18n-finishText>\n        <nui-wizard-step #wizardStepFirst i18n-title title=\"Disable next step\" [stepTemplate]=\"step1\"></nui-wizard-step>\n        <nui-wizard-step #wizardStepDisable i18n-title title=\"Second step\" [stepTemplate]=\"stepDisabled\"></nui-wizard-step>\n</nui-wizard>\n<ng-template #step1>\n    <p i18n>Hi! You can disable next step</p>\n    <div class=\"btn-group\">\n        <button nui-button type=\"button\" id=\"nui-demo-disable-button\" (click)=\"disableStep()\" i18n>Disable next step</button>\n        <button nui-button type=\"button\" id=\"nui-demo-enable-button\" (click)=\"enableStep()\" i18n>Enable next step</button>\n    </div>\n</ng-template>\n<ng-template #stepDisabled>\n    <p i18n>Disabled step</p>\n</ng-template>\n","export default \"<nui-wizard #wizardComponent\\n            id=\\\"nui-demo-wizard-hide-show\\\"\\n            finishText=\\\"Finish\\\"\\n            i18n-finishText>\\n        <nui-wizard-step #wizardStepFirst i18n-title title=\\\"Hide show next step\\\" [stepTemplate]=\\\"step1\\\"></nui-wizard-step>\\n        <nui-wizard-step #wizardStepHidden i18n-title title=\\\"Second step\\\" [stepTemplate]=\\\"stepHidden\\\"></nui-wizard-step>\\n</nui-wizard>\\n<ng-template #step1>\\n    <p i18n>Hi! You can hide and show next step</p>\\n    <div class=\\\"btn-group\\\">\\n        <button nui-button type=\\\"button\\\" id=\\\"nui-demo-hide-button\\\" (click)=\\\"hideStep()\\\" i18n>Hide next step</button>\\n        <button nui-button type=\\\"button\\\" id=\\\"nui-demo-show-button\\\" (click)=\\\"showStep()\\\" i18n>Show next step</button>\\n    </div>\\n</ng-template>\\n<ng-template #stepHidden>\\n    <p i18n>Hello from second step</p>\\n</ng-template>\\n\";","export default \"import { Component, OnInit, ViewChild } from \\\"@angular/core\\\";\\nimport { FormBuilder, FormGroup, Validators } from \\\"@angular/forms\\\";\\nimport { WizardComponent } from \\\"@nova-ui/bits\\\";\\n\\n@Component({\\n    selector: \\\"nui-wizard-validation-example\\\",\\n    templateUrl: \\\"./wizard-validation.example.component.html\\\",\\n})\\n\\nexport class WizardValidationExampleComponent implements OnInit {\\n    @ViewChild(\\\"wizardComponent\\\") wizardComponent: WizardComponent;\\n    public myForm: FormGroup;\\n    public secondStepForm: FormGroup;\\n\\n    constructor(private formBuilder: FormBuilder) {}\\n    public ngOnInit() {\\n        this.myForm = this.formBuilder.group({\\n            name: this.formBuilder.control(\\\"\\\",\\n                                           Validators.required),\\n            email: this.formBuilder.control(\\\"\\\", [\\n                Validators.required,\\n                Validators.pattern(\\\"[^ @]*@[^ @]*\\\"),\\n                Validators.email,\\n            ]),\\n            password: this.formBuilder.control(\\\"\\\", [\\n                Validators.required,\\n                Validators.minLength(8),\\n            ]),\\n        });\\n        this.secondStepForm = this.formBuilder.group({\\n            formCheckbox: [false, [Validators.requiredTrue]],\\n        });\\n    }\\n\\n    public updateValidity() {\\n        this.secondStepForm.get(\\\"formCheckbox\\\")?.updateValueAndValidity();\\n    }\\n}\\n\";","export default \"<nui-wizard #wizardComponent\\n            id=\\\"nui-demo-wizard-remove-dynamic\\\"\\n            finishText=\\\"Finish\\\"\\n            (selectionChange)=\\\"select($event)\\\"\\n            i18n-finishText>\\n    <nui-wizard-step #wizardStepAdd i18n-title title=\\\"Add step dynamically\\\" [stepTemplate]=\\\"step1\\\"></nui-wizard-step>\\n</nui-wizard>\\n<nui-wizard-step #dynamicStep [title]=\\\"'Dynamic'\\\" [stepTemplate]=\\\"dynamicStepTemplate\\\"></nui-wizard-step>\\n<ng-template #step1>\\n    <p i18n>Hi! You can add next step dynamically</p>\\n    <button nui-button type=\\\"button\\\" (click)=\\\"addStep()\\\" i18n>Add dynamic step</button>\\n</ng-template>\\n<ng-template #dynamicStepTemplate>\\n    <p i18n>Hi! I'm dynamic step!</p>\\n</ng-template>\\n\\n<div class=\\\"d-flex\\\">\\n    <div class=\\\"\\\">\\n        <span class=\\\"nui-textbox--bold\\\" [ngStyle]=\\\"{ 'font-weight': 'bold' }\\\">Step index to remove</span> <br>\\n        <nui-textbox-number [minValue]=\\\"1\\\" #number></nui-textbox-number>\\n    </div>\\n    <button class=\\\"ml-3 h-25 align-self-end\\\"\\n            displayStyle=\\\"destructive\\\"\\n            nui-button type=\\\"button\\\"\\n            (click)=\\\"removeStep(+number.value)\\\"\\n            i18n>\\n        Remove step dynamically\\n    </button>\\n</div>\\n\\n\";","export default \"import { Component, ViewChild } from \\\"@angular/core\\\";\\nimport { WizardComponent, WizardStepComponent } from \\\"@nova-ui/bits\\\";\\n\\n@Component({\\n    selector: \\\"nui-wizard-disabled-example\\\",\\n    templateUrl: \\\"./wizard-disabled.example.component.html\\\",\\n})\\nexport class WizardDisabledExampleComponent  {\\n    @ViewChild(\\\"wizardComponent\\\") wizardComponent: WizardComponent;\\n    @ViewChild(\\\"wizardStepDisable\\\") wizardStepDisabledComponent: WizardStepComponent;\\n\\n    public disableStep() {\\n        this.wizardComponent.disableStep(this.wizardStepDisabledComponent);\\n    }\\n\\n    public  enableStep() {\\n        this.wizardComponent.enableStep(this.wizardStepDisabledComponent);\\n    }\\n}\\n\";","export default \"import { Component } from \\\"@angular/core\\\";\\n\\n@Component({\\n    selector: \\\"nui-wizard-example\\\",\\n    templateUrl: \\\"./wizard-docs.example.component.html\\\",\\n})\\nexport class WizardExampleComponent {}\\n\";","import { Component, Inject, TemplateRef, ViewChild } from \"@angular/core\";\nimport { DialogService, NuiDialogRef, ToastService, WizardComponent } from \"@nova-ui/bits\";\n\n@Component({\n    selector: \"nui-wizard-dialog-example\",\n    templateUrl: \"./wizard-dialog.example.component.html\",\n})\nexport class WizardDialogExampleComponent {\n    @ViewChild(\"wizardComponent\") wizardComponent: WizardComponent;\n\n    public activeDialog: NuiDialogRef;\n\n    constructor(@Inject(DialogService) private dialogService: DialogService,\n        @Inject(ToastService) private toastService: ToastService) { }\n\n    public vegetables = [$localize `Cabbage`, $localize `Potato`, $localize `Tomato`, $localize `Carrot`];\n    public selectedVegetables = [$localize `Potato`, $localize `Tomato`];\n\n    public isChecked(vegetable: string): boolean {\n        return this.selectedVegetables.indexOf(vegetable) > -1;\n    }\n\n    public valuesChanged(values: any[]) {\n        this.selectedVegetables = [...values];\n    }\n\n    public openDialog(content: TemplateRef<string>) {\n        this.activeDialog = this.dialogService.open(content, {size: \"lg\"});\n    }\n\n    public closeDialog() {\n        this.activeDialog.close();\n    }\n}\n","<ng-template #step1>\n    <nui-checkbox name=\"nui-demo-checkbox\"\n                  i18n-title\n                  title=\"Check box with help text\"\n                  i18n-hint\n                  hint=\"This is some help text\"\n                  required=\"true\"\n                  [value]=\"false\"\n                  i18n>Check box with help text\n    </nui-checkbox>\n    <nui-checkbox name=\"nui-demo-checkbox-plain\"\n                  [checked]=\"true\"\n                  [value]=\"false\"\n                  i18n>Plain checkbox\n    </nui-checkbox>\n</ng-template>\n<ng-template #step2>\n    <nui-checkbox-group name=\"vegetable\" [(values)]=\"selectedVegetables\"\n                        (valuesChange)=\"valuesChanged($event)\">\n        <nui-checkbox *ngFor=\"let vegetable of vegetables\"\n                      [value]=\"vegetable\"\n                      [checked]=\"isChecked(vegetable)\">\n            {{vegetable}}\n        </nui-checkbox>\n    </nui-checkbox-group>\n</ng-template>\n<ng-template #step3>\n    <p i18n>Not visited</p>\n</ng-template>\n<ng-template #step4>\n    <p i18n>Summary</p>\n</ng-template>\n<ng-template #dialogWizard>\n    <nui-dialog-header i18n-title title=\"Wizard dialog\" (closed)=\"closeDialog()\"></nui-dialog-header>\n    <div class=\"dialog-body compact-mode\">\n        <nui-wizard id=\"nui-demo-wizard-dialog\"\n                    (cancel)=\"closeDialog()\"\n                    finishText=\"Finish\"\n                    i18n-finishText>\n            <nui-wizard-step i18n-title title=\"Completed\" [stepTemplate]=\"step1\"></nui-wizard-step>\n            <nui-wizard-step i18n-title title=\"Active\" [stepTemplate]=\"step2\"></nui-wizard-step>\n            <nui-wizard-step i18n-title title=\"Not visited\" [stepTemplate]=\"step3\"></nui-wizard-step>\n            <nui-wizard-step i18n-title title=\"Summary\" [stepTemplate]=\"step4\"></nui-wizard-step>\n        </nui-wizard>\n    </div>\n</ng-template>\n<button id=\"nui-demo-dialog-wizard-btn\" nui-button type=\"button\" (click)=\"openDialog(dialogWizard)\" i18n> Open dialog wizard</button>\n","import { Component, Inject, OnInit, TemplateRef, ViewChild } from \"@angular/core\";\nimport { FormBuilder, FormGroup, Validators } from \"@angular/forms\";\nimport {\n    DialogService, IBusyConfig, IWizardSelectionEvent, NuiDialogRef, WizardComponent, WizardStepComponent,\n} from \"@nova-ui/bits\";\n\n@Component({\n    selector: \"nui-wizard-visual\",\n    templateUrl: \"./wizard-visual-test.component.html\",\n})\nexport class WizardVisualTestComponent implements OnInit {\n    @ViewChild(\"wizardComponent\") wizardComponent: WizardComponent;\n    @ViewChild(\"dialogWizardBusy\") dialogWizardBusy: WizardComponent;\n\n    public myForm: FormGroup;\n    public hint = \"example-hint\";\n    public caption = \"example-caption\";\n    public secondStepBusyConfig: IBusyConfig = {\n        busy: false,\n        message: \"Step is busy\",\n    };\n    public busyConfig: IBusyConfig = {\n        busy: false,\n        message: \"Step is busy\",\n    };\n    public selectedIndex: number;\n\n    private activeDialog: NuiDialogRef;\n\n    constructor(private formBuilder: FormBuilder,\n                @Inject(DialogService) private dialogService: DialogService) {}\n\n    public ngOnInit() {\n        this.myForm = this.formBuilder.group({\n            name: this.formBuilder.control(\"\",\n                                           Validators.required),\n            email: this.formBuilder.control(\"\", [\n                Validators.required,\n                Validators.pattern(\"[^ @]*@[^ @]*\"),\n            ]),\n            password: this.formBuilder.control(\"\", [\n                Validators.required,\n                Validators.minLength(8),\n            ]),\n        });\n    }\n\n    public onOptionChange(value: string) {\n        this.hint = value;\n    }\n\n    public makeSecondStepBusy() {\n        this.secondStepBusyConfig.busy = true;\n        this.wizardComponent.navigationControl.next({ busyState: this.secondStepBusyConfig, allowStepChange: false});\n        setTimeout(() => {\n            this.secondStepBusyConfig.busy = false;\n            this.wizardComponent.navigationControl.next({ busyState: this.secondStepBusyConfig, allowStepChange: true});\n        }, 1000);\n    }\n\n    public onCancelClick(content: TemplateRef<string>) {\n        if (this.wizardComponent.steps.toArray().filter((step: WizardStepComponent) => step.complete).length !== 0) {\n            this.activeDialog = this.dialogService.open(content, {size: \"sm\"});\n        }\n    }\n\n    public select(event: IWizardSelectionEvent) {\n        this.selectedIndex = event.selectedIndex;\n    }\n\n    public preventGoingNext() {\n        this.busyConfig.busy = true;\n        this.wizardComponent.navigationControl.next({ busyState: this.busyConfig, allowStepChange: false});\n        setTimeout(() => {\n            this.busyConfig.busy = false;\n            this.wizardComponent.navigationControl.next({ busyState: this.busyConfig, allowStepChange: true});\n        }, 1000);\n    }\n\n    public openDialog(content: TemplateRef<string>) {\n        this.activeDialog = this.dialogService.open(content, {size: \"lg\"});\n    }\n\n    public closeDialog() {\n        this.activeDialog.close();\n    }\n\n    public makeStepBusy() {\n        this.busyConfig.busy = true;\n        this.dialogWizardBusy.navigationControl.next({ busyState: this.busyConfig, allowStepChange: false});\n    }\n}\n","<div class=\"container\">\n    <h3>Basic Wizard</h3>\n    <ng-template #step1>\n        <p>Contents of the step 1</p>\n    </ng-template>\n    <ng-template #step2>\n        <p>Contents of the step 2</p>\n    </ng-template>\n    <ng-template #step3>\n        <div class=\"row\">\n            <div class=\"col text-justify\">\n                <p>Review the entire configurations before performing the final action.</p>\n\n                <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Proin maximus magna non sem bibendum\n                    ultricies.\n                    Proin non nisl vel augue eleifend tempor sed sit amet tortor. Nam vitae fermentum lorem, vel\n                    sollicitudin\n                    metus. Praesent consectetur, metus in venenatis condimentum, libero orci varius justo, maximus\n                    efficitur\n                    massa ipsum eu quam. Curabitur ac lacus sed neque facilisis dapibus sed non lacus. Praesent rhoncus\n                    sem at\n                    neque fringilla, non faucibus diam tincidunt. Vestibulum congue sodales elit, quis maximus lectus\n                    dapibus\n                    ut. Praesent at tellus vel tellus facilisis volutpat. Ut est dolor, molestie vehicula bibendum et,\n                    hendrerit\n                    non eros. Aliquam erat volutpat. Suspendisse quis interdum turpis. Nunc in nulla lacinia, sagittis\n                    metus ut,\n                    faucibus ligula. Donec finibus posuere ornare. Suspendisse vel convallis metus, in sodales est.\n                    Donec ultricies\n                    hendrerit mi sed convallis. Ut vitae arcu in tellus hendrerit sodales.</p>\n            </div>\n        </div>\n    </ng-template>\n    <ng-template #step4>\n        <p>Review the entire configurations before performing the final action.</p>\n    </ng-template>\n    <ng-template #busy>\n        <p>Set step to busy</p>\n        <button nui-button type=\"button\" id=\"nui-demo-busy-button\" (click)=\"makeStepBusy()\">Make current step busy</button>\n    </ng-template>\n\n    <nui-wizard #wizardComponent id=\"nui-demo-wizard\">\n        <nui-wizard-step id=\"nui-demo-wizard-step1\" [title]=\"'First'\" [stepTemplate]=\"step1\"></nui-wizard-step>\n        <nui-wizard-step id=\"nui-demo-wizard-step2\" [title]=\"'Second'\" [stepTemplate]=\"step2\"></nui-wizard-step>\n        <nui-wizard-step id=\"nui-demo-wizard-step3\" [title]=\"'Summary'\" [stepTemplate]=\"step3\"></nui-wizard-step>\n        <button nui-button type=\"button\" id=\"nui-demo-additional-button\">Additional button</button>\n    </nui-wizard>\n    <hr />\n\n    <h3>Wizard in dialog</h3>\n    <ng-template #dialogWizard>\n        <nui-dialog-header title=\"Wizard dialog\" (closed)=\"closeDialog()\"></nui-dialog-header>\n        <div class=\"dialog-body compact-mode\">\n            <nui-wizard id=\"nui-demo-wizard-dialog\" (cancel)=\"closeDialog()\">\n                <nui-wizard-step title=\"Completed\" [stepTemplate]=\"step1\"></nui-wizard-step>\n                <nui-wizard-step title=\"Active\" [stepTemplate]=\"step2\"></nui-wizard-step>\n                <nui-wizard-step title=\"Not visited\" [stepTemplate]=\"step3\"></nui-wizard-step>\n                <nui-wizard-step title=\"Summary\" [stepTemplate]=\"step4\"></nui-wizard-step>\n            </nui-wizard>\n        </div>\n    </ng-template>\n    <button id=\"nui-demo-dialog-wizard-btn\" nui-button type=\"button\" (click)=\"openDialog(dialogWizard)\"> Open\n        dialog wizard</button>\n    <hr />\n\n    <h3>Busy wizard in dialog</h3>\n    <div class=\"row d-flex justify-content-center\">\n        <div class=\"col-md-6\">\n            <nui-wizard #dialogWizardBusy id=\"nui-demo-wizard-busy\">\n                <nui-wizard-step id=\"nui-demo-wizard-step1\" [title]=\"'First'\" [stepTemplate]=\"busy\"></nui-wizard-step>\n                <nui-wizard-step id=\"nui-demo-wizard-step2\" [title]=\"'Second'\" [stepTemplate]=\"step1\"></nui-wizard-step>\n            </nui-wizard>\n        </div>\n    </div>\n    <hr />\n</div>","export default \"import { Component } from \\\"@angular/core\\\";\\n\\n@Component({\\n    selector: \\\"nui-wizard-custom-step-line-width\\\",\\n    templateUrl: \\\"./wizard-custom-step-line-width.example.component.html\\\",\\n})\\nexport class WizardCustomStepLineWidthComponent  {\\n\\n}\\n\";","export default \"<nui-wizard id=\\\"nui-demo-wizard-confirmation-dialog\\\"\\n            (cancel)=\\\"openConfirmationDialog($event, content)\\\"\\n            finishText=\\\"Finish\\\"\\n            i18n-finishText>\\n    <nui-wizard-step i18n-title title=\\\"First\\\" [stepTemplate]=\\\"step1\\\"></nui-wizard-step>\\n    <nui-wizard-step i18n-title title=\\\"Second\\\" [stepTemplate]=\\\"step1\\\"></nui-wizard-step>\\n    <nui-wizard-step i18n-title title=\\\"Third\\\" [stepTemplate]=\\\"step1\\\"></nui-wizard-step>\\n</nui-wizard>\\n<ng-template #step1>\\n    <p i18n>Wizard cancel method behavior</p>\\n</ng-template>\\n<ng-template #content let-close=\\\"close\\\">\\n    <nui-dialog-header i18n-title title=\\\"Really want to leave?\\\" (close)=\\\"onButtonClick()\\\"></nui-dialog-header>\\n    <div class=\\\"dialog-body\\\">\\n        <p i18n>\\n            There is at least one completed step in this wizard. Are you sure you want to leave?\\n        </p>\\n    </div>\\n    <nui-dialog-footer>\\n        <button nui-button type=\\\"button\\\"\\n                (click)=\\\"onButtonClick('Stay')\\\"\\n                i18n>\\n            Stay\\n        </button>\\n        <button nui-button type=\\\"button\\\"\\n                displayStyle=\\\"primary\\\"\\n                (click)=\\\"onButtonClick('Leave')\\\"\\n                i18n>\\n            Leave\\n        </button>\\n    </nui-dialog-footer>\\n</ng-template>\\n\";","export default \"<h2>Required Modules</h2>\\n<ul>\\n    <li>\\n        <code>NuiWizardModule</code>\\n    </li>\\n</ul>\\n<h2>Basic Usage</h2>\\n\\n<p>\\n    To use the wizard component, place a <code>nui-wizard</code> element in your template and include one or more\\n    <code><a href=\\\"../components/WizardStepComponent.html\\\" target=\\\"_blank\\\">nui-wizard-step</a></code> elements as children of the\\n    <code>nui-wizard</code> element.\\n</p>\\n<nui-message type=\\\"info\\\" [allowDismiss]=\\\"false\\\">\\n    <strong>Note:</strong> To specify a label for the finish button of the last step, specify a value for the\\n    <code>nui-wizard</code>'s <code>finishText</code> input.\\n</nui-message>\\n<nui-example-wrapper filenamePrefix=\\\"wizard-simple\\\" exampleTitle=\\\"Simple wizard\\\">\\n    <nui-wizard-simple-example></nui-wizard-simple-example>\\n</nui-example-wrapper>\\n\\n<h2>Usage with a dialog</h2>\\n<p>You can pass an existing wizard component as content of the dialog window. </p>\\n<p>You should insert wizard component in dialog body. </p>\\n<nui-example-wrapper filenamePrefix=\\\"wizard-dialog\\\" exampleTitle=\\\"wizard in dialog\\\">\\n    <nui-wizard-dialog-example></nui-wizard-dialog-example>\\n</nui-example-wrapper>\\n<h2>Busy step</h2>\\n<p>You can make your step busy to forbid actions.</p>\\n<p>You should pass 'busyConfig' (look at type 'IBusyConfig') to 'navigationControl' method of wizard step to make it work.</p>\\n<nui-example-wrapper filenamePrefix=\\\"wizard-busy\\\" exampleTitle=\\\"wizard step busy\\\">\\n    <nui-wizard-busy-example></nui-wizard-busy-example>\\n</nui-example-wrapper>\\n<h2>Validation</h2>\\n<p>You can use any custom input validation to wizard step.</p>\\n<p>To forbid passing to next step while form is not valid you should pass boolean value to next step's property 'stepControl'.</p>\\n<nui-example-wrapper filenamePrefix=\\\"wizard-validation\\\" exampleTitle=\\\"wizard step validation\\\">\\n    <nui-wizard-validation-example></nui-wizard-validation-example>\\n</nui-example-wrapper>\\n<h2>Disabled step</h2>\\n<p>You can disable wizard step to forbid user switch to this step.</p>\\n<p>To make step disabled you should use wizard method 'disableStep' and pass wizardStep component to it.</p>\\n<nui-example-wrapper filenamePrefix=\\\"wizard-disabled\\\" exampleTitle=\\\"wizard step disable\\\">\\n    <nui-wizard-disabled-example></nui-wizard-disabled-example>\\n</nui-example-wrapper>\\n<h2>Hide/show step</h2>\\n<p>You can hide or show wizard steps.</p>\\n<p>To make it you should use wizard methods 'hideStep', 'showStep' and pass wizardStepComponent to it.</p>\\n<nui-example-wrapper filenamePrefix=\\\"wizard-hide\\\" exampleTitle=\\\"wizard step hide/show\\\">\\n    <nui-wizard-hide-example></nui-wizard-hide-example>\\n</nui-example-wrapper>\\n<h2>Adding step dynamically</h2>\\n<p>You are able to add wizard steps dynamically</p>\\n<p>To make it you should use wizard method 'addStepDynamic' and pass 2 arguments wizardStepComponent and index to insert it in correct place.</p>\\n<p><strong>Note:</strong> Angular doesn't allow binding to outputs of dynamically created component from template. You can access outputs of\\n    <code><a href=\\\"../components/WizardStepComponent.html\\\" target=\\\"_blank\\\">nui-wizard-step</a></code> directly.<code>addStepDynamic</code> method of Wizard\\nreturns you instance of dynamically added step and you can manually subscribe to outputs like <code>enter</code>,<code>exit</code> etc.\\n</p>\\n<nui-example-wrapper filenamePrefix=\\\"wizard-dynamic\\\" exampleTitle=\\\"wizard add dynamic step\\\">\\n    <nui-wizard-dynamic-example></nui-wizard-dynamic-example>\\n</nui-example-wrapper>\\n<h2>Remove step dynamically</h2>\\n<p>You are able to remove wizard steps dynamically</p>\\n<p>To make it you should use wizard method 'removeStep' and pass index</p>\\n<p><strong>Note:</strong> Your couldn't remove first (0 index) step</p>\\n<nui-example-wrapper filenamePrefix=\\\"wizard-dynamic-remove\\\" exampleTitle=\\\"wizard remove dynamic step\\\">\\n<nui-wizard-dynamic-remove-example></nui-wizard-dynamic-remove-example>\\n</nui-example-wrapper>\\n<h2>Additional button in footer example</h2>\\n<p>You are able to provide additional button in footer of wizard.</p>\\n<p>To do it you should provide nui-button as a content of nui-wizard component.</p>\\n<nui-example-wrapper filenamePrefix=\\\"wizard-additional-button\\\" exampleTitle=\\\"wizard additional button\\\">\\n    <nui-wizard-additional-button-example></nui-wizard-additional-button-example>\\n</nui-example-wrapper>\\n<h2>Confirmation dialog</h2>\\n<p>To implement confirmation dialog you should use method 'confirm' from dialog service and call it from outputs such as 'onCancel' or 'onFinish'.</p>\\n<p>By default UX suggestion 'onCancel' output sends boolean event which is false when user is on first step.</p>\\n<p>On this example confirmation dialog represents default UX behavior and does not appear on first wizard step.</p>\\n<nui-example-wrapper filenamePrefix=\\\"wizard-confirmation-dialog\\\" exampleTitle=\\\"wizard confirmation dialog\\\">\\n    <nui-wizard-confirmation-dialog-example></nui-wizard-confirmation-dialog-example>\\n</nui-example-wrapper>\\n<h2>Constant height</h2>\\n<p>\\n    To make the height of the wizard constant for all steps and have the body of a step scroll vertically if it extends beyond the fixed height, set the\\n    <code>enableScroll</code> input to true and set the desired height of the wizard body container using the <code>bodyContainerHeight</code> input.\\n</p>\\n<p>\\n    Supported values of <code>bodyContainerHeight</code> are the same as in CSS. For example: 100px, 5vh, etc.\\n</p>\\n<nui-example-wrapper filenamePrefix=\\\"wizard-constant-height\\\" exampleTitle=\\\"wizard constant height\\\">\\n    <nui-wizard-constant-height-example></nui-wizard-constant-height-example>\\n</nui-example-wrapper>\\n<h2>Stretched steps line width</h2>\\n<p>\\n    To make the width of the steps line stretch according to the largest of step labels, use <code>stretchStepLines</code> input.\\n    With it set to <code>true</code>, wizard will calculate the width of the largest label and adjust all the lines so the labels don't overflow.\\n</p>\\n<nui-example-wrapper filenamePrefix=\\\"wizard-custom-step-line-width\\\" exampleTitle=\\\"wizard custom steps label width\\\">\\n    <nui-wizard-custom-step-line-width></nui-wizard-custom-step-line-width>\\n</nui-example-wrapper>\\n\\n<h2>Wizard steps combination</h2>\\n<p>\\n    You can provide a combination of static and dynamic steps of the wizard.\\n    See example below:\\n</p>\\n<nui-example-wrapper filenamePrefix=\\\"wizard-steps\\\" exampleTitle=\\\"wizard steps combination\\\">\\n    <nui-wizard-steps-example></nui-wizard-steps-example>\\n</nui-example-wrapper>\\n\";","export default \"<div class=\\\"container\\\">\\n    <h3>Basic Wizard</h3>\\n    <ng-template #step1>\\n        <p>Contents of the step 1</p>\\n    </ng-template>\\n    <ng-template #step2>\\n        <p>Contents of the step 2</p>\\n    </ng-template>\\n    <ng-template #step3>\\n        <div class=\\\"row\\\">\\n            <div class=\\\"col text-justify\\\">\\n                <p>Review the entire configurations before performing the final action.</p>\\n\\n                <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Proin maximus magna non sem bibendum\\n                    ultricies.\\n                    Proin non nisl vel augue eleifend tempor sed sit amet tortor. Nam vitae fermentum lorem, vel\\n                    sollicitudin\\n                    metus. Praesent consectetur, metus in venenatis condimentum, libero orci varius justo, maximus\\n                    efficitur\\n                    massa ipsum eu quam. Curabitur ac lacus sed neque facilisis dapibus sed non lacus. Praesent rhoncus\\n                    sem at\\n                    neque fringilla, non faucibus diam tincidunt. Vestibulum congue sodales elit, quis maximus lectus\\n                    dapibus\\n                    ut. Praesent at tellus vel tellus facilisis volutpat. Ut est dolor, molestie vehicula bibendum et,\\n                    hendrerit\\n                    non eros. Aliquam erat volutpat. Suspendisse quis interdum turpis. Nunc in nulla lacinia, sagittis\\n                    metus ut,\\n                    faucibus ligula. Donec finibus posuere ornare. Suspendisse vel convallis metus, in sodales est.\\n                    Donec ultricies\\n                    hendrerit mi sed convallis. Ut vitae arcu in tellus hendrerit sodales.</p>\\n            </div>\\n        </div>\\n    </ng-template>\\n    <ng-template #step4>\\n        <p>Review the entire configurations before performing the final action.</p>\\n    </ng-template>\\n    <ng-template #busy>\\n        <p>Set step to busy</p>\\n        <button nui-button type=\\\"button\\\" id=\\\"nui-demo-busy-button\\\" (click)=\\\"makeStepBusy()\\\">Make current step busy</button>\\n    </ng-template>\\n\\n    <nui-wizard #wizardComponent id=\\\"nui-demo-wizard\\\">\\n        <nui-wizard-step id=\\\"nui-demo-wizard-step1\\\" [title]=\\\"'First'\\\" [stepTemplate]=\\\"step1\\\"></nui-wizard-step>\\n        <nui-wizard-step id=\\\"nui-demo-wizard-step2\\\" [title]=\\\"'Second'\\\" [stepTemplate]=\\\"step2\\\"></nui-wizard-step>\\n        <nui-wizard-step id=\\\"nui-demo-wizard-step3\\\" [title]=\\\"'Summary'\\\" [stepTemplate]=\\\"step3\\\"></nui-wizard-step>\\n        <button nui-button type=\\\"button\\\" id=\\\"nui-demo-additional-button\\\">Additional button</button>\\n    </nui-wizard>\\n    <hr />\\n\\n    <h3>Wizard in dialog</h3>\\n    <ng-template #dialogWizard>\\n        <nui-dialog-header title=\\\"Wizard dialog\\\" (closed)=\\\"closeDialog()\\\"></nui-dialog-header>\\n        <div class=\\\"dialog-body compact-mode\\\">\\n            <nui-wizard id=\\\"nui-demo-wizard-dialog\\\" (cancel)=\\\"closeDialog()\\\">\\n                <nui-wizard-step title=\\\"Completed\\\" [stepTemplate]=\\\"step1\\\"></nui-wizard-step>\\n                <nui-wizard-step title=\\\"Active\\\" [stepTemplate]=\\\"step2\\\"></nui-wizard-step>\\n                <nui-wizard-step title=\\\"Not visited\\\" [stepTemplate]=\\\"step3\\\"></nui-wizard-step>\\n                <nui-wizard-step title=\\\"Summary\\\" [stepTemplate]=\\\"step4\\\"></nui-wizard-step>\\n            </nui-wizard>\\n        </div>\\n    </ng-template>\\n    <button id=\\\"nui-demo-dialog-wizard-btn\\\" nui-button type=\\\"button\\\" (click)=\\\"openDialog(dialogWizard)\\\"> Open\\n        dialog wizard</button>\\n    <hr />\\n\\n    <h3>Busy wizard in dialog</h3>\\n    <div class=\\\"row d-flex justify-content-center\\\">\\n        <div class=\\\"col-md-6\\\">\\n            <nui-wizard #dialogWizardBusy id=\\\"nui-demo-wizard-busy\\\">\\n                <nui-wizard-step id=\\\"nui-demo-wizard-step1\\\" [title]=\\\"'First'\\\" [stepTemplate]=\\\"busy\\\"></nui-wizard-step>\\n                <nui-wizard-step id=\\\"nui-demo-wizard-step2\\\" [title]=\\\"'Second'\\\" [stepTemplate]=\\\"step1\\\"></nui-wizard-step>\\n            </nui-wizard>\\n        </div>\\n    </div>\\n    <hr />\\n</div>\";","export default \"<ng-template #stepWithValidation>\\n    <form [formGroup]=\\\"myForm\\\">\\n        <div class=\\\"form-group\\\">\\n            <nui-form-field class=\\\"d-block mb-4\\\"\\n                            i18n-caption caption=\\\"Name\\\">\\n                <nui-textbox id=\\\"stepInputName\\\"\\n                             formControlName=\\\"name\\\"></nui-textbox>\\n            </nui-form-field>\\n        </div>\\n        <div class=\\\"form-group\\\">\\n            <nui-form-field class=\\\"d-block mb-4\\\"\\n                            [control]=\\\"myForm.controls['email']\\\"\\n                            i18n-caption\\n                            caption=\\\"Email\\\">\\n                <nui-textbox type=\\\"email\\\"\\n                             id=\\\"stepInputEmail\\\"\\n                             formControlName=\\\"email\\\"></nui-textbox>\\n                <nui-validation-message for=\\\"required\\\" *ngIf=\\\"myForm.controls['email'].errors?.required\\\" i18n>\\n                    This is required\\n                </nui-validation-message>\\n                <nui-validation-message for=\\\"pattern\\\" *ngIf=\\\"myForm.controls['email'].errors?.pattern\\\" i18n>\\n                    Please put at least \\\"@\\\" to pass this validator\\n                </nui-validation-message>\\n                <nui-validation-message for=\\\"email\\\" *ngIf=\\\"myForm.controls['email'].errors?.email\\\" i18n>\\n                    This should be a valid email\\n                </nui-validation-message>\\n                <nui-validation-message [show]=\\\"true\\\" i18n>\\n                    This message is always here\\n                </nui-validation-message>\\n            </nui-form-field>\\n        </div>\\n        <div class=\\\"form-group\\\">\\n            <nui-form-field class=\\\"d-block mb-4\\\"\\n                            i18n-caption\\n                            caption=\\\"Password\\\"\\n                            [showOptionalText]=\\\"false\\\">\\n                <nui-textbox type=\\\"password\\\"\\n                             id=\\\"stepInputPassword\\\"\\n                             formControlName=\\\"password\\\"></nui-textbox>\\n            </nui-form-field>\\n        </div>\\n    </form>\\n</ng-template>\\n<ng-template #step2>\\n    <p i18n>Hello from second step</p>\\n    <p i18n>This step has a handler for the <code>next</code> event fired from this step only, rather than from the entire wizard.</p>\\n    <form [formGroup]=\\\"secondStepForm\\\">\\n        <div class=\\\"form-group\\\">\\n            <nui-form-field [control]=\\\"secondStepForm.controls['formCheckbox']\\\">\\n                <nui-validation-message for=\\\"required\\\">\\n                    Confirm that you have configured all steps which are needed to proceed.\\n                </nui-validation-message>\\n                <nui-checkbox [required]=\\\"true\\\" [checked]=\\\"false\\\" formControlName=\\\"formCheckbox\\\">\\n                    I need to be checked to go further\\n                </nui-checkbox>\\n            </nui-form-field>\\n        </div>\\n    </form>\\n</ng-template>\\n<ng-template #step3>\\n    <p i18n>This is step #3</p>\\n</ng-template>\\n<nui-wizard #wizardComponent\\n            id=\\\"nui-demo-wizard-validation\\\"\\n            finishText=\\\"Finish\\\"\\n            i18n-finishText>\\n    <nui-wizard-step i18n-title\\n                     title=\\\"Step with validation\\\"\\n                     [stepTemplate]=\\\"stepWithValidation\\\"\\n                     [stepControl]=\\\"myForm.valid\\\"></nui-wizard-step>\\n    <nui-wizard-step #wizardStep2\\n                     i18n-title\\n                     title=\\\"Second step\\\"\\n                     [stepTemplate]=\\\"step2\\\" [stepControl]=\\\"secondStepForm.valid\\\"\\n                     (next)=\\\"updateValidity()\\\"></nui-wizard-step>\\n    <nui-wizard-step i18n-title #wizardStep3 title=\\\"Third step\\\" [stepTemplate]=\\\"step3\\\"></nui-wizard-step>\\n</nui-wizard>\\n\";","import { Component, ViewChild } from \"@angular/core\";\nimport { WizardComponent, WizardStepComponent } from \"@nova-ui/bits\";\n\n@Component({\n    selector: \"nui-wizard-hide-example\",\n    templateUrl: \"./wizard-hide.example.component.html\",\n})\nexport class WizardHiddenExampleComponent  {\n    @ViewChild(\"wizardComponent\") wizardComponent: WizardComponent;\n    @ViewChild(\"wizardStepHidden\") wizardStepHiddenComponent: WizardStepComponent;\n\n    public hideStep() {\n        this.wizardComponent.hideStep(this.wizardStepHiddenComponent);\n    }\n\n    public showStep() {\n        this.wizardComponent.showStep(this.wizardStepHiddenComponent);\n    }\n}\n","<nui-wizard #wizardComponent\n            id=\"nui-demo-wizard-hide-show\"\n            finishText=\"Finish\"\n            i18n-finishText>\n        <nui-wizard-step #wizardStepFirst i18n-title title=\"Hide show next step\" [stepTemplate]=\"step1\"></nui-wizard-step>\n        <nui-wizard-step #wizardStepHidden i18n-title title=\"Second step\" [stepTemplate]=\"stepHidden\"></nui-wizard-step>\n</nui-wizard>\n<ng-template #step1>\n    <p i18n>Hi! You can hide and show next step</p>\n    <div class=\"btn-group\">\n        <button nui-button type=\"button\" id=\"nui-demo-hide-button\" (click)=\"hideStep()\" i18n>Hide next step</button>\n        <button nui-button type=\"button\" id=\"nui-demo-show-button\" (click)=\"showStep()\" i18n>Show next step</button>\n    </div>\n</ng-template>\n<ng-template #stepHidden>\n    <p i18n>Hello from second step</p>\n</ng-template>\n","export * from \"./wizard-docs/wizard-docs.example.component\";\nexport * from \"./wizard-dialog/wizard-dialog.example.component\";\nexport * from \"./wizard-simple/wizard-simple.example.component\";\nexport * from \"./wizard-busy/wizard-busy.example.component\";\nexport * from \"./wizard-validation/wizard-validation.example.component\";\nexport * from \"./wizard-disabled/wizard-disabled.example.component\";\nexport * from \"./wizard-hide/wizard-hide.example.component\";\nexport * from \"./wizard-dynamic/wizard-dynamic.example.component\";\nexport * from \"./wizard-additional-button/wizard-additional-button.example.component\";\nexport * from \"./wizard-confirmation-dialog/wizard-confirmation-dialog.example.component\";\nexport * from \"./wizard-visual-test/wizard-visual-test.component\";\nexport * from \"./wizard-constant-height/wizard-constant-height.example.component\";\nexport * from \"./wizard-custom-step-line-width/wizard-custom-step-line-width.example.component\";\nexport * from \"./wizard-steps/wizard-steps.example.component\";\nexport * from \"./wizard-dynamic-remove/wizard-dynamic-remove.example.component\";\n","export default \"import { Component, OnDestroy, ViewChild } from \\\"@angular/core\\\";\\nimport { IWizardSelectionEvent, WizardComponent, WizardStepComponent } from \\\"@nova-ui/bits\\\";\\nimport { Subject } from \\\"rxjs\\\";\\nimport { takeUntil } from \\\"rxjs/operators\\\";\\n\\n@Component({\\n    selector: \\\"nui-wizard-dynamic-remove-example\\\",\\n    templateUrl: \\\"./wizard-dynamic-remove.example.component.html\\\",\\n})\\nexport class WizardDynamicRemoveExampleComponent implements OnDestroy {\\n    @ViewChild(\\\"wizardComponent\\\") wizardComponent: WizardComponent;\\n    @ViewChild(\\\"dynamicStep\\\") dynamicStep: WizardStepComponent;\\n\\n    public selectedIndex: number;\\n\\n    private destroy$ = new Subject();\\n\\n    public select(event: IWizardSelectionEvent): void {\\n        this.selectedIndex = event.selectedIndex;\\n    }\\n\\n    public addStep(): void {\\n        const index = this.selectedIndex + 1;\\n        const step: WizardStepComponent = this.wizardComponent.addStepDynamic(this.dynamicStep, index);\\n\\n        step.enter.pipe(takeUntil(this.destroy$))\\n            .subscribe(() => console.log(`Enter event has been emitted from WizardStepComponent`));\\n\\n        step.exit.pipe(takeUntil(this.destroy$))\\n            .subscribe(() => console.log(`Exit event has been emitted from WizardStepComponent`));\\n    }\\n\\n    public removeStep(index: number): void {\\n        this.wizardComponent.removeStep(index);\\n    }\\n\\n    public ngOnDestroy(): void {\\n        this.destroy$.next();\\n        this.destroy$.complete();\\n    }\\n}\\n\";","export default \"<ng-template #step1>\\n   \\n</ng-template>\\n<ng-template #step2>\\n    \\n</ng-template>\\n\\n<nui-wizard #wizardComponent\\n            id=\\\"nui-demo-wizard\\\"\\n            [stretchStepLines]=\\\"true\\\"\\n            finishText=\\\"Finish\\\"\\n            i18n-finishText>\\n    <nui-wizard-step id=\\\"nui-demo-wizard-step\\\" i18n-title title=\\\"This is an excessively long title why would you do it\\\" [stepTemplate]=\\\"step1\\\"></nui-wizard-step>\\n    <nui-wizard-step i18n-title title=\\\"This title is pretty long too lorem ipsum dolor\\\" [stepTemplate]=\\\"step2\\\"></nui-wizard-step>\\n</nui-wizard>\\n\";","export default \"export * from \\\"./wizard-docs/wizard-docs.example.component\\\";\\nexport * from \\\"./wizard-dialog/wizard-dialog.example.component\\\";\\nexport * from \\\"./wizard-simple/wizard-simple.example.component\\\";\\nexport * from \\\"./wizard-busy/wizard-busy.example.component\\\";\\nexport * from \\\"./wizard-validation/wizard-validation.example.component\\\";\\nexport * from \\\"./wizard-disabled/wizard-disabled.example.component\\\";\\nexport * from \\\"./wizard-hide/wizard-hide.example.component\\\";\\nexport * from \\\"./wizard-dynamic/wizard-dynamic.example.component\\\";\\nexport * from \\\"./wizard-additional-button/wizard-additional-button.example.component\\\";\\nexport * from \\\"./wizard-confirmation-dialog/wizard-confirmation-dialog.example.component\\\";\\nexport * from \\\"./wizard-visual-test/wizard-visual-test.component\\\";\\nexport * from \\\"./wizard-constant-height/wizard-constant-height.example.component\\\";\\nexport * from \\\"./wizard-custom-step-line-width/wizard-custom-step-line-width.example.component\\\";\\nexport * from \\\"./wizard-steps/wizard-steps.example.component\\\";\\nexport * from \\\"./wizard-dynamic-remove/wizard-dynamic-remove.example.component\\\";\\n\";","import { Component } from \"@angular/core\";\n\n@Component({\n    selector: \"nui-wizard-custom-step-line-width\",\n    templateUrl: \"./wizard-custom-step-line-width.example.component.html\",\n})\nexport class WizardCustomStepLineWidthComponent  {\n\n}\n","<ng-template #step1>\n   \n</ng-template>\n<ng-template #step2>\n    \n</ng-template>\n\n<nui-wizard #wizardComponent\n            id=\"nui-demo-wizard\"\n            [stretchStepLines]=\"true\"\n            finishText=\"Finish\"\n            i18n-finishText>\n    <nui-wizard-step id=\"nui-demo-wizard-step\" i18n-title title=\"This is an excessively long title why would you do it\" [stepTemplate]=\"step1\"></nui-wizard-step>\n    <nui-wizard-step i18n-title title=\"This title is pretty long too lorem ipsum dolor\" [stepTemplate]=\"step2\"></nui-wizard-step>\n</nui-wizard>\n","export default \"import { Component, OnDestroy, ViewChild } from \\\"@angular/core\\\";\\nimport { IWizardSelectionEvent, WizardComponent, WizardStepComponent } from \\\"@nova-ui/bits\\\";\\nimport { Subscription } from \\\"rxjs\\\";\\n\\n@Component({\\n    selector: \\\"nui-wizard-dynamic-example\\\",\\n    templateUrl: \\\"./wizard-dynamic.example.component.html\\\",\\n})\\nexport class WizardDynamicExampleComponent implements OnDestroy {\\n    @ViewChild(\\\"wizardComponent\\\") wizardComponent: WizardComponent;\\n    @ViewChild(\\\"dynamicStep\\\") dynamicStep: WizardStepComponent;\\n\\n    public selectedIndex: number;\\n\\n    private dynamicStepsSubscriptions: Subscription[] = [];\\n\\n    public select(event: IWizardSelectionEvent) {\\n        this.selectedIndex = event.selectedIndex;\\n    }\\n\\n    public addStep() {\\n        // addStepDynamic returns an instance of WizardStepComponent that was dynamically added\\n        const step: WizardStepComponent = this.wizardComponent.addStepDynamic(this.dynamicStep, this.selectedIndex + 1);\\n        // subscribe to entering the dynamic step and push it to subscriptions array\\n        this.dynamicStepsSubscriptions.push(step.enter.subscribe(() => {\\n            console.log(\\\"Enter event has been emitted from WizardStepComponent\\\");\\n        }));\\n        // subscribe to exiting the dynamic step and push it to subscriptions array\\n        this.dynamicStepsSubscriptions.push(step.exit.subscribe(() => {\\n            console.log(\\\"Exit event has been emitted from WizardStepComponent\\\");\\n        }));\\n    }\\n\\n    public ngOnDestroy(): void {\\n        this.dynamicStepsSubscriptions.forEach(subscription => subscription.unsubscribe());\\n    }\\n}\\n\";","export default \"<ng-template #stepBusy>\\n    <p i18n>Welcome!</p>\\n</ng-template>\\n<ng-template #step2>\\n    <nui-checkbox name=\\\"nui-demo-checkbox\\\"\\n                    i18n-title\\n                    title=\\\"Check box with help text\\\"\\n                    i18n-hint\\n                    hint=\\\"This is some help text\\\"\\n                    required=\\\"true\\\"\\n                    [value]=\\\"false\\\"\\n                    i18n>Check box with help text\\n    </nui-checkbox>\\n    <nui-checkbox name=\\\"nui-demo-checkbox-plain\\\"\\n                    [checked]=\\\"true\\\"\\n                    [value]=\\\"false\\\"\\n                    i18n>Plain checkbox\\n    </nui-checkbox>\\n</ng-template>\\n<nui-wizard #wizardComponent\\n            id=\\\"nui-demo-wizard-busy\\\"\\n            finishText=\\\"Finish\\\"\\n            i18n-finishText>\\n    <nui-wizard-step i18n-title title=\\\"Make step busy\\\" [stepTemplate]=\\\"stepBusy\\\"></nui-wizard-step>\\n    <nui-wizard-step i18n-title title=\\\"Final\\\" [stepTemplate]=\\\"step2\\\"></nui-wizard-step>\\n</nui-wizard>\\n\\n<button nui-button type=\\\"button\\\" id=\\\"nui-demo-busy-button\\\" (click)=\\\"toggleStepBusy()\\\" i18n>Toggle busy on current step</button>\\n\";","export default \"import { Component, Inject, TemplateRef } from \\\"@angular/core\\\";\\nimport { DialogService, NuiDialogRef, ToastService } from \\\"@nova-ui/bits\\\";\\n\\n@Component({\\n    selector: \\\"nui-wizard-confirmation-dialog-example\\\",\\n    templateUrl: \\\"./wizard-confirmation-dialog.example.component.html\\\",\\n})\\nexport class WizardConfirmationDialogExampleComponent {\\n    public activeDialog: NuiDialogRef;\\n\\n    constructor(@Inject(DialogService) private dialogService: DialogService,\\n        @Inject(ToastService) private toastService: ToastService) { }\\n\\n    public openConfirmationDialog($event: boolean, content: TemplateRef<string>) {\\n        if ($event) {\\n            this.activeDialog = this.dialogService.open(content, {size: \\\"sm\\\"});\\n        } else {\\n            this.toastService.info({\\n                message: $localize `Cancel button clicked!`,\\n                title: $localize `Event`,\\n            });\\n        }\\n    }\\n\\n    public onButtonClick(title: string) {\\n        title === \\\"Leave\\\" ? this.actionDone() : this.actionCanceled();\\n        this.activeDialog.close();\\n    }\\n\\n    private actionDone(): void {\\n        this.toastService.success({\\n            message: $localize `Leave Done!`,\\n            title: $localize `Event`,\\n        });\\n    }\\n\\n    private actionCanceled(): void {\\n        this.toastService.info({\\n            message: $localize `Action Canceled!`,\\n            title: $localize `Event`,\\n        });\\n    }\\n}\\n\";","export default \"import { Component, Inject, OnInit, TemplateRef, ViewChild } from \\\"@angular/core\\\";\\nimport { FormBuilder, FormGroup, Validators } from \\\"@angular/forms\\\";\\nimport {\\n    DialogService, IBusyConfig, IWizardSelectionEvent, NuiDialogRef, WizardComponent, WizardStepComponent,\\n} from \\\"@nova-ui/bits\\\";\\n\\n@Component({\\n    selector: \\\"nui-wizard-visual\\\",\\n    templateUrl: \\\"./wizard-visual-test.component.html\\\",\\n})\\nexport class WizardVisualTestComponent implements OnInit {\\n    @ViewChild(\\\"wizardComponent\\\") wizardComponent: WizardComponent;\\n    @ViewChild(\\\"dialogWizardBusy\\\") dialogWizardBusy: WizardComponent;\\n\\n    public myForm: FormGroup;\\n    public hint = \\\"example-hint\\\";\\n    public caption = \\\"example-caption\\\";\\n    public secondStepBusyConfig: IBusyConfig = {\\n        busy: false,\\n        message: \\\"Step is busy\\\",\\n    };\\n    public busyConfig: IBusyConfig = {\\n        busy: false,\\n        message: \\\"Step is busy\\\",\\n    };\\n    public selectedIndex: number;\\n\\n    private activeDialog: NuiDialogRef;\\n\\n    constructor(private formBuilder: FormBuilder,\\n                @Inject(DialogService) private dialogService: DialogService) {}\\n\\n    public ngOnInit() {\\n        this.myForm = this.formBuilder.group({\\n            name: this.formBuilder.control(\\\"\\\",\\n                                           Validators.required),\\n            email: this.formBuilder.control(\\\"\\\", [\\n                Validators.required,\\n                Validators.pattern(\\\"[^ @]*@[^ @]*\\\"),\\n            ]),\\n            password: this.formBuilder.control(\\\"\\\", [\\n                Validators.required,\\n                Validators.minLength(8),\\n            ]),\\n        });\\n    }\\n\\n    public onOptionChange(value: string) {\\n        this.hint = value;\\n    }\\n\\n    public makeSecondStepBusy() {\\n        this.secondStepBusyConfig.busy = true;\\n        this.wizardComponent.navigationControl.next({ busyState: this.secondStepBusyConfig, allowStepChange: false});\\n        setTimeout(() => {\\n            this.secondStepBusyConfig.busy = false;\\n            this.wizardComponent.navigationControl.next({ busyState: this.secondStepBusyConfig, allowStepChange: true});\\n        }, 1000);\\n    }\\n\\n    public onCancelClick(content: TemplateRef<string>) {\\n        if (this.wizardComponent.steps.toArray().filter((step: WizardStepComponent) => step.complete).length !== 0) {\\n            this.activeDialog = this.dialogService.open(content, {size: \\\"sm\\\"});\\n        }\\n    }\\n\\n    public select(event: IWizardSelectionEvent) {\\n        this.selectedIndex = event.selectedIndex;\\n    }\\n\\n    public preventGoingNext() {\\n        this.busyConfig.busy = true;\\n        this.wizardComponent.navigationControl.next({ busyState: this.busyConfig, allowStepChange: false});\\n        setTimeout(() => {\\n            this.busyConfig.busy = false;\\n            this.wizardComponent.navigationControl.next({ busyState: this.busyConfig, allowStepChange: true});\\n        }, 1000);\\n    }\\n\\n    public openDialog(content: TemplateRef<string>) {\\n        this.activeDialog = this.dialogService.open(content, {size: \\\"lg\\\"});\\n    }\\n\\n    public closeDialog() {\\n        this.activeDialog.close();\\n    }\\n\\n    public makeStepBusy() {\\n        this.busyConfig.busy = true;\\n        this.dialogWizardBusy.navigationControl.next({ busyState: this.busyConfig, allowStepChange: false});\\n    }\\n}\\n\";","export default \"import { Component, ViewChild } from \\\"@angular/core\\\";\\nimport { IBusyConfig, WizardComponent } from \\\"@nova-ui/bits\\\";\\n\\n@Component({\\n    selector: \\\"nui-wizard-busy-example\\\",\\n    templateUrl: \\\"./wizard-busy.example.component.html\\\",\\n})\\nexport class WizardBusyExampleComponent  {\\n    @ViewChild(\\\"wizardComponent\\\") wizardComponent: WizardComponent;\\n\\n    public busyConfig: IBusyConfig = {\\n        busy: false,\\n        message: $localize `Step is busy`,\\n    };\\n\\n    constructor() {}\\n\\n    public toggleStepBusy() {\\n        this.busyConfig.busy = !this.busyConfig.busy;\\n        this.wizardComponent.navigationControl.next({ busyState: this.busyConfig, allowStepChange: !this.busyConfig.busy});\\n    }\\n}\\n\";","import { Component, ViewChild } from \"@angular/core\";\nimport { IBusyConfig, WizardComponent } from \"@nova-ui/bits\";\n\n@Component({\n    selector: \"nui-wizard-busy-example\",\n    templateUrl: \"./wizard-busy.example.component.html\",\n})\nexport class WizardBusyExampleComponent  {\n    @ViewChild(\"wizardComponent\") wizardComponent: WizardComponent;\n\n    public busyConfig: IBusyConfig = {\n        busy: false,\n        message: $localize `Step is busy`,\n    };\n\n    constructor() {}\n\n    public toggleStepBusy() {\n        this.busyConfig.busy = !this.busyConfig.busy;\n        this.wizardComponent.navigationControl.next({ busyState: this.busyConfig, allowStepChange: !this.busyConfig.busy});\n    }\n}\n","<ng-template #stepBusy>\n    <p i18n>Welcome!</p>\n</ng-template>\n<ng-template #step2>\n    <nui-checkbox name=\"nui-demo-checkbox\"\n                    i18n-title\n                    title=\"Check box with help text\"\n                    i18n-hint\n                    hint=\"This is some help text\"\n                    required=\"true\"\n                    [value]=\"false\"\n                    i18n>Check box with help text\n    </nui-checkbox>\n    <nui-checkbox name=\"nui-demo-checkbox-plain\"\n                    [checked]=\"true\"\n                    [value]=\"false\"\n                    i18n>Plain checkbox\n    </nui-checkbox>\n</ng-template>\n<nui-wizard #wizardComponent\n            id=\"nui-demo-wizard-busy\"\n            finishText=\"Finish\"\n            i18n-finishText>\n    <nui-wizard-step i18n-title title=\"Make step busy\" [stepTemplate]=\"stepBusy\"></nui-wizard-step>\n    <nui-wizard-step i18n-title title=\"Final\" [stepTemplate]=\"step2\"></nui-wizard-step>\n</nui-wizard>\n\n<button nui-button type=\"button\" id=\"nui-demo-busy-button\" (click)=\"toggleStepBusy()\" i18n>Toggle busy on current step</button>\n","export default \"import { Component, Inject } from \\\"@angular/core\\\";\\nimport { ToastService } from \\\"@nova-ui/bits\\\";\\n\\n@Component({\\n    selector: \\\"nui-wizard-additional-button-example\\\",\\n    templateUrl: \\\"./wizard-additional-button.example.component.html\\\",\\n})\\nexport class WizardAdditionalButtonExampleComponent  {\\n    constructor(@Inject(ToastService) private toastService: ToastService) {}\\n\\n    public onAdditionalButtonClick() {\\n        this.toastService.info({message: $localize `Additional button clicked!`});\\n    }\\n}\\n\";","export default \"import { NgModule } from \\\"@angular/core\\\";\\nimport { FormsModule, ReactiveFormsModule } from \\\"@angular/forms\\\";\\nimport { RouterModule } from \\\"@angular/router\\\";\\nimport {\\n    DEMO_PATH_TOKEN,\\n    NuiButtonModule,\\n    NuiCheckboxModule,\\n    NuiDialogModule,\\n    NuiDocsModule,\\n    NuiFormFieldModule,\\n    NuiMessageModule,\\n    NuiRadioModule,\\n    NuiTextboxModule,\\n    NuiValidationMessageModule,\\n    NuiWizardModule,\\n    SrlcStage,\\n} from \\\"@nova-ui/bits\\\";\\n\\nimport {\\n    WizardAdditionalButtonExampleComponent,\\n    WizardBusyExampleComponent,\\n    WizardConfirmationDialogExampleComponent,\\n    WizardConstantHeightExampleComponent,\\n    WizardCustomStepLineWidthComponent,\\n    WizardDialogExampleComponent,\\n    WizardDisabledExampleComponent,\\n    WizardDynamicExampleComponent,\\n    WizardExampleComponent,\\n    WizardHiddenExampleComponent,\\n    WizardSimpleExampleComponent,\\n    WizardStepsExampleComponent,\\n    WizardValidationExampleComponent,\\n    WizardVisualTestComponent,\\n    WizardDynamicRemoveExampleComponent,\\n} from \\\"./index\\\";\\n\\nconst routes = [\\n    {\\n        path: \\\"\\\",\\n        component: WizardExampleComponent,\\n        data: {\\n            \\\"srlc\\\": {\\n                \\\"stage\\\": SrlcStage.ga,\\n            },\\n            showThemeSwitcher: true,\\n        },\\n    },\\n    {\\n        path: \\\"wizard-test\\\",\\n        component: WizardExampleComponent,\\n    },\\n    {\\n        path: \\\"wizard-visual-test\\\",\\n        component: WizardVisualTestComponent,\\n        data: {\\n            \\\"srlc\\\": {\\n                \\\"hideIndicator\\\": true,\\n            },\\n        },\\n    },\\n    {\\n        path: \\\"wizard-steps\\\",\\n        component: WizardStepsExampleComponent,\\n    },\\n];\\n\\n@NgModule({\\n    imports: [\\n        NuiButtonModule,\\n        NuiWizardModule,\\n        NuiMessageModule,\\n        NuiDocsModule,\\n        NuiTextboxModule,\\n        NuiRadioModule,\\n        NuiCheckboxModule,\\n        NuiDialogModule,\\n        NuiValidationMessageModule,\\n        NuiFormFieldModule,\\n        FormsModule,\\n        ReactiveFormsModule,\\n        RouterModule.forChild(routes),\\n    ],\\n    declarations: [\\n        WizardAdditionalButtonExampleComponent,\\n        WizardBusyExampleComponent,\\n        WizardConfirmationDialogExampleComponent,\\n        WizardConstantHeightExampleComponent,\\n        WizardDialogExampleComponent,\\n        WizardDisabledExampleComponent,\\n        WizardDynamicExampleComponent,\\n        WizardExampleComponent,\\n        WizardHiddenExampleComponent,\\n        WizardSimpleExampleComponent,\\n        WizardValidationExampleComponent,\\n        WizardVisualTestComponent,\\n        WizardCustomStepLineWidthComponent,\\n        WizardDynamicRemoveExampleComponent,\\n        WizardStepsExampleComponent,\\n    ],\\n    providers: [\\n        {\\n            provide: DEMO_PATH_TOKEN,\\n            useFactory: () => (<any>require).context(`!!raw-loader!./`, true, /.*\\\\.(ts|html|less)$/),\\n        },\\n    ],\\n    exports: [\\n        RouterModule,\\n    ],\\n})\\nexport class WizardModule {\\n}\\n\";","export default \"<ng-template #step1>\\n    <nui-textbox\\n        i18n-caption\\n        caption=\\\"First\\\"\\n        name=\\\"hint\\\"\\n        [value]=\\\"hint\\\"\\n        customBoxWidth=\\\"150px\\\"\\n        (textChange)=\\\"onOptionChange($event)\\\">\\n    </nui-textbox>\\n</ng-template>\\n<ng-template #step2>\\n    <nui-checkbox name=\\\"nui-demo-checkbox\\\"\\n                  i18n-title\\n                  title=\\\"Check box with help text\\\"\\n                  i18n-hint\\n                  hint=\\\"This is some help text\\\"\\n                  required=\\\"true\\\"\\n                  [value]=\\\"false\\\" i18n>Check box with help text\\n    </nui-checkbox>\\n</ng-template>\\n\\n<nui-wizard #wizardComponent\\n            id=\\\"nui-demo-wizard\\\"\\n            finishText=\\\"Finish\\\"\\n            i18n-finishText>\\n    <nui-wizard-step id=\\\"nui-demo-wizard-step\\\" i18n-title title=\\\"First\\\" [stepTemplate]=\\\"step1\\\"></nui-wizard-step>\\n    <nui-wizard-step i18n-title title=\\\"Final\\\" [stepTemplate]=\\\"step2\\\"></nui-wizard-step>\\n</nui-wizard>\\n\";","export default \"import { Component, Inject, TemplateRef, ViewChild } from \\\"@angular/core\\\";\\nimport { DialogService, NuiDialogRef, ToastService, WizardComponent } from \\\"@nova-ui/bits\\\";\\n\\n@Component({\\n    selector: \\\"nui-wizard-dialog-example\\\",\\n    templateUrl: \\\"./wizard-dialog.example.component.html\\\",\\n})\\nexport class WizardDialogExampleComponent {\\n    @ViewChild(\\\"wizardComponent\\\") wizardComponent: WizardComponent;\\n\\n    public activeDialog: NuiDialogRef;\\n\\n    constructor(@Inject(DialogService) private dialogService: DialogService,\\n        @Inject(ToastService) private toastService: ToastService) { }\\n\\n    public vegetables = [$localize `Cabbage`, $localize `Potato`, $localize `Tomato`, $localize `Carrot`];\\n    public selectedVegetables = [$localize `Potato`, $localize `Tomato`];\\n\\n    public isChecked(vegetable: string): boolean {\\n        return this.selectedVegetables.indexOf(vegetable) > -1;\\n    }\\n\\n    public valuesChanged(values: any[]) {\\n        this.selectedVegetables = [...values];\\n    }\\n\\n    public openDialog(content: TemplateRef<string>) {\\n        this.activeDialog = this.dialogService.open(content, {size: \\\"lg\\\"});\\n    }\\n\\n    public closeDialog() {\\n        this.activeDialog.close();\\n    }\\n}\\n\";","<ng-template #step1>\n    <nui-textbox\n        name=\"hint\"\n        value=\"Example Value\">\n    </nui-textbox>\n    <button nui-button\n            class=\"m-2\"\n            type=\"button\"\n            (click)=\"increaseHeight()\" i18n>\n        Increase height of container\n    </button>\n    <button nui-button\n            class=\"m-2\"\n            type=\"button\"\n            (click)=\"decreaseHeight()\" i18n>\n        Decrease height of container\n    </button>\n</ng-template>\n<ng-template #step2>\n    <nui-checkbox [checked]=\"true\" i18n>Checkbox 1</nui-checkbox>\n    <nui-checkbox [checked]=\"false\" i18n>Checkbox 2</nui-checkbox>\n    <nui-checkbox [checked]=\"true\" i18n>Checkbox 3</nui-checkbox>\n</ng-template>\n<ng-template #step3>\n    <nui-textbox\n        name=\"hint\"\n        value=\"Step 3 value\">\n    </nui-textbox>\n</ng-template>\n<ng-template #step4>\n    <nui-radio-group name=\"fruit\">\n        <nui-radio value=\"Banana\" i18n>\n            Banana\n        </nui-radio>\n        <nui-radio value=\"Mango\" i18n>\n            Mango\n        </nui-radio>\n        <nui-radio value=\"Kiwi\" i18n>\n            Kiwi\n        </nui-radio>\n    </nui-radio-group>\n</ng-template>\n<nui-wizard #wizardComponent\n            id=\"nui-demo-wizard-constant-height\"\n            [enableScroll]=\"true\"\n            [bodyContainerHeight]=\"wizardBodyHeight\"\n            finishText=\"Finish\"\n            i18n-finishText>\n    <nui-wizard-step id=\"nui-demo-wizard-height-invariable-step\"\n                     i18n-title\n                     title=\"First\"\n                     [stepTemplate]=\"step1\"></nui-wizard-step>\n    <nui-wizard-step i18n-title\n                     title=\"Second\"\n                     [stepTemplate]=\"step2\"></nui-wizard-step>\n    <nui-wizard-step i18n-title\n                     title=\"Third\"\n                     [stepTemplate]=\"step3\"></nui-wizard-step>\n    <nui-wizard-step i18n-title\n                     title=\"Final\"\n                     [stepTemplate]=\"step4\"></nui-wizard-step>\n</nui-wizard>\n","import { Component } from \"@angular/core\";\n\n@Component({\n    selector: \"nui-wizard-constant-height-example\",\n    templateUrl: \"./wizard-constant-height.example.component.html\",\n})\n\nexport class WizardConstantHeightExampleComponent {\n    public wizardBodyHeight: string = \"200px\";\n\n    public increaseHeight() {\n        this.wizardBodyHeight = `${parseInt(this.wizardBodyHeight, 10) + 20}px`;\n    }\n\n    public decreaseHeight() {\n        this.wizardBodyHeight = `${parseInt(this.wizardBodyHeight, 10) - 20}px`;\n    }\n}\n","import { Component } from \"@angular/core\";\n\n@Component({\n    selector: \"nui-wizard-example\",\n    templateUrl: \"./wizard-docs.example.component.html\",\n})\nexport class WizardExampleComponent {}\n","<h2>Required Modules</h2>\n<ul>\n    <li>\n        <code>NuiWizardModule</code>\n    </li>\n</ul>\n<h2>Basic Usage</h2>\n\n<p>\n    To use the wizard component, place a <code>nui-wizard</code> element in your template and include one or more\n    <code><a href=\"../components/WizardStepComponent.html\" target=\"_blank\">nui-wizard-step</a></code> elements as children of the\n    <code>nui-wizard</code> element.\n</p>\n<nui-message type=\"info\" [allowDismiss]=\"false\">\n    <strong>Note:</strong> To specify a label for the finish button of the last step, specify a value for the\n    <code>nui-wizard</code>'s <code>finishText</code> input.\n</nui-message>\n<nui-example-wrapper filenamePrefix=\"wizard-simple\" exampleTitle=\"Simple wizard\">\n    <nui-wizard-simple-example></nui-wizard-simple-example>\n</nui-example-wrapper>\n\n<h2>Usage with a dialog</h2>\n<p>You can pass an existing wizard component as content of the dialog window. </p>\n<p>You should insert wizard component in dialog body. </p>\n<nui-example-wrapper filenamePrefix=\"wizard-dialog\" exampleTitle=\"wizard in dialog\">\n    <nui-wizard-dialog-example></nui-wizard-dialog-example>\n</nui-example-wrapper>\n<h2>Busy step</h2>\n<p>You can make your step busy to forbid actions.</p>\n<p>You should pass 'busyConfig' (look at type 'IBusyConfig') to 'navigationControl' method of wizard step to make it work.</p>\n<nui-example-wrapper filenamePrefix=\"wizard-busy\" exampleTitle=\"wizard step busy\">\n    <nui-wizard-busy-example></nui-wizard-busy-example>\n</nui-example-wrapper>\n<h2>Validation</h2>\n<p>You can use any custom input validation to wizard step.</p>\n<p>To forbid passing to next step while form is not valid you should pass boolean value to next step's property 'stepControl'.</p>\n<nui-example-wrapper filenamePrefix=\"wizard-validation\" exampleTitle=\"wizard step validation\">\n    <nui-wizard-validation-example></nui-wizard-validation-example>\n</nui-example-wrapper>\n<h2>Disabled step</h2>\n<p>You can disable wizard step to forbid user switch to this step.</p>\n<p>To make step disabled you should use wizard method 'disableStep' and pass wizardStep component to it.</p>\n<nui-example-wrapper filenamePrefix=\"wizard-disabled\" exampleTitle=\"wizard step disable\">\n    <nui-wizard-disabled-example></nui-wizard-disabled-example>\n</nui-example-wrapper>\n<h2>Hide/show step</h2>\n<p>You can hide or show wizard steps.</p>\n<p>To make it you should use wizard methods 'hideStep', 'showStep' and pass wizardStepComponent to it.</p>\n<nui-example-wrapper filenamePrefix=\"wizard-hide\" exampleTitle=\"wizard step hide/show\">\n    <nui-wizard-hide-example></nui-wizard-hide-example>\n</nui-example-wrapper>\n<h2>Adding step dynamically</h2>\n<p>You are able to add wizard steps dynamically</p>\n<p>To make it you should use wizard method 'addStepDynamic' and pass 2 arguments wizardStepComponent and index to insert it in correct place.</p>\n<p><strong>Note:</strong> Angular doesn't allow binding to outputs of dynamically created component from template. You can access outputs of\n    <code><a href=\"../components/WizardStepComponent.html\" target=\"_blank\">nui-wizard-step</a></code> directly.<code>addStepDynamic</code> method of Wizard\nreturns you instance of dynamically added step and you can manually subscribe to outputs like <code>enter</code>,<code>exit</code> etc.\n</p>\n<nui-example-wrapper filenamePrefix=\"wizard-dynamic\" exampleTitle=\"wizard add dynamic step\">\n    <nui-wizard-dynamic-example></nui-wizard-dynamic-example>\n</nui-example-wrapper>\n<h2>Remove step dynamically</h2>\n<p>You are able to remove wizard steps dynamically</p>\n<p>To make it you should use wizard method 'removeStep' and pass index</p>\n<p><strong>Note:</strong> Your couldn't remove first (0 index) step</p>\n<nui-example-wrapper filenamePrefix=\"wizard-dynamic-remove\" exampleTitle=\"wizard remove dynamic step\">\n<nui-wizard-dynamic-remove-example></nui-wizard-dynamic-remove-example>\n</nui-example-wrapper>\n<h2>Additional button in footer example</h2>\n<p>You are able to provide additional button in footer of wizard.</p>\n<p>To do it you should provide nui-button as a content of nui-wizard component.</p>\n<nui-example-wrapper filenamePrefix=\"wizard-additional-button\" exampleTitle=\"wizard additional button\">\n    <nui-wizard-additional-button-example></nui-wizard-additional-button-example>\n</nui-example-wrapper>\n<h2>Confirmation dialog</h2>\n<p>To implement confirmation dialog you should use method 'confirm' from dialog service and call it from outputs such as 'onCancel' or 'onFinish'.</p>\n<p>By default UX suggestion 'onCancel' output sends boolean event which is false when user is on first step.</p>\n<p>On this example confirmation dialog represents default UX behavior and does not appear on first wizard step.</p>\n<nui-example-wrapper filenamePrefix=\"wizard-confirmation-dialog\" exampleTitle=\"wizard confirmation dialog\">\n    <nui-wizard-confirmation-dialog-example></nui-wizard-confirmation-dialog-example>\n</nui-example-wrapper>\n<h2>Constant height</h2>\n<p>\n    To make the height of the wizard constant for all steps and have the body of a step scroll vertically if it extends beyond the fixed height, set the\n    <code>enableScroll</code> input to true and set the desired height of the wizard body container using the <code>bodyContainerHeight</code> input.\n</p>\n<p>\n    Supported values of <code>bodyContainerHeight</code> are the same as in CSS. For example: 100px, 5vh, etc.\n</p>\n<nui-example-wrapper filenamePrefix=\"wizard-constant-height\" exampleTitle=\"wizard constant height\">\n    <nui-wizard-constant-height-example></nui-wizard-constant-height-example>\n</nui-example-wrapper>\n<h2>Stretched steps line width</h2>\n<p>\n    To make the width of the steps line stretch according to the largest of step labels, use <code>stretchStepLines</code> input.\n    With it set to <code>true</code>, wizard will calculate the width of the largest label and adjust all the lines so the labels don't overflow.\n</p>\n<nui-example-wrapper filenamePrefix=\"wizard-custom-step-line-width\" exampleTitle=\"wizard custom steps label width\">\n    <nui-wizard-custom-step-line-width></nui-wizard-custom-step-line-width>\n</nui-example-wrapper>\n\n<h2>Wizard steps combination</h2>\n<p>\n    You can provide a combination of static and dynamic steps of the wizard.\n    See example below:\n</p>\n<nui-example-wrapper filenamePrefix=\"wizard-steps\" exampleTitle=\"wizard steps combination\">\n    <nui-wizard-steps-example></nui-wizard-steps-example>\n</nui-example-wrapper>\n","export default \"<nui-wizard #wizardComponent\\n            id=\\\"nui-demo-wizard-disable\\\"\\n            finishText=\\\"Finish\\\"\\n            i18n-finishText>\\n        <nui-wizard-step #wizardStepFirst i18n-title title=\\\"Disable next step\\\" [stepTemplate]=\\\"step1\\\"></nui-wizard-step>\\n        <nui-wizard-step #wizardStepDisable i18n-title title=\\\"Second step\\\" [stepTemplate]=\\\"stepDisabled\\\"></nui-wizard-step>\\n</nui-wizard>\\n<ng-template #step1>\\n    <p i18n>Hi! You can disable next step</p>\\n    <div class=\\\"btn-group\\\">\\n        <button nui-button type=\\\"button\\\" id=\\\"nui-demo-disable-button\\\" (click)=\\\"disableStep()\\\" i18n>Disable next step</button>\\n        <button nui-button type=\\\"button\\\" id=\\\"nui-demo-enable-button\\\" (click)=\\\"enableStep()\\\" i18n>Enable next step</button>\\n    </div>\\n</ng-template>\\n<ng-template #stepDisabled>\\n    <p i18n>Disabled step</p>\\n</ng-template>\\n\";","import { Component, OnDestroy, ViewChild } from \"@angular/core\";\nimport { IWizardSelectionEvent, WizardComponent, WizardStepComponent } from \"@nova-ui/bits\";\nimport { Subscription } from \"rxjs\";\n\n@Component({\n    selector: \"nui-wizard-dynamic-example\",\n    templateUrl: \"./wizard-dynamic.example.component.html\",\n})\nexport class WizardDynamicExampleComponent implements OnDestroy {\n    @ViewChild(\"wizardComponent\") wizardComponent: WizardComponent;\n    @ViewChild(\"dynamicStep\") dynamicStep: WizardStepComponent;\n\n    public selectedIndex: number;\n\n    private dynamicStepsSubscriptions: Subscription[] = [];\n\n    public select(event: IWizardSelectionEvent) {\n        this.selectedIndex = event.selectedIndex;\n    }\n\n    public addStep() {\n        // addStepDynamic returns an instance of WizardStepComponent that was dynamically added\n        const step: WizardStepComponent = this.wizardComponent.addStepDynamic(this.dynamicStep, this.selectedIndex + 1);\n        // subscribe to entering the dynamic step and push it to subscriptions array\n        this.dynamicStepsSubscriptions.push(step.enter.subscribe(() => {\n            console.log(\"Enter event has been emitted from WizardStepComponent\");\n        }));\n        // subscribe to exiting the dynamic step and push it to subscriptions array\n        this.dynamicStepsSubscriptions.push(step.exit.subscribe(() => {\n            console.log(\"Exit event has been emitted from WizardStepComponent\");\n        }));\n    }\n\n    public ngOnDestroy(): void {\n        this.dynamicStepsSubscriptions.forEach(subscription => subscription.unsubscribe());\n    }\n}\n","<nui-wizard #wizardComponent\n            id=\"nui-demo-wizard-add-dynamic\"\n            (selectionChange)=\"select($event)\"\n            finishText=\"Finish\"\n            i18n-finishText>\n        <nui-wizard-step #wizardStepAdd i18n-title title=\"Add step dynamically\" [stepTemplate]=\"step1\"></nui-wizard-step>\n</nui-wizard>\n<nui-wizard-step #dynamicStep [title]=\"'Dynamic'\" [stepTemplate]=\"dynamicStepTemplate\"></nui-wizard-step>\n<ng-template #step1>\n    <p i18n>Hi! You can add next step dynamically</p>\n    <button nui-button type=\"button\" id=\"nui-demo-dynamic-button\" (click)=\"addStep()\" i18n>Add dynamic step</button>\n</ng-template>\n<ng-template #dynamicStepTemplate>\n    <p i18n>Hi! I'm dynamic step!</p>\n</ng-template>\n","var map = {\n\t\"./index.ts\": \"Tl9n\",\n\t\"./wizard-additional-button/wizard-additional-button.example.component.html\": \"f1pX\",\n\t\"./wizard-additional-button/wizard-additional-button.example.component.ts\": \"a83j\",\n\t\"./wizard-busy/wizard-busy.example.component.html\": \"XQtI\",\n\t\"./wizard-busy/wizard-busy.example.component.ts\": \"Y0jJ\",\n\t\"./wizard-confirmation-dialog/wizard-confirmation-dialog.example.component.html\": \"LXgN\",\n\t\"./wizard-confirmation-dialog/wizard-confirmation-dialog.example.component.ts\": \"XTji\",\n\t\"./wizard-constant-height/wizard-constant-height.example.component.html\": \"fKPJ\",\n\t\"./wizard-constant-height/wizard-constant-height.example.component.ts\": \"p347\",\n\t\"./wizard-custom-step-line-width/wizard-custom-step-line-width.example.component.html\": \"SvgZ\",\n\t\"./wizard-custom-step-line-width/wizard-custom-step-line-width.example.component.ts\": \"L54k\",\n\t\"./wizard-dialog/wizard-dialog.example.component.html\": \"lkAy\",\n\t\"./wizard-dialog/wizard-dialog.example.component.ts\": \"boY1\",\n\t\"./wizard-disabled/wizard-disabled.example.component.html\": \"d6/z\",\n\t\"./wizard-disabled/wizard-disabled.example.component.ts\": \"B07R\",\n\t\"./wizard-docs/wizard-docs.example.component.html\": \"LZXz\",\n\t\"./wizard-docs/wizard-docs.example.component.ts\": \"DNeV\",\n\t\"./wizard-dynamic-remove/wizard-dynamic-remove.example.component.html\": \"AFmX\",\n\t\"./wizard-dynamic-remove/wizard-dynamic-remove.example.component.ts\": \"SG63\",\n\t\"./wizard-dynamic/wizard-dynamic.example.component.html\": \"gffW\",\n\t\"./wizard-dynamic/wizard-dynamic.example.component.ts\": \"W6/q\",\n\t\"./wizard-hide/wizard-hide.example.component.html\": \"5QmC\",\n\t\"./wizard-hide/wizard-hide.example.component.ts\": \"h2WL\",\n\t\"./wizard-simple/wizard-simple.example.component.html\": \"bDMd\",\n\t\"./wizard-simple/wizard-simple.example.component.ts\": \"zu0y\",\n\t\"./wizard-steps/wizard-steps.example.component.html\": \"uLIj\",\n\t\"./wizard-steps/wizard-steps.example.component.ts\": \"+QPo\",\n\t\"./wizard-validation/wizard-validation.example.component.html\": \"OzPF\",\n\t\"./wizard-validation/wizard-validation.example.component.ts\": \"6prp\",\n\t\"./wizard-visual-test/wizard-visual-test.component.html\": \"MVzA\",\n\t\"./wizard-visual-test/wizard-visual-test.component.ts\": \"XeuQ\",\n\t\"./wizard.module.ts\": \"bD21\"\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = \"epAE\";","export default \"<nui-wizard #wizardComponent\\n            id=\\\"nui-demo-wizard-add-additional-button\\\"\\n            finishText=\\\"Finish\\\"\\n            i18n-finishText>\\n        <nui-wizard-step #wizardStepAdditional [title]=\\\"'Additional button step'\\\" [stepTemplate]=\\\"step1\\\"></nui-wizard-step>\\n        <button nui-button type=\\\"button\\\" id=\\\"nui-demo-additional-button\\\"(click)=\\\"onAdditionalButtonClick()\\\" i18n>Additional button</button>\\n</nui-wizard>\\n<ng-template #step1>\\n    <p i18n>There is example of additional button in footer</p>\\n</ng-template>\\n\";","export default \"<ng-template #step1>\\n    <nui-textbox\\n        name=\\\"hint\\\"\\n        value=\\\"Example Value\\\">\\n    </nui-textbox>\\n    <button nui-button\\n            class=\\\"m-2\\\"\\n            type=\\\"button\\\"\\n            (click)=\\\"increaseHeight()\\\" i18n>\\n        Increase height of container\\n    </button>\\n    <button nui-button\\n            class=\\\"m-2\\\"\\n            type=\\\"button\\\"\\n            (click)=\\\"decreaseHeight()\\\" i18n>\\n        Decrease height of container\\n    </button>\\n</ng-template>\\n<ng-template #step2>\\n    <nui-checkbox [checked]=\\\"true\\\" i18n>Checkbox 1</nui-checkbox>\\n    <nui-checkbox [checked]=\\\"false\\\" i18n>Checkbox 2</nui-checkbox>\\n    <nui-checkbox [checked]=\\\"true\\\" i18n>Checkbox 3</nui-checkbox>\\n</ng-template>\\n<ng-template #step3>\\n    <nui-textbox\\n        name=\\\"hint\\\"\\n        value=\\\"Step 3 value\\\">\\n    </nui-textbox>\\n</ng-template>\\n<ng-template #step4>\\n    <nui-radio-group name=\\\"fruit\\\">\\n        <nui-radio value=\\\"Banana\\\" i18n>\\n            Banana\\n        </nui-radio>\\n        <nui-radio value=\\\"Mango\\\" i18n>\\n            Mango\\n        </nui-radio>\\n        <nui-radio value=\\\"Kiwi\\\" i18n>\\n            Kiwi\\n        </nui-radio>\\n    </nui-radio-group>\\n</ng-template>\\n<nui-wizard #wizardComponent\\n            id=\\\"nui-demo-wizard-constant-height\\\"\\n            [enableScroll]=\\\"true\\\"\\n            [bodyContainerHeight]=\\\"wizardBodyHeight\\\"\\n            finishText=\\\"Finish\\\"\\n            i18n-finishText>\\n    <nui-wizard-step id=\\\"nui-demo-wizard-height-invariable-step\\\"\\n                     i18n-title\\n                     title=\\\"First\\\"\\n                     [stepTemplate]=\\\"step1\\\"></nui-wizard-step>\\n    <nui-wizard-step i18n-title\\n                     title=\\\"Second\\\"\\n                     [stepTemplate]=\\\"step2\\\"></nui-wizard-step>\\n    <nui-wizard-step i18n-title\\n                     title=\\\"Third\\\"\\n                     [stepTemplate]=\\\"step3\\\"></nui-wizard-step>\\n    <nui-wizard-step i18n-title\\n                     title=\\\"Final\\\"\\n                     [stepTemplate]=\\\"step4\\\"></nui-wizard-step>\\n</nui-wizard>\\n\";","import { Component, Inject } from \"@angular/core\";\nimport { ToastService } from \"@nova-ui/bits\";\n\n@Component({\n    selector: \"nui-wizard-additional-button-example\",\n    templateUrl: \"./wizard-additional-button.example.component.html\",\n})\nexport class WizardAdditionalButtonExampleComponent  {\n    constructor(@Inject(ToastService) private toastService: ToastService) {}\n\n    public onAdditionalButtonClick() {\n        this.toastService.info({message: $localize `Additional button clicked!`});\n    }\n}\n","<nui-wizard #wizardComponent\n            id=\"nui-demo-wizard-add-additional-button\"\n            finishText=\"Finish\"\n            i18n-finishText>\n        <nui-wizard-step #wizardStepAdditional [title]=\"'Additional button step'\" [stepTemplate]=\"step1\"></nui-wizard-step>\n        <button nui-button type=\"button\" id=\"nui-demo-additional-button\"(click)=\"onAdditionalButtonClick()\" i18n>Additional button</button>\n</nui-wizard>\n<ng-template #step1>\n    <p i18n>There is example of additional button in footer</p>\n</ng-template>\n","export default \"<nui-wizard #wizardComponent\\n            id=\\\"nui-demo-wizard-add-dynamic\\\"\\n            (selectionChange)=\\\"select($event)\\\"\\n            finishText=\\\"Finish\\\"\\n            i18n-finishText>\\n        <nui-wizard-step #wizardStepAdd i18n-title title=\\\"Add step dynamically\\\" [stepTemplate]=\\\"step1\\\"></nui-wizard-step>\\n</nui-wizard>\\n<nui-wizard-step #dynamicStep [title]=\\\"'Dynamic'\\\" [stepTemplate]=\\\"dynamicStepTemplate\\\"></nui-wizard-step>\\n<ng-template #step1>\\n    <p i18n>Hi! You can add next step dynamically</p>\\n    <button nui-button type=\\\"button\\\" id=\\\"nui-demo-dynamic-button\\\" (click)=\\\"addStep()\\\" i18n>Add dynamic step</button>\\n</ng-template>\\n<ng-template #dynamicStepTemplate>\\n    <p i18n>Hi! I'm dynamic step!</p>\\n</ng-template>\\n\";","export default \"import { Component, ViewChild } from \\\"@angular/core\\\";\\nimport { WizardComponent, WizardStepComponent } from \\\"@nova-ui/bits\\\";\\n\\n@Component({\\n    selector: \\\"nui-wizard-hide-example\\\",\\n    templateUrl: \\\"./wizard-hide.example.component.html\\\",\\n})\\nexport class WizardHiddenExampleComponent  {\\n    @ViewChild(\\\"wizardComponent\\\") wizardComponent: WizardComponent;\\n    @ViewChild(\\\"wizardStepHidden\\\") wizardStepHiddenComponent: WizardStepComponent;\\n\\n    public hideStep() {\\n        this.wizardComponent.hideStep(this.wizardStepHiddenComponent);\\n    }\\n\\n    public showStep() {\\n        this.wizardComponent.showStep(this.wizardStepHiddenComponent);\\n    }\\n}\\n\";","import { Component, OnInit, ViewChild } from \"@angular/core\";\nimport { FormBuilder, FormGroup, Validators } from \"@angular/forms\";\nimport { WizardComponent } from \"@nova-ui/bits\";\n\n@Component({\n    selector: \"nui-wizard-validation-example\",\n    templateUrl: \"./wizard-validation.example.component.html\",\n})\n\nexport class WizardValidationExampleComponent implements OnInit {\n    @ViewChild(\"wizardComponent\") wizardComponent: WizardComponent;\n    public myForm: FormGroup;\n    public secondStepForm: FormGroup;\n\n    constructor(private formBuilder: FormBuilder) {}\n    public ngOnInit() {\n        this.myForm = this.formBuilder.group({\n            name: this.formBuilder.control(\"\",\n                                           Validators.required),\n            email: this.formBuilder.control(\"\", [\n                Validators.required,\n                Validators.pattern(\"[^ @]*@[^ @]*\"),\n                Validators.email,\n            ]),\n            password: this.formBuilder.control(\"\", [\n                Validators.required,\n                Validators.minLength(8),\n            ]),\n        });\n        this.secondStepForm = this.formBuilder.group({\n            formCheckbox: [false, [Validators.requiredTrue]],\n        });\n    }\n\n    public updateValidity() {\n        this.secondStepForm.get(\"formCheckbox\")?.updateValueAndValidity();\n    }\n}\n","<ng-template #stepWithValidation>\n    <form [formGroup]=\"myForm\">\n        <div class=\"form-group\">\n            <nui-form-field class=\"d-block mb-4\"\n                            i18n-caption caption=\"Name\">\n                <nui-textbox id=\"stepInputName\"\n                             formControlName=\"name\"></nui-textbox>\n            </nui-form-field>\n        </div>\n        <div class=\"form-group\">\n            <nui-form-field class=\"d-block mb-4\"\n                            [control]=\"myForm.controls['email']\"\n                            i18n-caption\n                            caption=\"Email\">\n                <nui-textbox type=\"email\"\n                             id=\"stepInputEmail\"\n                             formControlName=\"email\"></nui-textbox>\n                <nui-validation-message for=\"required\" *ngIf=\"myForm.controls['email'].errors?.required\" i18n>\n                    This is required\n                </nui-validation-message>\n                <nui-validation-message for=\"pattern\" *ngIf=\"myForm.controls['email'].errors?.pattern\" i18n>\n                    Please put at least \"@\" to pass this validator\n                </nui-validation-message>\n                <nui-validation-message for=\"email\" *ngIf=\"myForm.controls['email'].errors?.email\" i18n>\n                    This should be a valid email\n                </nui-validation-message>\n                <nui-validation-message [show]=\"true\" i18n>\n                    This message is always here\n                </nui-validation-message>\n            </nui-form-field>\n        </div>\n        <div class=\"form-group\">\n            <nui-form-field class=\"d-block mb-4\"\n                            i18n-caption\n                            caption=\"Password\"\n                            [showOptionalText]=\"false\">\n                <nui-textbox type=\"password\"\n                             id=\"stepInputPassword\"\n                             formControlName=\"password\"></nui-textbox>\n            </nui-form-field>\n        </div>\n    </form>\n</ng-template>\n<ng-template #step2>\n    <p i18n>Hello from second step</p>\n    <p i18n>This step has a handler for the <code>next</code> event fired from this step only, rather than from the entire wizard.</p>\n    <form [formGroup]=\"secondStepForm\">\n        <div class=\"form-group\">\n            <nui-form-field [control]=\"secondStepForm.controls['formCheckbox']\">\n                <nui-validation-message for=\"required\">\n                    Confirm that you have configured all steps which are needed to proceed.\n                </nui-validation-message>\n                <nui-checkbox [required]=\"true\" [checked]=\"false\" formControlName=\"formCheckbox\">\n                    I need to be checked to go further\n                </nui-checkbox>\n            </nui-form-field>\n        </div>\n    </form>\n</ng-template>\n<ng-template #step3>\n    <p i18n>This is step #3</p>\n</ng-template>\n<nui-wizard #wizardComponent\n            id=\"nui-demo-wizard-validation\"\n            finishText=\"Finish\"\n            i18n-finishText>\n    <nui-wizard-step i18n-title\n                     title=\"Step with validation\"\n                     [stepTemplate]=\"stepWithValidation\"\n                     [stepControl]=\"myForm.valid\"></nui-wizard-step>\n    <nui-wizard-step #wizardStep2\n                     i18n-title\n                     title=\"Second step\"\n                     [stepTemplate]=\"step2\" [stepControl]=\"secondStepForm.valid\"\n                     (next)=\"updateValidity()\"></nui-wizard-step>\n    <nui-wizard-step i18n-title #wizardStep3 title=\"Third step\" [stepTemplate]=\"step3\"></nui-wizard-step>\n</nui-wizard>\n","export default \"<ng-template #step1>\\n    <nui-checkbox name=\\\"nui-demo-checkbox\\\"\\n                  i18n-title\\n                  title=\\\"Check box with help text\\\"\\n                  i18n-hint\\n                  hint=\\\"This is some help text\\\"\\n                  required=\\\"true\\\"\\n                  [value]=\\\"false\\\"\\n                  i18n>Check box with help text\\n    </nui-checkbox>\\n    <nui-checkbox name=\\\"nui-demo-checkbox-plain\\\"\\n                  [checked]=\\\"true\\\"\\n                  [value]=\\\"false\\\"\\n                  i18n>Plain checkbox\\n    </nui-checkbox>\\n</ng-template>\\n<ng-template #step2>\\n    <nui-checkbox-group name=\\\"vegetable\\\" [(values)]=\\\"selectedVegetables\\\"\\n                        (valuesChange)=\\\"valuesChanged($event)\\\">\\n        <nui-checkbox *ngFor=\\\"let vegetable of vegetables\\\"\\n                      [value]=\\\"vegetable\\\"\\n                      [checked]=\\\"isChecked(vegetable)\\\">\\n            {{vegetable}}\\n        </nui-checkbox>\\n    </nui-checkbox-group>\\n</ng-template>\\n<ng-template #step3>\\n    <p i18n>Not visited</p>\\n</ng-template>\\n<ng-template #step4>\\n    <p i18n>Summary</p>\\n</ng-template>\\n<ng-template #dialogWizard>\\n    <nui-dialog-header i18n-title title=\\\"Wizard dialog\\\" (closed)=\\\"closeDialog()\\\"></nui-dialog-header>\\n    <div class=\\\"dialog-body compact-mode\\\">\\n        <nui-wizard id=\\\"nui-demo-wizard-dialog\\\"\\n                    (cancel)=\\\"closeDialog()\\\"\\n                    finishText=\\\"Finish\\\"\\n                    i18n-finishText>\\n            <nui-wizard-step i18n-title title=\\\"Completed\\\" [stepTemplate]=\\\"step1\\\"></nui-wizard-step>\\n            <nui-wizard-step i18n-title title=\\\"Active\\\" [stepTemplate]=\\\"step2\\\"></nui-wizard-step>\\n            <nui-wizard-step i18n-title title=\\\"Not visited\\\" [stepTemplate]=\\\"step3\\\"></nui-wizard-step>\\n            <nui-wizard-step i18n-title title=\\\"Summary\\\" [stepTemplate]=\\\"step4\\\"></nui-wizard-step>\\n        </nui-wizard>\\n    </div>\\n</ng-template>\\n<button id=\\\"nui-demo-dialog-wizard-btn\\\" nui-button type=\\\"button\\\" (click)=\\\"openDialog(dialogWizard)\\\" i18n> Open dialog wizard</button>\\n\";","import { Component, Inject, TemplateRef } from \"@angular/core\";\nimport { DialogService, NuiDialogRef, ToastService } from \"@nova-ui/bits\";\n\n@Component({\n    selector: \"nui-wizard-confirmation-dialog-example\",\n    templateUrl: \"./wizard-confirmation-dialog.example.component.html\",\n})\nexport class WizardConfirmationDialogExampleComponent {\n    public activeDialog: NuiDialogRef;\n\n    constructor(@Inject(DialogService) private dialogService: DialogService,\n        @Inject(ToastService) private toastService: ToastService) { }\n\n    public openConfirmationDialog($event: boolean, content: TemplateRef<string>) {\n        if ($event) {\n            this.activeDialog = this.dialogService.open(content, {size: \"sm\"});\n        } else {\n            this.toastService.info({\n                message: $localize `Cancel button clicked!`,\n                title: $localize `Event`,\n            });\n        }\n    }\n\n    public onButtonClick(title: string) {\n        title === \"Leave\" ? this.actionDone() : this.actionCanceled();\n        this.activeDialog.close();\n    }\n\n    private actionDone(): void {\n        this.toastService.success({\n            message: $localize `Leave Done!`,\n            title: $localize `Event`,\n        });\n    }\n\n    private actionCanceled(): void {\n        this.toastService.info({\n            message: $localize `Action Canceled!`,\n            title: $localize `Event`,\n        });\n    }\n}\n","<nui-wizard id=\"nui-demo-wizard-confirmation-dialog\"\n            (cancel)=\"openConfirmationDialog($event, content)\"\n            finishText=\"Finish\"\n            i18n-finishText>\n    <nui-wizard-step i18n-title title=\"First\" [stepTemplate]=\"step1\"></nui-wizard-step>\n    <nui-wizard-step i18n-title title=\"Second\" [stepTemplate]=\"step1\"></nui-wizard-step>\n    <nui-wizard-step i18n-title title=\"Third\" [stepTemplate]=\"step1\"></nui-wizard-step>\n</nui-wizard>\n<ng-template #step1>\n    <p i18n>Wizard cancel method behavior</p>\n</ng-template>\n<ng-template #content let-close=\"close\">\n    <nui-dialog-header i18n-title title=\"Really want to leave?\" (close)=\"onButtonClick()\"></nui-dialog-header>\n    <div class=\"dialog-body\">\n        <p i18n>\n            There is at least one completed step in this wizard. Are you sure you want to leave?\n        </p>\n    </div>\n    <nui-dialog-footer>\n        <button nui-button type=\"button\"\n                (click)=\"onButtonClick('Stay')\"\n                i18n>\n            Stay\n        </button>\n        <button nui-button type=\"button\"\n                displayStyle=\"primary\"\n                (click)=\"onButtonClick('Leave')\"\n                i18n>\n            Leave\n        </button>\n    </nui-dialog-footer>\n</ng-template>\n","export default \"import { Component } from \\\"@angular/core\\\";\\n\\n@Component({\\n    selector: \\\"nui-wizard-constant-height-example\\\",\\n    templateUrl: \\\"./wizard-constant-height.example.component.html\\\",\\n})\\n\\nexport class WizardConstantHeightExampleComponent {\\n    public wizardBodyHeight: string = \\\"200px\\\";\\n\\n    public increaseHeight() {\\n        this.wizardBodyHeight = `${parseInt(this.wizardBodyHeight, 10) + 20}px`;\\n    }\\n\\n    public decreaseHeight() {\\n        this.wizardBodyHeight = `${parseInt(this.wizardBodyHeight, 10) - 20}px`;\\n    }\\n}\\n\";","import { NgModule } from \"@angular/core\";\nimport { FormsModule, ReactiveFormsModule } from \"@angular/forms\";\nimport { RouterModule } from \"@angular/router\";\nimport {\n    DEMO_PATH_TOKEN,\n    NuiButtonModule,\n    NuiCheckboxModule,\n    NuiDialogModule,\n    NuiDocsModule,\n    NuiFormFieldModule,\n    NuiMessageModule,\n    NuiRadioModule,\n    NuiTextboxModule,\n    NuiValidationMessageModule,\n    NuiWizardModule,\n    SrlcStage,\n} from \"@nova-ui/bits\";\n\nimport {\n    WizardAdditionalButtonExampleComponent,\n    WizardBusyExampleComponent,\n    WizardConfirmationDialogExampleComponent,\n    WizardConstantHeightExampleComponent,\n    WizardCustomStepLineWidthComponent,\n    WizardDialogExampleComponent,\n    WizardDisabledExampleComponent,\n    WizardDynamicExampleComponent,\n    WizardExampleComponent,\n    WizardHiddenExampleComponent,\n    WizardSimpleExampleComponent,\n    WizardStepsExampleComponent,\n    WizardValidationExampleComponent,\n    WizardVisualTestComponent,\n    WizardDynamicRemoveExampleComponent,\n} from \"./index\";\n\nconst routes = [\n    {\n        path: \"\",\n        component: WizardExampleComponent,\n        data: {\n            \"srlc\": {\n                \"stage\": SrlcStage.ga,\n            },\n            showThemeSwitcher: true,\n        },\n    },\n    {\n        path: \"wizard-test\",\n        component: WizardExampleComponent,\n    },\n    {\n        path: \"wizard-visual-test\",\n        component: WizardVisualTestComponent,\n        data: {\n            \"srlc\": {\n                \"hideIndicator\": true,\n            },\n        },\n    },\n    {\n        path: \"wizard-steps\",\n        component: WizardStepsExampleComponent,\n    },\n];\n\n@NgModule({\n    imports: [\n        NuiButtonModule,\n        NuiWizardModule,\n        NuiMessageModule,\n        NuiDocsModule,\n        NuiTextboxModule,\n        NuiRadioModule,\n        NuiCheckboxModule,\n        NuiDialogModule,\n        NuiValidationMessageModule,\n        NuiFormFieldModule,\n        FormsModule,\n        ReactiveFormsModule,\n        RouterModule.forChild(routes),\n    ],\n    declarations: [\n        WizardAdditionalButtonExampleComponent,\n        WizardBusyExampleComponent,\n        WizardConfirmationDialogExampleComponent,\n        WizardConstantHeightExampleComponent,\n        WizardDialogExampleComponent,\n        WizardDisabledExampleComponent,\n        WizardDynamicExampleComponent,\n        WizardExampleComponent,\n        WizardHiddenExampleComponent,\n        WizardSimpleExampleComponent,\n        WizardValidationExampleComponent,\n        WizardVisualTestComponent,\n        WizardCustomStepLineWidthComponent,\n        WizardDynamicRemoveExampleComponent,\n        WizardStepsExampleComponent,\n    ],\n    providers: [\n        {\n            provide: DEMO_PATH_TOKEN,\n            useFactory: () => (<any>require).context(`!!raw-loader!./`, true, /.*\\.(ts|html|less)$/),\n        },\n    ],\n    exports: [\n        RouterModule,\n    ],\n})\nexport class WizardModule {\n}\n","export default \"<nui-wizard #wizardComponent\\n            id=\\\"nui-demo-wizard-add-dynamic\\\"\\n            (selectionChange)=\\\"select($event)\\\"\\n            finishText=\\\"Finish\\\"\\n            i18n-finishText>\\n        <nui-wizard-step #wizardStepAdd i18n-title title=\\\"Add step dynamically\\\" [stepTemplate]=\\\"step1\\\"></nui-wizard-step>\\n        <nui-wizard-step i18n-title #wizardStep3 title=\\\"Third step\\\" [stepTemplate]=\\\"step3\\\"></nui-wizard-step>\\n</nui-wizard>\\n<nui-wizard-step #dynamicStep \\n                [title]=\\\"'Dynamic'\\\" \\n                [stepTemplate]=\\\"stepWithValidation\\\"\\n                [stepControl]=\\\"myForm.valid\\\"></nui-wizard-step>\\n<!-- 1 step -->\\n<ng-template #step1>\\n    <p i18n>Hi! You can add next step dynamically</p>\\n    <button nui-button type=\\\"button\\\" id=\\\"nui-demo-dynamic-button\\\" (click)=\\\"addStep()\\\" i18n>Add dynamic step</button>\\n</ng-template>\\n<!-- 2 step dynamic -->\\n<ng-template #stepWithValidation>\\n    <form [formGroup]=\\\"myForm\\\">\\n        <div class=\\\"form-group\\\">\\n            <nui-form-field class=\\\"d-block mb-4\\\"\\n                            i18n-caption caption=\\\"Name\\\">\\n                <nui-textbox id=\\\"stepInputName\\\"\\n                             formControlName=\\\"name\\\"></nui-textbox>\\n            </nui-form-field>\\n        </div>\\n        <div class=\\\"form-group\\\">\\n            <nui-form-field class=\\\"d-block mb-4\\\"\\n                            [control]=\\\"myForm.controls['email']\\\"\\n                            i18n-caption\\n                            caption=\\\"Email\\\">\\n                <nui-textbox type=\\\"email\\\"\\n                             id=\\\"stepInputEmail\\\"\\n                             formControlName=\\\"email\\\"></nui-textbox>\\n                <nui-validation-message for=\\\"required\\\" *ngIf=\\\"myForm.get(['email'])?.errors?.required\\\" i18n>\\n                    This is required\\n                </nui-validation-message>\\n                <nui-validation-message for=\\\"pattern\\\" *ngIf=\\\"myForm.get(['email'])?.errors?.pattern\\\" i18n>\\n                    Please put at least \\\"@\\\" to pass this validator\\n                </nui-validation-message>\\n                <nui-validation-message for=\\\"email\\\" *ngIf=\\\"myForm.get(['email'])?.errors?.email\\\" i18n>\\n                    This should be a valid email?\\n                </nui-validation-message>\\n                <nui-validation-message [show]=\\\"true\\\" i18n>\\n                    This message is always here\\n                </nui-validation-message>\\n            </nui-form-field>\\n        </div>\\n        <div class=\\\"form-group\\\">\\n            <nui-form-field class=\\\"d-block mb-4\\\"\\n                            [control]=\\\"myForm.controls['password']\\\"\\n                            i18n-caption\\n                            caption=\\\"Password\\\"\\n                            [showOptionalText]=\\\"false\\\">\\n                <nui-textbox type=\\\"password\\\"\\n                             id=\\\"stepInputPassword\\\"\\n                             formControlName=\\\"password\\\"></nui-textbox>\\n                <nui-validation-message for=\\\"required\\\" *ngIf=\\\"myForm.get(['password'])?.errors?.required\\\" i18n>\\n                    This is required\\n                </nui-validation-message>\\n                <nui-validation-message for=\\\"minlength\\\" *ngIf=\\\"myForm.get(['password'])?.errors?.minlength\\\" i18n>\\n                    Minimum length is 8\\n                </nui-validation-message>\\n                <nui-validation-message [show]=\\\"true\\\" i18n>\\n                    This message is always here\\n                </nui-validation-message>\\n            </nui-form-field>\\n        </div>\\n    </form>\\n</ng-template>\\n<!-- 3 step -->\\n<ng-template #step3>\\n    <p i18n>This is step #3</p>\\n</ng-template>\\n\";","export default \"import { Component, Inject, OnInit, TemplateRef, ViewChild } from \\\"@angular/core\\\";\\nimport { FormBuilder, FormGroup, Validators } from \\\"@angular/forms\\\";\\nimport {\\n    DialogService, IBusyConfig, IWizardSelectionEvent, NuiDialogRef, ToastService, WizardComponent, WizardStepComponent,\\n} from \\\"@nova-ui/bits\\\";\\n\\n@Component({\\n    selector: \\\"nui-wizard-simple-example\\\",\\n    templateUrl: \\\"./wizard-simple.example.component.html\\\",\\n})\\nexport class WizardSimpleExampleComponent implements OnInit {\\n    @ViewChild(\\\"wizardComponent\\\") wizardComponent: WizardComponent;\\n    @ViewChild(\\\"wizardStep2\\\") wizardStep2Component: WizardStepComponent;\\n    @ViewChild(\\\"wizardStep3\\\") wizardStep3Component: WizardStepComponent;\\n    @ViewChild(\\\"dynamicStep\\\") dynamicStep: WizardStepComponent;\\n\\n    public myForm: FormGroup;\\n    public hint = $localize `example-hint`;\\n    public caption = $localize `example-caption`;\\n    public vegetables = [$localize `Cabbage`, $localize `Potato`, $localize `Tomato`, $localize `Carrot`];\\n    public selectedVegetables = [$localize `Potato`, $localize `Tomato`];\\n    public secondStepBusyConfig: IBusyConfig = {\\n        busy: false,\\n        message: $localize `Step is busy`,\\n    };\\n    public busyConfig: IBusyConfig = {\\n        busy: false,\\n        message: $localize `Step is busy`,\\n    };\\n    public selectedIndex: number;\\n\\n    private activeDialog: NuiDialogRef;\\n\\n    constructor(private formBuilder: FormBuilder,\\n        @Inject(ToastService) private toastService: ToastService,\\n        @Inject(DialogService) private dialogService: DialogService) { }\\n\\n    public ngOnInit() {\\n        this.myForm = this.formBuilder.group({\\n            name: this.formBuilder.control(\\\"\\\",\\n                                           Validators.required),\\n            email: this.formBuilder.control(\\\"\\\", [\\n                Validators.required,\\n                Validators.pattern(\\\"[^ @]*@[^ @]*\\\"),\\n            ]),\\n            password: this.formBuilder.control(\\\"\\\", [\\n                Validators.required,\\n                Validators.minLength(8),\\n            ]),\\n        });\\n    }\\n\\n    public onOptionChange(value: string) {\\n        this.hint = value;\\n    }\\n\\n    public isChecked(vegetable: string): boolean {\\n        return this.selectedVegetables.indexOf(vegetable) > -1;\\n    }\\n\\n    public valuesChanged(values: any[]) {\\n        this.selectedVegetables = [...values];\\n    }\\n\\n    public addStep() {\\n        this.wizardComponent.addStepDynamic(this.dynamicStep, this.selectedIndex + 1);\\n    }\\n\\n    public disableSecondStep() {\\n        this.wizardComponent.disableStep(this.wizardStep2Component);\\n    }\\n\\n    public hideThirdStep() {\\n        this.wizardComponent.hideStep(this.wizardStep3Component);\\n    }\\n\\n    public visibleThirdStep() {\\n        this.wizardComponent.showStep(this.wizardStep3Component);\\n    }\\n\\n    public makeSecondStepBusy() {\\n        this.secondStepBusyConfig.busy = true;\\n        this.wizardComponent.navigationControl.next({ busyState: this.secondStepBusyConfig, allowStepChange: false});\\n        setTimeout(() => {\\n            this.secondStepBusyConfig.busy = false;\\n            this.wizardComponent.navigationControl.next({ busyState: this.secondStepBusyConfig, allowStepChange: true});\\n        }, 1000);\\n    }\\n\\n    public onNextClick() {\\n        this.toastService.info({\\n            message: $localize `Next button clicked!`,\\n            title: $localize `Event`,\\n        });\\n    }\\n\\n    public onCancelClick(content: TemplateRef<string>) {\\n        if (this.wizardComponent.steps.toArray().filter((step: WizardStepComponent) => step.complete).length !== 0) {\\n            this.activeDialog = this.dialogService.open(content, {size: \\\"sm\\\"});\\n        } else {\\n            this.toastService.info({\\n                message: $localize `Cancel button clicked!`,\\n                title: $localize `Event`,\\n            });\\n        }\\n    }\\n\\n    public onFinishClick() {\\n        this.toastService.info({\\n            message: $localize `Finish button clicked!`,\\n            title: $localize `Event`,\\n        });\\n    }\\n\\n    public handleClick() {\\n        this.toastService.info({\\n            message: $localize `Additional button clicked!`,\\n            title: $localize `Event`,\\n        });\\n    }\\n\\n    public select(event: IWizardSelectionEvent) {\\n        this.selectedIndex = event.selectedIndex;\\n    }\\n    public onButtonClick(title: string) {\\n        title === \\\"Leave\\\" ? this.actionDone() : this.actionCanceled();\\n        this.activeDialog.close();\\n    }\\n\\n    public preventGoingNext() {\\n        this.busyConfig.busy = true;\\n        this.wizardComponent.navigationControl.next({ busyState: this.busyConfig, allowStepChange: false});\\n        setTimeout(() => {\\n            this.busyConfig.busy = false;\\n            this.wizardComponent.navigationControl.next({ busyState: this.busyConfig, allowStepChange: true});\\n        }, 1000);\\n    }\\n\\n    private actionDone(): void {\\n        this.toastService.success({message: $localize `Leave Done!`, title: $localize `Event`});\\n    }\\n\\n    private actionCanceled(): void {\\n        this.toastService.info({message: $localize `Action Canceled!`, title: $localize `Event`});\\n    }\\n}\\n\";"]}