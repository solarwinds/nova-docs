import{a as E}from"./chunk-R3YYP5UT.js";import{a as S}from"./chunk-T6MRCD2W.js";import{a as b}from"./chunk-6HF6J2SV.js";import{a as y}from"./chunk-GUCZFMGN.js";import{a as w}from"./chunk-EZLBQQW2.js";import{a as C}from"./chunk-D4XYNTRS.js";import{a as v}from"./chunk-L5ZECIAD.js";import{a as h}from"./chunk-DJA3LND2.js";import{a as g}from"./chunk-NWSW6QAE.js";import{a as f}from"./chunk-T3VQRVS7.js";import{a as u}from"./chunk-2CP4I4J4.js";import{a as c}from"./chunk-VFOIEZPI.js";import{a as x}from"./chunk-G2RGETK5.js";import{a as r}from"./chunk-FEEMFRND.js";import{g as p}from"./chunk-7HICAA52.js";import{Aa as d,Ib as m,Ob as i,Pb as t,Qb as n,ob as o,qc as e,tc as s}from"./chunk-7UJBXEVU.js";var U=(()=>{class l{static{this.\u0275fac=function(a){return new(a||l)}}static{this.\u0275cmp=d({type:l,selectors:[["ng-component"]],decls:335,vars:6,consts:[["filenamePrefix","simple-dialog","exampleTitle","Simple dialog"],["filenamePrefix","component-as-content","exampleTitle","Component as content for dialog"],["filenamePrefix","dialog-content","exampleTitle","Dialog Content Example Component"],["filenamePrefix","dialog-severity","exampleTitle","Dialog Severity"],["filenamePrefix","header-buttons","exampleTitle","Custom Dialog Header"],["filenamePrefix","dialog-sizes","exampleTitle","Dialog Sizes"],["filenamePrefix","dialog-position","exampleTitle","Dialog Positions"],["type","info"],["filenamePrefix","dialog-custom-class","exampleTitle","Custom Class"],["target","_parent","href","../interfaces/IConfirmationDialogOptions.html"],["filenamePrefix","confirmation-dialog","exampleTitle","Confirmation Dialog"],["filenamePrefix","dialog-with-keyboard","exampleTitle","Dialog With Keyboard"],["filenamePrefix","dialog-with-static-backdrop","exampleTitle","Dialog With Static Backdrop"],["filenamePrefix","dialog-inside-overlay","exampleTitle","Dialog Inside Overlay"],["type","info",3,"allowDismiss"],["filenamePrefix","dialog-actions-before-closure","exampleTitle","Dialog Actions Before Closure"],["filenamePrefix","dialog-after-opened","exampleTitle","Perform an action on dialog open"]],template:function(a,T){a&1&&(i(0,"h2"),e(1,"Required Modules"),t(),i(2,"ul")(3,"li")(4,"code"),e(5," NuiDialogModule "),t()()(),i(6,"h2"),e(7,"Basic Usage"),t(),i(8,"p"),e(9," Dialog can be added by passing "),i(10,"code"),e(11,"template"),t(),e(12," to the "),i(13,"code"),e(14,"DialogService's open"),t(),e(15," method. You can pass the result of the dialog or the reason why dialog is dismissed by using "),i(16,"code"),e(17,"close"),t(),e(18," or "),i(19,"code"),e(20,"dismiss"),t(),e(21," methods in your ng-template. All passed data can be handled by "),i(22,"code"),e(23,"result"),t(),e(24," property of dialog's "),i(25,"code"),e(26,"open"),t(),e(27,` method.
`),t(),i(28,"nui-example-wrapper",0),n(29,"nui-simple-dialog-example"),t(),i(30,"h2"),e(31,"Usage as a Component"),t(),i(32,"p"),e(33,"You can pass an existing component as content of the dialog window."),t(),i(34,"p"),e(35,` In this case remember to add content component as an entryComponents section of your NgModule.
`),t(),i(36,"p"),e(37," For this case you need to pass the component's class name to the "),i(38,"code"),e(39,"open"),t(),e(40," method of "),i(41,"code"),e(42,"DialogService"),t(),e(43,`.
`),t(),i(44,"p"),e(45,"See both example panels below."),t(),i(46,"nui-example-wrapper",1),n(47,"nui-component-as-content-example"),t(),i(48,"nui-example-wrapper",2)(49,"p"),e(50," The code of this example panel is related to the example above. It only shows code. "),t()(),i(51,"h2"),e(52,"Severity"),t(),i(53,"p"),e(54," You can pass "),i(55,"code"),e(56,"severity"),t(),e(57," property to the "),i(58,"code"),e(59,"dialog-header"),t(),e(60," component and it will show different severity styles. Possible values are: "),i(61,"code"),e(62,"critical, warning, info."),t()(),i(63,"p"),e(64,"You can also add custom action buttons to the Dialog header."),t(),i(65,"p"),e(66," In order to do so, you need to define them inside "),i(67,"code"),e(68,"dialog-header"),t(),e(69,` component, as shown in the example below.
`),t(),i(70,"nui-example-wrapper",3),n(71,"nui-dialog-severity-example"),t(),i(72,"h2"),e(73,"Custom Dialog header"),t(),i(74,"p"),e(75,"You can add custom action buttons to the Dialog header."),t(),i(76,"p"),e(77," In order to do so, you need to define them inside "),i(78,"code"),e(79,"dialog-header"),t(),e(80,` component, as shown in the example below.
`),t(),i(81,"nui-example-wrapper",4),n(82,"nui-header-buttons-example"),t(),i(83,"h2"),e(84,"Dialog Sizes"),t(),i(85,"p"),e(86," You can define size of the dialog by passing it as second argument to "),i(87,"code"),e(88,"DialogService's"),t(),i(89,"code"),e(90,"open"),t(),e(91," method. Possible sizes are: "),i(92,"code"),e(93,"sm,"),t(),i(94,"code"),e(95,"md,"),t(),e(96," and "),i(97,"code"),e(98,"lg"),t(),e(99,". Default size is "),i(100,"code"),e(101,"md"),t(),e(102,`.
`),t(),i(103,"nui-example-wrapper",5),n(104,"nui-dialog-sizes-example"),t(),i(105,"h2"),e(106,"Position on screen"),t(),i(107,"p"),e(108,` When content is longer than available screen, dialog grows vertically by default.
`),t(),i(109,"p"),e(110," By adding "),i(111,"code"),e(112,"responsive-mode"),t(),e(113," class to the "),i(114,"code"),e(115,"dialog-body"),t(),e(116,", dialog will fit the available screen and content will be scrollable inside the dialog. Also it's possible to remove padding from content in "),i(117,"code"),e(118,"dialog-body"),t(),e(119,"by adding "),i(120,"code"),e(121,"compact-mode"),t(),e(122,` class
`),t(),i(123,"nui-example-wrapper",6),n(124,"nui-dialog-position-example"),t(),i(125,"h2"),e(126,"Custom class"),t(),i(127,"p"),e(128," It is possible to add custom class to the dialog window. In order to do it, you need to pass "),i(129,"code"),e(130,"windowClass"),t(),e(131," option into "),i(132,"code"),e(133,"DialogService open"),t(),e(134,` method as second argument.
`),t(),i(135,"p"),e(136," Here's an example: "),i(137,"code"),e(138),t()(),i(139,"p"),e(140,"It will allow you to apply custom styles to the dialog if needed."),t(),i(141,"p"),e(142,"Example below shows dialog with custom width (500px)."),t(),i(143,"p"),e(144," NOTE: custom class is applied to the dialog component which appended into the "),i(145,"code"),e(146,"body"),t(),e(147,` element.
`),t(),i(148,"p"),e(149," That's why this class must be specified as "),i(150,"code"),e(151,"body"),t(),e(152,` descendant class.
`),t(),i(153,"nui-message",7),e(154," Custom class styles can be overriden by default styles of "),i(155,"code"),e(156,"nui-dialog"),t(),e(157,` component. In this case please make custom class selector more specific in your styles.
`),t(),i(158,"nui-example-wrapper",8),n(159,"nui-dialog-custom-class-example"),t(),i(160,"h2"),e(161,"Confirmation Dialog"),t(),i(162,"p"),e(163," You can use Confirmation Dialog by calling the "),i(164,"code"),e(165,"confirm"),t(),e(166," method of DialogService. Set the "),i(167,"code"),e(168,"message"),t(),e(169," input to a string value that will serve as the confirmation message. Optionally, you can customize the title and button labels using the "),i(170,"code"),e(171,"title"),t(),e(172,", "),i(173,"code"),e(174,"confirmText"),t(),e(175,", "),i(176,"code"),e(177,"dismissText"),t(),e(178," and "),i(179,"code"),e(180,"severity"),t(),e(181," properties defined in "),i(182,"a",9),e(183,"IConfirmationDialogOptions"),t(),e(184,". "),i(185,"nui-message",7),e(186," By default, when the confirmation dialog opens, the "),i(187,"code"),e(188,"Confirm"),t(),e(189," button is focused. Use "),i(190,"code"),e(191,"setFocus"),t(),e(192," input to set the "),i(193,"code"),e(194,"Dismiss"),t(),e(195," button focused on dialog open. "),t()(),i(196,"nui-example-wrapper",10),n(197,"nui-confirmation-dialog-example"),t(),i(198,"h2"),e(199,"Keyboard Options"),t(),i(200,"p"),e(201," There is a field in "),i(202,"code"),e(203,"options"),t(),e(204," that allows dialog to be interacted with via keyboard. Usage: "),i(205,"code"),e(206),t()(),i(207,"nui-example-wrapper",11),n(208,"nui-dialog-with-keyboard-example"),t(),i(209,"h2"),e(210,"Static Backdrop"),t(),i(211,"p"),e(212," By default, nui-dialog closes if user clicks outside the dialog. It is handy though to keep the dialog on no matter where user clicks. To achieve this behavior, it is recommended to use the "),i(213,"code"),e(214,"backdrop"),t(),e(215," input of the component and set "),i(216,"code"),e(217,"static"),t(),e(218,` string to it.
`),t(),i(219,"nui-example-wrapper",12),n(220,"nui-dialog-with-static-backdrop-example"),t(),i(221,"h2"),e(222,"Dialog Inside Overlay"),t(),i(223,"p"),e(224," The implementation of the "),i(225,"code"),e(226,"nui-dialog"),t(),e(227," is not currently based on "),i(228,"code"),e(229,"nui-overlay"),t(),e(230,", which means there might be a need to display the dialog properly with overlay-based components, including nested ones. To make the dialog open inside the overlay container it is enough to passe in the "),i(231,"code"),e(232,"useOverlay"),t(),e(233,` option when opening the dialog.
`),t(),i(234,"nui-example-wrapper",13),n(235,"nui-dialog-inside-overlay-example"),t(),i(236,"h2"),e(237,"Dialog Closure Actions"),t(),i(238,"p"),e(239," The "),i(240,"code"),e(241,"nui-dialog"),t(),e(242," provides you with a number of ways to perform actions on it's closure. There are two built-in events "),i(243,"code"),e(244,"ESC"),t(),e(245," and "),i(246,"code"),e(247,"BACKDROP_CLICK"),t(),e(248," which are triggered by the keyboard escape key and clicking the dialog's backdrop respectively. However, the user is able to create their own events, which they can pass as an argument into the "),i(249,"code"),e(250,"dismiss(event)"),t(),e(251," method of the "),i(252,"code"),e(253,"dialogRef"),t(),e(254,". To capture the events there are two types of EventEmitters of the "),i(255,"code"),e(256,"dialogRef"),t(),e(257," - "),i(258,"code"),e(259,"closed$"),t(),e(260," and "),i(261,"code"),e(262,"beforeDismissed$"),t(),e(263,". As can be determined from their names, the "),i(264,"code"),e(265,"closed$"),t(),e(266," event emitter will emit an event right after the dialog window is closed, while the "),i(267,"code"),e(268,"beforeDismissed$"),t(),e(269,` emits right before the dialog is dismissed.
`),t(),i(270,"nui-message",14)(271,"strong"),e(272,"Note:"),t(),i(273,"code"),e(274,"beforeDissmissed$"),t(),e(275," is only emitted on dialog dismissal (or cancellation); it is not emitted on dialog submission. "),i(276,"code"),e(277,"beforeDismissed$"),t(),e(278,"works best in conjunction with the special "),i(279,"code"),e(280,"beforeDismiss"),t(),e(281," function, which can be configured as an optional configuration parameter of the dialog. This function, if it returns "),i(282,"code"),e(283,"false"),t(),e(284,", will prevent the dialog from closing, until the "),i(285,"code"),e(286,"close"),t(),e(287,` method is called. All this lets you be very flexible in how exactly you want the dialog to be dismissed and when to perform certain actions.
`),t(),i(288,"p"),e(289,` The example of the dialog's closure actions below shows how flexible a simple dialog can be in terms of performing certain actions at certain points of the dialog's lifecycle
`),t(),i(290,"p"),e(291,"For this example:"),t(),i(292,"ol")(293,"li")(294,"strong"),e(295,"BACKDROP click"),t(),e(296," - The logic specific to the backdrop click is performed, and the dialog stays open in this case. "),t(),i(297,"li")(298,"strong"),e(299,"ESC key pressed"),t(),e(300," - First, the logic specific to the ESC button click is performed. Then, general logic before the dialog dismissal is performed. And, finally, the logic to perform right after dialog closure is run. "),t(),i(301,"li")(302,"strong"),e(303,"ACTION button pressed"),t(),e(304," - The logic specific to the ACTION button click is performed. Then, the custom DONE event is sent, and finally the event is captured and custom logic is run in response. The dialog stays open in this case. "),t(),i(305,"li")(306,"strong"),e(307,"CANCEL button pressed"),t(),e(308," - The logic specific to the CANCEL button click is performed. Then, general logic before the dialog dismissal is performed. And, finally, the logic to perform right after dialog closure is run. "),t(),i(309,"li")(310,"strong"),e(311,"Header Close button pressed"),t(),e(312," - The logic specific to the header Close button click is performed. Then, general logic before the dialog dismissal is performed. And, finally, the logic to perform right after dialog closure is run. "),t()(),i(313,"nui-example-wrapper",15),n(314,"nui-dialog-actions-before-closure-example"),t(),i(315,"h2"),e(316,"Dialog Open Actions"),t(),i(317,"p"),e(318," It's possible to perform some actions in your code when a dialog is opened by subscribing to the "),i(319,"code"),e(320,"DialogService"),t(),e(321,"'s "),i(322,"code"),e(323,"afterOpened$"),t(),e(324," observable. It emits a "),i(325,"code"),e(326,"NuiDialogRef"),t(),e(327,` that contains the component's data. This works for both a confirmation dialog and a dialog containing a consumer-defined component. The examples below trigger a toast on the top right of the page when each dialog is opened.
`),t(),i(328,"nui-message",14),e(329,` To see the source code of the consumer-defined component used in this example, open the source expander of the second example panel in this section.
`),t(),i(330,"nui-example-wrapper",16),n(331,"nui-dialog-after-opened-example"),t(),i(332,"nui-example-wrapper",2)(333,"p"),e(334," The code of this example panel is related to the example above. It only shows code. "),t()()),a&2&&(o(138),s("DialogService.open(content, ","{",' windowClass: "myCustomClass" ',"}",") "),o(68),s("","{"," keyboard: false ","}",""),o(64),m("allowDismiss",!1),o(58),m("allowDismiss",!1))},dependencies:[p,r,c,x,f,u,E,S,b,y,w,C,v,h,g],encapsulation:2})}}return l})();export{U as a};
