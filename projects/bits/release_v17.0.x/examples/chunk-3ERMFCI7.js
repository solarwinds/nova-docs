import{a as c}from"./chunk-I57LNO6R.js";import{a as s}from"./chunk-FEEMFRND.js";import{c as p,g as u}from"./chunk-7HICAA52.js";import{Aa as d,Ib as l,Ob as n,Pb as t,Qb as a,ob as r,qc as e}from"./chunk-7UJBXEVU.js";var k=(()=>{class i{constructor(){this.tokenizerExample=`export class ExampleTokenizer implements Tokenizer<ExampleToken> {
  tokenizeText(query: string): ExampleToken[];
    // Implement your logic to tokenize the query string
    // Here's a simple example that splits the query by spaces
    const tokens = query.split(' ').map((value) => new ExampleToken(value.trim()));

    return tokens;
}`,this.rendererExample=`class ExampleRenderConfigurator implements RenderConfigurator<ExampleToken> {
  getNotifColor(token: ExampleToken): string {
    // Implement your logic to determine the border color of the token
    // Return the color as a string
    return token.type === ExampleTokenType.TYPE1 ? 'red' : 'black';
  }

  getHighlightColor(token: ExampleToken): string {
    // Implement your logic to determine the color of the token
    // Return the color as a string
    return token.type === ExampleTokenType.TYPE1 ? 'yellow' : 'white';
  }

  enhanceTokens(tokens: ExampleToken[]): ExampleToken[] {
    // Implement your logic to enhance the tokens, if needed
    // Return the updated array of tokens
    return tokens;
  }
}`}static{this.\u0275fac=function(o){return new(o||i)}}static{this.\u0275cmp=d({type:i,selectors:[["nui-freetype-query-builder-docs-example"]],decls:135,vars:3,consts:[["type","warning",3,"allowDismiss"],["href","../interfaces/Tokenizer.html","target","_blank"],["language","typescript",3,"code"],["href","../interfaces/RenderConfigurator.html","target","_blank"],["filenamePrefix","freetype-query-builder-basic","exampleTitle","Freetype Query Builder Basic Usage"]],template:function(o,m){o&1&&(n(0,"h2"),e(1,"Required Modules"),t(),n(2,"ul")(3,"li")(4,"code"),e(5,"NuiFreeTypeQueryBuilderModule"),t()()(),n(6,"p"),e(7,` Freetype Query Builder is a generic component designed as a base for creating query input to allow the user to type a query in a defined query language.
`),t(),n(8,"p")(9,"code"),e(10,"nui-freetype-query-builder"),t(),e(11," provides:"),t(),n(12,"ul")(13,"li"),e(14,"the input"),t(),n(15,"li"),e(16,"highlighting functionality"),t(),n(17,"li"),e(18,"options mechanics"),t(),n(19,"li"),e(20,"auto multiline resizing"),t()(),n(21,"nui-message",0)(22,"code"),e(23,"nui-freetype-query-builder"),t(),e(24,` doesn't provide the grammar. It should be provided by the consumer.
`),t(),n(25,"h2"),e(26,"Basic Usage"),t(),n(27,"p"),e(28,"To use "),n(29,"code"),e(30,"nui-freetype-query-builder"),t(),e(31," do the following:"),t(),n(32,"ol")(33,"li"),e(34," Add "),n(35,"code"),e(36,"<nui-freetype-query-builder>"),t(),e(37," to your template. "),t(),n(38,"li"),e(39," Create a tokenizer object that implements the "),n(40,"code")(41,"a",1),e(42,"Tokenizer"),t()(),e(43," interface and pass it to the tokenizer input of the query-builder component. The tokenizeText method is a place, where you can implement your custom logic to tokenize the user input. It takes a query string as input and should return an array of Token objects which should extend QueryToken interface. "),a(44,"nui-example-code",2),t(),n(45,"li"),e(46," Create a renderer object that implements the "),n(47,"code")(48,"a",3),e(49,"RenderConfigurator"),t()(),e(50," interface and pass it to the renderer input of the query-builder component. "),n(51,"ul")(52,"li")(53,"code"),e(54,"getNotifColor"),t(),e(55," - method takes a Token object as input and returns the border color of the token. "),t(),n(56,"li")(57,"code"),e(58,"getHighlightColor"),t(),e(59," - method takes a Token object as input and returns the color of the token. "),t(),n(60,"li")(61,"code"),e(62,"enhanceTokens"),t(),e(63," - optional method takes an array of Token objects as an input and returns the array of tokens which should be focused. "),t()(),a(64,"nui-example-code",2),t(),n(65,"li"),e(66," Optionally you can create a help entry array of type "),n(67,"code"),e(68,"HelpEntry[]"),t(),e(69," and pass it to the currentHelp input of the query-builder component. Depends purely on implementation, how the array is build, but as the component notifies about cursor position can be generated based on the focused token. "),t()(),n(70,"nui-example-wrapper",4),a(71,"nui-freetype-query-builder-basic-example"),t(),n(72,"h2"),e(73,"Inputs"),t(),n(74,"ul")(75,"li")(76,"code"),e(77,"value"),t(),e(78," - Input value of type string."),t(),n(79,"li")(80,"code"),e(81,"maxLength"),t(),e(82," - Set the maximum allowed value for the input field. Defaults to "),n(83,"code"),e(84,"10 000"),t(),e(85,". "),t(),n(86,"li")(87,"code"),e(88,"placeholder"),t(),e(89," - Set the string to use as a placeholder for the input field. Default is "),n(90,"code"),e(91,'""'),t(),e(92,". "),t(),n(93,"li")(94,"code"),e(95,"readonly"),t(),e(96," - Set the freetype query builder to readonly state. Defaults to "),n(97,"code"),e(98,"false"),t(),e(99,". "),t(),n(100,"li")(101,"code"),e(102,"renderer"),t(),e(103," - The renderer is responsible for marking which tokens should be colored and deciding type of coloring (background, border). "),t(),n(104,"li")(105,"code"),e(106,"tokenizer"),t(),e(107," - The tokenizer is responsible for parsing user input to array of tokens. "),t(),n(108,"li")(109,"code"),e(110,"currentHelp"),t(),e(111," - Array of options for user to select. Depends purely on implementation how they are build, but as component notifies about cursor position can be generated based on focused token. "),t(),n(112,"li")(113,"code"),e(114,"cursorSetter$"),t(),e(115," - Way to set cursor to specific position. "),t()(),n(116,"h2"),e(117,"Outputs"),t(),n(118,"ul")(119,"li")(120,"code"),e(121,"helpItemSelected"),t(),e(122," - Emits when user selects option from displayed help list. "),t(),n(123,"li")(124,"code"),e(125,"currentValue"),t(),e(126," - Emits when value changed in the input."),t(),n(127,"li")(128,"code"),e(129,"cursorPos"),t(),e(130," - Emits on any cursor position change."),t(),n(131,"li")(132,"code"),e(133,"submitQuery"),t(),e(134,' - Emits when "Enter" is hit with closed options. '),t()()),o&2&&(r(21),l("allowDismiss",!1),r(23),l("code",m.tokenizerExample),r(20),l("code",m.rendererExample))},dependencies:[u,p,s,c],styles:["[_nghost-%COMP%]   ul[_ngcontent-%COMP%]{padding-left:40px}[_nghost-%COMP%]   ul[_ngcontent-%COMP%]   li[_ngcontent-%COMP%]{list-style:disc}"]})}}return i})();export{k as a};
