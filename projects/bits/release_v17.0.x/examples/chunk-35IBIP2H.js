import{a as h}from"./chunk-HD6ROFJM.js";import{a as y}from"./chunk-EPHYO7KH.js";import{a as g}from"./chunk-2FZ7DXDX.js";import{a as f}from"./chunk-KA5SJVIA.js";import{a as v}from"./chunk-EQJNTC3Q.js";import{a as p}from"./chunk-MWYIJ3RQ.js";import{a as c}from"./chunk-2XQARKM4.js";import{a as x}from"./chunk-6NKQ6HVZ.js";import{a as u}from"./chunk-CJXGDYPW.js";import{a as s}from"./chunk-FEEMFRND.js";import{g as d}from"./chunk-7HICAA52.js";import{Aa as a,Ib as m,Ob as i,Pb as t,Qb as n,ob as r,qc as e}from"./chunk-7UJBXEVU.js";var _=(()=>{class o{static{this.\u0275fac=function(l){return new(l||o)}}static{this.\u0275cmp=a({type:o,selectors:[["nui-overlay-docs-example"]],decls:301,vars:1,consts:[["type","warning",3,"allowDismiss"],["href","../components/ComboboxV2Component.html#example","target","_blank"],["href","../components/SelectV2Component.html#example","target","_blank"],["type","info"],["filenamePrefix","overlay-simple-usage.example","exampleTitle","Basic Usage"],["filenamePrefix","overlay-popup-styles.example","exampleTitle","Using with popup styles"],["href","https://material.angular.io/cdk/overlay/api#OverlayConfig"],["filenamePrefix","overlay-viewport-margin.example","exampleTitle","Viewport Margin Example"],["filenamePrefix","overlay-show-hide-toggle.example","exampleTitle","Types of Overlay component Toggle"],["filenamePrefix","overlay-custom-styles.example","exampleTitle","Custom Styles Example"],["filenamePrefix","overlay-custom-container.example","exampleTitle","Custom Container Example"],["href","../../classes/OverlayPositionService.html","target","_blank"],["filenamePrefix","overlay-arrow.example","exampleTitle","Positioning and Arrow"],["href","https://material.angular.io/cdk/scrolling/api#CdkScrollable","target","_blank"],["filenamePrefix","overlay-custom-dialog","exampleTitle","Custom Dialog Overlay"],["filenamePrefix","custom-confirmation-inside-dialog","exampleTitle","Custom Overlay Dialog inside the nui-dialog"]],template:function(l,E){l&1&&(i(0,"p")(1,"code"),e(2,"<nui-overlay>"),t(),e(3," is a base component for the most of dropdown-like Nova components, but this doesn't limit it's abilities. It allows you to put any content into it's body to build more complex and exciting components. "),n(4,"br")(5,"br"),e(6," How "),i(7,"code"),e(8,"nui-overlay"),t(),e(9," is different from the legacy "),i(10,"code"),e(11,"nui-popup"),t(),e(12,"? The "),i(13,"code"),e(14,"nui-overlay"),t(),e(15," it is built using the modern and powerful "),i(16,"code"),e(17,"CDK Overlay"),t(),e(18," kindly provided, and well supported by "),i(19,"code"),e(20,"Angular CDK"),t(),e(21,` team. It provides a better flexibility, customization, and in general is extremely easy to use.
`),t(),i(22,"nui-message",0)(23,"strong"),e(24,"Pay attention!"),t(),e(25," The following examples demonstrate only basic scenarios. To get familiar with more complex use cases, you can refer to the documentation for components built on top of the "),i(26,"code"),e(27,"nui-overlay"),t(),e(28,", such as "),i(29,"a",1),e(30,"nui-combobox-v2"),t(),e(31,", "),i(32,"a",2),e(33,"nui-select-v2"),t(),e(34,`, etc., and explore their internal structure in the codebase.
`),t(),i(35,"h2"),e(36,"Required Modules"),t(),i(37,"ul")(38,"li")(39,"code"),e(40,"NuiOverlayModule"),t()()(),i(41,"h2"),e(42,"Basic Usage"),t(),i(43,"p"),e(44," A simple popup can be added to the page by adding a "),i(45,"code"),e(46,"<nui-overlay>"),t(),e(47," element. Inside the "),i(48,"code"),e(49,"nui-overlay"),t(),e(50," element put anything you see as its content. Then define an element which will be a toggle for the "),i(51,"code"),e(52,"nui-overlay"),t(),e(53," at the same level, and sent it as a reference to the popup's "),i(54,"code"),e(55,"toggleReference"),t(),e(56," @Input. That is it! "),i(57,"nui-message",3),e(58," By default, "),i(59,"code"),e(60,"nui-overlay"),t(),e(61," can be closed only by toggling it via its "),i(62,"code"),e(63,"toggleReference"),t(),e(64," component, which means it won't close if click evens are triggered anywhere else on the page. Meaning this, it is recommended to subscribe to the popup's "),i(65,"code"),e(66,"clickOutside"),t(),e(67," @Output and close the nui-overlay using it's public "),i(68,"code"),e(69,"toggle()"),t(),e(70," method. "),t()(),i(71,"nui-example-wrapper",4),n(72,"nui-overlay-simple-usage-example"),t(),i(73,"h2"),e(74,"Using with popup styles"),t(),i(75,"p"),e(76," By default, overlay doesn't have a specific styling. You can apply popup styles to the basic overlay component. It includes such properties as "),i(77,"code"),e(78,"paddings"),t(),e(79,", "),i(80,"code"),e(81,"background-color"),t(),e(82,` etc.
`),t(),i(83,"p"),e(84," To do that, you have to pass "),i(85,"code"),e(86,'"with-popup-styles"'),t(),e(87," class as a "),i(88,"code"),e(89,"panelClass"),t(),e(90," for the "),i(91,"code"),e(92,"overlayConfig"),t(),e(93,". You can import "),i(94,"code"),e(95,"OVERLAY_WITH_POPUP_STYLES_CLASS"),t(),e(96," from "),i(97,"code"),e(98,"@nova-ui/bits"),t(),e(99," or just pass "),i(100,"code"),e(101,'"with-popup-styles"'),t(),e(102,` as a string.
`),t(),i(103,"nui-example-wrapper",5),n(104,"nui-overlay-popup-styles-example"),t(),i(105,"h2"),e(106,"Overlay Configuration"),t(),i(107,"p")(108,"code"),e(109,"nui-overlay"),t(),e(110," has all the benefits the "),i(111,"code"),e(112,"Angular CDK Overlay"),t(),e(113," provides, including a rich and flexible configuration. Use "),i(114,"code"),e(115,"overlayConfig"),t(),e(116," @Input of the component and follow the interface to configure the overlay to your likings. Please also reference the "),i(117,"a",6),e(118," official Angular CDK documentation"),t(),e(119,` to see more information on how to configure the overlay.
`),t(),i(120,"h2"),e(121,"Viewport Margin"),t(),i(122,"p"),e(123," You can easily manage edges of the container using "),i(124,"code"),e(125,"viewportMargin"),t(),e(126," input. It sets a minimum distance in px the overlay may be positioned to the edge of the viewport. Default value of "),i(127,"code"),e(128,"viewportMargin"),t(),e(129,` is 30px.
`),t(),i(130,"nui-example-wrapper",7),n(131,"nui-overlay-viewport-margin-example"),t(),i(132,"h2"),e(133,"Toggle Types"),t(),i(134,"p"),e(135," Not only the "),i(136,"code"),e(137,"toggleReference"),t(),e(138," is bale to show the "),i(139,"code"),e(140,"nui-overlay"),t(),e(141," up. The popover can be toggled with any other clickable element on the page. The public methods responsible for this are quite self-descriptive: "),i(142,"code"),e(143,"show()"),t(),e(144," will only pop the popup up, "),i(145,"code"),e(146,"hide()"),t(),e(147," will hide the popup from the view, and "),i(148,"code"),e(149,"toggle()"),t(),e(150,` will do both. This adds a flexibiility on how you want your popup-ve to get toggled.
`),t(),i(151,"nui-message",3),e(152," Notice below how "),i(153,"code"),e(154,"nui-overlay"),t(),e(155," is not closed if you click outside of its "),i(156,"code"),e(157,"toggleReference"),t(),e(158,". This is because we do not subscribe to its "),i(159,"code"),e(160,"clickOutside"),t(),e(161," @Output, and so we are only able to close the popup via a specific button, like "),i(162,"code"),e(163,"Hide"),t(),e(164,", or "),i(165,"code"),e(166,"Toggle"),t(),e(167,`.
`),t(),i(168,"nui-example-wrapper",8),n(169,"nui-overlay-show-hide-toggle-example"),t(),i(170,"h2"),e(171,"Custom Styles"),t(),i(172,"p"),e(173," In case tweaking the "),i(174,"code"),e(175,"nui-overlay"),t(),e(176," overlay styles via the "),i(177,"code"),e(178,"overlayConfig"),t(),e(179," was not enough, and brute force is needed, one can use the "),i(180,"code"),e(181,"styles"),t(),e(182,` @Input to pass in the object with the inline styles to throw into the overlay.
`),t(),i(183,"nui-example-wrapper",9),n(184,"nui-overlay-custom-styles-example"),t(),i(185,"h2"),e(186,"Custom Container"),t(),i(187,"p"),e(188," By default, the "),i(189,"code"),e(190,"nui-overlay"),t(),e(191," container appends to body. This is a default behavior suggested by the angular material cdk overlay. But there are cases when it is necessary to have overlay container append to some custom container. It is possible to attache the popup container to any custom container by simply providing either a "),i(192,"code"),e(193,"selector"),t(),e(194,", or an "),i(195,"code"),e(196,"element reference"),t(),e(197," to the "),i(198,"code"),e(199,"customContainer"),t(),e(200,` @Input. See two ways of doing that in the example below.
`),t(),i(201,"nui-example-wrapper",10),n(202,"nui-overlay-custom-container-example"),t(),i(203,"h2"),e(204,"Positioning and Arrow"),t(),i(205,"p"),e(206," By default, "),i(207,"code"),e(208,"<nui-overlay>"),t(),e(209," can be opened "),i(210,"code"),e(211,"top"),t(),e(212," or "),i(213,"code"),e(214,"bottom"),t(),e(215,`.
`),t(),i(216,"p"),e(217," It's possible to apply custom positioning to the "),i(218,"code"),e(219,"<nui-overlay>"),t(),e(220,". For that, use "),i(221,"a",11),e(222,"OverlayPositionService"),t(),e(223," (see usage in the example). It returns a set of available positions prioritizing them e.g. for "),i(224,"code"),e(225,"top"),t(),e(226," it will be: "),i(227,"code"),e(228,"top"),t(),e(229,", "),i(230,"code"),e(231,"bottom"),t(),e(232,", "),i(233,"code"),e(234,"left"),t(),e(235,", "),i(236,"code"),e(237,"right"),t(),e(238,`.
`),t(),i(239,"p"),e(240," Also, "),i(241,"code"),e(242,"<nui-overlay>"),t(),e(243," support using arrow at the edge of the overlay that points to the toggle reference. To use that, you need to put "),i(244,"code"),e(245,"<nui-overlay-arrow>"),t(),e(246," inside the "),i(247,"code"),e(248,"<nui-overlay>"),t(),e(249,` (as in the example).
`),t(),i(250,"p"),e(251," Arrow positioning uses specific CSS classes that are added automatically if using "),i(252,"a",11),e(253,"OverlayPositionService"),t(),e(254,". So, to use arrow inside the overlay you need to get a set of available positions with OverlayPositionService, pass them to the overlay component (see example) and put "),i(255,"code"),e(256,"<nui-overlay-arrow>"),t(),e(257," inside the "),i(258,"code"),e(259,"<nui-overlay>"),t(),e(260,` template.
`),t(),i(261,"p")(262,"strong"),e(263,"Drag the toggle to the edges of the viewport to see how it behaves."),t()(),i(264,"nui-example-wrapper",12),n(265,"nui-overlay-arrow-example"),t(),i(266,"h2"),e(267,"Setting Up Scrollable Containers"),t(),i(268,"p"),e(269," By default, "),i(270,"code"),e(271,"cdk-overlay"),t(),e(272," reacts on "),i(273,"code"),e(274,"document"),t(),e(275," scroll events, but there are numerous cases when multiple scrollable containers on the page are possible, or the scrollable container appears is a different place in the DOM, e.g. inside the appended to body overlay container. In this case it is advised to set the "),i(276,"code")(277,"a",13),e(278,"cdkScrollable"),t()(),e(279,` directive to the container considered scrollable.
`),t(),i(280,"h2"),e(281,"Custom Dialog Overlay"),t(),i(282,"p"),e(283," There are numerous cases when a user would want a lightweight dialog-looking overlay placed over the parent container to quickly confirm things, or make sure a users are immediately informed about any sort of state, progress etc. This can be done fast and easily with "),i(284,"code"),e(285,"nui-overlay"),t(),e(286," component with a few lines of code involved. By default, the "),i(287,"code"),e(288,"nui-overlay"),t(),e(289,` position strategy is configured to attach the created cdk overlay to the bottom-left corner of the toggle reference, so it could be easily used for the most common use cases - selects, menus, comboboxes etc. To fill the parent container with the overlay we need to set new positions, so that the overlay would be attached to the top-left corner of the toggle reference container. Afterwards, all we need is toggle the overlay and using its overlay reference adjust the size of the overlay to the dimensions of the toggle reference container. And that's it! Please check the comments in the code snippets below.
`),t(),i(290,"nui-example-wrapper",14),n(291,"nui-overlay-custom-dialog"),t(),i(292,"h2"),e(293,"Custom Dialog Overlay Inside the nui-dialog"),t(),i(294,"p"),e(295," This is yet another use case of the dialog-like overlay, this time inside the "),i(296,"code"),e(297,"nui-dialog"),t(),e(298,` component. Click the button in the exampel below and attempt to cancel the dialog.
`),t(),i(299,"nui-example-wrapper",15),n(300,"nui-custom-confirmation-inside-dialog"),t()),l&2&&(r(22),m("allowDismiss",!1))},dependencies:[s,d,p,c,x,u,h,y,g,f,v],encapsulation:2})}}return o})();export{_ as a};
