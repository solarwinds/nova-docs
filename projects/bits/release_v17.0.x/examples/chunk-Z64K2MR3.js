import{a as d}from"./chunk-4VM3LQWY.js";import{a as m}from"./chunk-LE7PH44S.js";import{g as p}from"./chunk-BCBJTPRO.js";import{Qb as l,Wb as i,Xb as t,Yb as s,nb as a,yc as e,zb as r}from"./chunk-MC3BMXIX.js";var v=(()=>{class n{static{this.\u0275fac=function(o){return new(o||n)}}static{this.\u0275cmp=r({type:n,selectors:[["ng-component"]],standalone:!1,decls:76,vars:2,consts:[["href","../pipes/UnitConversionPipe.html#info","target","_parent"],["href","../miscellaneous/typealiases.html#UnitOption","target","_blank"],["type","info",3,"allowDismiss"],["href","../injectables/UnitConversionService.html","target","_blank"],["filenamePrefix","unit-conversion-pipe-basic","exampleTitle","Basic Usage"]],template:function(o,u){o&1&&(i(0,"p"),e(1," The "),i(2,"code")(3,"a",0),e(4,"unitConversion"),t()(),e(5,' pipe can be used to convert a large value of a small basic unit to a smaller value of a larger unit--for example, converting a quantity of 1024 in bytes to "1 KB". The converted unit label is automatically appended to the output. Supported units are of type '),i(6,"code")(7,"a",1),e(8,"UnitOption"),t()(),e(9," and include the following: "),i(10,"code"),e(11,'"generic"'),t(),e(12," (e.g. 1K for 1000), "),i(13,"code"),e(14,'"bytes"'),t(),e(15,", "),i(16,"code"),e(17,'"bytesPerSecond"'),t(),e(18,", "),i(19,"code"),e(20,'"bitsPerSecond"'),t(),e(21,", and "),i(22,"code"),e(23,'"hertz"'),t(),e(24,`.
`),t(),i(25,"nui-message",2),e(26," Under the hood, this pipe uses the "),i(27,"code")(28,"a",3),e(29,"UnitConversionService"),t()(),e(30,`. If the pipe doesn't offer something you need, such as separating the value and unit out into separate outputs or converting a value outside the context of a template, using the service directly may be a better option for you.
`),t(),i(31,"h2"),e(32,"Required Modules"),t(),i(33,"ul")(34,"li")(35,"code"),e(36,"NuiCommonModule"),t()()(),i(37,"h2"),e(38,"Basic Usage"),t(),i(39,"p"),e(40,` To get started with using the pipe, take a look at the template source of the example below.
`),t(),i(41,"h3"),e(42,"Parameters"),t(),i(43,"p"),e(44,"The pipe accepts the following parameters:"),t(),i(45,"ul")(46,"li")(47,"strong"),e(48,"value"),t(),e(49," - The value to be converted."),t(),i(50,"li")(51,"strong"),e(52,"scale"),t(),e(53," - The decimal scale of the formatted value for specifying how many significant digits to display to the right of the decimal. Defaults to "),i(54,"code"),e(55,"0"),t(),e(56,". "),t(),i(57,"li")(58,"strong"),e(59,"plusSign"),t(),e(60," - Boolean for specifying whether to prefix the output with a '+' when the source value is greater than zero. Defaults to false. "),t(),i(61,"li")(62,"strong"),e(63,"unit"),t(),e(64," - The basic unit to use for the conversion. Accepts arguments of type "),i(65,"code")(66,"a",1),e(67,"UnitOption"),t()(),e(68,". Defaults to "),i(69,"code"),e(70,'"bytes"'),t(),e(71,". "),t()(),i(72,"nui-message",2),e(73,` The pipe will localize the output for all supported units except the "generic" unit. Localization for the "generic" unit is not yet supported.
`),t(),i(74,"nui-example-wrapper",4),s(75,"unit-conversion-pipe-basic-example"),t()),o&2&&(a(25),l("allowDismiss",!1),a(47),l("allowDismiss",!1))},dependencies:[p,m,d],styles:["ul[_ngcontent-%COMP%]{padding-left:40px}ul[_ngcontent-%COMP%]   li[_ngcontent-%COMP%]{list-style:disc}"]})}}return n})();export{v as a};
