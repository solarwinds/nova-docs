import{a as E}from"./chunk-MX6ZCKVJ.js";import{a as S}from"./chunk-6EMZ5EFS.js";import{a as g}from"./chunk-SBQBCEUK.js";import{a as b}from"./chunk-HVZAWOAX.js";import{a as F}from"./chunk-K4D2MRDH.js";import{a as f}from"./chunk-EHEUFDIO.js";import{a as c}from"./chunk-EEPRJTOL.js";import{a as u}from"./chunk-KDMAZA73.js";import{a as h}from"./chunk-DGSDLJLW.js";import{a as x}from"./chunk-IQRKAVKE.js";import{g as p}from"./chunk-BCBJTPRO.js";import{Wb as t,Xb as i,Yb as n,nb as m,yc as e,zb as s,zc as r}from"./chunk-MC3BMXIX.js";var H=(()=>{class o{getItemConfigKey(l){return l}static{this.\u0275fac=function(a){return new(a||o)}}static{this.\u0275cmp=s({type:o,selectors:[["nui-form-field-docs-example"]],standalone:!1,decls:168,vars:2,consts:[["filenamePrefix","basic-form-field","exampleTitle","Basic Form Field"],["filenamePrefix","basic-reactive-form-field","exampleTitle","Validation Messages Inside Reactive Form"],["filenamePrefix","basic-reactive-form-field-custom-validation","exampleTitle","Custom Styled Validation Messages Inside Reactive Form"],["filenamePrefix","form-field-complex","exampleTitle","Form Field with custom validation"],["filenamePrefix","html-as-info-in-form-field","exampleTitle","HTML inside popover"],["filenamePrefix","form-field-hint","exampleTitle","Form Field Hints"],["filenamePrefix","form-field-dynamic-disabling","exampleTitle","Form Field with dynamic disabling"],["filenamePrefix","nested-forms-as-component","exampleTitle","Nested form components"],["filenamePrefix","in-form-form-field","exampleTitle","Form Field inside the Form"],["filenamePrefix","form-field-validation-triggering","exampleTitle","Form Field Validation Triggering"]],template:function(a,d){a&1&&(t(0,"h2"),e(1,"Required Modules"),i(),t(2,"ul")(3,"li")(4,"code"),e(5,"NuiFormFieldModule"),i()()(),t(6,"h2"),e(7,"Basic Usage"),i(),t(8,"p"),e(9,` Form Field is a convenient wrapper that helps to combine your inputs in a form. Currently we support these types of form items (but please note that not all of these components are in alpha stage):
`),i(),t(10,"ul")(11,"li"),e(12,"textbox"),i(),t(13,"li"),e(14,"textarea"),i(),t(15,"li"),e(16,"textNumber"),i(),t(17,"li"),e(18,"checkbox"),i(),t(19,"li"),e(20,"checkboxGroup"),i(),t(21,"li"),e(22,"combobox"),i(),t(23,"li"),e(24,"radioGroup"),i(),t(25,"li"),e(26,"switch"),i(),t(27,"li"),e(28,"select"),i(),t(29,"li"),e(30,"datePicker"),i(),t(31,"li"),e(32,"timePicker"),i()(),t(33,"p")(34,"code"),e(35,"nui-form-field"),i(),e(36,` is a building block for any form. It gives an ability to add label for any input, complementary help text under it and info icon with a popover to display some additional text.
`),i(),t(37,"nui-example-wrapper",0),n(38,"nui-form-field-basic-example"),i(),t(39,"h2"),e(40,"Validation Messages Inside Reactive Form"),i(),t(41,"p"),e(42," In order to use "),t(43,"code"),e(44,"nui-form-field"),i(),e(45," within reactive form you need to pass it access to a control "),t(46,"code"),e(47,`[control]="reactiveForm.controls['email']"`),i(),e(48,". Also "),t(49,"code"),e(50,"formControlName"),i(),e(51,` needs to be set directly on the input element you're using with the name of a form control.
`),i(),t(52,"p")(53,"code"),e(54,"nui-validation-message"),i(),e(55," component can be added inside "),t(56,"code"),e(57,"nui-form-field"),i(),e(58,". It has 2 inputs: "),t(59,"code"),e(60,"show"),i(),e(61," and "),t(62,"code"),e(63,"for"),i(),e(64,". Form Field Component will change "),t(65,"code"),e(66,"show"),i(),e(67," by itself to control visibility of the error message (this input is useful for consumers only outside "),t(68,"code"),e(69,"nui-form-field"),i(),e(70,"), "),t(71,"code"),e(72,"for"),i(),e(73,` input accepts validator name.
`),i(),t(74,"nui-example-wrapper",1),n(75,"nui-form-field-basic-reactive-example"),i(),t(76,"p"),e(77," For customization purposes, we provide the "),t(78,"code"),e(79,"nui-custom-validation-message"),i(),e(80," component that does not contain internal styling and html elements. "),t(81,"b"),e(82,"Input properties are similar to "),t(83,"code"),e(84,"nui-validation-message"),i()()(),t(85,"nui-example-wrapper",2),n(86,"nui-form-field-basic-reactive-custom-validation-example"),i(),t(87,"h2"),e(88,"Compound Validation"),i(),t(89,"p"),e(90,' In the example below an example of a compound validation can be seen. To validate group of fields you need to find the first common parent FormGroup and add validator there (click "Source" above and open the TS tab to see the '),t(91,"code"),e(92,"matchPassword"),i(),e(93,` validator).
`),i(),t(94,"p"),e(95,` The current validation state of the form is displayed at the bottom of the example.
`),i(),t(96,"nui-example-wrapper",3),n(97,"nui-form-field-complex-example"),i(),t(98,"h2"),e(99,"HTML as info"),i(),t(100,"p"),e(101," There is a possibility to have additional information to each field. It can be done using either "),t(102,"code"),e(103,"info"),i(),e(104," input, that is just a text, passed as a string, or "),t(105,"code"),e(106,"infoTemplate"),i(),e(107," input, that uses html inside the "),t(108,"code"),e(109,"ng-template"),i(),e(110,`. Note: the template is provided completely by the user and we do not do any sanitizing.
`),i(),t(111,"nui-example-wrapper",4),n(112,"nui-form-field-with-html-example"),i(),t(113,"h2"),e(114,"Hint Text"),i(),t(115,"p"),e(116," Hint text can give the user additional information about a form field and will appear below the field's user input area. The text for a hint can be specified in one of two ways: either by setting the "),t(117,"code"),e(118),i(),e(119," input with a string value or by providing a templateRef through the "),t(120,"code"),e(121),i(),e(122,` input.
`),i(),t(123,"nui-example-wrapper",5),n(124,"nui-form-field-hint-basic-example"),i(),t(125,"h2"),e(126,"Dynamic Disabling"),i(),t(127,"p"),e(128,` Example to show possibility of controlling disabled state (setting initial, dynamic change of state).
`),i(),t(129,"nui-example-wrapper",6),n(130,"nui-form-field-dynamic-disabling-example"),i(),t(131,"h2"),e(132,"Nested Form Components"),i(),t(133,"p"),e(134," In order to avoid code duplication, it may be useful to combine a form from several components. In this example there is a Form Group that consists of Nickname control an 2 child Form Groups represented by separate components: one is for personal data (name, surname) called "),t(135,"code"),e(136,"nui-first-custom-form-example"),i(),e(137," and another is for address (city, address) called "),t(138,"code"),e(139,"nui-second-custom-form-example"),i(),e(140,". In order to achieve that we need to let the parent form know that there are some child groups that should be appended. This is done by calling "),t(141,"code"),e(142,"formInitialized"),i(),e(143," method from the parent form group on the event "),t(144,"code"),e(145,"formReady"),i(),e(146," of the child. Also there is a "),t(147,"code"),e(148,"CustomFormFieldExampleComponent"),i(),e(149,` from previous example reused in child components to illustrate even more flexibility of this approach.
`),i(),t(150,"p"),e(151,` The current validation state of the form is displayed at the bottom of the example.
`),i(),t(152,"p"),e(153,` Note that there are several ways to use components as a form group, but this is currently the most convenient way.
`),i(),t(154,"nui-example-wrapper",7),n(155,"nui-nested-forms-as-component-example"),i(),t(156,"h2"),e(157,"Various Components in a Form"),i(),t(158,"p"),e(159,"This example shows all possible inputs combined in one form"),i(),t(160,"nui-example-wrapper",8),n(161,"nui-form-field-in-form-example"),i(),t(162,"h2"),e(163,"Validation Triggering"),i(),t(164,"p"),e(165,` This example shows all possible ways for validation message triggering by touch, value changes or status changes event.
`),i(),t(166,"nui-example-wrapper",9),n(167,"nui-form-field-validation-triggering-example"),i()),a&2&&(m(118),r(d.getItemConfigKey("hint")),m(3),r(d.getItemConfigKey("hintTemplate")))},dependencies:[p,u,x,c,f,h,E,S,g,b,F],encapsulation:2})}}return o})();export{H as a};
