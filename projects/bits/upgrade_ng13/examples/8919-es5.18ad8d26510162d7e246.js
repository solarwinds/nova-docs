(self.webpackChunk_nova_ui_bits=self.webpackChunk_nova_ui_bits||[]).push([[8919],{27336:function(e,n,d){var o={"./dnd-axis-constraints/dnd-axis-constraints.example.component.html":11684,"./dnd-axis-constraints/dnd-axis-constraints.example.component.less":9934,"./dnd-axis-constraints/dnd-axis-constraints.example.component.ts":5674,"./dnd-basic/dnd-basic.example.component.html":58589,"./dnd-basic/dnd-basic.example.component.less":77348,"./dnd-basic/dnd-basic.example.component.ts":5501,"./dnd-custom-handle/dnd-custom-handle.example.component.html":31453,"./dnd-custom-handle/dnd-custom-handle.example.component.less":45183,"./dnd-custom-handle/dnd-custom-handle.example.component.ts":34002,"./dnd-docs/dnd-docs.example.component.html":67238,"./dnd-docs/dnd-docs.example.component.ts":8122,"./dnd-drag-disabled/dnd-drag-disabled-example.component.html":40941,"./dnd-drag-disabled/dnd-drag-disabled-example.component.less":1660,"./dnd-drag-disabled/dnd-drag-disabled-example.component.ts":86301,"./dnd-drag-placeholder/dnd-drag-placeholder-example.component.html":74227,"./dnd-drag-placeholder/dnd-drag-placeholder-example.component.less":35303,"./dnd-drag-placeholder/dnd-drag-placeholder-example.component.ts":32037,"./dnd-drag-preview/dnd-drag-preview.example.component.html":34710,"./dnd-drag-preview/dnd-drag-preview.example.component.less":23944,"./dnd-drag-preview/dnd-drag-preview.example.component.ts":44498,"./dnd-dropzone-visual/dnd-dropzone-visual-example.component.html":78456,"./dnd-dropzone-visual/dnd-dropzone-visual-example.component.less":4335,"./dnd-dropzone-visual/dnd-dropzone-visual-example.component.ts":11158,"./dnd-dropzone/dnd-dropzone.example.component.html":49507,"./dnd-dropzone/dnd-dropzone.example.component.less":73595,"./dnd-dropzone/dnd-dropzone.example.component.ts":49993,"./dnd.module.ts":45539,"components/demo/external-libraries/drag-and-drop/dnd-axis-constraints/dnd-axis-constraints.example.component.html":11684,"components/demo/external-libraries/drag-and-drop/dnd-axis-constraints/dnd-axis-constraints.example.component.less":9934,"components/demo/external-libraries/drag-and-drop/dnd-axis-constraints/dnd-axis-constraints.example.component.ts":5674,"components/demo/external-libraries/drag-and-drop/dnd-basic/dnd-basic.example.component.html":58589,"components/demo/external-libraries/drag-and-drop/dnd-basic/dnd-basic.example.component.less":77348,"components/demo/external-libraries/drag-and-drop/dnd-basic/dnd-basic.example.component.ts":5501,"components/demo/external-libraries/drag-and-drop/dnd-custom-handle/dnd-custom-handle.example.component.html":31453,"components/demo/external-libraries/drag-and-drop/dnd-custom-handle/dnd-custom-handle.example.component.less":45183,"components/demo/external-libraries/drag-and-drop/dnd-custom-handle/dnd-custom-handle.example.component.ts":34002,"components/demo/external-libraries/drag-and-drop/dnd-docs/dnd-docs.example.component.html":67238,"components/demo/external-libraries/drag-and-drop/dnd-docs/dnd-docs.example.component.ts":8122,"components/demo/external-libraries/drag-and-drop/dnd-drag-disabled/dnd-drag-disabled-example.component.html":40941,"components/demo/external-libraries/drag-and-drop/dnd-drag-disabled/dnd-drag-disabled-example.component.less":1660,"components/demo/external-libraries/drag-and-drop/dnd-drag-disabled/dnd-drag-disabled-example.component.ts":86301,"components/demo/external-libraries/drag-and-drop/dnd-drag-placeholder/dnd-drag-placeholder-example.component.html":74227,"components/demo/external-libraries/drag-and-drop/dnd-drag-placeholder/dnd-drag-placeholder-example.component.less":35303,"components/demo/external-libraries/drag-and-drop/dnd-drag-placeholder/dnd-drag-placeholder-example.component.ts":32037,"components/demo/external-libraries/drag-and-drop/dnd-drag-preview/dnd-drag-preview.example.component.html":34710,"components/demo/external-libraries/drag-and-drop/dnd-drag-preview/dnd-drag-preview.example.component.less":23944,"components/demo/external-libraries/drag-and-drop/dnd-drag-preview/dnd-drag-preview.example.component.ts":44498,"components/demo/external-libraries/drag-and-drop/dnd-dropzone-visual/dnd-dropzone-visual-example.component.html":78456,"components/demo/external-libraries/drag-and-drop/dnd-dropzone-visual/dnd-dropzone-visual-example.component.less":4335,"components/demo/external-libraries/drag-and-drop/dnd-dropzone-visual/dnd-dropzone-visual-example.component.ts":11158,"components/demo/external-libraries/drag-and-drop/dnd-dropzone/dnd-dropzone.example.component.html":49507,"components/demo/external-libraries/drag-and-drop/dnd-dropzone/dnd-dropzone.example.component.less":73595,"components/demo/external-libraries/drag-and-drop/dnd-dropzone/dnd-dropzone.example.component.ts":49993,"components/demo/external-libraries/drag-and-drop/dnd.module.ts":45539};function t(e){var n=r(e);return d(n)}function r(e){if(!d.o(o,e)){var n=new Error("Cannot find module '"+e+"'");throw n.code="MODULE_NOT_FOUND",n}return o[e]}t.keys=function(){return Object.keys(o)},t.resolve=r,e.exports=t,t.id=27336},88919:function(e,n,d){"use strict";d.r(n),d.d(n,{DndModule:function(){return m}});var o,t=d(83461),r=d(52796),a=d(99763),i=d(14347),s=d(92970),l=d(66989),p=d(33018),c=[{path:"",children:[{path:"",component:s.h},{path:"dropzone",component:l.y},{path:"dropzone-visual",component:l.y}]}],m=((o=function e(){!function(e,n){if(!(e instanceof n))throw new TypeError("Cannot call a class as a function")}(this,e)}).\u0275fac=function(e){return new(e||o)},o.\u0275mod=p.oAB({type:o}),o.\u0275inj=p.cJS({providers:[{provide:i.V3$,useFactory:function(){return d(27336)}}],imports:[[i.vvu,i.rIe,i.gkT,a.Bz.forChild(c),t._t,r.nZ]]}),o)},11684:function(e,n,d){"use strict";d.r(n),n.default='<div class="draggable-item mr-5" cdkDragLockAxis="y" cdkDrag>\n    I can only be dragged up/down\n</div>\n<div class="draggable-item mr-5" cdkDragLockAxis="x" cdkDrag>\n    I can only be dragged left/right\n</div>\n'},5674:function(e,n,d){"use strict";d.r(n),n.default='import {Component} from "@angular/core";\n\n@Component({\n    selector: "dnd-axis-constraints",\n    templateUrl: "./dnd-axis-constraints.example.component.html",\n    styleUrls: ["./dnd-axis-constraints.example.component.less"],\n})\nexport class DndAxisConstraintsExampleComponent {\n}\n\n'},58589:function(e,n,d){"use strict";d.r(n),n.default='<div class="draggable-item" cdkDrag>\n    I can be dragged from anywhere\n</div>\n'},5501:function(e,n,d){"use strict";d.r(n),n.default='import {Component} from "@angular/core";\n\n@Component({\n    selector: "dnd-basic",\n    templateUrl: "./dnd-basic.example.component.html",\n    styleUrls: ["./dnd-basic.example.component.less"],\n})\nexport class DndBasicExampleComponent {\n}\n\n'},31453:function(e,n,d){"use strict";d.r(n),n.default='\x3c!-- list of draggable items  --\x3e\n<div cdkDropList class="draggable-container" (cdkDropListDropped)="onItemDropped($event)">\n    <ng-container *ngFor="let item of listItems; let i=index">\n        <div cdkDrag\n             cdkDragPreviewClass="dnd-drag-preview"\n             [cdkDragDisabled]="!item.enabled"\n             class="draggable-item"\n             [ngClass] = "{\n                \'with-handle\': item.hasHandle,\n                \'nui-dnd-raised-state\': item.withHandle && mousedOver[i]\n            }">\n\n            \x3c!-- raised state style is applied ONLY when the mouse is over the handle --\x3e\n            <div *ngIf="item.withHandle" cdkDragHandle class="drag-handle" (mouseover)="mousedOver[i]=true" (mouseout)="mousedOver[i]=false">\n                <nui-icon icon="drag"></nui-icon>\n            </div>\n            {{item.title}}\n        </div>\n    </ng-container>\n</div>\n'},34002:function(e,n,d){"use strict";d.r(n),n.default='import {CdkDragDrop, moveItemInArray} from "@angular/cdk/drag-drop";\nimport { Component} from "@angular/core";\n\nclass IListItem {\n    title: string;\n    enabled?: boolean;\n    hasHandle?: boolean;\n}\n\n@Component({\n    selector: "dnd-custom-handle",\n    templateUrl: "./dnd-custom-handle.example.component.html",\n    styleUrls: ["./dnd-custom-handle.example.component.less"],\n})\nexport class DndCustomHandleExampleComponent {\n    public mousedOver: boolean[] = [];\n    public listItems: IListItem[] = [\n        {\n            title: "I can only be dragged using the handle",\n            enabled: true,\n            hasHandle: true,\n        },\n        {\n            title: " I can be dragged without any handle",\n            enabled: true,\n            hasHandle: false,\n        },\n        {\n            title: "Disabled item CAN\'T be dragged",\n            enabled: false,\n        },\n    ];\n\n    public onItemDropped(event: CdkDragDrop<IListItem[]>) {\n        moveItemInArray(this.listItems, event.previousIndex, event.currentIndex);\n    }\n}\n'},67238:function(e,n,d){"use strict";d.r(n),n.default='<p>The Angular CDK drag and drop module provides a way to easily and declaratively create drag and drop interfaces.</p>\n<p>To get started, import <code>DragDropModule</code> into the <code>NgModule</code> where you want to use drag-and-drop features:</p>\n<nui-example-code language="typescript">{{ initialSetupCode }}</nui-example-code>\n<p>\n    For more details on the implementation of the @angular/cdk/drag-drop, check the documentation <a href="https://material.angular.io/cdk/drag-drop/overview" target="_blank">here</a>\n</p>\n<h2>Required Modules</h2>\n<ul>\n    <li>\n        <code>NuiDndModule</code>\n    </li>\n    <li>\n        Angular CDK\'s <code>DragDropModule</code>\n    </li>\n</ul>\n\n<h2>Basic Usage</h2>\n<p>\n    This example shows how easy it is to create a draggable element by adding the <code>cdkDrag</code> directive on the DOM element we want to become draggable.\n    Since it can be dragged without any handle, hovering the element will alter its state to both <code>nui-dnd-raised-state</code> and <code>nui-dnd-hover-state</code>.\n</p>\n<nui-message [allowDismiss]=false type="info">\n    <p>\n        In case you want to customize the styles for your draggable elements, it may be helpful to know that\n        all <code>cdkDrag</code> DOM elements have the <code>.cdk-drag</code> CSS class applied to them.\n    </p>\n</nui-message>\n\n<nui-example-wrapper filenamePrefix="dnd-basic" exampleTitle="Drag & Drop">\n    <dnd-basic></dnd-basic>\n</nui-example-wrapper>\n\n<h2>Drag Axis Constraints</h2>\n<p>\n    By default, <code>cdkDrag</code> allows free movement in all directions. To restrict dragging to a specific axis, you can set\n    the <code>cdkDragLockAxis</code> input on <code>cdkDrag</code> or the <code>cdkDropListLockAxis</code> input on <code>cdkDropList</code>\n    to either "x" or "y".\n</p>\n<nui-example-wrapper filenamePrefix="dnd-axis-constraints" exampleTitle="Drag Axis Constraints">\n    <dnd-axis-constraints></dnd-axis-constraints>\n</nui-example-wrapper>\n\n<h2>Disabled draggable items</h2>\n<p>A collection of <code>cdkDrag</code> elements are usually placed inside a <code>cdkDropList</code>.</p>\n<p>To prevent an item from being dragged set the <code>cdkDragDisabled</code> input on the <code>cdkDrag</code> element to true:</p>\n<nui-message [allowDismiss]=false type="info">\n    <p>Disabled draggable DOM elements have the <code>.cdk-drag-disabled</code> CSS class appended to them.</p>\n    <p>See the styles customization applied to the disabled draggable items in the LESS source code tab in the source expander below for inspiration.</p>\n</nui-message>\n<nui-example-wrapper filenamePrefix="dnd-drag-disabled" exampleTitle="Disabled draggable items">\n    <dnd-drag-disabled></dnd-drag-disabled>\n</nui-example-wrapper>\n\n<h2>Custom Drag Preview</h2>\n<p>It is possible to display custom preview content instead of cloning the original element by specifying the <code>cdkDragPreview</code> directive.</p>\n<p>The directive must be specified for each <code>cdkDrag</code> element that we want to have preview content.</p>\n<nui-message [allowDismiss]=false type="warning">\n    <p>\n        <strong>Important:</strong> In order for the <code>cdkDragPreview</code> directive to work, it must\n        be wrapped inside a DOM element with the <code>cdkDropList</code> directive specified.\n    </p>\n    Take a look at the source of the following example to see how.\n</nui-message>\n<nui-example-wrapper filenamePrefix="dnd-drag-preview" exampleTitle="Custom Drag Preview">\n    <dnd-drag-preview></dnd-drag-preview>\n</nui-example-wrapper>\n\n<h2>Custom Drag Handle</h2>\n<p>The handle by which an element can be dragged can be customized by specifying the directive <code>cdkDragHandle</code> on the element we want to become the handle.</p>\n<nui-example-wrapper filenamePrefix="dnd-custom-handle" exampleTitle="Custom Drag Handle">\n    <dnd-custom-handle></dnd-custom-handle>\n</nui-example-wrapper>\n<p>\n    In the example above the handle is still displayed while dragging an element;\n    to hide the handle we just need to apply the properer styling on the cloned preview element as shown below:\n    <nui-example-code language="css">{{hideHandleWhileDragging}}</nui-example-code>\n</p>\n\n<h2>Custom Placeholder</h2>\n<p>\n    While a <code>cdkDrag</code> element is being dragged, the Angular CDK will create a placeholder element that\n    will show the user where the dragged element will be placed when it\'s dropped.\n</p>\n<p>\n    By default the placeholder is a clone of the element that is being dragged, however you can replace it\n    with a custom one using the <code>*cdkDragPlaceholder</code> directive.\n</p>\n<nui-example-wrapper filenamePrefix="dnd-drag-placeholder" exampleTitle="Custom Placeholder">\n    <dnd-drag-placeholder></dnd-drag-placeholder>\n</nui-example-wrapper>\n\n<h2>Dropzones Visualization</h2>\n<p>\n    A drag container is a collection of <code>cdkDrag</code> elements within a <code>cdkDropList</code>.\n    Decorating a drag container with the <code><a href="../directives/DndDropTargetDirective.html" target="_parent">nuiDndDropTarget</a></code> directive defines a dropzone.\n</p>\n<nui-message [allowDismiss]=false type="warning">\n    In order use multiple drag containers, both sources and destinations must be wrapped within a <code>cdkDropListGroup</code> directive.\n</nui-message>\n<p>\n    Once the user starts dragging an item from the source, the destination is highlighted as an available destination dropzone;\n    the <code>nui-dnd-dropzone--active</code> CSS class is added to the dropzone once dragging starts.\n    The destination uses the <code>nuiDndDropTarget</code> directive helper in order to inform the user visually\n    whether a dropzone will accept or reject a dragged item. In the following example, all items are accepted\n    except for <em>IBM</em>;\n</p>\n<nui-message [allowDismiss]=false type="info">\n    The following CSS classes are added to the dropzone once the conditions are met as described below:\n    <ul>\n        <li>- <code>nui-dnd-dropzone--active</code> - once dragging starts</li>\n        <li>- <code>nui-dnd-dropzone--drop-allowed</code> - once the user is over the dropzone and the dragged item is accepted</li>\n        <li>- <code>nui-dnd-dropzone--drop-not-allowed</code> - once the user is over the dropzone and the dragged item is NOT accepted</li>\n    </ul>\n</nui-message>\n<p>\n    To define acceptance conditions for a dropzone, the user can provide a callback method to the <code>canBeDropped</code>\n    input.\n</p>\n<nui-example-wrapper filenamePrefix="dnd-dropzone" exampleTitle="Dropzones">\n    <dnd-dropzone></dnd-dropzone>\n</nui-example-wrapper>\n'},8122:function(e,n,d){"use strict";d.r(n),n.default='import {Component} from "@angular/core";\n\n@Component({\n    selector: "nui-dnd-docs",\n    templateUrl: "./dnd-docs.example.component.html",\n})\nexport class DndDocsExampleComponent {\n    public initialSetupCode = `\n// our module where we want to use drag-and-drop features\nimport { DragDropModule } from "@angular/cdk/drag-drop";\n\n@NgModule({\n    imports: [\n        DragDropModule,\n        // other modules that we might need\n    ],\n    declarations: [ /* our module declaration */],\n    exports:      [ /* our exports */ ],\n})\nexport class MyModule {}`\n        .replace("\\r\\n", "<br/>") // nice rendering\n        ;\n\n    public hideHandleWhileDragging = `\n.dnd-drag-preview .drag-handle {\n    display: none;\n}\n    `;\n}\n'},40941:function(e,n,d){"use strict";d.r(n),n.default='<div cdkDropList class="draggable-container" (cdkDropListDropped)="onItemDropped($event)">\n    <div *ngFor="let item of listItems"  class="draggable-item"\n         cdkDrag [cdkDragDisabled]="!item.enabled"\n         cdkDragPreviewClass="dnd-drag-preview">\n        {{item.title}} - {{ translatedStatus(item.enabled) }}\n    </div>\n</div>\n'},86301:function(e,n,d){"use strict";d.r(n),n.default='import {CdkDragDrop, moveItemInArray} from "@angular/cdk/drag-drop";\nimport {Component} from "@angular/core";\n\nclass IListItem  {\n    title: string;\n    enabled: boolean;\n}\n\n@Component({\n    selector: "dnd-drag-disabled",\n    templateUrl: "./dnd-drag-disabled-example.component.html",\n    styleUrls: ["./dnd-drag-disabled-example.component.less"],\n})\nexport class DndDragDisabledExampleComponent {\n    public listItems: IListItem[] = [\n        {\n            title: "Adobe",\n            enabled: true,\n        },\n        {\n            title: "IBM",\n            enabled: false,\n        },\n    ];\n\n    public onItemDropped(event: CdkDragDrop<IListItem[]>) {\n        moveItemInArray(this.listItems, event.previousIndex, event.currentIndex);\n    }\n\n    public translatedStatus(enabled: boolean) {\n        return enabled ? $localize `Enabled` : $localize `Disabled`;\n    }\n}\n'},74227:function(e,n,d){"use strict";d.r(n),n.default='<div cdkDropList class="draggable-container" (cdkDropListDropped)="onItemDropped($event)">\n    <div cdkDrag cdkDragPreviewClass="dnd-drag-preview" class="draggable-item" *ngFor="let item of listItems">\n        {{item}}\n        <div class="draggable-placeholder" *cdkDragPlaceholder i18n>\n            Placeholder\n        </div>\n    </div>\n</div>\n'},32037:function(e,n,d){"use strict";d.r(n),n.default='import {CdkDragDrop, moveItemInArray} from "@angular/cdk/drag-drop";\nimport {Component} from "@angular/core";\n\n@Component({\n    selector: "dnd-drag-placeholder",\n    templateUrl: "./dnd-drag-placeholder-example.component.html",\n    styleUrls: ["./dnd-drag-placeholder-example.component.less"],\n})\nexport class DndDragPlaceholderExampleComponent {\n    public listItems: string[] = ["Adobe", "IBM", "Dell" ];\n\n    public onItemDropped(event: CdkDragDrop<string[]>) {\n        moveItemInArray(this.listItems, event.previousIndex, event.currentIndex);\n    }\n}\n'},34710:function(e,n,d){"use strict";d.r(n),n.default='<div cdkDropList class="draggable-container" (cdkDropListDropped)="onItemDropped($event)">\n    <div cdkDrag cdkDragPreviewClass="dnd-drag-preview" class="draggable-item" *ngFor="let item of listItems">\n        {{item.title}}\n        <div *cdkDragPreview>\n            <p>This is the preview for {{item.title}}</p>\n            <img align="middle" width="100" [src]="item.preview" [alt]="item.title">\n        </div>\n    </div>\n</div>\n'},44498:function(e,n,d){"use strict";d.r(n),n.default='import {CdkDragDrop, moveItemInArray} from "@angular/cdk/drag-drop";\nimport {Component} from "@angular/core";\nimport {IRepeatItem} from "@nova-ui/bits";\n\ninterface IListItem extends IRepeatItem {\n    title: string;\n    preview: string;\n}\n\n@Component({\n    selector: "dnd-drag-preview",\n    templateUrl: "./dnd-drag-preview.example.component.html",\n    styleUrls: ["./dnd-drag-preview.example.component.less"],\n})\nexport class DndDragPreviewExampleComponent {\n    public listItems: IListItem[] = [\n        {\n            title: "Adobe",\n            preview: "https://upload.wikimedia.org/wikipedia/commons/thumb/7/7b/Adobe_Systems_logo_and_wordmark.svg/524px-Adobe_Systems_logo_and_wordmark.svg.png",\n        },\n        {\n            title: "IBM",\n            preview: "https://upload.wikimedia.org/wikipedia/commons/thumb/5/51/IBM_logo.svg/800px-IBM_logo.svg.png",\n        },\n        {\n            title: "Dell",\n            preview: "https://upload.wikimedia.org/wikipedia/commons/thumb/4/48/Dell_Logo.svg/300px-Dell_Logo.svg.png",\n        },\n    ];\n\n    public onItemDropped(event: CdkDragDrop<IListItem[]>) {\n        moveItemInArray(this.listItems, event.previousIndex, event.currentIndex);\n    }\n}\n'},78456:function(e,n,d){"use strict";d.r(n),n.default='<div cdkDropListGroup>\n    <div class="draggable-container pr-2" id="nui-demo-drop-list-1">\n        <h3>Companies</h3>\n        <div cdkDropList class="dragzone draggable-list"\n             [cdkDropListData]="companies"\n             [cdkDropListSortingDisabled]="true"\n             [cdkDropListEnterPredicate]="sourceAcceptsItem"\n             (cdkDropListDropped)="onItemDropped($event)">\n            <div class="items-container">\n                <div *ngFor="let company of companies" class="draggable-item"\n                     cdkDrag\n                     cdkDragPreviewClass="nui-dnd-preview"\n                     [cdkDragData]="company">\n                    <div class="draggable-placeholder" *cdkDragPlaceholder></div>\n                    {{company.name}}\n                </div>\n            </div>\n        </div>\n    </div>\n\n    <div class="draggable-container pl-2" id="nui-demo-drop-list-2">\n        <h3>Industries</h3>\n        <div #dropTarget=nuiDndDropTarget id="cdk-drop-list" *ngFor="let industry of industries" class="dropzone draggable-list"\n             cdkDropList\n             [cdkDropListSortingDisabled]="true"\n             [cdkDropListData]="industry.companies"\n             nuiDndDropTarget\n             [canBeDropped]="destinationAcceptsItem"\n             (cdkDropListDropped)="onItemDropped($event)">\n            <div class="title" *ngIf="dropTarget.isDropZoneActive ||  !industry.companies?.length">\n                {{industry.name}}\n                \x3c!--\n                ShowDropZone: {{ dropTarget.showDropZone$ | async}}\n                CanDrop: {{ dropTarget.canDrop$ | async}}\n                IsDropZoneActive: {{dropTarget.isDropZoneActive}}\n                --\x3e\n            </div>\n            <div class="items-container">\n                <div *ngFor="let company of industry.companies" class="draggable-item"\n                     cdkDrag\n                     cdkDragPreviewClass="dropzone-preview"\n                     [cdkDragData]="company"\n                     [class.invisible]="dropTarget.isDropZoneActive">\n                    {{company.name}}\n                </div>\n            </div>\n            <div *ngIf="dropTarget.isDropZoneActive" class="centered-overlay">\n                \x3c!-- highlight item placeholder--\x3e\n                <div *ngIf="(dropTarget.showDropZone$ | async) !== true">\n                    <nui-icon icon="plus" iconSize="medium" cssClass="drop-circle-permanent"></nui-icon>\n                </div>\n\n                \x3c!-- accepted item placeholder--\x3e\n                <div *ngIf="(dropTarget.canLastDragItemBeDropped$ | async)">\n                    <nui-icon icon="plus" iconSize="medium" cssClass="drop-circle-allowed"></nui-icon>\n                </div>\n\n                \x3c!-- reject item placeholder--\x3e\n                <div *ngIf="(dropTarget.canLastDragItemBeDropped$ | async) === false">\n                    <div class="centered-overlay text-nowrap text-special" i18n>Not allowed</div>\n                    <nui-icon icon="close" iconSize="medium" cssClass="drop-circle-not-allowed"></nui-icon>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>\n'},11158:function(e,n,d){"use strict";d.r(n),n.default='import {CdkDragDrop, copyArrayItem, moveItemInArray, transferArrayItem} from "@angular/cdk/drag-drop";\nimport {ChangeDetectionStrategy, Component} from "@angular/core";\n\nclass Company {\n    name: string;\n    industries?: Industry[];\n}\n\nconst COMPANY_ADOBE: string = "Adobe";\nconst COMPANY_IBM: string = "IBM";\nconst COMPANY_DELL: string = "Dell";\n\nclass Industry {\n    name: string;\n    companies?: Company[];\n}\n\nconst INDUSTRY_HW: string = "Hardware";\nconst INDUSTRY_SW: string = "Software";\n\nconst availableCompanies: Company[] = [\n    {name: COMPANY_ADOBE, industries: [{name: INDUSTRY_SW}]},\n    {name: COMPANY_IBM, industries: [{name: INDUSTRY_SW}, {name: INDUSTRY_HW}]},\n    {name: COMPANY_DELL, industries: [{name: INDUSTRY_HW}, {name: INDUSTRY_SW}]},\n];\n\n@Component({\n    selector: "dnd-dropzone-visual",\n    templateUrl: "./dnd-dropzone-visual-example.component.html",\n    styleUrls: ["./dnd-dropzone-visual-example.component.less"],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class DndDropzoneVisualExampleComponent {\n    public companies: Company[] = availableCompanies;\n\n    public industries: Industry[] = [{name: INDUSTRY_HW, companies: [{name: COMPANY_IBM}]}, {name: INDUSTRY_SW, companies: []}];\n\n    // Note: Prevent user from putting back already displaced items\n    public sourceAcceptsItem(): boolean {\n        return false;\n    }\n\n    public destinationAcceptsItem(company: Company): boolean {\n        return company.name === "Adobe" || company.name === "Dell";\n    }\n\n    public onItemDropped(event: CdkDragDrop<Company[]>) {\n        if (!this.destinationAcceptsItem(event.item.data)) {\n            return;\n        }\n        if (event.previousContainer === event.container) {\n            moveItemInArray(event.container.data, event.previousIndex, event.currentIndex);\n        } else {\n            if (event.previousContainer.element.nativeElement.classList.contains("dragzone")) {\n                copyArrayItem(event.previousContainer.data, event.container.data, event.previousIndex, event.currentIndex);\n            } else {\n                transferArrayItem(event.previousContainer.data, event.container.data, event.previousIndex, event.currentIndex);\n            }\n\n        }\n    }\n}\n'},49507:function(e,n,d){"use strict";d.r(n),n.default='<div cdkDropListGroup>\n    \x3c!-- source from where the items will be dragged --\x3e\n    <div class="draggable-container pr-2" id="nui-demo-drop-list-1">\n        <h3>Source</h3>\n        <div cdkDropList class="dragzone draggable-list"\n             [cdkDropListData]="sourceItems"\n             [cdkDropListSortingDisabled]="true"\n             [cdkDropListEnterPredicate]="sourceAcceptsItem">\n\n            \x3c!-- display list of items --\x3e\n            <div class="items-container">\n                <div *ngFor="let item of sourceItems" class="draggable-item"\n                     cdkDrag [cdkDragData]="item"\n                     cdkDragPreviewClass="nui-dnd-preview">\n                    {{item}}\n                </div>\n            </div>\n        </div>\n    </div>\n\n    \x3c!-- destination dropzone where the items will be dropped --\x3e\n    <div class="draggable-container pl-2"  id="nui-demo-drop-list-2">\n        <h3>Destination</h3>\n        <div cdkDropList class="dropzone draggable-list"\n             nuiDndDropTarget\n             #destinationTarget=nuiDndDropTarget\n             [cdkDropListData]="destinationItems"\n             [canBeDropped]="destinationAcceptsItem"\n             (cdkDropListDropped)="onItemDropped($event)">\n\n            \x3c!-- display list of items --\x3e\n            <div class="items-container">\n                \x3c!-- make items invisible while a drag operation is in progress and dropzone is active--\x3e\n                <div *ngFor="let item of destinationItems" class="item"\n                     [class.invisible]="destinationTarget.isDropZoneActive">\n                    {{item}}\n                </div>\n            </div>\n\n            \x3c!-- highlight dropzone area --\x3e\n            <ng-container *ngTemplateOutlet="highlightDropzoneTemplate; context: {target: destinationTarget}"></ng-container>\n        </div>\n    </div>\n</div>\n\n\x3c!-- template to highlight a dropzone and inform user about the drag operation outcome (accept item or not) --\x3e\n<ng-template #highlightDropzoneTemplate let-target="target">\n    <div *ngIf="target.isDropZoneActive" class="centered-overlay text-center">\n\n        \x3c!-- default state, highlight item placeholder when dragging starts --\x3e\n        <div *ngIf="(target.showDropZone$ | async) !== true">\n            \x3c!-- This is a drop zone area where you can drag your items --\x3e\n            <nui-icon icon="plus" iconSize="medium" cssClass="drop-circle-permanent"></nui-icon>\n        </div>\n\n        \x3c!-- accepted item placeholder --\x3e\n        <div *ngIf="(target.canLastDragItemBeDropped$ | async)">\n            \x3c!-- The item currently dragged is accepted in this dropzone --\x3e\n            <nui-icon icon="plus" iconSize="medium" cssClass="drop-circle-allowed"></nui-icon>\n        </div>\n\n        \x3c!-- reject item placeholder--\x3e\n        <div *ngIf="(target.canLastDragItemBeDropped$ | async) === false">\n            \x3c!-- The item currently dragged is NOT accepted in this dropzone --\x3e\n            <div class="centered-overlay text-nowrap text-special" i18n>Not allowed</div>\n            <nui-icon icon="close" iconSize="medium" cssClass="drop-circle-not-allowed"></nui-icon>\n        </div>\n    </div>\n</ng-template>\n'},49993:function(e,n,d){"use strict";d.r(n),n.default='import {CdkDragDrop, CdkDropList, copyArrayItem} from "@angular/cdk/drag-drop";\nimport {ChangeDetectionStrategy, Component} from "@angular/core";\n\n@Component({\n    selector: "dnd-dropzone",\n    templateUrl: "./dnd-dropzone.example.component.html",\n    styleUrls: ["./dnd-dropzone.example.component.less"],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class DndDropzoneExampleComponent {\n    public sourceItems: string[] = ["Adobe", "IBM" ];\n    public destinationItems: string[] = ["Dell"];\n\n    // prevent user from putting back already displaced items\n    public sourceAcceptsItem(item: string, dropList?: CdkDropList): boolean {\n        return false;\n    }\n\n    public destinationAcceptsItem(item: string, dropList?: CdkDropList): boolean {\n        return item === "Adobe" || item === "Dell";\n    }\n\n    public onItemDropped(event: CdkDragDrop<string[]>) {\n        if (!this.destinationAcceptsItem(event.item.data)) {\n            return;\n        }\n\n        copyArrayItem(event.previousContainer.data, event.container.data, event.previousIndex, event.currentIndex);\n    }\n}\n'},45539:function(e,n,d){"use strict";d.r(n),n.default='import { DragDropModule } from "@angular/cdk/drag-drop";\nimport { CdkTreeModule } from "@angular/cdk/tree";\nimport { NgModule } from "@angular/core";\nimport { RouterModule, Routes } from "@angular/router";\nimport { DEMO_PATH_TOKEN, NuiDndModule, NuiDocsModule, NuiMessageModule } from "@nova-ui/bits";\n\nimport { DndAxisConstraintsExampleComponent } from "./dnd-axis-constraints/dnd-axis-constraints.example.component";\nimport { DndBasicExampleComponent } from "./dnd-basic/dnd-basic.example.component";\nimport { DndCustomHandleExampleComponent } from "./dnd-custom-handle/dnd-custom-handle.example.component";\nimport { DndDocsExampleComponent } from "./dnd-docs/dnd-docs.example.component";\nimport { DndDragDisabledExampleComponent } from "./dnd-drag-disabled/dnd-drag-disabled-example.component";\nimport { DndDragPlaceholderExampleComponent } from "./dnd-drag-placeholder/dnd-drag-placeholder-example.component";\nimport { DndDragPreviewExampleComponent } from "./dnd-drag-preview/dnd-drag-preview.example.component";\nimport { DndDropzoneVisualExampleComponent } from "./dnd-dropzone-visual/dnd-dropzone-visual-example.component";\nimport { DndDropzoneExampleComponent } from "./dnd-dropzone/dnd-dropzone.example.component";\n\nconst routes: Routes = [\n    {\n        path: "",\n        children: [\n            {\n                path: "",\n                component: DndDocsExampleComponent,\n            },\n            {\n                path: "dropzone",\n                component: DndDropzoneExampleComponent,\n            },\n            {\n                path: "dropzone-visual",\n                component: DndDropzoneExampleComponent,\n            },\n        ],\n    },\n];\n\n@NgModule({\n    declarations: [\n        DndBasicExampleComponent,\n        DndCustomHandleExampleComponent,\n        DndDragDisabledExampleComponent,\n        DndDragPlaceholderExampleComponent,\n        DndDragPreviewExampleComponent,\n        DndDocsExampleComponent,\n        DndDropzoneExampleComponent,\n        DndDropzoneVisualExampleComponent,\n        DndAxisConstraintsExampleComponent,\n    ],\n    imports: [\n        NuiDocsModule,\n        NuiDndModule,\n        NuiMessageModule,\n        RouterModule.forChild(routes),\n        DragDropModule,\n        CdkTreeModule,\n    ],\n    providers: [\n        {\n            provide: DEMO_PATH_TOKEN,\n            useFactory: () => (<any>require).context(`!!raw-loader!./`, true, /.*\\.(ts|html|less)$/),\n        },\n    ],\n})\nexport class DndModule {\n}\n'},9934:function(e){"use strict";e.exports='export default "@import (reference) \\"nui-framework-variables\\";\\n@import (reference) \\"mixins\\";\\n\\n@box-width: 150px;\\n@box-height: 100px;\\n\\n.draggable-item {\\n    width: @box-width;\\n    height: @box-height;\\n    padding: @nui-space-md;\\n    box-sizing: border-box;\\n    border: solid 1px @gray;\\n    display: inline-flex;\\n    justify-content: center;\\n    align-items: center;\\n    text-align: center;\\n    position: relative;\\n    z-index: 1;\\n    .transition(box-shadow 0.4s);\\n\\n    &:hover, &.cdk-drag-dragging {\\n        .nui-dnd-hover-state();\\n        .nui-dnd-raised-state();\\n        cursor: move;\\n        padding: @nui-space-md;\\n    }\\n}\\n";'},77348:function(e){"use strict";e.exports='export default "@import (reference) \\"nui-framework-variables\\";\\n@import (reference) \\"mixins\\";\\n\\n@box-width: 150px;\\n@box-height: 100px;\\n\\n.draggable-item {\\n    width: @box-width;\\n    height: @box-height;\\n    padding: @nui-space-md;\\n    box-sizing: border-box;\\n    border: solid 1px @gray;\\n    display: flex;\\n    justify-content: center;\\n    align-items: center;\\n    text-align: center;\\n    position: relative;\\n    z-index: 1;\\n    .transition(box-shadow 0.4s);\\n\\n    &:hover {\\n        .nui-dnd-hover-state();\\n        .nui-dnd-raised-state();\\n        cursor: move;\\n        padding: @nui-space-md;\\n    }\\n}\\n";'},45183:function(e){"use strict";e.exports='export default "@import (reference) \\"nui-framework-variables\\";\\n@import (reference) \\"mixins\\";\\n\\n@box-width: 300px;\\n@box-height: 50px;\\n\\n.draggable-container {\\n    width: @box-width;\\n    border-top: solid @nui-line-default @nui-color-line-default;\\n}\\n\\n// generic item styling\\n.item {\\n    height: @box-height;\\n    padding: @nui-space-md;\\n    text-align: center;\\n    box-sizing: border-box;\\n    border: solid @nui-line-default @nui-color-line-default;\\n    border-top: none;\\n    position: relative;\\n}\\n\\n// drag & drop styling\\n.draggable-item:extend(.item) {\\n    background: @nui-color-bg-content;\\n    .transition(box-shadow 0.4s);\\n\\n    // for all ENABLED items we apply the hover style\\n    &:not(.cdk-drag-disabled) {\\n        &:hover {\\n            .nui-dnd-hover-state();\\n        }\\n\\n        // we apply the raised state only for items without handle\\n        &:not(.with-handle):hover {\\n            cursor: move;\\n            .nui-dnd-raised-state();\\n        }\\n    }\\n\\n    &.cdk-drag-disabled {\\n        color: @nui-color-disabled;\\n    }\\n}\\n\\n.drag-handle {\\n    color: #ccc;\\n    cursor: move;\\n    display: inline;\\n}\\n\\n.dnd-drag-preview:extend(.item, .nui-dnd-preview) {}\\n";'},1660:function(e){"use strict";e.exports='export default "@import (reference) \\"nui-framework-variables\\";\\n@import (reference) \\"mixins\\";\\n\\n@box-width: 150px;\\n@box-height: 50px;\\n\\n.draggable-container {\\n    width: @box-width;\\n    border-top: solid @nui-line-default @nui-color-line-default;\\n}\\n\\n.item {\\n    padding: @nui-space-md;\\n    text-align: center;\\n}\\n\\n.draggable-item:extend(.item) {\\n    height: @box-height;\\n    border: @dnd-item-border-width @nui-color-line-default solid;\\n    border-top: none;\\n\\n    .transition(box-shadow 0.4s);\\n\\n    // apply style only for items that are enabled\\n    &:hover:not(.cdk-drag-disabled) {\\n        cursor: move;\\n        .nui-dnd-hover-state();\\n        .nui-dnd-raised-state();\\n    }\\n\\n    &.cdk-drag-disabled {\\n        color: @nui-color-disabled;\\n    }\\n}\\n\\n.dnd-drag-preview:extend(.item, .nui-dnd-preview) {}\\n\\n";'},35303:function(e){"use strict";e.exports='export default "@import (reference) \\"nui-framework-variables\\";\\n@import (reference) \\"mixins\\";\\n\\n@box-width: 150px;\\n@box-height: 50px;\\n@placeholder-border-width: @nui-line-default;\\n\\n.draggable-container {\\n    width: @box-width;\\n    border: solid @nui-line-default @nui-color-line-default;\\n\\n    :last-child {\\n        border: none;\\n    }\\n}\\n\\n// generic item styling\\n.item {\\n    padding: @nui-space-md;\\n    text-align: center;\\n    box-sizing: border-box;\\n    border-bottom: solid @nui-line-default @nui-color-line-default;\\n}\\n\\n// drag & drop styling\\n.draggable-item:extend(.item), .draggable-placeholder:extend(.item) {\\n    height: @box-height;\\n    .transition(box-shadow 0.4s);\\n\\n    &:hover {\\n        cursor: move;\\n        .nui-dnd-hover-state();\\n        .nui-dnd-raised-state();\\n    }\\n}\\n\\n.draggable-placeholder {\\n    border: dashed @placeholder-border-width @nui-color-line-default;\\n    background: @nui-color-bg-content-hover;\\n    transition: transform 250ms cubic-bezier(0, 0, 0.2, 1);\\n}\\n\\n.dnd-drag-preview:extend(.item, .nui-dnd-preview) {}\\n";'},23944:function(e){"use strict";e.exports='export default "@import (reference) \\"nui-framework-variables\\";\\n@import (reference) \\"mixins\\";\\n\\n@box-width: 150px;\\n@box-height: 50px;\\n\\n.draggable-container {\\n    width: @box-width;\\n    border-top: solid @nui-line-default @nui-color-line-default;\\n}\\n\\n.item {\\n    padding: @nui-space-md;\\n    text-align: center;\\n}\\n\\n.draggable-item:extend(.item) {\\n    height: @box-height;\\n    border: solid @nui-line-default @nui-color-line-default;\\n    border-top: none;\\n    .transition(box-shadow 0.4s);\\n\\n    &:hover {\\n        cursor: move;\\n        .nui-dnd-hover-state();\\n        .nui-dnd-raised-state();\\n    }\\n}\\n\\n.dnd-drag-preview:extend(.item, .nui-dnd-preview) {}\\n";'},4335:function(e){"use strict";e.exports='export default "@import (reference) \\"nui-framework-variables\\";\\n@import (reference) \\"mixins\\";\\n\\n@min-height: 50px;\\n\\n.draggable-container {\\n    width: 50%;\\n    float: left;\\n    min-height: (@min-height * 10);\\n\\n    .draggable-list {\\n        border: solid @dnd-zone-border-width transparent;\\n        position: relative;\\n        padding: @nui-space-sm;\\n        transition: all .3s ease-in-out;\\n\\n        .title {\\n            position: absolute;\\n        }\\n        &.cdk-drop-list-dragging, &.cdk-drop-list-receiving {\\n            .draggable-item:hover {\\n                box-shadow: none;\\n                background-color: initial;\\n            }\\n        }\\n    }\\n}\\n\\n.dragzone {\\n    .cdk-drop-list-dragging .draggable-item:not(.cdk-drag-placeholder) {\\n        transition: transform 250ms cubic-bezier(0, 0, 0.2, 1);\\n    }\\n}\\n\\n.dropzone {\\n    margin: 10px 0;\\n    min-height: (2 * (@min-height + @nui-space-md + @dnd-zone-border-width));\\n\\n    .cdk-drag-placeholder, .draggable-placeholder {\\n        visibility: hidden;\\n        min-height: @min-height - @dnd-zone-border-width;\\n    }\\n}\\n\\n.draggable-item, .draggable-placeholder, .dropzone-preview:extend(.nui-dnd-preview) {\\n    min-height: @min-height + @dnd-item-border-width;\\n    padding: @nui-space-md;\\n    box-sizing: border-box;\\n    text-align: center;\\n    border: @dnd-item-border-width @nui-color-line-default solid;\\n    .transition(box-shadow 0.4s);\\n}\\n\\n.draggable-item {\\n    border-bottom-color: transparent;\\n\\n    &:hover:not(.cdk-drag-placeholder) {\\n        .nui-dnd-hover-state();\\n        .nui-dnd-raised-state();\\n        cursor: move;\\n        padding: @nui-space-md;\\n    }\\n}\\n&.items-container :last-child { border-bottom-color: @nui-color-line-default;}\\n\\n.draggable-placeholder {\\n    min-height: @min-height + @dnd-zone-border-width - 1;\\n    border-width: @dnd-zone-border-width;\\n    border-style: dashed;\\n    background: @nui-color-bg-content-hover;\\n    transition: transform 250ms cubic-bezier(0, 0, 0.2, 1);\\n}\\n\\n\\n.cdk-drag-animating {\\n    transition: transform 250ms cubic-bezier(0, 0, 0.2, 1);\\n}\\n\\n.centered-overlay .text-special {\\n    top: -25px;\\n}\\n";'},73595:function(e){"use strict";e.exports='export default "@import (reference) \\"nui-framework-variables\\";\\n@import (reference) \\"mixins\\";\\n\\n@min-height: 50px;\\n\\n.draggable-container {\\n    width: 50%;\\n    float: left;\\n    min-height: (@min-height * 5);\\n\\n    .draggable-list {\\n        border: solid @dnd-zone-border-width transparent;\\n        position: relative;\\n        padding: @nui-space-sm;\\n        transition: all .3s ease-in-out;\\n\\n        .title {\\n            position: absolute;\\n        }\\n        &.cdk-drop-list-dragging, &.cdk-drop-list-receiving {\\n            .draggable-item:hover {\\n                box-shadow: none;\\n                background-color: initial;\\n            }\\n        }\\n    }\\n}\\n\\n.dragzone {\\n    .cdk-drop-list-dragging .draggable-item:not(.cdk-drag-placeholder) {\\n        transition: transform 250ms cubic-bezier(0, 0, 0.2, 1);\\n    }\\n}\\n\\n.dropzone {\\n    margin: 10px 0;\\n    min-height: (2 * (@min-height + @nui-space-md + @dnd-zone-border-width));\\n\\n    .cdk-drag-placeholder, .draggable-placeholder {\\n        visibility: hidden;\\n        min-height: @min-height - @dnd-zone-border-width;\\n    }\\n}\\n\\n.item, .draggable-item, .draggable-placeholder {\\n    min-height: @min-height + @dnd-item-border-width;\\n    padding: @nui-space-md;\\n    box-sizing: border-box;\\n    text-align: center;\\n    border: @dnd-item-border-width @nui-color-line-default solid;\\n    .transition(box-shadow 0.4s);\\n}\\n\\n.item, .draggable-item {\\n    border-bottom-color: transparent;\\n\\n    &.cdk-drag:hover:not(.cdk-drag-placeholder) {\\n        .nui-dnd-hover-state();\\n        .nui-dnd-raised-state();\\n        cursor: move;\\n        padding: @nui-space-md;\\n    }\\n}\\n&.items-container :last-child { border-bottom-color: @nui-color-line-default;}\\n\\n.centered-overlay .text-special {\\n    top: -25px;\\n}\\n\\n// This class is added to a cdkDrag element when the user has stopped dragging.\\n// CDK will animate the element from its drop position to the final position inside the cdkDropList container\\n.cdk-drag-animating {\\n    transition: transform 250ms cubic-bezier(0, 0, 0.2, 1);\\n}\\n\\n";'}}]);