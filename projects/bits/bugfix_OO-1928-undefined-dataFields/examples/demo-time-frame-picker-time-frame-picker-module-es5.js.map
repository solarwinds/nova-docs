{"version":3,"sources":["webpack:///demo/src/components/demo/time-frame-picker/index.ts?fede","webpack:///demo/src/components/demo/time-frame-picker/time-frame-picker-basic/time-frame-picker-basic.example.component.ts?de7a","webpack:///demo/src/components/demo/time-frame-picker/time-frame-picker-basic/time-frame-picker-basic.example.component.html?e100","webpack:///node_modules/raw-loader/dist/cjs.js .*\\.(ts|html|less)$?d5d0","webpack:///demo/src/components/demo/time-frame-picker/time-frame-picker-docs/time-frame-picker-docs.example.component.html?f02f","webpack:///demo/src/components/demo/time-frame-picker/time-frame-picker-multiple-custom-pickers/time-frame-picker-multiple-custom-pickers.example.component.ts","webpack:///demo/src/components/demo/time-frame-picker/time-frame-picker-multiple-custom-pickers/time-frame-picker-multiple-custom-pickers.example.component.html","webpack:///demo/src/components/demo/time-frame-picker/time-frame-picker.module.ts?108b","webpack:///demo/src/components/demo/time-frame-picker/time-frame-picker-multiple-custom-pickers/time-frame-picker-multiple-custom-pickers.example.component.html?112c","webpack:///demo/src/components/demo/time-frame-picker/quick-picker-basic/quick-picker-basic.example.component.ts","webpack:///demo/src/components/demo/time-frame-picker/quick-picker-basic/quick-picker-basic.example.component.html","webpack:///demo/src/components/demo/time-frame-picker/time-frame-picker-visual-test/time-frame-picker-visual-test.component.ts?1a2b","webpack:///demo/src/components/demo/time-frame-picker/time-frame-picker-inline/time-frame-picker-inline.example.component.ts?23f9","webpack:///demo/src/components/demo/time-frame-picker/time-frame-picker-test/time-frame-picker-test.example.component.html?211c","webpack:///demo/src/components/demo/time-frame-picker/time-frame-picker-custom/time-frame-picker-custom.example.component.ts","webpack:///demo/src/components/demo/time-frame-picker/time-frame-picker-custom/time-frame-picker-custom.example.component.html","webpack:///demo/src/components/demo/time-frame-picker/time-frame-picker-test/time-frame-picker-test.example.component.ts?2ad9","webpack:///demo/src/components/demo/time-frame-picker/time-frame-picker-custom/time-frame-picker-custom.example.component.html?380c","webpack:///demo/src/components/demo/time-frame-picker/time-frame-picker-docs/time-frame-picker-docs.example.component.ts","webpack:///demo/src/components/demo/time-frame-picker/time-frame-picker-docs/time-frame-picker-docs.example.component.html","webpack:///demo/src/components/demo/time-frame-picker/time-frame-picker-date/time-frame-picker-date.example.component.ts","webpack:///demo/src/components/demo/time-frame-picker/time-frame-picker-date/time-frame-picker-date.example.component.html","webpack:///demo/src/components/demo/time-frame-picker/quick-picker-basic/quick-picker-basic.example.component.ts?4cd6","webpack:///demo/src/components/demo/time-frame-picker/time-frame-picker-visual-test/time-frame-picker-visual-test.component.ts","webpack:///demo/src/components/demo/time-frame-picker/time-frame-picker-visual-test/time-frame-picker-visual-test.component.html","webpack:///demo/src/components/demo/time-frame-picker/time-frame-picker-basic/time-frame-picker-basic.example.component.ts","webpack:///demo/src/components/demo/time-frame-picker/time-frame-picker-basic/time-frame-picker-basic.example.component.html","webpack:///demo/src/components/demo/time-frame-picker/time-frame-picker-docs/time-frame-picker-docs.example.component.ts?5b2b","webpack:///demo/src/components/demo/time-frame-picker/time-frame-picker-date/time-frame-picker-date.example.component.ts?6085","webpack:///demo/src/components/demo/time-frame-picker/time-frame-picker-inline/time-frame-picker-inline.example.component.ts","webpack:///demo/src/components/demo/time-frame-picker/time-frame-picker-inline/time-frame-picker-inline.example.component.html","webpack:///demo/src/components/demo/time-frame-picker/time-frame-picker-date/time-frame-picker-date.example.component.html?6acf","webpack:///demo/src/components/demo/time-frame-picker/index.ts","webpack:///demo/src/components/demo/time-frame-picker/time-frame-picker-visual-test/time-frame-picker-visual-test.component.html?730e","webpack:///demo/src/components/demo/time-frame-picker/time-frame-picker-inline/time-frame-picker-inline.example.component.html?757a","webpack:///demo/src/components/demo/time-frame-picker/quick-picker-basic/quick-picker-basic.example.component.html?7b2f","webpack:///demo/src/components/demo/time-frame-picker/time-frame-picker-multiple-custom-pickers/time-frame-picker-multiple-custom-pickers.example.component.ts?8e55","webpack:///demo/src/components/demo/time-frame-picker/time-frame-picker-custom/time-frame-picker-custom.example.component.ts?aefa","webpack:///demo/src/components/demo/time-frame-picker/time-frame-picker-test/time-frame-picker-test.example.component.ts","webpack:///demo/src/components/demo/time-frame-picker/time-frame-picker-test/time-frame-picker-test.example.component.html","webpack:///demo/src/components/demo/time-frame-picker/time-frame-picker.module.ts"],"names":["map","webpackContext","req","id","webpackContextResolve","__webpack_require__","o","e","Error","code","keys","webpackContextKeys","Object","resolve","module","exports","TimeFramePickerMultipleCustomPickersExampleComponent","cdRef","pickers","presets","name","$localize","startDatetimePattern","hours","endDatetimePattern","days","selectedPresetKey","year","showFooter","closePopoverSubject","openPopoverSubject","value","index","picker","tf","timeFrameDatesValid","timeframeService","areTimeFrameDatesValid","timeFrameDatesEqual","isEqual","acceptedTimeframe","selectedPresetId","tfScopers","forEach","scoper","i","currentPresets","getTimeframeByPresetId","detectChanges","next","presetKey","TimeframeServiceScoperExampleComponent","QuickPickerBasicExampleComponent","presetKeysOrder","selectedValue","num","indexOf","toString","undefined","handlePresetSelection","handleCustomSelection","TimeFramePickerCustomExampleComponent","TimeFramePickerDocsExampleComponent","TimeFramePickerDateExampleComponent","getDefaultPresets","selectedDate","getDateFromPreset","confirmPopover","isSame","getPresetFromDate","today","pattern","yesterday","subtract","ihorsBirthday","random","Date","Math","floor","preset","date","key","TimeFramePickerVisualTestComponent","selectedPresetKeyDatePicker","presetsDatePicker","confirmPopoverDatePicker","dimasBirthday","TimeFramePickerBasicExampleComponent","TimeFramePickerInlineExampleComponent","startDatetime","endDatetime","minDate","maxDate","updateTf","TimeFramePickerTestExampleComponent","routes","path","component","data","ga","showThemeSwitcher","TimeFramePickerModule","provide","useFactory","forChild"],"mappings":"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","file":"demo-time-frame-picker-time-frame-picker-module-es5.js","sourcesContent":["export default \"export * from \\\"./time-frame-picker-docs/time-frame-picker-docs.example.component\\\";\\nexport * from \\\"./time-frame-picker-basic/time-frame-picker-basic.example.component\\\";\\nexport * from \\\"./time-frame-picker-custom/time-frame-picker-custom.example.component\\\";\\nexport * from \\\"./quick-picker-basic/quick-picker-basic.example.component\\\";\\nexport * from \\\"./time-frame-picker-inline/time-frame-picker-inline.example.component\\\";\\nexport * from \\\"./time-frame-picker-date/time-frame-picker-date.example.component\\\";\\nexport * from \\\"./time-frame-picker-test/time-frame-picker-test.example.component\\\";\\nexport * from \\\"./time-frame-picker-visual-test/time-frame-picker-visual-test.component\\\";\\nexport * from \\\"./time-frame-picker-multiple-custom-pickers/time-frame-picker-multiple-custom-pickers.example.component\\\";\\n\";","export default \"import { Component } from \\\"@angular/core\\\";\\nimport { ITimeframe, ITimeFramePresetDictionary, TimeframeService } from \\\"@nova-ui/bits\\\";\\nimport { Subject } from \\\"rxjs\\\";\\n\\n@Component({\\n    selector: \\\"nui-time-frame-picker-basic-example\\\",\\n    templateUrl: \\\"./time-frame-picker-basic.example.component.html\\\",\\n})\\n\\nexport class TimeFramePickerBasicExampleComponent {\\n    public presets: ITimeFramePresetDictionary;\\n    public selectedPresetKey?: string = \\\"lastHour\\\";\\n    public acceptedTimeframe: ITimeframe;\\n    public tf: ITimeframe;\\n\\n    public showFooter: boolean = false;\\n\\n    constructor(public timeframeService: TimeframeService) {\\n        this.presets = timeframeService.getDefaultPresets();\\n        this.acceptedTimeframe = this.timeframeService.getTimeframeByPresetId(this.selectedPresetKey);\\n        this.tf = this.acceptedTimeframe;\\n    }\\n\\n    public closePopoverSubject = new Subject();\\n    public openPopoverSubject = new Subject();\\n\\n    public updateTf(value: ITimeframe) {\\n        this.tf = value;\\n\\n        const timeFrameDatesValid = () => this.timeframeService.areTimeFrameDatesValid(value);\\n        const timeFrameDatesEqual = () => this.timeframeService.isEqual(this.tf, this.acceptedTimeframe);\\n        if (timeFrameDatesValid() && !timeFrameDatesEqual()) { this.showFooter = true; }\\n\\n        this.selectedPresetKey = this.tf.selectedPresetId;\\n    }\\n\\n    public confirmPopover() {\\n        this.showFooter = false;\\n        this.closePopoverSubject.next();\\n        this.acceptedTimeframe = this.tf;\\n    }\\n    public cancelPopover() {\\n        this.showFooter = false;\\n        this.closePopoverSubject.next();\\n    }\\n\\n    public handlePresetSelection(presetKey: string) {\\n        this.selectedPresetKey = presetKey;\\n        this.tf = this.timeframeService.getTimeframeByPresetId(presetKey);\\n        this.acceptedTimeframe = this.tf;\\n        this.closePopoverSubject.next();\\n    }\\n}\\n\";","export default \"<nui-popover trigger='click'\\n             [template]=\\\"popoverTimeFramePicker\\\"\\n             [hasPadding]=\\\"false\\\"\\n             [closePopover]=\\\"closePopoverSubject\\\"\\n             [modal]=\\\"true\\\">\\n    <span class=\\\"nui-text-link\\\" style=\\\"cursor: pointer;\\\">{{ acceptedTimeframe | timeFrame }}</span>\\n</nui-popover>\\n\\n<ng-template #popoverTimeFramePicker>\\n    <div>\\n        <nui-quick-picker [presets]=\\\"presets\\\"\\n                          [selectedPreset]=\\\"acceptedTimeframe.selectedPresetId\\\"\\n                          (presetSelected)=\\\"handlePresetSelection($event)\\\"\\n                          pickerTitle=\\\"Custom Range\\\"\\n                          i18n-pickerTitle>\\n            <nui-time-frame-picker [startModel]=\\\"acceptedTimeframe\\\"\\n                                          (changed)=\\\"updateTf($event)\\\">\\n            </nui-time-frame-picker>\\n        </nui-quick-picker>\\n    </div>\\n    <nui-dialog-footer *ngIf=\\\"showFooter\\\">\\n        <button nui-button\\n                type=\\\"button\\\"\\n                displayStyle=\\\"action\\\"\\n                class=\\\"pr-3 nui-time-frame-picker__cancel\\\"\\n                (click)=\\\"cancelPopover()\\\"\\n                i18n>\\n            Cancel\\n        </button>\\n        <button nui-button\\n                type=\\\"button\\\"\\n                displayStyle=\\\"primary\\\"\\n                class=\\\"nui-time-frame-picker__use\\\"\\n                (click)=\\\"confirmPopover()\\\"\\n                i18n>\\n            Use\\n        </button>\\n    </nui-dialog-footer>\\n</ng-template>\\n\";","var map = {\n\t\"./index.ts\": \"/t6y\",\n\t\"./quick-picker-basic/quick-picker-basic.example.component.html\": \"ey9Y\",\n\t\"./quick-picker-basic/quick-picker-basic.example.component.ts\": \"TNbh\",\n\t\"./time-frame-picker-basic/time-frame-picker-basic.example.component.html\": \"4QCL\",\n\t\"./time-frame-picker-basic/time-frame-picker-basic.example.component.ts\": \"3nrA\",\n\t\"./time-frame-picker-custom/time-frame-picker-custom.example.component.html\": \"OAyX\",\n\t\"./time-frame-picker-custom/time-frame-picker-custom.example.component.ts\": \"rvpb\",\n\t\"./time-frame-picker-date/time-frame-picker-date.example.component.html\": \"as+W\",\n\t\"./time-frame-picker-date/time-frame-picker-date.example.component.ts\": \"YIVX\",\n\t\"./time-frame-picker-docs/time-frame-picker-docs.example.component.html\": \"8C/+\",\n\t\"./time-frame-picker-docs/time-frame-picker-docs.example.component.ts\": \"WyuH\",\n\t\"./time-frame-picker-inline/time-frame-picker-inline.example.component.html\": \"dXpY\",\n\t\"./time-frame-picker-inline/time-frame-picker-inline.example.component.ts\": \"I/lz\",\n\t\"./time-frame-picker-multiple-custom-pickers/time-frame-picker-multiple-custom-pickers.example.component.html\": \"ESxD\",\n\t\"./time-frame-picker-multiple-custom-pickers/time-frame-picker-multiple-custom-pickers.example.component.ts\": \"jlVH\",\n\t\"./time-frame-picker-test/time-frame-picker-test.example.component.html\": \"IRxw\",\n\t\"./time-frame-picker-test/time-frame-picker-test.example.component.ts\": \"Ktlp\",\n\t\"./time-frame-picker-visual-test/time-frame-picker-visual-test.component.html\": \"cw5P\",\n\t\"./time-frame-picker-visual-test/time-frame-picker-visual-test.component.ts\": \"Gis4\",\n\t\"./time-frame-picker.module.ts\": \"EIs/\"\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = \"5/Sd\";","export default \"<h2>Required Modules</h2>\\n<ul>\\n    <li>\\n        <code>NuiTimeFramePickerModule</code>\\n    </li>\\n</ul>\\n\\n<h2>Basic Usage</h2>\\n\\n<p>\\n    The <code>&lt;nui-time-frame-picker&gt;</code> component allows the user to select a time range. Its model is\\n    an <code><a href=\\\"../interfaces/ITimeframe.html\\\" target=\\\"_blank\\\">ITimeframe</a></code> which can be set using the\\n    <code>startModel</code> input. All changes can be detected using the <code>changed</code> output. Additionally,\\n    max and min dates can be defined by setting the <code>maxDate</code> and <code>minDate</code> inputs with moment\\n    instances.\\n</p>\\n<p>\\n    If the user selects a start time that's later than the currently selected end time, the selected end time will\\n    adjust accordingly to preserve the current timeframe duration.\\n</p>\\n<p>\\n    If the user attempts to select an end time that's the same as or earlier than the currently selected start time,\\n    no changes occur on either the view or the model.\\n</p>\\n\\n<nui-example-wrapper filenamePrefix=\\\"time-frame-picker-inline\\\" exampleTitle=\\\"Basic Usage\\\">\\n    <nui-time-frame-picker-inline></nui-time-frame-picker-inline>\\n</nui-example-wrapper>\\n\\n<h2>Quick Picker Component</h2>\\n\\n<p>\\n    The <code>&lt;nui-quick-picker&gt;</code> component is a helper component in the TimeFramePicker module.\\n</p>\\n<p>\\n    In most cases, the default title \\\"Quick Picks\\\" on the left pane should be sufficient; however, if needed, the\\n\\ttitle can be customized using the <code>presetsTitle</code> input.\\n</p>\\n<p>\\n    If a custom ordering of presets is needed, an array of keys can be passed to the <code>presetKeysOrder</code> input.\\n</p>\\n<nui-example-wrapper filenamePrefix=\\\"quick-picker-basic\\\" exampleTitle=\\\"Quick Picker\\\">\\n    <nui-quick-picker-basic></nui-quick-picker-basic>\\n</nui-example-wrapper>\\n\\n<h2>Timeframe Picker in a Popover</h2>\\n\\n<p>\\n    To implement the common use-case of a timeframe picker in a popover, combine the <code>&lt;nui-time-frame-picker&gt;</code>,\\n\\t<code>nui-quick-picker</code> and <code>nui-popover</code> elements as shown below.\\n</p>\\n<p>\\n    To achieve a modal effect, you can set the popover's <code>[modal]</code> input to <code>true</code>.\\n</p>\\n<nui-example-wrapper filenamePrefix=\\\"time-frame-picker-basic\\\" exampleTitle=\\\"Timeframe Picker in a Popover\\\">\\n    <nui-time-frame-picker-basic-example></nui-time-frame-picker-basic-example>\\n</nui-example-wrapper>\\n\\n<h2>Date-Based Picker in Popover</h2>\\n\\n<nui-message type=\\\"info\\\"  [allowDismiss]=\\\"false\\\">\\n    Please note that in order to adjust popover to the width of inner components you may need to pass <code>[unlimited]=\\\"true\\\"</code> to it.\\n</nui-message>\\n<p>\\n    You are free to use different types of components inside a Quick Picker. The following example shows how to put a DatePicker inside.\\n</p>\\n\\n<nui-example-wrapper filenamePrefix=\\\"time-frame-picker-date\\\" exampleTitle=\\\"Date-Based Picker in Popover\\\">\\n    <nui-time-frame-picker-date></nui-time-frame-picker-date>\\n</nui-example-wrapper>\\n\\n<h2>Custom presets with Timeframe Picker</h2>\\n\\n<p>\\n    Presets can be changed using <code>timeframeService.currentPresets</code> field.\\n</p>\\n<nui-message type=\\\"info\\\" [allowDismiss]=\\\"false\\\">\\n    Please note that TimeFrameService is provided in scope of NuiTimeFramePickerModule once, and\\n    since one TimeFrameService instance can keep only one set of presets, in order to have different presets in 2 different\\n    components of an application, please provide different TimeFrameService instances in scope of those components\\n    (as in the example below, which includes <code>providers: [TimeframeService]</code> in a component decorator).\\n</nui-message>\\n\\n<nui-example-wrapper filenamePrefix=\\\"time-frame-picker-custom\\\" exampleTitle=\\\"Date-Based Picker in Popover\\\">\\n    <nui-time-frame-picker-custom></nui-time-frame-picker-custom>\\n</nui-example-wrapper>\\n\\n<h2>Multiple pickers with custom presets</h2>\\n<p>\\n    If you want to have multiple instances of <code>TimeFrameService</code> for your time frame pickers, you should provide one in the components providers.\\n</p>\\n<p>\\n    The example below shows how to create a component that will be responsible for creating <code>TimeFrameService</code> per component.\\n</p>\\n<nui-example-wrapper filenamePrefix=\\\"time-frame-picker-multiple-custom-pickers\\\" exampleTitle=\\\"Multiple pickers with custom presets\\\">\\n    <nui-time-frame-picker-multiple-custom-pickers></nui-time-frame-picker-multiple-custom-pickers>\\n</nui-example-wrapper>\\n\";","import { AfterViewInit, ChangeDetectorRef, Component, QueryList, ViewChildren } from \"@angular/core\";\nimport { ITimeframe, ITimeFramePresetDictionary, TimeframeService } from \"@nova-ui/bits\";\nimport { Subject } from \"rxjs\";\n\ninterface IPicker {\n    id: string;\n    presets: ITimeFramePresetDictionary;\n    timeframeService?: TimeframeService;\n    tf?: ITimeframe;\n    acceptedTimeframe?: ITimeframe;\n    selectedPresetKey: string;\n}\n\n@Component({\n    selector: \"nui-time-frame-picker-multiple-custom-pickers\",\n    templateUrl: \"./time-frame-picker-multiple-custom-pickers.example.component.html\",\n})\nexport class TimeFramePickerMultipleCustomPickersExampleComponent implements AfterViewInit {\n    @ViewChildren(\"scoper\")\n    private tfScopers: QueryList<TimeframeServiceScoperExampleComponent>;\n\n    public pickers: IPicker[] = [\n        {\n            id: \"1\",\n            presets: {\n                \"last42Hours\": {\n                    name: $localize `Last 42 hours`,\n                    startDatetimePattern: {hours: -42},\n                    endDatetimePattern: {},\n                },\n                \"last749Days\": {\n                    name: $localize `Last 749 days`,\n                    startDatetimePattern: {days: -749},\n                    endDatetimePattern: {},\n                },\n            },\n            selectedPresetKey: \"last749Days\",\n        },\n        {\n            id: \"2\",\n            presets: {\n                \"last42Hours\": {\n                    name: $localize `Last 42 hours`,\n                    startDatetimePattern: {hours: -42},\n                    endDatetimePattern: {},\n                },\n            },\n            selectedPresetKey: \"last42Hours\",\n        },\n        {\n            id: \"3\",\n            presets: {\n                \"lastYear\": {\n                    name: $localize `Last year`,\n                    startDatetimePattern: {year: -1},\n                    endDatetimePattern: {},\n                },\n                \"last10Years\": {\n                    name: $localize `Last 10 years`,\n                    startDatetimePattern: {year: -10},\n                    endDatetimePattern: {},\n                },\n            },\n            selectedPresetKey: \"lastYear\",\n        },\n    ];\n\n\n    public presets: ITimeFramePresetDictionary = {\n        \"last42Hours\": {\n            name: $localize `Last 42 hours`,\n            startDatetimePattern: {hours: -42},\n            endDatetimePattern: {},\n        },\n        \"last749Days\": {\n            name: $localize `Last 749 days`,\n            startDatetimePattern: {days: -749},\n            endDatetimePattern: {},\n        },\n    };\n\n    public showFooter: boolean = false;\n\n    public closePopoverSubject = new Subject();\n    public openPopoverSubject = new Subject();\n\n\n    constructor(private cdRef: ChangeDetectorRef) {\n    }\n\n    public updateTf(value: ITimeframe, index: number) {\n        const picker = this.pickers[index];\n        picker.tf = value;\n\n        const timeFrameDatesValid = () => picker.timeframeService?.areTimeFrameDatesValid(value);\n        const timeFrameDatesEqual = () => picker.timeframeService?.isEqual(\n            <ITimeframe>picker.tf,\n            <ITimeframe>picker.acceptedTimeframe\n        );\n        if (timeFrameDatesValid() && !timeFrameDatesEqual()) { this.showFooter = true; }\n\n        picker.selectedPresetKey = <string>picker.tf.selectedPresetId;\n    }\n\n    public ngAfterViewInit() {\n        this.tfScopers.forEach((scoper, i) => {\n            const picker = this.pickers[i];\n            const timeframeService = scoper.timeframeService;\n\n            picker.timeframeService = timeframeService;\n            timeframeService.currentPresets = picker.presets;\n            picker.acceptedTimeframe = timeframeService.getTimeframeByPresetId(picker.selectedPresetKey);\n            picker.tf = picker.acceptedTimeframe;\n        });\n        this.cdRef.detectChanges();\n    }\n\n    public confirmPopover(index: number) {\n        const picker = this.pickers[index];\n\n        this.showFooter = false;\n        this.closePopoverSubject.next();\n        picker.acceptedTimeframe = picker.tf;\n    }\n    public cancelPopover(index: number) {\n        this.showFooter = false;\n        this.closePopoverSubject.next();\n    }\n\n    public handlePresetSelection(presetKey: string, index: number) {\n        const picker = this.pickers[index];\n\n        picker.selectedPresetKey = presetKey;\n        picker.tf = picker.timeframeService?.getTimeframeByPresetId(presetKey);\n        picker.acceptedTimeframe = picker.tf;\n        this.closePopoverSubject.next();\n    }\n}\n\n@Component({\n    selector: \"nui-time-frame-service-scoper\",\n    providers: [TimeframeService],\n    template: `<ng-content></ng-content>`,\n})\nexport class TimeframeServiceScoperExampleComponent {\n    constructor(public timeframeService: TimeframeService) { }\n}\n","\n<div class=\"d-flex\" *ngFor=\"let picker of pickers; let index = index\">\n    <nui-time-frame-service-scoper #scoper>\n        <nui-popover trigger='click'\n            [template]=\"popoverTimeFramePicker\"\n            [hasPadding]=\"false\"\n            [closePopover]=\"closePopoverSubject\"\n            [modal]=\"true\"\n            ><span class=\"nui-text-link\" style=\"cursor: pointer;\">{{ picker.acceptedTimeframe | timeFrame }}</span>\n        </nui-popover>\n\n        <ng-template #popoverTimeFramePicker>\n            <div>\n                <nui-quick-picker [presets]=\"picker.presets\"\n                    [selectedPreset]=\"picker.acceptedTimeframe.selectedPresetId\"\n                    (presetSelected)=\"handlePresetSelection($event, index)\"\n                    pickerTitle=\"Custom Range\"\n                    i18n-pickerTitle>\n                    <nui-time-frame-picker [startModel]=\"picker.acceptedTimeframe\"\n                        (changed)=\"updateTf($event, index)\"\n                    ></nui-time-frame-picker>\n                </nui-quick-picker>\n            </div>\n            <nui-dialog-footer *ngIf=\"showFooter\">\n                <button nui-button type=\"button\" displayStyle=\"action\" class=\"pr-3 nui-time-frame-picker__cancel\"\n                        (click)=\"cancelPopover(index)\" i18n>\n                    Cancel\n                </button>\n                <button nui-button type=\"button\" displayStyle=\"primary\" class=\"nui-time-frame-picker__use\"\n                        (click)=\"confirmPopover(index)\" i18n>\n                    Use\n                </button>\n            </nui-dialog-footer>\n        </ng-template>\n    </nui-time-frame-service-scoper>\n</div>\n","export default \"import { NgModule } from \\\"@angular/core\\\";\\nimport { FormsModule } from \\\"@angular/forms\\\";\\nimport { RouterModule } from \\\"@angular/router\\\";\\nimport {\\n    DEMO_PATH_TOKEN,\\n    NuiButtonModule,\\n    NuiDatePickerModule,\\n    NuiDialogModule,\\n    NuiDividerModule,\\n    NuiDocsModule,\\n    NuiMessageModule,\\n    NuiPopoverModule,\\n    NuiTextboxModule,\\n    NuiTimeFramePickerModule,\\n    SrlcStage,\\n} from \\\"@nova-ui/bits\\\";\\n\\nimport {\\n    QuickPickerBasicExampleComponent,\\n    TimeFramePickerBasicExampleComponent,\\n    TimeFramePickerCustomExampleComponent,\\n    TimeFramePickerDateExampleComponent,\\n    TimeFramePickerDocsExampleComponent,\\n    TimeFramePickerInlineExampleComponent,\\n    TimeFramePickerMultipleCustomPickersExampleComponent,\\n    TimeFramePickerTestExampleComponent,\\n    TimeFramePickerVisualTestComponent,\\n    TimeframeServiceScoperExampleComponent,\\n} from \\\"./index\\\";\\n\\nconst routes = [\\n    {\\n        path: \\\"\\\",\\n        component: TimeFramePickerDocsExampleComponent,\\n        data: {\\n            \\\"srlc\\\": {\\n                \\\"stage\\\": SrlcStage.ga,\\n            },\\n            showThemeSwitcher: true,\\n        },\\n    },\\n    {\\n        path: \\\"time-frame-picker-test\\\",\\n        component: TimeFramePickerTestExampleComponent,\\n        data: {\\n            \\\"srlc\\\": {\\n                \\\"hideIndicator\\\": true,\\n            },\\n        },\\n    },\\n    {\\n        path: \\\"time-frame-picker-visual-test\\\",\\n        component: TimeFramePickerVisualTestComponent,\\n        data: {\\n            \\\"srlc\\\": {\\n                \\\"hideIndicator\\\": true,\\n            },\\n        },\\n    },\\n    {\\n        path: \\\"multiple-custom-pickers\\\",\\n        component: TimeFramePickerMultipleCustomPickersExampleComponent,\\n        data: {\\n            \\\"srlc\\\": {\\n                \\\"hideIndicator\\\": true,\\n            },\\n        },\\n    },\\n];\\n\\n@NgModule({\\n    imports: [\\n        NuiButtonModule,\\n        NuiTimeFramePickerModule,\\n        NuiDividerModule,\\n        NuiMessageModule,\\n        FormsModule,\\n        NuiPopoverModule,\\n        NuiDocsModule,\\n        NuiTextboxModule,\\n        RouterModule.forChild(routes),\\n        NuiDialogModule,\\n        NuiDatePickerModule,\\n    ],\\n    declarations: [\\n        QuickPickerBasicExampleComponent,\\n        TimeFramePickerBasicExampleComponent,\\n        TimeFramePickerCustomExampleComponent,\\n        TimeFramePickerDateExampleComponent,\\n        TimeFramePickerInlineExampleComponent,\\n        TimeFramePickerTestExampleComponent,\\n        TimeFramePickerDocsExampleComponent,\\n        TimeFramePickerVisualTestComponent,\\n        TimeFramePickerMultipleCustomPickersExampleComponent,\\n        TimeframeServiceScoperExampleComponent,\\n    ],\\n    providers: [\\n        {\\n            provide: DEMO_PATH_TOKEN,\\n            useFactory: () => (<any>require).context(`!!raw-loader!./`, true, /.*\\\\.(ts|html|less)$/),\\n        },\\n    ],\\n    exports: [\\n        RouterModule,\\n    ],\\n})\\nexport class TimeFramePickerModule {\\n}\\n\";","export default \"\\n<div class=\\\"d-flex\\\" *ngFor=\\\"let picker of pickers; let index = index\\\">\\n    <nui-time-frame-service-scoper #scoper>\\n        <nui-popover trigger='click'\\n            [template]=\\\"popoverTimeFramePicker\\\"\\n            [hasPadding]=\\\"false\\\"\\n            [closePopover]=\\\"closePopoverSubject\\\"\\n            [modal]=\\\"true\\\"\\n            ><span class=\\\"nui-text-link\\\" style=\\\"cursor: pointer;\\\">{{ picker.acceptedTimeframe | timeFrame }}</span>\\n        </nui-popover>\\n\\n        <ng-template #popoverTimeFramePicker>\\n            <div>\\n                <nui-quick-picker [presets]=\\\"picker.presets\\\"\\n                    [selectedPreset]=\\\"picker.acceptedTimeframe.selectedPresetId\\\"\\n                    (presetSelected)=\\\"handlePresetSelection($event, index)\\\"\\n                    pickerTitle=\\\"Custom Range\\\"\\n                    i18n-pickerTitle>\\n                    <nui-time-frame-picker [startModel]=\\\"picker.acceptedTimeframe\\\"\\n                        (changed)=\\\"updateTf($event, index)\\\"\\n                    ></nui-time-frame-picker>\\n                </nui-quick-picker>\\n            </div>\\n            <nui-dialog-footer *ngIf=\\\"showFooter\\\">\\n                <button nui-button type=\\\"button\\\" displayStyle=\\\"action\\\" class=\\\"pr-3 nui-time-frame-picker__cancel\\\"\\n                        (click)=\\\"cancelPopover(index)\\\" i18n>\\n                    Cancel\\n                </button>\\n                <button nui-button type=\\\"button\\\" displayStyle=\\\"primary\\\" class=\\\"nui-time-frame-picker__use\\\"\\n                        (click)=\\\"confirmPopover(index)\\\" i18n>\\n                    Use\\n                </button>\\n            </nui-dialog-footer>\\n        </ng-template>\\n    </nui-time-frame-service-scoper>\\n</div>\\n\";","import { Component } from \"@angular/core\";\nimport { IQuickPickPresetDictionary } from \"@nova-ui/bits\";\n\n@Component({\n    selector: \"nui-quick-picker-basic\",\n    templateUrl: \"./quick-picker-basic.example.component.html\",\n})\n\nexport class QuickPickerBasicExampleComponent {\n    public presets: IQuickPickPresetDictionary = {\n        \"99\": {\n            name: \"99-th percentile\",\n        },\n        \"95\": {\n            name: \"95-th percentile\",\n        },\n        \"80\": {\n            name: \"80-th percentile\",\n        },\n    };\n    public presetKeysOrder = [\"95\", \"99\", \"80\"];\n    public selectedPresetKey?: string = \"95\";\n    public selectedValue: number = +(this.selectedPresetKey || \"\");\n    public handlePresetSelection(presetKey: string) {\n        this.selectedPresetKey = presetKey;\n        if (presetKey) {\n            this.selectedValue = +this.selectedPresetKey;\n        }\n    }\n    public handleCustomSelection(num: number) {\n        if (Object.keys(this.presets).indexOf(num.toString()) !== -1) {\n            this.selectedPresetKey = num.toString();\n        } else {\n            this.selectedPresetKey = undefined;\n        }\n        this.selectedValue = num;\n    }\n\n    public getTextboxValue() {\n        return +(this.selectedPresetKey || \"\") || this.selectedValue;\n    }\n}\n","<nui-quick-picker [presets]=\"presets\"\n                  [selectedPreset]=\"selectedPresetKey\"\n                  (presetSelected)=\"handlePresetSelection($event)\"\n                  pickerTitle=\"Custom percentiles\"\n                  [presetKeysOrder]=\"presetKeysOrder\"\n                  i18n-pickerTitle>\n    <nui-textbox-number [maxValue]=\"100\"\n                        (valueChange)=\"handleCustomSelection($event)\"\n                        [value]=\"getTextboxValue()\">\n    </nui-textbox-number>\n</nui-quick-picker>\n\n<span class=\"nui-text-secondary\">Selected Quick Pick is {{selectedPresetKey||\"null\"}}, Selected Value is {{selectedValue}}</span>\n","export default \"import { Component } from \\\"@angular/core\\\";\\nimport {\\n    IQuickPickPresetDictionary, ITimeframe, ITimeFramePresetDictionary, TimeframeService,\\n} from \\\"@nova-ui/bits\\\";\\nimport _find from \\\"lodash/find\\\";\\nimport _isUndefined from \\\"lodash/isUndefined\\\";\\nimport moment, { Moment } from \\\"moment/moment\\\";\\nimport { Subject } from \\\"rxjs\\\";\\n\\n@Component({\\n    selector: \\\"nui-time-frame-picker-visual-test\\\",\\n    templateUrl: \\\"./time-frame-picker-visual-test.component.html\\\",\\n})\\n\\nexport class TimeFramePickerVisualTestComponent {\\n    public presets: ITimeFramePresetDictionary;\\n    public presetsDatePicker: IQuickPickPresetDictionary;\\n    public selectedPresetKey?: string = \\\"lastHour\\\";\\n    public selectedPresetKeyDatePicker = \\\"dimasBirthday\\\";\\n    public acceptedTimeframe: ITimeframe;\\n    public tf: ITimeframe;\\n    public selectedDate: Moment;\\n\\n    public showFooter: boolean = false;\\n\\n    constructor(public timeframeService: TimeframeService) {\\n        this.presets = timeframeService.getDefaultPresets();\\n        this.acceptedTimeframe = this.timeframeService.getTimeframeByPresetId(this.selectedPresetKey, \\\"02/17/1986\\\");\\n        this.tf = this.acceptedTimeframe;\\n        this.presetsDatePicker = this.getDefaultPresets();\\n        this.selectedDate = this.getDateFromPreset(this.selectedPresetKeyDatePicker);\\n    }\\n\\n    public closePopoverSubject = new Subject();\\n    public openPopoverSubject = new Subject();\\n\\n    public updateTf(value: ITimeframe) {\\n        this.tf = value;\\n        const timeFrameDatesValid = () => this.timeframeService.areTimeFrameDatesValid(value);\\n        const timeFrameDatesEqual = () => this.timeframeService.isEqual(this.tf, this.acceptedTimeframe);\\n        if (timeFrameDatesValid() && !timeFrameDatesEqual()) { this.showFooter = true; }\\n        this.selectedPresetKey = this.tf.selectedPresetId;\\n    }\\n\\n    public confirmPopover() {\\n        this.showFooter = false;\\n        this.closePopoverSubject.next();\\n        this.acceptedTimeframe = this.tf;\\n    }\\n    public cancelPopover() {\\n        this.showFooter = false;\\n        this.closePopoverSubject.next();\\n    }\\n\\n    public handlePresetSelection(presetKey: string) {\\n        this.selectedPresetKeyDatePicker = presetKey;\\n        this.tf = this.timeframeService.getTimeframeByPresetId(presetKey, \\\"02/17/1986\\\");\\n        this.acceptedTimeframe = this.tf;\\n        this.closePopoverSubject.next();\\n    }\\n\\n    public confirmPopoverDatePicker() {\\n        this.closePopoverSubject.next();\\n    }\\n\\n    public handlePresetSelectionDatePicker(presetKey: string) {\\n        this.selectedDate = this.getDateFromPreset(presetKey);\\n        this.selectedPresetKeyDatePicker = presetKey;\\n        this.confirmPopoverDatePicker();\\n    }\\n\\n    public dateChanged(value: Moment) {\\n        if (!this.selectedDate.isSame(value, \\\"day\\\")) {\\n            this.selectedDate = value;\\n            this.selectedPresetKeyDatePicker = this.getPresetFromDate(value); // will return undefined if not found, exactly what's needed\\n            this.confirmPopoverDatePicker();\\n        }\\n    }\\n\\n    private getDefaultPresets(): {[key: string]: any} {\\n        return {\\n            today: {name: \\\"Today\\\", pattern: () => moment()},\\n            yesterday: { name: \\\"Yesterday\\\", pattern: () => moment().subtract(1, \\\"days\\\")},\\n            dimasBirthday: {name: \\\"Dima's Birthday\\\", pattern: () => moment(\\\"1986-02-17\\\")},\\n            random: {\\n                name: \\\"Random date (to show that we can)\\\",\\n                pattern: () => moment(+(new Date()) - Math.floor(Math.random() * 100000000000)),\\n            },\\n        };\\n    }\\n\\n    private getDateFromPreset(presetKey: string): Moment {\\n        const preset = this.getDefaultPresets()[presetKey];\\n        return preset ? preset.pattern() : moment();\\n    }\\n\\n    private getPresetFromDate(date: Moment): string {\\n        const preset: string | undefined = _find(Object.keys(this.presets), (key) => date.isSame(this.getDateFromPreset(key), \\\"day\\\"));\\n        if (_isUndefined(preset)) {\\n            throw new Error(\\\"DatePreset was not found\\\");\\n        }\\n        return preset;\\n    }\\n}\\n\";","export default \"import { Component } from \\\"@angular/core\\\";\\nimport { ITimeframe } from \\\"@nova-ui/bits\\\";\\nimport moment from \\\"moment/moment\\\";\\n\\n@Component({\\n    selector: \\\"nui-time-frame-picker-inline\\\",\\n    templateUrl: \\\"./time-frame-picker-inline.example.component.html\\\",\\n})\\n\\nexport class TimeFramePickerInlineExampleComponent {\\n    public tf: ITimeframe = {\\n        startDatetime: moment(\\\"04/09/2018\\\", \\\"L\\\"),\\n        endDatetime: moment(\\\"04/10/2018\\\", \\\"L\\\"),\\n        // @ts-ignore\\n        selectedPresetId: null,\\n    };\\n\\n    public minDate = moment(\\\"04/07/2018\\\", \\\"L\\\"); // \\\"L\\\" is \\\"MM/DD/YYY\\\" in moment.js\\n    public maxDate = moment();\\n\\n    public updateTf(value: any) {\\n        this.tf = value;\\n    }\\n}\\n\";","export default \"<nui-popover id=\\\"nui-demo-basic-time-frame-picker\\\"\\n             trigger='click'\\n             [template]=\\\"popoverTimeFramePicker\\\"\\n             [hasPadding]=\\\"false\\\"\\n             [closePopover]=\\\"closePopoverSubject\\\">\\n    <span class=\\\"nui-text-link\\\" style=\\\"cursor: pointer;\\\">{{ acceptedTimeframe | timeFrame }}</span>\\n</nui-popover>\\n\\n<div>{{ acceptedTimeframe | timeFrame:\\\"LL LTS\\\" }}</div>\\n\\n<ng-template #popoverTimeFramePicker>\\n    <div>\\n        <nui-quick-picker [presets]=\\\"presets\\\"\\n                          [selectedPreset]=\\\"acceptedTimeframe.selectedPresetId\\\"\\n                          (presetSelected)=\\\"handlePresetSelection($event)\\\"\\n                          pickerTitle=\\\"Custom Range\\\"\\n                          i18n-pickerTitle>\\n            <nui-time-frame-picker [startModel]=\\\"acceptedTimeframe\\\"\\n                                   (changed)=\\\"updateTf($event)\\\"\\n                                   [maxDate]=\\\"maxDate\\\"\\n                                   [minDate]=\\\"minDate\\\">\\n            </nui-time-frame-picker>\\n        </nui-quick-picker>\\n    </div>\\n    <nui-dialog-footer *ngIf=\\\"showFooter\\\">\\n        <button nui-button\\n                type=\\\"button\\\"\\n                displayStyle=\\\"action\\\"\\n                class=\\\"pr-3 nui-time-frame-picker__cancel\\\"\\n                (click)=\\\"cancelPopover()\\\"\\n                id=\\\"nui-demo-basic-time-frame-picker-cancel\\\"\\n                i18n>\\n            Cancel\\n        </button>\\n        <button nui-button\\n                type=\\\"button\\\"\\n                displayStyle=\\\"primary\\\"\\n                class=\\\"nui-time-frame-picker__use\\\"\\n                (click)=\\\"confirmPopover()\\\"\\n                id=\\\"nui-demo-basic-time-frame-picker-use\\\"\\n                i18n>\\n            Use\\n        </button>\\n    </nui-dialog-footer>\\n</ng-template>\\n\";","import { Component } from \"@angular/core\";\nimport { ITimeframe, ITimeFramePresetDictionary, TimeframeService } from \"@nova-ui/bits\";\nimport { Subject } from \"rxjs\";\n\n@Component({\n    selector: \"nui-time-frame-picker-custom\",\n    templateUrl: \"./time-frame-picker-custom.example.component.html\",\n    providers: [TimeframeService],\n})\n\nexport class TimeFramePickerCustomExampleComponent {\n    public presets: ITimeFramePresetDictionary = {\n        \"last42Hours\": {\n            name: $localize `Last 42 hours`,\n            startDatetimePattern: {hours: -42},\n            endDatetimePattern: {},\n        },\n        \"last749Days\": {\n            name: $localize `Last 749 days`,\n            startDatetimePattern: {days: -749},\n            endDatetimePattern: {},\n        },\n    };\n    public selectedPresetKey?: string = \"last42Hours\";\n    public acceptedTimeframe: ITimeframe;\n    public tf: ITimeframe;\n\n    public showFooter: boolean = false;\n\n    constructor(public timeframeService: TimeframeService) {\n        this.timeframeService.currentPresets = this.presets;\n        this.acceptedTimeframe = this.timeframeService.getTimeframeByPresetId(this.selectedPresetKey);\n        this.tf = this.acceptedTimeframe;\n    }\n\n    public closePopoverSubject = new Subject();\n    public openPopoverSubject = new Subject();\n\n    public updateTf(value: ITimeframe) {\n        this.tf = value;\n        const timeFrameDatesValid = () => this.timeframeService.areTimeFrameDatesValid(value);\n        const timeFrameDatesEqual = () => this.timeframeService.isEqual(this.tf, this.acceptedTimeframe);\n        if (timeFrameDatesValid() && !timeFrameDatesEqual()) { this.showFooter = true; }\n\n        this.selectedPresetKey = this.tf.selectedPresetId;\n    }\n\n    public confirmPopover() {\n        this.showFooter = false;\n        this.closePopoverSubject.next();\n        this.acceptedTimeframe = this.tf;\n    }\n    public cancelPopover() {\n        this.showFooter = false;\n        this.closePopoverSubject.next();\n    }\n\n    public handlePresetSelection(presetKey: string) {\n        this.selectedPresetKey = presetKey;\n        this.tf = this.timeframeService.getTimeframeByPresetId(presetKey);\n        this.acceptedTimeframe = this.tf;\n        this.closePopoverSubject.next();\n    }\n}\n","<nui-popover trigger='click'\n             [template]=\"popoverTimeFramePicker\"\n             [hasPadding]=\"false\"\n             [closePopover]=\"closePopoverSubject\"\n             [modal]=\"true\">\n    <span class=\"nui-text-link\" style=\"cursor: pointer;\">{{ acceptedTimeframe | timeFrame }}</span>\n</nui-popover>\n\n<ng-template #popoverTimeFramePicker>\n    <div>\n        <nui-quick-picker [presets]=\"presets\"\n                          [selectedPreset]=\"acceptedTimeframe.selectedPresetId\"\n                          (presetSelected)=\"handlePresetSelection($event)\"\n                          pickerTitle=\"Custom Range\"\n                          i18n-pickerTitle>\n            <nui-time-frame-picker [startModel]=\"acceptedTimeframe\"\n                                          (changed)=\"updateTf($event)\">\n            </nui-time-frame-picker>\n        </nui-quick-picker>\n    </div>\n    <nui-dialog-footer *ngIf=\"showFooter\">\n        <button nui-button\n                type=\"button\"\n                displayStyle=\"action\"\n                class=\"pr-3 nui-time-frame-picker__cancel\"\n                (click)=\"cancelPopover()\"\n                i18n>\n            Cancel\n        </button>\n        <button nui-button\n                type=\"button\"\n                displayStyle=\"primary\"\n                class=\"nui-time-frame-picker__use\"\n                (click)=\"confirmPopover()\"\n                i18n>\n            Use\n        </button>\n    </nui-dialog-footer>\n</ng-template>\n","export default \"import { Component } from \\\"@angular/core\\\";\\nimport { ITimeframe, ITimeFramePresetDictionary, TimeframeService } from \\\"@nova-ui/bits\\\";\\nimport moment from \\\"moment/moment\\\";\\nimport { Subject } from \\\"rxjs\\\";\\n\\n@Component({\\n    selector: \\\"nui-time-frame-picker-test\\\",\\n    templateUrl: \\\"./time-frame-picker-test.example.component.html\\\",\\n})\\n\\nexport class TimeFramePickerTestExampleComponent {\\n    public presets: ITimeFramePresetDictionary;\\n    public selectedPresetKey?: string = \\\"lastHour\\\";\\n    public acceptedTimeframe: ITimeframe;\\n    public tf: ITimeframe;\\n\\n    public minDate = moment(\\\"04/07/2018\\\", \\\"L\\\"); // \\\"L\\\" is \\\"MM/DD/YYY\\\" in moment.js\\n    public maxDate = moment();\\n\\n    public showFooter: boolean = false;\\n\\n    constructor(public timeframeService: TimeframeService) {\\n        this.presets = timeframeService.getDefaultPresets();\\n        this.acceptedTimeframe = this.timeframeService.getTimeframeByPresetId(this.selectedPresetKey);\\n        this.tf = this.acceptedTimeframe;\\n    }\\n\\n    public closePopoverSubject = new Subject();\\n    public openPopoverSubject = new Subject();\\n\\n    public updateTf(value: ITimeframe) {\\n        this.tf = value;\\n        const timeFrameDatesValid = () => this.timeframeService.areTimeFrameDatesValid(value);\\n        const timeFrameDatesEqual = () => this.timeframeService.isEqual(this.tf, this.acceptedTimeframe);\\n        if (timeFrameDatesValid() && !timeFrameDatesEqual()) { this.showFooter = true; }\\n\\n        this.selectedPresetKey = this.tf.selectedPresetId;\\n    }\\n\\n    public confirmPopover() {\\n        this.showFooter = false;\\n        this.closePopoverSubject.next();\\n        this.acceptedTimeframe = this.tf;\\n    }\\n    public cancelPopover() {\\n        this.showFooter = false;\\n        this.closePopoverSubject.next();\\n    }\\n\\n    public handlePresetSelection(presetKey: string) {\\n        this.selectedPresetKey = presetKey;\\n        this.tf = this.timeframeService.getTimeframeByPresetId(presetKey);\\n        this.acceptedTimeframe = this.tf;\\n        this.closePopoverSubject.next();\\n    }\\n}\\n\";","export default \"<nui-popover trigger='click'\\n             [template]=\\\"popoverTimeFramePicker\\\"\\n             [hasPadding]=\\\"false\\\"\\n             [closePopover]=\\\"closePopoverSubject\\\"\\n             [modal]=\\\"true\\\">\\n    <span class=\\\"nui-text-link\\\" style=\\\"cursor: pointer;\\\">{{ acceptedTimeframe | timeFrame }}</span>\\n</nui-popover>\\n\\n<ng-template #popoverTimeFramePicker>\\n    <div>\\n        <nui-quick-picker [presets]=\\\"presets\\\"\\n                          [selectedPreset]=\\\"acceptedTimeframe.selectedPresetId\\\"\\n                          (presetSelected)=\\\"handlePresetSelection($event)\\\"\\n                          pickerTitle=\\\"Custom Range\\\"\\n                          i18n-pickerTitle>\\n            <nui-time-frame-picker [startModel]=\\\"acceptedTimeframe\\\"\\n                                          (changed)=\\\"updateTf($event)\\\">\\n            </nui-time-frame-picker>\\n        </nui-quick-picker>\\n    </div>\\n    <nui-dialog-footer *ngIf=\\\"showFooter\\\">\\n        <button nui-button\\n                type=\\\"button\\\"\\n                displayStyle=\\\"action\\\"\\n                class=\\\"pr-3 nui-time-frame-picker__cancel\\\"\\n                (click)=\\\"cancelPopover()\\\"\\n                i18n>\\n            Cancel\\n        </button>\\n        <button nui-button\\n                type=\\\"button\\\"\\n                displayStyle=\\\"primary\\\"\\n                class=\\\"nui-time-frame-picker__use\\\"\\n                (click)=\\\"confirmPopover()\\\"\\n                i18n>\\n            Use\\n        </button>\\n    </nui-dialog-footer>\\n</ng-template>\\n\";","import { Component } from \"@angular/core\";\n\n@Component({\n    selector: \"nui-time-frame-picker-docs\",\n    templateUrl: \"./time-frame-picker-docs.example.component.html\",\n})\n\nexport class TimeFramePickerDocsExampleComponent {}\n\n","<h2>Required Modules</h2>\n<ul>\n    <li>\n        <code>NuiTimeFramePickerModule</code>\n    </li>\n</ul>\n\n<h2>Basic Usage</h2>\n\n<p>\n    The <code>&lt;nui-time-frame-picker&gt;</code> component allows the user to select a time range. Its model is\n    an <code><a href=\"../interfaces/ITimeframe.html\" target=\"_blank\">ITimeframe</a></code> which can be set using the\n    <code>startModel</code> input. All changes can be detected using the <code>changed</code> output. Additionally,\n    max and min dates can be defined by setting the <code>maxDate</code> and <code>minDate</code> inputs with moment\n    instances.\n</p>\n<p>\n    If the user selects a start time that's later than the currently selected end time, the selected end time will\n    adjust accordingly to preserve the current timeframe duration.\n</p>\n<p>\n    If the user attempts to select an end time that's the same as or earlier than the currently selected start time,\n    no changes occur on either the view or the model.\n</p>\n\n<nui-example-wrapper filenamePrefix=\"time-frame-picker-inline\" exampleTitle=\"Basic Usage\">\n    <nui-time-frame-picker-inline></nui-time-frame-picker-inline>\n</nui-example-wrapper>\n\n<h2>Quick Picker Component</h2>\n\n<p>\n    The <code>&lt;nui-quick-picker&gt;</code> component is a helper component in the TimeFramePicker module.\n</p>\n<p>\n    In most cases, the default title \"Quick Picks\" on the left pane should be sufficient; however, if needed, the\n\ttitle can be customized using the <code>presetsTitle</code> input.\n</p>\n<p>\n    If a custom ordering of presets is needed, an array of keys can be passed to the <code>presetKeysOrder</code> input.\n</p>\n<nui-example-wrapper filenamePrefix=\"quick-picker-basic\" exampleTitle=\"Quick Picker\">\n    <nui-quick-picker-basic></nui-quick-picker-basic>\n</nui-example-wrapper>\n\n<h2>Timeframe Picker in a Popover</h2>\n\n<p>\n    To implement the common use-case of a timeframe picker in a popover, combine the <code>&lt;nui-time-frame-picker&gt;</code>,\n\t<code>nui-quick-picker</code> and <code>nui-popover</code> elements as shown below.\n</p>\n<p>\n    To achieve a modal effect, you can set the popover's <code>[modal]</code> input to <code>true</code>.\n</p>\n<nui-example-wrapper filenamePrefix=\"time-frame-picker-basic\" exampleTitle=\"Timeframe Picker in a Popover\">\n    <nui-time-frame-picker-basic-example></nui-time-frame-picker-basic-example>\n</nui-example-wrapper>\n\n<h2>Date-Based Picker in Popover</h2>\n\n<nui-message type=\"info\"  [allowDismiss]=\"false\">\n    Please note that in order to adjust popover to the width of inner components you may need to pass <code>[unlimited]=\"true\"</code> to it.\n</nui-message>\n<p>\n    You are free to use different types of components inside a Quick Picker. The following example shows how to put a DatePicker inside.\n</p>\n\n<nui-example-wrapper filenamePrefix=\"time-frame-picker-date\" exampleTitle=\"Date-Based Picker in Popover\">\n    <nui-time-frame-picker-date></nui-time-frame-picker-date>\n</nui-example-wrapper>\n\n<h2>Custom presets with Timeframe Picker</h2>\n\n<p>\n    Presets can be changed using <code>timeframeService.currentPresets</code> field.\n</p>\n<nui-message type=\"info\" [allowDismiss]=\"false\">\n    Please note that TimeFrameService is provided in scope of NuiTimeFramePickerModule once, and\n    since one TimeFrameService instance can keep only one set of presets, in order to have different presets in 2 different\n    components of an application, please provide different TimeFrameService instances in scope of those components\n    (as in the example below, which includes <code>providers: [TimeframeService]</code> in a component decorator).\n</nui-message>\n\n<nui-example-wrapper filenamePrefix=\"time-frame-picker-custom\" exampleTitle=\"Date-Based Picker in Popover\">\n    <nui-time-frame-picker-custom></nui-time-frame-picker-custom>\n</nui-example-wrapper>\n\n<h2>Multiple pickers with custom presets</h2>\n<p>\n    If you want to have multiple instances of <code>TimeFrameService</code> for your time frame pickers, you should provide one in the components providers.\n</p>\n<p>\n    The example below shows how to create a component that will be responsible for creating <code>TimeFrameService</code> per component.\n</p>\n<nui-example-wrapper filenamePrefix=\"time-frame-picker-multiple-custom-pickers\" exampleTitle=\"Multiple pickers with custom presets\">\n    <nui-time-frame-picker-multiple-custom-pickers></nui-time-frame-picker-multiple-custom-pickers>\n</nui-example-wrapper>\n","import { Component } from \"@angular/core\";\nimport { IQuickPickPresetDictionary } from \"@nova-ui/bits\";\nimport _find from \"lodash/find\";\nimport _isUndefined from \"lodash/isUndefined\";\nimport moment, { Moment } from \"moment/moment\";\nimport { Subject } from \"rxjs\";\n\n@Component({\n    selector: \"nui-time-frame-picker-date\",\n    templateUrl: \"./time-frame-picker-date.example.component.html\",\n})\n\nexport class TimeFramePickerDateExampleComponent {\n    public presets: IQuickPickPresetDictionary;\n    public selectedPresetKey = \"ihorsBirthday\";\n    public selectedDate: Moment;\n\n    public showFooter: boolean = true;\n\n    constructor() {\n        this.presets = this.getDefaultPresets();\n        this.selectedDate = this.getDateFromPreset(this.selectedPresetKey);\n    }\n\n    public closePopoverSubject = new Subject();\n\n    public handlePresetSelection(presetKey: string) {\n        this.selectedDate = this.getDateFromPreset(presetKey);\n        this.selectedPresetKey = presetKey;\n        this.confirmPopover();\n    }\n\n    public dateChanged(value: Moment) {\n        if (!this.selectedDate.isSame(value, \"day\")) {\n            this.selectedDate = value;\n            this.selectedPresetKey = this.getPresetFromDate(value); // will return undefined if not found, exactly what's needed\n            this.confirmPopover();\n        }\n    }\n\n    public confirmPopover() {\n        this.closePopoverSubject.next();\n    }\n\n    // These private methods are specific and will be in any case abstracted to a service by end users:\n\n    private getDefaultPresets(): {[key: string]: any} {\n        return {\n            today: {name: \"Today\", pattern: () => moment()},\n            yesterday: { name: \"Yesterday\", pattern: () => moment().subtract(1, \"days\")},\n            ihorsBirthday: {name: \"Ihor's Birthday\", pattern: () => moment(\"1989-04-09\")},\n            random: {\n                name: \"Random date (to show that we can)\",\n                pattern: () => moment(+(new Date()) - Math.floor(Math.random() * 100000000000)),\n            },\n        };\n    }\n\n    private getDateFromPreset(presetKey: string): Moment {\n        const preset = this.getDefaultPresets()[presetKey];\n        return preset ? preset.pattern() : moment();\n    }\n\n    private getPresetFromDate(date: Moment): string {\n        const preset: string | undefined = _find(Object.keys(this.presets), (key) => date.isSame(this.getDateFromPreset(key), \"day\"));\n        if (_isUndefined(preset)) {\n            throw new Error(\"DatePreset was not found\");\n        }\n        return preset;\n    }\n}\n","<nui-popover trigger='click'\n             [template]=\"popoverDayPicker\"\n             [hasPadding]=\"false\"\n             [closePopover]=\"closePopoverSubject\"\n             [unlimited]=\"true\"\n             [modal]=\"true\">\n    <span class=\"nui-text-link\" style=\"cursor: pointer;\">Select day</span>\n</nui-popover>\n\n<p>\n    Selected date:\n    <em>{{selectedDate?.format(\"MMMM Do, YYYY\")}}</em>\n</p>\n\n<ng-template #popoverDayPicker>\n    <div>\n        <nui-quick-picker [presets]=\"presets\"\n                          [selectedPreset]=\"selectedPresetKey\"\n                          (presetSelected)=\"handlePresetSelection($event)\"\n                          pickerTitle=\"Custom Date\"\n                          i18n-pickerTitle\n                          presetsTitle=\"Baselines\"\n                          i18n-presetsTitle>\n            <nui-date-picker [inline]=\"true\"\n                             [value]=\"selectedDate\"\n                             [preserveInsignificant]=\"false\"\n                             (valueChange)=\"dateChanged($event)\">\n            </nui-date-picker>\n        </nui-quick-picker>\n    </div>\n</ng-template>\n","export default \"import { Component } from \\\"@angular/core\\\";\\nimport { IQuickPickPresetDictionary } from \\\"@nova-ui/bits\\\";\\n\\n@Component({\\n    selector: \\\"nui-quick-picker-basic\\\",\\n    templateUrl: \\\"./quick-picker-basic.example.component.html\\\",\\n})\\n\\nexport class QuickPickerBasicExampleComponent {\\n    public presets: IQuickPickPresetDictionary = {\\n        \\\"99\\\": {\\n            name: \\\"99-th percentile\\\",\\n        },\\n        \\\"95\\\": {\\n            name: \\\"95-th percentile\\\",\\n        },\\n        \\\"80\\\": {\\n            name: \\\"80-th percentile\\\",\\n        },\\n    };\\n    public presetKeysOrder = [\\\"95\\\", \\\"99\\\", \\\"80\\\"];\\n    public selectedPresetKey?: string = \\\"95\\\";\\n    public selectedValue: number = +(this.selectedPresetKey || \\\"\\\");\\n    public handlePresetSelection(presetKey: string) {\\n        this.selectedPresetKey = presetKey;\\n        if (presetKey) {\\n            this.selectedValue = +this.selectedPresetKey;\\n        }\\n    }\\n    public handleCustomSelection(num: number) {\\n        if (Object.keys(this.presets).indexOf(num.toString()) !== -1) {\\n            this.selectedPresetKey = num.toString();\\n        } else {\\n            this.selectedPresetKey = undefined;\\n        }\\n        this.selectedValue = num;\\n    }\\n\\n    public getTextboxValue() {\\n        return +(this.selectedPresetKey || \\\"\\\") || this.selectedValue;\\n    }\\n}\\n\";","import { Component } from \"@angular/core\";\nimport {\n    IQuickPickPresetDictionary, ITimeframe, ITimeFramePresetDictionary, TimeframeService,\n} from \"@nova-ui/bits\";\nimport _find from \"lodash/find\";\nimport _isUndefined from \"lodash/isUndefined\";\nimport moment, { Moment } from \"moment/moment\";\nimport { Subject } from \"rxjs\";\n\n@Component({\n    selector: \"nui-time-frame-picker-visual-test\",\n    templateUrl: \"./time-frame-picker-visual-test.component.html\",\n})\n\nexport class TimeFramePickerVisualTestComponent {\n    public presets: ITimeFramePresetDictionary;\n    public presetsDatePicker: IQuickPickPresetDictionary;\n    public selectedPresetKey?: string = \"lastHour\";\n    public selectedPresetKeyDatePicker = \"dimasBirthday\";\n    public acceptedTimeframe: ITimeframe;\n    public tf: ITimeframe;\n    public selectedDate: Moment;\n\n    public showFooter: boolean = false;\n\n    constructor(public timeframeService: TimeframeService) {\n        this.presets = timeframeService.getDefaultPresets();\n        this.acceptedTimeframe = this.timeframeService.getTimeframeByPresetId(this.selectedPresetKey, \"02/17/1986\");\n        this.tf = this.acceptedTimeframe;\n        this.presetsDatePicker = this.getDefaultPresets();\n        this.selectedDate = this.getDateFromPreset(this.selectedPresetKeyDatePicker);\n    }\n\n    public closePopoverSubject = new Subject();\n    public openPopoverSubject = new Subject();\n\n    public updateTf(value: ITimeframe) {\n        this.tf = value;\n        const timeFrameDatesValid = () => this.timeframeService.areTimeFrameDatesValid(value);\n        const timeFrameDatesEqual = () => this.timeframeService.isEqual(this.tf, this.acceptedTimeframe);\n        if (timeFrameDatesValid() && !timeFrameDatesEqual()) { this.showFooter = true; }\n        this.selectedPresetKey = this.tf.selectedPresetId;\n    }\n\n    public confirmPopover() {\n        this.showFooter = false;\n        this.closePopoverSubject.next();\n        this.acceptedTimeframe = this.tf;\n    }\n    public cancelPopover() {\n        this.showFooter = false;\n        this.closePopoverSubject.next();\n    }\n\n    public handlePresetSelection(presetKey: string) {\n        this.selectedPresetKeyDatePicker = presetKey;\n        this.tf = this.timeframeService.getTimeframeByPresetId(presetKey, \"02/17/1986\");\n        this.acceptedTimeframe = this.tf;\n        this.closePopoverSubject.next();\n    }\n\n    public confirmPopoverDatePicker() {\n        this.closePopoverSubject.next();\n    }\n\n    public handlePresetSelectionDatePicker(presetKey: string) {\n        this.selectedDate = this.getDateFromPreset(presetKey);\n        this.selectedPresetKeyDatePicker = presetKey;\n        this.confirmPopoverDatePicker();\n    }\n\n    public dateChanged(value: Moment) {\n        if (!this.selectedDate.isSame(value, \"day\")) {\n            this.selectedDate = value;\n            this.selectedPresetKeyDatePicker = this.getPresetFromDate(value); // will return undefined if not found, exactly what's needed\n            this.confirmPopoverDatePicker();\n        }\n    }\n\n    private getDefaultPresets(): {[key: string]: any} {\n        return {\n            today: {name: \"Today\", pattern: () => moment()},\n            yesterday: { name: \"Yesterday\", pattern: () => moment().subtract(1, \"days\")},\n            dimasBirthday: {name: \"Dima's Birthday\", pattern: () => moment(\"1986-02-17\")},\n            random: {\n                name: \"Random date (to show that we can)\",\n                pattern: () => moment(+(new Date()) - Math.floor(Math.random() * 100000000000)),\n            },\n        };\n    }\n\n    private getDateFromPreset(presetKey: string): Moment {\n        const preset = this.getDefaultPresets()[presetKey];\n        return preset ? preset.pattern() : moment();\n    }\n\n    private getPresetFromDate(date: Moment): string {\n        const preset: string | undefined = _find(Object.keys(this.presets), (key) => date.isSame(this.getDateFromPreset(key), \"day\"));\n        if (_isUndefined(preset)) {\n            throw new Error(\"DatePreset was not found\");\n        }\n        return preset;\n    }\n}\n","<div class=\"container\">\n    <div class=\"row\">\n        <div class=\"col\">\n            <h4>TimeFrame Picker in Popover</h4>\n            <nui-popover trigger='click'\n                         [template]=\"popoverTimeFramePicker\"\n                         [hasPadding]=\"false\"\n                         [closePopover]=\"closePopoverSubject\"\n                         [modal]=\"true\"\n                         id=\"nui-demo-visual-default-popover\">\n                        <span class=\"nui-text-link\" style=\"cursor: pointer;\">{{ acceptedTimeframe | timeFrame }}</span>\n            </nui-popover>\n\n            <ng-template #popoverTimeFramePicker>\n                <div>\n                    <nui-quick-picker [presets]=\"presets\"\n                                      [selectedPreset]=\"acceptedTimeframe.selectedPresetId\"\n                                      (presetSelected)=\"handlePresetSelection($event)\"\n                                      pickerTitle=\"Custom Range\">\n                        <nui-time-frame-picker [startModel]=\"acceptedTimeframe\"\n                                               (changed)=\"updateTf($event)\">\n                        </nui-time-frame-picker>\n                    </nui-quick-picker>\n                </div>\n                <nui-dialog-footer *ngIf=\"showFooter\">\n                    <button nui-button\n                            type=\"button\"\n                            displayStyle=\"action\"\n                            class=\"pr-3 nui-time-frame-picker__cancel\"\n                            (click)=\"cancelPopover()\">\n                        Cancel\n                    </button>\n                    <button nui-button\n                            type=\"button\"\n                            displayStyle=\"primary\"\n                            class=\"nui-time-frame-picker__use\"\n                            (click)=\"confirmPopover()\">\n                        Use\n                    </button>\n                </nui-dialog-footer>\n            </ng-template>\n        </div>\n        <div class=\"col\">\n            <h4>TimeFrame Picker with other components</h4>\n            <nui-popover trigger='click'\n                         [template]=\"popoverDayPicker\"\n                         [hasPadding]=\"false\"\n                         [closePopover]=\"closePopoverSubject\"\n                         [unlimited]=\"true\"\n                         [modal]=\"true\"\n                         id=\"nui-demo-visual-datepicker-popover\">\n                         <span class=\"nui-text-link\" style=\"cursor: pointer;\">Select day</span>\n            </nui-popover>\n\n            <p>\n            Selected date:\n            <em>{{selectedDate?.format(\"MMMM Do, YYYY\")}}</em>\n            </p>\n\n            <ng-template #popoverDayPicker>\n            <div>\n                <nui-quick-picker [presets]=\"presetsDatePicker\"\n                                  [selectedPreset]=\"selectedPresetKeyDatePicker\"\n                                  (presetSelected)=\"handlePresetSelectionDatePicker($event)\"\n                                  pickerTitle=\"Custom Date\"\n                                  presetsTitle=\"Baselines\">\n                    <nui-date-picker [inline]=\"true\"\n                                     [value]=\"selectedDate\"\n                                     [preserveInsignificant]=\"false\"\n                                     (valueChange)=\"dateChanged($event)\">\n                    </nui-date-picker>\n                </nui-quick-picker>\n            </div>\n            </ng-template>\n        </div>\n        <div class=\"col\">\n            <h4>TimeFrame Picker + Date picker with unlimited width in Popover</h4>\n            <nui-popover trigger='click'\n                            [template]=\"popoverTimeFramePickerUnlimited\"\n                            [hasPadding]=\"false\"\n                            [closePopover]=\"closePopoverSubject\"\n                            [modal]=\"true\"\n                            [unlimited]=\"true\"\n                            id=\"nui-demo-visual-complex-popover\">\n                        <span class=\"nui-text-link\" style=\"cursor: pointer;\">{{ acceptedTimeframe | timeFrame }}</span>\n            </nui-popover>\n\n            <ng-template #popoverTimeFramePickerUnlimited>\n                <div>\n                    <nui-quick-picker [presets]=\"presets\"\n                                      [selectedPreset]=\"acceptedTimeframe.selectedPresetId\"\n                                      (presetSelected)=\"handlePresetSelection($event)\"\n                                      pickerTitle=\"Custom Range\">\n                        <nui-time-frame-picker [startModel]=\"acceptedTimeframe\"\n                                                    (changed)=\"updateTf($event)\">\n                        </nui-time-frame-picker>\n                        <nui-date-picker [inline]=\"true\"\n                                         [value]=\"selectedDate\"\n                                         [preserveInsignificant]=\"false\"\n                                         (valueChange)=\"dateChanged($event)\">\n                        </nui-date-picker>\n                    </nui-quick-picker>\n                </div>\n            </ng-template>\n        </div>\n    </div>\n</div>\n","import { Component } from \"@angular/core\";\nimport { ITimeframe, ITimeFramePresetDictionary, TimeframeService } from \"@nova-ui/bits\";\nimport { Subject } from \"rxjs\";\n\n@Component({\n    selector: \"nui-time-frame-picker-basic-example\",\n    templateUrl: \"./time-frame-picker-basic.example.component.html\",\n})\n\nexport class TimeFramePickerBasicExampleComponent {\n    public presets: ITimeFramePresetDictionary;\n    public selectedPresetKey?: string = \"lastHour\";\n    public acceptedTimeframe: ITimeframe;\n    public tf: ITimeframe;\n\n    public showFooter: boolean = false;\n\n    constructor(public timeframeService: TimeframeService) {\n        this.presets = timeframeService.getDefaultPresets();\n        this.acceptedTimeframe = this.timeframeService.getTimeframeByPresetId(this.selectedPresetKey);\n        this.tf = this.acceptedTimeframe;\n    }\n\n    public closePopoverSubject = new Subject();\n    public openPopoverSubject = new Subject();\n\n    public updateTf(value: ITimeframe) {\n        this.tf = value;\n\n        const timeFrameDatesValid = () => this.timeframeService.areTimeFrameDatesValid(value);\n        const timeFrameDatesEqual = () => this.timeframeService.isEqual(this.tf, this.acceptedTimeframe);\n        if (timeFrameDatesValid() && !timeFrameDatesEqual()) { this.showFooter = true; }\n\n        this.selectedPresetKey = this.tf.selectedPresetId;\n    }\n\n    public confirmPopover() {\n        this.showFooter = false;\n        this.closePopoverSubject.next();\n        this.acceptedTimeframe = this.tf;\n    }\n    public cancelPopover() {\n        this.showFooter = false;\n        this.closePopoverSubject.next();\n    }\n\n    public handlePresetSelection(presetKey: string) {\n        this.selectedPresetKey = presetKey;\n        this.tf = this.timeframeService.getTimeframeByPresetId(presetKey);\n        this.acceptedTimeframe = this.tf;\n        this.closePopoverSubject.next();\n    }\n}\n","<nui-popover trigger='click'\n             [template]=\"popoverTimeFramePicker\"\n             [hasPadding]=\"false\"\n             [closePopover]=\"closePopoverSubject\"\n             [modal]=\"true\">\n    <span class=\"nui-text-link\" style=\"cursor: pointer;\">{{ acceptedTimeframe | timeFrame }}</span>\n</nui-popover>\n\n<ng-template #popoverTimeFramePicker>\n    <div>\n        <nui-quick-picker [presets]=\"presets\"\n                          [selectedPreset]=\"acceptedTimeframe.selectedPresetId\"\n                          (presetSelected)=\"handlePresetSelection($event)\"\n                          pickerTitle=\"Custom Range\"\n                          i18n-pickerTitle>\n            <nui-time-frame-picker [startModel]=\"acceptedTimeframe\"\n                                          (changed)=\"updateTf($event)\">\n            </nui-time-frame-picker>\n        </nui-quick-picker>\n    </div>\n    <nui-dialog-footer *ngIf=\"showFooter\">\n        <button nui-button\n                type=\"button\"\n                displayStyle=\"action\"\n                class=\"pr-3 nui-time-frame-picker__cancel\"\n                (click)=\"cancelPopover()\"\n                i18n>\n            Cancel\n        </button>\n        <button nui-button\n                type=\"button\"\n                displayStyle=\"primary\"\n                class=\"nui-time-frame-picker__use\"\n                (click)=\"confirmPopover()\"\n                i18n>\n            Use\n        </button>\n    </nui-dialog-footer>\n</ng-template>\n","export default \"import { Component } from \\\"@angular/core\\\";\\n\\n@Component({\\n    selector: \\\"nui-time-frame-picker-docs\\\",\\n    templateUrl: \\\"./time-frame-picker-docs.example.component.html\\\",\\n})\\n\\nexport class TimeFramePickerDocsExampleComponent {}\\n\\n\";","export default \"import { Component } from \\\"@angular/core\\\";\\nimport { IQuickPickPresetDictionary } from \\\"@nova-ui/bits\\\";\\nimport _find from \\\"lodash/find\\\";\\nimport _isUndefined from \\\"lodash/isUndefined\\\";\\nimport moment, { Moment } from \\\"moment/moment\\\";\\nimport { Subject } from \\\"rxjs\\\";\\n\\n@Component({\\n    selector: \\\"nui-time-frame-picker-date\\\",\\n    templateUrl: \\\"./time-frame-picker-date.example.component.html\\\",\\n})\\n\\nexport class TimeFramePickerDateExampleComponent {\\n    public presets: IQuickPickPresetDictionary;\\n    public selectedPresetKey = \\\"ihorsBirthday\\\";\\n    public selectedDate: Moment;\\n\\n    public showFooter: boolean = true;\\n\\n    constructor() {\\n        this.presets = this.getDefaultPresets();\\n        this.selectedDate = this.getDateFromPreset(this.selectedPresetKey);\\n    }\\n\\n    public closePopoverSubject = new Subject();\\n\\n    public handlePresetSelection(presetKey: string) {\\n        this.selectedDate = this.getDateFromPreset(presetKey);\\n        this.selectedPresetKey = presetKey;\\n        this.confirmPopover();\\n    }\\n\\n    public dateChanged(value: Moment) {\\n        if (!this.selectedDate.isSame(value, \\\"day\\\")) {\\n            this.selectedDate = value;\\n            this.selectedPresetKey = this.getPresetFromDate(value); // will return undefined if not found, exactly what's needed\\n            this.confirmPopover();\\n        }\\n    }\\n\\n    public confirmPopover() {\\n        this.closePopoverSubject.next();\\n    }\\n\\n    // These private methods are specific and will be in any case abstracted to a service by end users:\\n\\n    private getDefaultPresets(): {[key: string]: any} {\\n        return {\\n            today: {name: \\\"Today\\\", pattern: () => moment()},\\n            yesterday: { name: \\\"Yesterday\\\", pattern: () => moment().subtract(1, \\\"days\\\")},\\n            ihorsBirthday: {name: \\\"Ihor's Birthday\\\", pattern: () => moment(\\\"1989-04-09\\\")},\\n            random: {\\n                name: \\\"Random date (to show that we can)\\\",\\n                pattern: () => moment(+(new Date()) - Math.floor(Math.random() * 100000000000)),\\n            },\\n        };\\n    }\\n\\n    private getDateFromPreset(presetKey: string): Moment {\\n        const preset = this.getDefaultPresets()[presetKey];\\n        return preset ? preset.pattern() : moment();\\n    }\\n\\n    private getPresetFromDate(date: Moment): string {\\n        const preset: string | undefined = _find(Object.keys(this.presets), (key) => date.isSame(this.getDateFromPreset(key), \\\"day\\\"));\\n        if (_isUndefined(preset)) {\\n            throw new Error(\\\"DatePreset was not found\\\");\\n        }\\n        return preset;\\n    }\\n}\\n\";","import { Component } from \"@angular/core\";\nimport { ITimeframe } from \"@nova-ui/bits\";\nimport moment from \"moment/moment\";\n\n@Component({\n    selector: \"nui-time-frame-picker-inline\",\n    templateUrl: \"./time-frame-picker-inline.example.component.html\",\n})\n\nexport class TimeFramePickerInlineExampleComponent {\n    public tf: ITimeframe = {\n        startDatetime: moment(\"04/09/2018\", \"L\"),\n        endDatetime: moment(\"04/10/2018\", \"L\"),\n        // @ts-ignore\n        selectedPresetId: null,\n    };\n\n    public minDate = moment(\"04/07/2018\", \"L\"); // \"L\" is \"MM/DD/YYY\" in moment.js\n    public maxDate = moment();\n\n    public updateTf(value: any) {\n        this.tf = value;\n    }\n}\n","<nui-time-frame-picker [startModel]=\"tf\"\n                       (changed)=\"updateTf($event)\"\n                       [maxDate]=\"maxDate\"\n                       [minDate]=\"minDate\">\n</nui-time-frame-picker>\n\n<span class=\"nui-text-secondary\">Selected timeframe is {{ tf | timeFrame }}</span>\n","export default \"<nui-popover trigger='click'\\n             [template]=\\\"popoverDayPicker\\\"\\n             [hasPadding]=\\\"false\\\"\\n             [closePopover]=\\\"closePopoverSubject\\\"\\n             [unlimited]=\\\"true\\\"\\n             [modal]=\\\"true\\\">\\n    <span class=\\\"nui-text-link\\\" style=\\\"cursor: pointer;\\\">Select day</span>\\n</nui-popover>\\n\\n<p>\\n    Selected date:\\n    <em>{{selectedDate?.format(\\\"MMMM Do, YYYY\\\")}}</em>\\n</p>\\n\\n<ng-template #popoverDayPicker>\\n    <div>\\n        <nui-quick-picker [presets]=\\\"presets\\\"\\n                          [selectedPreset]=\\\"selectedPresetKey\\\"\\n                          (presetSelected)=\\\"handlePresetSelection($event)\\\"\\n                          pickerTitle=\\\"Custom Date\\\"\\n                          i18n-pickerTitle\\n                          presetsTitle=\\\"Baselines\\\"\\n                          i18n-presetsTitle>\\n            <nui-date-picker [inline]=\\\"true\\\"\\n                             [value]=\\\"selectedDate\\\"\\n                             [preserveInsignificant]=\\\"false\\\"\\n                             (valueChange)=\\\"dateChanged($event)\\\">\\n            </nui-date-picker>\\n        </nui-quick-picker>\\n    </div>\\n</ng-template>\\n\";","export * from \"./time-frame-picker-docs/time-frame-picker-docs.example.component\";\nexport * from \"./time-frame-picker-basic/time-frame-picker-basic.example.component\";\nexport * from \"./time-frame-picker-custom/time-frame-picker-custom.example.component\";\nexport * from \"./quick-picker-basic/quick-picker-basic.example.component\";\nexport * from \"./time-frame-picker-inline/time-frame-picker-inline.example.component\";\nexport * from \"./time-frame-picker-date/time-frame-picker-date.example.component\";\nexport * from \"./time-frame-picker-test/time-frame-picker-test.example.component\";\nexport * from \"./time-frame-picker-visual-test/time-frame-picker-visual-test.component\";\nexport * from \"./time-frame-picker-multiple-custom-pickers/time-frame-picker-multiple-custom-pickers.example.component\";\n","export default \"<div class=\\\"container\\\">\\n    <div class=\\\"row\\\">\\n        <div class=\\\"col\\\">\\n            <h4>TimeFrame Picker in Popover</h4>\\n            <nui-popover trigger='click'\\n                         [template]=\\\"popoverTimeFramePicker\\\"\\n                         [hasPadding]=\\\"false\\\"\\n                         [closePopover]=\\\"closePopoverSubject\\\"\\n                         [modal]=\\\"true\\\"\\n                         id=\\\"nui-demo-visual-default-popover\\\">\\n                        <span class=\\\"nui-text-link\\\" style=\\\"cursor: pointer;\\\">{{ acceptedTimeframe | timeFrame }}</span>\\n            </nui-popover>\\n\\n            <ng-template #popoverTimeFramePicker>\\n                <div>\\n                    <nui-quick-picker [presets]=\\\"presets\\\"\\n                                      [selectedPreset]=\\\"acceptedTimeframe.selectedPresetId\\\"\\n                                      (presetSelected)=\\\"handlePresetSelection($event)\\\"\\n                                      pickerTitle=\\\"Custom Range\\\">\\n                        <nui-time-frame-picker [startModel]=\\\"acceptedTimeframe\\\"\\n                                               (changed)=\\\"updateTf($event)\\\">\\n                        </nui-time-frame-picker>\\n                    </nui-quick-picker>\\n                </div>\\n                <nui-dialog-footer *ngIf=\\\"showFooter\\\">\\n                    <button nui-button\\n                            type=\\\"button\\\"\\n                            displayStyle=\\\"action\\\"\\n                            class=\\\"pr-3 nui-time-frame-picker__cancel\\\"\\n                            (click)=\\\"cancelPopover()\\\">\\n                        Cancel\\n                    </button>\\n                    <button nui-button\\n                            type=\\\"button\\\"\\n                            displayStyle=\\\"primary\\\"\\n                            class=\\\"nui-time-frame-picker__use\\\"\\n                            (click)=\\\"confirmPopover()\\\">\\n                        Use\\n                    </button>\\n                </nui-dialog-footer>\\n            </ng-template>\\n        </div>\\n        <div class=\\\"col\\\">\\n            <h4>TimeFrame Picker with other components</h4>\\n            <nui-popover trigger='click'\\n                         [template]=\\\"popoverDayPicker\\\"\\n                         [hasPadding]=\\\"false\\\"\\n                         [closePopover]=\\\"closePopoverSubject\\\"\\n                         [unlimited]=\\\"true\\\"\\n                         [modal]=\\\"true\\\"\\n                         id=\\\"nui-demo-visual-datepicker-popover\\\">\\n                         <span class=\\\"nui-text-link\\\" style=\\\"cursor: pointer;\\\">Select day</span>\\n            </nui-popover>\\n\\n            <p>\\n            Selected date:\\n            <em>{{selectedDate?.format(\\\"MMMM Do, YYYY\\\")}}</em>\\n            </p>\\n\\n            <ng-template #popoverDayPicker>\\n            <div>\\n                <nui-quick-picker [presets]=\\\"presetsDatePicker\\\"\\n                                  [selectedPreset]=\\\"selectedPresetKeyDatePicker\\\"\\n                                  (presetSelected)=\\\"handlePresetSelectionDatePicker($event)\\\"\\n                                  pickerTitle=\\\"Custom Date\\\"\\n                                  presetsTitle=\\\"Baselines\\\">\\n                    <nui-date-picker [inline]=\\\"true\\\"\\n                                     [value]=\\\"selectedDate\\\"\\n                                     [preserveInsignificant]=\\\"false\\\"\\n                                     (valueChange)=\\\"dateChanged($event)\\\">\\n                    </nui-date-picker>\\n                </nui-quick-picker>\\n            </div>\\n            </ng-template>\\n        </div>\\n        <div class=\\\"col\\\">\\n            <h4>TimeFrame Picker + Date picker with unlimited width in Popover</h4>\\n            <nui-popover trigger='click'\\n                            [template]=\\\"popoverTimeFramePickerUnlimited\\\"\\n                            [hasPadding]=\\\"false\\\"\\n                            [closePopover]=\\\"closePopoverSubject\\\"\\n                            [modal]=\\\"true\\\"\\n                            [unlimited]=\\\"true\\\"\\n                            id=\\\"nui-demo-visual-complex-popover\\\">\\n                        <span class=\\\"nui-text-link\\\" style=\\\"cursor: pointer;\\\">{{ acceptedTimeframe | timeFrame }}</span>\\n            </nui-popover>\\n\\n            <ng-template #popoverTimeFramePickerUnlimited>\\n                <div>\\n                    <nui-quick-picker [presets]=\\\"presets\\\"\\n                                      [selectedPreset]=\\\"acceptedTimeframe.selectedPresetId\\\"\\n                                      (presetSelected)=\\\"handlePresetSelection($event)\\\"\\n                                      pickerTitle=\\\"Custom Range\\\">\\n                        <nui-time-frame-picker [startModel]=\\\"acceptedTimeframe\\\"\\n                                                    (changed)=\\\"updateTf($event)\\\">\\n                        </nui-time-frame-picker>\\n                        <nui-date-picker [inline]=\\\"true\\\"\\n                                         [value]=\\\"selectedDate\\\"\\n                                         [preserveInsignificant]=\\\"false\\\"\\n                                         (valueChange)=\\\"dateChanged($event)\\\">\\n                        </nui-date-picker>\\n                    </nui-quick-picker>\\n                </div>\\n            </ng-template>\\n        </div>\\n    </div>\\n</div>\\n\";","export default \"<nui-time-frame-picker [startModel]=\\\"tf\\\"\\n                       (changed)=\\\"updateTf($event)\\\"\\n                       [maxDate]=\\\"maxDate\\\"\\n                       [minDate]=\\\"minDate\\\">\\n</nui-time-frame-picker>\\n\\n<span class=\\\"nui-text-secondary\\\">Selected timeframe is {{ tf | timeFrame }}</span>\\n\";","export default \"<nui-quick-picker [presets]=\\\"presets\\\"\\n                  [selectedPreset]=\\\"selectedPresetKey\\\"\\n                  (presetSelected)=\\\"handlePresetSelection($event)\\\"\\n                  pickerTitle=\\\"Custom percentiles\\\"\\n                  [presetKeysOrder]=\\\"presetKeysOrder\\\"\\n                  i18n-pickerTitle>\\n    <nui-textbox-number [maxValue]=\\\"100\\\"\\n                        (valueChange)=\\\"handleCustomSelection($event)\\\"\\n                        [value]=\\\"getTextboxValue()\\\">\\n    </nui-textbox-number>\\n</nui-quick-picker>\\n\\n<span class=\\\"nui-text-secondary\\\">Selected Quick Pick is {{selectedPresetKey||\\\"null\\\"}}, Selected Value is {{selectedValue}}</span>\\n\";","export default \"import { AfterViewInit, ChangeDetectorRef, Component, QueryList, ViewChildren } from \\\"@angular/core\\\";\\nimport { ITimeframe, ITimeFramePresetDictionary, TimeframeService } from \\\"@nova-ui/bits\\\";\\nimport { Subject } from \\\"rxjs\\\";\\n\\ninterface IPicker {\\n    id: string;\\n    presets: ITimeFramePresetDictionary;\\n    timeframeService?: TimeframeService;\\n    tf?: ITimeframe;\\n    acceptedTimeframe?: ITimeframe;\\n    selectedPresetKey: string;\\n}\\n\\n@Component({\\n    selector: \\\"nui-time-frame-picker-multiple-custom-pickers\\\",\\n    templateUrl: \\\"./time-frame-picker-multiple-custom-pickers.example.component.html\\\",\\n})\\nexport class TimeFramePickerMultipleCustomPickersExampleComponent implements AfterViewInit {\\n    @ViewChildren(\\\"scoper\\\")\\n    private tfScopers: QueryList<TimeframeServiceScoperExampleComponent>;\\n\\n    public pickers: IPicker[] = [\\n        {\\n            id: \\\"1\\\",\\n            presets: {\\n                \\\"last42Hours\\\": {\\n                    name: $localize `Last 42 hours`,\\n                    startDatetimePattern: {hours: -42},\\n                    endDatetimePattern: {},\\n                },\\n                \\\"last749Days\\\": {\\n                    name: $localize `Last 749 days`,\\n                    startDatetimePattern: {days: -749},\\n                    endDatetimePattern: {},\\n                },\\n            },\\n            selectedPresetKey: \\\"last749Days\\\",\\n        },\\n        {\\n            id: \\\"2\\\",\\n            presets: {\\n                \\\"last42Hours\\\": {\\n                    name: $localize `Last 42 hours`,\\n                    startDatetimePattern: {hours: -42},\\n                    endDatetimePattern: {},\\n                },\\n            },\\n            selectedPresetKey: \\\"last42Hours\\\",\\n        },\\n        {\\n            id: \\\"3\\\",\\n            presets: {\\n                \\\"lastYear\\\": {\\n                    name: $localize `Last year`,\\n                    startDatetimePattern: {year: -1},\\n                    endDatetimePattern: {},\\n                },\\n                \\\"last10Years\\\": {\\n                    name: $localize `Last 10 years`,\\n                    startDatetimePattern: {year: -10},\\n                    endDatetimePattern: {},\\n                },\\n            },\\n            selectedPresetKey: \\\"lastYear\\\",\\n        },\\n    ];\\n\\n\\n    public presets: ITimeFramePresetDictionary = {\\n        \\\"last42Hours\\\": {\\n            name: $localize `Last 42 hours`,\\n            startDatetimePattern: {hours: -42},\\n            endDatetimePattern: {},\\n        },\\n        \\\"last749Days\\\": {\\n            name: $localize `Last 749 days`,\\n            startDatetimePattern: {days: -749},\\n            endDatetimePattern: {},\\n        },\\n    };\\n\\n    public showFooter: boolean = false;\\n\\n    public closePopoverSubject = new Subject();\\n    public openPopoverSubject = new Subject();\\n\\n\\n    constructor(private cdRef: ChangeDetectorRef) {\\n    }\\n\\n    public updateTf(value: ITimeframe, index: number) {\\n        const picker = this.pickers[index];\\n        picker.tf = value;\\n\\n        const timeFrameDatesValid = () => picker.timeframeService?.areTimeFrameDatesValid(value);\\n        const timeFrameDatesEqual = () => picker.timeframeService?.isEqual(\\n            <ITimeframe>picker.tf,\\n            <ITimeframe>picker.acceptedTimeframe\\n        );\\n        if (timeFrameDatesValid() && !timeFrameDatesEqual()) { this.showFooter = true; }\\n\\n        picker.selectedPresetKey = <string>picker.tf.selectedPresetId;\\n    }\\n\\n    public ngAfterViewInit() {\\n        this.tfScopers.forEach((scoper, i) => {\\n            const picker = this.pickers[i];\\n            const timeframeService = scoper.timeframeService;\\n\\n            picker.timeframeService = timeframeService;\\n            timeframeService.currentPresets = picker.presets;\\n            picker.acceptedTimeframe = timeframeService.getTimeframeByPresetId(picker.selectedPresetKey);\\n            picker.tf = picker.acceptedTimeframe;\\n        });\\n        this.cdRef.detectChanges();\\n    }\\n\\n    public confirmPopover(index: number) {\\n        const picker = this.pickers[index];\\n\\n        this.showFooter = false;\\n        this.closePopoverSubject.next();\\n        picker.acceptedTimeframe = picker.tf;\\n    }\\n    public cancelPopover(index: number) {\\n        this.showFooter = false;\\n        this.closePopoverSubject.next();\\n    }\\n\\n    public handlePresetSelection(presetKey: string, index: number) {\\n        const picker = this.pickers[index];\\n\\n        picker.selectedPresetKey = presetKey;\\n        picker.tf = picker.timeframeService?.getTimeframeByPresetId(presetKey);\\n        picker.acceptedTimeframe = picker.tf;\\n        this.closePopoverSubject.next();\\n    }\\n}\\n\\n@Component({\\n    selector: \\\"nui-time-frame-service-scoper\\\",\\n    providers: [TimeframeService],\\n    template: `<ng-content></ng-content>`,\\n})\\nexport class TimeframeServiceScoperExampleComponent {\\n    constructor(public timeframeService: TimeframeService) { }\\n}\\n\";","export default \"import { Component } from \\\"@angular/core\\\";\\nimport { ITimeframe, ITimeFramePresetDictionary, TimeframeService } from \\\"@nova-ui/bits\\\";\\nimport { Subject } from \\\"rxjs\\\";\\n\\n@Component({\\n    selector: \\\"nui-time-frame-picker-custom\\\",\\n    templateUrl: \\\"./time-frame-picker-custom.example.component.html\\\",\\n    providers: [TimeframeService],\\n})\\n\\nexport class TimeFramePickerCustomExampleComponent {\\n    public presets: ITimeFramePresetDictionary = {\\n        \\\"last42Hours\\\": {\\n            name: $localize `Last 42 hours`,\\n            startDatetimePattern: {hours: -42},\\n            endDatetimePattern: {},\\n        },\\n        \\\"last749Days\\\": {\\n            name: $localize `Last 749 days`,\\n            startDatetimePattern: {days: -749},\\n            endDatetimePattern: {},\\n        },\\n    };\\n    public selectedPresetKey?: string = \\\"last42Hours\\\";\\n    public acceptedTimeframe: ITimeframe;\\n    public tf: ITimeframe;\\n\\n    public showFooter: boolean = false;\\n\\n    constructor(public timeframeService: TimeframeService) {\\n        this.timeframeService.currentPresets = this.presets;\\n        this.acceptedTimeframe = this.timeframeService.getTimeframeByPresetId(this.selectedPresetKey);\\n        this.tf = this.acceptedTimeframe;\\n    }\\n\\n    public closePopoverSubject = new Subject();\\n    public openPopoverSubject = new Subject();\\n\\n    public updateTf(value: ITimeframe) {\\n        this.tf = value;\\n        const timeFrameDatesValid = () => this.timeframeService.areTimeFrameDatesValid(value);\\n        const timeFrameDatesEqual = () => this.timeframeService.isEqual(this.tf, this.acceptedTimeframe);\\n        if (timeFrameDatesValid() && !timeFrameDatesEqual()) { this.showFooter = true; }\\n\\n        this.selectedPresetKey = this.tf.selectedPresetId;\\n    }\\n\\n    public confirmPopover() {\\n        this.showFooter = false;\\n        this.closePopoverSubject.next();\\n        this.acceptedTimeframe = this.tf;\\n    }\\n    public cancelPopover() {\\n        this.showFooter = false;\\n        this.closePopoverSubject.next();\\n    }\\n\\n    public handlePresetSelection(presetKey: string) {\\n        this.selectedPresetKey = presetKey;\\n        this.tf = this.timeframeService.getTimeframeByPresetId(presetKey);\\n        this.acceptedTimeframe = this.tf;\\n        this.closePopoverSubject.next();\\n    }\\n}\\n\";","import { Component } from \"@angular/core\";\nimport { ITimeframe, ITimeFramePresetDictionary, TimeframeService } from \"@nova-ui/bits\";\nimport moment from \"moment/moment\";\nimport { Subject } from \"rxjs\";\n\n@Component({\n    selector: \"nui-time-frame-picker-test\",\n    templateUrl: \"./time-frame-picker-test.example.component.html\",\n})\n\nexport class TimeFramePickerTestExampleComponent {\n    public presets: ITimeFramePresetDictionary;\n    public selectedPresetKey?: string = \"lastHour\";\n    public acceptedTimeframe: ITimeframe;\n    public tf: ITimeframe;\n\n    public minDate = moment(\"04/07/2018\", \"L\"); // \"L\" is \"MM/DD/YYY\" in moment.js\n    public maxDate = moment();\n\n    public showFooter: boolean = false;\n\n    constructor(public timeframeService: TimeframeService) {\n        this.presets = timeframeService.getDefaultPresets();\n        this.acceptedTimeframe = this.timeframeService.getTimeframeByPresetId(this.selectedPresetKey);\n        this.tf = this.acceptedTimeframe;\n    }\n\n    public closePopoverSubject = new Subject();\n    public openPopoverSubject = new Subject();\n\n    public updateTf(value: ITimeframe) {\n        this.tf = value;\n        const timeFrameDatesValid = () => this.timeframeService.areTimeFrameDatesValid(value);\n        const timeFrameDatesEqual = () => this.timeframeService.isEqual(this.tf, this.acceptedTimeframe);\n        if (timeFrameDatesValid() && !timeFrameDatesEqual()) { this.showFooter = true; }\n\n        this.selectedPresetKey = this.tf.selectedPresetId;\n    }\n\n    public confirmPopover() {\n        this.showFooter = false;\n        this.closePopoverSubject.next();\n        this.acceptedTimeframe = this.tf;\n    }\n    public cancelPopover() {\n        this.showFooter = false;\n        this.closePopoverSubject.next();\n    }\n\n    public handlePresetSelection(presetKey: string) {\n        this.selectedPresetKey = presetKey;\n        this.tf = this.timeframeService.getTimeframeByPresetId(presetKey);\n        this.acceptedTimeframe = this.tf;\n        this.closePopoverSubject.next();\n    }\n}\n","<nui-popover id=\"nui-demo-basic-time-frame-picker\"\n             trigger='click'\n             [template]=\"popoverTimeFramePicker\"\n             [hasPadding]=\"false\"\n             [closePopover]=\"closePopoverSubject\">\n    <span class=\"nui-text-link\" style=\"cursor: pointer;\">{{ acceptedTimeframe | timeFrame }}</span>\n</nui-popover>\n\n<div>{{ acceptedTimeframe | timeFrame:\"LL LTS\" }}</div>\n\n<ng-template #popoverTimeFramePicker>\n    <div>\n        <nui-quick-picker [presets]=\"presets\"\n                          [selectedPreset]=\"acceptedTimeframe.selectedPresetId\"\n                          (presetSelected)=\"handlePresetSelection($event)\"\n                          pickerTitle=\"Custom Range\"\n                          i18n-pickerTitle>\n            <nui-time-frame-picker [startModel]=\"acceptedTimeframe\"\n                                   (changed)=\"updateTf($event)\"\n                                   [maxDate]=\"maxDate\"\n                                   [minDate]=\"minDate\">\n            </nui-time-frame-picker>\n        </nui-quick-picker>\n    </div>\n    <nui-dialog-footer *ngIf=\"showFooter\">\n        <button nui-button\n                type=\"button\"\n                displayStyle=\"action\"\n                class=\"pr-3 nui-time-frame-picker__cancel\"\n                (click)=\"cancelPopover()\"\n                id=\"nui-demo-basic-time-frame-picker-cancel\"\n                i18n>\n            Cancel\n        </button>\n        <button nui-button\n                type=\"button\"\n                displayStyle=\"primary\"\n                class=\"nui-time-frame-picker__use\"\n                (click)=\"confirmPopover()\"\n                id=\"nui-demo-basic-time-frame-picker-use\"\n                i18n>\n            Use\n        </button>\n    </nui-dialog-footer>\n</ng-template>\n","import { NgModule } from \"@angular/core\";\nimport { FormsModule } from \"@angular/forms\";\nimport { RouterModule } from \"@angular/router\";\nimport {\n    DEMO_PATH_TOKEN,\n    NuiButtonModule,\n    NuiDatePickerModule,\n    NuiDialogModule,\n    NuiDividerModule,\n    NuiDocsModule,\n    NuiMessageModule,\n    NuiPopoverModule,\n    NuiTextboxModule,\n    NuiTimeFramePickerModule,\n    SrlcStage,\n} from \"@nova-ui/bits\";\n\nimport {\n    QuickPickerBasicExampleComponent,\n    TimeFramePickerBasicExampleComponent,\n    TimeFramePickerCustomExampleComponent,\n    TimeFramePickerDateExampleComponent,\n    TimeFramePickerDocsExampleComponent,\n    TimeFramePickerInlineExampleComponent,\n    TimeFramePickerMultipleCustomPickersExampleComponent,\n    TimeFramePickerTestExampleComponent,\n    TimeFramePickerVisualTestComponent,\n    TimeframeServiceScoperExampleComponent,\n} from \"./index\";\n\nconst routes = [\n    {\n        path: \"\",\n        component: TimeFramePickerDocsExampleComponent,\n        data: {\n            \"srlc\": {\n                \"stage\": SrlcStage.ga,\n            },\n            showThemeSwitcher: true,\n        },\n    },\n    {\n        path: \"time-frame-picker-test\",\n        component: TimeFramePickerTestExampleComponent,\n        data: {\n            \"srlc\": {\n                \"hideIndicator\": true,\n            },\n        },\n    },\n    {\n        path: \"time-frame-picker-visual-test\",\n        component: TimeFramePickerVisualTestComponent,\n        data: {\n            \"srlc\": {\n                \"hideIndicator\": true,\n            },\n        },\n    },\n    {\n        path: \"multiple-custom-pickers\",\n        component: TimeFramePickerMultipleCustomPickersExampleComponent,\n        data: {\n            \"srlc\": {\n                \"hideIndicator\": true,\n            },\n        },\n    },\n];\n\n@NgModule({\n    imports: [\n        NuiButtonModule,\n        NuiTimeFramePickerModule,\n        NuiDividerModule,\n        NuiMessageModule,\n        FormsModule,\n        NuiPopoverModule,\n        NuiDocsModule,\n        NuiTextboxModule,\n        RouterModule.forChild(routes),\n        NuiDialogModule,\n        NuiDatePickerModule,\n    ],\n    declarations: [\n        QuickPickerBasicExampleComponent,\n        TimeFramePickerBasicExampleComponent,\n        TimeFramePickerCustomExampleComponent,\n        TimeFramePickerDateExampleComponent,\n        TimeFramePickerInlineExampleComponent,\n        TimeFramePickerTestExampleComponent,\n        TimeFramePickerDocsExampleComponent,\n        TimeFramePickerVisualTestComponent,\n        TimeFramePickerMultipleCustomPickersExampleComponent,\n        TimeframeServiceScoperExampleComponent,\n    ],\n    providers: [\n        {\n            provide: DEMO_PATH_TOKEN,\n            useFactory: () => (<any>require).context(`!!raw-loader!./`, true, /.*\\.(ts|html|less)$/),\n        },\n    ],\n    exports: [\n        RouterModule,\n    ],\n})\nexport class TimeFramePickerModule {\n}\n"]}