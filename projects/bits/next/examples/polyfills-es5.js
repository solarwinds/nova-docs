(function () {
  function _wrapNativeSuper(Class) { var _cache = typeof Map === "function" ? new Map() : undefined; _wrapNativeSuper = function _wrapNativeSuper(Class) { if (Class === null || !_isNativeFunction(Class)) return Class; if (typeof Class !== "function") { throw new TypeError("Super expression must either be null or a function"); } if (typeof _cache !== "undefined") { if (_cache.has(Class)) return _cache.get(Class); _cache.set(Class, Wrapper); } function Wrapper() { return _construct(Class, arguments, _getPrototypeOf(this).constructor); } Wrapper.prototype = Object.create(Class.prototype, { constructor: { value: Wrapper, enumerable: false, writable: true, configurable: true } }); return _setPrototypeOf(Wrapper, Class); }; return _wrapNativeSuper(Class); }

  function _isNativeFunction(fn) { return Function.toString.call(fn).indexOf("[native code]") !== -1; }

  function _defineProperty2(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

  function _toArray(arr) { return _arrayWithHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableRest(); }

  function _construct(Parent, args, Class) { if (_isNativeReflectConstruct()) { _construct = Reflect.construct; } else { _construct = function _construct(Parent, args, Class) { var a = [null]; a.push.apply(a, args); var Constructor = Function.bind.apply(Parent, a); var instance = new Constructor(); if (Class) _setPrototypeOf(instance, Class.prototype); return instance; }; } return _construct.apply(null, arguments); }

  function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

  function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

  function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

  function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

  function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

  function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

  function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

  function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

  function _possibleConstructorReturn(self, call) { if (call && (typeof call === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

  function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

  function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

  function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

  function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

  function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter); }

  function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

  function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

  function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

  (window["webpackJsonp"] = window["webpackJsonp"] || []).push([["polyfills-es5"], {
    /***/
    "+5Eg":
    /*!***************************************************************************************************!*\
      !*** ./node_modules/@angular-devkit/build-angular/node_modules/core-js/modules/es.object.seal.js ***!
      \***************************************************************************************************/

    /*! no static exports found */

    /***/
    function Eg(module, exports, __webpack_require__) {
      var $ = __webpack_require__(
      /*! ../internals/export */
      "wA6s");

      var isObject = __webpack_require__(
      /*! ../internals/is-object */
      "6XUM");

      var onFreeze = __webpack_require__(
      /*! ../internals/internal-metadata */
      "M7Xk").onFreeze;

      var FREEZING = __webpack_require__(
      /*! ../internals/freezing */
      "cZY6");

      var fails = __webpack_require__(
      /*! ../internals/fails */
      "rG8t");

      var nativeSeal = Object.seal;
      var FAILS_ON_PRIMITIVES = fails(function () {
        nativeSeal(1);
      }); // `Object.seal` method
      // https://tc39.es/ecma262/#sec-object.seal

      $({
        target: 'Object',
        stat: true,
        forced: FAILS_ON_PRIMITIVES,
        sham: !FREEZING
      }, {
        seal: function seal(it) {
          return nativeSeal && isObject(it) ? nativeSeal(onFreeze(it)) : it;
        }
      });
      /***/
    },

    /***/
    "+IJR":
    /*!*****************************************************************************************************!*\
      !*** ./node_modules/@angular-devkit/build-angular/node_modules/core-js/modules/es.number.is-nan.js ***!
      \*****************************************************************************************************/

    /*! no static exports found */

    /***/
    function IJR(module, exports, __webpack_require__) {
      var $ = __webpack_require__(
      /*! ../internals/export */
      "wA6s"); // `Number.isNaN` method
      // https://tc39.es/ecma262/#sec-number.isnan


      $({
        target: 'Number',
        stat: true
      }, {
        isNaN: function isNaN(number) {
          // eslint-disable-next-line no-self-compare
          return number != number;
        }
      });
      /***/
    },

    /***/
    "+lvF":
    /*!*************************************************************!*\
      !*** ./node_modules/core-js/modules/_function-to-string.js ***!
      \*************************************************************/

    /*! no static exports found */

    /***/
    function lvF(module, exports, __webpack_require__) {
      module.exports = __webpack_require__(
      /*! ./_shared */
      "VTer")('native-function-to-string', Function.toString);
      /***/
    },

    /***/
    "+rLv":
    /*!***********************************************!*\
      !*** ./node_modules/core-js/modules/_html.js ***!
      \***********************************************/

    /*! no static exports found */

    /***/
    function rLv(module, exports, __webpack_require__) {
      var document = __webpack_require__(
      /*! ./_global */
      "dyZX").document;

      module.exports = document && document.documentElement;
      /***/
    },

    /***/
    "/AsP":
    /*!*************************************************************************************************!*\
      !*** ./node_modules/@angular-devkit/build-angular/node_modules/core-js/internals/shared-key.js ***!
      \*************************************************************************************************/

    /*! no static exports found */

    /***/
    function AsP(module, exports, __webpack_require__) {
      var shared = __webpack_require__(
      /*! ../internals/shared */
      "yIiL");

      var uid = __webpack_require__(
      /*! ../internals/uid */
      "SDMg");

      var keys = shared('keys');

      module.exports = function (key) {
        return keys[key] || (keys[key] = uid(key));
      };
      /***/

    },

    /***/
    "/Ybd":
    /*!*************************************************************************************************************!*\
      !*** ./node_modules/@angular-devkit/build-angular/node_modules/core-js/internals/object-define-property.js ***!
      \*************************************************************************************************************/

    /*! no static exports found */

    /***/
    function Ybd(module, exports, __webpack_require__) {
      var DESCRIPTORS = __webpack_require__(
      /*! ../internals/descriptors */
      "T69T");

      var IE8_DOM_DEFINE = __webpack_require__(
      /*! ../internals/ie8-dom-define */
      "XdSI");

      var anObject = __webpack_require__(
      /*! ../internals/an-object */
      "F26l");

      var toPrimitive = __webpack_require__(
      /*! ../internals/to-primitive */
      "LdO1");

      var nativeDefineProperty = Object.defineProperty; // `Object.defineProperty` method
      // https://tc39.es/ecma262/#sec-object.defineproperty

      exports.f = DESCRIPTORS ? nativeDefineProperty : function defineProperty(O, P, Attributes) {
        anObject(O);
        P = toPrimitive(P, true);
        anObject(Attributes);
        if (IE8_DOM_DEFINE) try {
          return nativeDefineProperty(O, P, Attributes);
        } catch (error) {
          /* empty */
        }
        if ('get' in Attributes || 'set' in Attributes) throw TypeError('Accessors not supported');
        if ('value' in Attributes) O[P] = Attributes.value;
        return O;
      };
      /***/
    },

    /***/
    "0/R4":
    /*!****************************************************!*\
      !*** ./node_modules/core-js/modules/_is-object.js ***!
      \****************************************************/

    /*! no static exports found */

    /***/
    function R4(module, exports) {
      module.exports = function (it) {
        return typeof it === 'object' ? it !== null : typeof it === 'function';
      };
      /***/

    },

    /***/
    "0Ds2":
    /*!**************************************************************************************************************!*\
      !*** ./node_modules/@angular-devkit/build-angular/node_modules/core-js/internals/correct-is-regexp-logic.js ***!
      \**************************************************************************************************************/

    /*! no static exports found */

    /***/
    function Ds2(module, exports, __webpack_require__) {
      var wellKnownSymbol = __webpack_require__(
      /*! ../internals/well-known-symbol */
      "m41k");

      var MATCH = wellKnownSymbol('match');

      module.exports = function (METHOD_NAME) {
        var regexp = /./;

        try {
          '/./'[METHOD_NAME](regexp);
        } catch (error1) {
          try {
            regexp[MATCH] = false;
            return '/./'[METHOD_NAME](regexp);
          } catch (error2) {
            /* empty */
          }
        }

        return false;
      };
      /***/

    },

    /***/
    "0luR":
    /*!**********************************************************************************************************!*\
      !*** ./node_modules/@angular-devkit/build-angular/node_modules/core-js/modules/es.symbol.description.js ***!
      \**********************************************************************************************************/

    /*! no static exports found */

    /***/
    function luR(module, exports, __webpack_require__) {
      "use strict"; // `Symbol.prototype.description` getter
      // https://tc39.es/ecma262/#sec-symbol.prototype.description

      var $ = __webpack_require__(
      /*! ../internals/export */
      "wA6s");

      var DESCRIPTORS = __webpack_require__(
      /*! ../internals/descriptors */
      "T69T");

      var global = __webpack_require__(
      /*! ../internals/global */
      "ocAm");

      var has = __webpack_require__(
      /*! ../internals/has */
      "OG5q");

      var isObject = __webpack_require__(
      /*! ../internals/is-object */
      "6XUM");

      var defineProperty = __webpack_require__(
      /*! ../internals/object-define-property */
      "/Ybd").f;

      var copyConstructorProperties = __webpack_require__(
      /*! ../internals/copy-constructor-properties */
      "NIlc");

      var NativeSymbol = global.Symbol;

      if (DESCRIPTORS && typeof NativeSymbol == 'function' && (!('description' in NativeSymbol.prototype) || // Safari 12 bug
      NativeSymbol().description !== undefined)) {
        var EmptyStringDescriptionStore = {}; // wrap Symbol constructor for correct work with undefined description

        var SymbolWrapper = function Symbol() {
          var description = arguments.length < 1 || arguments[0] === undefined ? undefined : String(arguments[0]);
          var result = this instanceof SymbolWrapper ? new NativeSymbol(description) // in Edge 13, String(Symbol(undefined)) === 'Symbol(undefined)'
          : description === undefined ? NativeSymbol() : NativeSymbol(description);
          if (description === '') EmptyStringDescriptionStore[result] = true;
          return result;
        };

        copyConstructorProperties(SymbolWrapper, NativeSymbol);
        var symbolPrototype = SymbolWrapper.prototype = NativeSymbol.prototype;
        symbolPrototype.constructor = SymbolWrapper;
        var symbolToString = symbolPrototype.toString;

        var _native = String(NativeSymbol('test')) == 'Symbol(test)';

        var regexp = /^Symbol\((.*)\)[^)]+$/;
        defineProperty(symbolPrototype, 'description', {
          configurable: true,
          get: function description() {
            var symbol = isObject(this) ? this.valueOf() : this;
            var string = symbolToString.call(symbol);
            if (has(EmptyStringDescriptionStore, symbol)) return '';
            var desc = _native ? string.slice(7, -1) : string.replace(regexp, '$1');
            return desc === '' ? undefined : desc;
          }
        });
        $({
          global: true,
          forced: true
        }, {
          Symbol: SymbolWrapper
        });
      }
      /***/

    },

    /***/
    1:
    /*!****************************************************************************************************************************************!*\
      !*** multi ./node_modules/@angular-devkit/build-angular/src/webpack/es5-polyfills.js zone.js/dist/zone-legacy ./demo/src/polyfills.ts ***!
      \****************************************************************************************************************************************/

    /*! no static exports found */

    /***/
    function _(module, exports, __webpack_require__) {
      __webpack_require__(
      /*! /home/circleci/nova/packages/bits/node_modules/@angular-devkit/build-angular/src/webpack/es5-polyfills.js */
      "voQr");

      __webpack_require__(
      /*! zone.js/dist/zone-legacy */
      "R0gw");

      module.exports = __webpack_require__(
      /*! /home/circleci/nova/packages/bits/demo/src/polyfills.ts */
      "ltqb");
      /***/
    },

    /***/
    "149L":
    /*!*******************************************************************************************!*\
      !*** ./node_modules/@angular-devkit/build-angular/node_modules/core-js/internals/html.js ***!
      \*******************************************************************************************/

    /*! no static exports found */

    /***/
    function L(module, exports, __webpack_require__) {
      var getBuiltIn = __webpack_require__(
      /*! ../internals/get-built-in */
      "Ew/G");

      module.exports = getBuiltIn('document', 'documentElement');
      /***/
    },

    /***/
    "1TsA":
    /*!****************************************************!*\
      !*** ./node_modules/core-js/modules/_iter-step.js ***!
      \****************************************************/

    /*! no static exports found */

    /***/
    function TsA(module, exports) {
      module.exports = function (done, value) {
        return {
          value: value,
          done: !!done
        };
      };
      /***/

    },

    /***/
    "1p6F":
    /*!************************************************************************************************!*\
      !*** ./node_modules/@angular-devkit/build-angular/node_modules/core-js/internals/is-regexp.js ***!
      \************************************************************************************************/

    /*! no static exports found */

    /***/
    function p6F(module, exports, __webpack_require__) {
      var isObject = __webpack_require__(
      /*! ../internals/is-object */
      "6XUM");

      var classof = __webpack_require__(
      /*! ../internals/classof-raw */
      "ezU2");

      var wellKnownSymbol = __webpack_require__(
      /*! ../internals/well-known-symbol */
      "m41k");

      var MATCH = wellKnownSymbol('match'); // `IsRegExp` abstract operation
      // https://tc39.es/ecma262/#sec-isregexp

      module.exports = function (it) {
        var isRegExp;
        return isObject(it) && ((isRegExp = it[MATCH]) !== undefined ? !!isRegExp : classof(it) == 'RegExp');
      };
      /***/

    },

    /***/
    "1uSB":
    /*!*************************************************************!*\
      !*** ./node_modules/@angular/compiler/fesm2015/compiler.js ***!
      \*************************************************************/

    /*! exports provided: AST, ASTWithName, ASTWithSource, AbsoluteSourceSpan, AotCompiler, AotSummaryResolver, ArrayType, AssertNotNull, AstMemoryEfficientTransformer, AstPath, AstTransformer, AttrAst, Attribute, Binary, BinaryOperator, BinaryOperatorExpr, BindingPipe, BoundDirectivePropertyAst, BoundElementProperty, BoundElementPropertyAst, BoundEventAst, BoundTextAst, BuiltinMethod, BuiltinType, BuiltinTypeName, BuiltinVar, CONTENT_ATTR, CUSTOM_ELEMENTS_SCHEMA, CastExpr, Chain, ClassField, ClassMethod, ClassStmt, CommaExpr, Comment, CompileDirectiveMetadata, CompileMetadataResolver, CompileNgModuleMetadata, CompilePipeMetadata, CompileReflector, CompileShallowModuleMetadata, CompileStylesheetMetadata, CompileSummaryKind, CompileTemplateMetadata, CompiledStylesheet, CompilerConfig, Conditional, ConditionalExpr, ConstantPool, CssSelector, DEFAULT_INTERPOLATION_CONFIG, DYNAMIC_TYPE, DeclareFunctionStmt, DeclareVarStmt, DirectiveAst, DirectiveNormalizer, DirectiveResolver, DomElementSchemaRegistry, EOF, ERROR_COMPONENT_TYPE, Element, ElementAst, ElementSchemaRegistry, EmbeddedTemplateAst, EmitterVisitorContext, EmptyExpr, Expansion, ExpansionCase, Expression, ExpressionBinding, ExpressionStatement, ExpressionType, ExternalExpr, ExternalReference, Extractor, FunctionCall, FunctionExpr, GeneratedFile, HOST_ATTR, HtmlParser, HtmlTagDefinition, I18NHtmlParser, Identifiers, IfStmt, ImplicitReceiver, InstantiateExpr, Interpolation, InterpolationConfig, InvokeFunctionExpr, InvokeMethodExpr, IvyParser, JSDocComment, JitCompiler, JitEvaluator, JitSummaryResolver, KeyedRead, KeyedWrite, LeadingComment, Lexer, LiteralArray, LiteralArrayExpr, LiteralExpr, LiteralMap, LiteralMapExpr, LiteralPrimitive, LocalizedString, MapType, MessageBundle, MethodCall, NAMED_ENTITIES, NGSP_UNICODE, NONE_TYPE, NO_ERRORS_SCHEMA, NgContentAst, NgModuleCompiler, NgModuleResolver, NodeWithI18n, NonNullAssert, NotExpr, NullTemplateVisitor, ParseError, ParseErrorLevel, ParseLocation, ParseSourceFile, ParseSourceSpan, ParseSpan, ParseTreeResult, ParsedEvent, ParsedProperty, ParsedPropertyType, ParsedVariable, Parser, ParserError, PipeResolver, PrefixNot, PropertyRead, PropertyWrite, ProviderAst, ProviderAstType, ProviderMeta, Quote, R3BoundTarget, R3FactoryTarget, R3Identifiers, R3ResolvedDependencyType, R3TargetBinder, ReadKeyExpr, ReadPropExpr, ReadVarExpr, RecursiveAstVisitor, RecursiveTemplateAstVisitor, RecursiveVisitor, ReferenceAst, ResolvedStaticSymbol, ResourceLoader, ReturnStatement, STRING_TYPE, SafeMethodCall, SafePropertyRead, SelectorContext, SelectorListContext, SelectorMatcher, Serializer, SplitInterpolation, Statement, StaticReflector, StaticSymbol, StaticSymbolCache, StaticSymbolResolver, StmtModifier, StyleCompiler, StylesCompileDependency, SummaryResolver, TagContentType, TaggedTemplateExpr, TemplateBindingParseResult, TemplateLiteral, TemplateLiteralElement, TemplateParseError, TemplateParseResult, TemplateParser, Text, TextAst, ThisReceiver, ThrowStmt, TmplAstBoundAttribute, TmplAstBoundEvent, TmplAstBoundText, TmplAstContent, TmplAstElement, TmplAstIcu, TmplAstRecursiveVisitor, TmplAstReference, TmplAstTemplate, TmplAstText, TmplAstTextAttribute, TmplAstVariable, Token, TokenType, TransitiveCompileNgModuleMetadata, TreeError, TryCatchStmt, Type, TypeScriptEmitter, TypeofExpr, Unary, UnaryOperator, UnaryOperatorExpr, UrlResolver, VERSION, VariableAst, VariableBinding, Version, ViewCompiler, WrappedNodeExpr, WriteKeyExpr, WritePropExpr, WriteVarExpr, Xliff, Xliff2, Xmb, XmlParser, Xtb, _ParseAST, analyzeAndValidateNgModules, analyzeFile, analyzeFileForInjectables, analyzeNgModules, collectExternalReferences, compileComponentFromMetadata, compileDeclareComponentFromMetadata, compileDeclareDirectiveFromMetadata, compileDeclarePipeFromMetadata, compileDirectiveFromMetadata, compileFactoryFunction, compileInjectable, compileInjector, compileNgModule, compilePipeFromMetadata, componentFactoryName, computeMsgId, core, createAotCompiler, createAotUrlResolver, createElementCssSelector, createLoweredSymbol, createOfflineCompileUrlResolver, createUrlResolverWithoutPackagePrefix, debugOutputAstAsTypeScript, devOnlyGuardedExpression, findNode, flatten, formattedError, getHtmlTagDefinition, getNsPrefix, getParseErrors, getSafePropertyAccessString, getUrlScheme, hostViewClassName, identifierModuleUrl, identifierName, isEmptyExpression, isFormattedError, isIdentifier, isLoweredSymbol, isNgContainer, isNgContent, isNgTemplate, isQuote, isSyntaxError, jsDocComment, leadingComment, literalMap, makeBindingParser, mergeAnalyzedFiles, mergeNsAndName, ngModuleJitUrl, parseHostBindings, parseTemplate, preserveWhitespacesDefault, publishFacade, r3JitTypeSourceSpan, removeSummaryDuplicates, rendererTypeName, sanitizeIdentifier, sharedStylesheetJitUrl, splitClasses, splitNsName, syntaxError, templateJitUrl, templateSourceUrl, templateVisitAll, toTypeScript, tokenName, tokenReference, typeSourceSpan, unescapeIdentifier, unwrapResolvedMetadata, verifyHostBindings, viewClassName, visitAll */

    /***/
    function uSB(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      var _BoundPropertyMapping;

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "AST", function () {
        return AST;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ASTWithName", function () {
        return ASTWithName;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ASTWithSource", function () {
        return ASTWithSource;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "AbsoluteSourceSpan", function () {
        return AbsoluteSourceSpan;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "AotCompiler", function () {
        return AotCompiler;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "AotSummaryResolver", function () {
        return AotSummaryResolver;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ArrayType", function () {
        return ArrayType;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "AssertNotNull", function () {
        return AssertNotNull;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "AstMemoryEfficientTransformer", function () {
        return AstMemoryEfficientTransformer;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "AstPath", function () {
        return AstPath;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "AstTransformer", function () {
        return AstTransformer$1;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "AttrAst", function () {
        return AttrAst;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "Attribute", function () {
        return Attribute;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "Binary", function () {
        return Binary;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "BinaryOperator", function () {
        return BinaryOperator;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "BinaryOperatorExpr", function () {
        return BinaryOperatorExpr;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "BindingPipe", function () {
        return BindingPipe;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "BoundDirectivePropertyAst", function () {
        return BoundDirectivePropertyAst;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "BoundElementProperty", function () {
        return BoundElementProperty;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "BoundElementPropertyAst", function () {
        return BoundElementPropertyAst;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "BoundEventAst", function () {
        return BoundEventAst;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "BoundTextAst", function () {
        return BoundTextAst;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "BuiltinMethod", function () {
        return BuiltinMethod;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "BuiltinType", function () {
        return BuiltinType;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "BuiltinTypeName", function () {
        return BuiltinTypeName;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "BuiltinVar", function () {
        return BuiltinVar;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "CONTENT_ATTR", function () {
        return CONTENT_ATTR;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "CUSTOM_ELEMENTS_SCHEMA", function () {
        return CUSTOM_ELEMENTS_SCHEMA;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "CastExpr", function () {
        return CastExpr;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "Chain", function () {
        return Chain;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ClassField", function () {
        return ClassField;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ClassMethod", function () {
        return ClassMethod;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ClassStmt", function () {
        return ClassStmt;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "CommaExpr", function () {
        return CommaExpr;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "Comment", function () {
        return Comment;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "CompileDirectiveMetadata", function () {
        return CompileDirectiveMetadata;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "CompileMetadataResolver", function () {
        return CompileMetadataResolver;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "CompileNgModuleMetadata", function () {
        return CompileNgModuleMetadata;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "CompilePipeMetadata", function () {
        return CompilePipeMetadata;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "CompileReflector", function () {
        return CompileReflector;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "CompileShallowModuleMetadata", function () {
        return CompileShallowModuleMetadata;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "CompileStylesheetMetadata", function () {
        return CompileStylesheetMetadata;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "CompileSummaryKind", function () {
        return CompileSummaryKind;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "CompileTemplateMetadata", function () {
        return CompileTemplateMetadata;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "CompiledStylesheet", function () {
        return CompiledStylesheet;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "CompilerConfig", function () {
        return CompilerConfig;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "Conditional", function () {
        return Conditional;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ConditionalExpr", function () {
        return ConditionalExpr;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ConstantPool", function () {
        return ConstantPool;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "CssSelector", function () {
        return CssSelector;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "DEFAULT_INTERPOLATION_CONFIG", function () {
        return DEFAULT_INTERPOLATION_CONFIG;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "DYNAMIC_TYPE", function () {
        return DYNAMIC_TYPE;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "DeclareFunctionStmt", function () {
        return DeclareFunctionStmt;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "DeclareVarStmt", function () {
        return DeclareVarStmt;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "DirectiveAst", function () {
        return DirectiveAst;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "DirectiveNormalizer", function () {
        return DirectiveNormalizer;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "DirectiveResolver", function () {
        return DirectiveResolver;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "DomElementSchemaRegistry", function () {
        return DomElementSchemaRegistry;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "EOF", function () {
        return EOF;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ERROR_COMPONENT_TYPE", function () {
        return ERROR_COMPONENT_TYPE;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "Element", function () {
        return Element$1;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ElementAst", function () {
        return ElementAst;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ElementSchemaRegistry", function () {
        return ElementSchemaRegistry;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "EmbeddedTemplateAst", function () {
        return EmbeddedTemplateAst;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "EmitterVisitorContext", function () {
        return EmitterVisitorContext;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "EmptyExpr", function () {
        return EmptyExpr;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "Expansion", function () {
        return Expansion;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ExpansionCase", function () {
        return ExpansionCase;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "Expression", function () {
        return Expression;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ExpressionBinding", function () {
        return ExpressionBinding;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ExpressionStatement", function () {
        return ExpressionStatement;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ExpressionType", function () {
        return ExpressionType;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ExternalExpr", function () {
        return ExternalExpr;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ExternalReference", function () {
        return ExternalReference;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "Extractor", function () {
        return Extractor;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "FunctionCall", function () {
        return FunctionCall;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "FunctionExpr", function () {
        return FunctionExpr;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "GeneratedFile", function () {
        return GeneratedFile;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "HOST_ATTR", function () {
        return HOST_ATTR;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "HtmlParser", function () {
        return HtmlParser;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "HtmlTagDefinition", function () {
        return HtmlTagDefinition;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "I18NHtmlParser", function () {
        return I18NHtmlParser;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "Identifiers", function () {
        return Identifiers;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "IfStmt", function () {
        return IfStmt;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ImplicitReceiver", function () {
        return ImplicitReceiver;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "InstantiateExpr", function () {
        return InstantiateExpr;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "Interpolation", function () {
        return Interpolation;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "InterpolationConfig", function () {
        return InterpolationConfig;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "InvokeFunctionExpr", function () {
        return InvokeFunctionExpr;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "InvokeMethodExpr", function () {
        return InvokeMethodExpr;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "IvyParser", function () {
        return IvyParser;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "JSDocComment", function () {
        return JSDocComment;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "JitCompiler", function () {
        return JitCompiler;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "JitEvaluator", function () {
        return JitEvaluator;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "JitSummaryResolver", function () {
        return JitSummaryResolver;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "KeyedRead", function () {
        return KeyedRead;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "KeyedWrite", function () {
        return KeyedWrite;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "LeadingComment", function () {
        return LeadingComment;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "Lexer", function () {
        return Lexer;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "LiteralArray", function () {
        return LiteralArray;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "LiteralArrayExpr", function () {
        return LiteralArrayExpr;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "LiteralExpr", function () {
        return LiteralExpr;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "LiteralMap", function () {
        return LiteralMap;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "LiteralMapExpr", function () {
        return LiteralMapExpr;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "LiteralPrimitive", function () {
        return LiteralPrimitive;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "LocalizedString", function () {
        return LocalizedString;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "MapType", function () {
        return MapType;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "MessageBundle", function () {
        return MessageBundle;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "MethodCall", function () {
        return MethodCall;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "NAMED_ENTITIES", function () {
        return NAMED_ENTITIES;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "NGSP_UNICODE", function () {
        return NGSP_UNICODE;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "NONE_TYPE", function () {
        return NONE_TYPE;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "NO_ERRORS_SCHEMA", function () {
        return NO_ERRORS_SCHEMA;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "NgContentAst", function () {
        return NgContentAst;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "NgModuleCompiler", function () {
        return NgModuleCompiler;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "NgModuleResolver", function () {
        return NgModuleResolver;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "NodeWithI18n", function () {
        return NodeWithI18n;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "NonNullAssert", function () {
        return NonNullAssert;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "NotExpr", function () {
        return NotExpr;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "NullTemplateVisitor", function () {
        return NullTemplateVisitor;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ParseError", function () {
        return ParseError;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ParseErrorLevel", function () {
        return ParseErrorLevel;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ParseLocation", function () {
        return ParseLocation;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ParseSourceFile", function () {
        return ParseSourceFile;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ParseSourceSpan", function () {
        return ParseSourceSpan;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ParseSpan", function () {
        return ParseSpan;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ParseTreeResult", function () {
        return ParseTreeResult;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ParsedEvent", function () {
        return ParsedEvent;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ParsedProperty", function () {
        return ParsedProperty;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ParsedPropertyType", function () {
        return ParsedPropertyType;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ParsedVariable", function () {
        return ParsedVariable;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "Parser", function () {
        return Parser$1;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ParserError", function () {
        return ParserError;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "PipeResolver", function () {
        return PipeResolver;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "PrefixNot", function () {
        return PrefixNot;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "PropertyRead", function () {
        return PropertyRead;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "PropertyWrite", function () {
        return PropertyWrite;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ProviderAst", function () {
        return ProviderAst;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ProviderAstType", function () {
        return ProviderAstType;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ProviderMeta", function () {
        return ProviderMeta;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "Quote", function () {
        return Quote;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "R3BoundTarget", function () {
        return R3BoundTarget;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "R3FactoryTarget", function () {
        return R3FactoryTarget;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "R3Identifiers", function () {
        return Identifiers$1;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "R3ResolvedDependencyType", function () {
        return R3ResolvedDependencyType;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "R3TargetBinder", function () {
        return R3TargetBinder;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ReadKeyExpr", function () {
        return ReadKeyExpr;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ReadPropExpr", function () {
        return ReadPropExpr;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ReadVarExpr", function () {
        return ReadVarExpr;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "RecursiveAstVisitor", function () {
        return RecursiveAstVisitor$1;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "RecursiveTemplateAstVisitor", function () {
        return RecursiveTemplateAstVisitor;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "RecursiveVisitor", function () {
        return RecursiveVisitor$1;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ReferenceAst", function () {
        return ReferenceAst;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ResolvedStaticSymbol", function () {
        return ResolvedStaticSymbol;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ResourceLoader", function () {
        return ResourceLoader;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ReturnStatement", function () {
        return ReturnStatement;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "STRING_TYPE", function () {
        return STRING_TYPE;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "SafeMethodCall", function () {
        return SafeMethodCall;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "SafePropertyRead", function () {
        return SafePropertyRead;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "SelectorContext", function () {
        return SelectorContext;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "SelectorListContext", function () {
        return SelectorListContext;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "SelectorMatcher", function () {
        return SelectorMatcher;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "Serializer", function () {
        return Serializer;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "SplitInterpolation", function () {
        return SplitInterpolation;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "Statement", function () {
        return Statement;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "StaticReflector", function () {
        return StaticReflector;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "StaticSymbol", function () {
        return StaticSymbol;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "StaticSymbolCache", function () {
        return StaticSymbolCache;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "StaticSymbolResolver", function () {
        return StaticSymbolResolver;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "StmtModifier", function () {
        return StmtModifier;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "StyleCompiler", function () {
        return StyleCompiler;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "StylesCompileDependency", function () {
        return StylesCompileDependency;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "SummaryResolver", function () {
        return SummaryResolver;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "TagContentType", function () {
        return TagContentType;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "TaggedTemplateExpr", function () {
        return TaggedTemplateExpr;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "TemplateBindingParseResult", function () {
        return TemplateBindingParseResult;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "TemplateLiteral", function () {
        return TemplateLiteral;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "TemplateLiteralElement", function () {
        return TemplateLiteralElement;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "TemplateParseError", function () {
        return TemplateParseError;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "TemplateParseResult", function () {
        return TemplateParseResult;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "TemplateParser", function () {
        return TemplateParser;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "Text", function () {
        return Text$3;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "TextAst", function () {
        return TextAst;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ThisReceiver", function () {
        return ThisReceiver;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ThrowStmt", function () {
        return ThrowStmt;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "TmplAstBoundAttribute", function () {
        return BoundAttribute;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "TmplAstBoundEvent", function () {
        return BoundEvent;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "TmplAstBoundText", function () {
        return BoundText;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "TmplAstContent", function () {
        return Content;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "TmplAstElement", function () {
        return Element;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "TmplAstIcu", function () {
        return Icu;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "TmplAstRecursiveVisitor", function () {
        return RecursiveVisitor;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "TmplAstReference", function () {
        return Reference;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "TmplAstTemplate", function () {
        return Template;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "TmplAstText", function () {
        return Text;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "TmplAstTextAttribute", function () {
        return TextAttribute;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "TmplAstVariable", function () {
        return Variable;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "Token", function () {
        return Token$1;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "TokenType", function () {
        return TokenType$1;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "TransitiveCompileNgModuleMetadata", function () {
        return TransitiveCompileNgModuleMetadata;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "TreeError", function () {
        return TreeError;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "TryCatchStmt", function () {
        return TryCatchStmt;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "Type", function () {
        return Type$1;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "TypeScriptEmitter", function () {
        return TypeScriptEmitter;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "TypeofExpr", function () {
        return TypeofExpr;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "Unary", function () {
        return Unary;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "UnaryOperator", function () {
        return UnaryOperator;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "UnaryOperatorExpr", function () {
        return UnaryOperatorExpr;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "UrlResolver", function () {
        return UrlResolver;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "VERSION", function () {
        return VERSION$1;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "VariableAst", function () {
        return VariableAst;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "VariableBinding", function () {
        return VariableBinding;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "Version", function () {
        return Version;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ViewCompiler", function () {
        return ViewCompiler;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "WrappedNodeExpr", function () {
        return WrappedNodeExpr;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "WriteKeyExpr", function () {
        return WriteKeyExpr;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "WritePropExpr", function () {
        return WritePropExpr;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "WriteVarExpr", function () {
        return WriteVarExpr;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "Xliff", function () {
        return Xliff;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "Xliff2", function () {
        return Xliff2;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "Xmb", function () {
        return Xmb;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "XmlParser", function () {
        return XmlParser;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "Xtb", function () {
        return Xtb;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "_ParseAST", function () {
        return _ParseAST;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "analyzeAndValidateNgModules", function () {
        return analyzeAndValidateNgModules;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "analyzeFile", function () {
        return analyzeFile;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "analyzeFileForInjectables", function () {
        return analyzeFileForInjectables;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "analyzeNgModules", function () {
        return analyzeNgModules;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "collectExternalReferences", function () {
        return collectExternalReferences;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "compileComponentFromMetadata", function () {
        return compileComponentFromMetadata;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "compileDeclareComponentFromMetadata", function () {
        return compileDeclareComponentFromMetadata;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "compileDeclareDirectiveFromMetadata", function () {
        return compileDeclareDirectiveFromMetadata;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "compileDeclarePipeFromMetadata", function () {
        return compileDeclarePipeFromMetadata;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "compileDirectiveFromMetadata", function () {
        return compileDirectiveFromMetadata;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "compileFactoryFunction", function () {
        return compileFactoryFunction;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "compileInjectable", function () {
        return _compileInjectable;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "compileInjector", function () {
        return _compileInjector;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "compileNgModule", function () {
        return _compileNgModule;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "compilePipeFromMetadata", function () {
        return compilePipeFromMetadata;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "componentFactoryName", function () {
        return componentFactoryName;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "computeMsgId", function () {
        return computeMsgId;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "core", function () {
        return core;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "createAotCompiler", function () {
        return createAotCompiler;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "createAotUrlResolver", function () {
        return createAotUrlResolver;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "createElementCssSelector", function () {
        return createElementCssSelector;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "createLoweredSymbol", function () {
        return createLoweredSymbol;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "createOfflineCompileUrlResolver", function () {
        return createOfflineCompileUrlResolver;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "createUrlResolverWithoutPackagePrefix", function () {
        return createUrlResolverWithoutPackagePrefix;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "debugOutputAstAsTypeScript", function () {
        return debugOutputAstAsTypeScript;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "devOnlyGuardedExpression", function () {
        return devOnlyGuardedExpression;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "findNode", function () {
        return findNode;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "flatten", function () {
        return flatten;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "formattedError", function () {
        return formattedError;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "getHtmlTagDefinition", function () {
        return getHtmlTagDefinition;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "getNsPrefix", function () {
        return getNsPrefix;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "getParseErrors", function () {
        return getParseErrors;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "getSafePropertyAccessString", function () {
        return getSafePropertyAccessString;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "getUrlScheme", function () {
        return getUrlScheme;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "hostViewClassName", function () {
        return hostViewClassName;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "identifierModuleUrl", function () {
        return identifierModuleUrl;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "identifierName", function () {
        return identifierName;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "isEmptyExpression", function () {
        return isEmptyExpression;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "isFormattedError", function () {
        return isFormattedError;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "isIdentifier", function () {
        return isIdentifier;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "isLoweredSymbol", function () {
        return isLoweredSymbol;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "isNgContainer", function () {
        return isNgContainer;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "isNgContent", function () {
        return isNgContent;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "isNgTemplate", function () {
        return isNgTemplate;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "isQuote", function () {
        return isQuote;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "isSyntaxError", function () {
        return isSyntaxError;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "jsDocComment", function () {
        return jsDocComment;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "leadingComment", function () {
        return leadingComment;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "literalMap", function () {
        return literalMap;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "makeBindingParser", function () {
        return makeBindingParser;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "mergeAnalyzedFiles", function () {
        return mergeAnalyzedFiles;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "mergeNsAndName", function () {
        return mergeNsAndName;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ngModuleJitUrl", function () {
        return ngModuleJitUrl;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "parseHostBindings", function () {
        return parseHostBindings;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "parseTemplate", function () {
        return parseTemplate;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "preserveWhitespacesDefault", function () {
        return preserveWhitespacesDefault;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "publishFacade", function () {
        return publishFacade;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "r3JitTypeSourceSpan", function () {
        return r3JitTypeSourceSpan;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "removeSummaryDuplicates", function () {
        return removeSummaryDuplicates;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "rendererTypeName", function () {
        return rendererTypeName;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "sanitizeIdentifier", function () {
        return sanitizeIdentifier;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "sharedStylesheetJitUrl", function () {
        return sharedStylesheetJitUrl;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "splitClasses", function () {
        return splitClasses;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "splitNsName", function () {
        return splitNsName;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "syntaxError", function () {
        return syntaxError;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "templateJitUrl", function () {
        return templateJitUrl;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "templateSourceUrl", function () {
        return templateSourceUrl;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "templateVisitAll", function () {
        return templateVisitAll;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "toTypeScript", function () {
        return toTypeScript;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "tokenName", function () {
        return tokenName;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "tokenReference", function () {
        return tokenReference;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "typeSourceSpan", function () {
        return typeSourceSpan;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "unescapeIdentifier", function () {
        return unescapeIdentifier;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "unwrapResolvedMetadata", function () {
        return unwrapResolvedMetadata;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "verifyHostBindings", function () {
        return verifyHostBindings;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "viewClassName", function () {
        return viewClassName;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "visitAll", function () {
        return visitAll$1;
      });
      /**
       * @license Angular v11.2.4
       * (c) 2010-2021 Google LLC. https://angular.io/
       * License: MIT
       */

      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      var TagContentType;

      (function (TagContentType) {
        TagContentType[TagContentType["RAW_TEXT"] = 0] = "RAW_TEXT";
        TagContentType[TagContentType["ESCAPABLE_RAW_TEXT"] = 1] = "ESCAPABLE_RAW_TEXT";
        TagContentType[TagContentType["PARSABLE_DATA"] = 2] = "PARSABLE_DATA";
      })(TagContentType || (TagContentType = {}));

      function splitNsName(elementName) {
        if (elementName[0] != ':') {
          return [null, elementName];
        }

        var colonIndex = elementName.indexOf(':', 1);

        if (colonIndex == -1) {
          throw new Error("Unsupported format \"".concat(elementName, "\" expecting \":namespace:name\""));
        }

        return [elementName.slice(1, colonIndex), elementName.slice(colonIndex + 1)];
      } // `<ng-container>` tags work the same regardless the namespace


      function isNgContainer(tagName) {
        return splitNsName(tagName)[1] === 'ng-container';
      } // `<ng-content>` tags work the same regardless the namespace


      function isNgContent(tagName) {
        return splitNsName(tagName)[1] === 'ng-content';
      } // `<ng-template>` tags work the same regardless the namespace


      function isNgTemplate(tagName) {
        return splitNsName(tagName)[1] === 'ng-template';
      }

      function getNsPrefix(fullName) {
        return fullName === null ? null : splitNsName(fullName)[0];
      }

      function mergeNsAndName(prefix, localName) {
        return prefix ? ":".concat(prefix, ":").concat(localName) : localName;
      } // see https://www.w3.org/TR/html51/syntax.html#named-character-references
      // see https://html.spec.whatwg.org/multipage/entities.json
      // This list is not exhaustive to keep the compiler footprint low.
      // The `&#123;` / `&#x1ab;` syntax should be used when the named character reference does not
      // exist.


      var NAMED_ENTITIES = {
        'Aacute': "\xC1",
        'aacute': "\xE1",
        'Acirc': "\xC2",
        'acirc': "\xE2",
        'acute': "\xB4",
        'AElig': "\xC6",
        'aelig': "\xE6",
        'Agrave': "\xC0",
        'agrave': "\xE0",
        'alefsym': "\u2135",
        'Alpha': "\u0391",
        'alpha': "\u03B1",
        'amp': '&',
        'and': "\u2227",
        'ang': "\u2220",
        'apos': "'",
        'Aring': "\xC5",
        'aring': "\xE5",
        'asymp': "\u2248",
        'Atilde': "\xC3",
        'atilde': "\xE3",
        'Auml': "\xC4",
        'auml': "\xE4",
        'bdquo': "\u201E",
        'Beta': "\u0392",
        'beta': "\u03B2",
        'brvbar': "\xA6",
        'bull': "\u2022",
        'cap': "\u2229",
        'Ccedil': "\xC7",
        'ccedil': "\xE7",
        'cedil': "\xB8",
        'cent': "\xA2",
        'Chi': "\u03A7",
        'chi': "\u03C7",
        'circ': "\u02C6",
        'clubs': "\u2663",
        'cong': "\u2245",
        'copy': "\xA9",
        'crarr': "\u21B5",
        'cup': "\u222A",
        'curren': "\xA4",
        'dagger': "\u2020",
        'Dagger': "\u2021",
        'darr': "\u2193",
        'dArr': "\u21D3",
        'deg': "\xB0",
        'Delta': "\u0394",
        'delta': "\u03B4",
        'diams': "\u2666",
        'divide': "\xF7",
        'Eacute': "\xC9",
        'eacute': "\xE9",
        'Ecirc': "\xCA",
        'ecirc': "\xEA",
        'Egrave': "\xC8",
        'egrave': "\xE8",
        'empty': "\u2205",
        'emsp': "\u2003",
        'ensp': "\u2002",
        'Epsilon': "\u0395",
        'epsilon': "\u03B5",
        'equiv': "\u2261",
        'Eta': "\u0397",
        'eta': "\u03B7",
        'ETH': "\xD0",
        'eth': "\xF0",
        'Euml': "\xCB",
        'euml': "\xEB",
        'euro': "\u20AC",
        'exist': "\u2203",
        'fnof': "\u0192",
        'forall': "\u2200",
        'frac12': "\xBD",
        'frac14': "\xBC",
        'frac34': "\xBE",
        'frasl': "\u2044",
        'Gamma': "\u0393",
        'gamma': "\u03B3",
        'ge': "\u2265",
        'gt': '>',
        'harr': "\u2194",
        'hArr': "\u21D4",
        'hearts': "\u2665",
        'hellip': "\u2026",
        'Iacute': "\xCD",
        'iacute': "\xED",
        'Icirc': "\xCE",
        'icirc': "\xEE",
        'iexcl': "\xA1",
        'Igrave': "\xCC",
        'igrave': "\xEC",
        'image': "\u2111",
        'infin': "\u221E",
        'int': "\u222B",
        'Iota': "\u0399",
        'iota': "\u03B9",
        'iquest': "\xBF",
        'isin': "\u2208",
        'Iuml': "\xCF",
        'iuml': "\xEF",
        'Kappa': "\u039A",
        'kappa': "\u03BA",
        'Lambda': "\u039B",
        'lambda': "\u03BB",
        'lang': "\u27E8",
        'laquo': "\xAB",
        'larr': "\u2190",
        'lArr': "\u21D0",
        'lceil': "\u2308",
        'ldquo': "\u201C",
        'le': "\u2264",
        'lfloor': "\u230A",
        'lowast': "\u2217",
        'loz': "\u25CA",
        'lrm': "\u200E",
        'lsaquo': "\u2039",
        'lsquo': "\u2018",
        'lt': '<',
        'macr': "\xAF",
        'mdash': "\u2014",
        'micro': "\xB5",
        'middot': "\xB7",
        'minus': "\u2212",
        'Mu': "\u039C",
        'mu': "\u03BC",
        'nabla': "\u2207",
        'nbsp': "\xA0",
        'ndash': "\u2013",
        'ne': "\u2260",
        'ni': "\u220B",
        'not': "\xAC",
        'notin': "\u2209",
        'nsub': "\u2284",
        'Ntilde': "\xD1",
        'ntilde': "\xF1",
        'Nu': "\u039D",
        'nu': "\u03BD",
        'Oacute': "\xD3",
        'oacute': "\xF3",
        'Ocirc': "\xD4",
        'ocirc': "\xF4",
        'OElig': "\u0152",
        'oelig': "\u0153",
        'Ograve': "\xD2",
        'ograve': "\xF2",
        'oline': "\u203E",
        'Omega': "\u03A9",
        'omega': "\u03C9",
        'Omicron': "\u039F",
        'omicron': "\u03BF",
        'oplus': "\u2295",
        'or': "\u2228",
        'ordf': "\xAA",
        'ordm': "\xBA",
        'Oslash': "\xD8",
        'oslash': "\xF8",
        'Otilde': "\xD5",
        'otilde': "\xF5",
        'otimes': "\u2297",
        'Ouml': "\xD6",
        'ouml': "\xF6",
        'para': "\xB6",
        'permil': "\u2030",
        'perp': "\u22A5",
        'Phi': "\u03A6",
        'phi': "\u03C6",
        'Pi': "\u03A0",
        'pi': "\u03C0",
        'piv': "\u03D6",
        'plusmn': "\xB1",
        'pound': "\xA3",
        'prime': "\u2032",
        'Prime': "\u2033",
        'prod': "\u220F",
        'prop': "\u221D",
        'Psi': "\u03A8",
        'psi': "\u03C8",
        'quot': "\"",
        'radic': "\u221A",
        'rang': "\u27E9",
        'raquo': "\xBB",
        'rarr': "\u2192",
        'rArr': "\u21D2",
        'rceil': "\u2309",
        'rdquo': "\u201D",
        'real': "\u211C",
        'reg': "\xAE",
        'rfloor': "\u230B",
        'Rho': "\u03A1",
        'rho': "\u03C1",
        'rlm': "\u200F",
        'rsaquo': "\u203A",
        'rsquo': "\u2019",
        'sbquo': "\u201A",
        'Scaron': "\u0160",
        'scaron': "\u0161",
        'sdot': "\u22C5",
        'sect': "\xA7",
        'shy': "\xAD",
        'Sigma': "\u03A3",
        'sigma': "\u03C3",
        'sigmaf': "\u03C2",
        'sim': "\u223C",
        'spades': "\u2660",
        'sub': "\u2282",
        'sube': "\u2286",
        'sum': "\u2211",
        'sup': "\u2283",
        'sup1': "\xB9",
        'sup2': "\xB2",
        'sup3': "\xB3",
        'supe': "\u2287",
        'szlig': "\xDF",
        'Tau': "\u03A4",
        'tau': "\u03C4",
        'there4': "\u2234",
        'Theta': "\u0398",
        'theta': "\u03B8",
        'thetasym': "\u03D1",
        'thinsp': "\u2009",
        'THORN': "\xDE",
        'thorn': "\xFE",
        'tilde': "\u02DC",
        'times': "\xD7",
        'trade': "\u2122",
        'Uacute': "\xDA",
        'uacute': "\xFA",
        'uarr': "\u2191",
        'uArr': "\u21D1",
        'Ucirc': "\xDB",
        'ucirc': "\xFB",
        'Ugrave': "\xD9",
        'ugrave': "\xF9",
        'uml': "\xA8",
        'upsih': "\u03D2",
        'Upsilon': "\u03A5",
        'upsilon': "\u03C5",
        'Uuml': "\xDC",
        'uuml': "\xFC",
        'weierp': "\u2118",
        'Xi': "\u039E",
        'xi': "\u03BE",
        'Yacute': "\xDD",
        'yacute': "\xFD",
        'yen': "\xA5",
        'yuml': "\xFF",
        'Yuml': "\u0178",
        'Zeta': "\u0396",
        'zeta': "\u03B6",
        'zwj': "\u200D",
        'zwnj': "\u200C"
      }; // The &ngsp; pseudo-entity is denoting a space. see:
      // https://github.com/dart-lang/angular/blob/0bb611387d29d65b5af7f9d2515ab571fd3fbee4/_tests/test/compiler/preserve_whitespace_test.dart

      var NGSP_UNICODE = "\uE500";
      NAMED_ENTITIES['ngsp'] = NGSP_UNICODE;
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      var HtmlTagDefinition = /*#__PURE__*/function () {
        function HtmlTagDefinition() {
          var _this = this;

          var _ref2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
              closedByChildren = _ref2.closedByChildren,
              implicitNamespacePrefix = _ref2.implicitNamespacePrefix,
              _ref2$contentType = _ref2.contentType,
              contentType = _ref2$contentType === void 0 ? TagContentType.PARSABLE_DATA : _ref2$contentType,
              _ref2$closedByParent = _ref2.closedByParent,
              closedByParent = _ref2$closedByParent === void 0 ? false : _ref2$closedByParent,
              _ref2$isVoid = _ref2.isVoid,
              isVoid = _ref2$isVoid === void 0 ? false : _ref2$isVoid,
              _ref2$ignoreFirstLf = _ref2.ignoreFirstLf,
              ignoreFirstLf = _ref2$ignoreFirstLf === void 0 ? false : _ref2$ignoreFirstLf,
              _ref2$preventNamespac = _ref2.preventNamespaceInheritance,
              preventNamespaceInheritance = _ref2$preventNamespac === void 0 ? false : _ref2$preventNamespac;

          _classCallCheck(this, HtmlTagDefinition);

          this.closedByChildren = {};
          this.closedByParent = false;
          this.canSelfClose = false;

          if (closedByChildren && closedByChildren.length > 0) {
            closedByChildren.forEach(function (tagName) {
              return _this.closedByChildren[tagName] = true;
            });
          }

          this.isVoid = isVoid;
          this.closedByParent = closedByParent || isVoid;
          this.implicitNamespacePrefix = implicitNamespacePrefix || null;
          this.contentType = contentType;
          this.ignoreFirstLf = ignoreFirstLf;
          this.preventNamespaceInheritance = preventNamespaceInheritance;
        }

        _createClass(HtmlTagDefinition, [{
          key: "isClosedByChild",
          value: function isClosedByChild(name) {
            return this.isVoid || name.toLowerCase() in this.closedByChildren;
          }
        }, {
          key: "getContentType",
          value: function getContentType(prefix) {
            if (typeof this.contentType === 'object') {
              var overrideType = prefix == null ? undefined : this.contentType[prefix];
              return overrideType !== null && overrideType !== void 0 ? overrideType : this.contentType["default"];
            }

            return this.contentType;
          }
        }]);

        return HtmlTagDefinition;
      }();

      var _DEFAULT_TAG_DEFINITION; // see https://www.w3.org/TR/html51/syntax.html#optional-tags
      // This implementation does not fully conform to the HTML5 spec.


      var TAG_DEFINITIONS;

      function getHtmlTagDefinition(tagName) {
        var _a, _b;

        if (!TAG_DEFINITIONS) {
          _DEFAULT_TAG_DEFINITION = new HtmlTagDefinition();
          TAG_DEFINITIONS = {
            'base': new HtmlTagDefinition({
              isVoid: true
            }),
            'meta': new HtmlTagDefinition({
              isVoid: true
            }),
            'area': new HtmlTagDefinition({
              isVoid: true
            }),
            'embed': new HtmlTagDefinition({
              isVoid: true
            }),
            'link': new HtmlTagDefinition({
              isVoid: true
            }),
            'img': new HtmlTagDefinition({
              isVoid: true
            }),
            'input': new HtmlTagDefinition({
              isVoid: true
            }),
            'param': new HtmlTagDefinition({
              isVoid: true
            }),
            'hr': new HtmlTagDefinition({
              isVoid: true
            }),
            'br': new HtmlTagDefinition({
              isVoid: true
            }),
            'source': new HtmlTagDefinition({
              isVoid: true
            }),
            'track': new HtmlTagDefinition({
              isVoid: true
            }),
            'wbr': new HtmlTagDefinition({
              isVoid: true
            }),
            'p': new HtmlTagDefinition({
              closedByChildren: ['address', 'article', 'aside', 'blockquote', 'div', 'dl', 'fieldset', 'footer', 'form', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'header', 'hgroup', 'hr', 'main', 'nav', 'ol', 'p', 'pre', 'section', 'table', 'ul'],
              closedByParent: true
            }),
            'thead': new HtmlTagDefinition({
              closedByChildren: ['tbody', 'tfoot']
            }),
            'tbody': new HtmlTagDefinition({
              closedByChildren: ['tbody', 'tfoot'],
              closedByParent: true
            }),
            'tfoot': new HtmlTagDefinition({
              closedByChildren: ['tbody'],
              closedByParent: true
            }),
            'tr': new HtmlTagDefinition({
              closedByChildren: ['tr'],
              closedByParent: true
            }),
            'td': new HtmlTagDefinition({
              closedByChildren: ['td', 'th'],
              closedByParent: true
            }),
            'th': new HtmlTagDefinition({
              closedByChildren: ['td', 'th'],
              closedByParent: true
            }),
            'col': new HtmlTagDefinition({
              isVoid: true
            }),
            'svg': new HtmlTagDefinition({
              implicitNamespacePrefix: 'svg'
            }),
            'foreignObject': new HtmlTagDefinition({
              // Usually the implicit namespace here would be redundant since it will be inherited from
              // the parent `svg`, but we have to do it for `foreignObject`, because the way the parser
              // works is that the parent node of an end tag is its own start tag which means that
              // the `preventNamespaceInheritance` on `foreignObject` would have it default to the
              // implicit namespace which is `html`, unless specified otherwise.
              implicitNamespacePrefix: 'svg',
              // We want to prevent children of foreignObject from inheriting its namespace, because
              // the point of the element is to allow nodes from other namespaces to be inserted.
              preventNamespaceInheritance: true
            }),
            'math': new HtmlTagDefinition({
              implicitNamespacePrefix: 'math'
            }),
            'li': new HtmlTagDefinition({
              closedByChildren: ['li'],
              closedByParent: true
            }),
            'dt': new HtmlTagDefinition({
              closedByChildren: ['dt', 'dd']
            }),
            'dd': new HtmlTagDefinition({
              closedByChildren: ['dt', 'dd'],
              closedByParent: true
            }),
            'rb': new HtmlTagDefinition({
              closedByChildren: ['rb', 'rt', 'rtc', 'rp'],
              closedByParent: true
            }),
            'rt': new HtmlTagDefinition({
              closedByChildren: ['rb', 'rt', 'rtc', 'rp'],
              closedByParent: true
            }),
            'rtc': new HtmlTagDefinition({
              closedByChildren: ['rb', 'rtc', 'rp'],
              closedByParent: true
            }),
            'rp': new HtmlTagDefinition({
              closedByChildren: ['rb', 'rt', 'rtc', 'rp'],
              closedByParent: true
            }),
            'optgroup': new HtmlTagDefinition({
              closedByChildren: ['optgroup'],
              closedByParent: true
            }),
            'option': new HtmlTagDefinition({
              closedByChildren: ['option', 'optgroup'],
              closedByParent: true
            }),
            'pre': new HtmlTagDefinition({
              ignoreFirstLf: true
            }),
            'listing': new HtmlTagDefinition({
              ignoreFirstLf: true
            }),
            'style': new HtmlTagDefinition({
              contentType: TagContentType.RAW_TEXT
            }),
            'script': new HtmlTagDefinition({
              contentType: TagContentType.RAW_TEXT
            }),
            'title': new HtmlTagDefinition({
              // The browser supports two separate `title` tags which have to use
              // a different content type: `HTMLTitleElement` and `SVGTitleElement`
              contentType: {
                "default": TagContentType.ESCAPABLE_RAW_TEXT,
                svg: TagContentType.PARSABLE_DATA
              }
            }),
            'textarea': new HtmlTagDefinition({
              contentType: TagContentType.ESCAPABLE_RAW_TEXT,
              ignoreFirstLf: true
            })
          };
        } // We have to make both a case-sensitive and a case-insesitive lookup, because
        // HTML tag names are case insensitive, whereas some SVG tags are case sensitive.


        return (_b = (_a = TAG_DEFINITIONS[tagName]) !== null && _a !== void 0 ? _a : TAG_DEFINITIONS[tagName.toLowerCase()]) !== null && _b !== void 0 ? _b : _DEFAULT_TAG_DEFINITION;
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      var _SELECTOR_REGEXP = new RegExp('(\\:not\\()|' + // 1: ":not("
      '(([\\.\\#]?)[-\\w]+)|' + // 2: "tag"; 3: "."/"#";
      // "-" should appear first in the regexp below as FF31 parses "[.-\w]" as a range
      // 4: attribute; 5: attribute_string; 6: attribute_value
      '(?:\\[([-.\\w*]+)(?:=([\"\']?)([^\\]\"\']*)\\5)?\\])|' + // "[name]", "[name=value]",
      // "[name="value"]",
      // "[name='value']"
      '(\\))|' + // 7: ")"
      '(\\s*,\\s*)', // 8: ","
      'g');
      /**
       * A css selector contains an element name,
       * css classes and attribute/value pairs with the purpose
       * of selecting subsets out of them.
       */


      var CssSelector = /*#__PURE__*/function () {
        function CssSelector() {
          _classCallCheck(this, CssSelector);

          this.element = null;
          this.classNames = [];
          /**
           * The selectors are encoded in pairs where:
           * - even locations are attribute names
           * - odd locations are attribute values.
           *
           * Example:
           * Selector: `[key1=value1][key2]` would parse to:
           * ```
           * ['key1', 'value1', 'key2', '']
           * ```
           */

          this.attrs = [];
          this.notSelectors = [];
        }

        _createClass(CssSelector, [{
          key: "isElementSelector",
          value: function isElementSelector() {
            return this.hasElementSelector() && this.classNames.length == 0 && this.attrs.length == 0 && this.notSelectors.length === 0;
          }
        }, {
          key: "hasElementSelector",
          value: function hasElementSelector() {
            return !!this.element;
          }
        }, {
          key: "setElement",
          value: function setElement() {
            var element = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
            this.element = element;
          }
          /** Gets a template string for an element that matches the selector. */

        }, {
          key: "getMatchingElementTemplate",
          value: function getMatchingElementTemplate() {
            var tagName = this.element || 'div';
            var classAttr = this.classNames.length > 0 ? " class=\"".concat(this.classNames.join(' '), "\"") : '';
            var attrs = '';

            for (var i = 0; i < this.attrs.length; i += 2) {
              var attrName = this.attrs[i];
              var attrValue = this.attrs[i + 1] !== '' ? "=\"".concat(this.attrs[i + 1], "\"") : '';
              attrs += " ".concat(attrName).concat(attrValue);
            }

            return getHtmlTagDefinition(tagName).isVoid ? "<".concat(tagName).concat(classAttr).concat(attrs, "/>") : "<".concat(tagName).concat(classAttr).concat(attrs, "></").concat(tagName, ">");
          }
        }, {
          key: "getAttrs",
          value: function getAttrs() {
            var result = [];

            if (this.classNames.length > 0) {
              result.push('class', this.classNames.join(' '));
            }

            return result.concat(this.attrs);
          }
        }, {
          key: "addAttribute",
          value: function addAttribute(name) {
            var value = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
            this.attrs.push(name, value && value.toLowerCase() || '');
          }
        }, {
          key: "addClassName",
          value: function addClassName(name) {
            this.classNames.push(name.toLowerCase());
          }
        }, {
          key: "toString",
          value: function toString() {
            var res = this.element || '';

            if (this.classNames) {
              this.classNames.forEach(function (klass) {
                return res += ".".concat(klass);
              });
            }

            if (this.attrs) {
              for (var i = 0; i < this.attrs.length; i += 2) {
                var name = this.attrs[i];
                var value = this.attrs[i + 1];
                res += "[".concat(name).concat(value ? '=' + value : '', "]");
              }
            }

            this.notSelectors.forEach(function (notSelector) {
              return res += ":not(".concat(notSelector, ")");
            });
            return res;
          }
        }], [{
          key: "parse",
          value: function parse(selector) {
            var results = [];

            var _addResult = function _addResult(res, cssSel) {
              if (cssSel.notSelectors.length > 0 && !cssSel.element && cssSel.classNames.length == 0 && cssSel.attrs.length == 0) {
                cssSel.element = '*';
              }

              res.push(cssSel);
            };

            var cssSelector = new CssSelector();
            var match;
            var current = cssSelector;
            var inNot = false;
            _SELECTOR_REGEXP.lastIndex = 0;

            while (match = _SELECTOR_REGEXP.exec(selector)) {
              if (match[1
              /* NOT */
              ]) {
                if (inNot) {
                  throw new Error('Nesting :not in a selector is not allowed');
                }

                inNot = true;
                current = new CssSelector();
                cssSelector.notSelectors.push(current);
              }

              var tag = match[2
              /* TAG */
              ];

              if (tag) {
                var prefix = match[3
                /* PREFIX */
                ];

                if (prefix === '#') {
                  // #hash
                  current.addAttribute('id', tag.substr(1));
                } else if (prefix === '.') {
                  // Class
                  current.addClassName(tag.substr(1));
                } else {
                  // Element
                  current.setElement(tag);
                }
              }

              var attribute = match[4
              /* ATTRIBUTE */
              ];

              if (attribute) {
                current.addAttribute(attribute, match[6
                /* ATTRIBUTE_VALUE */
                ]);
              }

              if (match[7
              /* NOT_END */
              ]) {
                inNot = false;
                current = cssSelector;
              }

              if (match[8
              /* SEPARATOR */
              ]) {
                if (inNot) {
                  throw new Error('Multiple selectors in :not are not supported');
                }

                _addResult(results, cssSelector);

                cssSelector = current = new CssSelector();
              }
            }

            _addResult(results, cssSelector);

            return results;
          }
        }]);

        return CssSelector;
      }();
      /**
       * Reads a list of CssSelectors and allows to calculate which ones
       * are contained in a given CssSelector.
       */


      var SelectorMatcher = /*#__PURE__*/function () {
        function SelectorMatcher() {
          _classCallCheck(this, SelectorMatcher);

          this._elementMap = new Map();
          this._elementPartialMap = new Map();
          this._classMap = new Map();
          this._classPartialMap = new Map();
          this._attrValueMap = new Map();
          this._attrValuePartialMap = new Map();
          this._listContexts = [];
        }

        _createClass(SelectorMatcher, [{
          key: "addSelectables",
          value: function addSelectables(cssSelectors, callbackCtxt) {
            var listContext = null;

            if (cssSelectors.length > 1) {
              listContext = new SelectorListContext(cssSelectors);

              this._listContexts.push(listContext);
            }

            for (var i = 0; i < cssSelectors.length; i++) {
              this._addSelectable(cssSelectors[i], callbackCtxt, listContext);
            }
          }
          /**
           * Add an object that can be found later on by calling `match`.
           * @param cssSelector A css selector
           * @param callbackCtxt An opaque object that will be given to the callback of the `match` function
           */

        }, {
          key: "_addSelectable",
          value: function _addSelectable(cssSelector, callbackCtxt, listContext) {
            var matcher = this;
            var element = cssSelector.element;
            var classNames = cssSelector.classNames;
            var attrs = cssSelector.attrs;
            var selectable = new SelectorContext(cssSelector, callbackCtxt, listContext);

            if (element) {
              var isTerminal = attrs.length === 0 && classNames.length === 0;

              if (isTerminal) {
                this._addTerminal(matcher._elementMap, element, selectable);
              } else {
                matcher = this._addPartial(matcher._elementPartialMap, element);
              }
            }

            if (classNames) {
              for (var i = 0; i < classNames.length; i++) {
                var _isTerminal = attrs.length === 0 && i === classNames.length - 1;

                var className = classNames[i];

                if (_isTerminal) {
                  this._addTerminal(matcher._classMap, className, selectable);
                } else {
                  matcher = this._addPartial(matcher._classPartialMap, className);
                }
              }
            }

            if (attrs) {
              for (var _i = 0; _i < attrs.length; _i += 2) {
                var _isTerminal2 = _i === attrs.length - 2;

                var name = attrs[_i];
                var value = attrs[_i + 1];

                if (_isTerminal2) {
                  var terminalMap = matcher._attrValueMap;
                  var terminalValuesMap = terminalMap.get(name);

                  if (!terminalValuesMap) {
                    terminalValuesMap = new Map();
                    terminalMap.set(name, terminalValuesMap);
                  }

                  this._addTerminal(terminalValuesMap, value, selectable);
                } else {
                  var partialMap = matcher._attrValuePartialMap;
                  var partialValuesMap = partialMap.get(name);

                  if (!partialValuesMap) {
                    partialValuesMap = new Map();
                    partialMap.set(name, partialValuesMap);
                  }

                  matcher = this._addPartial(partialValuesMap, value);
                }
              }
            }
          }
        }, {
          key: "_addTerminal",
          value: function _addTerminal(map, name, selectable) {
            var terminalList = map.get(name);

            if (!terminalList) {
              terminalList = [];
              map.set(name, terminalList);
            }

            terminalList.push(selectable);
          }
        }, {
          key: "_addPartial",
          value: function _addPartial(map, name) {
            var matcher = map.get(name);

            if (!matcher) {
              matcher = new SelectorMatcher();
              map.set(name, matcher);
            }

            return matcher;
          }
          /**
           * Find the objects that have been added via `addSelectable`
           * whose css selector is contained in the given css selector.
           * @param cssSelector A css selector
           * @param matchedCallback This callback will be called with the object handed into `addSelectable`
           * @return boolean true if a match was found
           */

        }, {
          key: "match",
          value: function match(cssSelector, matchedCallback) {
            var result = false;
            var element = cssSelector.element;
            var classNames = cssSelector.classNames;
            var attrs = cssSelector.attrs;

            for (var i = 0; i < this._listContexts.length; i++) {
              this._listContexts[i].alreadyMatched = false;
            }

            result = this._matchTerminal(this._elementMap, element, cssSelector, matchedCallback) || result;
            result = this._matchPartial(this._elementPartialMap, element, cssSelector, matchedCallback) || result;

            if (classNames) {
              for (var _i2 = 0; _i2 < classNames.length; _i2++) {
                var className = classNames[_i2];
                result = this._matchTerminal(this._classMap, className, cssSelector, matchedCallback) || result;
                result = this._matchPartial(this._classPartialMap, className, cssSelector, matchedCallback) || result;
              }
            }

            if (attrs) {
              for (var _i3 = 0; _i3 < attrs.length; _i3 += 2) {
                var name = attrs[_i3];
                var value = attrs[_i3 + 1];

                var terminalValuesMap = this._attrValueMap.get(name);

                if (value) {
                  result = this._matchTerminal(terminalValuesMap, '', cssSelector, matchedCallback) || result;
                }

                result = this._matchTerminal(terminalValuesMap, value, cssSelector, matchedCallback) || result;

                var partialValuesMap = this._attrValuePartialMap.get(name);

                if (value) {
                  result = this._matchPartial(partialValuesMap, '', cssSelector, matchedCallback) || result;
                }

                result = this._matchPartial(partialValuesMap, value, cssSelector, matchedCallback) || result;
              }
            }

            return result;
          }
          /** @internal */

        }, {
          key: "_matchTerminal",
          value: function _matchTerminal(map, name, cssSelector, matchedCallback) {
            if (!map || typeof name !== 'string') {
              return false;
            }

            var selectables = map.get(name) || [];
            var starSelectables = map.get('*');

            if (starSelectables) {
              selectables = selectables.concat(starSelectables);
            }

            if (selectables.length === 0) {
              return false;
            }

            var selectable;
            var result = false;

            for (var i = 0; i < selectables.length; i++) {
              selectable = selectables[i];
              result = selectable.finalize(cssSelector, matchedCallback) || result;
            }

            return result;
          }
          /** @internal */

        }, {
          key: "_matchPartial",
          value: function _matchPartial(map, name, cssSelector, matchedCallback) {
            if (!map || typeof name !== 'string') {
              return false;
            }

            var nestedSelector = map.get(name);

            if (!nestedSelector) {
              return false;
            } // TODO(perf): get rid of recursion and measure again
            // TODO(perf): don't pass the whole selector into the recursion,
            // but only the not processed parts


            return nestedSelector.match(cssSelector, matchedCallback);
          }
        }], [{
          key: "createNotMatcher",
          value: function createNotMatcher(notSelectors) {
            var notMatcher = new SelectorMatcher();
            notMatcher.addSelectables(notSelectors, null);
            return notMatcher;
          }
        }]);

        return SelectorMatcher;
      }();

      var SelectorListContext = function SelectorListContext(selectors) {
        _classCallCheck(this, SelectorListContext);

        this.selectors = selectors;
        this.alreadyMatched = false;
      }; // Store context to pass back selector and context when a selector is matched


      var SelectorContext = /*#__PURE__*/function () {
        function SelectorContext(selector, cbContext, listContext) {
          _classCallCheck(this, SelectorContext);

          this.selector = selector;
          this.cbContext = cbContext;
          this.listContext = listContext;
          this.notSelectors = selector.notSelectors;
        }

        _createClass(SelectorContext, [{
          key: "finalize",
          value: function finalize(cssSelector, callback) {
            var result = true;

            if (this.notSelectors.length > 0 && (!this.listContext || !this.listContext.alreadyMatched)) {
              var notMatcher = SelectorMatcher.createNotMatcher(this.notSelectors);
              result = !notMatcher.match(cssSelector, null);
            }

            if (result && callback && (!this.listContext || !this.listContext.alreadyMatched)) {
              if (this.listContext) {
                this.listContext.alreadyMatched = true;
              }

              callback(this.selector, this.cbContext);
            }

            return result;
          }
        }]);

        return SelectorContext;
      }();
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      var createInject = makeMetadataFactory('Inject', function (token) {
        return {
          token: token
        };
      });
      var createInjectionToken = makeMetadataFactory('InjectionToken', function (desc) {
        return {
          _desc: desc,
          ɵprov: undefined
        };
      });
      var createAttribute = makeMetadataFactory('Attribute', function (attributeName) {
        return {
          attributeName: attributeName
        };
      }); // Stores the default value of `emitDistinctChangesOnly` when the `emitDistinctChangesOnly` is not
      // explicitly set. This value will be changed to `true` in v12.
      // TODO(misko): switch the default in v12 to `true`. See: packages/core/src/metadata/di.ts

      var emitDistinctChangesOnlyDefaultValue = false;
      var createContentChildren = makeMetadataFactory('ContentChildren', function (selector) {
        var data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        return Object.assign({
          selector: selector,
          first: false,
          isViewQuery: false,
          descendants: false,
          emitDistinctChangesOnly: emitDistinctChangesOnlyDefaultValue
        }, data);
      });
      var createContentChild = makeMetadataFactory('ContentChild', function (selector) {
        var data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        return Object.assign({
          selector: selector,
          first: true,
          isViewQuery: false,
          descendants: true
        }, data);
      });
      var createViewChildren = makeMetadataFactory('ViewChildren', function (selector) {
        var data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        return Object.assign({
          selector: selector,
          first: false,
          isViewQuery: true,
          descendants: true,
          emitDistinctChangesOnly: emitDistinctChangesOnlyDefaultValue
        }, data);
      });
      var createViewChild = makeMetadataFactory('ViewChild', function (selector, data) {
        return Object.assign({
          selector: selector,
          first: true,
          isViewQuery: true,
          descendants: true
        }, data);
      });
      var createDirective = makeMetadataFactory('Directive', function () {
        var dir = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        return dir;
      });
      var ViewEncapsulation;

      (function (ViewEncapsulation) {
        ViewEncapsulation[ViewEncapsulation["Emulated"] = 0] = "Emulated"; // Historically the 1 value was for `Native` encapsulation which has been removed as of v11.

        ViewEncapsulation[ViewEncapsulation["None"] = 2] = "None";
        ViewEncapsulation[ViewEncapsulation["ShadowDom"] = 3] = "ShadowDom";
      })(ViewEncapsulation || (ViewEncapsulation = {}));

      var ChangeDetectionStrategy;

      (function (ChangeDetectionStrategy) {
        ChangeDetectionStrategy[ChangeDetectionStrategy["OnPush"] = 0] = "OnPush";
        ChangeDetectionStrategy[ChangeDetectionStrategy["Default"] = 1] = "Default";
      })(ChangeDetectionStrategy || (ChangeDetectionStrategy = {}));

      var createComponent = makeMetadataFactory('Component', function () {
        var c = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        return Object.assign({
          changeDetection: ChangeDetectionStrategy.Default
        }, c);
      });
      var createPipe = makeMetadataFactory('Pipe', function (p) {
        return Object.assign({
          pure: true
        }, p);
      });
      var createInput = makeMetadataFactory('Input', function (bindingPropertyName) {
        return {
          bindingPropertyName: bindingPropertyName
        };
      });
      var createOutput = makeMetadataFactory('Output', function (bindingPropertyName) {
        return {
          bindingPropertyName: bindingPropertyName
        };
      });
      var createHostBinding = makeMetadataFactory('HostBinding', function (hostPropertyName) {
        return {
          hostPropertyName: hostPropertyName
        };
      });
      var createHostListener = makeMetadataFactory('HostListener', function (eventName, args) {
        return {
          eventName: eventName,
          args: args
        };
      });
      var createNgModule = makeMetadataFactory('NgModule', function (ngModule) {
        return ngModule;
      });
      var createInjectable = makeMetadataFactory('Injectable', function () {
        var injectable = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        return injectable;
      });
      var CUSTOM_ELEMENTS_SCHEMA = {
        name: 'custom-elements'
      };
      var NO_ERRORS_SCHEMA = {
        name: 'no-errors-schema'
      };
      var createOptional = makeMetadataFactory('Optional');
      var createSelf = makeMetadataFactory('Self');
      var createSkipSelf = makeMetadataFactory('SkipSelf');
      var createHost = makeMetadataFactory('Host');
      var Type = Function;
      var SecurityContext;

      (function (SecurityContext) {
        SecurityContext[SecurityContext["NONE"] = 0] = "NONE";
        SecurityContext[SecurityContext["HTML"] = 1] = "HTML";
        SecurityContext[SecurityContext["STYLE"] = 2] = "STYLE";
        SecurityContext[SecurityContext["SCRIPT"] = 3] = "SCRIPT";
        SecurityContext[SecurityContext["URL"] = 4] = "URL";
        SecurityContext[SecurityContext["RESOURCE_URL"] = 5] = "RESOURCE_URL";
      })(SecurityContext || (SecurityContext = {}));

      var MissingTranslationStrategy;

      (function (MissingTranslationStrategy) {
        MissingTranslationStrategy[MissingTranslationStrategy["Error"] = 0] = "Error";
        MissingTranslationStrategy[MissingTranslationStrategy["Warning"] = 1] = "Warning";
        MissingTranslationStrategy[MissingTranslationStrategy["Ignore"] = 2] = "Ignore";
      })(MissingTranslationStrategy || (MissingTranslationStrategy = {}));

      function makeMetadataFactory(name, props) {
        // This must be declared as a function, not a fat arrow, so that ES2015 devmode produces code
        // that works with the static_reflector.ts in the ViewEngine compiler.
        // In particular, `_registerDecoratorOrConstructor` assumes that the value returned here can be
        // new'ed.
        function factory() {
          var values = props ? props.apply(void 0, arguments) : {};
          return Object.assign({
            ngMetadataName: name
          }, values);
        }

        factory.isTypeOf = function (obj) {
          return obj && obj.ngMetadataName === name;
        };

        factory.ngMetadataName = name;
        return factory;
      }

      function parserSelectorToSimpleSelector(selector) {
        var classes = selector.classNames && selector.classNames.length ? [8
        /* CLASS */
        ].concat(_toConsumableArray(selector.classNames)) : [];
        var elementName = selector.element && selector.element !== '*' ? selector.element : '';
        return [elementName].concat(_toConsumableArray(selector.attrs), _toConsumableArray(classes));
      }

      function parserSelectorToNegativeSelector(selector) {
        var classes = selector.classNames && selector.classNames.length ? [8
        /* CLASS */
        ].concat(_toConsumableArray(selector.classNames)) : [];

        if (selector.element) {
          return [1
          /* NOT */
          | 4
          /* ELEMENT */
          , selector.element].concat(_toConsumableArray(selector.attrs), _toConsumableArray(classes));
        } else if (selector.attrs.length) {
          return [1
          /* NOT */
          | 2
          /* ATTRIBUTE */
          ].concat(_toConsumableArray(selector.attrs), _toConsumableArray(classes));
        } else {
          return selector.classNames && selector.classNames.length ? [1
          /* NOT */
          | 8
          /* CLASS */
          ].concat(_toConsumableArray(selector.classNames)) : [];
        }
      }

      function parserSelectorToR3Selector(selector) {
        var positive = parserSelectorToSimpleSelector(selector);
        var negative = selector.notSelectors && selector.notSelectors.length ? selector.notSelectors.map(function (notSelector) {
          return parserSelectorToNegativeSelector(notSelector);
        }) : [];
        return positive.concat.apply(positive, _toConsumableArray(negative));
      }

      function parseSelectorToR3Selector(selector) {
        return selector ? CssSelector.parse(selector).map(parserSelectorToR3Selector) : [];
      }

      var core = /*#__PURE__*/Object.freeze({
        __proto__: null,
        createInject: createInject,
        createInjectionToken: createInjectionToken,
        createAttribute: createAttribute,
        emitDistinctChangesOnlyDefaultValue: emitDistinctChangesOnlyDefaultValue,
        createContentChildren: createContentChildren,
        createContentChild: createContentChild,
        createViewChildren: createViewChildren,
        createViewChild: createViewChild,
        createDirective: createDirective,

        get ViewEncapsulation() {
          return ViewEncapsulation;
        },

        get ChangeDetectionStrategy() {
          return ChangeDetectionStrategy;
        },

        createComponent: createComponent,
        createPipe: createPipe,
        createInput: createInput,
        createOutput: createOutput,
        createHostBinding: createHostBinding,
        createHostListener: createHostListener,
        createNgModule: createNgModule,
        createInjectable: createInjectable,
        CUSTOM_ELEMENTS_SCHEMA: CUSTOM_ELEMENTS_SCHEMA,
        NO_ERRORS_SCHEMA: NO_ERRORS_SCHEMA,
        createOptional: createOptional,
        createSelf: createSelf,
        createSkipSelf: createSkipSelf,
        createHost: createHost,
        Type: Type,

        get SecurityContext() {
          return SecurityContext;
        },

        get MissingTranslationStrategy() {
          return MissingTranslationStrategy;
        },

        parseSelectorToR3Selector: parseSelectorToR3Selector
      });
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */
      //// Types

      var TypeModifier;

      (function (TypeModifier) {
        TypeModifier[TypeModifier["Const"] = 0] = "Const";
      })(TypeModifier || (TypeModifier = {}));

      var Type$1 = /*#__PURE__*/function () {
        function Type$1() {
          var modifiers = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];

          _classCallCheck(this, Type$1);

          this.modifiers = modifiers;
        }

        _createClass(Type$1, [{
          key: "hasModifier",
          value: function hasModifier(modifier) {
            return this.modifiers.indexOf(modifier) !== -1;
          }
        }]);

        return Type$1;
      }();

      var BuiltinTypeName;

      (function (BuiltinTypeName) {
        BuiltinTypeName[BuiltinTypeName["Dynamic"] = 0] = "Dynamic";
        BuiltinTypeName[BuiltinTypeName["Bool"] = 1] = "Bool";
        BuiltinTypeName[BuiltinTypeName["String"] = 2] = "String";
        BuiltinTypeName[BuiltinTypeName["Int"] = 3] = "Int";
        BuiltinTypeName[BuiltinTypeName["Number"] = 4] = "Number";
        BuiltinTypeName[BuiltinTypeName["Function"] = 5] = "Function";
        BuiltinTypeName[BuiltinTypeName["Inferred"] = 6] = "Inferred";
        BuiltinTypeName[BuiltinTypeName["None"] = 7] = "None";
      })(BuiltinTypeName || (BuiltinTypeName = {}));

      var BuiltinType = /*#__PURE__*/function (_Type$) {
        _inherits(BuiltinType, _Type$);

        var _super = _createSuper(BuiltinType);

        function BuiltinType(name, modifiers) {
          var _this2;

          _classCallCheck(this, BuiltinType);

          _this2 = _super.call(this, modifiers);
          _this2.name = name;
          return _this2;
        }

        _createClass(BuiltinType, [{
          key: "visitType",
          value: function visitType(visitor, context) {
            return visitor.visitBuiltinType(this, context);
          }
        }]);

        return BuiltinType;
      }(Type$1);

      var ExpressionType = /*#__PURE__*/function (_Type$2) {
        _inherits(ExpressionType, _Type$2);

        var _super2 = _createSuper(ExpressionType);

        function ExpressionType(value, modifiers) {
          var _this3;

          var typeParams = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;

          _classCallCheck(this, ExpressionType);

          _this3 = _super2.call(this, modifiers);
          _this3.value = value;
          _this3.typeParams = typeParams;
          return _this3;
        }

        _createClass(ExpressionType, [{
          key: "visitType",
          value: function visitType(visitor, context) {
            return visitor.visitExpressionType(this, context);
          }
        }]);

        return ExpressionType;
      }(Type$1);

      var ArrayType = /*#__PURE__*/function (_Type$3) {
        _inherits(ArrayType, _Type$3);

        var _super3 = _createSuper(ArrayType);

        function ArrayType(of, modifiers) {
          var _this4;

          _classCallCheck(this, ArrayType);

          _this4 = _super3.call(this, modifiers);
          _this4.of = of;
          return _this4;
        }

        _createClass(ArrayType, [{
          key: "visitType",
          value: function visitType(visitor, context) {
            return visitor.visitArrayType(this, context);
          }
        }]);

        return ArrayType;
      }(Type$1);

      var MapType = /*#__PURE__*/function (_Type$4) {
        _inherits(MapType, _Type$4);

        var _super4 = _createSuper(MapType);

        function MapType(valueType, modifiers) {
          var _this5;

          _classCallCheck(this, MapType);

          _this5 = _super4.call(this, modifiers);
          _this5.valueType = valueType || null;
          return _this5;
        }

        _createClass(MapType, [{
          key: "visitType",
          value: function visitType(visitor, context) {
            return visitor.visitMapType(this, context);
          }
        }]);

        return MapType;
      }(Type$1);

      var DYNAMIC_TYPE = new BuiltinType(BuiltinTypeName.Dynamic);
      var INFERRED_TYPE = new BuiltinType(BuiltinTypeName.Inferred);
      var BOOL_TYPE = new BuiltinType(BuiltinTypeName.Bool);
      var INT_TYPE = new BuiltinType(BuiltinTypeName.Int);
      var NUMBER_TYPE = new BuiltinType(BuiltinTypeName.Number);
      var STRING_TYPE = new BuiltinType(BuiltinTypeName.String);
      var FUNCTION_TYPE = new BuiltinType(BuiltinTypeName.Function);
      var NONE_TYPE = new BuiltinType(BuiltinTypeName.None); ///// Expressions

      var UnaryOperator;

      (function (UnaryOperator) {
        UnaryOperator[UnaryOperator["Minus"] = 0] = "Minus";
        UnaryOperator[UnaryOperator["Plus"] = 1] = "Plus";
      })(UnaryOperator || (UnaryOperator = {}));

      var BinaryOperator;

      (function (BinaryOperator) {
        BinaryOperator[BinaryOperator["Equals"] = 0] = "Equals";
        BinaryOperator[BinaryOperator["NotEquals"] = 1] = "NotEquals";
        BinaryOperator[BinaryOperator["Identical"] = 2] = "Identical";
        BinaryOperator[BinaryOperator["NotIdentical"] = 3] = "NotIdentical";
        BinaryOperator[BinaryOperator["Minus"] = 4] = "Minus";
        BinaryOperator[BinaryOperator["Plus"] = 5] = "Plus";
        BinaryOperator[BinaryOperator["Divide"] = 6] = "Divide";
        BinaryOperator[BinaryOperator["Multiply"] = 7] = "Multiply";
        BinaryOperator[BinaryOperator["Modulo"] = 8] = "Modulo";
        BinaryOperator[BinaryOperator["And"] = 9] = "And";
        BinaryOperator[BinaryOperator["Or"] = 10] = "Or";
        BinaryOperator[BinaryOperator["BitwiseAnd"] = 11] = "BitwiseAnd";
        BinaryOperator[BinaryOperator["Lower"] = 12] = "Lower";
        BinaryOperator[BinaryOperator["LowerEquals"] = 13] = "LowerEquals";
        BinaryOperator[BinaryOperator["Bigger"] = 14] = "Bigger";
        BinaryOperator[BinaryOperator["BiggerEquals"] = 15] = "BiggerEquals";
      })(BinaryOperator || (BinaryOperator = {}));

      function nullSafeIsEquivalent(base, other) {
        if (base == null || other == null) {
          return base == other;
        }

        return base.isEquivalent(other);
      }

      function areAllEquivalentPredicate(base, other, equivalentPredicate) {
        var len = base.length;

        if (len !== other.length) {
          return false;
        }

        for (var i = 0; i < len; i++) {
          if (!equivalentPredicate(base[i], other[i])) {
            return false;
          }
        }

        return true;
      }

      function areAllEquivalent(base, other) {
        return areAllEquivalentPredicate(base, other, function (baseElement, otherElement) {
          return baseElement.isEquivalent(otherElement);
        });
      }

      var Expression = /*#__PURE__*/function () {
        function Expression(type, sourceSpan) {
          _classCallCheck(this, Expression);

          this.type = type || null;
          this.sourceSpan = sourceSpan || null;
        }

        _createClass(Expression, [{
          key: "prop",
          value: function prop(name, sourceSpan) {
            return new ReadPropExpr(this, name, null, sourceSpan);
          }
        }, {
          key: "key",
          value: function key(index, type, sourceSpan) {
            return new ReadKeyExpr(this, index, type, sourceSpan);
          }
        }, {
          key: "callMethod",
          value: function callMethod(name, params, sourceSpan) {
            return new InvokeMethodExpr(this, name, params, null, sourceSpan);
          }
        }, {
          key: "callFn",
          value: function callFn(params, sourceSpan, pure) {
            return new InvokeFunctionExpr(this, params, null, sourceSpan, pure);
          }
        }, {
          key: "instantiate",
          value: function instantiate(params, type, sourceSpan) {
            return new InstantiateExpr(this, params, type, sourceSpan);
          }
        }, {
          key: "conditional",
          value: function conditional(trueCase) {
            var falseCase = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
            var sourceSpan = arguments.length > 2 ? arguments[2] : undefined;
            return new ConditionalExpr(this, trueCase, falseCase, null, sourceSpan);
          }
        }, {
          key: "equals",
          value: function equals(rhs, sourceSpan) {
            return new BinaryOperatorExpr(BinaryOperator.Equals, this, rhs, null, sourceSpan);
          }
        }, {
          key: "notEquals",
          value: function notEquals(rhs, sourceSpan) {
            return new BinaryOperatorExpr(BinaryOperator.NotEquals, this, rhs, null, sourceSpan);
          }
        }, {
          key: "identical",
          value: function identical(rhs, sourceSpan) {
            return new BinaryOperatorExpr(BinaryOperator.Identical, this, rhs, null, sourceSpan);
          }
        }, {
          key: "notIdentical",
          value: function notIdentical(rhs, sourceSpan) {
            return new BinaryOperatorExpr(BinaryOperator.NotIdentical, this, rhs, null, sourceSpan);
          }
        }, {
          key: "minus",
          value: function minus(rhs, sourceSpan) {
            return new BinaryOperatorExpr(BinaryOperator.Minus, this, rhs, null, sourceSpan);
          }
        }, {
          key: "plus",
          value: function plus(rhs, sourceSpan) {
            return new BinaryOperatorExpr(BinaryOperator.Plus, this, rhs, null, sourceSpan);
          }
        }, {
          key: "divide",
          value: function divide(rhs, sourceSpan) {
            return new BinaryOperatorExpr(BinaryOperator.Divide, this, rhs, null, sourceSpan);
          }
        }, {
          key: "multiply",
          value: function multiply(rhs, sourceSpan) {
            return new BinaryOperatorExpr(BinaryOperator.Multiply, this, rhs, null, sourceSpan);
          }
        }, {
          key: "modulo",
          value: function modulo(rhs, sourceSpan) {
            return new BinaryOperatorExpr(BinaryOperator.Modulo, this, rhs, null, sourceSpan);
          }
        }, {
          key: "and",
          value: function and(rhs, sourceSpan) {
            return new BinaryOperatorExpr(BinaryOperator.And, this, rhs, null, sourceSpan);
          }
        }, {
          key: "bitwiseAnd",
          value: function bitwiseAnd(rhs, sourceSpan) {
            var parens = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
            return new BinaryOperatorExpr(BinaryOperator.BitwiseAnd, this, rhs, null, sourceSpan, parens);
          }
        }, {
          key: "or",
          value: function or(rhs, sourceSpan) {
            return new BinaryOperatorExpr(BinaryOperator.Or, this, rhs, null, sourceSpan);
          }
        }, {
          key: "lower",
          value: function lower(rhs, sourceSpan) {
            return new BinaryOperatorExpr(BinaryOperator.Lower, this, rhs, null, sourceSpan);
          }
        }, {
          key: "lowerEquals",
          value: function lowerEquals(rhs, sourceSpan) {
            return new BinaryOperatorExpr(BinaryOperator.LowerEquals, this, rhs, null, sourceSpan);
          }
        }, {
          key: "bigger",
          value: function bigger(rhs, sourceSpan) {
            return new BinaryOperatorExpr(BinaryOperator.Bigger, this, rhs, null, sourceSpan);
          }
        }, {
          key: "biggerEquals",
          value: function biggerEquals(rhs, sourceSpan) {
            return new BinaryOperatorExpr(BinaryOperator.BiggerEquals, this, rhs, null, sourceSpan);
          }
        }, {
          key: "isBlank",
          value: function isBlank(sourceSpan) {
            // Note: We use equals by purpose here to compare to null and undefined in JS.
            // We use the typed null to allow strictNullChecks to narrow types.
            return this.equals(TYPED_NULL_EXPR, sourceSpan);
          }
        }, {
          key: "cast",
          value: function cast(type, sourceSpan) {
            return new CastExpr(this, type, sourceSpan);
          }
        }, {
          key: "toStmt",
          value: function toStmt() {
            return new ExpressionStatement(this, null);
          }
        }]);

        return Expression;
      }();

      var BuiltinVar;

      (function (BuiltinVar) {
        BuiltinVar[BuiltinVar["This"] = 0] = "This";
        BuiltinVar[BuiltinVar["Super"] = 1] = "Super";
        BuiltinVar[BuiltinVar["CatchError"] = 2] = "CatchError";
        BuiltinVar[BuiltinVar["CatchStack"] = 3] = "CatchStack";
      })(BuiltinVar || (BuiltinVar = {}));

      var ReadVarExpr = /*#__PURE__*/function (_Expression) {
        _inherits(ReadVarExpr, _Expression);

        var _super5 = _createSuper(ReadVarExpr);

        function ReadVarExpr(name, type, sourceSpan) {
          var _this6;

          _classCallCheck(this, ReadVarExpr);

          _this6 = _super5.call(this, type, sourceSpan);

          if (typeof name === 'string') {
            _this6.name = name;
            _this6.builtin = null;
          } else {
            _this6.name = null;
            _this6.builtin = name;
          }

          return _this6;
        }

        _createClass(ReadVarExpr, [{
          key: "isEquivalent",
          value: function isEquivalent(e) {
            return e instanceof ReadVarExpr && this.name === e.name && this.builtin === e.builtin;
          }
        }, {
          key: "isConstant",
          value: function isConstant() {
            return false;
          }
        }, {
          key: "visitExpression",
          value: function visitExpression(visitor, context) {
            return visitor.visitReadVarExpr(this, context);
          }
        }, {
          key: "set",
          value: function set(value) {
            if (!this.name) {
              throw new Error("Built in variable ".concat(this.builtin, " can not be assigned to."));
            }

            return new WriteVarExpr(this.name, value, null, this.sourceSpan);
          }
        }]);

        return ReadVarExpr;
      }(Expression);

      var TypeofExpr = /*#__PURE__*/function (_Expression2) {
        _inherits(TypeofExpr, _Expression2);

        var _super6 = _createSuper(TypeofExpr);

        function TypeofExpr(expr, type, sourceSpan) {
          var _this7;

          _classCallCheck(this, TypeofExpr);

          _this7 = _super6.call(this, type, sourceSpan);
          _this7.expr = expr;
          return _this7;
        }

        _createClass(TypeofExpr, [{
          key: "visitExpression",
          value: function visitExpression(visitor, context) {
            return visitor.visitTypeofExpr(this, context);
          }
        }, {
          key: "isEquivalent",
          value: function isEquivalent(e) {
            return e instanceof TypeofExpr && e.expr.isEquivalent(this.expr);
          }
        }, {
          key: "isConstant",
          value: function isConstant() {
            return this.expr.isConstant();
          }
        }]);

        return TypeofExpr;
      }(Expression);

      var WrappedNodeExpr = /*#__PURE__*/function (_Expression3) {
        _inherits(WrappedNodeExpr, _Expression3);

        var _super7 = _createSuper(WrappedNodeExpr);

        function WrappedNodeExpr(node, type, sourceSpan) {
          var _this8;

          _classCallCheck(this, WrappedNodeExpr);

          _this8 = _super7.call(this, type, sourceSpan);
          _this8.node = node;
          return _this8;
        }

        _createClass(WrappedNodeExpr, [{
          key: "isEquivalent",
          value: function isEquivalent(e) {
            return e instanceof WrappedNodeExpr && this.node === e.node;
          }
        }, {
          key: "isConstant",
          value: function isConstant() {
            return false;
          }
        }, {
          key: "visitExpression",
          value: function visitExpression(visitor, context) {
            return visitor.visitWrappedNodeExpr(this, context);
          }
        }]);

        return WrappedNodeExpr;
      }(Expression);

      var WriteVarExpr = /*#__PURE__*/function (_Expression4) {
        _inherits(WriteVarExpr, _Expression4);

        var _super8 = _createSuper(WriteVarExpr);

        function WriteVarExpr(name, value, type, sourceSpan) {
          var _this9;

          _classCallCheck(this, WriteVarExpr);

          _this9 = _super8.call(this, type || value.type, sourceSpan);
          _this9.name = name;
          _this9.value = value;
          return _this9;
        }

        _createClass(WriteVarExpr, [{
          key: "isEquivalent",
          value: function isEquivalent(e) {
            return e instanceof WriteVarExpr && this.name === e.name && this.value.isEquivalent(e.value);
          }
        }, {
          key: "isConstant",
          value: function isConstant() {
            return false;
          }
        }, {
          key: "visitExpression",
          value: function visitExpression(visitor, context) {
            return visitor.visitWriteVarExpr(this, context);
          }
        }, {
          key: "toDeclStmt",
          value: function toDeclStmt(type, modifiers) {
            return new DeclareVarStmt(this.name, this.value, type, modifiers, this.sourceSpan);
          }
        }, {
          key: "toConstDecl",
          value: function toConstDecl() {
            return this.toDeclStmt(INFERRED_TYPE, [StmtModifier.Final]);
          }
        }]);

        return WriteVarExpr;
      }(Expression);

      var WriteKeyExpr = /*#__PURE__*/function (_Expression5) {
        _inherits(WriteKeyExpr, _Expression5);

        var _super9 = _createSuper(WriteKeyExpr);

        function WriteKeyExpr(receiver, index, value, type, sourceSpan) {
          var _this10;

          _classCallCheck(this, WriteKeyExpr);

          _this10 = _super9.call(this, type || value.type, sourceSpan);
          _this10.receiver = receiver;
          _this10.index = index;
          _this10.value = value;
          return _this10;
        }

        _createClass(WriteKeyExpr, [{
          key: "isEquivalent",
          value: function isEquivalent(e) {
            return e instanceof WriteKeyExpr && this.receiver.isEquivalent(e.receiver) && this.index.isEquivalent(e.index) && this.value.isEquivalent(e.value);
          }
        }, {
          key: "isConstant",
          value: function isConstant() {
            return false;
          }
        }, {
          key: "visitExpression",
          value: function visitExpression(visitor, context) {
            return visitor.visitWriteKeyExpr(this, context);
          }
        }]);

        return WriteKeyExpr;
      }(Expression);

      var WritePropExpr = /*#__PURE__*/function (_Expression6) {
        _inherits(WritePropExpr, _Expression6);

        var _super10 = _createSuper(WritePropExpr);

        function WritePropExpr(receiver, name, value, type, sourceSpan) {
          var _this11;

          _classCallCheck(this, WritePropExpr);

          _this11 = _super10.call(this, type || value.type, sourceSpan);
          _this11.receiver = receiver;
          _this11.name = name;
          _this11.value = value;
          return _this11;
        }

        _createClass(WritePropExpr, [{
          key: "isEquivalent",
          value: function isEquivalent(e) {
            return e instanceof WritePropExpr && this.receiver.isEquivalent(e.receiver) && this.name === e.name && this.value.isEquivalent(e.value);
          }
        }, {
          key: "isConstant",
          value: function isConstant() {
            return false;
          }
        }, {
          key: "visitExpression",
          value: function visitExpression(visitor, context) {
            return visitor.visitWritePropExpr(this, context);
          }
        }]);

        return WritePropExpr;
      }(Expression);

      var BuiltinMethod;

      (function (BuiltinMethod) {
        BuiltinMethod[BuiltinMethod["ConcatArray"] = 0] = "ConcatArray";
        BuiltinMethod[BuiltinMethod["SubscribeObservable"] = 1] = "SubscribeObservable";
        BuiltinMethod[BuiltinMethod["Bind"] = 2] = "Bind";
      })(BuiltinMethod || (BuiltinMethod = {}));

      var InvokeMethodExpr = /*#__PURE__*/function (_Expression7) {
        _inherits(InvokeMethodExpr, _Expression7);

        var _super11 = _createSuper(InvokeMethodExpr);

        function InvokeMethodExpr(receiver, method, args, type, sourceSpan) {
          var _this12;

          _classCallCheck(this, InvokeMethodExpr);

          _this12 = _super11.call(this, type, sourceSpan);
          _this12.receiver = receiver;
          _this12.args = args;

          if (typeof method === 'string') {
            _this12.name = method;
            _this12.builtin = null;
          } else {
            _this12.name = null;
            _this12.builtin = method;
          }

          return _this12;
        }

        _createClass(InvokeMethodExpr, [{
          key: "isEquivalent",
          value: function isEquivalent(e) {
            return e instanceof InvokeMethodExpr && this.receiver.isEquivalent(e.receiver) && this.name === e.name && this.builtin === e.builtin && areAllEquivalent(this.args, e.args);
          }
        }, {
          key: "isConstant",
          value: function isConstant() {
            return false;
          }
        }, {
          key: "visitExpression",
          value: function visitExpression(visitor, context) {
            return visitor.visitInvokeMethodExpr(this, context);
          }
        }]);

        return InvokeMethodExpr;
      }(Expression);

      var InvokeFunctionExpr = /*#__PURE__*/function (_Expression8) {
        _inherits(InvokeFunctionExpr, _Expression8);

        var _super12 = _createSuper(InvokeFunctionExpr);

        function InvokeFunctionExpr(fn, args, type, sourceSpan) {
          var _this13;

          var pure = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;

          _classCallCheck(this, InvokeFunctionExpr);

          _this13 = _super12.call(this, type, sourceSpan);
          _this13.fn = fn;
          _this13.args = args;
          _this13.pure = pure;
          return _this13;
        }

        _createClass(InvokeFunctionExpr, [{
          key: "isEquivalent",
          value: function isEquivalent(e) {
            return e instanceof InvokeFunctionExpr && this.fn.isEquivalent(e.fn) && areAllEquivalent(this.args, e.args) && this.pure === e.pure;
          }
        }, {
          key: "isConstant",
          value: function isConstant() {
            return false;
          }
        }, {
          key: "visitExpression",
          value: function visitExpression(visitor, context) {
            return visitor.visitInvokeFunctionExpr(this, context);
          }
        }]);

        return InvokeFunctionExpr;
      }(Expression);

      var TaggedTemplateExpr = /*#__PURE__*/function (_Expression9) {
        _inherits(TaggedTemplateExpr, _Expression9);

        var _super13 = _createSuper(TaggedTemplateExpr);

        function TaggedTemplateExpr(tag, template, type, sourceSpan) {
          var _this14;

          _classCallCheck(this, TaggedTemplateExpr);

          _this14 = _super13.call(this, type, sourceSpan);
          _this14.tag = tag;
          _this14.template = template;
          return _this14;
        }

        _createClass(TaggedTemplateExpr, [{
          key: "isEquivalent",
          value: function isEquivalent(e) {
            return e instanceof TaggedTemplateExpr && this.tag.isEquivalent(e.tag) && areAllEquivalentPredicate(this.template.elements, e.template.elements, function (a, b) {
              return a.text === b.text;
            }) && areAllEquivalent(this.template.expressions, e.template.expressions);
          }
        }, {
          key: "isConstant",
          value: function isConstant() {
            return false;
          }
        }, {
          key: "visitExpression",
          value: function visitExpression(visitor, context) {
            return visitor.visitTaggedTemplateExpr(this, context);
          }
        }]);

        return TaggedTemplateExpr;
      }(Expression);

      var InstantiateExpr = /*#__PURE__*/function (_Expression10) {
        _inherits(InstantiateExpr, _Expression10);

        var _super14 = _createSuper(InstantiateExpr);

        function InstantiateExpr(classExpr, args, type, sourceSpan) {
          var _this15;

          _classCallCheck(this, InstantiateExpr);

          _this15 = _super14.call(this, type, sourceSpan);
          _this15.classExpr = classExpr;
          _this15.args = args;
          return _this15;
        }

        _createClass(InstantiateExpr, [{
          key: "isEquivalent",
          value: function isEquivalent(e) {
            return e instanceof InstantiateExpr && this.classExpr.isEquivalent(e.classExpr) && areAllEquivalent(this.args, e.args);
          }
        }, {
          key: "isConstant",
          value: function isConstant() {
            return false;
          }
        }, {
          key: "visitExpression",
          value: function visitExpression(visitor, context) {
            return visitor.visitInstantiateExpr(this, context);
          }
        }]);

        return InstantiateExpr;
      }(Expression);

      var LiteralExpr = /*#__PURE__*/function (_Expression11) {
        _inherits(LiteralExpr, _Expression11);

        var _super15 = _createSuper(LiteralExpr);

        function LiteralExpr(value, type, sourceSpan) {
          var _this16;

          _classCallCheck(this, LiteralExpr);

          _this16 = _super15.call(this, type, sourceSpan);
          _this16.value = value;
          return _this16;
        }

        _createClass(LiteralExpr, [{
          key: "isEquivalent",
          value: function isEquivalent(e) {
            return e instanceof LiteralExpr && this.value === e.value;
          }
        }, {
          key: "isConstant",
          value: function isConstant() {
            return true;
          }
        }, {
          key: "visitExpression",
          value: function visitExpression(visitor, context) {
            return visitor.visitLiteralExpr(this, context);
          }
        }]);

        return LiteralExpr;
      }(Expression);

      var TemplateLiteral = function TemplateLiteral(elements, expressions) {
        _classCallCheck(this, TemplateLiteral);

        this.elements = elements;
        this.expressions = expressions;
      };

      var TemplateLiteralElement = function TemplateLiteralElement(text, sourceSpan, rawText) {
        _classCallCheck(this, TemplateLiteralElement);

        var _a;

        this.text = text;
        this.sourceSpan = sourceSpan; // If `rawText` is not provided, try to extract the raw string from its
        // associated `sourceSpan`. If that is also not available, "fake" the raw
        // string instead by escaping the following control sequences:
        // - "\" would otherwise indicate that the next character is a control character.
        // - "`" and "${" are template string control sequences that would otherwise prematurely
        // indicate the end of the template literal element.

        this.rawText = (_a = rawText !== null && rawText !== void 0 ? rawText : sourceSpan === null || sourceSpan === void 0 ? void 0 : sourceSpan.toString()) !== null && _a !== void 0 ? _a : escapeForTemplateLiteral(escapeSlashes(text));
      };

      var MessagePiece = function MessagePiece(text, sourceSpan) {
        _classCallCheck(this, MessagePiece);

        this.text = text;
        this.sourceSpan = sourceSpan;
      };

      var LiteralPiece = /*#__PURE__*/function (_MessagePiece) {
        _inherits(LiteralPiece, _MessagePiece);

        var _super16 = _createSuper(LiteralPiece);

        function LiteralPiece() {
          _classCallCheck(this, LiteralPiece);

          return _super16.apply(this, arguments);
        }

        return LiteralPiece;
      }(MessagePiece);

      var PlaceholderPiece = /*#__PURE__*/function (_MessagePiece2) {
        _inherits(PlaceholderPiece, _MessagePiece2);

        var _super17 = _createSuper(PlaceholderPiece);

        function PlaceholderPiece() {
          _classCallCheck(this, PlaceholderPiece);

          return _super17.apply(this, arguments);
        }

        return PlaceholderPiece;
      }(MessagePiece);

      var LocalizedString = /*#__PURE__*/function (_Expression12) {
        _inherits(LocalizedString, _Expression12);

        var _super18 = _createSuper(LocalizedString);

        function LocalizedString(metaBlock, messageParts, placeHolderNames, expressions, sourceSpan) {
          var _this17;

          _classCallCheck(this, LocalizedString);

          _this17 = _super18.call(this, STRING_TYPE, sourceSpan);
          _this17.metaBlock = metaBlock;
          _this17.messageParts = messageParts;
          _this17.placeHolderNames = placeHolderNames;
          _this17.expressions = expressions;
          return _this17;
        }

        _createClass(LocalizedString, [{
          key: "isEquivalent",
          value: function isEquivalent(e) {
            // return e instanceof LocalizedString && this.message === e.message;
            return false;
          }
        }, {
          key: "isConstant",
          value: function isConstant() {
            return false;
          }
        }, {
          key: "visitExpression",
          value: function visitExpression(visitor, context) {
            return visitor.visitLocalizedString(this, context);
          }
          /**
           * Serialize the given `meta` and `messagePart` into "cooked" and "raw" strings that can be used
           * in a `$localize` tagged string. The format of the metadata is the same as that parsed by
           * `parseI18nMeta()`.
           *
           * @param meta The metadata to serialize
           * @param messagePart The first part of the tagged string
           */

        }, {
          key: "serializeI18nHead",
          value: function serializeI18nHead() {
            var MEANING_SEPARATOR = '|';
            var ID_SEPARATOR = '@@';
            var LEGACY_ID_INDICATOR = '␟';
            var metaBlock = this.metaBlock.description || '';

            if (this.metaBlock.meaning) {
              metaBlock = "".concat(this.metaBlock.meaning).concat(MEANING_SEPARATOR).concat(metaBlock);
            }

            if (this.metaBlock.customId) {
              metaBlock = "".concat(metaBlock).concat(ID_SEPARATOR).concat(this.metaBlock.customId);
            }

            if (this.metaBlock.legacyIds) {
              this.metaBlock.legacyIds.forEach(function (legacyId) {
                metaBlock = "".concat(metaBlock).concat(LEGACY_ID_INDICATOR).concat(legacyId);
              });
            }

            return createCookedRawString(metaBlock, this.messageParts[0].text, this.getMessagePartSourceSpan(0));
          }
        }, {
          key: "getMessagePartSourceSpan",
          value: function getMessagePartSourceSpan(i) {
            var _a, _b;

            return (_b = (_a = this.messageParts[i]) === null || _a === void 0 ? void 0 : _a.sourceSpan) !== null && _b !== void 0 ? _b : this.sourceSpan;
          }
        }, {
          key: "getPlaceholderSourceSpan",
          value: function getPlaceholderSourceSpan(i) {
            var _a, _b, _c, _d;

            return (_d = (_b = (_a = this.placeHolderNames[i]) === null || _a === void 0 ? void 0 : _a.sourceSpan) !== null && _b !== void 0 ? _b : (_c = this.expressions[i]) === null || _c === void 0 ? void 0 : _c.sourceSpan) !== null && _d !== void 0 ? _d : this.sourceSpan;
          }
          /**
           * Serialize the given `placeholderName` and `messagePart` into "cooked" and "raw" strings that
           * can be used in a `$localize` tagged string.
           *
           * @param placeholderName The placeholder name to serialize
           * @param messagePart The following message string after this placeholder
           */

        }, {
          key: "serializeI18nTemplatePart",
          value: function serializeI18nTemplatePart(partIndex) {
            var placeholderName = this.placeHolderNames[partIndex - 1].text;
            var messagePart = this.messageParts[partIndex];
            return createCookedRawString(placeholderName, messagePart.text, this.getMessagePartSourceSpan(partIndex));
          }
        }]);

        return LocalizedString;
      }(Expression);

      var escapeSlashes = function escapeSlashes(str) {
        return str.replace(/\\/g, '\\\\');
      };

      var escapeStartingColon = function escapeStartingColon(str) {
        return str.replace(/^:/, '\\:');
      };

      var escapeColons = function escapeColons(str) {
        return str.replace(/:/g, '\\:');
      };

      var escapeForTemplateLiteral = function escapeForTemplateLiteral(str) {
        return str.replace(/`/g, '\\`').replace(/\${/g, '$\\{');
      };
      /**
       * Creates a `{cooked, raw}` object from the `metaBlock` and `messagePart`.
       *
       * The `raw` text must have various character sequences escaped:
       * * "\" would otherwise indicate that the next character is a control character.
       * * "`" and "${" are template string control sequences that would otherwise prematurely indicate
       *   the end of a message part.
       * * ":" inside a metablock would prematurely indicate the end of the metablock.
       * * ":" at the start of a messagePart with no metablock would erroneously indicate the start of a
       *   metablock.
       *
       * @param metaBlock Any metadata that should be prepended to the string
       * @param messagePart The message part of the string
       */


      function createCookedRawString(metaBlock, messagePart, range) {
        if (metaBlock === '') {
          return {
            cooked: messagePart,
            raw: escapeForTemplateLiteral(escapeStartingColon(escapeSlashes(messagePart))),
            range: range
          };
        } else {
          return {
            cooked: ":".concat(metaBlock, ":").concat(messagePart),
            raw: escapeForTemplateLiteral(":".concat(escapeColons(escapeSlashes(metaBlock)), ":").concat(escapeSlashes(messagePart))),
            range: range
          };
        }
      }

      var ExternalExpr = /*#__PURE__*/function (_Expression13) {
        _inherits(ExternalExpr, _Expression13);

        var _super19 = _createSuper(ExternalExpr);

        function ExternalExpr(value, type) {
          var _this18;

          var typeParams = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
          var sourceSpan = arguments.length > 3 ? arguments[3] : undefined;

          _classCallCheck(this, ExternalExpr);

          _this18 = _super19.call(this, type, sourceSpan);
          _this18.value = value;
          _this18.typeParams = typeParams;
          return _this18;
        }

        _createClass(ExternalExpr, [{
          key: "isEquivalent",
          value: function isEquivalent(e) {
            return e instanceof ExternalExpr && this.value.name === e.value.name && this.value.moduleName === e.value.moduleName && this.value.runtime === e.value.runtime;
          }
        }, {
          key: "isConstant",
          value: function isConstant() {
            return false;
          }
        }, {
          key: "visitExpression",
          value: function visitExpression(visitor, context) {
            return visitor.visitExternalExpr(this, context);
          }
        }]);

        return ExternalExpr;
      }(Expression);

      var ExternalReference = function ExternalReference(moduleName, name, runtime) {
        _classCallCheck(this, ExternalReference);

        this.moduleName = moduleName;
        this.name = name;
        this.runtime = runtime;
      };

      var ConditionalExpr = /*#__PURE__*/function (_Expression14) {
        _inherits(ConditionalExpr, _Expression14);

        var _super20 = _createSuper(ConditionalExpr);

        function ConditionalExpr(condition, trueCase) {
          var _this19;

          var falseCase = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
          var type = arguments.length > 3 ? arguments[3] : undefined;
          var sourceSpan = arguments.length > 4 ? arguments[4] : undefined;

          _classCallCheck(this, ConditionalExpr);

          _this19 = _super20.call(this, type || trueCase.type, sourceSpan);
          _this19.condition = condition;
          _this19.falseCase = falseCase;
          _this19.trueCase = trueCase;
          return _this19;
        }

        _createClass(ConditionalExpr, [{
          key: "isEquivalent",
          value: function isEquivalent(e) {
            return e instanceof ConditionalExpr && this.condition.isEquivalent(e.condition) && this.trueCase.isEquivalent(e.trueCase) && nullSafeIsEquivalent(this.falseCase, e.falseCase);
          }
        }, {
          key: "isConstant",
          value: function isConstant() {
            return false;
          }
        }, {
          key: "visitExpression",
          value: function visitExpression(visitor, context) {
            return visitor.visitConditionalExpr(this, context);
          }
        }]);

        return ConditionalExpr;
      }(Expression);

      var NotExpr = /*#__PURE__*/function (_Expression15) {
        _inherits(NotExpr, _Expression15);

        var _super21 = _createSuper(NotExpr);

        function NotExpr(condition, sourceSpan) {
          var _this20;

          _classCallCheck(this, NotExpr);

          _this20 = _super21.call(this, BOOL_TYPE, sourceSpan);
          _this20.condition = condition;
          return _this20;
        }

        _createClass(NotExpr, [{
          key: "isEquivalent",
          value: function isEquivalent(e) {
            return e instanceof NotExpr && this.condition.isEquivalent(e.condition);
          }
        }, {
          key: "isConstant",
          value: function isConstant() {
            return false;
          }
        }, {
          key: "visitExpression",
          value: function visitExpression(visitor, context) {
            return visitor.visitNotExpr(this, context);
          }
        }]);

        return NotExpr;
      }(Expression);

      var AssertNotNull = /*#__PURE__*/function (_Expression16) {
        _inherits(AssertNotNull, _Expression16);

        var _super22 = _createSuper(AssertNotNull);

        function AssertNotNull(condition, sourceSpan) {
          var _this21;

          _classCallCheck(this, AssertNotNull);

          _this21 = _super22.call(this, condition.type, sourceSpan);
          _this21.condition = condition;
          return _this21;
        }

        _createClass(AssertNotNull, [{
          key: "isEquivalent",
          value: function isEquivalent(e) {
            return e instanceof AssertNotNull && this.condition.isEquivalent(e.condition);
          }
        }, {
          key: "isConstant",
          value: function isConstant() {
            return false;
          }
        }, {
          key: "visitExpression",
          value: function visitExpression(visitor, context) {
            return visitor.visitAssertNotNullExpr(this, context);
          }
        }]);

        return AssertNotNull;
      }(Expression);

      var CastExpr = /*#__PURE__*/function (_Expression17) {
        _inherits(CastExpr, _Expression17);

        var _super23 = _createSuper(CastExpr);

        function CastExpr(value, type, sourceSpan) {
          var _this22;

          _classCallCheck(this, CastExpr);

          _this22 = _super23.call(this, type, sourceSpan);
          _this22.value = value;
          return _this22;
        }

        _createClass(CastExpr, [{
          key: "isEquivalent",
          value: function isEquivalent(e) {
            return e instanceof CastExpr && this.value.isEquivalent(e.value);
          }
        }, {
          key: "isConstant",
          value: function isConstant() {
            return false;
          }
        }, {
          key: "visitExpression",
          value: function visitExpression(visitor, context) {
            return visitor.visitCastExpr(this, context);
          }
        }]);

        return CastExpr;
      }(Expression);

      var FnParam = /*#__PURE__*/function () {
        function FnParam(name) {
          var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

          _classCallCheck(this, FnParam);

          this.name = name;
          this.type = type;
        }

        _createClass(FnParam, [{
          key: "isEquivalent",
          value: function isEquivalent(param) {
            return this.name === param.name;
          }
        }]);

        return FnParam;
      }();

      var FunctionExpr = /*#__PURE__*/function (_Expression18) {
        _inherits(FunctionExpr, _Expression18);

        var _super24 = _createSuper(FunctionExpr);

        function FunctionExpr(params, statements, type, sourceSpan, name) {
          var _this23;

          _classCallCheck(this, FunctionExpr);

          _this23 = _super24.call(this, type, sourceSpan);
          _this23.params = params;
          _this23.statements = statements;
          _this23.name = name;
          return _this23;
        }

        _createClass(FunctionExpr, [{
          key: "isEquivalent",
          value: function isEquivalent(e) {
            return e instanceof FunctionExpr && areAllEquivalent(this.params, e.params) && areAllEquivalent(this.statements, e.statements);
          }
        }, {
          key: "isConstant",
          value: function isConstant() {
            return false;
          }
        }, {
          key: "visitExpression",
          value: function visitExpression(visitor, context) {
            return visitor.visitFunctionExpr(this, context);
          }
        }, {
          key: "toDeclStmt",
          value: function toDeclStmt(name, modifiers) {
            return new DeclareFunctionStmt(name, this.params, this.statements, this.type, modifiers, this.sourceSpan);
          }
        }]);

        return FunctionExpr;
      }(Expression);

      var UnaryOperatorExpr = /*#__PURE__*/function (_Expression19) {
        _inherits(UnaryOperatorExpr, _Expression19);

        var _super25 = _createSuper(UnaryOperatorExpr);

        function UnaryOperatorExpr(operator, expr, type, sourceSpan) {
          var _this24;

          var parens = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : true;

          _classCallCheck(this, UnaryOperatorExpr);

          _this24 = _super25.call(this, type || NUMBER_TYPE, sourceSpan);
          _this24.operator = operator;
          _this24.expr = expr;
          _this24.parens = parens;
          return _this24;
        }

        _createClass(UnaryOperatorExpr, [{
          key: "isEquivalent",
          value: function isEquivalent(e) {
            return e instanceof UnaryOperatorExpr && this.operator === e.operator && this.expr.isEquivalent(e.expr);
          }
        }, {
          key: "isConstant",
          value: function isConstant() {
            return false;
          }
        }, {
          key: "visitExpression",
          value: function visitExpression(visitor, context) {
            return visitor.visitUnaryOperatorExpr(this, context);
          }
        }]);

        return UnaryOperatorExpr;
      }(Expression);

      var BinaryOperatorExpr = /*#__PURE__*/function (_Expression20) {
        _inherits(BinaryOperatorExpr, _Expression20);

        var _super26 = _createSuper(BinaryOperatorExpr);

        function BinaryOperatorExpr(operator, lhs, rhs, type, sourceSpan) {
          var _this25;

          var parens = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : true;

          _classCallCheck(this, BinaryOperatorExpr);

          _this25 = _super26.call(this, type || lhs.type, sourceSpan);
          _this25.operator = operator;
          _this25.rhs = rhs;
          _this25.parens = parens;
          _this25.lhs = lhs;
          return _this25;
        }

        _createClass(BinaryOperatorExpr, [{
          key: "isEquivalent",
          value: function isEquivalent(e) {
            return e instanceof BinaryOperatorExpr && this.operator === e.operator && this.lhs.isEquivalent(e.lhs) && this.rhs.isEquivalent(e.rhs);
          }
        }, {
          key: "isConstant",
          value: function isConstant() {
            return false;
          }
        }, {
          key: "visitExpression",
          value: function visitExpression(visitor, context) {
            return visitor.visitBinaryOperatorExpr(this, context);
          }
        }]);

        return BinaryOperatorExpr;
      }(Expression);

      var ReadPropExpr = /*#__PURE__*/function (_Expression21) {
        _inherits(ReadPropExpr, _Expression21);

        var _super27 = _createSuper(ReadPropExpr);

        function ReadPropExpr(receiver, name, type, sourceSpan) {
          var _this26;

          _classCallCheck(this, ReadPropExpr);

          _this26 = _super27.call(this, type, sourceSpan);
          _this26.receiver = receiver;
          _this26.name = name;
          return _this26;
        }

        _createClass(ReadPropExpr, [{
          key: "isEquivalent",
          value: function isEquivalent(e) {
            return e instanceof ReadPropExpr && this.receiver.isEquivalent(e.receiver) && this.name === e.name;
          }
        }, {
          key: "isConstant",
          value: function isConstant() {
            return false;
          }
        }, {
          key: "visitExpression",
          value: function visitExpression(visitor, context) {
            return visitor.visitReadPropExpr(this, context);
          }
        }, {
          key: "set",
          value: function set(value) {
            return new WritePropExpr(this.receiver, this.name, value, null, this.sourceSpan);
          }
        }]);

        return ReadPropExpr;
      }(Expression);

      var ReadKeyExpr = /*#__PURE__*/function (_Expression22) {
        _inherits(ReadKeyExpr, _Expression22);

        var _super28 = _createSuper(ReadKeyExpr);

        function ReadKeyExpr(receiver, index, type, sourceSpan) {
          var _this27;

          _classCallCheck(this, ReadKeyExpr);

          _this27 = _super28.call(this, type, sourceSpan);
          _this27.receiver = receiver;
          _this27.index = index;
          return _this27;
        }

        _createClass(ReadKeyExpr, [{
          key: "isEquivalent",
          value: function isEquivalent(e) {
            return e instanceof ReadKeyExpr && this.receiver.isEquivalent(e.receiver) && this.index.isEquivalent(e.index);
          }
        }, {
          key: "isConstant",
          value: function isConstant() {
            return false;
          }
        }, {
          key: "visitExpression",
          value: function visitExpression(visitor, context) {
            return visitor.visitReadKeyExpr(this, context);
          }
        }, {
          key: "set",
          value: function set(value) {
            return new WriteKeyExpr(this.receiver, this.index, value, null, this.sourceSpan);
          }
        }]);

        return ReadKeyExpr;
      }(Expression);

      var LiteralArrayExpr = /*#__PURE__*/function (_Expression23) {
        _inherits(LiteralArrayExpr, _Expression23);

        var _super29 = _createSuper(LiteralArrayExpr);

        function LiteralArrayExpr(entries, type, sourceSpan) {
          var _this28;

          _classCallCheck(this, LiteralArrayExpr);

          _this28 = _super29.call(this, type, sourceSpan);
          _this28.entries = entries;
          return _this28;
        }

        _createClass(LiteralArrayExpr, [{
          key: "isConstant",
          value: function isConstant() {
            return this.entries.every(function (e) {
              return e.isConstant();
            });
          }
        }, {
          key: "isEquivalent",
          value: function isEquivalent(e) {
            return e instanceof LiteralArrayExpr && areAllEquivalent(this.entries, e.entries);
          }
        }, {
          key: "visitExpression",
          value: function visitExpression(visitor, context) {
            return visitor.visitLiteralArrayExpr(this, context);
          }
        }]);

        return LiteralArrayExpr;
      }(Expression);

      var LiteralMapEntry = /*#__PURE__*/function () {
        function LiteralMapEntry(key, value, quoted) {
          _classCallCheck(this, LiteralMapEntry);

          this.key = key;
          this.value = value;
          this.quoted = quoted;
        }

        _createClass(LiteralMapEntry, [{
          key: "isEquivalent",
          value: function isEquivalent(e) {
            return this.key === e.key && this.value.isEquivalent(e.value);
          }
        }]);

        return LiteralMapEntry;
      }();

      var LiteralMapExpr = /*#__PURE__*/function (_Expression24) {
        _inherits(LiteralMapExpr, _Expression24);

        var _super30 = _createSuper(LiteralMapExpr);

        function LiteralMapExpr(entries, type, sourceSpan) {
          var _this29;

          _classCallCheck(this, LiteralMapExpr);

          _this29 = _super30.call(this, type, sourceSpan);
          _this29.entries = entries;
          _this29.valueType = null;

          if (type) {
            _this29.valueType = type.valueType;
          }

          return _this29;
        }

        _createClass(LiteralMapExpr, [{
          key: "isEquivalent",
          value: function isEquivalent(e) {
            return e instanceof LiteralMapExpr && areAllEquivalent(this.entries, e.entries);
          }
        }, {
          key: "isConstant",
          value: function isConstant() {
            return this.entries.every(function (e) {
              return e.value.isConstant();
            });
          }
        }, {
          key: "visitExpression",
          value: function visitExpression(visitor, context) {
            return visitor.visitLiteralMapExpr(this, context);
          }
        }]);

        return LiteralMapExpr;
      }(Expression);

      var CommaExpr = /*#__PURE__*/function (_Expression25) {
        _inherits(CommaExpr, _Expression25);

        var _super31 = _createSuper(CommaExpr);

        function CommaExpr(parts, sourceSpan) {
          var _this30;

          _classCallCheck(this, CommaExpr);

          _this30 = _super31.call(this, parts[parts.length - 1].type, sourceSpan);
          _this30.parts = parts;
          return _this30;
        }

        _createClass(CommaExpr, [{
          key: "isEquivalent",
          value: function isEquivalent(e) {
            return e instanceof CommaExpr && areAllEquivalent(this.parts, e.parts);
          }
        }, {
          key: "isConstant",
          value: function isConstant() {
            return false;
          }
        }, {
          key: "visitExpression",
          value: function visitExpression(visitor, context) {
            return visitor.visitCommaExpr(this, context);
          }
        }]);

        return CommaExpr;
      }(Expression);

      var THIS_EXPR = new ReadVarExpr(BuiltinVar.This, null, null);
      var SUPER_EXPR = new ReadVarExpr(BuiltinVar.Super, null, null);
      var CATCH_ERROR_VAR = new ReadVarExpr(BuiltinVar.CatchError, null, null);
      var CATCH_STACK_VAR = new ReadVarExpr(BuiltinVar.CatchStack, null, null);
      var NULL_EXPR = new LiteralExpr(null, null, null);
      var TYPED_NULL_EXPR = new LiteralExpr(null, INFERRED_TYPE, null); //// Statements

      var StmtModifier;

      (function (StmtModifier) {
        StmtModifier[StmtModifier["Final"] = 0] = "Final";
        StmtModifier[StmtModifier["Private"] = 1] = "Private";
        StmtModifier[StmtModifier["Exported"] = 2] = "Exported";
        StmtModifier[StmtModifier["Static"] = 3] = "Static";
      })(StmtModifier || (StmtModifier = {}));

      var LeadingComment = /*#__PURE__*/function () {
        function LeadingComment(text, multiline, trailingNewline) {
          _classCallCheck(this, LeadingComment);

          this.text = text;
          this.multiline = multiline;
          this.trailingNewline = trailingNewline;
        }

        _createClass(LeadingComment, [{
          key: "toString",
          value: function toString() {
            return this.multiline ? " ".concat(this.text, " ") : this.text;
          }
        }]);

        return LeadingComment;
      }();

      var JSDocComment = /*#__PURE__*/function (_LeadingComment) {
        _inherits(JSDocComment, _LeadingComment);

        var _super32 = _createSuper(JSDocComment);

        function JSDocComment(tags) {
          var _this31;

          _classCallCheck(this, JSDocComment);

          _this31 = _super32.call(this, '',
          /* multiline */
          true,
          /* trailingNewline */
          true);
          _this31.tags = tags;
          return _this31;
        }

        _createClass(JSDocComment, [{
          key: "toString",
          value: function toString() {
            return serializeTags(this.tags);
          }
        }]);

        return JSDocComment;
      }(LeadingComment);

      var Statement = /*#__PURE__*/function () {
        function Statement() {
          var modifiers = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
          var sourceSpan = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
          var leadingComments = arguments.length > 2 ? arguments[2] : undefined;

          _classCallCheck(this, Statement);

          this.modifiers = modifiers;
          this.sourceSpan = sourceSpan;
          this.leadingComments = leadingComments;
        }

        _createClass(Statement, [{
          key: "hasModifier",
          value: function hasModifier(modifier) {
            return this.modifiers.indexOf(modifier) !== -1;
          }
        }, {
          key: "addLeadingComment",
          value: function addLeadingComment(leadingComment) {
            var _a;

            this.leadingComments = (_a = this.leadingComments) !== null && _a !== void 0 ? _a : [];
            this.leadingComments.push(leadingComment);
          }
        }]);

        return Statement;
      }();

      var DeclareVarStmt = /*#__PURE__*/function (_Statement) {
        _inherits(DeclareVarStmt, _Statement);

        var _super33 = _createSuper(DeclareVarStmt);

        function DeclareVarStmt(name, value, type, modifiers, sourceSpan, leadingComments) {
          var _this32;

          _classCallCheck(this, DeclareVarStmt);

          _this32 = _super33.call(this, modifiers, sourceSpan, leadingComments);
          _this32.name = name;
          _this32.value = value;
          _this32.type = type || value && value.type || null;
          return _this32;
        }

        _createClass(DeclareVarStmt, [{
          key: "isEquivalent",
          value: function isEquivalent(stmt) {
            return stmt instanceof DeclareVarStmt && this.name === stmt.name && (this.value ? !!stmt.value && this.value.isEquivalent(stmt.value) : !stmt.value);
          }
        }, {
          key: "visitStatement",
          value: function visitStatement(visitor, context) {
            return visitor.visitDeclareVarStmt(this, context);
          }
        }]);

        return DeclareVarStmt;
      }(Statement);

      var DeclareFunctionStmt = /*#__PURE__*/function (_Statement2) {
        _inherits(DeclareFunctionStmt, _Statement2);

        var _super34 = _createSuper(DeclareFunctionStmt);

        function DeclareFunctionStmt(name, params, statements, type, modifiers, sourceSpan, leadingComments) {
          var _this33;

          _classCallCheck(this, DeclareFunctionStmt);

          _this33 = _super34.call(this, modifiers, sourceSpan, leadingComments);
          _this33.name = name;
          _this33.params = params;
          _this33.statements = statements;
          _this33.type = type || null;
          return _this33;
        }

        _createClass(DeclareFunctionStmt, [{
          key: "isEquivalent",
          value: function isEquivalent(stmt) {
            return stmt instanceof DeclareFunctionStmt && areAllEquivalent(this.params, stmt.params) && areAllEquivalent(this.statements, stmt.statements);
          }
        }, {
          key: "visitStatement",
          value: function visitStatement(visitor, context) {
            return visitor.visitDeclareFunctionStmt(this, context);
          }
        }]);

        return DeclareFunctionStmt;
      }(Statement);

      var ExpressionStatement = /*#__PURE__*/function (_Statement3) {
        _inherits(ExpressionStatement, _Statement3);

        var _super35 = _createSuper(ExpressionStatement);

        function ExpressionStatement(expr, sourceSpan, leadingComments) {
          var _this34;

          _classCallCheck(this, ExpressionStatement);

          _this34 = _super35.call(this, [], sourceSpan, leadingComments);
          _this34.expr = expr;
          return _this34;
        }

        _createClass(ExpressionStatement, [{
          key: "isEquivalent",
          value: function isEquivalent(stmt) {
            return stmt instanceof ExpressionStatement && this.expr.isEquivalent(stmt.expr);
          }
        }, {
          key: "visitStatement",
          value: function visitStatement(visitor, context) {
            return visitor.visitExpressionStmt(this, context);
          }
        }]);

        return ExpressionStatement;
      }(Statement);

      var ReturnStatement = /*#__PURE__*/function (_Statement4) {
        _inherits(ReturnStatement, _Statement4);

        var _super36 = _createSuper(ReturnStatement);

        function ReturnStatement(value) {
          var _this35;

          var sourceSpan = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
          var leadingComments = arguments.length > 2 ? arguments[2] : undefined;

          _classCallCheck(this, ReturnStatement);

          _this35 = _super36.call(this, [], sourceSpan, leadingComments);
          _this35.value = value;
          return _this35;
        }

        _createClass(ReturnStatement, [{
          key: "isEquivalent",
          value: function isEquivalent(stmt) {
            return stmt instanceof ReturnStatement && this.value.isEquivalent(stmt.value);
          }
        }, {
          key: "visitStatement",
          value: function visitStatement(visitor, context) {
            return visitor.visitReturnStmt(this, context);
          }
        }]);

        return ReturnStatement;
      }(Statement);

      var AbstractClassPart = /*#__PURE__*/function () {
        function AbstractClassPart() {
          var type = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
          var modifiers = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];

          _classCallCheck(this, AbstractClassPart);

          this.type = type;
          this.modifiers = modifiers;
        }

        _createClass(AbstractClassPart, [{
          key: "hasModifier",
          value: function hasModifier(modifier) {
            return this.modifiers.indexOf(modifier) !== -1;
          }
        }]);

        return AbstractClassPart;
      }();

      var ClassField = /*#__PURE__*/function (_AbstractClassPart) {
        _inherits(ClassField, _AbstractClassPart);

        var _super37 = _createSuper(ClassField);

        function ClassField(name, type, modifiers, initializer) {
          var _this36;

          _classCallCheck(this, ClassField);

          _this36 = _super37.call(this, type, modifiers);
          _this36.name = name;
          _this36.initializer = initializer;
          return _this36;
        }

        _createClass(ClassField, [{
          key: "isEquivalent",
          value: function isEquivalent(f) {
            return this.name === f.name;
          }
        }]);

        return ClassField;
      }(AbstractClassPart);

      var ClassMethod = /*#__PURE__*/function (_AbstractClassPart2) {
        _inherits(ClassMethod, _AbstractClassPart2);

        var _super38 = _createSuper(ClassMethod);

        function ClassMethod(name, params, body, type, modifiers) {
          var _this37;

          _classCallCheck(this, ClassMethod);

          _this37 = _super38.call(this, type, modifiers);
          _this37.name = name;
          _this37.params = params;
          _this37.body = body;
          return _this37;
        }

        _createClass(ClassMethod, [{
          key: "isEquivalent",
          value: function isEquivalent(m) {
            return this.name === m.name && areAllEquivalent(this.body, m.body);
          }
        }]);

        return ClassMethod;
      }(AbstractClassPart);

      var ClassGetter = /*#__PURE__*/function (_AbstractClassPart3) {
        _inherits(ClassGetter, _AbstractClassPart3);

        var _super39 = _createSuper(ClassGetter);

        function ClassGetter(name, body, type, modifiers) {
          var _this38;

          _classCallCheck(this, ClassGetter);

          _this38 = _super39.call(this, type, modifiers);
          _this38.name = name;
          _this38.body = body;
          return _this38;
        }

        _createClass(ClassGetter, [{
          key: "isEquivalent",
          value: function isEquivalent(m) {
            return this.name === m.name && areAllEquivalent(this.body, m.body);
          }
        }]);

        return ClassGetter;
      }(AbstractClassPart);

      var ClassStmt = /*#__PURE__*/function (_Statement5) {
        _inherits(ClassStmt, _Statement5);

        var _super40 = _createSuper(ClassStmt);

        function ClassStmt(name, parent, fields, getters, constructorMethod, methods, modifiers, sourceSpan, leadingComments) {
          var _this39;

          _classCallCheck(this, ClassStmt);

          _this39 = _super40.call(this, modifiers, sourceSpan, leadingComments);
          _this39.name = name;
          _this39.parent = parent;
          _this39.fields = fields;
          _this39.getters = getters;
          _this39.constructorMethod = constructorMethod;
          _this39.methods = methods;
          return _this39;
        }

        _createClass(ClassStmt, [{
          key: "isEquivalent",
          value: function isEquivalent(stmt) {
            return stmt instanceof ClassStmt && this.name === stmt.name && nullSafeIsEquivalent(this.parent, stmt.parent) && areAllEquivalent(this.fields, stmt.fields) && areAllEquivalent(this.getters, stmt.getters) && this.constructorMethod.isEquivalent(stmt.constructorMethod) && areAllEquivalent(this.methods, stmt.methods);
          }
        }, {
          key: "visitStatement",
          value: function visitStatement(visitor, context) {
            return visitor.visitDeclareClassStmt(this, context);
          }
        }]);

        return ClassStmt;
      }(Statement);

      var IfStmt = /*#__PURE__*/function (_Statement6) {
        _inherits(IfStmt, _Statement6);

        var _super41 = _createSuper(IfStmt);

        function IfStmt(condition, trueCase) {
          var _this40;

          var falseCase = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];
          var sourceSpan = arguments.length > 3 ? arguments[3] : undefined;
          var leadingComments = arguments.length > 4 ? arguments[4] : undefined;

          _classCallCheck(this, IfStmt);

          _this40 = _super41.call(this, [], sourceSpan, leadingComments);
          _this40.condition = condition;
          _this40.trueCase = trueCase;
          _this40.falseCase = falseCase;
          return _this40;
        }

        _createClass(IfStmt, [{
          key: "isEquivalent",
          value: function isEquivalent(stmt) {
            return stmt instanceof IfStmt && this.condition.isEquivalent(stmt.condition) && areAllEquivalent(this.trueCase, stmt.trueCase) && areAllEquivalent(this.falseCase, stmt.falseCase);
          }
        }, {
          key: "visitStatement",
          value: function visitStatement(visitor, context) {
            return visitor.visitIfStmt(this, context);
          }
        }]);

        return IfStmt;
      }(Statement);

      var TryCatchStmt = /*#__PURE__*/function (_Statement7) {
        _inherits(TryCatchStmt, _Statement7);

        var _super42 = _createSuper(TryCatchStmt);

        function TryCatchStmt(bodyStmts, catchStmts) {
          var _this41;

          var sourceSpan = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
          var leadingComments = arguments.length > 3 ? arguments[3] : undefined;

          _classCallCheck(this, TryCatchStmt);

          _this41 = _super42.call(this, [], sourceSpan, leadingComments);
          _this41.bodyStmts = bodyStmts;
          _this41.catchStmts = catchStmts;
          return _this41;
        }

        _createClass(TryCatchStmt, [{
          key: "isEquivalent",
          value: function isEquivalent(stmt) {
            return stmt instanceof TryCatchStmt && areAllEquivalent(this.bodyStmts, stmt.bodyStmts) && areAllEquivalent(this.catchStmts, stmt.catchStmts);
          }
        }, {
          key: "visitStatement",
          value: function visitStatement(visitor, context) {
            return visitor.visitTryCatchStmt(this, context);
          }
        }]);

        return TryCatchStmt;
      }(Statement);

      var ThrowStmt = /*#__PURE__*/function (_Statement8) {
        _inherits(ThrowStmt, _Statement8);

        var _super43 = _createSuper(ThrowStmt);

        function ThrowStmt(error) {
          var _this42;

          var sourceSpan = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
          var leadingComments = arguments.length > 2 ? arguments[2] : undefined;

          _classCallCheck(this, ThrowStmt);

          _this42 = _super43.call(this, [], sourceSpan, leadingComments);
          _this42.error = error;
          return _this42;
        }

        _createClass(ThrowStmt, [{
          key: "isEquivalent",
          value: function isEquivalent(stmt) {
            return stmt instanceof TryCatchStmt && this.error.isEquivalent(stmt.error);
          }
        }, {
          key: "visitStatement",
          value: function visitStatement(visitor, context) {
            return visitor.visitThrowStmt(this, context);
          }
        }]);

        return ThrowStmt;
      }(Statement);

      var AstTransformer = /*#__PURE__*/function () {
        function AstTransformer() {
          _classCallCheck(this, AstTransformer);
        }

        _createClass(AstTransformer, [{
          key: "transformExpr",
          value: function transformExpr(expr, context) {
            return expr;
          }
        }, {
          key: "transformStmt",
          value: function transformStmt(stmt, context) {
            return stmt;
          }
        }, {
          key: "visitReadVarExpr",
          value: function visitReadVarExpr(ast, context) {
            return this.transformExpr(ast, context);
          }
        }, {
          key: "visitWrappedNodeExpr",
          value: function visitWrappedNodeExpr(ast, context) {
            return this.transformExpr(ast, context);
          }
        }, {
          key: "visitTypeofExpr",
          value: function visitTypeofExpr(expr, context) {
            return this.transformExpr(new TypeofExpr(expr.expr.visitExpression(this, context), expr.type, expr.sourceSpan), context);
          }
        }, {
          key: "visitWriteVarExpr",
          value: function visitWriteVarExpr(expr, context) {
            return this.transformExpr(new WriteVarExpr(expr.name, expr.value.visitExpression(this, context), expr.type, expr.sourceSpan), context);
          }
        }, {
          key: "visitWriteKeyExpr",
          value: function visitWriteKeyExpr(expr, context) {
            return this.transformExpr(new WriteKeyExpr(expr.receiver.visitExpression(this, context), expr.index.visitExpression(this, context), expr.value.visitExpression(this, context), expr.type, expr.sourceSpan), context);
          }
        }, {
          key: "visitWritePropExpr",
          value: function visitWritePropExpr(expr, context) {
            return this.transformExpr(new WritePropExpr(expr.receiver.visitExpression(this, context), expr.name, expr.value.visitExpression(this, context), expr.type, expr.sourceSpan), context);
          }
        }, {
          key: "visitInvokeMethodExpr",
          value: function visitInvokeMethodExpr(ast, context) {
            var method = ast.builtin || ast.name;
            return this.transformExpr(new InvokeMethodExpr(ast.receiver.visitExpression(this, context), method, this.visitAllExpressions(ast.args, context), ast.type, ast.sourceSpan), context);
          }
        }, {
          key: "visitInvokeFunctionExpr",
          value: function visitInvokeFunctionExpr(ast, context) {
            return this.transformExpr(new InvokeFunctionExpr(ast.fn.visitExpression(this, context), this.visitAllExpressions(ast.args, context), ast.type, ast.sourceSpan), context);
          }
        }, {
          key: "visitTaggedTemplateExpr",
          value: function visitTaggedTemplateExpr(ast, context) {
            var _this43 = this;

            return this.transformExpr(new TaggedTemplateExpr(ast.tag.visitExpression(this, context), new TemplateLiteral(ast.template.elements, ast.template.expressions.map(function (e) {
              return e.visitExpression(_this43, context);
            })), ast.type, ast.sourceSpan), context);
          }
        }, {
          key: "visitInstantiateExpr",
          value: function visitInstantiateExpr(ast, context) {
            return this.transformExpr(new InstantiateExpr(ast.classExpr.visitExpression(this, context), this.visitAllExpressions(ast.args, context), ast.type, ast.sourceSpan), context);
          }
        }, {
          key: "visitLiteralExpr",
          value: function visitLiteralExpr(ast, context) {
            return this.transformExpr(ast, context);
          }
        }, {
          key: "visitLocalizedString",
          value: function visitLocalizedString(ast, context) {
            return this.transformExpr(new LocalizedString(ast.metaBlock, ast.messageParts, ast.placeHolderNames, this.visitAllExpressions(ast.expressions, context), ast.sourceSpan), context);
          }
        }, {
          key: "visitExternalExpr",
          value: function visitExternalExpr(ast, context) {
            return this.transformExpr(ast, context);
          }
        }, {
          key: "visitConditionalExpr",
          value: function visitConditionalExpr(ast, context) {
            return this.transformExpr(new ConditionalExpr(ast.condition.visitExpression(this, context), ast.trueCase.visitExpression(this, context), ast.falseCase.visitExpression(this, context), ast.type, ast.sourceSpan), context);
          }
        }, {
          key: "visitNotExpr",
          value: function visitNotExpr(ast, context) {
            return this.transformExpr(new NotExpr(ast.condition.visitExpression(this, context), ast.sourceSpan), context);
          }
        }, {
          key: "visitAssertNotNullExpr",
          value: function visitAssertNotNullExpr(ast, context) {
            return this.transformExpr(new AssertNotNull(ast.condition.visitExpression(this, context), ast.sourceSpan), context);
          }
        }, {
          key: "visitCastExpr",
          value: function visitCastExpr(ast, context) {
            return this.transformExpr(new CastExpr(ast.value.visitExpression(this, context), ast.type, ast.sourceSpan), context);
          }
        }, {
          key: "visitFunctionExpr",
          value: function visitFunctionExpr(ast, context) {
            return this.transformExpr(new FunctionExpr(ast.params, this.visitAllStatements(ast.statements, context), ast.type, ast.sourceSpan), context);
          }
        }, {
          key: "visitUnaryOperatorExpr",
          value: function visitUnaryOperatorExpr(ast, context) {
            return this.transformExpr(new UnaryOperatorExpr(ast.operator, ast.expr.visitExpression(this, context), ast.type, ast.sourceSpan), context);
          }
        }, {
          key: "visitBinaryOperatorExpr",
          value: function visitBinaryOperatorExpr(ast, context) {
            return this.transformExpr(new BinaryOperatorExpr(ast.operator, ast.lhs.visitExpression(this, context), ast.rhs.visitExpression(this, context), ast.type, ast.sourceSpan), context);
          }
        }, {
          key: "visitReadPropExpr",
          value: function visitReadPropExpr(ast, context) {
            return this.transformExpr(new ReadPropExpr(ast.receiver.visitExpression(this, context), ast.name, ast.type, ast.sourceSpan), context);
          }
        }, {
          key: "visitReadKeyExpr",
          value: function visitReadKeyExpr(ast, context) {
            return this.transformExpr(new ReadKeyExpr(ast.receiver.visitExpression(this, context), ast.index.visitExpression(this, context), ast.type, ast.sourceSpan), context);
          }
        }, {
          key: "visitLiteralArrayExpr",
          value: function visitLiteralArrayExpr(ast, context) {
            return this.transformExpr(new LiteralArrayExpr(this.visitAllExpressions(ast.entries, context), ast.type, ast.sourceSpan), context);
          }
        }, {
          key: "visitLiteralMapExpr",
          value: function visitLiteralMapExpr(ast, context) {
            var _this44 = this;

            var entries = ast.entries.map(function (entry) {
              return new LiteralMapEntry(entry.key, entry.value.visitExpression(_this44, context), entry.quoted);
            });
            var mapType = new MapType(ast.valueType);
            return this.transformExpr(new LiteralMapExpr(entries, mapType, ast.sourceSpan), context);
          }
        }, {
          key: "visitCommaExpr",
          value: function visitCommaExpr(ast, context) {
            return this.transformExpr(new CommaExpr(this.visitAllExpressions(ast.parts, context), ast.sourceSpan), context);
          }
        }, {
          key: "visitAllExpressions",
          value: function visitAllExpressions(exprs, context) {
            var _this45 = this;

            return exprs.map(function (expr) {
              return expr.visitExpression(_this45, context);
            });
          }
        }, {
          key: "visitDeclareVarStmt",
          value: function visitDeclareVarStmt(stmt, context) {
            var value = stmt.value && stmt.value.visitExpression(this, context);
            return this.transformStmt(new DeclareVarStmt(stmt.name, value, stmt.type, stmt.modifiers, stmt.sourceSpan, stmt.leadingComments), context);
          }
        }, {
          key: "visitDeclareFunctionStmt",
          value: function visitDeclareFunctionStmt(stmt, context) {
            return this.transformStmt(new DeclareFunctionStmt(stmt.name, stmt.params, this.visitAllStatements(stmt.statements, context), stmt.type, stmt.modifiers, stmt.sourceSpan, stmt.leadingComments), context);
          }
        }, {
          key: "visitExpressionStmt",
          value: function visitExpressionStmt(stmt, context) {
            return this.transformStmt(new ExpressionStatement(stmt.expr.visitExpression(this, context), stmt.sourceSpan, stmt.leadingComments), context);
          }
        }, {
          key: "visitReturnStmt",
          value: function visitReturnStmt(stmt, context) {
            return this.transformStmt(new ReturnStatement(stmt.value.visitExpression(this, context), stmt.sourceSpan, stmt.leadingComments), context);
          }
        }, {
          key: "visitDeclareClassStmt",
          value: function visitDeclareClassStmt(stmt, context) {
            var _this46 = this;

            var parent = stmt.parent.visitExpression(this, context);
            var getters = stmt.getters.map(function (getter) {
              return new ClassGetter(getter.name, _this46.visitAllStatements(getter.body, context), getter.type, getter.modifiers);
            });
            var ctorMethod = stmt.constructorMethod && new ClassMethod(stmt.constructorMethod.name, stmt.constructorMethod.params, this.visitAllStatements(stmt.constructorMethod.body, context), stmt.constructorMethod.type, stmt.constructorMethod.modifiers);
            var methods = stmt.methods.map(function (method) {
              return new ClassMethod(method.name, method.params, _this46.visitAllStatements(method.body, context), method.type, method.modifiers);
            });
            return this.transformStmt(new ClassStmt(stmt.name, parent, stmt.fields, getters, ctorMethod, methods, stmt.modifiers, stmt.sourceSpan), context);
          }
        }, {
          key: "visitIfStmt",
          value: function visitIfStmt(stmt, context) {
            return this.transformStmt(new IfStmt(stmt.condition.visitExpression(this, context), this.visitAllStatements(stmt.trueCase, context), this.visitAllStatements(stmt.falseCase, context), stmt.sourceSpan, stmt.leadingComments), context);
          }
        }, {
          key: "visitTryCatchStmt",
          value: function visitTryCatchStmt(stmt, context) {
            return this.transformStmt(new TryCatchStmt(this.visitAllStatements(stmt.bodyStmts, context), this.visitAllStatements(stmt.catchStmts, context), stmt.sourceSpan, stmt.leadingComments), context);
          }
        }, {
          key: "visitThrowStmt",
          value: function visitThrowStmt(stmt, context) {
            return this.transformStmt(new ThrowStmt(stmt.error.visitExpression(this, context), stmt.sourceSpan, stmt.leadingComments), context);
          }
        }, {
          key: "visitAllStatements",
          value: function visitAllStatements(stmts, context) {
            var _this47 = this;

            return stmts.map(function (stmt) {
              return stmt.visitStatement(_this47, context);
            });
          }
        }]);

        return AstTransformer;
      }();

      var RecursiveAstVisitor = /*#__PURE__*/function () {
        function RecursiveAstVisitor() {
          _classCallCheck(this, RecursiveAstVisitor);
        }

        _createClass(RecursiveAstVisitor, [{
          key: "visitType",
          value: function visitType(ast, context) {
            return ast;
          }
        }, {
          key: "visitExpression",
          value: function visitExpression(ast, context) {
            if (ast.type) {
              ast.type.visitType(this, context);
            }

            return ast;
          }
        }, {
          key: "visitBuiltinType",
          value: function visitBuiltinType(type, context) {
            return this.visitType(type, context);
          }
        }, {
          key: "visitExpressionType",
          value: function visitExpressionType(type, context) {
            var _this48 = this;

            type.value.visitExpression(this, context);

            if (type.typeParams !== null) {
              type.typeParams.forEach(function (param) {
                return _this48.visitType(param, context);
              });
            }

            return this.visitType(type, context);
          }
        }, {
          key: "visitArrayType",
          value: function visitArrayType(type, context) {
            return this.visitType(type, context);
          }
        }, {
          key: "visitMapType",
          value: function visitMapType(type, context) {
            return this.visitType(type, context);
          }
        }, {
          key: "visitWrappedNodeExpr",
          value: function visitWrappedNodeExpr(ast, context) {
            return ast;
          }
        }, {
          key: "visitTypeofExpr",
          value: function visitTypeofExpr(ast, context) {
            return this.visitExpression(ast, context);
          }
        }, {
          key: "visitReadVarExpr",
          value: function visitReadVarExpr(ast, context) {
            return this.visitExpression(ast, context);
          }
        }, {
          key: "visitWriteVarExpr",
          value: function visitWriteVarExpr(ast, context) {
            ast.value.visitExpression(this, context);
            return this.visitExpression(ast, context);
          }
        }, {
          key: "visitWriteKeyExpr",
          value: function visitWriteKeyExpr(ast, context) {
            ast.receiver.visitExpression(this, context);
            ast.index.visitExpression(this, context);
            ast.value.visitExpression(this, context);
            return this.visitExpression(ast, context);
          }
        }, {
          key: "visitWritePropExpr",
          value: function visitWritePropExpr(ast, context) {
            ast.receiver.visitExpression(this, context);
            ast.value.visitExpression(this, context);
            return this.visitExpression(ast, context);
          }
        }, {
          key: "visitInvokeMethodExpr",
          value: function visitInvokeMethodExpr(ast, context) {
            ast.receiver.visitExpression(this, context);
            this.visitAllExpressions(ast.args, context);
            return this.visitExpression(ast, context);
          }
        }, {
          key: "visitInvokeFunctionExpr",
          value: function visitInvokeFunctionExpr(ast, context) {
            ast.fn.visitExpression(this, context);
            this.visitAllExpressions(ast.args, context);
            return this.visitExpression(ast, context);
          }
        }, {
          key: "visitTaggedTemplateExpr",
          value: function visitTaggedTemplateExpr(ast, context) {
            ast.tag.visitExpression(this, context);
            this.visitAllExpressions(ast.template.expressions, context);
            return this.visitExpression(ast, context);
          }
        }, {
          key: "visitInstantiateExpr",
          value: function visitInstantiateExpr(ast, context) {
            ast.classExpr.visitExpression(this, context);
            this.visitAllExpressions(ast.args, context);
            return this.visitExpression(ast, context);
          }
        }, {
          key: "visitLiteralExpr",
          value: function visitLiteralExpr(ast, context) {
            return this.visitExpression(ast, context);
          }
        }, {
          key: "visitLocalizedString",
          value: function visitLocalizedString(ast, context) {
            return this.visitExpression(ast, context);
          }
        }, {
          key: "visitExternalExpr",
          value: function visitExternalExpr(ast, context) {
            var _this49 = this;

            if (ast.typeParams) {
              ast.typeParams.forEach(function (type) {
                return type.visitType(_this49, context);
              });
            }

            return this.visitExpression(ast, context);
          }
        }, {
          key: "visitConditionalExpr",
          value: function visitConditionalExpr(ast, context) {
            ast.condition.visitExpression(this, context);
            ast.trueCase.visitExpression(this, context);
            ast.falseCase.visitExpression(this, context);
            return this.visitExpression(ast, context);
          }
        }, {
          key: "visitNotExpr",
          value: function visitNotExpr(ast, context) {
            ast.condition.visitExpression(this, context);
            return this.visitExpression(ast, context);
          }
        }, {
          key: "visitAssertNotNullExpr",
          value: function visitAssertNotNullExpr(ast, context) {
            ast.condition.visitExpression(this, context);
            return this.visitExpression(ast, context);
          }
        }, {
          key: "visitCastExpr",
          value: function visitCastExpr(ast, context) {
            ast.value.visitExpression(this, context);
            return this.visitExpression(ast, context);
          }
        }, {
          key: "visitFunctionExpr",
          value: function visitFunctionExpr(ast, context) {
            this.visitAllStatements(ast.statements, context);
            return this.visitExpression(ast, context);
          }
        }, {
          key: "visitUnaryOperatorExpr",
          value: function visitUnaryOperatorExpr(ast, context) {
            ast.expr.visitExpression(this, context);
            return this.visitExpression(ast, context);
          }
        }, {
          key: "visitBinaryOperatorExpr",
          value: function visitBinaryOperatorExpr(ast, context) {
            ast.lhs.visitExpression(this, context);
            ast.rhs.visitExpression(this, context);
            return this.visitExpression(ast, context);
          }
        }, {
          key: "visitReadPropExpr",
          value: function visitReadPropExpr(ast, context) {
            ast.receiver.visitExpression(this, context);
            return this.visitExpression(ast, context);
          }
        }, {
          key: "visitReadKeyExpr",
          value: function visitReadKeyExpr(ast, context) {
            ast.receiver.visitExpression(this, context);
            ast.index.visitExpression(this, context);
            return this.visitExpression(ast, context);
          }
        }, {
          key: "visitLiteralArrayExpr",
          value: function visitLiteralArrayExpr(ast, context) {
            this.visitAllExpressions(ast.entries, context);
            return this.visitExpression(ast, context);
          }
        }, {
          key: "visitLiteralMapExpr",
          value: function visitLiteralMapExpr(ast, context) {
            var _this50 = this;

            ast.entries.forEach(function (entry) {
              return entry.value.visitExpression(_this50, context);
            });
            return this.visitExpression(ast, context);
          }
        }, {
          key: "visitCommaExpr",
          value: function visitCommaExpr(ast, context) {
            this.visitAllExpressions(ast.parts, context);
            return this.visitExpression(ast, context);
          }
        }, {
          key: "visitAllExpressions",
          value: function visitAllExpressions(exprs, context) {
            var _this51 = this;

            exprs.forEach(function (expr) {
              return expr.visitExpression(_this51, context);
            });
          }
        }, {
          key: "visitDeclareVarStmt",
          value: function visitDeclareVarStmt(stmt, context) {
            if (stmt.value) {
              stmt.value.visitExpression(this, context);
            }

            if (stmt.type) {
              stmt.type.visitType(this, context);
            }

            return stmt;
          }
        }, {
          key: "visitDeclareFunctionStmt",
          value: function visitDeclareFunctionStmt(stmt, context) {
            this.visitAllStatements(stmt.statements, context);

            if (stmt.type) {
              stmt.type.visitType(this, context);
            }

            return stmt;
          }
        }, {
          key: "visitExpressionStmt",
          value: function visitExpressionStmt(stmt, context) {
            stmt.expr.visitExpression(this, context);
            return stmt;
          }
        }, {
          key: "visitReturnStmt",
          value: function visitReturnStmt(stmt, context) {
            stmt.value.visitExpression(this, context);
            return stmt;
          }
        }, {
          key: "visitDeclareClassStmt",
          value: function visitDeclareClassStmt(stmt, context) {
            var _this52 = this;

            stmt.parent.visitExpression(this, context);
            stmt.getters.forEach(function (getter) {
              return _this52.visitAllStatements(getter.body, context);
            });

            if (stmt.constructorMethod) {
              this.visitAllStatements(stmt.constructorMethod.body, context);
            }

            stmt.methods.forEach(function (method) {
              return _this52.visitAllStatements(method.body, context);
            });
            return stmt;
          }
        }, {
          key: "visitIfStmt",
          value: function visitIfStmt(stmt, context) {
            stmt.condition.visitExpression(this, context);
            this.visitAllStatements(stmt.trueCase, context);
            this.visitAllStatements(stmt.falseCase, context);
            return stmt;
          }
        }, {
          key: "visitTryCatchStmt",
          value: function visitTryCatchStmt(stmt, context) {
            this.visitAllStatements(stmt.bodyStmts, context);
            this.visitAllStatements(stmt.catchStmts, context);
            return stmt;
          }
        }, {
          key: "visitThrowStmt",
          value: function visitThrowStmt(stmt, context) {
            stmt.error.visitExpression(this, context);
            return stmt;
          }
        }, {
          key: "visitAllStatements",
          value: function visitAllStatements(stmts, context) {
            var _this53 = this;

            stmts.forEach(function (stmt) {
              return stmt.visitStatement(_this53, context);
            });
          }
        }]);

        return RecursiveAstVisitor;
      }();

      function findReadVarNames(stmts) {
        var visitor = new _ReadVarVisitor();
        visitor.visitAllStatements(stmts, null);
        return visitor.varNames;
      }

      var _ReadVarVisitor = /*#__PURE__*/function (_RecursiveAstVisitor) {
        _inherits(_ReadVarVisitor, _RecursiveAstVisitor);

        var _super44 = _createSuper(_ReadVarVisitor);

        function _ReadVarVisitor() {
          var _this54;

          _classCallCheck(this, _ReadVarVisitor);

          _this54 = _super44.apply(this, arguments);
          _this54.varNames = new Set();
          return _this54;
        }

        _createClass(_ReadVarVisitor, [{
          key: "visitDeclareFunctionStmt",
          value: function visitDeclareFunctionStmt(stmt, context) {
            // Don't descend into nested functions
            return stmt;
          }
        }, {
          key: "visitDeclareClassStmt",
          value: function visitDeclareClassStmt(stmt, context) {
            // Don't descend into nested classes
            return stmt;
          }
        }, {
          key: "visitReadVarExpr",
          value: function visitReadVarExpr(ast, context) {
            if (ast.name) {
              this.varNames.add(ast.name);
            }

            return null;
          }
        }]);

        return _ReadVarVisitor;
      }(RecursiveAstVisitor);

      function collectExternalReferences(stmts) {
        var visitor = new _FindExternalReferencesVisitor();
        visitor.visitAllStatements(stmts, null);
        return visitor.externalReferences;
      }

      var _FindExternalReferencesVisitor = /*#__PURE__*/function (_RecursiveAstVisitor2) {
        _inherits(_FindExternalReferencesVisitor, _RecursiveAstVisitor2);

        var _super45 = _createSuper(_FindExternalReferencesVisitor);

        function _FindExternalReferencesVisitor() {
          var _this55;

          _classCallCheck(this, _FindExternalReferencesVisitor);

          _this55 = _super45.apply(this, arguments);
          _this55.externalReferences = [];
          return _this55;
        }

        _createClass(_FindExternalReferencesVisitor, [{
          key: "visitExternalExpr",
          value: function visitExternalExpr(e, context) {
            this.externalReferences.push(e.value);
            return _get(_getPrototypeOf(_FindExternalReferencesVisitor.prototype), "visitExternalExpr", this).call(this, e, context);
          }
        }]);

        return _FindExternalReferencesVisitor;
      }(RecursiveAstVisitor);

      function applySourceSpanToStatementIfNeeded(stmt, sourceSpan) {
        if (!sourceSpan) {
          return stmt;
        }

        var transformer = new _ApplySourceSpanTransformer(sourceSpan);
        return stmt.visitStatement(transformer, null);
      }

      function applySourceSpanToExpressionIfNeeded(expr, sourceSpan) {
        if (!sourceSpan) {
          return expr;
        }

        var transformer = new _ApplySourceSpanTransformer(sourceSpan);
        return expr.visitExpression(transformer, null);
      }

      var _ApplySourceSpanTransformer = /*#__PURE__*/function (_AstTransformer) {
        _inherits(_ApplySourceSpanTransformer, _AstTransformer);

        var _super46 = _createSuper(_ApplySourceSpanTransformer);

        function _ApplySourceSpanTransformer(sourceSpan) {
          var _this56;

          _classCallCheck(this, _ApplySourceSpanTransformer);

          _this56 = _super46.call(this);
          _this56.sourceSpan = sourceSpan;
          return _this56;
        }

        _createClass(_ApplySourceSpanTransformer, [{
          key: "_clone",
          value: function _clone(obj) {
            var clone = Object.create(obj.constructor.prototype);

            for (var _i4 = 0, _Object$keys = Object.keys(obj); _i4 < _Object$keys.length; _i4++) {
              var prop = _Object$keys[_i4];
              clone[prop] = obj[prop];
            }

            return clone;
          }
        }, {
          key: "transformExpr",
          value: function transformExpr(expr, context) {
            if (!expr.sourceSpan) {
              expr = this._clone(expr);
              expr.sourceSpan = this.sourceSpan;
            }

            return expr;
          }
        }, {
          key: "transformStmt",
          value: function transformStmt(stmt, context) {
            if (!stmt.sourceSpan) {
              stmt = this._clone(stmt);
              stmt.sourceSpan = this.sourceSpan;
            }

            return stmt;
          }
        }]);

        return _ApplySourceSpanTransformer;
      }(AstTransformer);

      function leadingComment(text) {
        var multiline = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
        var trailingNewline = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
        return new LeadingComment(text, multiline, trailingNewline);
      }

      function jsDocComment() {
        var tags = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
        return new JSDocComment(tags);
      }

      function variable(name, type, sourceSpan) {
        return new ReadVarExpr(name, type, sourceSpan);
      }

      function importExpr(id) {
        var typeParams = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
        var sourceSpan = arguments.length > 2 ? arguments[2] : undefined;
        return new ExternalExpr(id, null, typeParams, sourceSpan);
      }

      function importType(id, typeParams, typeModifiers) {
        return id != null ? expressionType(importExpr(id, typeParams, null), typeModifiers) : null;
      }

      function expressionType(expr, typeModifiers, typeParams) {
        return new ExpressionType(expr, typeModifiers, typeParams);
      }

      function typeofExpr(expr) {
        return new TypeofExpr(expr);
      }

      function literalArr(values, type, sourceSpan) {
        return new LiteralArrayExpr(values, type, sourceSpan);
      }

      function literalMap(values) {
        var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
        return new LiteralMapExpr(values.map(function (e) {
          return new LiteralMapEntry(e.key, e.value, e.quoted);
        }), type, null);
      }

      function unary(operator, expr, type, sourceSpan) {
        return new UnaryOperatorExpr(operator, expr, type, sourceSpan);
      }

      function not(expr, sourceSpan) {
        return new NotExpr(expr, sourceSpan);
      }

      function assertNotNull(expr, sourceSpan) {
        return new AssertNotNull(expr, sourceSpan);
      }

      function fn(params, body, type, sourceSpan, name) {
        return new FunctionExpr(params, body, type, sourceSpan, name);
      }

      function ifStmt(condition, thenClause, elseClause, sourceSpan, leadingComments) {
        return new IfStmt(condition, thenClause, elseClause, sourceSpan, leadingComments);
      }

      function taggedTemplate(tag, template, type, sourceSpan) {
        return new TaggedTemplateExpr(tag, template, type, sourceSpan);
      }

      function literal(value, type, sourceSpan) {
        return new LiteralExpr(value, type, sourceSpan);
      }

      function localizedString(metaBlock, messageParts, placeholderNames, expressions, sourceSpan) {
        return new LocalizedString(metaBlock, messageParts, placeholderNames, expressions, sourceSpan);
      }

      function isNull(exp) {
        return exp instanceof LiteralExpr && exp.value === null;
      }
      /*
       * Serializes a `Tag` into a string.
       * Returns a string like " @foo {bar} baz" (note the leading whitespace before `@foo`).
       */


      function tagToString(tag) {
        var out = '';

        if (tag.tagName) {
          out += " @".concat(tag.tagName);
        }

        if (tag.text) {
          if (tag.text.match(/\/\*|\*\//)) {
            throw new Error('JSDoc text cannot contain "/*" and "*/"');
          }

          out += ' ' + tag.text.replace(/@/g, '\\@');
        }

        return out;
      }

      function serializeTags(tags) {
        if (tags.length === 0) return '';

        if (tags.length === 1 && tags[0].tagName && !tags[0].text) {
          // The JSDOC comment is a single simple tag: e.g `/** @tagname */`.
          return "*".concat(tagToString(tags[0]), " ");
        }

        var out = '*\n';

        var _iterator = _createForOfIteratorHelper(tags),
            _step;

        try {
          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            var tag = _step.value;
            out += ' *'; // If the tagToString is multi-line, insert " * " prefixes on lines.

            out += tagToString(tag).replace(/\n/g, '\n * ');
            out += '\n';
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }

        out += ' ';
        return out;
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      var CONSTANT_PREFIX = '_c';
      /**
       * `ConstantPool` tries to reuse literal factories when two or more literals are identical.
       * We determine whether literals are identical by creating a key out of their AST using the
       * `KeyVisitor`. This constant is used to replace dynamic expressions which can't be safely
       * converted into a key. E.g. given an expression `{foo: bar()}`, since we don't know what
       * the result of `bar` will be, we create a key that looks like `{foo: <unknown>}`. Note
       * that we use a variable, rather than something like `null` in order to avoid collisions.
       */

      var UNKNOWN_VALUE_KEY = variable('<unknown>');
      /**
       * Context to use when producing a key.
       *
       * This ensures we see the constant not the reference variable when producing
       * a key.
       */

      var KEY_CONTEXT = {};
      /**
       * Generally all primitive values are excluded from the `ConstantPool`, but there is an exclusion
       * for strings that reach a certain length threshold. This constant defines the length threshold for
       * strings.
       */

      var POOL_INCLUSION_LENGTH_THRESHOLD_FOR_STRINGS = 50;
      /**
       * A node that is a place-holder that allows the node to be replaced when the actual
       * node is known.
       *
       * This allows the constant pool to change an expression from a direct reference to
       * a constant to a shared constant. It returns a fix-up node that is later allowed to
       * change the referenced expression.
       */

      var FixupExpression = /*#__PURE__*/function (_Expression26) {
        _inherits(FixupExpression, _Expression26);

        var _super47 = _createSuper(FixupExpression);

        function FixupExpression(resolved) {
          var _this57;

          _classCallCheck(this, FixupExpression);

          _this57 = _super47.call(this, resolved.type);
          _this57.resolved = resolved;
          _this57.original = resolved;
          return _this57;
        }

        _createClass(FixupExpression, [{
          key: "visitExpression",
          value: function visitExpression(visitor, context) {
            if (context === KEY_CONTEXT) {
              // When producing a key we want to traverse the constant not the
              // variable used to refer to it.
              return this.original.visitExpression(visitor, context);
            } else {
              return this.resolved.visitExpression(visitor, context);
            }
          }
        }, {
          key: "isEquivalent",
          value: function isEquivalent(e) {
            return e instanceof FixupExpression && this.resolved.isEquivalent(e.resolved);
          }
        }, {
          key: "isConstant",
          value: function isConstant() {
            return true;
          }
        }, {
          key: "fixup",
          value: function fixup(expression) {
            this.resolved = expression;
            this.shared = true;
          }
        }]);

        return FixupExpression;
      }(Expression);
      /**
       * A constant pool allows a code emitter to share constant in an output context.
       *
       * The constant pool also supports sharing access to ivy definitions references.
       */


      var ConstantPool = /*#__PURE__*/function () {
        function ConstantPool() {
          var isClosureCompilerEnabled = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

          _classCallCheck(this, ConstantPool);

          this.isClosureCompilerEnabled = isClosureCompilerEnabled;
          this.statements = [];
          this.literals = new Map();
          this.literalFactories = new Map();
          this.injectorDefinitions = new Map();
          this.directiveDefinitions = new Map();
          this.componentDefinitions = new Map();
          this.pipeDefinitions = new Map();
          this.nextNameIndex = 0;
        }

        _createClass(ConstantPool, [{
          key: "getConstLiteral",
          value: function getConstLiteral(literal, forceShared) {
            if (literal instanceof LiteralExpr && !isLongStringLiteral(literal) || literal instanceof FixupExpression) {
              // Do no put simple literals into the constant pool or try to produce a constant for a
              // reference to a constant.
              return literal;
            }

            var key = this.keyOf(literal);
            var fixup = this.literals.get(key);
            var newValue = false;

            if (!fixup) {
              fixup = new FixupExpression(literal);
              this.literals.set(key, fixup);
              newValue = true;
            }

            if (!newValue && !fixup.shared || newValue && forceShared) {
              // Replace the expression with a variable
              var name = this.freshName();
              var definition;
              var usage;

              if (this.isClosureCompilerEnabled && isLongStringLiteral(literal)) {
                // For string literals, Closure will **always** inline the string at
                // **all** usages, duplicating it each time. For large strings, this
                // unnecessarily bloats bundle size. To work around this restriction, we
                // wrap the string in a function, and call that function for each usage.
                // This tricks Closure into using inline logic for functions instead of
                // string literals. Function calls are only inlined if the body is small
                // enough to be worth it. By doing this, very large strings will be
                // shared across multiple usages, rather than duplicating the string at
                // each usage site.
                //
                // const myStr = function() { return "very very very long string"; };
                // const usage1 = myStr();
                // const usage2 = myStr();
                definition = variable(name).set(new FunctionExpr([], // Params.
                [// Statements.
                new ReturnStatement(literal)]));
                usage = variable(name).callFn([]);
              } else {
                // Just declare and use the variable directly, without a function call
                // indirection. This saves a few bytes and avoids an unncessary call.
                definition = variable(name).set(literal);
                usage = variable(name);
              }

              this.statements.push(definition.toDeclStmt(INFERRED_TYPE, [StmtModifier.Final]));
              fixup.fixup(usage);
            }

            return fixup;
          }
        }, {
          key: "getDefinition",
          value: function getDefinition(type, kind, ctx) {
            var forceShared = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;
            var definitions = this.definitionsOf(kind);
            var fixup = definitions.get(type);
            var newValue = false;

            if (!fixup) {
              var property = this.propertyNameOf(kind);
              fixup = new FixupExpression(ctx.importExpr(type).prop(property));
              definitions.set(type, fixup);
              newValue = true;
            }

            if (!newValue && !fixup.shared || newValue && forceShared) {
              var name = this.freshName();
              this.statements.push(variable(name).set(fixup.resolved).toDeclStmt(INFERRED_TYPE, [StmtModifier.Final]));
              fixup.fixup(variable(name));
            }

            return fixup;
          }
        }, {
          key: "getLiteralFactory",
          value: function getLiteralFactory(literal) {
            // Create a pure function that builds an array of a mix of constant and variable expressions
            if (literal instanceof LiteralArrayExpr) {
              var argumentsForKey = literal.entries.map(function (e) {
                return e.isConstant() ? e : UNKNOWN_VALUE_KEY;
              });
              var key = this.keyOf(literalArr(argumentsForKey));
              return this._getLiteralFactory(key, literal.entries, function (entries) {
                return literalArr(entries);
              });
            } else {
              var expressionForKey = literalMap(literal.entries.map(function (e) {
                return {
                  key: e.key,
                  value: e.value.isConstant() ? e.value : UNKNOWN_VALUE_KEY,
                  quoted: e.quoted
                };
              }));

              var _key = this.keyOf(expressionForKey);

              return this._getLiteralFactory(_key, literal.entries.map(function (e) {
                return e.value;
              }), function (entries) {
                return literalMap(entries.map(function (value, index) {
                  return {
                    key: literal.entries[index].key,
                    value: value,
                    quoted: literal.entries[index].quoted
                  };
                }));
              });
            }
          }
        }, {
          key: "_getLiteralFactory",
          value: function _getLiteralFactory(key, values, resultMap) {
            var _this58 = this;

            var literalFactory = this.literalFactories.get(key);
            var literalFactoryArguments = values.filter(function (e) {
              return !e.isConstant();
            });

            if (!literalFactory) {
              var resultExpressions = values.map(function (e, index) {
                return e.isConstant() ? _this58.getConstLiteral(e, true) : variable("a".concat(index));
              });
              var parameters = resultExpressions.filter(isVariable).map(function (e) {
                return new FnParam(e.name, DYNAMIC_TYPE);
              });
              var pureFunctionDeclaration = fn(parameters, [new ReturnStatement(resultMap(resultExpressions))], INFERRED_TYPE);
              var name = this.freshName();
              this.statements.push(variable(name).set(pureFunctionDeclaration).toDeclStmt(INFERRED_TYPE, [StmtModifier.Final]));
              literalFactory = variable(name);
              this.literalFactories.set(key, literalFactory);
            }

            return {
              literalFactory: literalFactory,
              literalFactoryArguments: literalFactoryArguments
            };
          }
          /**
           * Produce a unique name.
           *
           * The name might be unique among different prefixes if any of the prefixes end in
           * a digit so the prefix should be a constant string (not based on user input) and
           * must not end in a digit.
           */

        }, {
          key: "uniqueName",
          value: function uniqueName(prefix) {
            return "".concat(prefix).concat(this.nextNameIndex++);
          }
        }, {
          key: "definitionsOf",
          value: function definitionsOf(kind) {
            switch (kind) {
              case 2
              /* Component */
              :
                return this.componentDefinitions;

              case 1
              /* Directive */
              :
                return this.directiveDefinitions;

              case 0
              /* Injector */
              :
                return this.injectorDefinitions;

              case 3
              /* Pipe */
              :
                return this.pipeDefinitions;
            }
          }
        }, {
          key: "propertyNameOf",
          value: function propertyNameOf(kind) {
            switch (kind) {
              case 2
              /* Component */
              :
                return 'ɵcmp';

              case 1
              /* Directive */
              :
                return 'ɵdir';

              case 0
              /* Injector */
              :
                return 'ɵinj';

              case 3
              /* Pipe */
              :
                return 'ɵpipe';
            }
          }
        }, {
          key: "freshName",
          value: function freshName() {
            return this.uniqueName(CONSTANT_PREFIX);
          }
        }, {
          key: "keyOf",
          value: function keyOf(expression) {
            return expression.visitExpression(new KeyVisitor(), KEY_CONTEXT);
          }
        }]);

        return ConstantPool;
      }();
      /**
       * Visitor used to determine if 2 expressions are equivalent and can be shared in the
       * `ConstantPool`.
       *
       * When the id (string) generated by the visitor is equal, expressions are considered equivalent.
       */


      var KeyVisitor = /*#__PURE__*/function () {
        function KeyVisitor() {
          _classCallCheck(this, KeyVisitor);

          this.visitWrappedNodeExpr = invalid;
          this.visitWriteVarExpr = invalid;
          this.visitWriteKeyExpr = invalid;
          this.visitWritePropExpr = invalid;
          this.visitInvokeMethodExpr = invalid;
          this.visitInvokeFunctionExpr = invalid;
          this.visitTaggedTemplateExpr = invalid;
          this.visitInstantiateExpr = invalid;
          this.visitConditionalExpr = invalid;
          this.visitNotExpr = invalid;
          this.visitAssertNotNullExpr = invalid;
          this.visitCastExpr = invalid;
          this.visitFunctionExpr = invalid;
          this.visitUnaryOperatorExpr = invalid;
          this.visitBinaryOperatorExpr = invalid;
          this.visitReadPropExpr = invalid;
          this.visitReadKeyExpr = invalid;
          this.visitCommaExpr = invalid;
          this.visitLocalizedString = invalid;
        }

        _createClass(KeyVisitor, [{
          key: "visitLiteralExpr",
          value: function visitLiteralExpr(ast) {
            return "".concat(typeof ast.value === 'string' ? '"' + ast.value + '"' : ast.value);
          }
        }, {
          key: "visitLiteralArrayExpr",
          value: function visitLiteralArrayExpr(ast, context) {
            var _this59 = this;

            return "[".concat(ast.entries.map(function (entry) {
              return entry.visitExpression(_this59, context);
            }).join(','), "]");
          }
        }, {
          key: "visitLiteralMapExpr",
          value: function visitLiteralMapExpr(ast, context) {
            var _this60 = this;

            var mapKey = function mapKey(entry) {
              var quote = entry.quoted ? '"' : '';
              return "".concat(quote).concat(entry.key).concat(quote);
            };

            var mapEntry = function mapEntry(entry) {
              return "".concat(mapKey(entry), ":").concat(entry.value.visitExpression(_this60, context));
            };

            return "{".concat(ast.entries.map(mapEntry).join(','));
          }
        }, {
          key: "visitExternalExpr",
          value: function visitExternalExpr(ast) {
            return ast.value.moduleName ? "EX:".concat(ast.value.moduleName, ":").concat(ast.value.name) : "EX:".concat(ast.value.runtime.name);
          }
        }, {
          key: "visitReadVarExpr",
          value: function visitReadVarExpr(node) {
            return "VAR:".concat(node.name);
          }
        }, {
          key: "visitTypeofExpr",
          value: function visitTypeofExpr(node, context) {
            return "TYPEOF:".concat(node.expr.visitExpression(this, context));
          }
        }]);

        return KeyVisitor;
      }();

      function invalid(arg) {
        throw new Error("Invalid state: Visitor ".concat(this.constructor.name, " doesn't handle ").concat(arg.constructor.name));
      }

      function isVariable(e) {
        return e instanceof ReadVarExpr;
      }

      function isLongStringLiteral(expr) {
        return expr instanceof LiteralExpr && typeof expr.value === 'string' && expr.value.length >= POOL_INCLUSION_LENGTH_THRESHOLD_FOR_STRINGS;
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      var CORE = '@angular/core';

      var Identifiers = function Identifiers() {
        _classCallCheck(this, Identifiers);
      };

      Identifiers.ANALYZE_FOR_ENTRY_COMPONENTS = {
        name: 'ANALYZE_FOR_ENTRY_COMPONENTS',
        moduleName: CORE
      };
      Identifiers.ElementRef = {
        name: 'ElementRef',
        moduleName: CORE
      };
      Identifiers.NgModuleRef = {
        name: 'NgModuleRef',
        moduleName: CORE
      };
      Identifiers.ViewContainerRef = {
        name: 'ViewContainerRef',
        moduleName: CORE
      };
      Identifiers.ChangeDetectorRef = {
        name: 'ChangeDetectorRef',
        moduleName: CORE
      };
      Identifiers.QueryList = {
        name: 'QueryList',
        moduleName: CORE
      };
      Identifiers.TemplateRef = {
        name: 'TemplateRef',
        moduleName: CORE
      };
      Identifiers.Renderer2 = {
        name: 'Renderer2',
        moduleName: CORE
      };
      Identifiers.CodegenComponentFactoryResolver = {
        name: 'ɵCodegenComponentFactoryResolver',
        moduleName: CORE
      };
      Identifiers.ComponentFactoryResolver = {
        name: 'ComponentFactoryResolver',
        moduleName: CORE
      };
      Identifiers.ComponentFactory = {
        name: 'ComponentFactory',
        moduleName: CORE
      };
      Identifiers.ComponentRef = {
        name: 'ComponentRef',
        moduleName: CORE
      };
      Identifiers.NgModuleFactory = {
        name: 'NgModuleFactory',
        moduleName: CORE
      };
      Identifiers.createModuleFactory = {
        name: 'ɵcmf',
        moduleName: CORE
      };
      Identifiers.moduleDef = {
        name: 'ɵmod',
        moduleName: CORE
      };
      Identifiers.moduleProviderDef = {
        name: 'ɵmpd',
        moduleName: CORE
      };
      Identifiers.RegisterModuleFactoryFn = {
        name: 'ɵregisterModuleFactory',
        moduleName: CORE
      };
      Identifiers.inject = {
        name: 'ɵɵinject',
        moduleName: CORE
      };
      Identifiers.directiveInject = {
        name: 'ɵɵdirectiveInject',
        moduleName: CORE
      };
      Identifiers.INJECTOR = {
        name: 'INJECTOR',
        moduleName: CORE
      };
      Identifiers.Injector = {
        name: 'Injector',
        moduleName: CORE
      };
      Identifiers.ɵɵdefineInjectable = {
        name: 'ɵɵdefineInjectable',
        moduleName: CORE
      };
      Identifiers.InjectableDef = {
        name: 'ɵɵInjectableDef',
        moduleName: CORE
      };
      Identifiers.ViewEncapsulation = {
        name: 'ViewEncapsulation',
        moduleName: CORE
      };
      Identifiers.ChangeDetectionStrategy = {
        name: 'ChangeDetectionStrategy',
        moduleName: CORE
      };
      Identifiers.SecurityContext = {
        name: 'SecurityContext',
        moduleName: CORE
      };
      Identifiers.LOCALE_ID = {
        name: 'LOCALE_ID',
        moduleName: CORE
      };
      Identifiers.TRANSLATIONS_FORMAT = {
        name: 'TRANSLATIONS_FORMAT',
        moduleName: CORE
      };
      Identifiers.inlineInterpolate = {
        name: 'ɵinlineInterpolate',
        moduleName: CORE
      };
      Identifiers.interpolate = {
        name: 'ɵinterpolate',
        moduleName: CORE
      };
      Identifiers.EMPTY_ARRAY = {
        name: 'ɵEMPTY_ARRAY',
        moduleName: CORE
      };
      Identifiers.EMPTY_MAP = {
        name: 'ɵEMPTY_MAP',
        moduleName: CORE
      };
      Identifiers.Renderer = {
        name: 'Renderer',
        moduleName: CORE
      };
      Identifiers.viewDef = {
        name: 'ɵvid',
        moduleName: CORE
      };
      Identifiers.elementDef = {
        name: 'ɵeld',
        moduleName: CORE
      };
      Identifiers.anchorDef = {
        name: 'ɵand',
        moduleName: CORE
      };
      Identifiers.textDef = {
        name: 'ɵted',
        moduleName: CORE
      };
      Identifiers.directiveDef = {
        name: 'ɵdid',
        moduleName: CORE
      };
      Identifiers.providerDef = {
        name: 'ɵprd',
        moduleName: CORE
      };
      Identifiers.queryDef = {
        name: 'ɵqud',
        moduleName: CORE
      };
      Identifiers.pureArrayDef = {
        name: 'ɵpad',
        moduleName: CORE
      };
      Identifiers.pureObjectDef = {
        name: 'ɵpod',
        moduleName: CORE
      };
      Identifiers.purePipeDef = {
        name: 'ɵppd',
        moduleName: CORE
      };
      Identifiers.pipeDef = {
        name: 'ɵpid',
        moduleName: CORE
      };
      Identifiers.nodeValue = {
        name: 'ɵnov',
        moduleName: CORE
      };
      Identifiers.ngContentDef = {
        name: 'ɵncd',
        moduleName: CORE
      };
      Identifiers.unwrapValue = {
        name: 'ɵunv',
        moduleName: CORE
      };
      Identifiers.createRendererType2 = {
        name: 'ɵcrt',
        moduleName: CORE
      }; // type only

      Identifiers.RendererType2 = {
        name: 'RendererType2',
        moduleName: CORE
      }; // type only

      Identifiers.ViewDefinition = {
        name: 'ɵViewDefinition',
        moduleName: CORE
      };
      Identifiers.createComponentFactory = {
        name: 'ɵccf',
        moduleName: CORE
      };
      Identifiers.setClassMetadata = {
        name: 'ɵsetClassMetadata',
        moduleName: CORE
      };

      function createTokenForReference(reference) {
        return {
          identifier: {
            reference: reference
          }
        };
      }

      function createTokenForExternalReference(reflector, reference) {
        return createTokenForReference(reflector.resolveExternalReference(reference));
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * A token representing the a reference to a static type.
       *
       * This token is unique for a filePath and name and can be used as a hash table key.
       */


      var StaticSymbol = /*#__PURE__*/function () {
        function StaticSymbol(filePath, name, members) {
          _classCallCheck(this, StaticSymbol);

          this.filePath = filePath;
          this.name = name;
          this.members = members;
        }

        _createClass(StaticSymbol, [{
          key: "assertNoMembers",
          value: function assertNoMembers() {
            if (this.members.length) {
              throw new Error("Illegal state: symbol without members expected, but got ".concat(JSON.stringify(this), "."));
            }
          }
        }]);

        return StaticSymbol;
      }();
      /**
       * A cache of static symbol used by the StaticReflector to return the same symbol for the
       * same symbol values.
       */


      var StaticSymbolCache = /*#__PURE__*/function () {
        function StaticSymbolCache() {
          _classCallCheck(this, StaticSymbolCache);

          this.cache = new Map();
        }

        _createClass(StaticSymbolCache, [{
          key: "get",
          value: function get(declarationFile, name, members) {
            members = members || [];
            var memberSuffix = members.length ? ".".concat(members.join('.')) : '';
            var key = "\"".concat(declarationFile, "\".").concat(name).concat(memberSuffix);
            var result = this.cache.get(key);

            if (!result) {
              result = new StaticSymbol(declarationFile, name, members);
              this.cache.set(key, result);
            }

            return result;
          }
        }]);

        return StaticSymbolCache;
      }();
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      var DASH_CASE_REGEXP = /-+([a-z0-9])/g;

      function dashCaseToCamelCase(input) {
        return input.replace(DASH_CASE_REGEXP, function () {
          for (var _len = arguments.length, m = new Array(_len), _key2 = 0; _key2 < _len; _key2++) {
            m[_key2] = arguments[_key2];
          }

          return m[1].toUpperCase();
        });
      }

      function splitAtColon(input, defaultValues) {
        return _splitAt(input, ':', defaultValues);
      }

      function splitAtPeriod(input, defaultValues) {
        return _splitAt(input, '.', defaultValues);
      }

      function _splitAt(input, character, defaultValues) {
        var characterIndex = input.indexOf(character);
        if (characterIndex == -1) return defaultValues;
        return [input.slice(0, characterIndex).trim(), input.slice(characterIndex + 1).trim()];
      }

      function visitValue(value, visitor, context) {
        if (Array.isArray(value)) {
          return visitor.visitArray(value, context);
        }

        if (isStrictStringMap(value)) {
          return visitor.visitStringMap(value, context);
        }

        if (value == null || typeof value == 'string' || typeof value == 'number' || typeof value == 'boolean') {
          return visitor.visitPrimitive(value, context);
        }

        return visitor.visitOther(value, context);
      }

      function isDefined(val) {
        return val !== null && val !== undefined;
      }

      function noUndefined(val) {
        return val === undefined ? null : val;
      }

      var ValueTransformer = /*#__PURE__*/function () {
        function ValueTransformer() {
          _classCallCheck(this, ValueTransformer);
        }

        _createClass(ValueTransformer, [{
          key: "visitArray",
          value: function visitArray(arr, context) {
            var _this61 = this;

            return arr.map(function (value) {
              return visitValue(value, _this61, context);
            });
          }
        }, {
          key: "visitStringMap",
          value: function visitStringMap(map, context) {
            var _this62 = this;

            var result = {};
            Object.keys(map).forEach(function (key) {
              result[key] = visitValue(map[key], _this62, context);
            });
            return result;
          }
        }, {
          key: "visitPrimitive",
          value: function visitPrimitive(value, context) {
            return value;
          }
        }, {
          key: "visitOther",
          value: function visitOther(value, context) {
            return value;
          }
        }]);

        return ValueTransformer;
      }();

      var SyncAsync = {
        assertSync: function assertSync(value) {
          if (isPromise(value)) {
            throw new Error("Illegal state: value cannot be a promise");
          }

          return value;
        },
        then: function then(value, cb) {
          return isPromise(value) ? value.then(cb) : cb(value);
        },
        all: function all(syncAsyncValues) {
          return syncAsyncValues.some(isPromise) ? Promise.all(syncAsyncValues) : syncAsyncValues;
        }
      };

      function error(msg) {
        throw new Error("Internal Error: ".concat(msg));
      }

      function syntaxError(msg, parseErrors) {
        var error = Error(msg);
        error[ERROR_SYNTAX_ERROR] = true;
        if (parseErrors) error[ERROR_PARSE_ERRORS] = parseErrors;
        return error;
      }

      var ERROR_SYNTAX_ERROR = 'ngSyntaxError';
      var ERROR_PARSE_ERRORS = 'ngParseErrors';

      function isSyntaxError(error) {
        return error[ERROR_SYNTAX_ERROR];
      }

      function getParseErrors(error) {
        return error[ERROR_PARSE_ERRORS] || [];
      } // Escape characters that have a special meaning in Regular Expressions


      function escapeRegExp(s) {
        return s.replace(/([.*+?^=!:${}()|[\]\/\\])/g, '\\$1');
      }

      var STRING_MAP_PROTO = Object.getPrototypeOf({});

      function isStrictStringMap(obj) {
        return typeof obj === 'object' && obj !== null && Object.getPrototypeOf(obj) === STRING_MAP_PROTO;
      }

      function utf8Encode(str) {
        var encoded = [];

        for (var index = 0; index < str.length; index++) {
          var codePoint = str.charCodeAt(index); // decode surrogate
          // see https://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae

          if (codePoint >= 0xd800 && codePoint <= 0xdbff && str.length > index + 1) {
            var low = str.charCodeAt(index + 1);

            if (low >= 0xdc00 && low <= 0xdfff) {
              index++;
              codePoint = (codePoint - 0xd800 << 10) + low - 0xdc00 + 0x10000;
            }
          }

          if (codePoint <= 0x7f) {
            encoded.push(codePoint);
          } else if (codePoint <= 0x7ff) {
            encoded.push(codePoint >> 6 & 0x1F | 0xc0, codePoint & 0x3f | 0x80);
          } else if (codePoint <= 0xffff) {
            encoded.push(codePoint >> 12 | 0xe0, codePoint >> 6 & 0x3f | 0x80, codePoint & 0x3f | 0x80);
          } else if (codePoint <= 0x1fffff) {
            encoded.push(codePoint >> 18 & 0x07 | 0xf0, codePoint >> 12 & 0x3f | 0x80, codePoint >> 6 & 0x3f | 0x80, codePoint & 0x3f | 0x80);
          }
        }

        return encoded;
      }

      function stringify(token) {
        if (typeof token === 'string') {
          return token;
        }

        if (Array.isArray(token)) {
          return '[' + token.map(stringify).join(', ') + ']';
        }

        if (token == null) {
          return '' + token;
        }

        if (token.overriddenName) {
          return "".concat(token.overriddenName);
        }

        if (token.name) {
          return "".concat(token.name);
        }

        if (!token.toString) {
          return 'object';
        } // WARNING: do not try to `JSON.stringify(token)` here
        // see https://github.com/angular/angular/issues/23440


        var res = token.toString();

        if (res == null) {
          return '' + res;
        }

        var newLineIndex = res.indexOf('\n');
        return newLineIndex === -1 ? res : res.substring(0, newLineIndex);
      }
      /**
       * Lazily retrieves the reference value from a forwardRef.
       */


      function resolveForwardRef(type) {
        if (typeof type === 'function' && type.hasOwnProperty('__forward_ref__')) {
          return type();
        } else {
          return type;
        }
      }
      /**
       * Determine if the argument is shaped like a Promise
       */


      function isPromise(obj) {
        // allow any Promise/A+ compliant thenable.
        // It's up to the caller to ensure that obj.then conforms to the spec
        return !!obj && typeof obj.then === 'function';
      }

      var Version = function Version(full) {
        _classCallCheck(this, Version);

        this.full = full;
        var splits = full.split('.');
        this.major = splits[0];
        this.minor = splits[1];
        this.patch = splits.slice(2).join('.');
      };

      var __window = typeof window !== 'undefined' && window;

      var __self = typeof self !== 'undefined' && typeof WorkerGlobalScope !== 'undefined' && self instanceof WorkerGlobalScope && self;

      var __global = typeof global !== 'undefined' && global; // Check __global first, because in Node tests both __global and __window may be defined and _global
      // should be __global in that case.


      var _global = __global || __window || __self;

      function newArray(size, value) {
        var list = [];

        for (var i = 0; i < size; i++) {
          list.push(value);
        }

        return list;
      }
      /**
       * Partitions a given array into 2 arrays, based on a boolean value returned by the condition
       * function.
       *
       * @param arr Input array that should be partitioned
       * @param conditionFn Condition function that is called for each item in a given array and returns a
       * boolean value.
       */


      function partitionArray(arr, conditionFn) {
        var truthy = [];
        var falsy = [];

        var _iterator2 = _createForOfIteratorHelper(arr),
            _step2;

        try {
          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
            var item = _step2.value;
            (conditionFn(item) ? truthy : falsy).push(item);
          }
        } catch (err) {
          _iterator2.e(err);
        } finally {
          _iterator2.f();
        }

        return [truthy, falsy];
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */
      // group 0: "[prop] or (event) or @trigger"
      // group 1: "prop" from "[prop]"
      // group 2: "event" from "(event)"
      // group 3: "@trigger" from "@trigger"


      var HOST_REG_EXP = /^(?:(?:\[([^\]]+)\])|(?:\(([^\)]+)\)))|(\@[-\w]+)$/;

      function sanitizeIdentifier(name) {
        return name.replace(/\W/g, '_');
      }

      var _anonymousTypeIndex = 0;

      function identifierName(compileIdentifier) {
        if (!compileIdentifier || !compileIdentifier.reference) {
          return null;
        }

        var ref = compileIdentifier.reference;

        if (ref instanceof StaticSymbol) {
          return ref.name;
        }

        if (ref['__anonymousType']) {
          return ref['__anonymousType'];
        }

        var identifier = stringify(ref);

        if (identifier.indexOf('(') >= 0) {
          // case: anonymous functions!
          identifier = "anonymous_".concat(_anonymousTypeIndex++);
          ref['__anonymousType'] = identifier;
        } else {
          identifier = sanitizeIdentifier(identifier);
        }

        return identifier;
      }

      function identifierModuleUrl(compileIdentifier) {
        var ref = compileIdentifier.reference;

        if (ref instanceof StaticSymbol) {
          return ref.filePath;
        } // Runtime type


        return "./".concat(stringify(ref));
      }

      function viewClassName(compType, embeddedTemplateIndex) {
        return "View_".concat(identifierName({
          reference: compType
        }), "_").concat(embeddedTemplateIndex);
      }

      function rendererTypeName(compType) {
        return "RenderType_".concat(identifierName({
          reference: compType
        }));
      }

      function hostViewClassName(compType) {
        return "HostView_".concat(identifierName({
          reference: compType
        }));
      }

      function componentFactoryName(compType) {
        return "".concat(identifierName({
          reference: compType
        }), "NgFactory");
      }

      var CompileSummaryKind;

      (function (CompileSummaryKind) {
        CompileSummaryKind[CompileSummaryKind["Pipe"] = 0] = "Pipe";
        CompileSummaryKind[CompileSummaryKind["Directive"] = 1] = "Directive";
        CompileSummaryKind[CompileSummaryKind["NgModule"] = 2] = "NgModule";
        CompileSummaryKind[CompileSummaryKind["Injectable"] = 3] = "Injectable";
      })(CompileSummaryKind || (CompileSummaryKind = {}));

      function tokenName(token) {
        return token.value != null ? sanitizeIdentifier(token.value) : identifierName(token.identifier);
      }

      function tokenReference(token) {
        if (token.identifier != null) {
          return token.identifier.reference;
        } else {
          return token.value;
        }
      }
      /**
       * Metadata about a stylesheet
       */


      var CompileStylesheetMetadata = function CompileStylesheetMetadata() {
        var _ref3 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
            moduleUrl = _ref3.moduleUrl,
            styles = _ref3.styles,
            styleUrls = _ref3.styleUrls;

        _classCallCheck(this, CompileStylesheetMetadata);

        this.moduleUrl = moduleUrl || null;
        this.styles = _normalizeArray(styles);
        this.styleUrls = _normalizeArray(styleUrls);
      };
      /**
       * Metadata regarding compilation of a template.
       */


      var CompileTemplateMetadata = /*#__PURE__*/function () {
        function CompileTemplateMetadata(_ref4) {
          var encapsulation = _ref4.encapsulation,
              template = _ref4.template,
              templateUrl = _ref4.templateUrl,
              htmlAst = _ref4.htmlAst,
              styles = _ref4.styles,
              styleUrls = _ref4.styleUrls,
              externalStylesheets = _ref4.externalStylesheets,
              animations = _ref4.animations,
              ngContentSelectors = _ref4.ngContentSelectors,
              interpolation = _ref4.interpolation,
              isInline = _ref4.isInline,
              preserveWhitespaces = _ref4.preserveWhitespaces;

          _classCallCheck(this, CompileTemplateMetadata);

          this.encapsulation = encapsulation;
          this.template = template;
          this.templateUrl = templateUrl;
          this.htmlAst = htmlAst;
          this.styles = _normalizeArray(styles);
          this.styleUrls = _normalizeArray(styleUrls);
          this.externalStylesheets = _normalizeArray(externalStylesheets);
          this.animations = animations ? flatten(animations) : [];
          this.ngContentSelectors = ngContentSelectors || [];

          if (interpolation && interpolation.length != 2) {
            throw new Error("'interpolation' should have a start and an end symbol.");
          }

          this.interpolation = interpolation;
          this.isInline = isInline;
          this.preserveWhitespaces = preserveWhitespaces;
        }

        _createClass(CompileTemplateMetadata, [{
          key: "toSummary",
          value: function toSummary() {
            return {
              ngContentSelectors: this.ngContentSelectors,
              encapsulation: this.encapsulation,
              styles: this.styles,
              animations: this.animations
            };
          }
        }]);

        return CompileTemplateMetadata;
      }();
      /**
       * Metadata regarding compilation of a directive.
       */


      var CompileDirectiveMetadata = /*#__PURE__*/function () {
        function CompileDirectiveMetadata(_ref5) {
          var isHost = _ref5.isHost,
              type = _ref5.type,
              isComponent = _ref5.isComponent,
              selector = _ref5.selector,
              exportAs = _ref5.exportAs,
              changeDetection = _ref5.changeDetection,
              inputs = _ref5.inputs,
              outputs = _ref5.outputs,
              hostListeners = _ref5.hostListeners,
              hostProperties = _ref5.hostProperties,
              hostAttributes = _ref5.hostAttributes,
              providers = _ref5.providers,
              viewProviders = _ref5.viewProviders,
              queries = _ref5.queries,
              guards = _ref5.guards,
              viewQueries = _ref5.viewQueries,
              entryComponents = _ref5.entryComponents,
              template = _ref5.template,
              componentViewType = _ref5.componentViewType,
              rendererType = _ref5.rendererType,
              componentFactory = _ref5.componentFactory;

          _classCallCheck(this, CompileDirectiveMetadata);

          this.isHost = !!isHost;
          this.type = type;
          this.isComponent = isComponent;
          this.selector = selector;
          this.exportAs = exportAs;
          this.changeDetection = changeDetection;
          this.inputs = inputs;
          this.outputs = outputs;
          this.hostListeners = hostListeners;
          this.hostProperties = hostProperties;
          this.hostAttributes = hostAttributes;
          this.providers = _normalizeArray(providers);
          this.viewProviders = _normalizeArray(viewProviders);
          this.queries = _normalizeArray(queries);
          this.guards = guards;
          this.viewQueries = _normalizeArray(viewQueries);
          this.entryComponents = _normalizeArray(entryComponents);
          this.template = template;
          this.componentViewType = componentViewType;
          this.rendererType = rendererType;
          this.componentFactory = componentFactory;
        }

        _createClass(CompileDirectiveMetadata, [{
          key: "toSummary",
          value: function toSummary() {
            return {
              summaryKind: CompileSummaryKind.Directive,
              type: this.type,
              isComponent: this.isComponent,
              selector: this.selector,
              exportAs: this.exportAs,
              inputs: this.inputs,
              outputs: this.outputs,
              hostListeners: this.hostListeners,
              hostProperties: this.hostProperties,
              hostAttributes: this.hostAttributes,
              providers: this.providers,
              viewProviders: this.viewProviders,
              queries: this.queries,
              guards: this.guards,
              viewQueries: this.viewQueries,
              entryComponents: this.entryComponents,
              changeDetection: this.changeDetection,
              template: this.template && this.template.toSummary(),
              componentViewType: this.componentViewType,
              rendererType: this.rendererType,
              componentFactory: this.componentFactory
            };
          }
        }], [{
          key: "create",
          value: function create(_ref6) {
            var isHost = _ref6.isHost,
                type = _ref6.type,
                isComponent = _ref6.isComponent,
                selector = _ref6.selector,
                exportAs = _ref6.exportAs,
                changeDetection = _ref6.changeDetection,
                inputs = _ref6.inputs,
                outputs = _ref6.outputs,
                host = _ref6.host,
                providers = _ref6.providers,
                viewProviders = _ref6.viewProviders,
                queries = _ref6.queries,
                guards = _ref6.guards,
                viewQueries = _ref6.viewQueries,
                entryComponents = _ref6.entryComponents,
                template = _ref6.template,
                componentViewType = _ref6.componentViewType,
                rendererType = _ref6.rendererType,
                componentFactory = _ref6.componentFactory;
            var hostListeners = {};
            var hostProperties = {};
            var hostAttributes = {};

            if (host != null) {
              Object.keys(host).forEach(function (key) {
                var value = host[key];
                var matches = key.match(HOST_REG_EXP);

                if (matches === null) {
                  hostAttributes[key] = value;
                } else if (matches[1] != null) {
                  hostProperties[matches[1]] = value;
                } else if (matches[2] != null) {
                  hostListeners[matches[2]] = value;
                }
              });
            }

            var inputsMap = {};

            if (inputs != null) {
              inputs.forEach(function (bindConfig) {
                // canonical syntax: `dirProp: elProp`
                // if there is no `:`, use dirProp = elProp
                var parts = splitAtColon(bindConfig, [bindConfig, bindConfig]);
                inputsMap[parts[0]] = parts[1];
              });
            }

            var outputsMap = {};

            if (outputs != null) {
              outputs.forEach(function (bindConfig) {
                // canonical syntax: `dirProp: elProp`
                // if there is no `:`, use dirProp = elProp
                var parts = splitAtColon(bindConfig, [bindConfig, bindConfig]);
                outputsMap[parts[0]] = parts[1];
              });
            }

            return new CompileDirectiveMetadata({
              isHost: isHost,
              type: type,
              isComponent: !!isComponent,
              selector: selector,
              exportAs: exportAs,
              changeDetection: changeDetection,
              inputs: inputsMap,
              outputs: outputsMap,
              hostListeners: hostListeners,
              hostProperties: hostProperties,
              hostAttributes: hostAttributes,
              providers: providers,
              viewProviders: viewProviders,
              queries: queries,
              guards: guards,
              viewQueries: viewQueries,
              entryComponents: entryComponents,
              template: template,
              componentViewType: componentViewType,
              rendererType: rendererType,
              componentFactory: componentFactory
            });
          }
        }]);

        return CompileDirectiveMetadata;
      }();

      var CompilePipeMetadata = /*#__PURE__*/function () {
        function CompilePipeMetadata(_ref7) {
          var type = _ref7.type,
              name = _ref7.name,
              pure = _ref7.pure;

          _classCallCheck(this, CompilePipeMetadata);

          this.type = type;
          this.name = name;
          this.pure = !!pure;
        }

        _createClass(CompilePipeMetadata, [{
          key: "toSummary",
          value: function toSummary() {
            return {
              summaryKind: CompileSummaryKind.Pipe,
              type: this.type,
              name: this.name,
              pure: this.pure
            };
          }
        }]);

        return CompilePipeMetadata;
      }();

      var CompileShallowModuleMetadata = function CompileShallowModuleMetadata() {
        _classCallCheck(this, CompileShallowModuleMetadata);
      };
      /**
       * Metadata regarding compilation of a module.
       */


      var CompileNgModuleMetadata = /*#__PURE__*/function () {
        function CompileNgModuleMetadata(_ref8) {
          var type = _ref8.type,
              providers = _ref8.providers,
              declaredDirectives = _ref8.declaredDirectives,
              exportedDirectives = _ref8.exportedDirectives,
              declaredPipes = _ref8.declaredPipes,
              exportedPipes = _ref8.exportedPipes,
              entryComponents = _ref8.entryComponents,
              bootstrapComponents = _ref8.bootstrapComponents,
              importedModules = _ref8.importedModules,
              exportedModules = _ref8.exportedModules,
              schemas = _ref8.schemas,
              transitiveModule = _ref8.transitiveModule,
              id = _ref8.id;

          _classCallCheck(this, CompileNgModuleMetadata);

          this.type = type || null;
          this.declaredDirectives = _normalizeArray(declaredDirectives);
          this.exportedDirectives = _normalizeArray(exportedDirectives);
          this.declaredPipes = _normalizeArray(declaredPipes);
          this.exportedPipes = _normalizeArray(exportedPipes);
          this.providers = _normalizeArray(providers);
          this.entryComponents = _normalizeArray(entryComponents);
          this.bootstrapComponents = _normalizeArray(bootstrapComponents);
          this.importedModules = _normalizeArray(importedModules);
          this.exportedModules = _normalizeArray(exportedModules);
          this.schemas = _normalizeArray(schemas);
          this.id = id || null;
          this.transitiveModule = transitiveModule || null;
        }

        _createClass(CompileNgModuleMetadata, [{
          key: "toSummary",
          value: function toSummary() {
            var module = this.transitiveModule;
            return {
              summaryKind: CompileSummaryKind.NgModule,
              type: this.type,
              entryComponents: module.entryComponents,
              providers: module.providers,
              modules: module.modules,
              exportedDirectives: module.exportedDirectives,
              exportedPipes: module.exportedPipes
            };
          }
        }]);

        return CompileNgModuleMetadata;
      }();

      var TransitiveCompileNgModuleMetadata = /*#__PURE__*/function () {
        function TransitiveCompileNgModuleMetadata() {
          _classCallCheck(this, TransitiveCompileNgModuleMetadata);

          this.directivesSet = new Set();
          this.directives = [];
          this.exportedDirectivesSet = new Set();
          this.exportedDirectives = [];
          this.pipesSet = new Set();
          this.pipes = [];
          this.exportedPipesSet = new Set();
          this.exportedPipes = [];
          this.modulesSet = new Set();
          this.modules = [];
          this.entryComponentsSet = new Set();
          this.entryComponents = [];
          this.providers = [];
        }

        _createClass(TransitiveCompileNgModuleMetadata, [{
          key: "addProvider",
          value: function addProvider(provider, module) {
            this.providers.push({
              provider: provider,
              module: module
            });
          }
        }, {
          key: "addDirective",
          value: function addDirective(id) {
            if (!this.directivesSet.has(id.reference)) {
              this.directivesSet.add(id.reference);
              this.directives.push(id);
            }
          }
        }, {
          key: "addExportedDirective",
          value: function addExportedDirective(id) {
            if (!this.exportedDirectivesSet.has(id.reference)) {
              this.exportedDirectivesSet.add(id.reference);
              this.exportedDirectives.push(id);
            }
          }
        }, {
          key: "addPipe",
          value: function addPipe(id) {
            if (!this.pipesSet.has(id.reference)) {
              this.pipesSet.add(id.reference);
              this.pipes.push(id);
            }
          }
        }, {
          key: "addExportedPipe",
          value: function addExportedPipe(id) {
            if (!this.exportedPipesSet.has(id.reference)) {
              this.exportedPipesSet.add(id.reference);
              this.exportedPipes.push(id);
            }
          }
        }, {
          key: "addModule",
          value: function addModule(id) {
            if (!this.modulesSet.has(id.reference)) {
              this.modulesSet.add(id.reference);
              this.modules.push(id);
            }
          }
        }, {
          key: "addEntryComponent",
          value: function addEntryComponent(ec) {
            if (!this.entryComponentsSet.has(ec.componentType)) {
              this.entryComponentsSet.add(ec.componentType);
              this.entryComponents.push(ec);
            }
          }
        }]);

        return TransitiveCompileNgModuleMetadata;
      }();

      function _normalizeArray(obj) {
        return obj || [];
      }

      var ProviderMeta = function ProviderMeta(token, _ref9) {
        var useClass = _ref9.useClass,
            useValue = _ref9.useValue,
            useExisting = _ref9.useExisting,
            useFactory = _ref9.useFactory,
            deps = _ref9.deps,
            multi = _ref9.multi;

        _classCallCheck(this, ProviderMeta);

        this.token = token;
        this.useClass = useClass || null;
        this.useValue = useValue;
        this.useExisting = useExisting;
        this.useFactory = useFactory || null;
        this.dependencies = deps || null;
        this.multi = !!multi;
      };

      function flatten(list) {
        return list.reduce(function (flat, item) {
          var flatItem = Array.isArray(item) ? flatten(item) : item;
          return flat.concat(flatItem);
        }, []);
      }

      function jitSourceUrl(url) {
        // Note: We need 3 "/" so that ng shows up as a separate domain
        // in the chrome dev tools.
        return url.replace(/(\w+:\/\/[\w:-]+)?(\/+)?/, 'ng:///');
      }

      function templateSourceUrl(ngModuleType, compMeta, templateMeta) {
        var url;

        if (templateMeta.isInline) {
          if (compMeta.type.reference instanceof StaticSymbol) {
            // Note: a .ts file might contain multiple components with inline templates,
            // so we need to give them unique urls, as these will be used for sourcemaps.
            url = "".concat(compMeta.type.reference.filePath, ".").concat(compMeta.type.reference.name, ".html");
          } else {
            url = "".concat(identifierName(ngModuleType), "/").concat(identifierName(compMeta.type), ".html");
          }
        } else {
          url = templateMeta.templateUrl;
        }

        return compMeta.type.reference instanceof StaticSymbol ? url : jitSourceUrl(url);
      }

      function sharedStylesheetJitUrl(meta, id) {
        var pathParts = meta.moduleUrl.split(/\/\\/g);
        var baseName = pathParts[pathParts.length - 1];
        return jitSourceUrl("css/".concat(id).concat(baseName, ".ngstyle.js"));
      }

      function ngModuleJitUrl(moduleMeta) {
        return jitSourceUrl("".concat(identifierName(moduleMeta.type), "/module.ngfactory.js"));
      }

      function templateJitUrl(ngModuleType, compMeta) {
        return jitSourceUrl("".concat(identifierName(ngModuleType), "/").concat(identifierName(compMeta.type), ".ngfactory.js"));
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      var CORE$1 = '@angular/core';

      var Identifiers$1 = function Identifiers$1() {
        _classCallCheck(this, Identifiers$1);
      };
      /* Methods */


      Identifiers$1.NEW_METHOD = 'factory';
      Identifiers$1.TRANSFORM_METHOD = 'transform';
      Identifiers$1.PATCH_DEPS = 'patchedDeps';
      Identifiers$1.core = {
        name: null,
        moduleName: CORE$1
      };
      /* Instructions */

      Identifiers$1.namespaceHTML = {
        name: 'ɵɵnamespaceHTML',
        moduleName: CORE$1
      };
      Identifiers$1.namespaceMathML = {
        name: 'ɵɵnamespaceMathML',
        moduleName: CORE$1
      };
      Identifiers$1.namespaceSVG = {
        name: 'ɵɵnamespaceSVG',
        moduleName: CORE$1
      };
      Identifiers$1.element = {
        name: 'ɵɵelement',
        moduleName: CORE$1
      };
      Identifiers$1.elementStart = {
        name: 'ɵɵelementStart',
        moduleName: CORE$1
      };
      Identifiers$1.elementEnd = {
        name: 'ɵɵelementEnd',
        moduleName: CORE$1
      };
      Identifiers$1.advance = {
        name: 'ɵɵadvance',
        moduleName: CORE$1
      };
      Identifiers$1.syntheticHostProperty = {
        name: 'ɵɵsyntheticHostProperty',
        moduleName: CORE$1
      };
      Identifiers$1.syntheticHostListener = {
        name: 'ɵɵsyntheticHostListener',
        moduleName: CORE$1
      };
      Identifiers$1.attribute = {
        name: 'ɵɵattribute',
        moduleName: CORE$1
      };
      Identifiers$1.attributeInterpolate1 = {
        name: 'ɵɵattributeInterpolate1',
        moduleName: CORE$1
      };
      Identifiers$1.attributeInterpolate2 = {
        name: 'ɵɵattributeInterpolate2',
        moduleName: CORE$1
      };
      Identifiers$1.attributeInterpolate3 = {
        name: 'ɵɵattributeInterpolate3',
        moduleName: CORE$1
      };
      Identifiers$1.attributeInterpolate4 = {
        name: 'ɵɵattributeInterpolate4',
        moduleName: CORE$1
      };
      Identifiers$1.attributeInterpolate5 = {
        name: 'ɵɵattributeInterpolate5',
        moduleName: CORE$1
      };
      Identifiers$1.attributeInterpolate6 = {
        name: 'ɵɵattributeInterpolate6',
        moduleName: CORE$1
      };
      Identifiers$1.attributeInterpolate7 = {
        name: 'ɵɵattributeInterpolate7',
        moduleName: CORE$1
      };
      Identifiers$1.attributeInterpolate8 = {
        name: 'ɵɵattributeInterpolate8',
        moduleName: CORE$1
      };
      Identifiers$1.attributeInterpolateV = {
        name: 'ɵɵattributeInterpolateV',
        moduleName: CORE$1
      };
      Identifiers$1.classProp = {
        name: 'ɵɵclassProp',
        moduleName: CORE$1
      };
      Identifiers$1.elementContainerStart = {
        name: 'ɵɵelementContainerStart',
        moduleName: CORE$1
      };
      Identifiers$1.elementContainerEnd = {
        name: 'ɵɵelementContainerEnd',
        moduleName: CORE$1
      };
      Identifiers$1.elementContainer = {
        name: 'ɵɵelementContainer',
        moduleName: CORE$1
      };
      Identifiers$1.styleMap = {
        name: 'ɵɵstyleMap',
        moduleName: CORE$1
      };
      Identifiers$1.styleMapInterpolate1 = {
        name: 'ɵɵstyleMapInterpolate1',
        moduleName: CORE$1
      };
      Identifiers$1.styleMapInterpolate2 = {
        name: 'ɵɵstyleMapInterpolate2',
        moduleName: CORE$1
      };
      Identifiers$1.styleMapInterpolate3 = {
        name: 'ɵɵstyleMapInterpolate3',
        moduleName: CORE$1
      };
      Identifiers$1.styleMapInterpolate4 = {
        name: 'ɵɵstyleMapInterpolate4',
        moduleName: CORE$1
      };
      Identifiers$1.styleMapInterpolate5 = {
        name: 'ɵɵstyleMapInterpolate5',
        moduleName: CORE$1
      };
      Identifiers$1.styleMapInterpolate6 = {
        name: 'ɵɵstyleMapInterpolate6',
        moduleName: CORE$1
      };
      Identifiers$1.styleMapInterpolate7 = {
        name: 'ɵɵstyleMapInterpolate7',
        moduleName: CORE$1
      };
      Identifiers$1.styleMapInterpolate8 = {
        name: 'ɵɵstyleMapInterpolate8',
        moduleName: CORE$1
      };
      Identifiers$1.styleMapInterpolateV = {
        name: 'ɵɵstyleMapInterpolateV',
        moduleName: CORE$1
      };
      Identifiers$1.classMap = {
        name: 'ɵɵclassMap',
        moduleName: CORE$1
      };
      Identifiers$1.classMapInterpolate1 = {
        name: 'ɵɵclassMapInterpolate1',
        moduleName: CORE$1
      };
      Identifiers$1.classMapInterpolate2 = {
        name: 'ɵɵclassMapInterpolate2',
        moduleName: CORE$1
      };
      Identifiers$1.classMapInterpolate3 = {
        name: 'ɵɵclassMapInterpolate3',
        moduleName: CORE$1
      };
      Identifiers$1.classMapInterpolate4 = {
        name: 'ɵɵclassMapInterpolate4',
        moduleName: CORE$1
      };
      Identifiers$1.classMapInterpolate5 = {
        name: 'ɵɵclassMapInterpolate5',
        moduleName: CORE$1
      };
      Identifiers$1.classMapInterpolate6 = {
        name: 'ɵɵclassMapInterpolate6',
        moduleName: CORE$1
      };
      Identifiers$1.classMapInterpolate7 = {
        name: 'ɵɵclassMapInterpolate7',
        moduleName: CORE$1
      };
      Identifiers$1.classMapInterpolate8 = {
        name: 'ɵɵclassMapInterpolate8',
        moduleName: CORE$1
      };
      Identifiers$1.classMapInterpolateV = {
        name: 'ɵɵclassMapInterpolateV',
        moduleName: CORE$1
      };
      Identifiers$1.styleProp = {
        name: 'ɵɵstyleProp',
        moduleName: CORE$1
      };
      Identifiers$1.stylePropInterpolate1 = {
        name: 'ɵɵstylePropInterpolate1',
        moduleName: CORE$1
      };
      Identifiers$1.stylePropInterpolate2 = {
        name: 'ɵɵstylePropInterpolate2',
        moduleName: CORE$1
      };
      Identifiers$1.stylePropInterpolate3 = {
        name: 'ɵɵstylePropInterpolate3',
        moduleName: CORE$1
      };
      Identifiers$1.stylePropInterpolate4 = {
        name: 'ɵɵstylePropInterpolate4',
        moduleName: CORE$1
      };
      Identifiers$1.stylePropInterpolate5 = {
        name: 'ɵɵstylePropInterpolate5',
        moduleName: CORE$1
      };
      Identifiers$1.stylePropInterpolate6 = {
        name: 'ɵɵstylePropInterpolate6',
        moduleName: CORE$1
      };
      Identifiers$1.stylePropInterpolate7 = {
        name: 'ɵɵstylePropInterpolate7',
        moduleName: CORE$1
      };
      Identifiers$1.stylePropInterpolate8 = {
        name: 'ɵɵstylePropInterpolate8',
        moduleName: CORE$1
      };
      Identifiers$1.stylePropInterpolateV = {
        name: 'ɵɵstylePropInterpolateV',
        moduleName: CORE$1
      };
      Identifiers$1.nextContext = {
        name: 'ɵɵnextContext',
        moduleName: CORE$1
      };
      Identifiers$1.templateCreate = {
        name: 'ɵɵtemplate',
        moduleName: CORE$1
      };
      Identifiers$1.text = {
        name: 'ɵɵtext',
        moduleName: CORE$1
      };
      Identifiers$1.enableBindings = {
        name: 'ɵɵenableBindings',
        moduleName: CORE$1
      };
      Identifiers$1.disableBindings = {
        name: 'ɵɵdisableBindings',
        moduleName: CORE$1
      };
      Identifiers$1.getCurrentView = {
        name: 'ɵɵgetCurrentView',
        moduleName: CORE$1
      };
      Identifiers$1.textInterpolate = {
        name: 'ɵɵtextInterpolate',
        moduleName: CORE$1
      };
      Identifiers$1.textInterpolate1 = {
        name: 'ɵɵtextInterpolate1',
        moduleName: CORE$1
      };
      Identifiers$1.textInterpolate2 = {
        name: 'ɵɵtextInterpolate2',
        moduleName: CORE$1
      };
      Identifiers$1.textInterpolate3 = {
        name: 'ɵɵtextInterpolate3',
        moduleName: CORE$1
      };
      Identifiers$1.textInterpolate4 = {
        name: 'ɵɵtextInterpolate4',
        moduleName: CORE$1
      };
      Identifiers$1.textInterpolate5 = {
        name: 'ɵɵtextInterpolate5',
        moduleName: CORE$1
      };
      Identifiers$1.textInterpolate6 = {
        name: 'ɵɵtextInterpolate6',
        moduleName: CORE$1
      };
      Identifiers$1.textInterpolate7 = {
        name: 'ɵɵtextInterpolate7',
        moduleName: CORE$1
      };
      Identifiers$1.textInterpolate8 = {
        name: 'ɵɵtextInterpolate8',
        moduleName: CORE$1
      };
      Identifiers$1.textInterpolateV = {
        name: 'ɵɵtextInterpolateV',
        moduleName: CORE$1
      };
      Identifiers$1.restoreView = {
        name: 'ɵɵrestoreView',
        moduleName: CORE$1
      };
      Identifiers$1.pureFunction0 = {
        name: 'ɵɵpureFunction0',
        moduleName: CORE$1
      };
      Identifiers$1.pureFunction1 = {
        name: 'ɵɵpureFunction1',
        moduleName: CORE$1
      };
      Identifiers$1.pureFunction2 = {
        name: 'ɵɵpureFunction2',
        moduleName: CORE$1
      };
      Identifiers$1.pureFunction3 = {
        name: 'ɵɵpureFunction3',
        moduleName: CORE$1
      };
      Identifiers$1.pureFunction4 = {
        name: 'ɵɵpureFunction4',
        moduleName: CORE$1
      };
      Identifiers$1.pureFunction5 = {
        name: 'ɵɵpureFunction5',
        moduleName: CORE$1
      };
      Identifiers$1.pureFunction6 = {
        name: 'ɵɵpureFunction6',
        moduleName: CORE$1
      };
      Identifiers$1.pureFunction7 = {
        name: 'ɵɵpureFunction7',
        moduleName: CORE$1
      };
      Identifiers$1.pureFunction8 = {
        name: 'ɵɵpureFunction8',
        moduleName: CORE$1
      };
      Identifiers$1.pureFunctionV = {
        name: 'ɵɵpureFunctionV',
        moduleName: CORE$1
      };
      Identifiers$1.pipeBind1 = {
        name: 'ɵɵpipeBind1',
        moduleName: CORE$1
      };
      Identifiers$1.pipeBind2 = {
        name: 'ɵɵpipeBind2',
        moduleName: CORE$1
      };
      Identifiers$1.pipeBind3 = {
        name: 'ɵɵpipeBind3',
        moduleName: CORE$1
      };
      Identifiers$1.pipeBind4 = {
        name: 'ɵɵpipeBind4',
        moduleName: CORE$1
      };
      Identifiers$1.pipeBindV = {
        name: 'ɵɵpipeBindV',
        moduleName: CORE$1
      };
      Identifiers$1.hostProperty = {
        name: 'ɵɵhostProperty',
        moduleName: CORE$1
      };
      Identifiers$1.property = {
        name: 'ɵɵproperty',
        moduleName: CORE$1
      };
      Identifiers$1.propertyInterpolate = {
        name: 'ɵɵpropertyInterpolate',
        moduleName: CORE$1
      };
      Identifiers$1.propertyInterpolate1 = {
        name: 'ɵɵpropertyInterpolate1',
        moduleName: CORE$1
      };
      Identifiers$1.propertyInterpolate2 = {
        name: 'ɵɵpropertyInterpolate2',
        moduleName: CORE$1
      };
      Identifiers$1.propertyInterpolate3 = {
        name: 'ɵɵpropertyInterpolate3',
        moduleName: CORE$1
      };
      Identifiers$1.propertyInterpolate4 = {
        name: 'ɵɵpropertyInterpolate4',
        moduleName: CORE$1
      };
      Identifiers$1.propertyInterpolate5 = {
        name: 'ɵɵpropertyInterpolate5',
        moduleName: CORE$1
      };
      Identifiers$1.propertyInterpolate6 = {
        name: 'ɵɵpropertyInterpolate6',
        moduleName: CORE$1
      };
      Identifiers$1.propertyInterpolate7 = {
        name: 'ɵɵpropertyInterpolate7',
        moduleName: CORE$1
      };
      Identifiers$1.propertyInterpolate8 = {
        name: 'ɵɵpropertyInterpolate8',
        moduleName: CORE$1
      };
      Identifiers$1.propertyInterpolateV = {
        name: 'ɵɵpropertyInterpolateV',
        moduleName: CORE$1
      };
      Identifiers$1.i18n = {
        name: 'ɵɵi18n',
        moduleName: CORE$1
      };
      Identifiers$1.i18nAttributes = {
        name: 'ɵɵi18nAttributes',
        moduleName: CORE$1
      };
      Identifiers$1.i18nExp = {
        name: 'ɵɵi18nExp',
        moduleName: CORE$1
      };
      Identifiers$1.i18nStart = {
        name: 'ɵɵi18nStart',
        moduleName: CORE$1
      };
      Identifiers$1.i18nEnd = {
        name: 'ɵɵi18nEnd',
        moduleName: CORE$1
      };
      Identifiers$1.i18nApply = {
        name: 'ɵɵi18nApply',
        moduleName: CORE$1
      };
      Identifiers$1.i18nPostprocess = {
        name: 'ɵɵi18nPostprocess',
        moduleName: CORE$1
      };
      Identifiers$1.pipe = {
        name: 'ɵɵpipe',
        moduleName: CORE$1
      };
      Identifiers$1.projection = {
        name: 'ɵɵprojection',
        moduleName: CORE$1
      };
      Identifiers$1.projectionDef = {
        name: 'ɵɵprojectionDef',
        moduleName: CORE$1
      };
      Identifiers$1.reference = {
        name: 'ɵɵreference',
        moduleName: CORE$1
      };
      Identifiers$1.inject = {
        name: 'ɵɵinject',
        moduleName: CORE$1
      };
      Identifiers$1.injectAttribute = {
        name: 'ɵɵinjectAttribute',
        moduleName: CORE$1
      };
      Identifiers$1.injectPipeChangeDetectorRef = {
        name: 'ɵɵinjectPipeChangeDetectorRef',
        moduleName: CORE$1
      };
      Identifiers$1.directiveInject = {
        name: 'ɵɵdirectiveInject',
        moduleName: CORE$1
      };
      Identifiers$1.invalidFactory = {
        name: 'ɵɵinvalidFactory',
        moduleName: CORE$1
      };
      Identifiers$1.invalidFactoryDep = {
        name: 'ɵɵinvalidFactoryDep',
        moduleName: CORE$1
      };
      Identifiers$1.templateRefExtractor = {
        name: 'ɵɵtemplateRefExtractor',
        moduleName: CORE$1
      };
      Identifiers$1.forwardRef = {
        name: 'forwardRef',
        moduleName: CORE$1
      };
      Identifiers$1.resolveForwardRef = {
        name: 'resolveForwardRef',
        moduleName: CORE$1
      };
      Identifiers$1.resolveWindow = {
        name: 'ɵɵresolveWindow',
        moduleName: CORE$1
      };
      Identifiers$1.resolveDocument = {
        name: 'ɵɵresolveDocument',
        moduleName: CORE$1
      };
      Identifiers$1.resolveBody = {
        name: 'ɵɵresolveBody',
        moduleName: CORE$1
      };
      Identifiers$1.defineComponent = {
        name: 'ɵɵdefineComponent',
        moduleName: CORE$1
      };
      Identifiers$1.declareComponent = {
        name: 'ɵɵngDeclareComponent',
        moduleName: CORE$1
      };
      Identifiers$1.setComponentScope = {
        name: 'ɵɵsetComponentScope',
        moduleName: CORE$1
      };
      Identifiers$1.ChangeDetectionStrategy = {
        name: 'ChangeDetectionStrategy',
        moduleName: CORE$1
      };
      Identifiers$1.ViewEncapsulation = {
        name: 'ViewEncapsulation',
        moduleName: CORE$1
      };
      Identifiers$1.ComponentDefWithMeta = {
        name: 'ɵɵComponentDefWithMeta',
        moduleName: CORE$1
      };
      Identifiers$1.FactoryDef = {
        name: 'ɵɵFactoryDef',
        moduleName: CORE$1
      };
      Identifiers$1.defineDirective = {
        name: 'ɵɵdefineDirective',
        moduleName: CORE$1
      };
      Identifiers$1.declareDirective = {
        name: 'ɵɵngDeclareDirective',
        moduleName: CORE$1
      };
      Identifiers$1.DirectiveDefWithMeta = {
        name: 'ɵɵDirectiveDefWithMeta',
        moduleName: CORE$1
      };
      Identifiers$1.InjectorDef = {
        name: 'ɵɵInjectorDef',
        moduleName: CORE$1
      };
      Identifiers$1.defineInjector = {
        name: 'ɵɵdefineInjector',
        moduleName: CORE$1
      };
      Identifiers$1.NgModuleDefWithMeta = {
        name: 'ɵɵNgModuleDefWithMeta',
        moduleName: CORE$1
      };
      Identifiers$1.ModuleWithProviders = {
        name: 'ModuleWithProviders',
        moduleName: CORE$1
      };
      Identifiers$1.defineNgModule = {
        name: 'ɵɵdefineNgModule',
        moduleName: CORE$1
      };
      Identifiers$1.setNgModuleScope = {
        name: 'ɵɵsetNgModuleScope',
        moduleName: CORE$1
      };
      Identifiers$1.PipeDefWithMeta = {
        name: 'ɵɵPipeDefWithMeta',
        moduleName: CORE$1
      };
      Identifiers$1.definePipe = {
        name: 'ɵɵdefinePipe',
        moduleName: CORE$1
      };
      Identifiers$1.declarePipe = {
        name: 'ɵɵngDeclarePipe',
        moduleName: CORE$1
      };
      Identifiers$1.queryRefresh = {
        name: 'ɵɵqueryRefresh',
        moduleName: CORE$1
      };
      Identifiers$1.viewQuery = {
        name: 'ɵɵviewQuery',
        moduleName: CORE$1
      };
      Identifiers$1.loadQuery = {
        name: 'ɵɵloadQuery',
        moduleName: CORE$1
      };
      Identifiers$1.contentQuery = {
        name: 'ɵɵcontentQuery',
        moduleName: CORE$1
      };
      Identifiers$1.NgOnChangesFeature = {
        name: 'ɵɵNgOnChangesFeature',
        moduleName: CORE$1
      };
      Identifiers$1.InheritDefinitionFeature = {
        name: 'ɵɵInheritDefinitionFeature',
        moduleName: CORE$1
      };
      Identifiers$1.CopyDefinitionFeature = {
        name: 'ɵɵCopyDefinitionFeature',
        moduleName: CORE$1
      };
      Identifiers$1.ProvidersFeature = {
        name: 'ɵɵProvidersFeature',
        moduleName: CORE$1
      };
      Identifiers$1.listener = {
        name: 'ɵɵlistener',
        moduleName: CORE$1
      };
      Identifiers$1.getFactoryOf = {
        name: 'ɵɵgetFactoryOf',
        moduleName: CORE$1
      };
      Identifiers$1.getInheritedFactory = {
        name: 'ɵɵgetInheritedFactory',
        moduleName: CORE$1
      }; // sanitization-related functions

      Identifiers$1.sanitizeHtml = {
        name: 'ɵɵsanitizeHtml',
        moduleName: CORE$1
      };
      Identifiers$1.sanitizeStyle = {
        name: 'ɵɵsanitizeStyle',
        moduleName: CORE$1
      };
      Identifiers$1.sanitizeResourceUrl = {
        name: 'ɵɵsanitizeResourceUrl',
        moduleName: CORE$1
      };
      Identifiers$1.sanitizeScript = {
        name: 'ɵɵsanitizeScript',
        moduleName: CORE$1
      };
      Identifiers$1.sanitizeUrl = {
        name: 'ɵɵsanitizeUrl',
        moduleName: CORE$1
      };
      Identifiers$1.sanitizeUrlOrResourceUrl = {
        name: 'ɵɵsanitizeUrlOrResourceUrl',
        moduleName: CORE$1
      };
      Identifiers$1.trustConstantHtml = {
        name: 'ɵɵtrustConstantHtml',
        moduleName: CORE$1
      };
      Identifiers$1.trustConstantResourceUrl = {
        name: 'ɵɵtrustConstantResourceUrl',
        moduleName: CORE$1
      };
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */
      // https://docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit

      var VERSION = 3;
      var JS_B64_PREFIX = '# sourceMappingURL=data:application/json;base64,';

      var SourceMapGenerator = /*#__PURE__*/function () {
        function SourceMapGenerator() {
          var file = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;

          _classCallCheck(this, SourceMapGenerator);

          this.file = file;
          this.sourcesContent = new Map();
          this.lines = [];
          this.lastCol0 = 0;
          this.hasMappings = false;
        } // The content is `null` when the content is expected to be loaded using the URL


        _createClass(SourceMapGenerator, [{
          key: "addSource",
          value: function addSource(url) {
            var content = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

            if (!this.sourcesContent.has(url)) {
              this.sourcesContent.set(url, content);
            }

            return this;
          }
        }, {
          key: "addLine",
          value: function addLine() {
            this.lines.push([]);
            this.lastCol0 = 0;
            return this;
          }
        }, {
          key: "addMapping",
          value: function addMapping(col0, sourceUrl, sourceLine0, sourceCol0) {
            if (!this.currentLine) {
              throw new Error("A line must be added before mappings can be added");
            }

            if (sourceUrl != null && !this.sourcesContent.has(sourceUrl)) {
              throw new Error("Unknown source file \"".concat(sourceUrl, "\""));
            }

            if (col0 == null) {
              throw new Error("The column in the generated code must be provided");
            }

            if (col0 < this.lastCol0) {
              throw new Error("Mapping should be added in output order");
            }

            if (sourceUrl && (sourceLine0 == null || sourceCol0 == null)) {
              throw new Error("The source location must be provided when a source url is provided");
            }

            this.hasMappings = true;
            this.lastCol0 = col0;
            this.currentLine.push({
              col0: col0,
              sourceUrl: sourceUrl,
              sourceLine0: sourceLine0,
              sourceCol0: sourceCol0
            });
            return this;
          }
          /**
           * @internal strip this from published d.ts files due to
           * https://github.com/microsoft/TypeScript/issues/36216
           */

        }, {
          key: "currentLine",
          get: function get() {
            return this.lines.slice(-1)[0];
          }
        }, {
          key: "toJSON",
          value: function toJSON() {
            var _this63 = this;

            if (!this.hasMappings) {
              return null;
            }

            var sourcesIndex = new Map();
            var sources = [];
            var sourcesContent = [];
            Array.from(this.sourcesContent.keys()).forEach(function (url, i) {
              sourcesIndex.set(url, i);
              sources.push(url);
              sourcesContent.push(_this63.sourcesContent.get(url) || null);
            });
            var mappings = '';
            var lastCol0 = 0;
            var lastSourceIndex = 0;
            var lastSourceLine0 = 0;
            var lastSourceCol0 = 0;
            this.lines.forEach(function (segments) {
              lastCol0 = 0;
              mappings += segments.map(function (segment) {
                // zero-based starting column of the line in the generated code
                var segAsStr = toBase64VLQ(segment.col0 - lastCol0);
                lastCol0 = segment.col0;

                if (segment.sourceUrl != null) {
                  // zero-based index into the “sources” list
                  segAsStr += toBase64VLQ(sourcesIndex.get(segment.sourceUrl) - lastSourceIndex);
                  lastSourceIndex = sourcesIndex.get(segment.sourceUrl); // the zero-based starting line in the original source

                  segAsStr += toBase64VLQ(segment.sourceLine0 - lastSourceLine0);
                  lastSourceLine0 = segment.sourceLine0; // the zero-based starting column in the original source

                  segAsStr += toBase64VLQ(segment.sourceCol0 - lastSourceCol0);
                  lastSourceCol0 = segment.sourceCol0;
                }

                return segAsStr;
              }).join(',');
              mappings += ';';
            });
            mappings = mappings.slice(0, -1);
            return {
              'file': this.file || '',
              'version': VERSION,
              'sourceRoot': '',
              'sources': sources,
              'sourcesContent': sourcesContent,
              'mappings': mappings
            };
          }
        }, {
          key: "toJsComment",
          value: function toJsComment() {
            return this.hasMappings ? '//' + JS_B64_PREFIX + toBase64String(JSON.stringify(this, null, 0)) : '';
          }
        }]);

        return SourceMapGenerator;
      }();

      function toBase64String(value) {
        var b64 = '';
        var encoded = utf8Encode(value);

        for (var i = 0; i < encoded.length;) {
          var i1 = encoded[i++];
          var i2 = i < encoded.length ? encoded[i++] : null;
          var i3 = i < encoded.length ? encoded[i++] : null;
          b64 += toBase64Digit(i1 >> 2);
          b64 += toBase64Digit((i1 & 3) << 4 | (i2 === null ? 0 : i2 >> 4));
          b64 += i2 === null ? '=' : toBase64Digit((i2 & 15) << 2 | (i3 === null ? 0 : i3 >> 6));
          b64 += i2 === null || i3 === null ? '=' : toBase64Digit(i3 & 63);
        }

        return b64;
      }

      function toBase64VLQ(value) {
        value = value < 0 ? (-value << 1) + 1 : value << 1;
        var out = '';

        do {
          var digit = value & 31;
          value = value >> 5;

          if (value > 0) {
            digit = digit | 32;
          }

          out += toBase64Digit(digit);
        } while (value > 0);

        return out;
      }

      var B64_DIGITS = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';

      function toBase64Digit(value) {
        if (value < 0 || value >= 64) {
          throw new Error("Can only encode value in the range [0, 63]");
        }

        return B64_DIGITS[value];
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      var _SINGLE_QUOTE_ESCAPE_STRING_RE = /'|\\|\n|\r|\$/g;
      var _LEGAL_IDENTIFIER_RE = /^[$A-Z_][0-9A-Z_$]*$/i;
      var _INDENT_WITH = '  ';
      var CATCH_ERROR_VAR$1 = variable('error', null, null);
      var CATCH_STACK_VAR$1 = variable('stack', null, null);

      var _EmittedLine = function _EmittedLine(indent) {
        _classCallCheck(this, _EmittedLine);

        this.indent = indent;
        this.partsLength = 0;
        this.parts = [];
        this.srcSpans = [];
      };

      var EmitterVisitorContext = /*#__PURE__*/function () {
        function EmitterVisitorContext(_indent) {
          _classCallCheck(this, EmitterVisitorContext);

          this._indent = _indent;
          this._classes = [];
          this._preambleLineCount = 0;
          this._lines = [new _EmittedLine(_indent)];
        }

        _createClass(EmitterVisitorContext, [{
          key: "_currentLine",
          get:
          /**
           * @internal strip this from published d.ts files due to
           * https://github.com/microsoft/TypeScript/issues/36216
           */
          function get() {
            return this._lines[this._lines.length - 1];
          }
        }, {
          key: "println",
          value: function println(from) {
            var lastPart = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
            this.print(from || null, lastPart, true);
          }
        }, {
          key: "lineIsEmpty",
          value: function lineIsEmpty() {
            return this._currentLine.parts.length === 0;
          }
        }, {
          key: "lineLength",
          value: function lineLength() {
            return this._currentLine.indent * _INDENT_WITH.length + this._currentLine.partsLength;
          }
        }, {
          key: "print",
          value: function print(from, part) {
            var newLine = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

            if (part.length > 0) {
              this._currentLine.parts.push(part);

              this._currentLine.partsLength += part.length;

              this._currentLine.srcSpans.push(from && from.sourceSpan || null);
            }

            if (newLine) {
              this._lines.push(new _EmittedLine(this._indent));
            }
          }
        }, {
          key: "removeEmptyLastLine",
          value: function removeEmptyLastLine() {
            if (this.lineIsEmpty()) {
              this._lines.pop();
            }
          }
        }, {
          key: "incIndent",
          value: function incIndent() {
            this._indent++;

            if (this.lineIsEmpty()) {
              this._currentLine.indent = this._indent;
            }
          }
        }, {
          key: "decIndent",
          value: function decIndent() {
            this._indent--;

            if (this.lineIsEmpty()) {
              this._currentLine.indent = this._indent;
            }
          }
        }, {
          key: "pushClass",
          value: function pushClass(clazz) {
            this._classes.push(clazz);
          }
        }, {
          key: "popClass",
          value: function popClass() {
            return this._classes.pop();
          }
        }, {
          key: "currentClass",
          get: function get() {
            return this._classes.length > 0 ? this._classes[this._classes.length - 1] : null;
          }
        }, {
          key: "toSource",
          value: function toSource() {
            return this.sourceLines.map(function (l) {
              return l.parts.length > 0 ? _createIndent(l.indent) + l.parts.join('') : '';
            }).join('\n');
          }
        }, {
          key: "toSourceMapGenerator",
          value: function toSourceMapGenerator(genFilePath) {
            var startsAtLine = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
            var map = new SourceMapGenerator(genFilePath);
            var firstOffsetMapped = false;

            var mapFirstOffsetIfNeeded = function mapFirstOffsetIfNeeded() {
              if (!firstOffsetMapped) {
                // Add a single space so that tools won't try to load the file from disk.
                // Note: We are using virtual urls like `ng:///`, so we have to
                // provide a content here.
                map.addSource(genFilePath, ' ').addMapping(0, genFilePath, 0, 0);
                firstOffsetMapped = true;
              }
            };

            for (var i = 0; i < startsAtLine; i++) {
              map.addLine();
              mapFirstOffsetIfNeeded();
            }

            this.sourceLines.forEach(function (line, lineIdx) {
              map.addLine();
              var spans = line.srcSpans;
              var parts = line.parts;
              var col0 = line.indent * _INDENT_WITH.length;
              var spanIdx = 0; // skip leading parts without source spans

              while (spanIdx < spans.length && !spans[spanIdx]) {
                col0 += parts[spanIdx].length;
                spanIdx++;
              }

              if (spanIdx < spans.length && lineIdx === 0 && col0 === 0) {
                firstOffsetMapped = true;
              } else {
                mapFirstOffsetIfNeeded();
              }

              while (spanIdx < spans.length) {
                var span = spans[spanIdx];
                var source = span.start.file;
                var sourceLine = span.start.line;
                var sourceCol = span.start.col;
                map.addSource(source.url, source.content).addMapping(col0, source.url, sourceLine, sourceCol);
                col0 += parts[spanIdx].length;
                spanIdx++; // assign parts without span or the same span to the previous segment

                while (spanIdx < spans.length && (span === spans[spanIdx] || !spans[spanIdx])) {
                  col0 += parts[spanIdx].length;
                  spanIdx++;
                }
              }
            });
            return map;
          }
        }, {
          key: "setPreambleLineCount",
          value: function setPreambleLineCount(count) {
            return this._preambleLineCount = count;
          }
        }, {
          key: "spanOf",
          value: function spanOf(line, column) {
            var emittedLine = this._lines[line - this._preambleLineCount];

            if (emittedLine) {
              var columnsLeft = column - _createIndent(emittedLine.indent).length;

              for (var partIndex = 0; partIndex < emittedLine.parts.length; partIndex++) {
                var part = emittedLine.parts[partIndex];

                if (part.length > columnsLeft) {
                  return emittedLine.srcSpans[partIndex];
                }

                columnsLeft -= part.length;
              }
            }

            return null;
          }
          /**
           * @internal strip this from published d.ts files due to
           * https://github.com/microsoft/TypeScript/issues/36216
           */

        }, {
          key: "sourceLines",
          get: function get() {
            if (this._lines.length && this._lines[this._lines.length - 1].parts.length === 0) {
              return this._lines.slice(0, -1);
            }

            return this._lines;
          }
        }], [{
          key: "createRoot",
          value: function createRoot() {
            return new EmitterVisitorContext(0);
          }
        }]);

        return EmitterVisitorContext;
      }();

      var AbstractEmitterVisitor = /*#__PURE__*/function () {
        function AbstractEmitterVisitor(_escapeDollarInStrings) {
          _classCallCheck(this, AbstractEmitterVisitor);

          this._escapeDollarInStrings = _escapeDollarInStrings;
        }

        _createClass(AbstractEmitterVisitor, [{
          key: "printLeadingComments",
          value: function printLeadingComments(stmt, ctx) {
            if (stmt.leadingComments === undefined) {
              return;
            }

            var _iterator3 = _createForOfIteratorHelper(stmt.leadingComments),
                _step3;

            try {
              for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
                var comment = _step3.value;

                if (comment instanceof JSDocComment) {
                  ctx.print(stmt, "/*".concat(comment.toString(), "*/"), comment.trailingNewline);
                } else {
                  if (comment.multiline) {
                    ctx.print(stmt, "/* ".concat(comment.text, " */"), comment.trailingNewline);
                  } else {
                    comment.text.split('\n').forEach(function (line) {
                      ctx.println(stmt, "// ".concat(line));
                    });
                  }
                }
              }
            } catch (err) {
              _iterator3.e(err);
            } finally {
              _iterator3.f();
            }
          }
        }, {
          key: "visitExpressionStmt",
          value: function visitExpressionStmt(stmt, ctx) {
            this.printLeadingComments(stmt, ctx);
            stmt.expr.visitExpression(this, ctx);
            ctx.println(stmt, ';');
            return null;
          }
        }, {
          key: "visitReturnStmt",
          value: function visitReturnStmt(stmt, ctx) {
            this.printLeadingComments(stmt, ctx);
            ctx.print(stmt, "return ");
            stmt.value.visitExpression(this, ctx);
            ctx.println(stmt, ';');
            return null;
          }
        }, {
          key: "visitIfStmt",
          value: function visitIfStmt(stmt, ctx) {
            this.printLeadingComments(stmt, ctx);
            ctx.print(stmt, "if (");
            stmt.condition.visitExpression(this, ctx);
            ctx.print(stmt, ") {");
            var hasElseCase = stmt.falseCase != null && stmt.falseCase.length > 0;

            if (stmt.trueCase.length <= 1 && !hasElseCase) {
              ctx.print(stmt, " ");
              this.visitAllStatements(stmt.trueCase, ctx);
              ctx.removeEmptyLastLine();
              ctx.print(stmt, " ");
            } else {
              ctx.println();
              ctx.incIndent();
              this.visitAllStatements(stmt.trueCase, ctx);
              ctx.decIndent();

              if (hasElseCase) {
                ctx.println(stmt, "} else {");
                ctx.incIndent();
                this.visitAllStatements(stmt.falseCase, ctx);
                ctx.decIndent();
              }
            }

            ctx.println(stmt, "}");
            return null;
          }
        }, {
          key: "visitThrowStmt",
          value: function visitThrowStmt(stmt, ctx) {
            this.printLeadingComments(stmt, ctx);
            ctx.print(stmt, "throw ");
            stmt.error.visitExpression(this, ctx);
            ctx.println(stmt, ";");
            return null;
          }
        }, {
          key: "visitWriteVarExpr",
          value: function visitWriteVarExpr(expr, ctx) {
            var lineWasEmpty = ctx.lineIsEmpty();

            if (!lineWasEmpty) {
              ctx.print(expr, '(');
            }

            ctx.print(expr, "".concat(expr.name, " = "));
            expr.value.visitExpression(this, ctx);

            if (!lineWasEmpty) {
              ctx.print(expr, ')');
            }

            return null;
          }
        }, {
          key: "visitWriteKeyExpr",
          value: function visitWriteKeyExpr(expr, ctx) {
            var lineWasEmpty = ctx.lineIsEmpty();

            if (!lineWasEmpty) {
              ctx.print(expr, '(');
            }

            expr.receiver.visitExpression(this, ctx);
            ctx.print(expr, "[");
            expr.index.visitExpression(this, ctx);
            ctx.print(expr, "] = ");
            expr.value.visitExpression(this, ctx);

            if (!lineWasEmpty) {
              ctx.print(expr, ')');
            }

            return null;
          }
        }, {
          key: "visitWritePropExpr",
          value: function visitWritePropExpr(expr, ctx) {
            var lineWasEmpty = ctx.lineIsEmpty();

            if (!lineWasEmpty) {
              ctx.print(expr, '(');
            }

            expr.receiver.visitExpression(this, ctx);
            ctx.print(expr, ".".concat(expr.name, " = "));
            expr.value.visitExpression(this, ctx);

            if (!lineWasEmpty) {
              ctx.print(expr, ')');
            }

            return null;
          }
        }, {
          key: "visitInvokeMethodExpr",
          value: function visitInvokeMethodExpr(expr, ctx) {
            expr.receiver.visitExpression(this, ctx);
            var name = expr.name;

            if (expr.builtin != null) {
              name = this.getBuiltinMethodName(expr.builtin);

              if (name == null) {
                // some builtins just mean to skip the call.
                return null;
              }
            }

            ctx.print(expr, ".".concat(name, "("));
            this.visitAllExpressions(expr.args, ctx, ",");
            ctx.print(expr, ")");
            return null;
          }
        }, {
          key: "visitInvokeFunctionExpr",
          value: function visitInvokeFunctionExpr(expr, ctx) {
            expr.fn.visitExpression(this, ctx);
            ctx.print(expr, "(");
            this.visitAllExpressions(expr.args, ctx, ',');
            ctx.print(expr, ")");
            return null;
          }
        }, {
          key: "visitTaggedTemplateExpr",
          value: function visitTaggedTemplateExpr(expr, ctx) {
            expr.tag.visitExpression(this, ctx);
            ctx.print(expr, '`' + expr.template.elements[0].rawText);

            for (var i = 1; i < expr.template.elements.length; i++) {
              ctx.print(expr, '${');
              expr.template.expressions[i - 1].visitExpression(this, ctx);
              ctx.print(expr, "}".concat(expr.template.elements[i].rawText));
            }

            ctx.print(expr, '`');
            return null;
          }
        }, {
          key: "visitWrappedNodeExpr",
          value: function visitWrappedNodeExpr(ast, ctx) {
            throw new Error('Abstract emitter cannot visit WrappedNodeExpr.');
          }
        }, {
          key: "visitTypeofExpr",
          value: function visitTypeofExpr(expr, ctx) {
            ctx.print(expr, 'typeof ');
            expr.expr.visitExpression(this, ctx);
          }
        }, {
          key: "visitReadVarExpr",
          value: function visitReadVarExpr(ast, ctx) {
            var varName = ast.name;

            if (ast.builtin != null) {
              switch (ast.builtin) {
                case BuiltinVar.Super:
                  varName = 'super';
                  break;

                case BuiltinVar.This:
                  varName = 'this';
                  break;

                case BuiltinVar.CatchError:
                  varName = CATCH_ERROR_VAR$1.name;
                  break;

                case BuiltinVar.CatchStack:
                  varName = CATCH_STACK_VAR$1.name;
                  break;

                default:
                  throw new Error("Unknown builtin variable ".concat(ast.builtin));
              }
            }

            ctx.print(ast, varName);
            return null;
          }
        }, {
          key: "visitInstantiateExpr",
          value: function visitInstantiateExpr(ast, ctx) {
            ctx.print(ast, "new ");
            ast.classExpr.visitExpression(this, ctx);
            ctx.print(ast, "(");
            this.visitAllExpressions(ast.args, ctx, ',');
            ctx.print(ast, ")");
            return null;
          }
        }, {
          key: "visitLiteralExpr",
          value: function visitLiteralExpr(ast, ctx) {
            var value = ast.value;

            if (typeof value === 'string') {
              ctx.print(ast, escapeIdentifier(value, this._escapeDollarInStrings));
            } else {
              ctx.print(ast, "".concat(value));
            }

            return null;
          }
        }, {
          key: "visitLocalizedString",
          value: function visitLocalizedString(ast, ctx) {
            var head = ast.serializeI18nHead();
            ctx.print(ast, '$localize `' + head.raw);

            for (var i = 1; i < ast.messageParts.length; i++) {
              ctx.print(ast, '${');
              ast.expressions[i - 1].visitExpression(this, ctx);
              ctx.print(ast, "}".concat(ast.serializeI18nTemplatePart(i).raw));
            }

            ctx.print(ast, '`');
            return null;
          }
        }, {
          key: "visitConditionalExpr",
          value: function visitConditionalExpr(ast, ctx) {
            ctx.print(ast, "(");
            ast.condition.visitExpression(this, ctx);
            ctx.print(ast, '? ');
            ast.trueCase.visitExpression(this, ctx);
            ctx.print(ast, ': ');
            ast.falseCase.visitExpression(this, ctx);
            ctx.print(ast, ")");
            return null;
          }
        }, {
          key: "visitNotExpr",
          value: function visitNotExpr(ast, ctx) {
            ctx.print(ast, '!');
            ast.condition.visitExpression(this, ctx);
            return null;
          }
        }, {
          key: "visitAssertNotNullExpr",
          value: function visitAssertNotNullExpr(ast, ctx) {
            ast.condition.visitExpression(this, ctx);
            return null;
          }
        }, {
          key: "visitUnaryOperatorExpr",
          value: function visitUnaryOperatorExpr(ast, ctx) {
            var opStr;

            switch (ast.operator) {
              case UnaryOperator.Plus:
                opStr = '+';
                break;

              case UnaryOperator.Minus:
                opStr = '-';
                break;

              default:
                throw new Error("Unknown operator ".concat(ast.operator));
            }

            if (ast.parens) ctx.print(ast, "(");
            ctx.print(ast, opStr);
            ast.expr.visitExpression(this, ctx);
            if (ast.parens) ctx.print(ast, ")");
            return null;
          }
        }, {
          key: "visitBinaryOperatorExpr",
          value: function visitBinaryOperatorExpr(ast, ctx) {
            var opStr;

            switch (ast.operator) {
              case BinaryOperator.Equals:
                opStr = '==';
                break;

              case BinaryOperator.Identical:
                opStr = '===';
                break;

              case BinaryOperator.NotEquals:
                opStr = '!=';
                break;

              case BinaryOperator.NotIdentical:
                opStr = '!==';
                break;

              case BinaryOperator.And:
                opStr = '&&';
                break;

              case BinaryOperator.BitwiseAnd:
                opStr = '&';
                break;

              case BinaryOperator.Or:
                opStr = '||';
                break;

              case BinaryOperator.Plus:
                opStr = '+';
                break;

              case BinaryOperator.Minus:
                opStr = '-';
                break;

              case BinaryOperator.Divide:
                opStr = '/';
                break;

              case BinaryOperator.Multiply:
                opStr = '*';
                break;

              case BinaryOperator.Modulo:
                opStr = '%';
                break;

              case BinaryOperator.Lower:
                opStr = '<';
                break;

              case BinaryOperator.LowerEquals:
                opStr = '<=';
                break;

              case BinaryOperator.Bigger:
                opStr = '>';
                break;

              case BinaryOperator.BiggerEquals:
                opStr = '>=';
                break;

              default:
                throw new Error("Unknown operator ".concat(ast.operator));
            }

            if (ast.parens) ctx.print(ast, "(");
            ast.lhs.visitExpression(this, ctx);
            ctx.print(ast, " ".concat(opStr, " "));
            ast.rhs.visitExpression(this, ctx);
            if (ast.parens) ctx.print(ast, ")");
            return null;
          }
        }, {
          key: "visitReadPropExpr",
          value: function visitReadPropExpr(ast, ctx) {
            ast.receiver.visitExpression(this, ctx);
            ctx.print(ast, ".");
            ctx.print(ast, ast.name);
            return null;
          }
        }, {
          key: "visitReadKeyExpr",
          value: function visitReadKeyExpr(ast, ctx) {
            ast.receiver.visitExpression(this, ctx);
            ctx.print(ast, "[");
            ast.index.visitExpression(this, ctx);
            ctx.print(ast, "]");
            return null;
          }
        }, {
          key: "visitLiteralArrayExpr",
          value: function visitLiteralArrayExpr(ast, ctx) {
            ctx.print(ast, "[");
            this.visitAllExpressions(ast.entries, ctx, ',');
            ctx.print(ast, "]");
            return null;
          }
        }, {
          key: "visitLiteralMapExpr",
          value: function visitLiteralMapExpr(ast, ctx) {
            var _this64 = this;

            ctx.print(ast, "{");
            this.visitAllObjects(function (entry) {
              ctx.print(ast, "".concat(escapeIdentifier(entry.key, _this64._escapeDollarInStrings, entry.quoted), ":"));
              entry.value.visitExpression(_this64, ctx);
            }, ast.entries, ctx, ',');
            ctx.print(ast, "}");
            return null;
          }
        }, {
          key: "visitCommaExpr",
          value: function visitCommaExpr(ast, ctx) {
            ctx.print(ast, '(');
            this.visitAllExpressions(ast.parts, ctx, ',');
            ctx.print(ast, ')');
            return null;
          }
        }, {
          key: "visitAllExpressions",
          value: function visitAllExpressions(expressions, ctx, separator) {
            var _this65 = this;

            this.visitAllObjects(function (expr) {
              return expr.visitExpression(_this65, ctx);
            }, expressions, ctx, separator);
          }
        }, {
          key: "visitAllObjects",
          value: function visitAllObjects(handler, expressions, ctx, separator) {
            var incrementedIndent = false;

            for (var i = 0; i < expressions.length; i++) {
              if (i > 0) {
                if (ctx.lineLength() > 80) {
                  ctx.print(null, separator, true);

                  if (!incrementedIndent) {
                    // continuation are marked with double indent.
                    ctx.incIndent();
                    ctx.incIndent();
                    incrementedIndent = true;
                  }
                } else {
                  ctx.print(null, separator, false);
                }
              }

              handler(expressions[i]);
            }

            if (incrementedIndent) {
              // continuation are marked with double indent.
              ctx.decIndent();
              ctx.decIndent();
            }
          }
        }, {
          key: "visitAllStatements",
          value: function visitAllStatements(statements, ctx) {
            var _this66 = this;

            statements.forEach(function (stmt) {
              return stmt.visitStatement(_this66, ctx);
            });
          }
        }]);

        return AbstractEmitterVisitor;
      }();

      function escapeIdentifier(input, escapeDollar) {
        var alwaysQuote = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;

        if (input == null) {
          return null;
        }

        var body = input.replace(_SINGLE_QUOTE_ESCAPE_STRING_RE, function () {
          if ((arguments.length <= 0 ? undefined : arguments[0]) == '$') {
            return escapeDollar ? '\\$' : '$';
          } else if ((arguments.length <= 0 ? undefined : arguments[0]) == '\n') {
            return '\\n';
          } else if ((arguments.length <= 0 ? undefined : arguments[0]) == '\r') {
            return '\\r';
          } else {
            return "\\".concat(arguments.length <= 0 ? undefined : arguments[0]);
          }
        });
        var requiresQuotes = alwaysQuote || !_LEGAL_IDENTIFIER_RE.test(body);
        return requiresQuotes ? "'".concat(body, "'") : body;
      }

      function _createIndent(count) {
        var res = '';

        for (var i = 0; i < count; i++) {
          res += _INDENT_WITH;
        }

        return res;
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * Convert an object map with `Expression` values into a `LiteralMapExpr`.
       */


      function mapToMapExpression(map) {
        var result = Object.keys(map).map(function (key) {
          return {
            key: key,
            // The assertion here is because really TypeScript doesn't allow us to express that if the
            // key is present, it will have a value, but this is true in reality.
            value: map[key],
            quoted: false
          };
        });
        return literalMap(result);
      }
      /**
       * Convert metadata into an `Expression` in the given `OutputContext`.
       *
       * This operation will handle arrays, references to symbols, or literal `null` or `undefined`.
       */


      function convertMetaToOutput(meta, ctx) {
        if (Array.isArray(meta)) {
          return literalArr(meta.map(function (entry) {
            return convertMetaToOutput(entry, ctx);
          }));
        }

        if (meta instanceof StaticSymbol) {
          return ctx.importExpr(meta);
        }

        if (meta == null) {
          return literal(meta);
        }

        throw new Error("Internal error: Unsupported or unknown metadata: ".concat(meta));
      }

      function typeWithParameters(type, numParams) {
        if (numParams === 0) {
          return expressionType(type);
        }

        var params = [];

        for (var i = 0; i < numParams; i++) {
          params.push(DYNAMIC_TYPE);
        }

        return expressionType(type, undefined, params);
      }

      var ANIMATE_SYMBOL_PREFIX = '@';

      function prepareSyntheticPropertyName(name) {
        return "".concat(ANIMATE_SYMBOL_PREFIX).concat(name);
      }

      function prepareSyntheticListenerName(name, phase) {
        return "".concat(ANIMATE_SYMBOL_PREFIX).concat(name, ".").concat(phase);
      }

      function isSyntheticPropertyOrListener(name) {
        return name.charAt(0) == ANIMATE_SYMBOL_PREFIX;
      }

      function getSyntheticPropertyName(name) {
        // this will strip out listener phase values...
        // @foo.start => @foo
        var i = name.indexOf('.');
        name = i > 0 ? name.substring(0, i) : name;

        if (name.charAt(0) !== ANIMATE_SYMBOL_PREFIX) {
          name = ANIMATE_SYMBOL_PREFIX + name;
        }

        return name;
      }

      function getSafePropertyAccessString(accessor, name) {
        var escapedName = escapeIdentifier(name, false, false);
        return escapedName !== name ? "".concat(accessor, "[").concat(escapedName, "]") : "".concat(accessor, ".").concat(name);
      }

      function prepareSyntheticListenerFunctionName(name, phase) {
        return "animation_".concat(name, "_").concat(phase);
      }

      function jitOnlyGuardedExpression(expr) {
        return guardedExpression('ngJitMode', expr);
      }

      function devOnlyGuardedExpression(expr) {
        return guardedExpression('ngDevMode', expr);
      }

      function guardedExpression(guard, expr) {
        var guardExpr = new ExternalExpr({
          name: guard,
          moduleName: null
        });
        var guardNotDefined = new BinaryOperatorExpr(BinaryOperator.Identical, new TypeofExpr(guardExpr), literal('undefined'));
        var guardUndefinedOrTrue = new BinaryOperatorExpr(BinaryOperator.Or, guardNotDefined, guardExpr,
        /* type */
        undefined,
        /* sourceSpan */
        undefined, true);
        return new BinaryOperatorExpr(BinaryOperator.And, guardUndefinedOrTrue, expr);
      }

      function wrapReference(value) {
        var wrapped = new WrappedNodeExpr(value);
        return {
          value: wrapped,
          type: wrapped
        };
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      var Text = /*#__PURE__*/function () {
        function Text(value, sourceSpan) {
          _classCallCheck(this, Text);

          this.value = value;
          this.sourceSpan = sourceSpan;
        }

        _createClass(Text, [{
          key: "visit",
          value: function visit(visitor) {
            return visitor.visitText(this);
          }
        }]);

        return Text;
      }();

      var BoundText = /*#__PURE__*/function () {
        function BoundText(value, sourceSpan, i18n) {
          _classCallCheck(this, BoundText);

          this.value = value;
          this.sourceSpan = sourceSpan;
          this.i18n = i18n;
        }

        _createClass(BoundText, [{
          key: "visit",
          value: function visit(visitor) {
            return visitor.visitBoundText(this);
          }
        }]);

        return BoundText;
      }();
      /**
       * Represents a text attribute in the template.
       *
       * `valueSpan` may not be present in cases where there is no value `<div a></div>`.
       * `keySpan` may also not be present for synthetic attributes from ICU expansions.
       */


      var TextAttribute = /*#__PURE__*/function () {
        function TextAttribute(name, value, sourceSpan, keySpan, valueSpan, i18n) {
          _classCallCheck(this, TextAttribute);

          this.name = name;
          this.value = value;
          this.sourceSpan = sourceSpan;
          this.keySpan = keySpan;
          this.valueSpan = valueSpan;
          this.i18n = i18n;
        }

        _createClass(TextAttribute, [{
          key: "visit",
          value: function visit(visitor) {
            return visitor.visitTextAttribute(this);
          }
        }]);

        return TextAttribute;
      }();

      var BoundAttribute = /*#__PURE__*/function () {
        function BoundAttribute(name, type, securityContext, value, unit, sourceSpan, keySpan, valueSpan, i18n) {
          _classCallCheck(this, BoundAttribute);

          this.name = name;
          this.type = type;
          this.securityContext = securityContext;
          this.value = value;
          this.unit = unit;
          this.sourceSpan = sourceSpan;
          this.keySpan = keySpan;
          this.valueSpan = valueSpan;
          this.i18n = i18n;
        }

        _createClass(BoundAttribute, [{
          key: "visit",
          value: function visit(visitor) {
            return visitor.visitBoundAttribute(this);
          }
        }], [{
          key: "fromBoundElementProperty",
          value: function fromBoundElementProperty(prop, i18n) {
            if (prop.keySpan === undefined) {
              throw new Error("Unexpected state: keySpan must be defined for bound attributes but was not for ".concat(prop.name, ": ").concat(prop.sourceSpan));
            }

            return new BoundAttribute(prop.name, prop.type, prop.securityContext, prop.value, prop.unit, prop.sourceSpan, prop.keySpan, prop.valueSpan, i18n);
          }
        }]);

        return BoundAttribute;
      }();

      var BoundEvent = /*#__PURE__*/function () {
        function BoundEvent(name, type, handler, target, phase, sourceSpan, handlerSpan, keySpan) {
          _classCallCheck(this, BoundEvent);

          this.name = name;
          this.type = type;
          this.handler = handler;
          this.target = target;
          this.phase = phase;
          this.sourceSpan = sourceSpan;
          this.handlerSpan = handlerSpan;
          this.keySpan = keySpan;
        }

        _createClass(BoundEvent, [{
          key: "visit",
          value: function visit(visitor) {
            return visitor.visitBoundEvent(this);
          }
        }], [{
          key: "fromParsedEvent",
          value: function fromParsedEvent(event) {
            var target = event.type === 0
            /* Regular */
            ? event.targetOrPhase : null;
            var phase = event.type === 1
            /* Animation */
            ? event.targetOrPhase : null;

            if (event.keySpan === undefined) {
              throw new Error("Unexpected state: keySpan must be defined for bound event but was not for ".concat(event.name, ": ").concat(event.sourceSpan));
            }

            return new BoundEvent(event.name, event.type, event.handler, target, phase, event.sourceSpan, event.handlerSpan, event.keySpan);
          }
        }]);

        return BoundEvent;
      }();

      var Element = /*#__PURE__*/function () {
        function Element(name, attributes, inputs, outputs, children, references, sourceSpan, startSourceSpan, endSourceSpan, i18n) {
          _classCallCheck(this, Element);

          this.name = name;
          this.attributes = attributes;
          this.inputs = inputs;
          this.outputs = outputs;
          this.children = children;
          this.references = references;
          this.sourceSpan = sourceSpan;
          this.startSourceSpan = startSourceSpan;
          this.endSourceSpan = endSourceSpan;
          this.i18n = i18n;
        }

        _createClass(Element, [{
          key: "visit",
          value: function visit(visitor) {
            return visitor.visitElement(this);
          }
        }]);

        return Element;
      }();

      var Template = /*#__PURE__*/function () {
        function Template(tagName, attributes, inputs, outputs, templateAttrs, children, references, variables, sourceSpan, startSourceSpan, endSourceSpan, i18n) {
          _classCallCheck(this, Template);

          this.tagName = tagName;
          this.attributes = attributes;
          this.inputs = inputs;
          this.outputs = outputs;
          this.templateAttrs = templateAttrs;
          this.children = children;
          this.references = references;
          this.variables = variables;
          this.sourceSpan = sourceSpan;
          this.startSourceSpan = startSourceSpan;
          this.endSourceSpan = endSourceSpan;
          this.i18n = i18n;
        }

        _createClass(Template, [{
          key: "visit",
          value: function visit(visitor) {
            return visitor.visitTemplate(this);
          }
        }]);

        return Template;
      }();

      var Content = /*#__PURE__*/function () {
        function Content(selector, attributes, sourceSpan, i18n) {
          _classCallCheck(this, Content);

          this.selector = selector;
          this.attributes = attributes;
          this.sourceSpan = sourceSpan;
          this.i18n = i18n;
          this.name = 'ng-content';
        }

        _createClass(Content, [{
          key: "visit",
          value: function visit(visitor) {
            return visitor.visitContent(this);
          }
        }]);

        return Content;
      }();

      var Variable = /*#__PURE__*/function () {
        function Variable(name, value, sourceSpan, keySpan, valueSpan) {
          _classCallCheck(this, Variable);

          this.name = name;
          this.value = value;
          this.sourceSpan = sourceSpan;
          this.keySpan = keySpan;
          this.valueSpan = valueSpan;
        }

        _createClass(Variable, [{
          key: "visit",
          value: function visit(visitor) {
            return visitor.visitVariable(this);
          }
        }]);

        return Variable;
      }();

      var Reference = /*#__PURE__*/function () {
        function Reference(name, value, sourceSpan, keySpan, valueSpan) {
          _classCallCheck(this, Reference);

          this.name = name;
          this.value = value;
          this.sourceSpan = sourceSpan;
          this.keySpan = keySpan;
          this.valueSpan = valueSpan;
        }

        _createClass(Reference, [{
          key: "visit",
          value: function visit(visitor) {
            return visitor.visitReference(this);
          }
        }]);

        return Reference;
      }();

      var Icu = /*#__PURE__*/function () {
        function Icu(vars, placeholders, sourceSpan, i18n) {
          _classCallCheck(this, Icu);

          this.vars = vars;
          this.placeholders = placeholders;
          this.sourceSpan = sourceSpan;
          this.i18n = i18n;
        }

        _createClass(Icu, [{
          key: "visit",
          value: function visit(visitor) {
            return visitor.visitIcu(this);
          }
        }]);

        return Icu;
      }();

      var NullVisitor = /*#__PURE__*/function () {
        function NullVisitor() {
          _classCallCheck(this, NullVisitor);
        }

        _createClass(NullVisitor, [{
          key: "visitElement",
          value: function visitElement(element) {}
        }, {
          key: "visitTemplate",
          value: function visitTemplate(template) {}
        }, {
          key: "visitContent",
          value: function visitContent(content) {}
        }, {
          key: "visitVariable",
          value: function visitVariable(variable) {}
        }, {
          key: "visitReference",
          value: function visitReference(reference) {}
        }, {
          key: "visitTextAttribute",
          value: function visitTextAttribute(attribute) {}
        }, {
          key: "visitBoundAttribute",
          value: function visitBoundAttribute(attribute) {}
        }, {
          key: "visitBoundEvent",
          value: function visitBoundEvent(attribute) {}
        }, {
          key: "visitText",
          value: function visitText(text) {}
        }, {
          key: "visitBoundText",
          value: function visitBoundText(text) {}
        }, {
          key: "visitIcu",
          value: function visitIcu(icu) {}
        }]);

        return NullVisitor;
      }();

      var RecursiveVisitor = /*#__PURE__*/function () {
        function RecursiveVisitor() {
          _classCallCheck(this, RecursiveVisitor);
        }

        _createClass(RecursiveVisitor, [{
          key: "visitElement",
          value: function visitElement(element) {
            visitAll(this, element.attributes);
            visitAll(this, element.children);
            visitAll(this, element.references);
          }
        }, {
          key: "visitTemplate",
          value: function visitTemplate(template) {
            visitAll(this, template.attributes);
            visitAll(this, template.children);
            visitAll(this, template.references);
            visitAll(this, template.variables);
          }
        }, {
          key: "visitContent",
          value: function visitContent(content) {}
        }, {
          key: "visitVariable",
          value: function visitVariable(variable) {}
        }, {
          key: "visitReference",
          value: function visitReference(reference) {}
        }, {
          key: "visitTextAttribute",
          value: function visitTextAttribute(attribute) {}
        }, {
          key: "visitBoundAttribute",
          value: function visitBoundAttribute(attribute) {}
        }, {
          key: "visitBoundEvent",
          value: function visitBoundEvent(attribute) {}
        }, {
          key: "visitText",
          value: function visitText(text) {}
        }, {
          key: "visitBoundText",
          value: function visitBoundText(text) {}
        }, {
          key: "visitIcu",
          value: function visitIcu(icu) {}
        }]);

        return RecursiveVisitor;
      }();

      var TransformVisitor = /*#__PURE__*/function () {
        function TransformVisitor() {
          _classCallCheck(this, TransformVisitor);
        }

        _createClass(TransformVisitor, [{
          key: "visitElement",
          value: function visitElement(element) {
            var newAttributes = transformAll(this, element.attributes);
            var newInputs = transformAll(this, element.inputs);
            var newOutputs = transformAll(this, element.outputs);
            var newChildren = transformAll(this, element.children);
            var newReferences = transformAll(this, element.references);

            if (newAttributes != element.attributes || newInputs != element.inputs || newOutputs != element.outputs || newChildren != element.children || newReferences != element.references) {
              return new Element(element.name, newAttributes, newInputs, newOutputs, newChildren, newReferences, element.sourceSpan, element.startSourceSpan, element.endSourceSpan);
            }

            return element;
          }
        }, {
          key: "visitTemplate",
          value: function visitTemplate(template) {
            var newAttributes = transformAll(this, template.attributes);
            var newInputs = transformAll(this, template.inputs);
            var newOutputs = transformAll(this, template.outputs);
            var newTemplateAttrs = transformAll(this, template.templateAttrs);
            var newChildren = transformAll(this, template.children);
            var newReferences = transformAll(this, template.references);
            var newVariables = transformAll(this, template.variables);

            if (newAttributes != template.attributes || newInputs != template.inputs || newOutputs != template.outputs || newTemplateAttrs != template.templateAttrs || newChildren != template.children || newReferences != template.references || newVariables != template.variables) {
              return new Template(template.tagName, newAttributes, newInputs, newOutputs, newTemplateAttrs, newChildren, newReferences, newVariables, template.sourceSpan, template.startSourceSpan, template.endSourceSpan);
            }

            return template;
          }
        }, {
          key: "visitContent",
          value: function visitContent(content) {
            return content;
          }
        }, {
          key: "visitVariable",
          value: function visitVariable(variable) {
            return variable;
          }
        }, {
          key: "visitReference",
          value: function visitReference(reference) {
            return reference;
          }
        }, {
          key: "visitTextAttribute",
          value: function visitTextAttribute(attribute) {
            return attribute;
          }
        }, {
          key: "visitBoundAttribute",
          value: function visitBoundAttribute(attribute) {
            return attribute;
          }
        }, {
          key: "visitBoundEvent",
          value: function visitBoundEvent(attribute) {
            return attribute;
          }
        }, {
          key: "visitText",
          value: function visitText(text) {
            return text;
          }
        }, {
          key: "visitBoundText",
          value: function visitBoundText(text) {
            return text;
          }
        }, {
          key: "visitIcu",
          value: function visitIcu(icu) {
            return icu;
          }
        }]);

        return TransformVisitor;
      }();

      function visitAll(visitor, nodes) {
        var result = [];

        if (visitor.visit) {
          var _iterator4 = _createForOfIteratorHelper(nodes),
              _step4;

          try {
            for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
              var node = _step4.value;
              var newNode = visitor.visit(node) || node.visit(visitor);
            }
          } catch (err) {
            _iterator4.e(err);
          } finally {
            _iterator4.f();
          }
        } else {
          var _iterator5 = _createForOfIteratorHelper(nodes),
              _step5;

          try {
            for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
              var _node = _step5.value;

              var _newNode = _node.visit(visitor);

              if (_newNode) {
                result.push(_newNode);
              }
            }
          } catch (err) {
            _iterator5.e(err);
          } finally {
            _iterator5.f();
          }
        }

        return result;
      }

      function transformAll(visitor, nodes) {
        var result = [];
        var changed = false;

        var _iterator6 = _createForOfIteratorHelper(nodes),
            _step6;

        try {
          for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {
            var node = _step6.value;
            var newNode = node.visit(visitor);

            if (newNode) {
              result.push(newNode);
            }

            changed = changed || newNode != node;
          }
        } catch (err) {
          _iterator6.e(err);
        } finally {
          _iterator6.f();
        }

        return changed ? result : nodes;
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      var Message =
      /**
       * @param nodes message AST
       * @param placeholders maps placeholder names to static content and their source spans
       * @param placeholderToMessage maps placeholder names to messages (used for nested ICU messages)
       * @param meaning
       * @param description
       * @param customId
       */
      function Message(nodes, placeholders, placeholderToMessage, meaning, description, customId) {
        _classCallCheck(this, Message);

        this.nodes = nodes;
        this.placeholders = placeholders;
        this.placeholderToMessage = placeholderToMessage;
        this.meaning = meaning;
        this.description = description;
        this.customId = customId;
        this.id = this.customId;
        /** The ids to use if there are no custom id and if `i18nLegacyMessageIdFormat` is not empty */

        this.legacyIds = [];

        if (nodes.length) {
          this.sources = [{
            filePath: nodes[0].sourceSpan.start.file.url,
            startLine: nodes[0].sourceSpan.start.line + 1,
            startCol: nodes[0].sourceSpan.start.col + 1,
            endLine: nodes[nodes.length - 1].sourceSpan.end.line + 1,
            endCol: nodes[0].sourceSpan.start.col + 1
          }];
        } else {
          this.sources = [];
        }
      };

      var Text$1 = /*#__PURE__*/function () {
        function Text$1(value, sourceSpan) {
          _classCallCheck(this, Text$1);

          this.value = value;
          this.sourceSpan = sourceSpan;
        }

        _createClass(Text$1, [{
          key: "visit",
          value: function visit(visitor, context) {
            return visitor.visitText(this, context);
          }
        }]);

        return Text$1;
      }(); // TODO(vicb): do we really need this node (vs an array) ?


      var Container = /*#__PURE__*/function () {
        function Container(children, sourceSpan) {
          _classCallCheck(this, Container);

          this.children = children;
          this.sourceSpan = sourceSpan;
        }

        _createClass(Container, [{
          key: "visit",
          value: function visit(visitor, context) {
            return visitor.visitContainer(this, context);
          }
        }]);

        return Container;
      }();

      var Icu$1 = /*#__PURE__*/function () {
        function Icu$1(expression, type, cases, sourceSpan) {
          _classCallCheck(this, Icu$1);

          this.expression = expression;
          this.type = type;
          this.cases = cases;
          this.sourceSpan = sourceSpan;
        }

        _createClass(Icu$1, [{
          key: "visit",
          value: function visit(visitor, context) {
            return visitor.visitIcu(this, context);
          }
        }]);

        return Icu$1;
      }();

      var TagPlaceholder = /*#__PURE__*/function () {
        function TagPlaceholder(tag, attrs, startName, closeName, children, isVoid, // TODO sourceSpan should cover all (we need a startSourceSpan and endSourceSpan)
        sourceSpan, startSourceSpan, endSourceSpan) {
          _classCallCheck(this, TagPlaceholder);

          this.tag = tag;
          this.attrs = attrs;
          this.startName = startName;
          this.closeName = closeName;
          this.children = children;
          this.isVoid = isVoid;
          this.sourceSpan = sourceSpan;
          this.startSourceSpan = startSourceSpan;
          this.endSourceSpan = endSourceSpan;
        }

        _createClass(TagPlaceholder, [{
          key: "visit",
          value: function visit(visitor, context) {
            return visitor.visitTagPlaceholder(this, context);
          }
        }]);

        return TagPlaceholder;
      }();

      var Placeholder = /*#__PURE__*/function () {
        function Placeholder(value, name, sourceSpan) {
          _classCallCheck(this, Placeholder);

          this.value = value;
          this.name = name;
          this.sourceSpan = sourceSpan;
        }

        _createClass(Placeholder, [{
          key: "visit",
          value: function visit(visitor, context) {
            return visitor.visitPlaceholder(this, context);
          }
        }]);

        return Placeholder;
      }();

      var IcuPlaceholder = /*#__PURE__*/function () {
        function IcuPlaceholder(value, name, sourceSpan) {
          _classCallCheck(this, IcuPlaceholder);

          this.value = value;
          this.name = name;
          this.sourceSpan = sourceSpan;
        }

        _createClass(IcuPlaceholder, [{
          key: "visit",
          value: function visit(visitor, context) {
            return visitor.visitIcuPlaceholder(this, context);
          }
        }]);

        return IcuPlaceholder;
      }(); // Clone the AST


      var CloneVisitor = /*#__PURE__*/function () {
        function CloneVisitor() {
          _classCallCheck(this, CloneVisitor);
        }

        _createClass(CloneVisitor, [{
          key: "visitText",
          value: function visitText(text, context) {
            return new Text$1(text.value, text.sourceSpan);
          }
        }, {
          key: "visitContainer",
          value: function visitContainer(container, context) {
            var _this67 = this;

            var children = container.children.map(function (n) {
              return n.visit(_this67, context);
            });
            return new Container(children, container.sourceSpan);
          }
        }, {
          key: "visitIcu",
          value: function visitIcu(icu, context) {
            var _this68 = this;

            var cases = {};
            Object.keys(icu.cases).forEach(function (key) {
              return cases[key] = icu.cases[key].visit(_this68, context);
            });
            var msg = new Icu$1(icu.expression, icu.type, cases, icu.sourceSpan);
            msg.expressionPlaceholder = icu.expressionPlaceholder;
            return msg;
          }
        }, {
          key: "visitTagPlaceholder",
          value: function visitTagPlaceholder(ph, context) {
            var _this69 = this;

            var children = ph.children.map(function (n) {
              return n.visit(_this69, context);
            });
            return new TagPlaceholder(ph.tag, ph.attrs, ph.startName, ph.closeName, children, ph.isVoid, ph.sourceSpan, ph.startSourceSpan, ph.endSourceSpan);
          }
        }, {
          key: "visitPlaceholder",
          value: function visitPlaceholder(ph, context) {
            return new Placeholder(ph.value, ph.name, ph.sourceSpan);
          }
        }, {
          key: "visitIcuPlaceholder",
          value: function visitIcuPlaceholder(ph, context) {
            return new IcuPlaceholder(ph.value, ph.name, ph.sourceSpan);
          }
        }]);

        return CloneVisitor;
      }(); // Visit all the nodes recursively


      var RecurseVisitor = /*#__PURE__*/function () {
        function RecurseVisitor() {
          _classCallCheck(this, RecurseVisitor);
        }

        _createClass(RecurseVisitor, [{
          key: "visitText",
          value: function visitText(text, context) {}
        }, {
          key: "visitContainer",
          value: function visitContainer(container, context) {
            var _this70 = this;

            container.children.forEach(function (child) {
              return child.visit(_this70);
            });
          }
        }, {
          key: "visitIcu",
          value: function visitIcu(icu, context) {
            var _this71 = this;

            Object.keys(icu.cases).forEach(function (k) {
              icu.cases[k].visit(_this71);
            });
          }
        }, {
          key: "visitTagPlaceholder",
          value: function visitTagPlaceholder(ph, context) {
            var _this72 = this;

            ph.children.forEach(function (child) {
              return child.visit(_this72);
            });
          }
        }, {
          key: "visitPlaceholder",
          value: function visitPlaceholder(ph, context) {}
        }, {
          key: "visitIcuPlaceholder",
          value: function visitIcuPlaceholder(ph, context) {}
        }]);

        return RecurseVisitor;
      }();
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * Represents a big integer using a buffer of its individual digits, with the least significant
       * digit stored at the beginning of the array (little endian).
       *
       * For performance reasons, each instance is mutable. The addition operation can be done in-place
       * to reduce memory pressure of allocation for the digits array.
       */


      var BigInteger = /*#__PURE__*/function () {
        /**
         * Creates a big integer using its individual digits in little endian storage.
         */
        function BigInteger(digits) {
          _classCallCheck(this, BigInteger);

          this.digits = digits;
        }

        _createClass(BigInteger, [{
          key: "clone",
          value:
          /**
           * Creates a clone of this instance.
           */
          function clone() {
            return new BigInteger(this.digits.slice());
          }
          /**
           * Returns a new big integer with the sum of `this` and `other` as its value. This does not mutate
           * `this` but instead returns a new instance, unlike `addToSelf`.
           */

        }, {
          key: "add",
          value: function add(other) {
            var result = this.clone();
            result.addToSelf(other);
            return result;
          }
          /**
           * Adds `other` to the instance itself, thereby mutating its value.
           */

        }, {
          key: "addToSelf",
          value: function addToSelf(other) {
            var maxNrOfDigits = Math.max(this.digits.length, other.digits.length);
            var carry = 0;

            for (var i = 0; i < maxNrOfDigits; i++) {
              var digitSum = carry;

              if (i < this.digits.length) {
                digitSum += this.digits[i];
              }

              if (i < other.digits.length) {
                digitSum += other.digits[i];
              }

              if (digitSum >= 10) {
                this.digits[i] = digitSum - 10;
                carry = 1;
              } else {
                this.digits[i] = digitSum;
                carry = 0;
              }
            } // Apply a remaining carry if needed.


            if (carry > 0) {
              this.digits[maxNrOfDigits] = 1;
            }
          }
          /**
           * Builds the decimal string representation of the big integer. As this is stored in
           * little endian, the digits are concatenated in reverse order.
           */

        }, {
          key: "toString",
          value: function toString() {
            var res = '';

            for (var i = this.digits.length - 1; i >= 0; i--) {
              res += this.digits[i];
            }

            return res;
          }
        }], [{
          key: "zero",
          value: function zero() {
            return new BigInteger([0]);
          }
        }, {
          key: "one",
          value: function one() {
            return new BigInteger([1]);
          }
        }]);

        return BigInteger;
      }();
      /**
       * Represents a big integer which is optimized for multiplication operations, as its power-of-twos
       * are memoized. See `multiplyBy()` for details on the multiplication algorithm.
       */


      var BigIntForMultiplication = /*#__PURE__*/function () {
        function BigIntForMultiplication(value) {
          _classCallCheck(this, BigIntForMultiplication);

          this.powerOfTwos = [value];
        }
        /**
         * Returns the big integer itself.
         */


        _createClass(BigIntForMultiplication, [{
          key: "getValue",
          value: function getValue() {
            return this.powerOfTwos[0];
          }
          /**
           * Computes the value for `num * b`, where `num` is a JS number and `b` is a big integer. The
           * value for `b` is represented by a storage model that is optimized for this computation.
           *
           * This operation is implemented in N(log2(num)) by continuous halving of the number, where the
           * least-significant bit (LSB) is tested in each iteration. If the bit is set, the bit's index is
           * used as exponent into the power-of-two multiplication of `b`.
           *
           * As an example, consider the multiplication num=42, b=1337. In binary 42 is 0b00101010 and the
           * algorithm unrolls into the following iterations:
           *
           *  Iteration | num        | LSB  | b * 2^iter | Add? | product
           * -----------|------------|------|------------|------|--------
           *  0         | 0b00101010 | 0    | 1337       | No   | 0
           *  1         | 0b00010101 | 1    | 2674       | Yes  | 2674
           *  2         | 0b00001010 | 0    | 5348       | No   | 2674
           *  3         | 0b00000101 | 1    | 10696      | Yes  | 13370
           *  4         | 0b00000010 | 0    | 21392      | No   | 13370
           *  5         | 0b00000001 | 1    | 42784      | Yes  | 56154
           *  6         | 0b00000000 | 0    | 85568      | No   | 56154
           *
           * The computed product of 56154 is indeed the correct result.
           *
           * The `BigIntForMultiplication` representation for a big integer provides memoized access to the
           * power-of-two values to reduce the workload in computing those values.
           */

        }, {
          key: "multiplyBy",
          value: function multiplyBy(num) {
            var product = BigInteger.zero();
            this.multiplyByAndAddTo(num, product);
            return product;
          }
          /**
           * See `multiplyBy()` for details. This function allows for the computed product to be added
           * directly to the provided result big integer.
           */

        }, {
          key: "multiplyByAndAddTo",
          value: function multiplyByAndAddTo(num, result) {
            for (var exponent = 0; num !== 0; num = num >>> 1, exponent++) {
              if (num & 1) {
                var value = this.getMultipliedByPowerOfTwo(exponent);
                result.addToSelf(value);
              }
            }
          }
          /**
           * Computes and memoizes the big integer value for `this.number * 2^exponent`.
           */

        }, {
          key: "getMultipliedByPowerOfTwo",
          value: function getMultipliedByPowerOfTwo(exponent) {
            // Compute the powers up until the requested exponent, where each value is computed from its
            // predecessor. This is simple as `this.number * 2^(exponent - 1)` only has to be doubled (i.e.
            // added to itself) to reach `this.number * 2^exponent`.
            for (var i = this.powerOfTwos.length; i <= exponent; i++) {
              var previousPower = this.powerOfTwos[i - 1];
              this.powerOfTwos[i] = previousPower.add(previousPower);
            }

            return this.powerOfTwos[exponent];
          }
        }]);

        return BigIntForMultiplication;
      }();
      /**
       * Represents an exponentiation operation for the provided base, of which exponents are computed and
       * memoized. The results are represented by a `BigIntForMultiplication` which is tailored for
       * multiplication operations by memoizing the power-of-twos. This effectively results in a matrix
       * representation that is lazily computed upon request.
       */


      var BigIntExponentiation = /*#__PURE__*/function () {
        function BigIntExponentiation(base) {
          _classCallCheck(this, BigIntExponentiation);

          this.base = base;
          this.exponents = [new BigIntForMultiplication(BigInteger.one())];
        }
        /**
         * Compute the value for `this.base^exponent`, resulting in a big integer that is optimized for
         * further multiplication operations.
         */


        _createClass(BigIntExponentiation, [{
          key: "toThePowerOf",
          value: function toThePowerOf(exponent) {
            // Compute the results up until the requested exponent, where every value is computed from its
            // predecessor. This is because `this.base^(exponent - 1)` only has to be multiplied by `base`
            // to reach `this.base^exponent`.
            for (var i = this.exponents.length; i <= exponent; i++) {
              var value = this.exponents[i - 1].multiplyBy(this.base);
              this.exponents[i] = new BigIntForMultiplication(value);
            }

            return this.exponents[exponent];
          }
        }]);

        return BigIntExponentiation;
      }();
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * Return the message id or compute it using the XLIFF1 digest.
       */


      function _digest2(message) {
        return message.id || computeDigest(message);
      }
      /**
       * Compute the message id using the XLIFF1 digest.
       */


      function computeDigest(message) {
        return sha1(serializeNodes(message.nodes).join('') + "[".concat(message.meaning, "]"));
      }
      /**
       * Return the message id or compute it using the XLIFF2/XMB/$localize digest.
       */


      function decimalDigest(message) {
        return message.id || computeDecimalDigest(message);
      }
      /**
       * Compute the message id using the XLIFF2/XMB/$localize digest.
       */


      function computeDecimalDigest(message) {
        var visitor = new _SerializerIgnoreIcuExpVisitor();
        var parts = message.nodes.map(function (a) {
          return a.visit(visitor, null);
        });
        return computeMsgId(parts.join(''), message.meaning);
      }
      /**
       * Serialize the i18n ast to something xml-like in order to generate an UID.
       *
       * The visitor is also used in the i18n parser tests
       *
       * @internal
       */


      var _SerializerVisitor = /*#__PURE__*/function () {
        function _SerializerVisitor() {
          _classCallCheck(this, _SerializerVisitor);
        }

        _createClass(_SerializerVisitor, [{
          key: "visitText",
          value: function visitText(text, context) {
            return text.value;
          }
        }, {
          key: "visitContainer",
          value: function visitContainer(container, context) {
            var _this73 = this;

            return "[".concat(container.children.map(function (child) {
              return child.visit(_this73);
            }).join(', '), "]");
          }
        }, {
          key: "visitIcu",
          value: function visitIcu(icu, context) {
            var _this74 = this;

            var strCases = Object.keys(icu.cases).map(function (k) {
              return "".concat(k, " {").concat(icu.cases[k].visit(_this74), "}");
            });
            return "{".concat(icu.expression, ", ").concat(icu.type, ", ").concat(strCases.join(', '), "}");
          }
        }, {
          key: "visitTagPlaceholder",
          value: function visitTagPlaceholder(ph, context) {
            var _this75 = this;

            return ph.isVoid ? "<ph tag name=\"".concat(ph.startName, "\"/>") : "<ph tag name=\"".concat(ph.startName, "\">").concat(ph.children.map(function (child) {
              return child.visit(_this75);
            }).join(', '), "</ph name=\"").concat(ph.closeName, "\">");
          }
        }, {
          key: "visitPlaceholder",
          value: function visitPlaceholder(ph, context) {
            return ph.value ? "<ph name=\"".concat(ph.name, "\">").concat(ph.value, "</ph>") : "<ph name=\"".concat(ph.name, "\"/>");
          }
        }, {
          key: "visitIcuPlaceholder",
          value: function visitIcuPlaceholder(ph, context) {
            return "<ph icu name=\"".concat(ph.name, "\">").concat(ph.value.visit(this), "</ph>");
          }
        }]);

        return _SerializerVisitor;
      }();

      var serializerVisitor = new _SerializerVisitor();

      function serializeNodes(nodes) {
        return nodes.map(function (a) {
          return a.visit(serializerVisitor, null);
        });
      }
      /**
       * Serialize the i18n ast to something xml-like in order to generate an UID.
       *
       * Ignore the ICU expressions so that message IDs stays identical if only the expression changes.
       *
       * @internal
       */


      var _SerializerIgnoreIcuExpVisitor = /*#__PURE__*/function (_SerializerVisitor2) {
        _inherits(_SerializerIgnoreIcuExpVisitor, _SerializerVisitor2);

        var _super48 = _createSuper(_SerializerIgnoreIcuExpVisitor);

        function _SerializerIgnoreIcuExpVisitor() {
          _classCallCheck(this, _SerializerIgnoreIcuExpVisitor);

          return _super48.apply(this, arguments);
        }

        _createClass(_SerializerIgnoreIcuExpVisitor, [{
          key: "visitIcu",
          value: function visitIcu(icu, context) {
            var _this76 = this;

            var strCases = Object.keys(icu.cases).map(function (k) {
              return "".concat(k, " {").concat(icu.cases[k].visit(_this76), "}");
            }); // Do not take the expression into account

            return "{".concat(icu.type, ", ").concat(strCases.join(', '), "}");
          }
        }]);

        return _SerializerIgnoreIcuExpVisitor;
      }(_SerializerVisitor);
      /**
       * Compute the SHA1 of the given string
       *
       * see https://csrc.nist.gov/publications/fips/fips180-4/fips-180-4.pdf
       *
       * WARNING: this function has not been designed not tested with security in mind.
       *          DO NOT USE IT IN A SECURITY SENSITIVE CONTEXT.
       */


      function sha1(str) {
        var utf8 = utf8Encode(str);
        var words32 = bytesToWords32(utf8, Endian.Big);
        var len = utf8.length * 8;
        var w = newArray(80);
        var a = 0x67452301,
            b = 0xefcdab89,
            c = 0x98badcfe,
            d = 0x10325476,
            e = 0xc3d2e1f0;
        words32[len >> 5] |= 0x80 << 24 - len % 32;
        words32[(len + 64 >> 9 << 4) + 15] = len;

        for (var i = 0; i < words32.length; i += 16) {
          var h0 = a,
              h1 = b,
              h2 = c,
              h3 = d,
              h4 = e;

          for (var j = 0; j < 80; j++) {
            if (j < 16) {
              w[j] = words32[i + j];
            } else {
              w[j] = rol32(w[j - 3] ^ w[j - 8] ^ w[j - 14] ^ w[j - 16], 1);
            }

            var fkVal = fk(j, b, c, d);
            var f = fkVal[0];
            var k = fkVal[1];
            var temp = [rol32(a, 5), f, e, k, w[j]].reduce(add32);
            e = d;
            d = c;
            c = rol32(b, 30);
            b = a;
            a = temp;
          }

          a = add32(a, h0);
          b = add32(b, h1);
          c = add32(c, h2);
          d = add32(d, h3);
          e = add32(e, h4);
        }

        return bytesToHexString(words32ToByteString([a, b, c, d, e]));
      }

      function fk(index, b, c, d) {
        if (index < 20) {
          return [b & c | ~b & d, 0x5a827999];
        }

        if (index < 40) {
          return [b ^ c ^ d, 0x6ed9eba1];
        }

        if (index < 60) {
          return [b & c | b & d | c & d, 0x8f1bbcdc];
        }

        return [b ^ c ^ d, 0xca62c1d6];
      }
      /**
       * Compute the fingerprint of the given string
       *
       * The output is 64 bit number encoded as a decimal string
       *
       * based on:
       * https://github.com/google/closure-compiler/blob/master/src/com/google/javascript/jscomp/GoogleJsMessageIdGenerator.java
       */


      function fingerprint(str) {
        var utf8 = utf8Encode(str);
        var hi = hash32(utf8, 0);
        var lo = hash32(utf8, 102072);

        if (hi == 0 && (lo == 0 || lo == 1)) {
          hi = hi ^ 0x130f9bef;
          lo = lo ^ -0x6b5f56d8;
        }

        return [hi, lo];
      }

      function computeMsgId(msg) {
        var meaning = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
        var msgFingerprint = fingerprint(msg);

        if (meaning) {
          var meaningFingerprint = fingerprint(meaning);
          msgFingerprint = add64(rol64(msgFingerprint, 1), meaningFingerprint);
        }

        var hi = msgFingerprint[0];
        var lo = msgFingerprint[1];
        return wordsToDecimalString(hi & 0x7fffffff, lo);
      }

      function hash32(bytes, c) {
        var a = 0x9e3779b9,
            b = 0x9e3779b9;
        var i;
        var len = bytes.length;

        for (i = 0; i + 12 <= len; i += 12) {
          a = add32(a, wordAt(bytes, i, Endian.Little));
          b = add32(b, wordAt(bytes, i + 4, Endian.Little));
          c = add32(c, wordAt(bytes, i + 8, Endian.Little));
          var res = mix(a, b, c);
          a = res[0], b = res[1], c = res[2];
        }

        a = add32(a, wordAt(bytes, i, Endian.Little));
        b = add32(b, wordAt(bytes, i + 4, Endian.Little)); // the first byte of c is reserved for the length

        c = add32(c, len);
        c = add32(c, wordAt(bytes, i + 8, Endian.Little) << 8);
        return mix(a, b, c)[2];
      } // clang-format off


      function mix(a, b, c) {
        a = sub32(a, b);
        a = sub32(a, c);
        a ^= c >>> 13;
        b = sub32(b, c);
        b = sub32(b, a);
        b ^= a << 8;
        c = sub32(c, a);
        c = sub32(c, b);
        c ^= b >>> 13;
        a = sub32(a, b);
        a = sub32(a, c);
        a ^= c >>> 12;
        b = sub32(b, c);
        b = sub32(b, a);
        b ^= a << 16;
        c = sub32(c, a);
        c = sub32(c, b);
        c ^= b >>> 5;
        a = sub32(a, b);
        a = sub32(a, c);
        a ^= c >>> 3;
        b = sub32(b, c);
        b = sub32(b, a);
        b ^= a << 10;
        c = sub32(c, a);
        c = sub32(c, b);
        c ^= b >>> 15;
        return [a, b, c];
      } // clang-format on
      // Utils


      var Endian;

      (function (Endian) {
        Endian[Endian["Little"] = 0] = "Little";
        Endian[Endian["Big"] = 1] = "Big";
      })(Endian || (Endian = {}));

      function add32(a, b) {
        return add32to64(a, b)[1];
      }

      function add32to64(a, b) {
        var low = (a & 0xffff) + (b & 0xffff);
        var high = (a >>> 16) + (b >>> 16) + (low >>> 16);
        return [high >>> 16, high << 16 | low & 0xffff];
      }

      function add64(a, b) {
        var ah = a[0],
            al = a[1];
        var bh = b[0],
            bl = b[1];
        var result = add32to64(al, bl);
        var carry = result[0];
        var l = result[1];
        var h = add32(add32(ah, bh), carry);
        return [h, l];
      }

      function sub32(a, b) {
        var low = (a & 0xffff) - (b & 0xffff);
        var high = (a >> 16) - (b >> 16) + (low >> 16);
        return high << 16 | low & 0xffff;
      } // Rotate a 32b number left `count` position


      function rol32(a, count) {
        return a << count | a >>> 32 - count;
      } // Rotate a 64b number left `count` position


      function rol64(num, count) {
        var hi = num[0],
            lo = num[1];
        var h = hi << count | lo >>> 32 - count;
        var l = lo << count | hi >>> 32 - count;
        return [h, l];
      }

      function bytesToWords32(bytes, endian) {
        var size = bytes.length + 3 >>> 2;
        var words32 = [];

        for (var i = 0; i < size; i++) {
          words32[i] = wordAt(bytes, i * 4, endian);
        }

        return words32;
      }

      function byteAt(bytes, index) {
        return index >= bytes.length ? 0 : bytes[index];
      }

      function wordAt(bytes, index, endian) {
        var word = 0;

        if (endian === Endian.Big) {
          for (var i = 0; i < 4; i++) {
            word += byteAt(bytes, index + i) << 24 - 8 * i;
          }
        } else {
          for (var _i5 = 0; _i5 < 4; _i5++) {
            word += byteAt(bytes, index + _i5) << 8 * _i5;
          }
        }

        return word;
      }

      function words32ToByteString(words32) {
        return words32.reduce(function (bytes, word) {
          return bytes.concat(word32ToByteString(word));
        }, []);
      }

      function word32ToByteString(word) {
        var bytes = [];

        for (var i = 0; i < 4; i++) {
          bytes.push(word >>> 8 * (3 - i) & 0xff);
        }

        return bytes;
      }

      function bytesToHexString(bytes) {
        var hex = '';

        for (var i = 0; i < bytes.length; i++) {
          var b = byteAt(bytes, i);
          hex += (b >>> 4).toString(16) + (b & 0x0f).toString(16);
        }

        return hex.toLowerCase();
      }
      /**
       * Create a shared exponentiation pool for base-256 computations. This shared pool provides memoized
       * power-of-256 results with memoized power-of-two computations for efficient multiplication.
       *
       * For our purposes, this can be safely stored as a global without memory concerns. The reason is
       * that we encode two words, so only need the 0th (for the low word) and 4th (for the high word)
       * exponent.
       */


      var base256 = new BigIntExponentiation(256);
      /**
       * Represents two 32-bit words as a single decimal number. This requires a big integer storage
       * model as JS numbers are not accurate enough to represent the 64-bit number.
       *
       * Based on https://www.danvk.org/hex2dec.html
       */

      function wordsToDecimalString(hi, lo) {
        // Encode the four bytes in lo in the lower digits of the decimal number.
        // Note: the multiplication results in lo itself but represented by a big integer using its
        // decimal digits.
        var decimal = base256.toThePowerOf(0).multiplyBy(lo); // Encode the four bytes in hi above the four lo bytes. lo is a maximum of (2^8)^4, which is why
        // this multiplication factor is applied.

        base256.toThePowerOf(4).multiplyByAndAddTo(hi, decimal);
        return decimal.toString();
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      var Serializer = /*#__PURE__*/function () {
        function Serializer() {
          _classCallCheck(this, Serializer);
        }

        _createClass(Serializer, [{
          key: "createNameMapper",
          value: // Creates a name mapper, see `PlaceholderMapper`
          // Returning `null` means that no name mapping is used.
          function createNameMapper(message) {
            return null;
          }
        }]);

        return Serializer;
      }();
      /**
       * A simple mapper that take a function to transform an internal name to a public name
       */


      var SimplePlaceholderMapper = /*#__PURE__*/function (_RecurseVisitor) {
        _inherits(SimplePlaceholderMapper, _RecurseVisitor);

        var _super49 = _createSuper(SimplePlaceholderMapper);

        // create a mapping from the message
        function SimplePlaceholderMapper(message, mapName) {
          var _this77;

          _classCallCheck(this, SimplePlaceholderMapper);

          _this77 = _super49.call(this);
          _this77.mapName = mapName;
          _this77.internalToPublic = {};
          _this77.publicToNextId = {};
          _this77.publicToInternal = {};
          message.nodes.forEach(function (node) {
            return node.visit(_assertThisInitialized(_this77));
          });
          return _this77;
        }

        _createClass(SimplePlaceholderMapper, [{
          key: "toPublicName",
          value: function toPublicName(internalName) {
            return this.internalToPublic.hasOwnProperty(internalName) ? this.internalToPublic[internalName] : null;
          }
        }, {
          key: "toInternalName",
          value: function toInternalName(publicName) {
            return this.publicToInternal.hasOwnProperty(publicName) ? this.publicToInternal[publicName] : null;
          }
        }, {
          key: "visitText",
          value: function visitText(text, context) {
            return null;
          }
        }, {
          key: "visitTagPlaceholder",
          value: function visitTagPlaceholder(ph, context) {
            this.visitPlaceholderName(ph.startName);

            _get(_getPrototypeOf(SimplePlaceholderMapper.prototype), "visitTagPlaceholder", this).call(this, ph, context);

            this.visitPlaceholderName(ph.closeName);
          }
        }, {
          key: "visitPlaceholder",
          value: function visitPlaceholder(ph, context) {
            this.visitPlaceholderName(ph.name);
          }
        }, {
          key: "visitIcuPlaceholder",
          value: function visitIcuPlaceholder(ph, context) {
            this.visitPlaceholderName(ph.name);
          } // XMB placeholders could only contains A-Z, 0-9 and _

        }, {
          key: "visitPlaceholderName",
          value: function visitPlaceholderName(internalName) {
            if (!internalName || this.internalToPublic.hasOwnProperty(internalName)) {
              return;
            }

            var publicName = this.mapName(internalName);

            if (this.publicToInternal.hasOwnProperty(publicName)) {
              // Create a new XMB when it has already been used
              var nextId = this.publicToNextId[publicName];
              this.publicToNextId[publicName] = nextId + 1;
              publicName = "".concat(publicName, "_").concat(nextId);
            } else {
              this.publicToNextId[publicName] = 1;
            }

            this.internalToPublic[internalName] = publicName;
            this.publicToInternal[publicName] = internalName;
          }
        }]);

        return SimplePlaceholderMapper;
      }(RecurseVisitor);
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      var _Visitor = /*#__PURE__*/function () {
        function _Visitor() {
          _classCallCheck(this, _Visitor);
        }

        _createClass(_Visitor, [{
          key: "visitTag",
          value: function visitTag(tag) {
            var _this78 = this;

            var strAttrs = this._serializeAttributes(tag.attrs);

            if (tag.children.length == 0) {
              return "<".concat(tag.name).concat(strAttrs, "/>");
            }

            var strChildren = tag.children.map(function (node) {
              return node.visit(_this78);
            });
            return "<".concat(tag.name).concat(strAttrs, ">").concat(strChildren.join(''), "</").concat(tag.name, ">");
          }
        }, {
          key: "visitText",
          value: function visitText(text) {
            return text.value;
          }
        }, {
          key: "visitDeclaration",
          value: function visitDeclaration(decl) {
            return "<?xml".concat(this._serializeAttributes(decl.attrs), " ?>");
          }
        }, {
          key: "_serializeAttributes",
          value: function _serializeAttributes(attrs) {
            var strAttrs = Object.keys(attrs).map(function (name) {
              return "".concat(name, "=\"").concat(attrs[name], "\"");
            }).join(' ');
            return strAttrs.length > 0 ? ' ' + strAttrs : '';
          }
        }, {
          key: "visitDoctype",
          value: function visitDoctype(doctype) {
            return "<!DOCTYPE ".concat(doctype.rootTag, " [\n").concat(doctype.dtd, "\n]>");
          }
        }]);

        return _Visitor;
      }();

      var _visitor = new _Visitor();

      function serialize(nodes) {
        return nodes.map(function (node) {
          return node.visit(_visitor);
        }).join('');
      }

      var Declaration = /*#__PURE__*/function () {
        function Declaration(unescapedAttrs) {
          var _this79 = this;

          _classCallCheck(this, Declaration);

          this.attrs = {};
          Object.keys(unescapedAttrs).forEach(function (k) {
            _this79.attrs[k] = escapeXml(unescapedAttrs[k]);
          });
        }

        _createClass(Declaration, [{
          key: "visit",
          value: function visit(visitor) {
            return visitor.visitDeclaration(this);
          }
        }]);

        return Declaration;
      }();

      var Doctype = /*#__PURE__*/function () {
        function Doctype(rootTag, dtd) {
          _classCallCheck(this, Doctype);

          this.rootTag = rootTag;
          this.dtd = dtd;
        }

        _createClass(Doctype, [{
          key: "visit",
          value: function visit(visitor) {
            return visitor.visitDoctype(this);
          }
        }]);

        return Doctype;
      }();

      var Tag = /*#__PURE__*/function () {
        function Tag(name) {
          var _this80 = this;

          var unescapedAttrs = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
          var children = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];

          _classCallCheck(this, Tag);

          this.name = name;
          this.children = children;
          this.attrs = {};
          Object.keys(unescapedAttrs).forEach(function (k) {
            _this80.attrs[k] = escapeXml(unescapedAttrs[k]);
          });
        }

        _createClass(Tag, [{
          key: "visit",
          value: function visit(visitor) {
            return visitor.visitTag(this);
          }
        }]);

        return Tag;
      }();

      var Text$2 = /*#__PURE__*/function () {
        function Text$2(unescapedValue) {
          _classCallCheck(this, Text$2);

          this.value = escapeXml(unescapedValue);
        }

        _createClass(Text$2, [{
          key: "visit",
          value: function visit(visitor) {
            return visitor.visitText(this);
          }
        }]);

        return Text$2;
      }();

      var CR = /*#__PURE__*/function (_Text$) {
        _inherits(CR, _Text$);

        var _super50 = _createSuper(CR);

        function CR() {
          var ws = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;

          _classCallCheck(this, CR);

          return _super50.call(this, "\n".concat(new Array(ws + 1).join(' ')));
        }

        return CR;
      }(Text$2);

      var _ESCAPED_CHARS = [[/&/g, '&amp;'], [/"/g, '&quot;'], [/'/g, '&apos;'], [/</g, '&lt;'], [/>/g, '&gt;']]; // Escape `_ESCAPED_CHARS` characters in the given text with encoded entities

      function escapeXml(text) {
        return _ESCAPED_CHARS.reduce(function (text, entry) {
          return text.replace(entry[0], entry[1]);
        }, text);
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      var _MESSAGES_TAG = 'messagebundle';
      var _MESSAGE_TAG = 'msg';
      var _PLACEHOLDER_TAG = 'ph';
      var _EXAMPLE_TAG = 'ex';
      var _SOURCE_TAG = 'source';
      var _DOCTYPE = "<!ELEMENT messagebundle (msg)*>\n<!ATTLIST messagebundle class CDATA #IMPLIED>\n\n<!ELEMENT msg (#PCDATA|ph|source)*>\n<!ATTLIST msg id CDATA #IMPLIED>\n<!ATTLIST msg seq CDATA #IMPLIED>\n<!ATTLIST msg name CDATA #IMPLIED>\n<!ATTLIST msg desc CDATA #IMPLIED>\n<!ATTLIST msg meaning CDATA #IMPLIED>\n<!ATTLIST msg obsolete (obsolete) #IMPLIED>\n<!ATTLIST msg xml:space (default|preserve) \"default\">\n<!ATTLIST msg is_hidden CDATA #IMPLIED>\n\n<!ELEMENT source (#PCDATA)>\n\n<!ELEMENT ph (#PCDATA|ex)*>\n<!ATTLIST ph name CDATA #REQUIRED>\n\n<!ELEMENT ex (#PCDATA)>";

      var Xmb = /*#__PURE__*/function (_Serializer) {
        _inherits(Xmb, _Serializer);

        var _super51 = _createSuper(Xmb);

        function Xmb() {
          _classCallCheck(this, Xmb);

          return _super51.apply(this, arguments);
        }

        _createClass(Xmb, [{
          key: "write",
          value: function write(messages, locale) {
            var exampleVisitor = new ExampleVisitor();
            var visitor = new _Visitor$1();
            var rootNode = new Tag(_MESSAGES_TAG);
            messages.forEach(function (message) {
              var attrs = {
                id: message.id
              };

              if (message.description) {
                attrs['desc'] = message.description;
              }

              if (message.meaning) {
                attrs['meaning'] = message.meaning;
              }

              var sourceTags = [];
              message.sources.forEach(function (source) {
                sourceTags.push(new Tag(_SOURCE_TAG, {}, [new Text$2("".concat(source.filePath, ":").concat(source.startLine).concat(source.endLine !== source.startLine ? ',' + source.endLine : ''))]));
              });
              rootNode.children.push(new CR(2), new Tag(_MESSAGE_TAG, attrs, [].concat(sourceTags, _toConsumableArray(visitor.serialize(message.nodes)))));
            });
            rootNode.children.push(new CR());
            return serialize([new Declaration({
              version: '1.0',
              encoding: 'UTF-8'
            }), new CR(), new Doctype(_MESSAGES_TAG, _DOCTYPE), new CR(), exampleVisitor.addDefaultExamples(rootNode), new CR()]);
          }
        }, {
          key: "load",
          value: function load(content, url) {
            throw new Error('Unsupported');
          }
        }, {
          key: "digest",
          value: function digest(message) {
            return digest$1(message);
          }
        }, {
          key: "createNameMapper",
          value: function createNameMapper(message) {
            return new SimplePlaceholderMapper(message, toPublicName);
          }
        }]);

        return Xmb;
      }(Serializer);

      var _Visitor$1 = /*#__PURE__*/function () {
        function _Visitor$1() {
          _classCallCheck(this, _Visitor$1);
        }

        _createClass(_Visitor$1, [{
          key: "visitText",
          value: function visitText(text, context) {
            return [new Text$2(text.value)];
          }
        }, {
          key: "visitContainer",
          value: function visitContainer(container, context) {
            var _this81 = this;

            var nodes = [];
            container.children.forEach(function (node) {
              return nodes.push.apply(nodes, _toConsumableArray(node.visit(_this81)));
            });
            return nodes;
          }
        }, {
          key: "visitIcu",
          value: function visitIcu(icu, context) {
            var _this82 = this;

            var nodes = [new Text$2("{".concat(icu.expressionPlaceholder, ", ").concat(icu.type, ", "))];
            Object.keys(icu.cases).forEach(function (c) {
              nodes.push.apply(nodes, [new Text$2("".concat(c, " {"))].concat(_toConsumableArray(icu.cases[c].visit(_this82)), [new Text$2("} ")]));
            });
            nodes.push(new Text$2("}"));
            return nodes;
          }
        }, {
          key: "visitTagPlaceholder",
          value: function visitTagPlaceholder(ph, context) {
            var startTagAsText = new Text$2("<".concat(ph.tag, ">"));
            var startEx = new Tag(_EXAMPLE_TAG, {}, [startTagAsText]); // TC requires PH to have a non empty EX, and uses the text node to show the "original" value.

            var startTagPh = new Tag(_PLACEHOLDER_TAG, {
              name: ph.startName
            }, [startEx, startTagAsText]);

            if (ph.isVoid) {
              // void tags have no children nor closing tags
              return [startTagPh];
            }

            var closeTagAsText = new Text$2("</".concat(ph.tag, ">"));
            var closeEx = new Tag(_EXAMPLE_TAG, {}, [closeTagAsText]); // TC requires PH to have a non empty EX, and uses the text node to show the "original" value.

            var closeTagPh = new Tag(_PLACEHOLDER_TAG, {
              name: ph.closeName
            }, [closeEx, closeTagAsText]);
            return [startTagPh].concat(_toConsumableArray(this.serialize(ph.children)), [closeTagPh]);
          }
        }, {
          key: "visitPlaceholder",
          value: function visitPlaceholder(ph, context) {
            var interpolationAsText = new Text$2("{{".concat(ph.value, "}}")); // Example tag needs to be not-empty for TC.

            var exTag = new Tag(_EXAMPLE_TAG, {}, [interpolationAsText]);
            return [// TC requires PH to have a non empty EX, and uses the text node to show the "original" value.
            new Tag(_PLACEHOLDER_TAG, {
              name: ph.name
            }, [exTag, interpolationAsText])];
          }
        }, {
          key: "visitIcuPlaceholder",
          value: function visitIcuPlaceholder(ph, context) {
            var icuExpression = ph.value.expression;
            var icuType = ph.value.type;
            var icuCases = Object.keys(ph.value.cases).map(function (value) {
              return value + ' {...}';
            }).join(' ');
            var icuAsText = new Text$2("{".concat(icuExpression, ", ").concat(icuType, ", ").concat(icuCases, "}"));
            var exTag = new Tag(_EXAMPLE_TAG, {}, [icuAsText]);
            return [// TC requires PH to have a non empty EX, and uses the text node to show the "original" value.
            new Tag(_PLACEHOLDER_TAG, {
              name: ph.name
            }, [exTag, icuAsText])];
          }
        }, {
          key: "serialize",
          value: function serialize(nodes) {
            var _ref10,
                _this83 = this;

            return (_ref10 = []).concat.apply(_ref10, _toConsumableArray(nodes.map(function (node) {
              return node.visit(_this83);
            })));
          }
        }]);

        return _Visitor$1;
      }();

      function digest$1(message) {
        return decimalDigest(message);
      } // TC requires at least one non-empty example on placeholders


      var ExampleVisitor = /*#__PURE__*/function () {
        function ExampleVisitor() {
          _classCallCheck(this, ExampleVisitor);
        }

        _createClass(ExampleVisitor, [{
          key: "addDefaultExamples",
          value: function addDefaultExamples(node) {
            node.visit(this);
            return node;
          }
        }, {
          key: "visitTag",
          value: function visitTag(tag) {
            var _this84 = this;

            if (tag.name === _PLACEHOLDER_TAG) {
              if (!tag.children || tag.children.length == 0) {
                var exText = new Text$2(tag.attrs['name'] || '...');
                tag.children = [new Tag(_EXAMPLE_TAG, {}, [exText])];
              }
            } else if (tag.children) {
              tag.children.forEach(function (node) {
                return node.visit(_this84);
              });
            }
          }
        }, {
          key: "visitText",
          value: function visitText(text) {}
        }, {
          key: "visitDeclaration",
          value: function visitDeclaration(decl) {}
        }, {
          key: "visitDoctype",
          value: function visitDoctype(doctype) {}
        }]);

        return ExampleVisitor;
      }(); // XMB/XTB placeholders can only contain A-Z, 0-9 and _


      function toPublicName(internalName) {
        return internalName.toUpperCase().replace(/[^A-Z0-9_]/g, '_');
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /* Closure variables holding messages must be named `MSG_[A-Z0-9]+` */


      var CLOSURE_TRANSLATION_VAR_PREFIX = 'MSG_';
      /**
       * Prefix for non-`goog.getMsg` i18n-related vars.
       * Note: the prefix uses lowercase characters intentionally due to a Closure behavior that
       * considers variables like `I18N_0` as constants and throws an error when their value changes.
       */

      var TRANSLATION_VAR_PREFIX = 'i18n_';
      /** Name of the i18n attributes **/

      var I18N_ATTR = 'i18n';
      var I18N_ATTR_PREFIX = 'i18n-';
      /** Prefix of var expressions used in ICUs */

      var I18N_ICU_VAR_PREFIX = 'VAR_';
      /** Prefix of ICU expressions for post processing */

      var I18N_ICU_MAPPING_PREFIX = 'I18N_EXP_';
      /** Placeholder wrapper for i18n expressions **/

      var I18N_PLACEHOLDER_SYMBOL = '�';

      function isI18nAttribute(name) {
        return name === I18N_ATTR || name.startsWith(I18N_ATTR_PREFIX);
      }

      function isI18nRootNode(meta) {
        return meta instanceof Message;
      }

      function isSingleI18nIcu(meta) {
        return isI18nRootNode(meta) && meta.nodes.length === 1 && meta.nodes[0] instanceof Icu$1;
      }

      function hasI18nMeta(node) {
        return !!node.i18n;
      }

      function hasI18nAttrs(element) {
        return element.attrs.some(function (attr) {
          return isI18nAttribute(attr.name);
        });
      }

      function icuFromI18nMessage(message) {
        return message.nodes[0];
      }

      function wrapI18nPlaceholder(content) {
        var contextId = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
        var blockId = contextId > 0 ? ":".concat(contextId) : '';
        return "".concat(I18N_PLACEHOLDER_SYMBOL).concat(content).concat(blockId).concat(I18N_PLACEHOLDER_SYMBOL);
      }

      function assembleI18nBoundString(strings) {
        var bindingStartIndex = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
        var contextId = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
        if (!strings.length) return '';
        var acc = '';
        var lastIdx = strings.length - 1;

        for (var i = 0; i < lastIdx; i++) {
          acc += "".concat(strings[i]).concat(wrapI18nPlaceholder(bindingStartIndex + i, contextId));
        }

        acc += strings[lastIdx];
        return acc;
      }

      function getSeqNumberGenerator() {
        var startsAt = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
        var current = startsAt;
        return function () {
          return current++;
        };
      }

      function placeholdersToParams(placeholders) {
        var params = {};
        placeholders.forEach(function (values, key) {
          params[key] = literal(values.length > 1 ? "[".concat(values.join('|'), "]") : values[0]);
        });
        return params;
      }

      function updatePlaceholderMap(map, name) {
        var current = map.get(name) || [];

        for (var _len2 = arguments.length, values = new Array(_len2 > 2 ? _len2 - 2 : 0), _key3 = 2; _key3 < _len2; _key3++) {
          values[_key3 - 2] = arguments[_key3];
        }

        current.push.apply(current, values);
        map.set(name, current);
      }

      function assembleBoundTextPlaceholders(meta) {
        var bindingStartIndex = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
        var contextId = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
        var startIdx = bindingStartIndex;
        var placeholders = new Map();
        var node = meta instanceof Message ? meta.nodes.find(function (node) {
          return node instanceof Container;
        }) : meta;

        if (node) {
          node.children.filter(function (child) {
            return child instanceof Placeholder;
          }).forEach(function (child, idx) {
            var content = wrapI18nPlaceholder(startIdx + idx, contextId);
            updatePlaceholderMap(placeholders, child.name, content);
          });
        }

        return placeholders;
      }
      /**
       * Format the placeholder names in a map of placeholders to expressions.
       *
       * The placeholder names are converted from "internal" format (e.g. `START_TAG_DIV_1`) to "external"
       * format (e.g. `startTagDiv_1`).
       *
       * @param params A map of placeholder names to expressions.
       * @param useCamelCase whether to camelCase the placeholder name when formatting.
       * @returns A new map of formatted placeholder names to expressions.
       */


      function i18nFormatPlaceholderNames() {
        var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        var useCamelCase = arguments.length > 1 ? arguments[1] : undefined;
        var _params = {};

        if (params && Object.keys(params).length) {
          Object.keys(params).forEach(function (key) {
            return _params[formatI18nPlaceholderName(key, useCamelCase)] = params[key];
          });
        }

        return _params;
      }
      /**
       * Converts internal placeholder names to public-facing format
       * (for example to use in goog.getMsg call).
       * Example: `START_TAG_DIV_1` is converted to `startTagDiv_1`.
       *
       * @param name The placeholder name that should be formatted
       * @returns Formatted placeholder name
       */


      function formatI18nPlaceholderName(name) {
        var useCamelCase = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
        var publicName = toPublicName(name);

        if (!useCamelCase) {
          return publicName;
        }

        var chunks = publicName.split('_');

        if (chunks.length === 1) {
          // if no "_" found - just lowercase the value
          return name.toLowerCase();
        }

        var postfix; // eject last element if it's a number

        if (/^\d+$/.test(chunks[chunks.length - 1])) {
          postfix = chunks.pop();
        }

        var raw = chunks.shift().toLowerCase();

        if (chunks.length) {
          raw += chunks.map(function (c) {
            return c.charAt(0).toUpperCase() + c.slice(1).toLowerCase();
          }).join('');
        }

        return postfix ? "".concat(raw, "_").concat(postfix) : raw;
      }
      /**
       * Generates a prefix for translation const name.
       *
       * @param extra Additional local prefix that should be injected into translation var name
       * @returns Complete translation const prefix
       */


      function getTranslationConstPrefix(extra) {
        return "".concat(CLOSURE_TRANSLATION_VAR_PREFIX).concat(extra).toUpperCase();
      }
      /**
       * Generate AST to declare a variable. E.g. `var I18N_1;`.
       * @param variable the name of the variable to declare.
       */


      function declareI18nVariable(variable) {
        return new DeclareVarStmt(variable.name, undefined, INFERRED_TYPE, undefined, variable.sourceSpan);
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * Checks whether an object key contains potentially unsafe chars, thus the key should be wrapped in
       * quotes. Note: we do not wrap all keys into quotes, as it may have impact on minification and may
       * bot work in some cases when object keys are mangled by minifier.
       *
       * TODO(FW-1136): this is a temporary solution, we need to come up with a better way of working with
       * inputs that contain potentially unsafe chars.
       */


      var UNSAFE_OBJECT_KEY_NAME_REGEXP = /[-.]/;
      /** Name of the temporary to use during data binding */

      var TEMPORARY_NAME = '_t';
      /** Name of the context parameter passed into a template function */

      var CONTEXT_NAME = 'ctx';
      /** Name of the RenderFlag passed into a template function */

      var RENDER_FLAGS = 'rf';
      /** The prefix reference variables */

      var REFERENCE_PREFIX = '_r';
      /** The name of the implicit context reference */

      var IMPLICIT_REFERENCE = '$implicit';
      /** Non bindable attribute name **/

      var NON_BINDABLE_ATTR = 'ngNonBindable';
      /**
       * Creates an allocator for a temporary variable.
       *
       * A variable declaration is added to the statements the first time the allocator is invoked.
       */

      function temporaryAllocator(statements, name) {
        var temp = null;
        return function () {
          if (!temp) {
            statements.push(new DeclareVarStmt(TEMPORARY_NAME, undefined, DYNAMIC_TYPE));
            temp = variable(name);
          }

          return temp;
        };
      }

      function unsupported(feature) {
        if (this) {
          throw new Error("Builder ".concat(this.constructor.name, " doesn't support ").concat(feature, " yet"));
        }

        throw new Error("Feature ".concat(feature, " is not supported yet"));
      }

      function invalid$1(arg) {
        throw new Error("Invalid state: Visitor ".concat(this.constructor.name, " doesn't handle ").concat(arg.constructor.name));
      }

      function asLiteral(value) {
        if (Array.isArray(value)) {
          return literalArr(value.map(asLiteral));
        }

        return literal(value, INFERRED_TYPE);
      }

      function conditionallyCreateMapObjectLiteral(keys, keepDeclared) {
        if (Object.getOwnPropertyNames(keys).length > 0) {
          return mapToExpression(keys, keepDeclared);
        }

        return null;
      }

      function mapToExpression(map, keepDeclared) {
        return literalMap(Object.getOwnPropertyNames(map).map(function (key) {
          // canonical syntax: `dirProp: publicProp`
          // if there is no `:`, use dirProp = elProp
          var value = map[key];
          var declaredName;
          var publicName;
          var minifiedName;
          var needsDeclaredName;

          if (Array.isArray(value)) {
            var _value = _slicedToArray(value, 2);

            publicName = _value[0];
            declaredName = _value[1];
            minifiedName = key;
            needsDeclaredName = publicName !== declaredName;
          } else {
            var _splitAtColon = splitAtColon(key, [key, value]);

            var _splitAtColon2 = _slicedToArray(_splitAtColon, 2);

            declaredName = _splitAtColon2[0];
            publicName = _splitAtColon2[1];
            minifiedName = declaredName; // Only include the declared name if extracted from the key, i.e. the key contains a colon.
            // Otherwise the declared name should be omitted even if it is different from the public name,
            // as it may have already been minified.

            needsDeclaredName = publicName !== declaredName && key.includes(':');
          }

          return {
            key: minifiedName,
            // put quotes around keys that contain potentially unsafe characters
            quoted: UNSAFE_OBJECT_KEY_NAME_REGEXP.test(minifiedName),
            value: keepDeclared && needsDeclaredName ? literalArr([asLiteral(publicName), asLiteral(declaredName)]) : asLiteral(publicName)
          };
        }));
      }
      /**
       *  Remove trailing null nodes as they are implied.
       */


      function trimTrailingNulls(parameters) {
        while (isNull(parameters[parameters.length - 1])) {
          parameters.pop();
        }

        return parameters;
      }

      function getQueryPredicate(query, constantPool) {
        if (Array.isArray(query.predicate)) {
          var predicate = [];
          query.predicate.forEach(function (selector) {
            // Each item in predicates array may contain strings with comma-separated refs
            // (for ex. 'ref, ref1, ..., refN'), thus we extract individual refs and store them
            // as separate array entities
            var selectors = selector.split(',').map(function (token) {
              return literal(token.trim());
            });
            predicate.push.apply(predicate, _toConsumableArray(selectors));
          });
          return constantPool.getConstLiteral(literalArr(predicate), true);
        } else {
          return query.predicate;
        }
      }
      /**
       * A representation for an object literal used during codegen of definition objects. The generic
       * type `T` allows to reference a documented type of the generated structure, such that the
       * property names that are set can be resolved to their documented declaration.
       */


      var DefinitionMap = /*#__PURE__*/function () {
        function DefinitionMap() {
          _classCallCheck(this, DefinitionMap);

          this.values = [];
        }

        _createClass(DefinitionMap, [{
          key: "set",
          value: function set(key, value) {
            if (value) {
              this.values.push({
                key: key,
                value: value,
                quoted: false
              });
            }
          }
        }, {
          key: "toLiteralMap",
          value: function toLiteralMap() {
            return literalMap(this.values);
          }
        }]);

        return DefinitionMap;
      }();
      /**
       * Extract a map of properties to values for a given element or template node, which can be used
       * by the directive matching machinery.
       *
       * @param elOrTpl the element or template in question
       * @return an object set up for directive matching. For attributes on the element/template, this
       * object maps a property name to its (static) value. For any bindings, this map simply maps the
       * property name to an empty string.
       */


      function getAttrsForDirectiveMatching(elOrTpl) {
        var attributesMap = {};

        if (elOrTpl instanceof Template && elOrTpl.tagName !== 'ng-template') {
          elOrTpl.templateAttrs.forEach(function (a) {
            return attributesMap[a.name] = '';
          });
        } else {
          elOrTpl.attributes.forEach(function (a) {
            if (!isI18nAttribute(a.name)) {
              attributesMap[a.name] = a.value;
            }
          });
          elOrTpl.inputs.forEach(function (i) {
            attributesMap[i.name] = '';
          });
          elOrTpl.outputs.forEach(function (o) {
            attributesMap[o.name] = '';
          });
        }

        return attributesMap;
      }
      /** Returns a call expression to a chained instruction, e.g. `property(params[0])(params[1])`. */


      function chainedInstruction(reference, calls, span) {
        var expression = importExpr(reference, null, span);

        if (calls.length > 0) {
          for (var i = 0; i < calls.length; i++) {
            expression = expression.callFn(calls[i], span);
          }
        } else {
          // Add a blank invocation, in case the `calls` array is empty.
          expression = expression.callFn([], span);
        }

        return expression;
      }
      /**
       * Gets the number of arguments expected to be passed to a generated instruction in the case of
       * interpolation instructions.
       * @param interpolation An interpolation ast
       */


      function getInterpolationArgsLength(interpolation) {
        var expressions = interpolation.expressions,
            strings = interpolation.strings;

        if (expressions.length === 1 && strings.length === 2 && strings[0] === '' && strings[1] === '') {
          // If the interpolation has one interpolated value, but the prefix and suffix are both empty
          // strings, we only pass one argument, to a special instruction like `propertyInterpolate` or
          // `textInterpolate`.
          return 1;
        } else {
          return expressions.length + strings.length;
        }
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      var R3FactoryDelegateType;

      (function (R3FactoryDelegateType) {
        R3FactoryDelegateType[R3FactoryDelegateType["Class"] = 0] = "Class";
        R3FactoryDelegateType[R3FactoryDelegateType["Function"] = 1] = "Function";
        R3FactoryDelegateType[R3FactoryDelegateType["Factory"] = 2] = "Factory";
      })(R3FactoryDelegateType || (R3FactoryDelegateType = {}));

      var R3FactoryTarget;

      (function (R3FactoryTarget) {
        R3FactoryTarget[R3FactoryTarget["Directive"] = 0] = "Directive";
        R3FactoryTarget[R3FactoryTarget["Component"] = 1] = "Component";
        R3FactoryTarget[R3FactoryTarget["Injectable"] = 2] = "Injectable";
        R3FactoryTarget[R3FactoryTarget["Pipe"] = 3] = "Pipe";
        R3FactoryTarget[R3FactoryTarget["NgModule"] = 4] = "NgModule";
      })(R3FactoryTarget || (R3FactoryTarget = {}));
      /**
       * Resolved type of a dependency.
       *
       * Occasionally, dependencies will have special significance which is known statically. In that
       * case the `R3ResolvedDependencyType` informs the factory generator that a particular dependency
       * should be generated specially (usually by calling a special injection function instead of the
       * standard one).
       */


      var R3ResolvedDependencyType;

      (function (R3ResolvedDependencyType) {
        /**
         * A normal token dependency.
         */
        R3ResolvedDependencyType[R3ResolvedDependencyType["Token"] = 0] = "Token";
        /**
         * The dependency is for an attribute.
         *
         * The token expression is a string representing the attribute name.
         */

        R3ResolvedDependencyType[R3ResolvedDependencyType["Attribute"] = 1] = "Attribute";
        /**
         * Injecting the `ChangeDetectorRef` token. Needs special handling when injected into a pipe.
         */

        R3ResolvedDependencyType[R3ResolvedDependencyType["ChangeDetectorRef"] = 2] = "ChangeDetectorRef";
        /**
         * An invalid dependency (no token could be determined). An error should be thrown at runtime.
         */

        R3ResolvedDependencyType[R3ResolvedDependencyType["Invalid"] = 3] = "Invalid";
      })(R3ResolvedDependencyType || (R3ResolvedDependencyType = {}));
      /**
       * Construct a factory function expression for the given `R3FactoryMetadata`.
       */


      function compileFactoryFunction(meta) {
        var t = variable('t');
        var statements = [];
        var ctorDepsType = NONE_TYPE; // The type to instantiate via constructor invocation. If there is no delegated factory, meaning
        // this type is always created by constructor invocation, then this is the type-to-create
        // parameter provided by the user (t) if specified, or the current type if not. If there is a
        // delegated factory (which is used to create the current type) then this is only the type-to-
        // create parameter (t).

        var typeForCtor = !isDelegatedMetadata(meta) ? new BinaryOperatorExpr(BinaryOperator.Or, t, meta.internalType) : t;
        var ctorExpr = null;

        if (meta.deps !== null) {
          // There is a constructor (either explicitly or implicitly defined).
          if (meta.deps !== 'invalid') {
            ctorExpr = new InstantiateExpr(typeForCtor, injectDependencies(meta.deps, meta.injectFn, meta.target === R3FactoryTarget.Pipe));
            ctorDepsType = createCtorDepsType(meta.deps);
          }
        } else {
          var baseFactory = variable("\u0275".concat(meta.name, "_BaseFactory"));
          var getInheritedFactory = importExpr(Identifiers$1.getInheritedFactory);
          var baseFactoryStmt = baseFactory.set(getInheritedFactory.callFn([meta.internalType],
          /* sourceSpan */
          undefined,
          /* pure */
          true)).toDeclStmt(INFERRED_TYPE, [StmtModifier.Exported, StmtModifier.Final]);
          statements.push(baseFactoryStmt); // There is no constructor, use the base class' factory to construct typeForCtor.

          ctorExpr = baseFactory.callFn([typeForCtor]);
        }

        var ctorExprFinal = ctorExpr;
        var body = [];
        var retExpr = null;

        function makeConditionalFactory(nonCtorExpr) {
          var r = variable('r');
          body.push(r.set(NULL_EXPR).toDeclStmt());
          var ctorStmt = null;

          if (ctorExprFinal !== null) {
            ctorStmt = r.set(ctorExprFinal).toStmt();
          } else {
            ctorStmt = importExpr(Identifiers$1.invalidFactory).callFn([]).toStmt();
          }

          body.push(ifStmt(t, [ctorStmt], [r.set(nonCtorExpr).toStmt()]));
          return r;
        }

        if (isDelegatedMetadata(meta) && meta.delegateType === R3FactoryDelegateType.Factory) {
          var delegateFactory = variable("\u0275".concat(meta.name, "_BaseFactory"));
          var getFactoryOf = importExpr(Identifiers$1.getFactoryOf);

          if (meta.delegate.isEquivalent(meta.internalType)) {
            throw new Error("Illegal state: compiling factory that delegates to itself");
          }

          var delegateFactoryStmt = delegateFactory.set(getFactoryOf.callFn([meta.delegate])).toDeclStmt(INFERRED_TYPE, [StmtModifier.Exported, StmtModifier.Final]);
          statements.push(delegateFactoryStmt);
          retExpr = makeConditionalFactory(delegateFactory.callFn([]));
        } else if (isDelegatedMetadata(meta)) {
          // This type is created with a delegated factory. If a type parameter is not specified, call
          // the factory instead.
          var delegateArgs = injectDependencies(meta.delegateDeps, meta.injectFn, meta.target === R3FactoryTarget.Pipe); // Either call `new delegate(...)` or `delegate(...)` depending on meta.delegateType.

          var factoryExpr = new (meta.delegateType === R3FactoryDelegateType.Class ? InstantiateExpr : InvokeFunctionExpr)(meta.delegate, delegateArgs);
          retExpr = makeConditionalFactory(factoryExpr);
        } else if (isExpressionFactoryMetadata(meta)) {
          // TODO(alxhub): decide whether to lower the value here or in the caller
          retExpr = makeConditionalFactory(meta.expression);
        } else {
          retExpr = ctorExpr;
        }

        if (retExpr !== null) {
          body.push(new ReturnStatement(retExpr));
        } else {
          body.push(importExpr(Identifiers$1.invalidFactory).callFn([]).toStmt());
        }

        return {
          factory: fn([new FnParam('t', DYNAMIC_TYPE)], body, INFERRED_TYPE, undefined, "".concat(meta.name, "_Factory")),
          statements: statements,
          type: expressionType(importExpr(Identifiers$1.FactoryDef, [typeWithParameters(meta.type.type, meta.typeArgumentCount), ctorDepsType]))
        };
      }

      function injectDependencies(deps, injectFn, isPipe) {
        return deps.map(function (dep, index) {
          return compileInjectDependency(dep, injectFn, isPipe, index);
        });
      }

      function compileInjectDependency(dep, injectFn, isPipe, index) {
        // Interpret the dependency according to its resolved type.
        switch (dep.resolved) {
          case R3ResolvedDependencyType.Token:
          case R3ResolvedDependencyType.ChangeDetectorRef:
            // Build up the injection flags according to the metadata.
            var flags = 0
            /* Default */
            | (dep.self ? 2
            /* Self */
            : 0) | (dep.skipSelf ? 4
            /* SkipSelf */
            : 0) | (dep.host ? 1
            /* Host */
            : 0) | (dep.optional ? 8
            /* Optional */
            : 0); // If this dependency is optional or otherwise has non-default flags, then additional
            // parameters describing how to inject the dependency must be passed to the inject function
            // that's being used.

            var flagsParam = flags !== 0
            /* Default */
            || dep.optional ? literal(flags) : null; // We have a separate instruction for injecting ChangeDetectorRef into a pipe.

            if (isPipe && dep.resolved === R3ResolvedDependencyType.ChangeDetectorRef) {
              return importExpr(Identifiers$1.injectPipeChangeDetectorRef).callFn(flagsParam ? [flagsParam] : []);
            } // Build up the arguments to the injectFn call.


            var injectArgs = [dep.token];

            if (flagsParam) {
              injectArgs.push(flagsParam);
            }

            return importExpr(injectFn).callFn(injectArgs);

          case R3ResolvedDependencyType.Attribute:
            // In the case of attributes, the attribute name in question is given as the token.
            return importExpr(Identifiers$1.injectAttribute).callFn([dep.token]);

          case R3ResolvedDependencyType.Invalid:
            return importExpr(Identifiers$1.invalidFactoryDep).callFn([literal(index)]);

          default:
            return unsupported("Unknown R3ResolvedDependencyType: ".concat(R3ResolvedDependencyType[dep.resolved]));
        }
      }

      function createCtorDepsType(deps) {
        var hasTypes = false;
        var attributeTypes = deps.map(function (dep) {
          var type = createCtorDepType(dep);

          if (type !== null) {
            hasTypes = true;
            return type;
          } else {
            return literal(null);
          }
        });

        if (hasTypes) {
          return expressionType(literalArr(attributeTypes));
        } else {
          return NONE_TYPE;
        }
      }

      function createCtorDepType(dep) {
        var entries = [];

        if (dep.resolved === R3ResolvedDependencyType.Attribute) {
          if (dep.attribute !== null) {
            entries.push({
              key: 'attribute',
              value: dep.attribute,
              quoted: false
            });
          }
        }

        if (dep.optional) {
          entries.push({
            key: 'optional',
            value: literal(true),
            quoted: false
          });
        }

        if (dep.host) {
          entries.push({
            key: 'host',
            value: literal(true),
            quoted: false
          });
        }

        if (dep.self) {
          entries.push({
            key: 'self',
            value: literal(true),
            quoted: false
          });
        }

        if (dep.skipSelf) {
          entries.push({
            key: 'skipSelf',
            value: literal(true),
            quoted: false
          });
        }

        return entries.length > 0 ? literalMap(entries) : null;
      }
      /**
       * A helper function useful for extracting `R3DependencyMetadata` from a Render2
       * `CompileTypeMetadata` instance.
       */


      function dependenciesFromGlobalMetadata(type, outputCtx, reflector) {
        // Use the `CompileReflector` to look up references to some well-known Angular types. These will
        // be compared with the token to statically determine whether the token has significance to
        // Angular, and set the correct `R3ResolvedDependencyType` as a result.
        var injectorRef = reflector.resolveExternalReference(Identifiers.Injector); // Iterate through the type's DI dependencies and produce `R3DependencyMetadata` for each of them.

        var deps = [];

        var _iterator7 = _createForOfIteratorHelper(type.diDeps),
            _step7;

        try {
          for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {
            var dependency = _step7.value;

            if (dependency.token) {
              var tokenRef = tokenReference(dependency.token);
              var resolved = dependency.isAttribute ? R3ResolvedDependencyType.Attribute : R3ResolvedDependencyType.Token; // In the case of most dependencies, the token will be a reference to a type. Sometimes,
              // however, it can be a string, in the case of older Angular code or @Attribute injection.

              var token = tokenRef instanceof StaticSymbol ? outputCtx.importExpr(tokenRef) : literal(tokenRef); // Construct the dependency.

              deps.push({
                token: token,
                attribute: null,
                resolved: resolved,
                host: !!dependency.isHost,
                optional: !!dependency.isOptional,
                self: !!dependency.isSelf,
                skipSelf: !!dependency.isSkipSelf
              });
            } else {
              unsupported('dependency without a token');
            }
          }
        } catch (err) {
          _iterator7.e(err);
        } finally {
          _iterator7.f();
        }

        return deps;
      }

      function isDelegatedMetadata(meta) {
        return meta.delegateType !== undefined;
      }

      function isExpressionFactoryMetadata(meta) {
        return meta.expression !== undefined;
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      function _compileInjectable(meta) {
        var result = null;
        var factoryMeta = {
          name: meta.name,
          type: meta.type,
          internalType: meta.internalType,
          typeArgumentCount: meta.typeArgumentCount,
          deps: [],
          injectFn: Identifiers.inject,
          target: R3FactoryTarget.Injectable
        };

        if (meta.useClass !== undefined) {
          // meta.useClass has two modes of operation. Either deps are specified, in which case `new` is
          // used to instantiate the class with dependencies injected, or deps are not specified and
          // the factory of the class is used to instantiate it.
          //
          // A special case exists for useClass: Type where Type is the injectable type itself and no
          // deps are specified, in which case 'useClass' is effectively ignored.
          var useClassOnSelf = meta.useClass.isEquivalent(meta.internalType);
          var deps = undefined;

          if (meta.userDeps !== undefined) {
            deps = meta.userDeps;
          }

          if (deps !== undefined) {
            // factory: () => new meta.useClass(...deps)
            result = compileFactoryFunction(Object.assign(Object.assign({}, factoryMeta), {
              delegate: meta.useClass,
              delegateDeps: deps,
              delegateType: R3FactoryDelegateType.Class
            }));
          } else if (useClassOnSelf) {
            result = compileFactoryFunction(factoryMeta);
          } else {
            result = delegateToFactory(meta.type.value, meta.useClass);
          }
        } else if (meta.useFactory !== undefined) {
          if (meta.userDeps !== undefined) {
            result = compileFactoryFunction(Object.assign(Object.assign({}, factoryMeta), {
              delegate: meta.useFactory,
              delegateDeps: meta.userDeps || [],
              delegateType: R3FactoryDelegateType.Function
            }));
          } else {
            result = {
              statements: [],
              factory: fn([], [new ReturnStatement(meta.useFactory.callFn([]))])
            };
          }
        } else if (meta.useValue !== undefined) {
          // Note: it's safe to use `meta.useValue` instead of the `USE_VALUE in meta` check used for
          // client code because meta.useValue is an Expression which will be defined even if the actual
          // value is undefined.
          result = compileFactoryFunction(Object.assign(Object.assign({}, factoryMeta), {
            expression: meta.useValue
          }));
        } else if (meta.useExisting !== undefined) {
          // useExisting is an `inject` call on the existing token.
          result = compileFactoryFunction(Object.assign(Object.assign({}, factoryMeta), {
            expression: importExpr(Identifiers.inject).callFn([meta.useExisting])
          }));
        } else {
          result = delegateToFactory(meta.type.value, meta.internalType);
        }

        var token = meta.internalType;
        var injectableProps = {
          token: token,
          factory: result.factory
        }; // Only generate providedIn property if it has a non-null value

        if (meta.providedIn.value !== null) {
          injectableProps.providedIn = meta.providedIn;
        }

        var expression = importExpr(Identifiers.ɵɵdefineInjectable).callFn([mapToMapExpression(injectableProps)]);
        var type = new ExpressionType(importExpr(Identifiers.InjectableDef, [typeWithParameters(meta.type.type, meta.typeArgumentCount)]));
        return {
          expression: expression,
          type: type,
          statements: result.statements
        };
      }

      function delegateToFactory(type, internalType) {
        return {
          statements: [],
          // If types are the same, we can generate `factory: type.ɵfac`
          // If types are different, we have to generate a wrapper function to ensure
          // the internal type has been resolved (`factory: function(t) { return type.ɵfac(t); }`)
          factory: type.node === internalType.node ? internalType.prop('ɵfac') : fn([new FnParam('t', DYNAMIC_TYPE)], [new ReturnStatement(internalType.callMethod('ɵfac', [variable('t')]))])
        };
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      function assertArrayOfStrings(identifier, value) {
        if (value == null) {
          return;
        }

        if (!Array.isArray(value)) {
          throw new Error("Expected '".concat(identifier, "' to be an array of strings."));
        }

        for (var i = 0; i < value.length; i += 1) {
          if (typeof value[i] !== 'string') {
            throw new Error("Expected '".concat(identifier, "' to be an array of strings."));
          }
        }
      }

      var UNUSABLE_INTERPOLATION_REGEXPS = [/^\s*$/, /[<>]/, /^[{}]$/, /&(#|[a-z])/i, /^\/\//];

      function assertInterpolationSymbols(identifier, value) {
        if (value != null && !(Array.isArray(value) && value.length == 2)) {
          throw new Error("Expected '".concat(identifier, "' to be an array, [start, end]."));
        } else if (value != null) {
          var start = value[0];
          var end = value[1]; // Check for unusable interpolation symbols

          UNUSABLE_INTERPOLATION_REGEXPS.forEach(function (regexp) {
            if (regexp.test(start) || regexp.test(end)) {
              throw new Error("['".concat(start, "', '").concat(end, "'] contains unusable interpolation symbol."));
            }
          });
        }
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      var InterpolationConfig = /*#__PURE__*/function () {
        function InterpolationConfig(start, end) {
          _classCallCheck(this, InterpolationConfig);

          this.start = start;
          this.end = end;
        }

        _createClass(InterpolationConfig, null, [{
          key: "fromArray",
          value: function fromArray(markers) {
            if (!markers) {
              return DEFAULT_INTERPOLATION_CONFIG;
            }

            assertInterpolationSymbols('interpolation', markers);
            return new InterpolationConfig(markers[0], markers[1]);
          }
        }]);

        return InterpolationConfig;
      }();

      var DEFAULT_INTERPOLATION_CONFIG = new InterpolationConfig('{{', '}}');
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * In TypeScript, tagged template functions expect a "template object", which is an array of
       * "cooked" strings plus a `raw` property that contains an array of "raw" strings. This is
       * typically constructed with a function called `__makeTemplateObject(cooked, raw)`, but it may not
       * be available in all environments.
       *
       * This is a JavaScript polyfill that uses __makeTemplateObject when it's available, but otherwise
       * creates an inline helper with the same functionality.
       *
       * In the inline function, if `Object.defineProperty` is available we use that to attach the `raw`
       * array.
       */

      var makeTemplateObjectPolyfill = '(this&&this.__makeTemplateObject||function(e,t){return Object.defineProperty?Object.defineProperty(e,"raw",{value:t}):e.raw=t,e})';

      var AbstractJsEmitterVisitor = /*#__PURE__*/function (_AbstractEmitterVisit) {
        _inherits(AbstractJsEmitterVisitor, _AbstractEmitterVisit);

        var _super52 = _createSuper(AbstractJsEmitterVisitor);

        function AbstractJsEmitterVisitor() {
          _classCallCheck(this, AbstractJsEmitterVisitor);

          return _super52.call(this, false);
        }

        _createClass(AbstractJsEmitterVisitor, [{
          key: "visitDeclareClassStmt",
          value: function visitDeclareClassStmt(stmt, ctx) {
            var _this85 = this;

            ctx.pushClass(stmt);

            this._visitClassConstructor(stmt, ctx);

            if (stmt.parent != null) {
              ctx.print(stmt, "".concat(stmt.name, ".prototype = Object.create("));
              stmt.parent.visitExpression(this, ctx);
              ctx.println(stmt, ".prototype);");
            }

            stmt.getters.forEach(function (getter) {
              return _this85._visitClassGetter(stmt, getter, ctx);
            });
            stmt.methods.forEach(function (method) {
              return _this85._visitClassMethod(stmt, method, ctx);
            });
            ctx.popClass();
            return null;
          }
        }, {
          key: "_visitClassConstructor",
          value: function _visitClassConstructor(stmt, ctx) {
            ctx.print(stmt, "function ".concat(stmt.name, "("));

            if (stmt.constructorMethod != null) {
              this._visitParams(stmt.constructorMethod.params, ctx);
            }

            ctx.println(stmt, ") {");
            ctx.incIndent();

            if (stmt.constructorMethod != null) {
              if (stmt.constructorMethod.body.length > 0) {
                ctx.println(stmt, "var self = this;");
                this.visitAllStatements(stmt.constructorMethod.body, ctx);
              }
            }

            ctx.decIndent();
            ctx.println(stmt, "}");
          }
        }, {
          key: "_visitClassGetter",
          value: function _visitClassGetter(stmt, getter, ctx) {
            ctx.println(stmt, "Object.defineProperty(".concat(stmt.name, ".prototype, '").concat(getter.name, "', { get: function() {"));
            ctx.incIndent();

            if (getter.body.length > 0) {
              ctx.println(stmt, "var self = this;");
              this.visitAllStatements(getter.body, ctx);
            }

            ctx.decIndent();
            ctx.println(stmt, "}});");
          }
        }, {
          key: "_visitClassMethod",
          value: function _visitClassMethod(stmt, method, ctx) {
            ctx.print(stmt, "".concat(stmt.name, ".prototype.").concat(method.name, " = function("));

            this._visitParams(method.params, ctx);

            ctx.println(stmt, ") {");
            ctx.incIndent();

            if (method.body.length > 0) {
              ctx.println(stmt, "var self = this;");
              this.visitAllStatements(method.body, ctx);
            }

            ctx.decIndent();
            ctx.println(stmt, "};");
          }
        }, {
          key: "visitWrappedNodeExpr",
          value: function visitWrappedNodeExpr(ast, ctx) {
            throw new Error('Cannot emit a WrappedNodeExpr in Javascript.');
          }
        }, {
          key: "visitReadVarExpr",
          value: function visitReadVarExpr(ast, ctx) {
            if (ast.builtin === BuiltinVar.This) {
              ctx.print(ast, 'self');
            } else if (ast.builtin === BuiltinVar.Super) {
              throw new Error("'super' needs to be handled at a parent ast node, not at the variable level!");
            } else {
              _get(_getPrototypeOf(AbstractJsEmitterVisitor.prototype), "visitReadVarExpr", this).call(this, ast, ctx);
            }

            return null;
          }
        }, {
          key: "visitDeclareVarStmt",
          value: function visitDeclareVarStmt(stmt, ctx) {
            ctx.print(stmt, "var ".concat(stmt.name));

            if (stmt.value) {
              ctx.print(stmt, ' = ');
              stmt.value.visitExpression(this, ctx);
            }

            ctx.println(stmt, ";");
            return null;
          }
        }, {
          key: "visitCastExpr",
          value: function visitCastExpr(ast, ctx) {
            ast.value.visitExpression(this, ctx);
            return null;
          }
        }, {
          key: "visitInvokeFunctionExpr",
          value: function visitInvokeFunctionExpr(expr, ctx) {
            var fnExpr = expr.fn;

            if (fnExpr instanceof ReadVarExpr && fnExpr.builtin === BuiltinVar.Super) {
              ctx.currentClass.parent.visitExpression(this, ctx);
              ctx.print(expr, ".call(this");

              if (expr.args.length > 0) {
                ctx.print(expr, ", ");
                this.visitAllExpressions(expr.args, ctx, ',');
              }

              ctx.print(expr, ")");
            } else {
              _get(_getPrototypeOf(AbstractJsEmitterVisitor.prototype), "visitInvokeFunctionExpr", this).call(this, expr, ctx);
            }

            return null;
          }
        }, {
          key: "visitTaggedTemplateExpr",
          value: function visitTaggedTemplateExpr(ast, ctx) {
            var _this86 = this;

            // The following convoluted piece of code is effectively the downlevelled equivalent of
            // ```
            // tag`...`
            // ```
            // which is effectively like:
            // ```
            // tag(__makeTemplateObject(cooked, raw), expression1, expression2, ...);
            // ```
            var elements = ast.template.elements;
            ast.tag.visitExpression(this, ctx);
            ctx.print(ast, "(".concat(makeTemplateObjectPolyfill, "("));
            ctx.print(ast, "[".concat(elements.map(function (part) {
              return escapeIdentifier(part.text, false);
            }).join(', '), "], "));
            ctx.print(ast, "[".concat(elements.map(function (part) {
              return escapeIdentifier(part.rawText, false);
            }).join(', '), "])"));
            ast.template.expressions.forEach(function (expression) {
              ctx.print(ast, ', ');
              expression.visitExpression(_this86, ctx);
            });
            ctx.print(ast, ')');
            return null;
          }
        }, {
          key: "visitFunctionExpr",
          value: function visitFunctionExpr(ast, ctx) {
            ctx.print(ast, "function".concat(ast.name ? ' ' + ast.name : '', "("));

            this._visitParams(ast.params, ctx);

            ctx.println(ast, ") {");
            ctx.incIndent();
            this.visitAllStatements(ast.statements, ctx);
            ctx.decIndent();
            ctx.print(ast, "}");
            return null;
          }
        }, {
          key: "visitDeclareFunctionStmt",
          value: function visitDeclareFunctionStmt(stmt, ctx) {
            ctx.print(stmt, "function ".concat(stmt.name, "("));

            this._visitParams(stmt.params, ctx);

            ctx.println(stmt, ") {");
            ctx.incIndent();
            this.visitAllStatements(stmt.statements, ctx);
            ctx.decIndent();
            ctx.println(stmt, "}");
            return null;
          }
        }, {
          key: "visitTryCatchStmt",
          value: function visitTryCatchStmt(stmt, ctx) {
            ctx.println(stmt, "try {");
            ctx.incIndent();
            this.visitAllStatements(stmt.bodyStmts, ctx);
            ctx.decIndent();
            ctx.println(stmt, "} catch (".concat(CATCH_ERROR_VAR$1.name, ") {"));
            ctx.incIndent();
            var catchStmts = [CATCH_STACK_VAR$1.set(CATCH_ERROR_VAR$1.prop('stack')).toDeclStmt(null, [StmtModifier.Final])].concat(stmt.catchStmts);
            this.visitAllStatements(catchStmts, ctx);
            ctx.decIndent();
            ctx.println(stmt, "}");
            return null;
          }
        }, {
          key: "visitLocalizedString",
          value: function visitLocalizedString(ast, ctx) {
            var _this87 = this;

            // The following convoluted piece of code is effectively the downlevelled equivalent of
            // ```
            // $localize `...`
            // ```
            // which is effectively like:
            // ```
            // $localize(__makeTemplateObject(cooked, raw), expression1, expression2, ...);
            // ```
            ctx.print(ast, "$localize(".concat(makeTemplateObjectPolyfill, "("));
            var parts = [ast.serializeI18nHead()];

            for (var i = 1; i < ast.messageParts.length; i++) {
              parts.push(ast.serializeI18nTemplatePart(i));
            }

            ctx.print(ast, "[".concat(parts.map(function (part) {
              return escapeIdentifier(part.cooked, false);
            }).join(', '), "], "));
            ctx.print(ast, "[".concat(parts.map(function (part) {
              return escapeIdentifier(part.raw, false);
            }).join(', '), "])"));
            ast.expressions.forEach(function (expression) {
              ctx.print(ast, ', ');
              expression.visitExpression(_this87, ctx);
            });
            ctx.print(ast, ')');
            return null;
          }
        }, {
          key: "_visitParams",
          value: function _visitParams(params, ctx) {
            this.visitAllObjects(function (param) {
              return ctx.print(null, param.name);
            }, params, ctx, ',');
          }
        }, {
          key: "getBuiltinMethodName",
          value: function getBuiltinMethodName(method) {
            var name;

            switch (method) {
              case BuiltinMethod.ConcatArray:
                name = 'concat';
                break;

              case BuiltinMethod.SubscribeObservable:
                name = 'subscribe';
                break;

              case BuiltinMethod.Bind:
                name = 'bind';
                break;

              default:
                throw new Error("Unknown builtin method: ".concat(method));
            }

            return name;
          }
        }]);

        return AbstractJsEmitterVisitor;
      }(AbstractEmitterVisitor);
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * The Trusted Types policy, or null if Trusted Types are not
       * enabled/supported, or undefined if the policy has not been created yet.
       */


      var policy;
      /**
       * Returns the Trusted Types policy, or null if Trusted Types are not
       * enabled/supported. The first call to this function will create the policy.
       */

      function getPolicy() {
        if (policy === undefined) {
          policy = null;

          if (_global.trustedTypes) {
            try {
              policy = _global.trustedTypes.createPolicy('angular#unsafe-jit', {
                createScript: function createScript(s) {
                  return s;
                }
              });
            } catch (_a) {// trustedTypes.createPolicy throws if called with a name that is
              // already registered, even in report-only mode. Until the API changes,
              // catch the error not to break the applications functionally. In such
              // cases, the code will fall back to using strings.
            }
          }
        }

        return policy;
      }
      /**
       * Unsafely promote a string to a TrustedScript, falling back to strings when
       * Trusted Types are not available.
       * @security In particular, it must be assured that the provided string will
       * never cause an XSS vulnerability if used in a context that will be
       * interpreted and executed as a script by a browser, e.g. when calling eval.
       */


      function trustedScriptFromString(script) {
        var _a;

        return ((_a = getPolicy()) === null || _a === void 0 ? void 0 : _a.createScript(script)) || script;
      }
      /**
       * Unsafely call the Function constructor with the given string arguments.
       * @security This is a security-sensitive function; any use of this function
       * must go through security review. In particular, it must be assured that it
       * is only called from the JIT compiler, as use in other code can lead to XSS
       * vulnerabilities.
       */


      function newTrustedFunctionForJIT() {
        for (var _len3 = arguments.length, args = new Array(_len3), _key4 = 0; _key4 < _len3; _key4++) {
          args[_key4] = arguments[_key4];
        }

        if (!_global.trustedTypes) {
          // In environments that don't support Trusted Types, fall back to the most
          // straightforward implementation:
          return _construct(Function, args);
        } // Chrome currently does not support passing TrustedScript to the Function
        // constructor. The following implements the workaround proposed on the page
        // below, where the Chromium bug is also referenced:
        // https://github.com/w3c/webappsec-trusted-types/wiki/Trusted-Types-for-function-constructor


        var fnArgs = args.slice(0, -1).join(',');
        var fnBody = args[args.length - 1];
        var body = "(function anonymous(".concat(fnArgs, "\n) { ").concat(fnBody, "\n})"); // Using eval directly confuses the compiler and prevents this module from
        // being stripped out of JS binaries even if not used. The global['eval']
        // indirection fixes that.

        var fn = _global['eval'](trustedScriptFromString(body));

        if (fn.bind === undefined) {
          // Workaround for a browser bug that only exists in Chrome 83, where passing
          // a TrustedScript to eval just returns the TrustedScript back without
          // evaluating it. In that case, fall back to the most straightforward
          // implementation:
          return _construct(Function, args);
        } // To completely mimic the behavior of calling "new Function", two more
        // things need to happen:
        // 1. Stringifying the resulting function should return its source code


        fn.toString = function () {
          return body;
        }; // 2. When calling the resulting function, `this` should refer to `global`


        return fn.bind(_global); // When Trusted Types support in Function constructors is widely available,
        // the implementation of this function can be simplified to:
        // return new Function(...args.map(a => trustedScriptFromString(a)));
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * A helper class to manage the evaluation of JIT generated code.
       */


      var JitEvaluator = /*#__PURE__*/function () {
        function JitEvaluator() {
          _classCallCheck(this, JitEvaluator);
        }

        _createClass(JitEvaluator, [{
          key: "evaluateStatements",
          value:
          /**
           *
           * @param sourceUrl The URL of the generated code.
           * @param statements An array of Angular statement AST nodes to be evaluated.
           * @param reflector A helper used when converting the statements to executable code.
           * @param createSourceMaps If true then create a source-map for the generated code and include it
           * inline as a source-map comment.
           * @returns A map of all the variables in the generated code.
           */
          function evaluateStatements(sourceUrl, statements, reflector, createSourceMaps) {
            var converter = new JitEmitterVisitor(reflector);
            var ctx = EmitterVisitorContext.createRoot(); // Ensure generated code is in strict mode

            if (statements.length > 0 && !isUseStrictStatement(statements[0])) {
              statements = [literal('use strict').toStmt()].concat(_toConsumableArray(statements));
            }

            converter.visitAllStatements(statements, ctx);
            converter.createReturnStmt(ctx);
            return this.evaluateCode(sourceUrl, ctx, converter.getArgs(), createSourceMaps);
          }
          /**
           * Evaluate a piece of JIT generated code.
           * @param sourceUrl The URL of this generated code.
           * @param ctx A context object that contains an AST of the code to be evaluated.
           * @param vars A map containing the names and values of variables that the evaluated code might
           * reference.
           * @param createSourceMap If true then create a source-map for the generated code and include it
           * inline as a source-map comment.
           * @returns The result of evaluating the code.
           */

        }, {
          key: "evaluateCode",
          value: function evaluateCode(sourceUrl, ctx, vars, createSourceMap) {
            var fnBody = "\"use strict\";".concat(ctx.toSource(), "\n//# sourceURL=").concat(sourceUrl);
            var fnArgNames = [];
            var fnArgValues = [];

            for (var argName in vars) {
              fnArgValues.push(vars[argName]);
              fnArgNames.push(argName);
            }

            if (createSourceMap) {
              // using `new Function(...)` generates a header, 1 line of no arguments, 2 lines otherwise
              // E.g. ```
              // function anonymous(a,b,c
              // /**/) { ... }```
              // We don't want to hard code this fact, so we auto detect it via an empty function first.
              var emptyFn = newTrustedFunctionForJIT.apply(void 0, _toConsumableArray(fnArgNames.concat('return null;'))).toString();
              var headerLines = emptyFn.slice(0, emptyFn.indexOf('return null;')).split('\n').length - 1;
              fnBody += "\n".concat(ctx.toSourceMapGenerator(sourceUrl, headerLines).toJsComment());
            }

            var fn = newTrustedFunctionForJIT.apply(void 0, _toConsumableArray(fnArgNames.concat(fnBody)));
            return this.executeFunction(fn, fnArgValues);
          }
          /**
           * Execute a JIT generated function by calling it.
           *
           * This method can be overridden in tests to capture the functions that are generated
           * by this `JitEvaluator` class.
           *
           * @param fn A function to execute.
           * @param args The arguments to pass to the function being executed.
           * @returns The return value of the executed function.
           */

        }, {
          key: "executeFunction",
          value: function executeFunction(fn, args) {
            return fn.apply(void 0, _toConsumableArray(args));
          }
        }]);

        return JitEvaluator;
      }();
      /**
       * An Angular AST visitor that converts AST nodes into executable JavaScript code.
       */


      var JitEmitterVisitor = /*#__PURE__*/function (_AbstractJsEmitterVis) {
        _inherits(JitEmitterVisitor, _AbstractJsEmitterVis);

        var _super53 = _createSuper(JitEmitterVisitor);

        function JitEmitterVisitor(reflector) {
          var _this88;

          _classCallCheck(this, JitEmitterVisitor);

          _this88 = _super53.call(this);
          _this88.reflector = reflector;
          _this88._evalArgNames = [];
          _this88._evalArgValues = [];
          _this88._evalExportedVars = [];
          return _this88;
        }

        _createClass(JitEmitterVisitor, [{
          key: "createReturnStmt",
          value: function createReturnStmt(ctx) {
            var stmt = new ReturnStatement(new LiteralMapExpr(this._evalExportedVars.map(function (resultVar) {
              return new LiteralMapEntry(resultVar, variable(resultVar), false);
            })));
            stmt.visitStatement(this, ctx);
          }
        }, {
          key: "getArgs",
          value: function getArgs() {
            var result = {};

            for (var i = 0; i < this._evalArgNames.length; i++) {
              result[this._evalArgNames[i]] = this._evalArgValues[i];
            }

            return result;
          }
        }, {
          key: "visitExternalExpr",
          value: function visitExternalExpr(ast, ctx) {
            this._emitReferenceToExternal(ast, this.reflector.resolveExternalReference(ast.value), ctx);

            return null;
          }
        }, {
          key: "visitWrappedNodeExpr",
          value: function visitWrappedNodeExpr(ast, ctx) {
            this._emitReferenceToExternal(ast, ast.node, ctx);

            return null;
          }
        }, {
          key: "visitDeclareVarStmt",
          value: function visitDeclareVarStmt(stmt, ctx) {
            if (stmt.hasModifier(StmtModifier.Exported)) {
              this._evalExportedVars.push(stmt.name);
            }

            return _get(_getPrototypeOf(JitEmitterVisitor.prototype), "visitDeclareVarStmt", this).call(this, stmt, ctx);
          }
        }, {
          key: "visitDeclareFunctionStmt",
          value: function visitDeclareFunctionStmt(stmt, ctx) {
            if (stmt.hasModifier(StmtModifier.Exported)) {
              this._evalExportedVars.push(stmt.name);
            }

            return _get(_getPrototypeOf(JitEmitterVisitor.prototype), "visitDeclareFunctionStmt", this).call(this, stmt, ctx);
          }
        }, {
          key: "visitDeclareClassStmt",
          value: function visitDeclareClassStmt(stmt, ctx) {
            if (stmt.hasModifier(StmtModifier.Exported)) {
              this._evalExportedVars.push(stmt.name);
            }

            return _get(_getPrototypeOf(JitEmitterVisitor.prototype), "visitDeclareClassStmt", this).call(this, stmt, ctx);
          }
        }, {
          key: "_emitReferenceToExternal",
          value: function _emitReferenceToExternal(ast, value, ctx) {
            var id = this._evalArgValues.indexOf(value);

            if (id === -1) {
              id = this._evalArgValues.length;

              this._evalArgValues.push(value);

              var name = identifierName({
                reference: value
              }) || 'val';

              this._evalArgNames.push("jit_".concat(name, "_").concat(id));
            }

            ctx.print(ast, this._evalArgNames[id]);
          }
        }]);

        return JitEmitterVisitor;
      }(AbstractJsEmitterVisitor);

      function isUseStrictStatement(statement) {
        return statement.isEquivalent(literal('use strict').toStmt());
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      var $EOF = 0;
      var $BSPACE = 8;
      var $TAB = 9;
      var $LF = 10;
      var $VTAB = 11;
      var $FF = 12;
      var $CR = 13;
      var $SPACE = 32;
      var $BANG = 33;
      var $DQ = 34;
      var $HASH = 35;
      var $$ = 36;
      var $PERCENT = 37;
      var $AMPERSAND = 38;
      var $SQ = 39;
      var $LPAREN = 40;
      var $RPAREN = 41;
      var $STAR = 42;
      var $PLUS = 43;
      var $COMMA = 44;
      var $MINUS = 45;
      var $PERIOD = 46;
      var $SLASH = 47;
      var $COLON = 58;
      var $SEMICOLON = 59;
      var $LT = 60;
      var $EQ = 61;
      var $GT = 62;
      var $QUESTION = 63;
      var $0 = 48;
      var $7 = 55;
      var $9 = 57;
      var $A = 65;
      var $E = 69;
      var $F = 70;
      var $X = 88;
      var $Z = 90;
      var $LBRACKET = 91;
      var $BACKSLASH = 92;
      var $RBRACKET = 93;
      var $CARET = 94;
      var $_ = 95;
      var $a = 97;
      var $b = 98;
      var $e = 101;
      var $f = 102;
      var $n = 110;
      var $r = 114;
      var $t = 116;
      var $u = 117;
      var $v = 118;
      var $x = 120;
      var $z = 122;
      var $LBRACE = 123;
      var $BAR = 124;
      var $RBRACE = 125;
      var $NBSP = 160;
      var $PIPE = 124;
      var $TILDA = 126;
      var $AT = 64;
      var $BT = 96;

      function isWhitespace(code) {
        return code >= $TAB && code <= $SPACE || code == $NBSP;
      }

      function isDigit(code) {
        return $0 <= code && code <= $9;
      }

      function isAsciiLetter(code) {
        return code >= $a && code <= $z || code >= $A && code <= $Z;
      }

      function isAsciiHexDigit(code) {
        return code >= $a && code <= $f || code >= $A && code <= $F || isDigit(code);
      }

      function isNewLine(code) {
        return code === $LF || code === $CR;
      }

      function isOctalDigit(code) {
        return $0 <= code && code <= $7;
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      var ParseLocation = /*#__PURE__*/function () {
        function ParseLocation(file, offset, line, col) {
          _classCallCheck(this, ParseLocation);

          this.file = file;
          this.offset = offset;
          this.line = line;
          this.col = col;
        }

        _createClass(ParseLocation, [{
          key: "toString",
          value: function toString() {
            return this.offset != null ? "".concat(this.file.url, "@").concat(this.line, ":").concat(this.col) : this.file.url;
          }
        }, {
          key: "moveBy",
          value: function moveBy(delta) {
            var source = this.file.content;
            var len = source.length;
            var offset = this.offset;
            var line = this.line;
            var col = this.col;

            while (offset > 0 && delta < 0) {
              offset--;
              delta++;
              var ch = source.charCodeAt(offset);

              if (ch == $LF) {
                line--;
                var priorLine = source.substr(0, offset - 1).lastIndexOf(String.fromCharCode($LF));
                col = priorLine > 0 ? offset - priorLine : offset;
              } else {
                col--;
              }
            }

            while (offset < len && delta > 0) {
              var _ch = source.charCodeAt(offset);

              offset++;
              delta--;

              if (_ch == $LF) {
                line++;
                col = 0;
              } else {
                col++;
              }
            }

            return new ParseLocation(this.file, offset, line, col);
          } // Return the source around the location
          // Up to `maxChars` or `maxLines` on each side of the location

        }, {
          key: "getContext",
          value: function getContext(maxChars, maxLines) {
            var content = this.file.content;
            var startOffset = this.offset;

            if (startOffset != null) {
              if (startOffset > content.length - 1) {
                startOffset = content.length - 1;
              }

              var endOffset = startOffset;
              var ctxChars = 0;
              var ctxLines = 0;

              while (ctxChars < maxChars && startOffset > 0) {
                startOffset--;
                ctxChars++;

                if (content[startOffset] == '\n') {
                  if (++ctxLines == maxLines) {
                    break;
                  }
                }
              }

              ctxChars = 0;
              ctxLines = 0;

              while (ctxChars < maxChars && endOffset < content.length - 1) {
                endOffset++;
                ctxChars++;

                if (content[endOffset] == '\n') {
                  if (++ctxLines == maxLines) {
                    break;
                  }
                }
              }

              return {
                before: content.substring(startOffset, this.offset),
                after: content.substring(this.offset, endOffset + 1)
              };
            }

            return null;
          }
        }]);

        return ParseLocation;
      }();

      var ParseSourceFile = function ParseSourceFile(content, url) {
        _classCallCheck(this, ParseSourceFile);

        this.content = content;
        this.url = url;
      };

      var ParseSourceSpan = /*#__PURE__*/function () {
        /**
         * Create an object that holds information about spans of tokens/nodes captured during
         * lexing/parsing of text.
         *
         * @param start
         * The location of the start of the span (having skipped leading trivia).
         * Skipping leading trivia makes source-spans more "user friendly", since things like HTML
         * elements will appear to begin at the start of the opening tag, rather than at the start of any
         * leading trivia, which could include newlines.
         *
         * @param end
         * The location of the end of the span.
         *
         * @param fullStart
         * The start of the token without skipping the leading trivia.
         * This is used by tooling that splits tokens further, such as extracting Angular interpolations
         * from text tokens. Such tooling creates new source-spans relative to the original token's
         * source-span. If leading trivia characters have been skipped then the new source-spans may be
         * incorrectly offset.
         *
         * @param details
         * Additional information (such as identifier names) that should be associated with the span.
         */
        function ParseSourceSpan(start, end) {
          var fullStart = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : start;
          var details = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;

          _classCallCheck(this, ParseSourceSpan);

          this.start = start;
          this.end = end;
          this.fullStart = fullStart;
          this.details = details;
        }

        _createClass(ParseSourceSpan, [{
          key: "toString",
          value: function toString() {
            return this.start.file.content.substring(this.start.offset, this.end.offset);
          }
        }]);

        return ParseSourceSpan;
      }();

      var ParseErrorLevel;

      (function (ParseErrorLevel) {
        ParseErrorLevel[ParseErrorLevel["WARNING"] = 0] = "WARNING";
        ParseErrorLevel[ParseErrorLevel["ERROR"] = 1] = "ERROR";
      })(ParseErrorLevel || (ParseErrorLevel = {}));

      var ParseError = /*#__PURE__*/function () {
        function ParseError(span, msg) {
          var level = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : ParseErrorLevel.ERROR;

          _classCallCheck(this, ParseError);

          this.span = span;
          this.msg = msg;
          this.level = level;
        }

        _createClass(ParseError, [{
          key: "contextualMessage",
          value: function contextualMessage() {
            var ctx = this.span.start.getContext(100, 3);
            return ctx ? "".concat(this.msg, " (\"").concat(ctx.before, "[").concat(ParseErrorLevel[this.level], " ->]").concat(ctx.after, "\")") : this.msg;
          }
        }, {
          key: "toString",
          value: function toString() {
            var details = this.span.details ? ", ".concat(this.span.details) : '';
            return "".concat(this.contextualMessage(), ": ").concat(this.span.start).concat(details);
          }
        }]);

        return ParseError;
      }();

      function typeSourceSpan(kind, type) {
        var moduleUrl = identifierModuleUrl(type);
        var sourceFileName = moduleUrl != null ? "in ".concat(kind, " ").concat(identifierName(type), " in ").concat(moduleUrl) : "in ".concat(kind, " ").concat(identifierName(type));
        var sourceFile = new ParseSourceFile('', sourceFileName);
        return new ParseSourceSpan(new ParseLocation(sourceFile, -1, -1, -1), new ParseLocation(sourceFile, -1, -1, -1));
      }
      /**
       * Generates Source Span object for a given R3 Type for JIT mode.
       *
       * @param kind Component or Directive.
       * @param typeName name of the Component or Directive.
       * @param sourceUrl reference to Component or Directive source.
       * @returns instance of ParseSourceSpan that represent a given Component or Directive.
       */


      function r3JitTypeSourceSpan(kind, typeName, sourceUrl) {
        var sourceFileName = "in ".concat(kind, " ").concat(typeName, " in ").concat(sourceUrl);
        var sourceFile = new ParseSourceFile('', sourceFileName);
        return new ParseSourceSpan(new ParseLocation(sourceFile, -1, -1, -1), new ParseLocation(sourceFile, -1, -1, -1));
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * Implementation of `CompileReflector` which resolves references to @angular/core
       * symbols at runtime, according to a consumer-provided mapping.
       *
       * Only supports `resolveExternalReference`, all other methods throw.
       */


      var R3JitReflector = /*#__PURE__*/function () {
        function R3JitReflector(context) {
          _classCallCheck(this, R3JitReflector);

          this.context = context;
        }

        _createClass(R3JitReflector, [{
          key: "resolveExternalReference",
          value: function resolveExternalReference(ref) {
            // This reflector only handles @angular/core imports.
            if (ref.moduleName !== '@angular/core') {
              throw new Error("Cannot resolve external reference to ".concat(ref.moduleName, ", only references to @angular/core are supported."));
            }

            if (!this.context.hasOwnProperty(ref.name)) {
              throw new Error("No value provided for @angular/core symbol '".concat(ref.name, "'."));
            }

            return this.context[ref.name];
          }
        }, {
          key: "parameters",
          value: function parameters(typeOrFunc) {
            throw new Error('Not implemented.');
          }
        }, {
          key: "annotations",
          value: function annotations(typeOrFunc) {
            throw new Error('Not implemented.');
          }
        }, {
          key: "shallowAnnotations",
          value: function shallowAnnotations(typeOrFunc) {
            throw new Error('Not implemented.');
          }
        }, {
          key: "tryAnnotations",
          value: function tryAnnotations(typeOrFunc) {
            throw new Error('Not implemented.');
          }
        }, {
          key: "propMetadata",
          value: function propMetadata(typeOrFunc) {
            throw new Error('Not implemented.');
          }
        }, {
          key: "hasLifecycleHook",
          value: function hasLifecycleHook(type, lcProperty) {
            throw new Error('Not implemented.');
          }
        }, {
          key: "guards",
          value: function guards(typeOrFunc) {
            throw new Error('Not implemented.');
          }
        }, {
          key: "componentModuleUrl",
          value: function componentModuleUrl(type, cmpMetadata) {
            throw new Error('Not implemented.');
          }
        }]);

        return R3JitReflector;
      }();
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      function mapEntry(key, value) {
        return {
          key: key,
          value: value,
          quoted: false
        };
      }

      function mapLiteral(obj) {
        var quoted = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
        return literalMap(Object.keys(obj).map(function (key) {
          return {
            key: key,
            quoted: quoted,
            value: obj[key]
          };
        }));
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * Construct an `R3NgModuleDef` for the given `R3NgModuleMetadata`.
       */


      function _compileNgModule(meta) {
        var internalType = meta.internalType,
            moduleType = meta.type,
            bootstrap = meta.bootstrap,
            declarations = meta.declarations,
            imports = meta.imports,
            exports = meta.exports,
            schemas = meta.schemas,
            containsForwardDecls = meta.containsForwardDecls,
            emitInline = meta.emitInline,
            id = meta.id;
        var additionalStatements = [];
        var definitionMap = {
          type: internalType
        }; // Only generate the keys in the metadata if the arrays have values.

        if (bootstrap.length) {
          definitionMap.bootstrap = refsToArray(bootstrap, containsForwardDecls);
        } // If requested to emit scope information inline, pass the declarations, imports and exports to
        // the `ɵɵdefineNgModule` call. The JIT compilation uses this.


        if (emitInline) {
          if (declarations.length) {
            definitionMap.declarations = refsToArray(declarations, containsForwardDecls);
          }

          if (imports.length) {
            definitionMap.imports = refsToArray(imports, containsForwardDecls);
          }

          if (exports.length) {
            definitionMap.exports = refsToArray(exports, containsForwardDecls);
          }
        } // If not emitting inline, the scope information is not passed into `ɵɵdefineNgModule` as it would
        // prevent tree-shaking of the declarations, imports and exports references.
        else {
            var setNgModuleScopeCall = generateSetNgModuleScopeCall(meta);

            if (setNgModuleScopeCall !== null) {
              additionalStatements.push(setNgModuleScopeCall);
            }
          }

        if (schemas && schemas.length) {
          definitionMap.schemas = literalArr(schemas.map(function (ref) {
            return ref.value;
          }));
        }

        if (id) {
          definitionMap.id = id;
        }

        var expression = importExpr(Identifiers$1.defineNgModule).callFn([mapToMapExpression(definitionMap)]);
        var type = new ExpressionType(importExpr(Identifiers$1.NgModuleDefWithMeta, [new ExpressionType(moduleType.type), tupleTypeOf(declarations), tupleTypeOf(imports), tupleTypeOf(exports)]));
        return {
          expression: expression,
          type: type,
          additionalStatements: additionalStatements
        };
      }
      /**
       * Generates a function call to `ɵɵsetNgModuleScope` with all necessary information so that the
       * transitive module scope can be computed during runtime in JIT mode. This call is marked pure
       * such that the references to declarations, imports and exports may be elided causing these
       * symbols to become tree-shakeable.
       */


      function generateSetNgModuleScopeCall(meta) {
        var moduleType = meta.adjacentType,
            declarations = meta.declarations,
            imports = meta.imports,
            exports = meta.exports,
            containsForwardDecls = meta.containsForwardDecls;
        var scopeMap = {};

        if (declarations.length) {
          scopeMap.declarations = refsToArray(declarations, containsForwardDecls);
        }

        if (imports.length) {
          scopeMap.imports = refsToArray(imports, containsForwardDecls);
        }

        if (exports.length) {
          scopeMap.exports = refsToArray(exports, containsForwardDecls);
        }

        if (Object.keys(scopeMap).length === 0) {
          return null;
        } // setNgModuleScope(...)


        var fnCall = new InvokeFunctionExpr(
        /* fn */
        importExpr(Identifiers$1.setNgModuleScope),
        /* args */
        [moduleType, mapToMapExpression(scopeMap)]); // (ngJitMode guard) && setNgModuleScope(...)

        var guardedCall = jitOnlyGuardedExpression(fnCall); // function() { (ngJitMode guard) && setNgModuleScope(...); }

        var iife = new FunctionExpr(
        /* params */
        [],
        /* statements */
        [guardedCall.toStmt()]); // (function() { (ngJitMode guard) && setNgModuleScope(...); })()

        var iifeCall = new InvokeFunctionExpr(
        /* fn */
        iife,
        /* args */
        []);
        return iifeCall.toStmt();
      }

      function _compileInjector(meta) {
        var result = compileFactoryFunction({
          name: meta.name,
          type: meta.type,
          internalType: meta.internalType,
          typeArgumentCount: 0,
          deps: meta.deps,
          injectFn: Identifiers$1.inject,
          target: R3FactoryTarget.NgModule
        });
        var definitionMap = {
          factory: result.factory
        };

        if (meta.providers !== null) {
          definitionMap.providers = meta.providers;
        }

        if (meta.imports.length > 0) {
          definitionMap.imports = literalArr(meta.imports);
        }

        var expression = importExpr(Identifiers$1.defineInjector).callFn([mapToMapExpression(definitionMap)]);
        var type = new ExpressionType(importExpr(Identifiers$1.InjectorDef, [new ExpressionType(meta.type.type)]));
        return {
          expression: expression,
          type: type,
          statements: result.statements
        };
      } // TODO(alxhub): integrate this with `compileNgModule`. Currently the two are separate operations.


      function compileNgModuleFromRender2(ctx, ngModule, injectableCompiler) {
        var className = identifierName(ngModule.type);
        var rawImports = ngModule.rawImports ? [ngModule.rawImports] : [];
        var rawExports = ngModule.rawExports ? [ngModule.rawExports] : [];
        var injectorDefArg = mapLiteral({
          'factory': injectableCompiler.factoryFor({
            type: ngModule.type,
            symbol: ngModule.type.reference
          }, ctx),
          'providers': convertMetaToOutput(ngModule.rawProviders, ctx),
          'imports': convertMetaToOutput([].concat(rawImports, rawExports), ctx)
        });
        var injectorDef = importExpr(Identifiers$1.defineInjector).callFn([injectorDefArg]);
        ctx.statements.push(new ClassStmt(
        /* name */
        className,
        /* parent */
        null,
        /* fields */
        [new ClassField(
        /* name */
        'ɵinj',
        /* type */
        INFERRED_TYPE,
        /* modifiers */
        [StmtModifier.Static],
        /* initializer */
        injectorDef)],
        /* getters */
        [],
        /* constructorMethod */
        new ClassMethod(null, [], []),
        /* methods */
        []));
      }

      function accessExportScope(module) {
        var selectorScope = new ReadPropExpr(module, 'ɵmod');
        return new ReadPropExpr(selectorScope, 'exported');
      }

      function tupleTypeOf(exp) {
        var types = exp.map(function (ref) {
          return typeofExpr(ref.type);
        });
        return exp.length > 0 ? expressionType(literalArr(types)) : NONE_TYPE;
      }

      function refsToArray(refs, shouldForwardDeclare) {
        var values = literalArr(refs.map(function (ref) {
          return ref.value;
        }));
        return shouldForwardDeclare ? fn([], [new ReturnStatement(values)]) : values;
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      function compilePipeFromMetadata(metadata) {
        var definitionMapValues = []; // e.g. `name: 'myPipe'`

        definitionMapValues.push({
          key: 'name',
          value: literal(metadata.pipeName),
          quoted: false
        }); // e.g. `type: MyPipe`

        definitionMapValues.push({
          key: 'type',
          value: metadata.type.value,
          quoted: false
        }); // e.g. `pure: true`

        definitionMapValues.push({
          key: 'pure',
          value: literal(metadata.pure),
          quoted: false
        });
        var expression = importExpr(Identifiers$1.definePipe).callFn([literalMap(definitionMapValues)]);
        var type = createPipeType(metadata);
        return {
          expression: expression,
          type: type
        };
      }

      function createPipeType(metadata) {
        return new ExpressionType(importExpr(Identifiers$1.PipeDefWithMeta, [typeWithParameters(metadata.type.type, metadata.typeArgumentCount), new ExpressionType(new LiteralExpr(metadata.pipeName))]));
      }
      /**
       * Write a pipe definition to the output context.
       */


      function compilePipeFromRender2(outputCtx, pipe, reflector) {
        var name = identifierName(pipe.type);

        if (!name) {
          return error("Cannot resolve the name of ".concat(pipe.type));
        }

        var type = outputCtx.importExpr(pipe.type.reference);
        var metadata = {
          name: name,
          type: wrapReference(type),
          internalType: type,
          pipeName: pipe.name,
          typeArgumentCount: 0,
          deps: dependenciesFromGlobalMetadata(pipe.type, outputCtx, reflector),
          pure: pipe.pure
        };
        var res = compilePipeFromMetadata(metadata);
        var factoryRes = compileFactoryFunction(Object.assign(Object.assign({}, metadata), {
          injectFn: Identifiers$1.directiveInject,
          target: R3FactoryTarget.Pipe
        }));
        var definitionField = outputCtx.constantPool.propertyNameOf(3
        /* Pipe */
        );
        var ngFactoryDefStatement = new ClassStmt(
        /* name */
        name,
        /* parent */
        null,
        /* fields */
        [new ClassField(
        /* name */
        'ɵfac',
        /* type */
        INFERRED_TYPE,
        /* modifiers */
        [StmtModifier.Static],
        /* initializer */
        factoryRes.factory)],
        /* getters */
        [],
        /* constructorMethod */
        new ClassMethod(null, [], []),
        /* methods */
        []);
        var pipeDefStatement = new ClassStmt(
        /* name */
        name,
        /* parent */
        null,
        /* fields */
        [new ClassField(
        /* name */
        definitionField,
        /* type */
        INFERRED_TYPE,
        /* modifiers */
        [StmtModifier.Static],
        /* initializer */
        res.expression)],
        /* getters */
        [],
        /* constructorMethod */
        new ClassMethod(null, [], []),
        /* methods */
        []);
        outputCtx.statements.push(ngFactoryDefStatement, pipeDefStatement);
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      var ParserError = function ParserError(message, input, errLocation, ctxLocation) {
        _classCallCheck(this, ParserError);

        this.input = input;
        this.errLocation = errLocation;
        this.ctxLocation = ctxLocation;
        this.message = "Parser Error: ".concat(message, " ").concat(errLocation, " [").concat(input, "] in ").concat(ctxLocation);
      };

      var ParseSpan = /*#__PURE__*/function () {
        function ParseSpan(start, end) {
          _classCallCheck(this, ParseSpan);

          this.start = start;
          this.end = end;
        }

        _createClass(ParseSpan, [{
          key: "toAbsolute",
          value: function toAbsolute(absoluteOffset) {
            return new AbsoluteSourceSpan(absoluteOffset + this.start, absoluteOffset + this.end);
          }
        }]);

        return ParseSpan;
      }();

      var AST = /*#__PURE__*/function () {
        function AST(span,
        /**
         * Absolute location of the expression AST in a source code file.
         */
        sourceSpan) {
          _classCallCheck(this, AST);

          this.span = span;
          this.sourceSpan = sourceSpan;
        }

        _createClass(AST, [{
          key: "visit",
          value: function visit(visitor) {
            var context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
            return null;
          }
        }, {
          key: "toString",
          value: function toString() {
            return 'AST';
          }
        }]);

        return AST;
      }();

      var ASTWithName = /*#__PURE__*/function (_AST) {
        _inherits(ASTWithName, _AST);

        var _super54 = _createSuper(ASTWithName);

        function ASTWithName(span, sourceSpan, nameSpan) {
          var _this89;

          _classCallCheck(this, ASTWithName);

          _this89 = _super54.call(this, span, sourceSpan);
          _this89.nameSpan = nameSpan;
          return _this89;
        }

        return ASTWithName;
      }(AST);
      /**
       * Represents a quoted expression of the form:
       *
       * quote = prefix `:` uninterpretedExpression
       * prefix = identifier
       * uninterpretedExpression = arbitrary string
       *
       * A quoted expression is meant to be pre-processed by an AST transformer that
       * converts it into another AST that no longer contains quoted expressions.
       * It is meant to allow third-party developers to extend Angular template
       * expression language. The `uninterpretedExpression` part of the quote is
       * therefore not interpreted by the Angular's own expression parser.
       */


      var Quote = /*#__PURE__*/function (_AST2) {
        _inherits(Quote, _AST2);

        var _super55 = _createSuper(Quote);

        function Quote(span, sourceSpan, prefix, uninterpretedExpression, location) {
          var _this90;

          _classCallCheck(this, Quote);

          _this90 = _super55.call(this, span, sourceSpan);
          _this90.prefix = prefix;
          _this90.uninterpretedExpression = uninterpretedExpression;
          _this90.location = location;
          return _this90;
        }

        _createClass(Quote, [{
          key: "visit",
          value: function visit(visitor) {
            var context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
            return visitor.visitQuote(this, context);
          }
        }, {
          key: "toString",
          value: function toString() {
            return 'Quote';
          }
        }]);

        return Quote;
      }(AST);

      var EmptyExpr = /*#__PURE__*/function (_AST3) {
        _inherits(EmptyExpr, _AST3);

        var _super56 = _createSuper(EmptyExpr);

        function EmptyExpr() {
          _classCallCheck(this, EmptyExpr);

          return _super56.apply(this, arguments);
        }

        _createClass(EmptyExpr, [{
          key: "visit",
          value: function visit(visitor) {// do nothing

            var context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
          }
        }]);

        return EmptyExpr;
      }(AST);

      var ImplicitReceiver = /*#__PURE__*/function (_AST4) {
        _inherits(ImplicitReceiver, _AST4);

        var _super57 = _createSuper(ImplicitReceiver);

        function ImplicitReceiver() {
          _classCallCheck(this, ImplicitReceiver);

          return _super57.apply(this, arguments);
        }

        _createClass(ImplicitReceiver, [{
          key: "visit",
          value: function visit(visitor) {
            var context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
            return visitor.visitImplicitReceiver(this, context);
          }
        }]);

        return ImplicitReceiver;
      }(AST);
      /**
       * Receiver when something is accessed through `this` (e.g. `this.foo`). Note that this class
       * inherits from `ImplicitReceiver`, because accessing something through `this` is treated the
       * same as accessing it implicitly inside of an Angular template (e.g. `[attr.title]="this.title"`
       * is the same as `[attr.title]="title"`.). Inheriting allows for the `this` accesses to be treated
       * the same as implicit ones, except for a couple of exceptions like `$event` and `$any`.
       * TODO: we should find a way for this class not to extend from `ImplicitReceiver` in the future.
       */


      var ThisReceiver = /*#__PURE__*/function (_ImplicitReceiver) {
        _inherits(ThisReceiver, _ImplicitReceiver);

        var _super58 = _createSuper(ThisReceiver);

        function ThisReceiver() {
          _classCallCheck(this, ThisReceiver);

          return _super58.apply(this, arguments);
        }

        _createClass(ThisReceiver, [{
          key: "visit",
          value: function visit(visitor) {
            var context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

            var _a;

            return (_a = visitor.visitThisReceiver) === null || _a === void 0 ? void 0 : _a.call(visitor, this, context);
          }
        }]);

        return ThisReceiver;
      }(ImplicitReceiver);
      /**
       * Multiple expressions separated by a semicolon.
       */


      var Chain = /*#__PURE__*/function (_AST5) {
        _inherits(Chain, _AST5);

        var _super59 = _createSuper(Chain);

        function Chain(span, sourceSpan, expressions) {
          var _this91;

          _classCallCheck(this, Chain);

          _this91 = _super59.call(this, span, sourceSpan);
          _this91.expressions = expressions;
          return _this91;
        }

        _createClass(Chain, [{
          key: "visit",
          value: function visit(visitor) {
            var context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
            return visitor.visitChain(this, context);
          }
        }]);

        return Chain;
      }(AST);

      var Conditional = /*#__PURE__*/function (_AST6) {
        _inherits(Conditional, _AST6);

        var _super60 = _createSuper(Conditional);

        function Conditional(span, sourceSpan, condition, trueExp, falseExp) {
          var _this92;

          _classCallCheck(this, Conditional);

          _this92 = _super60.call(this, span, sourceSpan);
          _this92.condition = condition;
          _this92.trueExp = trueExp;
          _this92.falseExp = falseExp;
          return _this92;
        }

        _createClass(Conditional, [{
          key: "visit",
          value: function visit(visitor) {
            var context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
            return visitor.visitConditional(this, context);
          }
        }]);

        return Conditional;
      }(AST);

      var PropertyRead = /*#__PURE__*/function (_ASTWithName) {
        _inherits(PropertyRead, _ASTWithName);

        var _super61 = _createSuper(PropertyRead);

        function PropertyRead(span, sourceSpan, nameSpan, receiver, name) {
          var _this93;

          _classCallCheck(this, PropertyRead);

          _this93 = _super61.call(this, span, sourceSpan, nameSpan);
          _this93.receiver = receiver;
          _this93.name = name;
          return _this93;
        }

        _createClass(PropertyRead, [{
          key: "visit",
          value: function visit(visitor) {
            var context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
            return visitor.visitPropertyRead(this, context);
          }
        }]);

        return PropertyRead;
      }(ASTWithName);

      var PropertyWrite = /*#__PURE__*/function (_ASTWithName2) {
        _inherits(PropertyWrite, _ASTWithName2);

        var _super62 = _createSuper(PropertyWrite);

        function PropertyWrite(span, sourceSpan, nameSpan, receiver, name, value) {
          var _this94;

          _classCallCheck(this, PropertyWrite);

          _this94 = _super62.call(this, span, sourceSpan, nameSpan);
          _this94.receiver = receiver;
          _this94.name = name;
          _this94.value = value;
          return _this94;
        }

        _createClass(PropertyWrite, [{
          key: "visit",
          value: function visit(visitor) {
            var context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
            return visitor.visitPropertyWrite(this, context);
          }
        }]);

        return PropertyWrite;
      }(ASTWithName);

      var SafePropertyRead = /*#__PURE__*/function (_ASTWithName3) {
        _inherits(SafePropertyRead, _ASTWithName3);

        var _super63 = _createSuper(SafePropertyRead);

        function SafePropertyRead(span, sourceSpan, nameSpan, receiver, name) {
          var _this95;

          _classCallCheck(this, SafePropertyRead);

          _this95 = _super63.call(this, span, sourceSpan, nameSpan);
          _this95.receiver = receiver;
          _this95.name = name;
          return _this95;
        }

        _createClass(SafePropertyRead, [{
          key: "visit",
          value: function visit(visitor) {
            var context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
            return visitor.visitSafePropertyRead(this, context);
          }
        }]);

        return SafePropertyRead;
      }(ASTWithName);

      var KeyedRead = /*#__PURE__*/function (_AST7) {
        _inherits(KeyedRead, _AST7);

        var _super64 = _createSuper(KeyedRead);

        function KeyedRead(span, sourceSpan, obj, key) {
          var _this96;

          _classCallCheck(this, KeyedRead);

          _this96 = _super64.call(this, span, sourceSpan);
          _this96.obj = obj;
          _this96.key = key;
          return _this96;
        }

        _createClass(KeyedRead, [{
          key: "visit",
          value: function visit(visitor) {
            var context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
            return visitor.visitKeyedRead(this, context);
          }
        }]);

        return KeyedRead;
      }(AST);

      var KeyedWrite = /*#__PURE__*/function (_AST8) {
        _inherits(KeyedWrite, _AST8);

        var _super65 = _createSuper(KeyedWrite);

        function KeyedWrite(span, sourceSpan, obj, key, value) {
          var _this97;

          _classCallCheck(this, KeyedWrite);

          _this97 = _super65.call(this, span, sourceSpan);
          _this97.obj = obj;
          _this97.key = key;
          _this97.value = value;
          return _this97;
        }

        _createClass(KeyedWrite, [{
          key: "visit",
          value: function visit(visitor) {
            var context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
            return visitor.visitKeyedWrite(this, context);
          }
        }]);

        return KeyedWrite;
      }(AST);

      var BindingPipe = /*#__PURE__*/function (_ASTWithName4) {
        _inherits(BindingPipe, _ASTWithName4);

        var _super66 = _createSuper(BindingPipe);

        function BindingPipe(span, sourceSpan, exp, name, args, nameSpan) {
          var _this98;

          _classCallCheck(this, BindingPipe);

          _this98 = _super66.call(this, span, sourceSpan, nameSpan);
          _this98.exp = exp;
          _this98.name = name;
          _this98.args = args;
          return _this98;
        }

        _createClass(BindingPipe, [{
          key: "visit",
          value: function visit(visitor) {
            var context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
            return visitor.visitPipe(this, context);
          }
        }]);

        return BindingPipe;
      }(ASTWithName);

      var LiteralPrimitive = /*#__PURE__*/function (_AST9) {
        _inherits(LiteralPrimitive, _AST9);

        var _super67 = _createSuper(LiteralPrimitive);

        function LiteralPrimitive(span, sourceSpan, value) {
          var _this99;

          _classCallCheck(this, LiteralPrimitive);

          _this99 = _super67.call(this, span, sourceSpan);
          _this99.value = value;
          return _this99;
        }

        _createClass(LiteralPrimitive, [{
          key: "visit",
          value: function visit(visitor) {
            var context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
            return visitor.visitLiteralPrimitive(this, context);
          }
        }]);

        return LiteralPrimitive;
      }(AST);

      var LiteralArray = /*#__PURE__*/function (_AST10) {
        _inherits(LiteralArray, _AST10);

        var _super68 = _createSuper(LiteralArray);

        function LiteralArray(span, sourceSpan, expressions) {
          var _this100;

          _classCallCheck(this, LiteralArray);

          _this100 = _super68.call(this, span, sourceSpan);
          _this100.expressions = expressions;
          return _this100;
        }

        _createClass(LiteralArray, [{
          key: "visit",
          value: function visit(visitor) {
            var context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
            return visitor.visitLiteralArray(this, context);
          }
        }]);

        return LiteralArray;
      }(AST);

      var LiteralMap = /*#__PURE__*/function (_AST11) {
        _inherits(LiteralMap, _AST11);

        var _super69 = _createSuper(LiteralMap);

        function LiteralMap(span, sourceSpan, keys, values) {
          var _this101;

          _classCallCheck(this, LiteralMap);

          _this101 = _super69.call(this, span, sourceSpan);
          _this101.keys = keys;
          _this101.values = values;
          return _this101;
        }

        _createClass(LiteralMap, [{
          key: "visit",
          value: function visit(visitor) {
            var context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
            return visitor.visitLiteralMap(this, context);
          }
        }]);

        return LiteralMap;
      }(AST);

      var Interpolation = /*#__PURE__*/function (_AST12) {
        _inherits(Interpolation, _AST12);

        var _super70 = _createSuper(Interpolation);

        function Interpolation(span, sourceSpan, strings, expressions) {
          var _this102;

          _classCallCheck(this, Interpolation);

          _this102 = _super70.call(this, span, sourceSpan);
          _this102.strings = strings;
          _this102.expressions = expressions;
          return _this102;
        }

        _createClass(Interpolation, [{
          key: "visit",
          value: function visit(visitor) {
            var context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
            return visitor.visitInterpolation(this, context);
          }
        }]);

        return Interpolation;
      }(AST);

      var Binary = /*#__PURE__*/function (_AST13) {
        _inherits(Binary, _AST13);

        var _super71 = _createSuper(Binary);

        function Binary(span, sourceSpan, operation, left, right) {
          var _this103;

          _classCallCheck(this, Binary);

          _this103 = _super71.call(this, span, sourceSpan);
          _this103.operation = operation;
          _this103.left = left;
          _this103.right = right;
          return _this103;
        }

        _createClass(Binary, [{
          key: "visit",
          value: function visit(visitor) {
            var context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
            return visitor.visitBinary(this, context);
          }
        }]);

        return Binary;
      }(AST);
      /**
       * For backwards compatibility reasons, `Unary` inherits from `Binary` and mimics the binary AST
       * node that was originally used. This inheritance relation can be deleted in some future major,
       * after consumers have been given a chance to fully support Unary.
       */


      var Unary = /*#__PURE__*/function (_Binary) {
        _inherits(Unary, _Binary);

        var _super72 = _createSuper(Unary);

        /**
         * During the deprecation period this constructor is private, to avoid consumers from creating
         * a `Unary` with the fallback properties for `Binary`.
         */
        function Unary(span, sourceSpan, operator, expr, binaryOp, binaryLeft, binaryRight) {
          var _this104;

          _classCallCheck(this, Unary);

          _this104 = _super72.call(this, span, sourceSpan, binaryOp, binaryLeft, binaryRight);
          _this104.operator = operator;
          _this104.expr = expr;
          return _this104;
        }
        /**
         * Creates a unary minus expression "-x", represented as `Binary` using "0 - x".
         */


        _createClass(Unary, [{
          key: "visit",
          value: function visit(visitor) {
            var context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

            if (visitor.visitUnary !== undefined) {
              return visitor.visitUnary(this, context);
            }

            return visitor.visitBinary(this, context);
          }
        }], [{
          key: "createMinus",
          value: function createMinus(span, sourceSpan, expr) {
            return new Unary(span, sourceSpan, '-', expr, '-', new LiteralPrimitive(span, sourceSpan, 0), expr);
          }
          /**
           * Creates a unary plus expression "+x", represented as `Binary` using "x - 0".
           */

        }, {
          key: "createPlus",
          value: function createPlus(span, sourceSpan, expr) {
            return new Unary(span, sourceSpan, '+', expr, '-', expr, new LiteralPrimitive(span, sourceSpan, 0));
          }
        }]);

        return Unary;
      }(Binary);

      var PrefixNot = /*#__PURE__*/function (_AST14) {
        _inherits(PrefixNot, _AST14);

        var _super73 = _createSuper(PrefixNot);

        function PrefixNot(span, sourceSpan, expression) {
          var _this105;

          _classCallCheck(this, PrefixNot);

          _this105 = _super73.call(this, span, sourceSpan);
          _this105.expression = expression;
          return _this105;
        }

        _createClass(PrefixNot, [{
          key: "visit",
          value: function visit(visitor) {
            var context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
            return visitor.visitPrefixNot(this, context);
          }
        }]);

        return PrefixNot;
      }(AST);

      var NonNullAssert = /*#__PURE__*/function (_AST15) {
        _inherits(NonNullAssert, _AST15);

        var _super74 = _createSuper(NonNullAssert);

        function NonNullAssert(span, sourceSpan, expression) {
          var _this106;

          _classCallCheck(this, NonNullAssert);

          _this106 = _super74.call(this, span, sourceSpan);
          _this106.expression = expression;
          return _this106;
        }

        _createClass(NonNullAssert, [{
          key: "visit",
          value: function visit(visitor) {
            var context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
            return visitor.visitNonNullAssert(this, context);
          }
        }]);

        return NonNullAssert;
      }(AST);

      var MethodCall = /*#__PURE__*/function (_ASTWithName5) {
        _inherits(MethodCall, _ASTWithName5);

        var _super75 = _createSuper(MethodCall);

        function MethodCall(span, sourceSpan, nameSpan, receiver, name, args) {
          var _this107;

          _classCallCheck(this, MethodCall);

          _this107 = _super75.call(this, span, sourceSpan, nameSpan);
          _this107.receiver = receiver;
          _this107.name = name;
          _this107.args = args;
          return _this107;
        }

        _createClass(MethodCall, [{
          key: "visit",
          value: function visit(visitor) {
            var context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
            return visitor.visitMethodCall(this, context);
          }
        }]);

        return MethodCall;
      }(ASTWithName);

      var SafeMethodCall = /*#__PURE__*/function (_ASTWithName6) {
        _inherits(SafeMethodCall, _ASTWithName6);

        var _super76 = _createSuper(SafeMethodCall);

        function SafeMethodCall(span, sourceSpan, nameSpan, receiver, name, args) {
          var _this108;

          _classCallCheck(this, SafeMethodCall);

          _this108 = _super76.call(this, span, sourceSpan, nameSpan);
          _this108.receiver = receiver;
          _this108.name = name;
          _this108.args = args;
          return _this108;
        }

        _createClass(SafeMethodCall, [{
          key: "visit",
          value: function visit(visitor) {
            var context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
            return visitor.visitSafeMethodCall(this, context);
          }
        }]);

        return SafeMethodCall;
      }(ASTWithName);

      var FunctionCall = /*#__PURE__*/function (_AST16) {
        _inherits(FunctionCall, _AST16);

        var _super77 = _createSuper(FunctionCall);

        function FunctionCall(span, sourceSpan, target, args) {
          var _this109;

          _classCallCheck(this, FunctionCall);

          _this109 = _super77.call(this, span, sourceSpan);
          _this109.target = target;
          _this109.args = args;
          return _this109;
        }

        _createClass(FunctionCall, [{
          key: "visit",
          value: function visit(visitor) {
            var context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
            return visitor.visitFunctionCall(this, context);
          }
        }]);

        return FunctionCall;
      }(AST);
      /**
       * Records the absolute position of a text span in a source file, where `start` and `end` are the
       * starting and ending byte offsets, respectively, of the text span in a source file.
       */


      var AbsoluteSourceSpan = function AbsoluteSourceSpan(start, end) {
        _classCallCheck(this, AbsoluteSourceSpan);

        this.start = start;
        this.end = end;
      };

      var ASTWithSource = /*#__PURE__*/function (_AST17) {
        _inherits(ASTWithSource, _AST17);

        var _super78 = _createSuper(ASTWithSource);

        function ASTWithSource(ast, source, location, absoluteOffset, errors) {
          var _this110;

          _classCallCheck(this, ASTWithSource);

          _this110 = _super78.call(this, new ParseSpan(0, source === null ? 0 : source.length), new AbsoluteSourceSpan(absoluteOffset, source === null ? absoluteOffset : absoluteOffset + source.length));
          _this110.ast = ast;
          _this110.source = source;
          _this110.location = location;
          _this110.errors = errors;
          return _this110;
        }

        _createClass(ASTWithSource, [{
          key: "visit",
          value: function visit(visitor) {
            var context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

            if (visitor.visitASTWithSource) {
              return visitor.visitASTWithSource(this, context);
            }

            return this.ast.visit(visitor, context);
          }
        }, {
          key: "toString",
          value: function toString() {
            return "".concat(this.source, " in ").concat(this.location);
          }
        }]);

        return ASTWithSource;
      }(AST);

      var VariableBinding =
      /**
       * @param sourceSpan entire span of the binding.
       * @param key name of the LHS along with its span.
       * @param value optional value for the RHS along with its span.
       */
      function VariableBinding(sourceSpan, key, value) {
        _classCallCheck(this, VariableBinding);

        this.sourceSpan = sourceSpan;
        this.key = key;
        this.value = value;
      };

      var ExpressionBinding =
      /**
       * @param sourceSpan entire span of the binding.
       * @param key binding name, like ngForOf, ngForTrackBy, ngIf, along with its
       * span. Note that the length of the span may not be the same as
       * `key.source.length`. For example,
       * 1. key.source = ngFor, key.span is for "ngFor"
       * 2. key.source = ngForOf, key.span is for "of"
       * 3. key.source = ngForTrackBy, key.span is for "trackBy"
       * @param value optional expression for the RHS.
       */
      function ExpressionBinding(sourceSpan, key, value) {
        _classCallCheck(this, ExpressionBinding);

        this.sourceSpan = sourceSpan;
        this.key = key;
        this.value = value;
      };

      var RecursiveAstVisitor$1 = /*#__PURE__*/function () {
        function RecursiveAstVisitor$1() {
          _classCallCheck(this, RecursiveAstVisitor$1);
        }

        _createClass(RecursiveAstVisitor$1, [{
          key: "visit",
          value: function visit(ast, context) {
            // The default implementation just visits every node.
            // Classes that extend RecursiveAstVisitor should override this function
            // to selectively visit the specified node.
            ast.visit(this, context);
          }
        }, {
          key: "visitUnary",
          value: function visitUnary(ast, context) {
            this.visit(ast.expr, context);
          }
        }, {
          key: "visitBinary",
          value: function visitBinary(ast, context) {
            this.visit(ast.left, context);
            this.visit(ast.right, context);
          }
        }, {
          key: "visitChain",
          value: function visitChain(ast, context) {
            this.visitAll(ast.expressions, context);
          }
        }, {
          key: "visitConditional",
          value: function visitConditional(ast, context) {
            this.visit(ast.condition, context);
            this.visit(ast.trueExp, context);
            this.visit(ast.falseExp, context);
          }
        }, {
          key: "visitPipe",
          value: function visitPipe(ast, context) {
            this.visit(ast.exp, context);
            this.visitAll(ast.args, context);
          }
        }, {
          key: "visitFunctionCall",
          value: function visitFunctionCall(ast, context) {
            if (ast.target) {
              this.visit(ast.target, context);
            }

            this.visitAll(ast.args, context);
          }
        }, {
          key: "visitImplicitReceiver",
          value: function visitImplicitReceiver(ast, context) {}
        }, {
          key: "visitThisReceiver",
          value: function visitThisReceiver(ast, context) {}
        }, {
          key: "visitInterpolation",
          value: function visitInterpolation(ast, context) {
            this.visitAll(ast.expressions, context);
          }
        }, {
          key: "visitKeyedRead",
          value: function visitKeyedRead(ast, context) {
            this.visit(ast.obj, context);
            this.visit(ast.key, context);
          }
        }, {
          key: "visitKeyedWrite",
          value: function visitKeyedWrite(ast, context) {
            this.visit(ast.obj, context);
            this.visit(ast.key, context);
            this.visit(ast.value, context);
          }
        }, {
          key: "visitLiteralArray",
          value: function visitLiteralArray(ast, context) {
            this.visitAll(ast.expressions, context);
          }
        }, {
          key: "visitLiteralMap",
          value: function visitLiteralMap(ast, context) {
            this.visitAll(ast.values, context);
          }
        }, {
          key: "visitLiteralPrimitive",
          value: function visitLiteralPrimitive(ast, context) {}
        }, {
          key: "visitMethodCall",
          value: function visitMethodCall(ast, context) {
            this.visit(ast.receiver, context);
            this.visitAll(ast.args, context);
          }
        }, {
          key: "visitPrefixNot",
          value: function visitPrefixNot(ast, context) {
            this.visit(ast.expression, context);
          }
        }, {
          key: "visitNonNullAssert",
          value: function visitNonNullAssert(ast, context) {
            this.visit(ast.expression, context);
          }
        }, {
          key: "visitPropertyRead",
          value: function visitPropertyRead(ast, context) {
            this.visit(ast.receiver, context);
          }
        }, {
          key: "visitPropertyWrite",
          value: function visitPropertyWrite(ast, context) {
            this.visit(ast.receiver, context);
            this.visit(ast.value, context);
          }
        }, {
          key: "visitSafePropertyRead",
          value: function visitSafePropertyRead(ast, context) {
            this.visit(ast.receiver, context);
          }
        }, {
          key: "visitSafeMethodCall",
          value: function visitSafeMethodCall(ast, context) {
            this.visit(ast.receiver, context);
            this.visitAll(ast.args, context);
          }
        }, {
          key: "visitQuote",
          value: function visitQuote(ast, context) {} // This is not part of the AstVisitor interface, just a helper method

        }, {
          key: "visitAll",
          value: function visitAll(asts, context) {
            var _iterator8 = _createForOfIteratorHelper(asts),
                _step8;

            try {
              for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {
                var ast = _step8.value;
                this.visit(ast, context);
              }
            } catch (err) {
              _iterator8.e(err);
            } finally {
              _iterator8.f();
            }
          }
        }]);

        return RecursiveAstVisitor$1;
      }();

      var AstTransformer$1 = /*#__PURE__*/function () {
        function AstTransformer$1() {
          _classCallCheck(this, AstTransformer$1);
        }

        _createClass(AstTransformer$1, [{
          key: "visitImplicitReceiver",
          value: function visitImplicitReceiver(ast, context) {
            return ast;
          }
        }, {
          key: "visitThisReceiver",
          value: function visitThisReceiver(ast, context) {
            return ast;
          }
        }, {
          key: "visitInterpolation",
          value: function visitInterpolation(ast, context) {
            return new Interpolation(ast.span, ast.sourceSpan, ast.strings, this.visitAll(ast.expressions));
          }
        }, {
          key: "visitLiteralPrimitive",
          value: function visitLiteralPrimitive(ast, context) {
            return new LiteralPrimitive(ast.span, ast.sourceSpan, ast.value);
          }
        }, {
          key: "visitPropertyRead",
          value: function visitPropertyRead(ast, context) {
            return new PropertyRead(ast.span, ast.sourceSpan, ast.nameSpan, ast.receiver.visit(this), ast.name);
          }
        }, {
          key: "visitPropertyWrite",
          value: function visitPropertyWrite(ast, context) {
            return new PropertyWrite(ast.span, ast.sourceSpan, ast.nameSpan, ast.receiver.visit(this), ast.name, ast.value.visit(this));
          }
        }, {
          key: "visitSafePropertyRead",
          value: function visitSafePropertyRead(ast, context) {
            return new SafePropertyRead(ast.span, ast.sourceSpan, ast.nameSpan, ast.receiver.visit(this), ast.name);
          }
        }, {
          key: "visitMethodCall",
          value: function visitMethodCall(ast, context) {
            return new MethodCall(ast.span, ast.sourceSpan, ast.nameSpan, ast.receiver.visit(this), ast.name, this.visitAll(ast.args));
          }
        }, {
          key: "visitSafeMethodCall",
          value: function visitSafeMethodCall(ast, context) {
            return new SafeMethodCall(ast.span, ast.sourceSpan, ast.nameSpan, ast.receiver.visit(this), ast.name, this.visitAll(ast.args));
          }
        }, {
          key: "visitFunctionCall",
          value: function visitFunctionCall(ast, context) {
            return new FunctionCall(ast.span, ast.sourceSpan, ast.target.visit(this), this.visitAll(ast.args));
          }
        }, {
          key: "visitLiteralArray",
          value: function visitLiteralArray(ast, context) {
            return new LiteralArray(ast.span, ast.sourceSpan, this.visitAll(ast.expressions));
          }
        }, {
          key: "visitLiteralMap",
          value: function visitLiteralMap(ast, context) {
            return new LiteralMap(ast.span, ast.sourceSpan, ast.keys, this.visitAll(ast.values));
          }
        }, {
          key: "visitUnary",
          value: function visitUnary(ast, context) {
            switch (ast.operator) {
              case '+':
                return Unary.createPlus(ast.span, ast.sourceSpan, ast.expr.visit(this));

              case '-':
                return Unary.createMinus(ast.span, ast.sourceSpan, ast.expr.visit(this));

              default:
                throw new Error("Unknown unary operator ".concat(ast.operator));
            }
          }
        }, {
          key: "visitBinary",
          value: function visitBinary(ast, context) {
            return new Binary(ast.span, ast.sourceSpan, ast.operation, ast.left.visit(this), ast.right.visit(this));
          }
        }, {
          key: "visitPrefixNot",
          value: function visitPrefixNot(ast, context) {
            return new PrefixNot(ast.span, ast.sourceSpan, ast.expression.visit(this));
          }
        }, {
          key: "visitNonNullAssert",
          value: function visitNonNullAssert(ast, context) {
            return new NonNullAssert(ast.span, ast.sourceSpan, ast.expression.visit(this));
          }
        }, {
          key: "visitConditional",
          value: function visitConditional(ast, context) {
            return new Conditional(ast.span, ast.sourceSpan, ast.condition.visit(this), ast.trueExp.visit(this), ast.falseExp.visit(this));
          }
        }, {
          key: "visitPipe",
          value: function visitPipe(ast, context) {
            return new BindingPipe(ast.span, ast.sourceSpan, ast.exp.visit(this), ast.name, this.visitAll(ast.args), ast.nameSpan);
          }
        }, {
          key: "visitKeyedRead",
          value: function visitKeyedRead(ast, context) {
            return new KeyedRead(ast.span, ast.sourceSpan, ast.obj.visit(this), ast.key.visit(this));
          }
        }, {
          key: "visitKeyedWrite",
          value: function visitKeyedWrite(ast, context) {
            return new KeyedWrite(ast.span, ast.sourceSpan, ast.obj.visit(this), ast.key.visit(this), ast.value.visit(this));
          }
        }, {
          key: "visitAll",
          value: function visitAll(asts) {
            var res = [];

            for (var i = 0; i < asts.length; ++i) {
              res[i] = asts[i].visit(this);
            }

            return res;
          }
        }, {
          key: "visitChain",
          value: function visitChain(ast, context) {
            return new Chain(ast.span, ast.sourceSpan, this.visitAll(ast.expressions));
          }
        }, {
          key: "visitQuote",
          value: function visitQuote(ast, context) {
            return new Quote(ast.span, ast.sourceSpan, ast.prefix, ast.uninterpretedExpression, ast.location);
          }
        }]);

        return AstTransformer$1;
      }(); // A transformer that only creates new nodes if the transformer makes a change or
      // a change is made a child node.


      var AstMemoryEfficientTransformer = /*#__PURE__*/function () {
        function AstMemoryEfficientTransformer() {
          _classCallCheck(this, AstMemoryEfficientTransformer);
        }

        _createClass(AstMemoryEfficientTransformer, [{
          key: "visitImplicitReceiver",
          value: function visitImplicitReceiver(ast, context) {
            return ast;
          }
        }, {
          key: "visitThisReceiver",
          value: function visitThisReceiver(ast, context) {
            return ast;
          }
        }, {
          key: "visitInterpolation",
          value: function visitInterpolation(ast, context) {
            var expressions = this.visitAll(ast.expressions);
            if (expressions !== ast.expressions) return new Interpolation(ast.span, ast.sourceSpan, ast.strings, expressions);
            return ast;
          }
        }, {
          key: "visitLiteralPrimitive",
          value: function visitLiteralPrimitive(ast, context) {
            return ast;
          }
        }, {
          key: "visitPropertyRead",
          value: function visitPropertyRead(ast, context) {
            var receiver = ast.receiver.visit(this);

            if (receiver !== ast.receiver) {
              return new PropertyRead(ast.span, ast.sourceSpan, ast.nameSpan, receiver, ast.name);
            }

            return ast;
          }
        }, {
          key: "visitPropertyWrite",
          value: function visitPropertyWrite(ast, context) {
            var receiver = ast.receiver.visit(this);
            var value = ast.value.visit(this);

            if (receiver !== ast.receiver || value !== ast.value) {
              return new PropertyWrite(ast.span, ast.sourceSpan, ast.nameSpan, receiver, ast.name, value);
            }

            return ast;
          }
        }, {
          key: "visitSafePropertyRead",
          value: function visitSafePropertyRead(ast, context) {
            var receiver = ast.receiver.visit(this);

            if (receiver !== ast.receiver) {
              return new SafePropertyRead(ast.span, ast.sourceSpan, ast.nameSpan, receiver, ast.name);
            }

            return ast;
          }
        }, {
          key: "visitMethodCall",
          value: function visitMethodCall(ast, context) {
            var receiver = ast.receiver.visit(this);
            var args = this.visitAll(ast.args);

            if (receiver !== ast.receiver || args !== ast.args) {
              return new MethodCall(ast.span, ast.sourceSpan, ast.nameSpan, receiver, ast.name, args);
            }

            return ast;
          }
        }, {
          key: "visitSafeMethodCall",
          value: function visitSafeMethodCall(ast, context) {
            var receiver = ast.receiver.visit(this);
            var args = this.visitAll(ast.args);

            if (receiver !== ast.receiver || args !== ast.args) {
              return new SafeMethodCall(ast.span, ast.sourceSpan, ast.nameSpan, receiver, ast.name, args);
            }

            return ast;
          }
        }, {
          key: "visitFunctionCall",
          value: function visitFunctionCall(ast, context) {
            var target = ast.target && ast.target.visit(this);
            var args = this.visitAll(ast.args);

            if (target !== ast.target || args !== ast.args) {
              return new FunctionCall(ast.span, ast.sourceSpan, target, args);
            }

            return ast;
          }
        }, {
          key: "visitLiteralArray",
          value: function visitLiteralArray(ast, context) {
            var expressions = this.visitAll(ast.expressions);

            if (expressions !== ast.expressions) {
              return new LiteralArray(ast.span, ast.sourceSpan, expressions);
            }

            return ast;
          }
        }, {
          key: "visitLiteralMap",
          value: function visitLiteralMap(ast, context) {
            var values = this.visitAll(ast.values);

            if (values !== ast.values) {
              return new LiteralMap(ast.span, ast.sourceSpan, ast.keys, values);
            }

            return ast;
          }
        }, {
          key: "visitUnary",
          value: function visitUnary(ast, context) {
            var expr = ast.expr.visit(this);

            if (expr !== ast.expr) {
              switch (ast.operator) {
                case '+':
                  return Unary.createPlus(ast.span, ast.sourceSpan, expr);

                case '-':
                  return Unary.createMinus(ast.span, ast.sourceSpan, expr);

                default:
                  throw new Error("Unknown unary operator ".concat(ast.operator));
              }
            }

            return ast;
          }
        }, {
          key: "visitBinary",
          value: function visitBinary(ast, context) {
            var left = ast.left.visit(this);
            var right = ast.right.visit(this);

            if (left !== ast.left || right !== ast.right) {
              return new Binary(ast.span, ast.sourceSpan, ast.operation, left, right);
            }

            return ast;
          }
        }, {
          key: "visitPrefixNot",
          value: function visitPrefixNot(ast, context) {
            var expression = ast.expression.visit(this);

            if (expression !== ast.expression) {
              return new PrefixNot(ast.span, ast.sourceSpan, expression);
            }

            return ast;
          }
        }, {
          key: "visitNonNullAssert",
          value: function visitNonNullAssert(ast, context) {
            var expression = ast.expression.visit(this);

            if (expression !== ast.expression) {
              return new NonNullAssert(ast.span, ast.sourceSpan, expression);
            }

            return ast;
          }
        }, {
          key: "visitConditional",
          value: function visitConditional(ast, context) {
            var condition = ast.condition.visit(this);
            var trueExp = ast.trueExp.visit(this);
            var falseExp = ast.falseExp.visit(this);

            if (condition !== ast.condition || trueExp !== ast.trueExp || falseExp !== ast.falseExp) {
              return new Conditional(ast.span, ast.sourceSpan, condition, trueExp, falseExp);
            }

            return ast;
          }
        }, {
          key: "visitPipe",
          value: function visitPipe(ast, context) {
            var exp = ast.exp.visit(this);
            var args = this.visitAll(ast.args);

            if (exp !== ast.exp || args !== ast.args) {
              return new BindingPipe(ast.span, ast.sourceSpan, exp, ast.name, args, ast.nameSpan);
            }

            return ast;
          }
        }, {
          key: "visitKeyedRead",
          value: function visitKeyedRead(ast, context) {
            var obj = ast.obj.visit(this);
            var key = ast.key.visit(this);

            if (obj !== ast.obj || key !== ast.key) {
              return new KeyedRead(ast.span, ast.sourceSpan, obj, key);
            }

            return ast;
          }
        }, {
          key: "visitKeyedWrite",
          value: function visitKeyedWrite(ast, context) {
            var obj = ast.obj.visit(this);
            var key = ast.key.visit(this);
            var value = ast.value.visit(this);

            if (obj !== ast.obj || key !== ast.key || value !== ast.value) {
              return new KeyedWrite(ast.span, ast.sourceSpan, obj, key, value);
            }

            return ast;
          }
        }, {
          key: "visitAll",
          value: function visitAll(asts) {
            var res = [];
            var modified = false;

            for (var i = 0; i < asts.length; ++i) {
              var original = asts[i];
              var value = original.visit(this);
              res[i] = value;
              modified = modified || value !== original;
            }

            return modified ? res : asts;
          }
        }, {
          key: "visitChain",
          value: function visitChain(ast, context) {
            var expressions = this.visitAll(ast.expressions);

            if (expressions !== ast.expressions) {
              return new Chain(ast.span, ast.sourceSpan, expressions);
            }

            return ast;
          }
        }, {
          key: "visitQuote",
          value: function visitQuote(ast, context) {
            return ast;
          }
        }]);

        return AstMemoryEfficientTransformer;
      }(); // Bindings


      var ParsedProperty = function ParsedProperty(name, expression, type, // TODO(FW-2095): `keySpan` should really be required but allows `undefined` so VE does
      // not need to be updated. Make `keySpan` required when VE is removed.
      sourceSpan, keySpan, valueSpan) {
        _classCallCheck(this, ParsedProperty);

        this.name = name;
        this.expression = expression;
        this.type = type;
        this.sourceSpan = sourceSpan;
        this.keySpan = keySpan;
        this.valueSpan = valueSpan;
        this.isLiteral = this.type === ParsedPropertyType.LITERAL_ATTR;
        this.isAnimation = this.type === ParsedPropertyType.ANIMATION;
      };

      var ParsedPropertyType;

      (function (ParsedPropertyType) {
        ParsedPropertyType[ParsedPropertyType["DEFAULT"] = 0] = "DEFAULT";
        ParsedPropertyType[ParsedPropertyType["LITERAL_ATTR"] = 1] = "LITERAL_ATTR";
        ParsedPropertyType[ParsedPropertyType["ANIMATION"] = 2] = "ANIMATION";
      })(ParsedPropertyType || (ParsedPropertyType = {}));

      var ParsedEvent = // Regular events have a target
      // Animation events have a phase
      function ParsedEvent(name, targetOrPhase, type, handler, sourceSpan, // TODO(FW-2095): keySpan should be required but was made optional to avoid changing VE
      handlerSpan, keySpan) {
        _classCallCheck(this, ParsedEvent);

        this.name = name;
        this.targetOrPhase = targetOrPhase;
        this.type = type;
        this.handler = handler;
        this.sourceSpan = sourceSpan;
        this.handlerSpan = handlerSpan;
        this.keySpan = keySpan;
      };
      /**
       * ParsedVariable represents a variable declaration in a microsyntax expression.
       */


      var ParsedVariable = function ParsedVariable(name, value, sourceSpan, keySpan, valueSpan) {
        _classCallCheck(this, ParsedVariable);

        this.name = name;
        this.value = value;
        this.sourceSpan = sourceSpan;
        this.keySpan = keySpan;
        this.valueSpan = valueSpan;
      };

      var BoundElementProperty = function BoundElementProperty(name, type, securityContext, value, unit, sourceSpan, keySpan, valueSpan) {
        _classCallCheck(this, BoundElementProperty);

        this.name = name;
        this.type = type;
        this.securityContext = securityContext;
        this.value = value;
        this.unit = unit;
        this.sourceSpan = sourceSpan;
        this.keySpan = keySpan;
        this.valueSpan = valueSpan;
      };
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      var EventHandlerVars = function EventHandlerVars() {
        _classCallCheck(this, EventHandlerVars);
      };

      EventHandlerVars.event = variable('$event');

      var ConvertActionBindingResult = function ConvertActionBindingResult(
      /**
       * Render2 compatible statements,
       */
      stmts,
      /**
       * Variable name used with render2 compatible statements.
       */
      allowDefault) {
        _classCallCheck(this, ConvertActionBindingResult);

        this.stmts = stmts;
        this.allowDefault = allowDefault;
        /**
         * This is bit of a hack. It converts statements which render2 expects to statements which are
         * expected by render3.
         *
         * Example: `<div click="doSomething($event)">` will generate:
         *
         * Render3:
         * ```
         * const pd_b:any = ((<any>ctx.doSomething($event)) !== false);
         * return pd_b;
         * ```
         *
         * but render2 expects:
         * ```
         * return ctx.doSomething($event);
         * ```
         */
        // TODO(misko): remove this hack once we no longer support ViewEngine.

        this.render3Stmts = stmts.map(function (statement) {
          if (statement instanceof DeclareVarStmt && statement.name == allowDefault.name && statement.value instanceof BinaryOperatorExpr) {
            var lhs = statement.value.lhs;
            return new ReturnStatement(lhs.value);
          }

          return statement;
        });
      };
      /**
       * Converts the given expression AST into an executable output AST, assuming the expression is
       * used in an action binding (e.g. an event handler).
       */


      function convertActionBinding(localResolver, implicitReceiver, action, bindingId, interpolationFunction, baseSourceSpan, implicitReceiverAccesses, globals) {
        if (!localResolver) {
          localResolver = new DefaultLocalResolver(globals);
        }

        var actionWithoutBuiltins = convertPropertyBindingBuiltins({
          createLiteralArrayConverter: function createLiteralArrayConverter(argCount) {
            // Note: no caching for literal arrays in actions.
            return function (args) {
              return literalArr(args);
            };
          },
          createLiteralMapConverter: function createLiteralMapConverter(keys) {
            // Note: no caching for literal maps in actions.
            return function (values) {
              var entries = keys.map(function (k, i) {
                return {
                  key: k.key,
                  value: values[i],
                  quoted: k.quoted
                };
              });
              return literalMap(entries);
            };
          },
          createPipeConverter: function createPipeConverter(name) {
            throw new Error("Illegal State: Actions are not allowed to contain pipes. Pipe: ".concat(name));
          }
        }, action);
        var visitor = new _AstToIrVisitor(localResolver, implicitReceiver, bindingId, interpolationFunction, baseSourceSpan, implicitReceiverAccesses);
        var actionStmts = [];
        flattenStatements(actionWithoutBuiltins.visit(visitor, _Mode.Statement), actionStmts);
        prependTemporaryDecls(visitor.temporaryCount, bindingId, actionStmts);

        if (visitor.usesImplicitReceiver) {
          localResolver.notifyImplicitReceiverUse();
        }

        var lastIndex = actionStmts.length - 1;
        var preventDefaultVar = null;

        if (lastIndex >= 0) {
          var lastStatement = actionStmts[lastIndex];
          var returnExpr = convertStmtIntoExpression(lastStatement);

          if (returnExpr) {
            // Note: We need to cast the result of the method call to dynamic,
            // as it might be a void method!
            preventDefaultVar = createPreventDefaultVar(bindingId);
            actionStmts[lastIndex] = preventDefaultVar.set(returnExpr.cast(DYNAMIC_TYPE).notIdentical(literal(false))).toDeclStmt(null, [StmtModifier.Final]);
          }
        }

        return new ConvertActionBindingResult(actionStmts, preventDefaultVar);
      }

      function convertPropertyBindingBuiltins(converterFactory, ast) {
        return convertBuiltins(converterFactory, ast);
      }

      var ConvertPropertyBindingResult = function ConvertPropertyBindingResult(stmts, currValExpr) {
        _classCallCheck(this, ConvertPropertyBindingResult);

        this.stmts = stmts;
        this.currValExpr = currValExpr;
      };

      var BindingForm;

      (function (BindingForm) {
        // The general form of binding expression, supports all expressions.
        BindingForm[BindingForm["General"] = 0] = "General"; // Try to generate a simple binding (no temporaries or statements)
        // otherwise generate a general binding

        BindingForm[BindingForm["TrySimple"] = 1] = "TrySimple"; // Inlines assignment of temporaries into the generated expression. The result may still
        // have statements attached for declarations of temporary variables.
        // This is the only relevant form for Ivy, the other forms are only used in ViewEngine.

        BindingForm[BindingForm["Expression"] = 2] = "Expression";
      })(BindingForm || (BindingForm = {}));
      /**
       * Converts the given expression AST into an executable output AST, assuming the expression
       * is used in property binding. The expression has to be preprocessed via
       * `convertPropertyBindingBuiltins`.
       */


      function _convertPropertyBinding(localResolver, implicitReceiver, expressionWithoutBuiltins, bindingId, form, interpolationFunction) {
        if (!localResolver) {
          localResolver = new DefaultLocalResolver();
        }

        var visitor = new _AstToIrVisitor(localResolver, implicitReceiver, bindingId, interpolationFunction);
        var outputExpr = expressionWithoutBuiltins.visit(visitor, _Mode.Expression);
        var stmts = getStatementsFromVisitor(visitor, bindingId);

        if (visitor.usesImplicitReceiver) {
          localResolver.notifyImplicitReceiverUse();
        }

        if (visitor.temporaryCount === 0 && form == BindingForm.TrySimple) {
          return new ConvertPropertyBindingResult([], outputExpr);
        } else if (form === BindingForm.Expression) {
          return new ConvertPropertyBindingResult(stmts, outputExpr);
        }

        var currValExpr = createCurrValueExpr(bindingId);
        stmts.push(currValExpr.set(outputExpr).toDeclStmt(DYNAMIC_TYPE, [StmtModifier.Final]));
        return new ConvertPropertyBindingResult(stmts, currValExpr);
      }
      /**
       * Given some expression, such as a binding or interpolation expression, and a context expression to
       * look values up on, visit each facet of the given expression resolving values from the context
       * expression such that a list of arguments can be derived from the found values that can be used as
       * arguments to an external update instruction.
       *
       * @param localResolver The resolver to use to look up expressions by name appropriately
       * @param contextVariableExpression The expression representing the context variable used to create
       * the final argument expressions
       * @param expressionWithArgumentsToExtract The expression to visit to figure out what values need to
       * be resolved and what arguments list to build.
       * @param bindingId A name prefix used to create temporary variable names if they're needed for the
       * arguments generated
       * @returns An array of expressions that can be passed as arguments to instruction expressions like
       * `o.importExpr(R3.propertyInterpolate).callFn(result)`
       */


      function convertUpdateArguments(localResolver, contextVariableExpression, expressionWithArgumentsToExtract, bindingId) {
        var visitor = new _AstToIrVisitor(localResolver, contextVariableExpression, bindingId, undefined);
        var outputExpr = expressionWithArgumentsToExtract.visit(visitor, _Mode.Expression);

        if (visitor.usesImplicitReceiver) {
          localResolver.notifyImplicitReceiverUse();
        }

        var stmts = getStatementsFromVisitor(visitor, bindingId); // Removing the first argument, because it was a length for ViewEngine, not Ivy.

        var args = outputExpr.args.slice(1);

        if (expressionWithArgumentsToExtract instanceof Interpolation) {
          // If we're dealing with an interpolation of 1 value with an empty prefix and suffix, reduce the
          // args returned to just the value, because we're going to pass it to a special instruction.
          var strings = expressionWithArgumentsToExtract.strings;

          if (args.length === 3 && strings[0] === '' && strings[1] === '') {
            // Single argument interpolate instructions.
            args = [args[1]];
          } else if (args.length >= 19) {
            // 19 or more arguments must be passed to the `interpolateV`-style instructions, which accept
            // an array of arguments
            args = [literalArr(args)];
          }
        }

        return {
          stmts: stmts,
          args: args
        };
      }

      function getStatementsFromVisitor(visitor, bindingId) {
        var stmts = [];

        for (var i = 0; i < visitor.temporaryCount; i++) {
          stmts.push(temporaryDeclaration(bindingId, i));
        }

        return stmts;
      }

      function convertBuiltins(converterFactory, ast) {
        var visitor = new _BuiltinAstConverter(converterFactory);
        return ast.visit(visitor);
      }

      function temporaryName(bindingId, temporaryNumber) {
        return "tmp_".concat(bindingId, "_").concat(temporaryNumber);
      }

      function temporaryDeclaration(bindingId, temporaryNumber) {
        return new DeclareVarStmt(temporaryName(bindingId, temporaryNumber), NULL_EXPR);
      }

      function prependTemporaryDecls(temporaryCount, bindingId, statements) {
        for (var i = temporaryCount - 1; i >= 0; i--) {
          statements.unshift(temporaryDeclaration(bindingId, i));
        }
      }

      var _Mode;

      (function (_Mode) {
        _Mode[_Mode["Statement"] = 0] = "Statement";
        _Mode[_Mode["Expression"] = 1] = "Expression";
      })(_Mode || (_Mode = {}));

      function ensureStatementMode(mode, ast) {
        if (mode !== _Mode.Statement) {
          throw new Error("Expected a statement, but saw ".concat(ast));
        }
      }

      function ensureExpressionMode(mode, ast) {
        if (mode !== _Mode.Expression) {
          throw new Error("Expected an expression, but saw ".concat(ast));
        }
      }

      function convertToStatementIfNeeded(mode, expr) {
        if (mode === _Mode.Statement) {
          return expr.toStmt();
        } else {
          return expr;
        }
      }

      var _BuiltinAstConverter = /*#__PURE__*/function (_AstTransformer$) {
        _inherits(_BuiltinAstConverter, _AstTransformer$);

        var _super79 = _createSuper(_BuiltinAstConverter);

        function _BuiltinAstConverter(_converterFactory) {
          var _this111;

          _classCallCheck(this, _BuiltinAstConverter);

          _this111 = _super79.call(this);
          _this111._converterFactory = _converterFactory;
          return _this111;
        }

        _createClass(_BuiltinAstConverter, [{
          key: "visitPipe",
          value: function visitPipe(ast, context) {
            var _this112 = this;

            var args = [ast.exp].concat(_toConsumableArray(ast.args)).map(function (ast) {
              return ast.visit(_this112, context);
            });
            return new BuiltinFunctionCall(ast.span, ast.sourceSpan, args, this._converterFactory.createPipeConverter(ast.name, args.length));
          }
        }, {
          key: "visitLiteralArray",
          value: function visitLiteralArray(ast, context) {
            var _this113 = this;

            var args = ast.expressions.map(function (ast) {
              return ast.visit(_this113, context);
            });
            return new BuiltinFunctionCall(ast.span, ast.sourceSpan, args, this._converterFactory.createLiteralArrayConverter(ast.expressions.length));
          }
        }, {
          key: "visitLiteralMap",
          value: function visitLiteralMap(ast, context) {
            var _this114 = this;

            var args = ast.values.map(function (ast) {
              return ast.visit(_this114, context);
            });
            return new BuiltinFunctionCall(ast.span, ast.sourceSpan, args, this._converterFactory.createLiteralMapConverter(ast.keys));
          }
        }]);

        return _BuiltinAstConverter;
      }(AstTransformer$1);

      var _AstToIrVisitor = /*#__PURE__*/function () {
        function _AstToIrVisitor(_localResolver, _implicitReceiver, bindingId, interpolationFunction, baseSourceSpan, implicitReceiverAccesses) {
          _classCallCheck(this, _AstToIrVisitor);

          this._localResolver = _localResolver;
          this._implicitReceiver = _implicitReceiver;
          this.bindingId = bindingId;
          this.interpolationFunction = interpolationFunction;
          this.baseSourceSpan = baseSourceSpan;
          this.implicitReceiverAccesses = implicitReceiverAccesses;
          this._nodeMap = new Map();
          this._resultMap = new Map();
          this._currentTemporary = 0;
          this.temporaryCount = 0;
          this.usesImplicitReceiver = false;
        }

        _createClass(_AstToIrVisitor, [{
          key: "visitUnary",
          value: function visitUnary(ast, mode) {
            var op;

            switch (ast.operator) {
              case '+':
                op = UnaryOperator.Plus;
                break;

              case '-':
                op = UnaryOperator.Minus;
                break;

              default:
                throw new Error("Unsupported operator ".concat(ast.operator));
            }

            return convertToStatementIfNeeded(mode, new UnaryOperatorExpr(op, this._visit(ast.expr, _Mode.Expression), undefined, this.convertSourceSpan(ast.span)));
          }
        }, {
          key: "visitBinary",
          value: function visitBinary(ast, mode) {
            var op;

            switch (ast.operation) {
              case '+':
                op = BinaryOperator.Plus;
                break;

              case '-':
                op = BinaryOperator.Minus;
                break;

              case '*':
                op = BinaryOperator.Multiply;
                break;

              case '/':
                op = BinaryOperator.Divide;
                break;

              case '%':
                op = BinaryOperator.Modulo;
                break;

              case '&&':
                op = BinaryOperator.And;
                break;

              case '||':
                op = BinaryOperator.Or;
                break;

              case '==':
                op = BinaryOperator.Equals;
                break;

              case '!=':
                op = BinaryOperator.NotEquals;
                break;

              case '===':
                op = BinaryOperator.Identical;
                break;

              case '!==':
                op = BinaryOperator.NotIdentical;
                break;

              case '<':
                op = BinaryOperator.Lower;
                break;

              case '>':
                op = BinaryOperator.Bigger;
                break;

              case '<=':
                op = BinaryOperator.LowerEquals;
                break;

              case '>=':
                op = BinaryOperator.BiggerEquals;
                break;

              default:
                throw new Error("Unsupported operation ".concat(ast.operation));
            }

            return convertToStatementIfNeeded(mode, new BinaryOperatorExpr(op, this._visit(ast.left, _Mode.Expression), this._visit(ast.right, _Mode.Expression), undefined, this.convertSourceSpan(ast.span)));
          }
        }, {
          key: "visitChain",
          value: function visitChain(ast, mode) {
            ensureStatementMode(mode, ast);
            return this.visitAll(ast.expressions, mode);
          }
        }, {
          key: "visitConditional",
          value: function visitConditional(ast, mode) {
            var value = this._visit(ast.condition, _Mode.Expression);

            return convertToStatementIfNeeded(mode, value.conditional(this._visit(ast.trueExp, _Mode.Expression), this._visit(ast.falseExp, _Mode.Expression), this.convertSourceSpan(ast.span)));
          }
        }, {
          key: "visitPipe",
          value: function visitPipe(ast, mode) {
            throw new Error("Illegal state: Pipes should have been converted into functions. Pipe: ".concat(ast.name));
          }
        }, {
          key: "visitFunctionCall",
          value: function visitFunctionCall(ast, mode) {
            var convertedArgs = this.visitAll(ast.args, _Mode.Expression);
            var fnResult;

            if (ast instanceof BuiltinFunctionCall) {
              fnResult = ast.converter(convertedArgs);
            } else {
              fnResult = this._visit(ast.target, _Mode.Expression).callFn(convertedArgs, this.convertSourceSpan(ast.span));
            }

            return convertToStatementIfNeeded(mode, fnResult);
          }
        }, {
          key: "visitImplicitReceiver",
          value: function visitImplicitReceiver(ast, mode) {
            ensureExpressionMode(mode, ast);
            this.usesImplicitReceiver = true;
            return this._implicitReceiver;
          }
        }, {
          key: "visitThisReceiver",
          value: function visitThisReceiver(ast, mode) {
            return this.visitImplicitReceiver(ast, mode);
          }
        }, {
          key: "visitInterpolation",
          value: function visitInterpolation(ast, mode) {
            ensureExpressionMode(mode, ast);
            var args = [literal(ast.expressions.length)];

            for (var i = 0; i < ast.strings.length - 1; i++) {
              args.push(literal(ast.strings[i]));
              args.push(this._visit(ast.expressions[i], _Mode.Expression));
            }

            args.push(literal(ast.strings[ast.strings.length - 1]));

            if (this.interpolationFunction) {
              return this.interpolationFunction(args);
            }

            return ast.expressions.length <= 9 ? importExpr(Identifiers.inlineInterpolate).callFn(args) : importExpr(Identifiers.interpolate).callFn([args[0], literalArr(args.slice(1), undefined, this.convertSourceSpan(ast.span))]);
          }
        }, {
          key: "visitKeyedRead",
          value: function visitKeyedRead(ast, mode) {
            var leftMostSafe = this.leftMostSafeNode(ast);

            if (leftMostSafe) {
              return this.convertSafeAccess(ast, leftMostSafe, mode);
            } else {
              return convertToStatementIfNeeded(mode, this._visit(ast.obj, _Mode.Expression).key(this._visit(ast.key, _Mode.Expression)));
            }
          }
        }, {
          key: "visitKeyedWrite",
          value: function visitKeyedWrite(ast, mode) {
            var obj = this._visit(ast.obj, _Mode.Expression);

            var key = this._visit(ast.key, _Mode.Expression);

            var value = this._visit(ast.value, _Mode.Expression);

            return convertToStatementIfNeeded(mode, obj.key(key).set(value));
          }
        }, {
          key: "visitLiteralArray",
          value: function visitLiteralArray(ast, mode) {
            throw new Error("Illegal State: literal arrays should have been converted into functions");
          }
        }, {
          key: "visitLiteralMap",
          value: function visitLiteralMap(ast, mode) {
            throw new Error("Illegal State: literal maps should have been converted into functions");
          }
        }, {
          key: "visitLiteralPrimitive",
          value: function visitLiteralPrimitive(ast, mode) {
            // For literal values of null, undefined, true, or false allow type interference
            // to infer the type.
            var type = ast.value === null || ast.value === undefined || ast.value === true || ast.value === true ? INFERRED_TYPE : undefined;
            return convertToStatementIfNeeded(mode, literal(ast.value, type, this.convertSourceSpan(ast.span)));
          }
        }, {
          key: "_getLocal",
          value: function _getLocal(name, receiver) {
            var _a;

            if (((_a = this._localResolver.globals) === null || _a === void 0 ? void 0 : _a.has(name)) && receiver instanceof ThisReceiver) {
              return null;
            }

            return this._localResolver.getLocal(name);
          }
        }, {
          key: "visitMethodCall",
          value: function visitMethodCall(ast, mode) {
            if (ast.receiver instanceof ImplicitReceiver && !(ast.receiver instanceof ThisReceiver) && ast.name === '$any') {
              var args = this.visitAll(ast.args, _Mode.Expression);

              if (args.length != 1) {
                throw new Error("Invalid call to $any, expected 1 argument but received ".concat(args.length || 'none'));
              }

              return args[0].cast(DYNAMIC_TYPE, this.convertSourceSpan(ast.span));
            }

            var leftMostSafe = this.leftMostSafeNode(ast);

            if (leftMostSafe) {
              return this.convertSafeAccess(ast, leftMostSafe, mode);
            } else {
              var _args = this.visitAll(ast.args, _Mode.Expression);

              var prevUsesImplicitReceiver = this.usesImplicitReceiver;
              var result = null;

              var receiver = this._visit(ast.receiver, _Mode.Expression);

              if (receiver === this._implicitReceiver) {
                var varExpr = this._getLocal(ast.name, ast.receiver);

                if (varExpr) {
                  // Restore the previous "usesImplicitReceiver" state since the implicit
                  // receiver has been replaced with a resolved local expression.
                  this.usesImplicitReceiver = prevUsesImplicitReceiver;
                  result = varExpr.callFn(_args);
                  this.addImplicitReceiverAccess(ast.name);
                }
              }

              if (result == null) {
                result = receiver.callMethod(ast.name, _args, this.convertSourceSpan(ast.span));
              }

              return convertToStatementIfNeeded(mode, result);
            }
          }
        }, {
          key: "visitPrefixNot",
          value: function visitPrefixNot(ast, mode) {
            return convertToStatementIfNeeded(mode, not(this._visit(ast.expression, _Mode.Expression)));
          }
        }, {
          key: "visitNonNullAssert",
          value: function visitNonNullAssert(ast, mode) {
            return convertToStatementIfNeeded(mode, assertNotNull(this._visit(ast.expression, _Mode.Expression)));
          }
        }, {
          key: "visitPropertyRead",
          value: function visitPropertyRead(ast, mode) {
            var leftMostSafe = this.leftMostSafeNode(ast);

            if (leftMostSafe) {
              return this.convertSafeAccess(ast, leftMostSafe, mode);
            } else {
              var result = null;
              var prevUsesImplicitReceiver = this.usesImplicitReceiver;

              var receiver = this._visit(ast.receiver, _Mode.Expression);

              if (receiver === this._implicitReceiver) {
                result = this._getLocal(ast.name, ast.receiver);

                if (result) {
                  // Restore the previous "usesImplicitReceiver" state since the implicit
                  // receiver has been replaced with a resolved local expression.
                  this.usesImplicitReceiver = prevUsesImplicitReceiver;
                  this.addImplicitReceiverAccess(ast.name);
                }
              }

              if (result == null) {
                result = receiver.prop(ast.name);
              }

              return convertToStatementIfNeeded(mode, result);
            }
          }
        }, {
          key: "visitPropertyWrite",
          value: function visitPropertyWrite(ast, mode) {
            var receiver = this._visit(ast.receiver, _Mode.Expression);

            var prevUsesImplicitReceiver = this.usesImplicitReceiver;
            var varExpr = null;

            if (receiver === this._implicitReceiver) {
              var localExpr = this._getLocal(ast.name, ast.receiver);

              if (localExpr) {
                if (localExpr instanceof ReadPropExpr) {
                  // If the local variable is a property read expression, it's a reference
                  // to a 'context.property' value and will be used as the target of the
                  // write expression.
                  varExpr = localExpr; // Restore the previous "usesImplicitReceiver" state since the implicit
                  // receiver has been replaced with a resolved local expression.

                  this.usesImplicitReceiver = prevUsesImplicitReceiver;
                  this.addImplicitReceiverAccess(ast.name);
                } else {
                  // Otherwise it's an error.
                  var _receiver = ast.name;
                  var value = ast.value instanceof PropertyRead ? ast.value.name : undefined;
                  throw new Error("Cannot assign value \"".concat(value, "\" to template variable \"").concat(_receiver, "\". Template variables are read-only."));
                }
              }
            } // If no local expression could be produced, use the original receiver's
            // property as the target.


            if (varExpr === null) {
              varExpr = receiver.prop(ast.name);
            }

            return convertToStatementIfNeeded(mode, varExpr.set(this._visit(ast.value, _Mode.Expression)));
          }
        }, {
          key: "visitSafePropertyRead",
          value: function visitSafePropertyRead(ast, mode) {
            return this.convertSafeAccess(ast, this.leftMostSafeNode(ast), mode);
          }
        }, {
          key: "visitSafeMethodCall",
          value: function visitSafeMethodCall(ast, mode) {
            return this.convertSafeAccess(ast, this.leftMostSafeNode(ast), mode);
          }
        }, {
          key: "visitAll",
          value: function visitAll(asts, mode) {
            var _this115 = this;

            return asts.map(function (ast) {
              return _this115._visit(ast, mode);
            });
          }
        }, {
          key: "visitQuote",
          value: function visitQuote(ast, mode) {
            throw new Error("Quotes are not supported for evaluation!\n        Statement: ".concat(ast.uninterpretedExpression, " located at ").concat(ast.location));
          }
        }, {
          key: "_visit",
          value: function _visit(ast, mode) {
            var result = this._resultMap.get(ast);

            if (result) return result;
            return (this._nodeMap.get(ast) || ast).visit(this, mode);
          }
        }, {
          key: "convertSafeAccess",
          value: function convertSafeAccess(ast, leftMostSafe, mode) {
            // If the expression contains a safe access node on the left it needs to be converted to
            // an expression that guards the access to the member by checking the receiver for blank. As
            // execution proceeds from left to right, the left most part of the expression must be guarded
            // first but, because member access is left associative, the right side of the expression is at
            // the top of the AST. The desired result requires lifting a copy of the left part of the
            // expression up to test it for blank before generating the unguarded version.
            // Consider, for example the following expression: a?.b.c?.d.e
            // This results in the ast:
            //         .
            //        / \
            //       ?.   e
            //      /  \
            //     .    d
            //    / \
            //   ?.  c
            //  /  \
            // a    b
            // The following tree should be generated:
            //
            //        /---- ? ----\
            //       /      |      \
            //     a   /--- ? ---\  null
            //        /     |     \
            //       .      .     null
            //      / \    / \
            //     .  c   .   e
            //    / \    / \
            //   a   b  .   d
            //         / \
            //        .   c
            //       / \
            //      a   b
            //
            // Notice that the first guard condition is the left hand of the left most safe access node
            // which comes in as leftMostSafe to this routine.
            var guardedExpression = this._visit(leftMostSafe.receiver, _Mode.Expression);

            var temporary = undefined;

            if (this.needsTemporary(leftMostSafe.receiver)) {
              // If the expression has method calls or pipes then we need to save the result into a
              // temporary variable to avoid calling stateful or impure code more than once.
              temporary = this.allocateTemporary(); // Preserve the result in the temporary variable

              guardedExpression = temporary.set(guardedExpression); // Ensure all further references to the guarded expression refer to the temporary instead.

              this._resultMap.set(leftMostSafe.receiver, temporary);
            }

            var condition = guardedExpression.isBlank(); // Convert the ast to an unguarded access to the receiver's member. The map will substitute
            // leftMostNode with its unguarded version in the call to `this.visit()`.

            if (leftMostSafe instanceof SafeMethodCall) {
              this._nodeMap.set(leftMostSafe, new MethodCall(leftMostSafe.span, leftMostSafe.sourceSpan, leftMostSafe.nameSpan, leftMostSafe.receiver, leftMostSafe.name, leftMostSafe.args));
            } else {
              this._nodeMap.set(leftMostSafe, new PropertyRead(leftMostSafe.span, leftMostSafe.sourceSpan, leftMostSafe.nameSpan, leftMostSafe.receiver, leftMostSafe.name));
            } // Recursively convert the node now without the guarded member access.


            var access = this._visit(ast, _Mode.Expression); // Remove the mapping. This is not strictly required as the converter only traverses each node
            // once but is safer if the conversion is changed to traverse the nodes more than once.


            this._nodeMap["delete"](leftMostSafe); // If we allocated a temporary, release it.


            if (temporary) {
              this.releaseTemporary(temporary);
            } // Produce the conditional


            return convertToStatementIfNeeded(mode, condition.conditional(literal(null), access));
          } // Given an expression of the form a?.b.c?.d.e then the left most safe node is
          // the (a?.b). The . and ?. are left associative thus can be rewritten as:
          // ((((a?.c).b).c)?.d).e. This returns the most deeply nested safe read or
          // safe method call as this needs to be transformed initially to:
          //   a == null ? null : a.c.b.c?.d.e
          // then to:
          //   a == null ? null : a.b.c == null ? null : a.b.c.d.e

        }, {
          key: "leftMostSafeNode",
          value: function leftMostSafeNode(ast) {
            var _this116 = this;

            var visit = function visit(visitor, ast) {
              return (_this116._nodeMap.get(ast) || ast).visit(visitor);
            };

            return ast.visit({
              visitUnary: function visitUnary(ast) {
                return null;
              },
              visitBinary: function visitBinary(ast) {
                return null;
              },
              visitChain: function visitChain(ast) {
                return null;
              },
              visitConditional: function visitConditional(ast) {
                return null;
              },
              visitFunctionCall: function visitFunctionCall(ast) {
                return null;
              },
              visitImplicitReceiver: function visitImplicitReceiver(ast) {
                return null;
              },
              visitThisReceiver: function visitThisReceiver(ast) {
                return null;
              },
              visitInterpolation: function visitInterpolation(ast) {
                return null;
              },
              visitKeyedRead: function visitKeyedRead(ast) {
                return visit(this, ast.obj);
              },
              visitKeyedWrite: function visitKeyedWrite(ast) {
                return null;
              },
              visitLiteralArray: function visitLiteralArray(ast) {
                return null;
              },
              visitLiteralMap: function visitLiteralMap(ast) {
                return null;
              },
              visitLiteralPrimitive: function visitLiteralPrimitive(ast) {
                return null;
              },
              visitMethodCall: function visitMethodCall(ast) {
                return visit(this, ast.receiver);
              },
              visitPipe: function visitPipe(ast) {
                return null;
              },
              visitPrefixNot: function visitPrefixNot(ast) {
                return null;
              },
              visitNonNullAssert: function visitNonNullAssert(ast) {
                return null;
              },
              visitPropertyRead: function visitPropertyRead(ast) {
                return visit(this, ast.receiver);
              },
              visitPropertyWrite: function visitPropertyWrite(ast) {
                return null;
              },
              visitQuote: function visitQuote(ast) {
                return null;
              },
              visitSafeMethodCall: function visitSafeMethodCall(ast) {
                return visit(this, ast.receiver) || ast;
              },
              visitSafePropertyRead: function visitSafePropertyRead(ast) {
                return visit(this, ast.receiver) || ast;
              }
            });
          } // Returns true of the AST includes a method or a pipe indicating that, if the
          // expression is used as the target of a safe property or method access then
          // the expression should be stored into a temporary variable.

        }, {
          key: "needsTemporary",
          value: function needsTemporary(ast) {
            var _this117 = this;

            var visit = function visit(visitor, ast) {
              return ast && (_this117._nodeMap.get(ast) || ast).visit(visitor);
            };

            var visitSome = function visitSome(visitor, ast) {
              return ast.some(function (ast) {
                return visit(visitor, ast);
              });
            };

            return ast.visit({
              visitUnary: function visitUnary(ast) {
                return visit(this, ast.expr);
              },
              visitBinary: function visitBinary(ast) {
                return visit(this, ast.left) || visit(this, ast.right);
              },
              visitChain: function visitChain(ast) {
                return false;
              },
              visitConditional: function visitConditional(ast) {
                return visit(this, ast.condition) || visit(this, ast.trueExp) || visit(this, ast.falseExp);
              },
              visitFunctionCall: function visitFunctionCall(ast) {
                return true;
              },
              visitImplicitReceiver: function visitImplicitReceiver(ast) {
                return false;
              },
              visitThisReceiver: function visitThisReceiver(ast) {
                return false;
              },
              visitInterpolation: function visitInterpolation(ast) {
                return visitSome(this, ast.expressions);
              },
              visitKeyedRead: function visitKeyedRead(ast) {
                return false;
              },
              visitKeyedWrite: function visitKeyedWrite(ast) {
                return false;
              },
              visitLiteralArray: function visitLiteralArray(ast) {
                return true;
              },
              visitLiteralMap: function visitLiteralMap(ast) {
                return true;
              },
              visitLiteralPrimitive: function visitLiteralPrimitive(ast) {
                return false;
              },
              visitMethodCall: function visitMethodCall(ast) {
                return true;
              },
              visitPipe: function visitPipe(ast) {
                return true;
              },
              visitPrefixNot: function visitPrefixNot(ast) {
                return visit(this, ast.expression);
              },
              visitNonNullAssert: function visitNonNullAssert(ast) {
                return visit(this, ast.expression);
              },
              visitPropertyRead: function visitPropertyRead(ast) {
                return false;
              },
              visitPropertyWrite: function visitPropertyWrite(ast) {
                return false;
              },
              visitQuote: function visitQuote(ast) {
                return false;
              },
              visitSafeMethodCall: function visitSafeMethodCall(ast) {
                return true;
              },
              visitSafePropertyRead: function visitSafePropertyRead(ast) {
                return false;
              }
            });
          }
        }, {
          key: "allocateTemporary",
          value: function allocateTemporary() {
            var tempNumber = this._currentTemporary++;
            this.temporaryCount = Math.max(this._currentTemporary, this.temporaryCount);
            return new ReadVarExpr(temporaryName(this.bindingId, tempNumber));
          }
        }, {
          key: "releaseTemporary",
          value: function releaseTemporary(temporary) {
            this._currentTemporary--;

            if (temporary.name != temporaryName(this.bindingId, this._currentTemporary)) {
              throw new Error("Temporary ".concat(temporary.name, " released out of order"));
            }
          }
          /**
           * Creates an absolute `ParseSourceSpan` from the relative `ParseSpan`.
           *
           * `ParseSpan` objects are relative to the start of the expression.
           * This method converts these to full `ParseSourceSpan` objects that
           * show where the span is within the overall source file.
           *
           * @param span the relative span to convert.
           * @returns a `ParseSourceSpan` for the given span or null if no
           * `baseSourceSpan` was provided to this class.
           */

        }, {
          key: "convertSourceSpan",
          value: function convertSourceSpan(span) {
            if (this.baseSourceSpan) {
              var _start = this.baseSourceSpan.start.moveBy(span.start);

              var end = this.baseSourceSpan.start.moveBy(span.end);
              var fullStart = this.baseSourceSpan.fullStart.moveBy(span.start);
              return new ParseSourceSpan(_start, end, fullStart);
            } else {
              return null;
            }
          }
          /** Adds the name of an AST to the list of implicit receiver accesses. */

        }, {
          key: "addImplicitReceiverAccess",
          value: function addImplicitReceiverAccess(name) {
            if (this.implicitReceiverAccesses) {
              this.implicitReceiverAccesses.add(name);
            }
          }
        }]);

        return _AstToIrVisitor;
      }();

      function flattenStatements(arg, output) {
        if (Array.isArray(arg)) {
          arg.forEach(function (entry) {
            return flattenStatements(entry, output);
          });
        } else {
          output.push(arg);
        }
      }

      var DefaultLocalResolver = /*#__PURE__*/function () {
        function DefaultLocalResolver(globals) {
          _classCallCheck(this, DefaultLocalResolver);

          this.globals = globals;
        }

        _createClass(DefaultLocalResolver, [{
          key: "notifyImplicitReceiverUse",
          value: function notifyImplicitReceiverUse() {}
        }, {
          key: "getLocal",
          value: function getLocal(name) {
            if (name === EventHandlerVars.event.name) {
              return EventHandlerVars.event;
            }

            return null;
          }
        }]);

        return DefaultLocalResolver;
      }();

      function createCurrValueExpr(bindingId) {
        return variable("currVal_".concat(bindingId)); // fix syntax highlighting: `
      }

      function createPreventDefaultVar(bindingId) {
        return variable("pd_".concat(bindingId));
      }

      function convertStmtIntoExpression(stmt) {
        if (stmt instanceof ExpressionStatement) {
          return stmt.expr;
        } else if (stmt instanceof ReturnStatement) {
          return stmt.value;
        }

        return null;
      }

      var BuiltinFunctionCall = /*#__PURE__*/function (_FunctionCall) {
        _inherits(BuiltinFunctionCall, _FunctionCall);

        var _super80 = _createSuper(BuiltinFunctionCall);

        function BuiltinFunctionCall(span, sourceSpan, args, converter) {
          var _this118;

          _classCallCheck(this, BuiltinFunctionCall);

          _this118 = _super80.call(this, span, sourceSpan, null, args);
          _this118.args = args;
          _this118.converter = converter;
          return _this118;
        }

        return BuiltinFunctionCall;
      }(FunctionCall);
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * This file is a port of shadowCSS from webcomponents.js to TypeScript.
       *
       * Please make sure to keep to edits in sync with the source file.
       *
       * Source:
       * https://github.com/webcomponents/webcomponentsjs/blob/4efecd7e0e/src/ShadowCSS/ShadowCSS.js
       *
       * The original file level comment is reproduced below
       */

      /*
        This is a limited shim for ShadowDOM css styling.
        https://dvcs.w3.org/hg/webcomponents/raw-file/tip/spec/shadow/index.html#styles
      
        The intention here is to support only the styling features which can be
        relatively simply implemented. The goal is to allow users to avoid the
        most obvious pitfalls and do so without compromising performance significantly.
        For ShadowDOM styling that's not covered here, a set of best practices
        can be provided that should allow users to accomplish more complex styling.
      
        The following is a list of specific ShadowDOM styling features and a brief
        discussion of the approach used to shim.
      
        Shimmed features:
      
        * :host, :host-context: ShadowDOM allows styling of the shadowRoot's host
        element using the :host rule. To shim this feature, the :host styles are
        reformatted and prefixed with a given scope name and promoted to a
        document level stylesheet.
        For example, given a scope name of .foo, a rule like this:
      
          :host {
              background: red;
            }
          }
      
        becomes:
      
          .foo {
            background: red;
          }
      
        * encapsulation: Styles defined within ShadowDOM, apply only to
        dom inside the ShadowDOM. Polymer uses one of two techniques to implement
        this feature.
      
        By default, rules are prefixed with the host element tag name
        as a descendant selector. This ensures styling does not leak out of the 'top'
        of the element's ShadowDOM. For example,
      
        div {
            font-weight: bold;
          }
      
        becomes:
      
        x-foo div {
            font-weight: bold;
          }
      
        becomes:
      
      
        Alternatively, if WebComponents.ShadowCSS.strictStyling is set to true then
        selectors are scoped by adding an attribute selector suffix to each
        simple selector that contains the host element tag name. Each element
        in the element's ShadowDOM template is also given the scope attribute.
        Thus, these rules match only elements that have the scope attribute.
        For example, given a scope name of x-foo, a rule like this:
      
          div {
            font-weight: bold;
          }
      
        becomes:
      
          div[x-foo] {
            font-weight: bold;
          }
      
        Note that elements that are dynamically added to a scope must have the scope
        selector added to them manually.
      
        * upper/lower bound encapsulation: Styles which are defined outside a
        shadowRoot should not cross the ShadowDOM boundary and should not apply
        inside a shadowRoot.
      
        This styling behavior is not emulated. Some possible ways to do this that
        were rejected due to complexity and/or performance concerns include: (1) reset
        every possible property for every possible selector for a given scope name;
        (2) re-implement css in javascript.
      
        As an alternative, users should make sure to use selectors
        specific to the scope in which they are working.
      
        * ::distributed: This behavior is not emulated. It's often not necessary
        to style the contents of a specific insertion point and instead, descendants
        of the host element can be styled selectively. Users can also create an
        extra node around an insertion point and style that node's contents
        via descendent selectors. For example, with a shadowRoot like this:
      
          <style>
            ::content(div) {
              background: red;
            }
          </style>
          <content></content>
      
        could become:
      
          <style>
            / *@polyfill .content-container div * /
            ::content(div) {
              background: red;
            }
          </style>
          <div class="content-container">
            <content></content>
          </div>
      
        Note the use of @polyfill in the comment above a ShadowDOM specific style
        declaration. This is a directive to the styling shim to use the selector
        in comments in lieu of the next selector when running under polyfill.
      */


      var ShadowCss = /*#__PURE__*/function () {
        function ShadowCss() {
          _classCallCheck(this, ShadowCss);

          this.strictStyling = true;
        }
        /*
         * Shim some cssText with the given selector. Returns cssText that can
         * be included in the document via WebComponents.ShadowCSS.addCssToDocument(css).
         *
         * When strictStyling is true:
         * - selector is the attribute added to all elements inside the host,
         * - hostSelector is the attribute added to the host itself.
         */


        _createClass(ShadowCss, [{
          key: "shimCssText",
          value: function shimCssText(cssText, selector) {
            var hostSelector = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';
            var commentsWithHash = extractCommentsWithHash(cssText);
            cssText = stripComments(cssText);
            cssText = this._insertDirectives(cssText);

            var scopedCssText = this._scopeCssText(cssText, selector, hostSelector);

            return [scopedCssText].concat(_toConsumableArray(commentsWithHash)).join('\n');
          }
        }, {
          key: "_insertDirectives",
          value: function _insertDirectives(cssText) {
            cssText = this._insertPolyfillDirectivesInCssText(cssText);
            return this._insertPolyfillRulesInCssText(cssText);
          }
          /*
           * Process styles to convert native ShadowDOM rules that will trip
           * up the css parser; we rely on decorating the stylesheet with inert rules.
           *
           * For example, we convert this rule:
           *
           * polyfill-next-selector { content: ':host menu-item'; }
           * ::content menu-item {
           *
           * to this:
           *
           * scopeName menu-item {
           *
           **/

        }, {
          key: "_insertPolyfillDirectivesInCssText",
          value: function _insertPolyfillDirectivesInCssText(cssText) {
            // Difference with webcomponents.js: does not handle comments
            return cssText.replace(_cssContentNextSelectorRe, function () {
              return (arguments.length <= 2 ? undefined : arguments[2]) + '{';
            });
          }
          /*
           * Process styles to add rules which will only apply under the polyfill
           *
           * For example, we convert this rule:
           *
           * polyfill-rule {
           *   content: ':host menu-item';
           * ...
           * }
           *
           * to this:
           *
           * scopeName menu-item {...}
           *
           **/

        }, {
          key: "_insertPolyfillRulesInCssText",
          value: function _insertPolyfillRulesInCssText(cssText) {
            // Difference with webcomponents.js: does not handle comments
            return cssText.replace(_cssContentRuleRe, function () {
              for (var _len4 = arguments.length, m = new Array(_len4), _key5 = 0; _key5 < _len4; _key5++) {
                m[_key5] = arguments[_key5];
              }

              var rule = m[0].replace(m[1], '').replace(m[2], '');
              return m[4] + rule;
            });
          }
          /* Ensure styles are scoped. Pseudo-scoping takes a rule like:
           *
           *  .foo {... }
           *
           *  and converts this to
           *
           *  scopeName .foo { ... }
           */

        }, {
          key: "_scopeCssText",
          value: function _scopeCssText(cssText, scopeSelector, hostSelector) {
            var unscopedRules = this._extractUnscopedRulesFromCssText(cssText); // replace :host and :host-context -shadowcsshost and -shadowcsshost respectively


            cssText = this._insertPolyfillHostInCssText(cssText);
            cssText = this._convertColonHost(cssText);
            cssText = this._convertColonHostContext(cssText);
            cssText = this._convertShadowDOMSelectors(cssText);

            if (scopeSelector) {
              cssText = this._scopeSelectors(cssText, scopeSelector, hostSelector);
            }

            cssText = cssText + '\n' + unscopedRules;
            return cssText.trim();
          }
          /*
           * Process styles to add rules which will only apply under the polyfill
           * and do not process via CSSOM. (CSSOM is destructive to rules on rare
           * occasions, e.g. -webkit-calc on Safari.)
           * For example, we convert this rule:
           *
           * @polyfill-unscoped-rule {
           *   content: 'menu-item';
           * ... }
           *
           * to this:
           *
           * menu-item {...}
           *
           **/

        }, {
          key: "_extractUnscopedRulesFromCssText",
          value: function _extractUnscopedRulesFromCssText(cssText) {
            // Difference with webcomponents.js: does not handle comments
            var r = '';
            var m;
            _cssContentUnscopedRuleRe.lastIndex = 0;

            while ((m = _cssContentUnscopedRuleRe.exec(cssText)) !== null) {
              var rule = m[0].replace(m[2], '').replace(m[1], m[4]);
              r += rule + '\n\n';
            }

            return r;
          }
          /*
           * convert a rule like :host(.foo) > .bar { }
           *
           * to
           *
           * .foo<scopeName> > .bar
           */

        }, {
          key: "_convertColonHost",
          value: function _convertColonHost(cssText) {
            return cssText.replace(_cssColonHostRe, function (_, hostSelectors, otherSelectors) {
              if (hostSelectors) {
                var convertedSelectors = [];
                var hostSelectorArray = hostSelectors.split(',').map(function (p) {
                  return p.trim();
                });

                var _iterator9 = _createForOfIteratorHelper(hostSelectorArray),
                    _step9;

                try {
                  for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {
                    var hostSelector = _step9.value;
                    if (!hostSelector) break;
                    var convertedSelector = _polyfillHostNoCombinator + hostSelector.replace(_polyfillHost, '') + otherSelectors;
                    convertedSelectors.push(convertedSelector);
                  }
                } catch (err) {
                  _iterator9.e(err);
                } finally {
                  _iterator9.f();
                }

                return convertedSelectors.join(',');
              } else {
                return _polyfillHostNoCombinator + otherSelectors;
              }
            });
          }
          /*
           * convert a rule like :host-context(.foo) > .bar { }
           *
           * to
           *
           * .foo<scopeName> > .bar, .foo <scopeName> > .bar { }
           *
           * and
           *
           * :host-context(.foo:host) .bar { ... }
           *
           * to
           *
           * .foo<scopeName> .bar { ... }
           */

        }, {
          key: "_convertColonHostContext",
          value: function _convertColonHostContext(cssText) {
            return cssText.replace(_cssColonHostContextReGlobal, function (selectorText) {
              // We have captured a selector that contains a `:host-context` rule.
              var _a; // For backward compatibility `:host-context` may contain a comma separated list of selectors.
              // Each context selector group will contain a list of host-context selectors that must match
              // an ancestor of the host.
              // (Normally `contextSelectorGroups` will only contain a single array of context selectors.)


              var contextSelectorGroups = [[]]; // There may be more than `:host-context` in this selector so `selectorText` could look like:
              // `:host-context(.one):host-context(.two)`.
              // Execute `_cssColonHostContextRe` over and over until we have extracted all the
              // `:host-context` selectors from this selector.

              var match;

              while (match = _cssColonHostContextRe.exec(selectorText)) {
                // `match` = [':host-context(<selectors>)<rest>', <selectors>, <rest>]
                // The `<selectors>` could actually be a comma separated list: `:host-context(.one, .two)`.
                var newContextSelectors = ((_a = match[1]) !== null && _a !== void 0 ? _a : '').trim().split(',').map(function (m) {
                  return m.trim();
                }).filter(function (m) {
                  return m !== '';
                }); // We must duplicate the current selector group for each of these new selectors.
                // For example if the current groups are:
                // ```
                // [
                //   ['a', 'b', 'c'],
                //   ['x', 'y', 'z'],
                // ]
                // ```
                // And we have a new set of comma separated selectors: `:host-context(m,n)` then the new
                // groups are:
                // ```
                // [
                //   ['a', 'b', 'c', 'm'],
                //   ['x', 'y', 'z', 'm'],
                //   ['a', 'b', 'c', 'n'],
                //   ['x', 'y', 'z', 'n'],
                // ]
                // ```

                var contextSelectorGroupsLength = contextSelectorGroups.length;
                repeatGroups(contextSelectorGroups, newContextSelectors.length);

                for (var i = 0; i < newContextSelectors.length; i++) {
                  for (var j = 0; j < contextSelectorGroupsLength; j++) {
                    contextSelectorGroups[j + i * contextSelectorGroupsLength].push(newContextSelectors[i]);
                  }
                } // Update the `selectorText` and see repeat to see if there are more `:host-context`s.


                selectorText = match[2];
              } // The context selectors now must be combined with each other to capture all the possible
              // selectors that `:host-context` can match. See `combineHostContextSelectors()` for more
              // info about how this is done.


              return contextSelectorGroups.map(function (contextSelectors) {
                return combineHostContextSelectors(contextSelectors, selectorText);
              }).join(', ');
            });
          }
          /*
           * Convert combinators like ::shadow and pseudo-elements like ::content
           * by replacing with space.
           */

        }, {
          key: "_convertShadowDOMSelectors",
          value: function _convertShadowDOMSelectors(cssText) {
            return _shadowDOMSelectorsRe.reduce(function (result, pattern) {
              return result.replace(pattern, ' ');
            }, cssText);
          } // change a selector like 'div' to 'name div'

        }, {
          key: "_scopeSelectors",
          value: function _scopeSelectors(cssText, scopeSelector, hostSelector) {
            var _this119 = this;

            return processRules(cssText, function (rule) {
              var selector = rule.selector;
              var content = rule.content;

              if (rule.selector[0] != '@') {
                selector = _this119._scopeSelector(rule.selector, scopeSelector, hostSelector, _this119.strictStyling);
              } else if (rule.selector.startsWith('@media') || rule.selector.startsWith('@supports') || rule.selector.startsWith('@page') || rule.selector.startsWith('@document')) {
                content = _this119._scopeSelectors(rule.content, scopeSelector, hostSelector);
              }

              return new CssRule(selector, content);
            });
          }
        }, {
          key: "_scopeSelector",
          value: function _scopeSelector(selector, scopeSelector, hostSelector, strict) {
            var _this120 = this;

            return selector.split(',').map(function (part) {
              return part.trim().split(_shadowDeepSelectors);
            }).map(function (deepParts) {
              var _deepParts = _toArray(deepParts),
                  shallowPart = _deepParts[0],
                  otherParts = _deepParts.slice(1);

              var applyScope = function applyScope(shallowPart) {
                if (_this120._selectorNeedsScoping(shallowPart, scopeSelector)) {
                  return strict ? _this120._applyStrictSelectorScope(shallowPart, scopeSelector, hostSelector) : _this120._applySelectorScope(shallowPart, scopeSelector, hostSelector);
                } else {
                  return shallowPart;
                }
              };

              return [applyScope(shallowPart)].concat(_toConsumableArray(otherParts)).join(' ');
            }).join(', ');
          }
        }, {
          key: "_selectorNeedsScoping",
          value: function _selectorNeedsScoping(selector, scopeSelector) {
            var re = this._makeScopeMatcher(scopeSelector);

            return !re.test(selector);
          }
        }, {
          key: "_makeScopeMatcher",
          value: function _makeScopeMatcher(scopeSelector) {
            var lre = /\[/g;
            var rre = /\]/g;
            scopeSelector = scopeSelector.replace(lre, '\\[').replace(rre, '\\]');
            return new RegExp('^(' + scopeSelector + ')' + _selectorReSuffix, 'm');
          }
        }, {
          key: "_applySelectorScope",
          value: function _applySelectorScope(selector, scopeSelector, hostSelector) {
            // Difference from webcomponents.js: scopeSelector could not be an array
            return this._applySimpleSelectorScope(selector, scopeSelector, hostSelector);
          } // scope via name and [is=name]

        }, {
          key: "_applySimpleSelectorScope",
          value: function _applySimpleSelectorScope(selector, scopeSelector, hostSelector) {
            // In Android browser, the lastIndex is not reset when the regex is used in String.replace()
            _polyfillHostRe.lastIndex = 0;

            if (_polyfillHostRe.test(selector)) {
              var replaceBy = this.strictStyling ? "[".concat(hostSelector, "]") : scopeSelector;
              return selector.replace(_polyfillHostNoCombinatorRe, function (hnc, selector) {
                return selector.replace(/([^:]*)(:*)(.*)/, function (_, before, colon, after) {
                  return before + replaceBy + colon + after;
                });
              }).replace(_polyfillHostRe, replaceBy + ' ');
            }

            return scopeSelector + ' ' + selector;
          } // return a selector with [name] suffix on each simple selector
          // e.g. .foo.bar > .zot becomes .foo[name].bar[name] > .zot[name]  /** @internal */

        }, {
          key: "_applyStrictSelectorScope",
          value: function _applyStrictSelectorScope(selector, scopeSelector, hostSelector) {
            var _this121 = this;

            var isRe = /\[is=([^\]]*)\]/g;
            scopeSelector = scopeSelector.replace(isRe, function (_) {
              return arguments.length <= 1 ? undefined : arguments[1];
            });
            var attrName = '[' + scopeSelector + ']';

            var _scopeSelectorPart = function _scopeSelectorPart(p) {
              var scopedP = p.trim();

              if (!scopedP) {
                return '';
              }

              if (p.indexOf(_polyfillHostNoCombinator) > -1) {
                scopedP = _this121._applySimpleSelectorScope(p, scopeSelector, hostSelector);
              } else {
                // remove :host since it should be unnecessary
                var t = p.replace(_polyfillHostRe, '');

                if (t.length > 0) {
                  var matches = t.match(/([^:]*)(:*)(.*)/);

                  if (matches) {
                    scopedP = matches[1] + attrName + matches[2] + matches[3];
                  }
                }
              }

              return scopedP;
            };

            var safeContent = new SafeSelector(selector);
            selector = safeContent.content();
            var scopedSelector = '';
            var startIndex = 0;
            var res;
            var sep = /( |>|\+|~(?!=))\s*/g; // If a selector appears before :host it should not be shimmed as it
            // matches on ancestor elements and not on elements in the host's shadow
            // `:host-context(div)` is transformed to
            // `-shadowcsshost-no-combinatordiv, div -shadowcsshost-no-combinator`
            // the `div` is not part of the component in the 2nd selectors and should not be scoped.
            // Historically `component-tag:host` was matching the component so we also want to preserve
            // this behavior to avoid breaking legacy apps (it should not match).
            // The behavior should be:
            // - `tag:host` -> `tag[h]` (this is to avoid breaking legacy apps, should not match anything)
            // - `tag :host` -> `tag [h]` (`tag` is not scoped because it's considered part of a
            //   `:host-context(tag)`)

            var hasHost = selector.indexOf(_polyfillHostNoCombinator) > -1; // Only scope parts after the first `-shadowcsshost-no-combinator` when it is present

            var shouldScope = !hasHost;

            while ((res = sep.exec(selector)) !== null) {
              var separator = res[1];

              var _part = selector.slice(startIndex, res.index).trim();

              shouldScope = shouldScope || _part.indexOf(_polyfillHostNoCombinator) > -1;
              var scopedPart = shouldScope ? _scopeSelectorPart(_part) : _part;
              scopedSelector += "".concat(scopedPart, " ").concat(separator, " ");
              startIndex = sep.lastIndex;
            }

            var part = selector.substring(startIndex);
            shouldScope = shouldScope || part.indexOf(_polyfillHostNoCombinator) > -1;
            scopedSelector += shouldScope ? _scopeSelectorPart(part) : part; // replace the placeholders with their original values

            return safeContent.restore(scopedSelector);
          }
        }, {
          key: "_insertPolyfillHostInCssText",
          value: function _insertPolyfillHostInCssText(selector) {
            return selector.replace(_colonHostContextRe, _polyfillHostContext).replace(_colonHostRe, _polyfillHost);
          }
        }]);

        return ShadowCss;
      }();

      var SafeSelector = /*#__PURE__*/function () {
        function SafeSelector(selector) {
          var _this122 = this;

          _classCallCheck(this, SafeSelector);

          this.placeholders = [];
          this.index = 0; // Replaces attribute selectors with placeholders.
          // The WS in [attr="va lue"] would otherwise be interpreted as a selector separator.

          selector = this._escapeRegexMatches(selector, /(\[[^\]]*\])/g); // CSS allows for certain special characters to be used in selectors if they're escaped.
          // E.g. `.foo:blue` won't match a class called `foo:blue`, because the colon denotes a
          // pseudo-class, but writing `.foo\:blue` will match, because the colon was escaped.
          // Replace all escape sequences (`\` followed by a character) with a placeholder so
          // that our handling of pseudo-selectors doesn't mess with them.

          selector = this._escapeRegexMatches(selector, /(\\.)/g); // Replaces the expression in `:nth-child(2n + 1)` with a placeholder.
          // WS and "+" would otherwise be interpreted as selector separators.

          this._content = selector.replace(/(:nth-[-\w]+)(\([^)]+\))/g, function (_, pseudo, exp) {
            var replaceBy = "__ph-".concat(_this122.index, "__");

            _this122.placeholders.push(exp);

            _this122.index++;
            return pseudo + replaceBy;
          });
        }

        _createClass(SafeSelector, [{
          key: "restore",
          value: function restore(content) {
            var _this123 = this;

            return content.replace(/__ph-(\d+)__/g, function (_ph, index) {
              return _this123.placeholders[+index];
            });
          }
        }, {
          key: "content",
          value: function content() {
            return this._content;
          }
          /**
           * Replaces all of the substrings that match a regex within a
           * special string (e.g. `__ph-0__`, `__ph-1__`, etc).
           */

        }, {
          key: "_escapeRegexMatches",
          value: function _escapeRegexMatches(content, pattern) {
            var _this124 = this;

            return content.replace(pattern, function (_, keep) {
              var replaceBy = "__ph-".concat(_this124.index, "__");

              _this124.placeholders.push(keep);

              _this124.index++;
              return replaceBy;
            });
          }
        }]);

        return SafeSelector;
      }();

      var _cssContentNextSelectorRe = /polyfill-next-selector[^}]*content:[\s]*?(['"])(.*?)\1[;\s]*}([^{]*?){/gim;
      var _cssContentRuleRe = /(polyfill-rule)[^}]*(content:[\s]*(['"])(.*?)\3)[;\s]*[^}]*}/gim;
      var _cssContentUnscopedRuleRe = /(polyfill-unscoped-rule)[^}]*(content:[\s]*(['"])(.*?)\3)[;\s]*[^}]*}/gim;
      var _polyfillHost = '-shadowcsshost'; // note: :host-context pre-processed to -shadowcsshostcontext.

      var _polyfillHostContext = '-shadowcsscontext';

      var _parenSuffix = '(?:\\((' + '(?:\\([^)(]*\\)|[^)(]*)+?' + ')\\))?([^,{]*)';

      var _cssColonHostRe = new RegExp(_polyfillHost + _parenSuffix, 'gim');

      var _cssColonHostContextReGlobal = new RegExp(_polyfillHostContext + _parenSuffix, 'gim');

      var _cssColonHostContextRe = new RegExp(_polyfillHostContext + _parenSuffix, 'im');

      var _polyfillHostNoCombinator = _polyfillHost + '-no-combinator';

      var _polyfillHostNoCombinatorRe = /-shadowcsshost-no-combinator([^\s]*)/;
      var _shadowDOMSelectorsRe = [/::shadow/g, /::content/g, // Deprecated selectors
      /\/shadow-deep\//g, /\/shadow\//g]; // The deep combinator is deprecated in the CSS spec
      // Support for `>>>`, `deep`, `::ng-deep` is then also deprecated and will be removed in the future.
      // see https://github.com/angular/angular/pull/17677

      var _shadowDeepSelectors = /(?:>>>)|(?:\/deep\/)|(?:::ng-deep)/g;
      var _selectorReSuffix = '([>\\s~+\[.,{:][\\s\\S]*)?$';
      var _polyfillHostRe = /-shadowcsshost/gim;
      var _colonHostRe = /:host/gim;
      var _colonHostContextRe = /:host-context/gim;
      var _commentRe = /\/\*\s*[\s\S]*?\*\//g;

      function stripComments(input) {
        return input.replace(_commentRe, '');
      }

      var _commentWithHashRe = /\/\*\s*#\s*source(Mapping)?URL=[\s\S]+?\*\//g;

      function extractCommentsWithHash(input) {
        return input.match(_commentWithHashRe) || [];
      }

      var BLOCK_PLACEHOLDER = '%BLOCK%';
      var QUOTE_PLACEHOLDER = '%QUOTED%';
      var _ruleRe = /(\s*)([^;\{\}]+?)(\s*)((?:{%BLOCK%}?\s*;?)|(?:\s*;))/g;
      var _quotedRe = /%QUOTED%/g;
      var CONTENT_PAIRS = new Map([['{', '}']]);
      var QUOTE_PAIRS = new Map([["\"", "\""], ["'", "'"]]);

      var CssRule = function CssRule(selector, content) {
        _classCallCheck(this, CssRule);

        this.selector = selector;
        this.content = content;
      };

      function processRules(input, ruleCallback) {
        var inputWithEscapedQuotes = escapeBlocks(input, QUOTE_PAIRS, QUOTE_PLACEHOLDER);
        var inputWithEscapedBlocks = escapeBlocks(inputWithEscapedQuotes.escapedString, CONTENT_PAIRS, BLOCK_PLACEHOLDER);
        var nextBlockIndex = 0;
        var nextQuoteIndex = 0;
        return inputWithEscapedBlocks.escapedString.replace(_ruleRe, function () {
          var selector = arguments.length <= 2 ? undefined : arguments[2];
          var content = '';
          var suffix = arguments.length <= 4 ? undefined : arguments[4];
          var contentPrefix = '';

          if (suffix && suffix.startsWith('{' + BLOCK_PLACEHOLDER)) {
            content = inputWithEscapedBlocks.blocks[nextBlockIndex++];
            suffix = suffix.substring(BLOCK_PLACEHOLDER.length + 1);
            contentPrefix = '{';
          }

          var rule = ruleCallback(new CssRule(selector, content));
          return "".concat(arguments.length <= 1 ? undefined : arguments[1]).concat(rule.selector).concat(arguments.length <= 3 ? undefined : arguments[3]).concat(contentPrefix).concat(rule.content).concat(suffix);
        }).replace(_quotedRe, function () {
          return inputWithEscapedQuotes.blocks[nextQuoteIndex++];
        });
      }

      var StringWithEscapedBlocks = function StringWithEscapedBlocks(escapedString, blocks) {
        _classCallCheck(this, StringWithEscapedBlocks);

        this.escapedString = escapedString;
        this.blocks = blocks;
      };

      function escapeBlocks(input, charPairs, placeholder) {
        var resultParts = [];
        var escapedBlocks = [];
        var openCharCount = 0;
        var nonBlockStartIndex = 0;
        var blockStartIndex = -1;
        var openChar;
        var closeChar;

        for (var i = 0; i < input.length; i++) {
          var _char = input[i];

          if (_char === '\\') {
            i++;
          } else if (_char === closeChar) {
            openCharCount--;

            if (openCharCount === 0) {
              escapedBlocks.push(input.substring(blockStartIndex, i));
              resultParts.push(placeholder);
              nonBlockStartIndex = i;
              blockStartIndex = -1;
              openChar = closeChar = undefined;
            }
          } else if (_char === openChar) {
            openCharCount++;
          } else if (openCharCount === 0 && charPairs.has(_char)) {
            openChar = _char;
            closeChar = charPairs.get(_char);
            openCharCount = 1;
            blockStartIndex = i + 1;
            resultParts.push(input.substring(nonBlockStartIndex, blockStartIndex));
          }
        }

        if (blockStartIndex !== -1) {
          escapedBlocks.push(input.substring(blockStartIndex));
          resultParts.push(placeholder);
        } else {
          resultParts.push(input.substring(nonBlockStartIndex));
        }

        return new StringWithEscapedBlocks(resultParts.join(''), escapedBlocks);
      }
      /**
       * Combine the `contextSelectors` with the `hostMarker` and the `otherSelectors`
       * to create a selector that matches the same as `:host-context()`.
       *
       * Given a single context selector `A` we need to output selectors that match on the host and as an
       * ancestor of the host:
       *
       * ```
       * A <hostMarker>, A<hostMarker> {}
       * ```
       *
       * When there is more than one context selector we also have to create combinations of those
       * selectors with each other. For example if there are `A` and `B` selectors the output is:
       *
       * ```
       * AB<hostMarker>, AB <hostMarker>, A B<hostMarker>,
       * B A<hostMarker>, A B <hostMarker>, B A <hostMarker> {}
       * ```
       *
       * And so on...
       *
       * @param hostMarker the string that selects the host element.
       * @param contextSelectors an array of context selectors that will be combined.
       * @param otherSelectors the rest of the selectors that are not context selectors.
       */


      function combineHostContextSelectors(contextSelectors, otherSelectors) {
        var hostMarker = _polyfillHostNoCombinator;

        var otherSelectorsHasHost = _polyfillHostRe.test(otherSelectors); // If there are no context selectors then just output a host marker


        if (contextSelectors.length === 0) {
          return hostMarker + otherSelectors;
        }

        var combined = [contextSelectors.pop() || ''];

        while (contextSelectors.length > 0) {
          var length = combined.length;
          var contextSelector = contextSelectors.pop();

          for (var i = 0; i < length; i++) {
            var previousSelectors = combined[i]; // Add the new selector as a descendant of the previous selectors

            combined[length * 2 + i] = previousSelectors + ' ' + contextSelector; // Add the new selector as an ancestor of the previous selectors

            combined[length + i] = contextSelector + ' ' + previousSelectors; // Add the new selector to act on the same element as the previous selectors

            combined[i] = contextSelector + previousSelectors;
          }
        } // Finally connect the selector to the `hostMarker`s: either acting directly on the host
        // (A<hostMarker>) or as an ancestor (A <hostMarker>).


        return combined.map(function (s) {
          return otherSelectorsHasHost ? "".concat(s).concat(otherSelectors) : "".concat(s).concat(hostMarker).concat(otherSelectors, ", ").concat(s, " ").concat(hostMarker).concat(otherSelectors);
        }).join(',');
      }
      /**
       * Mutate the given `groups` array so that there are `multiples` clones of the original array
       * stored.
       *
       * For example `repeatGroups([a, b], 3)` will result in `[a, b, a, b, a, b]` - but importantly the
       * newly added groups will be clones of the original.
       *
       * @param groups An array of groups of strings that will be repeated. This array is mutated
       *     in-place.
       * @param multiples The number of times the current groups should appear.
       */


      function repeatGroups(groups, multiples) {
        var length = groups.length;

        for (var i = 1; i < multiples; i++) {
          for (var j = 0; j < length; j++) {
            groups[j + i * length] = groups[j].slice(0);
          }
        }
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      var COMPONENT_VARIABLE = '%COMP%';
      var HOST_ATTR = "_nghost-".concat(COMPONENT_VARIABLE);
      var CONTENT_ATTR = "_ngcontent-".concat(COMPONENT_VARIABLE);

      var StylesCompileDependency = function StylesCompileDependency(name, moduleUrl, setValue) {
        _classCallCheck(this, StylesCompileDependency);

        this.name = name;
        this.moduleUrl = moduleUrl;
        this.setValue = setValue;
      };

      var CompiledStylesheet = function CompiledStylesheet(outputCtx, stylesVar, dependencies, isShimmed, meta) {
        _classCallCheck(this, CompiledStylesheet);

        this.outputCtx = outputCtx;
        this.stylesVar = stylesVar;
        this.dependencies = dependencies;
        this.isShimmed = isShimmed;
        this.meta = meta;
      };

      var StyleCompiler = /*#__PURE__*/function () {
        function StyleCompiler(_urlResolver) {
          _classCallCheck(this, StyleCompiler);

          this._urlResolver = _urlResolver;
          this._shadowCss = new ShadowCss();
        }

        _createClass(StyleCompiler, [{
          key: "compileComponent",
          value: function compileComponent(outputCtx, comp) {
            var template = comp.template;
            return this._compileStyles(outputCtx, comp, new CompileStylesheetMetadata({
              styles: template.styles,
              styleUrls: template.styleUrls,
              moduleUrl: identifierModuleUrl(comp.type)
            }), this.needsStyleShim(comp), true);
          }
        }, {
          key: "compileStyles",
          value: function compileStyles(outputCtx, comp, stylesheet) {
            var shim = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : this.needsStyleShim(comp);
            return this._compileStyles(outputCtx, comp, stylesheet, shim, false);
          }
        }, {
          key: "needsStyleShim",
          value: function needsStyleShim(comp) {
            return comp.template.encapsulation === ViewEncapsulation.Emulated;
          }
        }, {
          key: "_compileStyles",
          value: function _compileStyles(outputCtx, comp, stylesheet, shim, isComponentStylesheet) {
            var _this125 = this;

            var styleExpressions = stylesheet.styles.map(function (plainStyle) {
              return literal(_this125._shimIfNeeded(plainStyle, shim));
            });
            var dependencies = [];
            stylesheet.styleUrls.forEach(function (styleUrl) {
              var exprIndex = styleExpressions.length; // Note: This placeholder will be filled later.

              styleExpressions.push(null);
              dependencies.push(new StylesCompileDependency(getStylesVarName(null), styleUrl, function (value) {
                return styleExpressions[exprIndex] = outputCtx.importExpr(value);
              }));
            }); // styles variable contains plain strings and arrays of other styles arrays (recursive),
            // so we set its type to dynamic.

            var stylesVar = getStylesVarName(isComponentStylesheet ? comp : null);
            var stmt = variable(stylesVar).set(literalArr(styleExpressions, new ArrayType(DYNAMIC_TYPE, [TypeModifier.Const]))).toDeclStmt(null, isComponentStylesheet ? [StmtModifier.Final] : [StmtModifier.Final, StmtModifier.Exported]);
            outputCtx.statements.push(stmt);
            return new CompiledStylesheet(outputCtx, stylesVar, dependencies, shim, stylesheet);
          }
        }, {
          key: "_shimIfNeeded",
          value: function _shimIfNeeded(style, shim) {
            return shim ? this._shadowCss.shimCssText(style, CONTENT_ATTR, HOST_ATTR) : style;
          }
        }]);

        return StyleCompiler;
      }();

      function getStylesVarName(component) {
        var result = "styles";

        if (component) {
          result += "_".concat(identifierName(component.type));
        }

        return result;
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * A path is an ordered set of elements. Typically a path is to  a
       * particular offset in a source file. The head of the list is the top
       * most node. The tail is the node that contains the offset directly.
       *
       * For example, the expression `a + b + c` might have an ast that looks
       * like:
       *     +
       *    / \
       *   a   +
       *      / \
       *     b   c
       *
       * The path to the node at offset 9 would be `['+' at 1-10, '+' at 7-10,
       * 'c' at 9-10]` and the path the node at offset 1 would be
       * `['+' at 1-10, 'a' at 1-2]`.
       */


      var AstPath = /*#__PURE__*/function () {
        function AstPath(path) {
          var position = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : -1;

          _classCallCheck(this, AstPath);

          this.path = path;
          this.position = position;
        }

        _createClass(AstPath, [{
          key: "empty",
          get: function get() {
            return !this.path || !this.path.length;
          }
        }, {
          key: "head",
          get: function get() {
            return this.path[0];
          }
        }, {
          key: "tail",
          get: function get() {
            return this.path[this.path.length - 1];
          }
        }, {
          key: "parentOf",
          value: function parentOf(node) {
            return node && this.path[this.path.indexOf(node) - 1];
          }
        }, {
          key: "childOf",
          value: function childOf(node) {
            return this.path[this.path.indexOf(node) + 1];
          }
        }, {
          key: "first",
          value: function first(ctor) {
            for (var i = this.path.length - 1; i >= 0; i--) {
              var item = this.path[i];
              if (item instanceof ctor) return item;
            }
          }
        }, {
          key: "push",
          value: function push(node) {
            this.path.push(node);
          }
        }, {
          key: "pop",
          value: function pop() {
            return this.path.pop();
          }
        }]);

        return AstPath;
      }();
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      var NodeWithI18n = function NodeWithI18n(sourceSpan, i18n) {
        _classCallCheck(this, NodeWithI18n);

        this.sourceSpan = sourceSpan;
        this.i18n = i18n;
      };

      var Text$3 = /*#__PURE__*/function (_NodeWithI18n) {
        _inherits(Text$3, _NodeWithI18n);

        var _super81 = _createSuper(Text$3);

        function Text$3(value, sourceSpan, i18n) {
          var _this126;

          _classCallCheck(this, Text$3);

          _this126 = _super81.call(this, sourceSpan, i18n);
          _this126.value = value;
          return _this126;
        }

        _createClass(Text$3, [{
          key: "visit",
          value: function visit(visitor, context) {
            return visitor.visitText(this, context);
          }
        }]);

        return Text$3;
      }(NodeWithI18n);

      var Expansion = /*#__PURE__*/function (_NodeWithI18n2) {
        _inherits(Expansion, _NodeWithI18n2);

        var _super82 = _createSuper(Expansion);

        function Expansion(switchValue, type, cases, sourceSpan, switchValueSourceSpan, i18n) {
          var _this127;

          _classCallCheck(this, Expansion);

          _this127 = _super82.call(this, sourceSpan, i18n);
          _this127.switchValue = switchValue;
          _this127.type = type;
          _this127.cases = cases;
          _this127.switchValueSourceSpan = switchValueSourceSpan;
          return _this127;
        }

        _createClass(Expansion, [{
          key: "visit",
          value: function visit(visitor, context) {
            return visitor.visitExpansion(this, context);
          }
        }]);

        return Expansion;
      }(NodeWithI18n);

      var ExpansionCase = /*#__PURE__*/function () {
        function ExpansionCase(value, expression, sourceSpan, valueSourceSpan, expSourceSpan) {
          _classCallCheck(this, ExpansionCase);

          this.value = value;
          this.expression = expression;
          this.sourceSpan = sourceSpan;
          this.valueSourceSpan = valueSourceSpan;
          this.expSourceSpan = expSourceSpan;
        }

        _createClass(ExpansionCase, [{
          key: "visit",
          value: function visit(visitor, context) {
            return visitor.visitExpansionCase(this, context);
          }
        }]);

        return ExpansionCase;
      }();

      var Attribute = /*#__PURE__*/function (_NodeWithI18n3) {
        _inherits(Attribute, _NodeWithI18n3);

        var _super83 = _createSuper(Attribute);

        function Attribute(name, value, sourceSpan, keySpan, valueSpan, i18n) {
          var _this128;

          _classCallCheck(this, Attribute);

          _this128 = _super83.call(this, sourceSpan, i18n);
          _this128.name = name;
          _this128.value = value;
          _this128.keySpan = keySpan;
          _this128.valueSpan = valueSpan;
          return _this128;
        }

        _createClass(Attribute, [{
          key: "visit",
          value: function visit(visitor, context) {
            return visitor.visitAttribute(this, context);
          }
        }]);

        return Attribute;
      }(NodeWithI18n);

      var Element$1 = /*#__PURE__*/function (_NodeWithI18n4) {
        _inherits(Element$1, _NodeWithI18n4);

        var _super84 = _createSuper(Element$1);

        function Element$1(name, attrs, children, sourceSpan, startSourceSpan) {
          var _this129;

          var endSourceSpan = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : null;
          var i18n = arguments.length > 6 ? arguments[6] : undefined;

          _classCallCheck(this, Element$1);

          _this129 = _super84.call(this, sourceSpan, i18n);
          _this129.name = name;
          _this129.attrs = attrs;
          _this129.children = children;
          _this129.startSourceSpan = startSourceSpan;
          _this129.endSourceSpan = endSourceSpan;
          return _this129;
        }

        _createClass(Element$1, [{
          key: "visit",
          value: function visit(visitor, context) {
            return visitor.visitElement(this, context);
          }
        }]);

        return Element$1;
      }(NodeWithI18n);

      var Comment = /*#__PURE__*/function () {
        function Comment(value, sourceSpan) {
          _classCallCheck(this, Comment);

          this.value = value;
          this.sourceSpan = sourceSpan;
        }

        _createClass(Comment, [{
          key: "visit",
          value: function visit(visitor, context) {
            return visitor.visitComment(this, context);
          }
        }]);

        return Comment;
      }();

      function visitAll$1(visitor, nodes) {
        var context = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
        var result = [];
        var visit = visitor.visit ? function (ast) {
          return visitor.visit(ast, context) || ast.visit(visitor, context);
        } : function (ast) {
          return ast.visit(visitor, context);
        };
        nodes.forEach(function (ast) {
          var astResult = visit(ast);

          if (astResult) {
            result.push(astResult);
          }
        });
        return result;
      }

      var RecursiveVisitor$1 = /*#__PURE__*/function () {
        function RecursiveVisitor$1() {
          _classCallCheck(this, RecursiveVisitor$1);
        }

        _createClass(RecursiveVisitor$1, [{
          key: "visitElement",
          value: function visitElement(ast, context) {
            this.visitChildren(context, function (visit) {
              visit(ast.attrs);
              visit(ast.children);
            });
          }
        }, {
          key: "visitAttribute",
          value: function visitAttribute(ast, context) {}
        }, {
          key: "visitText",
          value: function visitText(ast, context) {}
        }, {
          key: "visitComment",
          value: function visitComment(ast, context) {}
        }, {
          key: "visitExpansion",
          value: function visitExpansion(ast, context) {
            return this.visitChildren(context, function (visit) {
              visit(ast.cases);
            });
          }
        }, {
          key: "visitExpansionCase",
          value: function visitExpansionCase(ast, context) {}
        }, {
          key: "visitChildren",
          value: function visitChildren(context, cb) {
            var results = [];
            var t = this;

            function visit(children) {
              if (children) results.push(visitAll$1(t, children, context));
            }

            cb(visit);
            return Array.prototype.concat.apply([], results);
          }
        }]);

        return RecursiveVisitor$1;
      }();

      function spanOf(ast) {
        var start = ast.sourceSpan.start.offset;
        var end = ast.sourceSpan.end.offset;

        if (ast instanceof Element$1) {
          if (ast.endSourceSpan) {
            end = ast.endSourceSpan.end.offset;
          } else if (ast.children && ast.children.length) {
            end = spanOf(ast.children[ast.children.length - 1]).end;
          }
        }

        return {
          start: start,
          end: end
        };
      }

      function findNode(nodes, position) {
        var path = [];
        var visitor = new ( /*#__PURE__*/function (_RecursiveVisitor$) {
          _inherits(_class, _RecursiveVisitor$);

          var _super85 = _createSuper(_class);

          function _class() {
            _classCallCheck(this, _class);

            return _super85.apply(this, arguments);
          }

          _createClass(_class, [{
            key: "visit",
            value: function visit(ast, context) {
              var span = spanOf(ast);

              if (span.start <= position && position < span.end) {
                path.push(ast);
              } else {
                // Returning a value here will result in the children being skipped.
                return true;
              }
            }
          }]);

          return _class;
        }(RecursiveVisitor$1))();
        visitAll$1(visitor, nodes);
        return new AstPath(path, position);
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      var TokenType;

      (function (TokenType) {
        TokenType[TokenType["TAG_OPEN_START"] = 0] = "TAG_OPEN_START";
        TokenType[TokenType["TAG_OPEN_END"] = 1] = "TAG_OPEN_END";
        TokenType[TokenType["TAG_OPEN_END_VOID"] = 2] = "TAG_OPEN_END_VOID";
        TokenType[TokenType["TAG_CLOSE"] = 3] = "TAG_CLOSE";
        TokenType[TokenType["INCOMPLETE_TAG_OPEN"] = 4] = "INCOMPLETE_TAG_OPEN";
        TokenType[TokenType["TEXT"] = 5] = "TEXT";
        TokenType[TokenType["ESCAPABLE_RAW_TEXT"] = 6] = "ESCAPABLE_RAW_TEXT";
        TokenType[TokenType["RAW_TEXT"] = 7] = "RAW_TEXT";
        TokenType[TokenType["COMMENT_START"] = 8] = "COMMENT_START";
        TokenType[TokenType["COMMENT_END"] = 9] = "COMMENT_END";
        TokenType[TokenType["CDATA_START"] = 10] = "CDATA_START";
        TokenType[TokenType["CDATA_END"] = 11] = "CDATA_END";
        TokenType[TokenType["ATTR_NAME"] = 12] = "ATTR_NAME";
        TokenType[TokenType["ATTR_QUOTE"] = 13] = "ATTR_QUOTE";
        TokenType[TokenType["ATTR_VALUE"] = 14] = "ATTR_VALUE";
        TokenType[TokenType["DOC_TYPE"] = 15] = "DOC_TYPE";
        TokenType[TokenType["EXPANSION_FORM_START"] = 16] = "EXPANSION_FORM_START";
        TokenType[TokenType["EXPANSION_CASE_VALUE"] = 17] = "EXPANSION_CASE_VALUE";
        TokenType[TokenType["EXPANSION_CASE_EXP_START"] = 18] = "EXPANSION_CASE_EXP_START";
        TokenType[TokenType["EXPANSION_CASE_EXP_END"] = 19] = "EXPANSION_CASE_EXP_END";
        TokenType[TokenType["EXPANSION_FORM_END"] = 20] = "EXPANSION_FORM_END";
        TokenType[TokenType["EOF"] = 21] = "EOF";
      })(TokenType || (TokenType = {}));

      var Token = function Token(type, parts, sourceSpan) {
        _classCallCheck(this, Token);

        this.type = type;
        this.parts = parts;
        this.sourceSpan = sourceSpan;
      };

      var TokenError = /*#__PURE__*/function (_ParseError) {
        _inherits(TokenError, _ParseError);

        var _super86 = _createSuper(TokenError);

        function TokenError(errorMsg, tokenType, span) {
          var _this130;

          _classCallCheck(this, TokenError);

          _this130 = _super86.call(this, span, errorMsg);
          _this130.tokenType = tokenType;
          return _this130;
        }

        return TokenError;
      }(ParseError);

      var TokenizeResult = function TokenizeResult(tokens, errors, nonNormalizedIcuExpressions) {
        _classCallCheck(this, TokenizeResult);

        this.tokens = tokens;
        this.errors = errors;
        this.nonNormalizedIcuExpressions = nonNormalizedIcuExpressions;
      };

      function tokenize(source, url, getTagDefinition) {
        var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
        var tokenizer = new _Tokenizer(new ParseSourceFile(source, url), getTagDefinition, options);
        tokenizer.tokenize();
        return new TokenizeResult(mergeTextTokens(tokenizer.tokens), tokenizer.errors, tokenizer.nonNormalizedIcuExpressions);
      }

      var _CR_OR_CRLF_REGEXP = /\r\n?/g;

      function _unexpectedCharacterErrorMsg(charCode) {
        var _char2 = charCode === $EOF ? 'EOF' : String.fromCharCode(charCode);

        return "Unexpected character \"".concat(_char2, "\"");
      }

      function _unknownEntityErrorMsg(entitySrc) {
        return "Unknown entity \"".concat(entitySrc, "\" - use the \"&#<decimal>;\" or  \"&#x<hex>;\" syntax");
      }

      function _unparsableEntityErrorMsg(type, entityStr) {
        return "Unable to parse entity \"".concat(entityStr, "\" - ").concat(type, " character reference entities must end with \";\"");
      }

      var CharacterReferenceType;

      (function (CharacterReferenceType) {
        CharacterReferenceType["HEX"] = "hexadecimal";
        CharacterReferenceType["DEC"] = "decimal";
      })(CharacterReferenceType || (CharacterReferenceType = {}));

      var _ControlFlowError = function _ControlFlowError(error) {
        _classCallCheck(this, _ControlFlowError);

        this.error = error;
      }; // See https://www.w3.org/TR/html51/syntax.html#writing-html-documents


      var _Tokenizer = /*#__PURE__*/function () {
        /**
         * @param _file The html source file being tokenized.
         * @param _getTagDefinition A function that will retrieve a tag definition for a given tag name.
         * @param options Configuration of the tokenization.
         */
        function _Tokenizer(_file, _getTagDefinition, options) {
          _classCallCheck(this, _Tokenizer);

          this._getTagDefinition = _getTagDefinition;
          this._currentTokenStart = null;
          this._currentTokenType = null;
          this._expansionCaseStack = [];
          this._inInterpolation = false;
          this.tokens = [];
          this.errors = [];
          this.nonNormalizedIcuExpressions = [];
          this._tokenizeIcu = options.tokenizeExpansionForms || false;
          this._interpolationConfig = options.interpolationConfig || DEFAULT_INTERPOLATION_CONFIG;
          this._leadingTriviaCodePoints = options.leadingTriviaChars && options.leadingTriviaChars.map(function (c) {
            return c.codePointAt(0) || 0;
          });
          var range = options.range || {
            endPos: _file.content.length,
            startPos: 0,
            startLine: 0,
            startCol: 0
          };
          this._cursor = options.escapedString ? new EscapedCharacterCursor(_file, range) : new PlainCharacterCursor(_file, range);
          this._preserveLineEndings = options.preserveLineEndings || false;
          this._escapedString = options.escapedString || false;
          this._i18nNormalizeLineEndingsInICUs = options.i18nNormalizeLineEndingsInICUs || false;

          try {
            this._cursor.init();
          } catch (e) {
            this.handleError(e);
          }
        }

        _createClass(_Tokenizer, [{
          key: "_processCarriageReturns",
          value: function _processCarriageReturns(content) {
            if (this._preserveLineEndings) {
              return content;
            } // https://www.w3.org/TR/html51/syntax.html#preprocessing-the-input-stream
            // In order to keep the original position in the source, we can not
            // pre-process it.
            // Instead CRs are processed right before instantiating the tokens.


            return content.replace(_CR_OR_CRLF_REGEXP, '\n');
          }
        }, {
          key: "tokenize",
          value: function tokenize() {
            while (this._cursor.peek() !== $EOF) {
              var _start2 = this._cursor.clone();

              try {
                if (this._attemptCharCode($LT)) {
                  if (this._attemptCharCode($BANG)) {
                    if (this._attemptCharCode($LBRACKET)) {
                      this._consumeCdata(_start2);
                    } else if (this._attemptCharCode($MINUS)) {
                      this._consumeComment(_start2);
                    } else {
                      this._consumeDocType(_start2);
                    }
                  } else if (this._attemptCharCode($SLASH)) {
                    this._consumeTagClose(_start2);
                  } else {
                    this._consumeTagOpen(_start2);
                  }
                } else if (!(this._tokenizeIcu && this._tokenizeExpansionForm())) {
                  this._consumeText();
                }
              } catch (e) {
                this.handleError(e);
              }
            }

            this._beginToken(TokenType.EOF);

            this._endToken([]);
          }
          /**
           * @returns whether an ICU token has been created
           * @internal
           */

        }, {
          key: "_tokenizeExpansionForm",
          value: function _tokenizeExpansionForm() {
            if (this.isExpansionFormStart()) {
              this._consumeExpansionFormStart();

              return true;
            }

            if (isExpansionCaseStart(this._cursor.peek()) && this._isInExpansionForm()) {
              this._consumeExpansionCaseStart();

              return true;
            }

            if (this._cursor.peek() === $RBRACE) {
              if (this._isInExpansionCase()) {
                this._consumeExpansionCaseEnd();

                return true;
              }

              if (this._isInExpansionForm()) {
                this._consumeExpansionFormEnd();

                return true;
              }
            }

            return false;
          }
        }, {
          key: "_beginToken",
          value: function _beginToken(type) {
            var start = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this._cursor.clone();
            this._currentTokenStart = start;
            this._currentTokenType = type;
          }
        }, {
          key: "_endToken",
          value: function _endToken(parts, end) {
            if (this._currentTokenStart === null) {
              throw new TokenError('Programming error - attempted to end a token when there was no start to the token', this._currentTokenType, this._cursor.getSpan(end));
            }

            if (this._currentTokenType === null) {
              throw new TokenError('Programming error - attempted to end a token which has no token type', null, this._cursor.getSpan(this._currentTokenStart));
            }

            var token = new Token(this._currentTokenType, parts, this._cursor.getSpan(this._currentTokenStart, this._leadingTriviaCodePoints));
            this.tokens.push(token);
            this._currentTokenStart = null;
            this._currentTokenType = null;
            return token;
          }
        }, {
          key: "_createError",
          value: function _createError(msg, span) {
            if (this._isInExpansionForm()) {
              msg += " (Do you have an unescaped \"{\" in your template? Use \"{{ '{' }}\") to escape it.)";
            }

            var error = new TokenError(msg, this._currentTokenType, span);
            this._currentTokenStart = null;
            this._currentTokenType = null;
            return new _ControlFlowError(error);
          }
        }, {
          key: "handleError",
          value: function handleError(e) {
            if (e instanceof CursorError) {
              e = this._createError(e.msg, this._cursor.getSpan(e.cursor));
            }

            if (e instanceof _ControlFlowError) {
              this.errors.push(e.error);
            } else {
              throw e;
            }
          }
        }, {
          key: "_attemptCharCode",
          value: function _attemptCharCode(charCode) {
            if (this._cursor.peek() === charCode) {
              this._cursor.advance();

              return true;
            }

            return false;
          }
        }, {
          key: "_attemptCharCodeCaseInsensitive",
          value: function _attemptCharCodeCaseInsensitive(charCode) {
            if (compareCharCodeCaseInsensitive(this._cursor.peek(), charCode)) {
              this._cursor.advance();

              return true;
            }

            return false;
          }
        }, {
          key: "_requireCharCode",
          value: function _requireCharCode(charCode) {
            var location = this._cursor.clone();

            if (!this._attemptCharCode(charCode)) {
              throw this._createError(_unexpectedCharacterErrorMsg(this._cursor.peek()), this._cursor.getSpan(location));
            }
          }
        }, {
          key: "_attemptStr",
          value: function _attemptStr(chars) {
            var len = chars.length;

            if (this._cursor.charsLeft() < len) {
              return false;
            }

            var initialPosition = this._cursor.clone();

            for (var i = 0; i < len; i++) {
              if (!this._attemptCharCode(chars.charCodeAt(i))) {
                // If attempting to parse the string fails, we want to reset the parser
                // to where it was before the attempt
                this._cursor = initialPosition;
                return false;
              }
            }

            return true;
          }
        }, {
          key: "_attemptStrCaseInsensitive",
          value: function _attemptStrCaseInsensitive(chars) {
            for (var i = 0; i < chars.length; i++) {
              if (!this._attemptCharCodeCaseInsensitive(chars.charCodeAt(i))) {
                return false;
              }
            }

            return true;
          }
        }, {
          key: "_requireStr",
          value: function _requireStr(chars) {
            var location = this._cursor.clone();

            if (!this._attemptStr(chars)) {
              throw this._createError(_unexpectedCharacterErrorMsg(this._cursor.peek()), this._cursor.getSpan(location));
            }
          }
        }, {
          key: "_attemptCharCodeUntilFn",
          value: function _attemptCharCodeUntilFn(predicate) {
            while (!predicate(this._cursor.peek())) {
              this._cursor.advance();
            }
          }
        }, {
          key: "_requireCharCodeUntilFn",
          value: function _requireCharCodeUntilFn(predicate, len) {
            var start = this._cursor.clone();

            this._attemptCharCodeUntilFn(predicate);

            if (this._cursor.diff(start) < len) {
              throw this._createError(_unexpectedCharacterErrorMsg(this._cursor.peek()), this._cursor.getSpan(start));
            }
          }
        }, {
          key: "_attemptUntilChar",
          value: function _attemptUntilChar(_char3) {
            while (this._cursor.peek() !== _char3) {
              this._cursor.advance();
            }
          }
        }, {
          key: "_readChar",
          value: function _readChar(decodeEntities) {
            if (decodeEntities && this._cursor.peek() === $AMPERSAND) {
              return this._decodeEntity();
            } else {
              // Don't rely upon reading directly from `_input` as the actual char value
              // may have been generated from an escape sequence.
              var _char4 = String.fromCodePoint(this._cursor.peek());

              this._cursor.advance();

              return _char4;
            }
          }
        }, {
          key: "_decodeEntity",
          value: function _decodeEntity() {
            var start = this._cursor.clone();

            this._cursor.advance();

            if (this._attemptCharCode($HASH)) {
              var isHex = this._attemptCharCode($x) || this._attemptCharCode($X);

              var codeStart = this._cursor.clone();

              this._attemptCharCodeUntilFn(isDigitEntityEnd);

              if (this._cursor.peek() != $SEMICOLON) {
                // Advance cursor to include the peeked character in the string provided to the error
                // message.
                this._cursor.advance();

                var entityType = isHex ? CharacterReferenceType.HEX : CharacterReferenceType.DEC;
                throw this._createError(_unparsableEntityErrorMsg(entityType, this._cursor.getChars(start)), this._cursor.getSpan());
              }

              var strNum = this._cursor.getChars(codeStart);

              this._cursor.advance();

              try {
                var charCode = parseInt(strNum, isHex ? 16 : 10);
                return String.fromCharCode(charCode);
              } catch (_a) {
                throw this._createError(_unknownEntityErrorMsg(this._cursor.getChars(start)), this._cursor.getSpan());
              }
            } else {
              var nameStart = this._cursor.clone();

              this._attemptCharCodeUntilFn(isNamedEntityEnd);

              if (this._cursor.peek() != $SEMICOLON) {
                this._cursor = nameStart;
                return '&';
              }

              var name = this._cursor.getChars(nameStart);

              this._cursor.advance();

              var _char5 = NAMED_ENTITIES[name];

              if (!_char5) {
                throw this._createError(_unknownEntityErrorMsg(name), this._cursor.getSpan(start));
              }

              return _char5;
            }
          }
        }, {
          key: "_consumeRawText",
          value: function _consumeRawText(decodeEntities, endMarkerPredicate) {
            this._beginToken(decodeEntities ? TokenType.ESCAPABLE_RAW_TEXT : TokenType.RAW_TEXT);

            var parts = [];

            while (true) {
              var tagCloseStart = this._cursor.clone();

              var foundEndMarker = endMarkerPredicate();
              this._cursor = tagCloseStart;

              if (foundEndMarker) {
                break;
              }

              parts.push(this._readChar(decodeEntities));
            }

            return this._endToken([this._processCarriageReturns(parts.join(''))]);
          }
        }, {
          key: "_consumeComment",
          value: function _consumeComment(start) {
            var _this131 = this;

            this._beginToken(TokenType.COMMENT_START, start);

            this._requireCharCode($MINUS);

            this._endToken([]);

            this._consumeRawText(false, function () {
              return _this131._attemptStr('-->');
            });

            this._beginToken(TokenType.COMMENT_END);

            this._requireStr('-->');

            this._endToken([]);
          }
        }, {
          key: "_consumeCdata",
          value: function _consumeCdata(start) {
            var _this132 = this;

            this._beginToken(TokenType.CDATA_START, start);

            this._requireStr('CDATA[');

            this._endToken([]);

            this._consumeRawText(false, function () {
              return _this132._attemptStr(']]>');
            });

            this._beginToken(TokenType.CDATA_END);

            this._requireStr(']]>');

            this._endToken([]);
          }
        }, {
          key: "_consumeDocType",
          value: function _consumeDocType(start) {
            this._beginToken(TokenType.DOC_TYPE, start);

            var contentStart = this._cursor.clone();

            this._attemptUntilChar($GT);

            var content = this._cursor.getChars(contentStart);

            this._cursor.advance();

            this._endToken([content]);
          }
        }, {
          key: "_consumePrefixAndName",
          value: function _consumePrefixAndName() {
            var nameOrPrefixStart = this._cursor.clone();

            var prefix = '';

            while (this._cursor.peek() !== $COLON && !isPrefixEnd(this._cursor.peek())) {
              this._cursor.advance();
            }

            var nameStart;

            if (this._cursor.peek() === $COLON) {
              prefix = this._cursor.getChars(nameOrPrefixStart);

              this._cursor.advance();

              nameStart = this._cursor.clone();
            } else {
              nameStart = nameOrPrefixStart;
            }

            this._requireCharCodeUntilFn(isNameEnd, prefix === '' ? 0 : 1);

            var name = this._cursor.getChars(nameStart);

            return [prefix, name];
          }
        }, {
          key: "_consumeTagOpen",
          value: function _consumeTagOpen(start) {
            var tagName;
            var prefix;
            var openTagToken;

            try {
              if (!isAsciiLetter(this._cursor.peek())) {
                throw this._createError(_unexpectedCharacterErrorMsg(this._cursor.peek()), this._cursor.getSpan(start));
              }

              openTagToken = this._consumeTagOpenStart(start);
              prefix = openTagToken.parts[0];
              tagName = openTagToken.parts[1];

              this._attemptCharCodeUntilFn(isNotWhitespace);

              while (this._cursor.peek() !== $SLASH && this._cursor.peek() !== $GT && this._cursor.peek() !== $LT && this._cursor.peek() !== $EOF) {
                this._consumeAttributeName();

                this._attemptCharCodeUntilFn(isNotWhitespace);

                if (this._attemptCharCode($EQ)) {
                  this._attemptCharCodeUntilFn(isNotWhitespace);

                  this._consumeAttributeValue();
                }

                this._attemptCharCodeUntilFn(isNotWhitespace);
              }

              this._consumeTagOpenEnd();
            } catch (e) {
              if (e instanceof _ControlFlowError) {
                if (openTagToken) {
                  // We errored before we could close the opening tag, so it is incomplete.
                  openTagToken.type = TokenType.INCOMPLETE_TAG_OPEN;
                } else {
                  // When the start tag is invalid, assume we want a "<" as text.
                  // Back to back text tokens are merged at the end.
                  this._beginToken(TokenType.TEXT, start);

                  this._endToken(['<']);
                }

                return;
              }

              throw e;
            }

            var contentTokenType = this._getTagDefinition(tagName).getContentType(prefix);

            if (contentTokenType === TagContentType.RAW_TEXT) {
              this._consumeRawTextWithTagClose(prefix, tagName, false);
            } else if (contentTokenType === TagContentType.ESCAPABLE_RAW_TEXT) {
              this._consumeRawTextWithTagClose(prefix, tagName, true);
            }
          }
        }, {
          key: "_consumeRawTextWithTagClose",
          value: function _consumeRawTextWithTagClose(prefix, tagName, decodeEntities) {
            var _this133 = this;

            this._consumeRawText(decodeEntities, function () {
              if (!_this133._attemptCharCode($LT)) return false;
              if (!_this133._attemptCharCode($SLASH)) return false;

              _this133._attemptCharCodeUntilFn(isNotWhitespace);

              if (!_this133._attemptStrCaseInsensitive(tagName)) return false;

              _this133._attemptCharCodeUntilFn(isNotWhitespace);

              return _this133._attemptCharCode($GT);
            });

            this._beginToken(TokenType.TAG_CLOSE);

            this._requireCharCodeUntilFn(function (code) {
              return code === $GT;
            }, 3);

            this._cursor.advance(); // Consume the `>`


            this._endToken([prefix, tagName]);
          }
        }, {
          key: "_consumeTagOpenStart",
          value: function _consumeTagOpenStart(start) {
            this._beginToken(TokenType.TAG_OPEN_START, start);

            var parts = this._consumePrefixAndName();

            return this._endToken(parts);
          }
        }, {
          key: "_consumeAttributeName",
          value: function _consumeAttributeName() {
            var attrNameStart = this._cursor.peek();

            if (attrNameStart === $SQ || attrNameStart === $DQ) {
              throw this._createError(_unexpectedCharacterErrorMsg(attrNameStart), this._cursor.getSpan());
            }

            this._beginToken(TokenType.ATTR_NAME);

            var prefixAndName = this._consumePrefixAndName();

            this._endToken(prefixAndName);
          }
        }, {
          key: "_consumeAttributeValue",
          value: function _consumeAttributeValue() {
            var value;

            if (this._cursor.peek() === $SQ || this._cursor.peek() === $DQ) {
              this._beginToken(TokenType.ATTR_QUOTE);

              var quoteChar = this._cursor.peek();

              this._cursor.advance();

              this._endToken([String.fromCodePoint(quoteChar)]);

              this._beginToken(TokenType.ATTR_VALUE);

              var parts = [];

              while (this._cursor.peek() !== quoteChar) {
                parts.push(this._readChar(true));
              }

              value = parts.join('');

              this._endToken([this._processCarriageReturns(value)]);

              this._beginToken(TokenType.ATTR_QUOTE);

              this._cursor.advance();

              this._endToken([String.fromCodePoint(quoteChar)]);
            } else {
              this._beginToken(TokenType.ATTR_VALUE);

              var valueStart = this._cursor.clone();

              this._requireCharCodeUntilFn(isNameEnd, 1);

              value = this._cursor.getChars(valueStart);

              this._endToken([this._processCarriageReturns(value)]);
            }
          }
        }, {
          key: "_consumeTagOpenEnd",
          value: function _consumeTagOpenEnd() {
            var tokenType = this._attemptCharCode($SLASH) ? TokenType.TAG_OPEN_END_VOID : TokenType.TAG_OPEN_END;

            this._beginToken(tokenType);

            this._requireCharCode($GT);

            this._endToken([]);
          }
        }, {
          key: "_consumeTagClose",
          value: function _consumeTagClose(start) {
            this._beginToken(TokenType.TAG_CLOSE, start);

            this._attemptCharCodeUntilFn(isNotWhitespace);

            var prefixAndName = this._consumePrefixAndName();

            this._attemptCharCodeUntilFn(isNotWhitespace);

            this._requireCharCode($GT);

            this._endToken(prefixAndName);
          }
        }, {
          key: "_consumeExpansionFormStart",
          value: function _consumeExpansionFormStart() {
            this._beginToken(TokenType.EXPANSION_FORM_START);

            this._requireCharCode($LBRACE);

            this._endToken([]);

            this._expansionCaseStack.push(TokenType.EXPANSION_FORM_START);

            this._beginToken(TokenType.RAW_TEXT);

            var condition = this._readUntil($COMMA);

            var normalizedCondition = this._processCarriageReturns(condition);

            if (this._i18nNormalizeLineEndingsInICUs) {
              // We explicitly want to normalize line endings for this text.
              this._endToken([normalizedCondition]);
            } else {
              // We are not normalizing line endings.
              var conditionToken = this._endToken([condition]);

              if (normalizedCondition !== condition) {
                this.nonNormalizedIcuExpressions.push(conditionToken);
              }
            }

            this._requireCharCode($COMMA);

            this._attemptCharCodeUntilFn(isNotWhitespace);

            this._beginToken(TokenType.RAW_TEXT);

            var type = this._readUntil($COMMA);

            this._endToken([type]);

            this._requireCharCode($COMMA);

            this._attemptCharCodeUntilFn(isNotWhitespace);
          }
        }, {
          key: "_consumeExpansionCaseStart",
          value: function _consumeExpansionCaseStart() {
            this._beginToken(TokenType.EXPANSION_CASE_VALUE);

            var value = this._readUntil($LBRACE).trim();

            this._endToken([value]);

            this._attemptCharCodeUntilFn(isNotWhitespace);

            this._beginToken(TokenType.EXPANSION_CASE_EXP_START);

            this._requireCharCode($LBRACE);

            this._endToken([]);

            this._attemptCharCodeUntilFn(isNotWhitespace);

            this._expansionCaseStack.push(TokenType.EXPANSION_CASE_EXP_START);
          }
        }, {
          key: "_consumeExpansionCaseEnd",
          value: function _consumeExpansionCaseEnd() {
            this._beginToken(TokenType.EXPANSION_CASE_EXP_END);

            this._requireCharCode($RBRACE);

            this._endToken([]);

            this._attemptCharCodeUntilFn(isNotWhitespace);

            this._expansionCaseStack.pop();
          }
        }, {
          key: "_consumeExpansionFormEnd",
          value: function _consumeExpansionFormEnd() {
            this._beginToken(TokenType.EXPANSION_FORM_END);

            this._requireCharCode($RBRACE);

            this._endToken([]);

            this._expansionCaseStack.pop();
          }
        }, {
          key: "_consumeText",
          value: function _consumeText() {
            var start = this._cursor.clone();

            this._beginToken(TokenType.TEXT, start);

            var parts = [];

            do {
              if (this._interpolationConfig && this._attemptStr(this._interpolationConfig.start)) {
                parts.push(this._interpolationConfig.start);
                this._inInterpolation = true;
              } else if (this._interpolationConfig && this._inInterpolation && this._attemptStr(this._interpolationConfig.end)) {
                parts.push(this._interpolationConfig.end);
                this._inInterpolation = false;
              } else {
                parts.push(this._readChar(true));
              }
            } while (!this._isTextEnd());

            this._endToken([this._processCarriageReturns(parts.join(''))]);
          }
        }, {
          key: "_isTextEnd",
          value: function _isTextEnd() {
            if (this._cursor.peek() === $LT || this._cursor.peek() === $EOF) {
              return true;
            }

            if (this._tokenizeIcu && !this._inInterpolation) {
              if (this.isExpansionFormStart()) {
                // start of an expansion form
                return true;
              }

              if (this._cursor.peek() === $RBRACE && this._isInExpansionCase()) {
                // end of and expansion case
                return true;
              }
            }

            return false;
          }
        }, {
          key: "_readUntil",
          value: function _readUntil(_char6) {
            var start = this._cursor.clone();

            this._attemptUntilChar(_char6);

            return this._cursor.getChars(start);
          }
        }, {
          key: "_isInExpansionCase",
          value: function _isInExpansionCase() {
            return this._expansionCaseStack.length > 0 && this._expansionCaseStack[this._expansionCaseStack.length - 1] === TokenType.EXPANSION_CASE_EXP_START;
          }
        }, {
          key: "_isInExpansionForm",
          value: function _isInExpansionForm() {
            return this._expansionCaseStack.length > 0 && this._expansionCaseStack[this._expansionCaseStack.length - 1] === TokenType.EXPANSION_FORM_START;
          }
        }, {
          key: "isExpansionFormStart",
          value: function isExpansionFormStart() {
            if (this._cursor.peek() !== $LBRACE) {
              return false;
            }

            if (this._interpolationConfig) {
              var _start3 = this._cursor.clone();

              var isInterpolation = this._attemptStr(this._interpolationConfig.start);

              this._cursor = _start3;
              return !isInterpolation;
            }

            return true;
          }
        }]);

        return _Tokenizer;
      }();

      function isNotWhitespace(code) {
        return !isWhitespace(code) || code === $EOF;
      }

      function isNameEnd(code) {
        return isWhitespace(code) || code === $GT || code === $LT || code === $SLASH || code === $SQ || code === $DQ || code === $EQ || code === $EOF;
      }

      function isPrefixEnd(code) {
        return (code < $a || $z < code) && (code < $A || $Z < code) && (code < $0 || code > $9);
      }

      function isDigitEntityEnd(code) {
        return code == $SEMICOLON || code == $EOF || !isAsciiHexDigit(code);
      }

      function isNamedEntityEnd(code) {
        return code == $SEMICOLON || code == $EOF || !isAsciiLetter(code);
      }

      function isExpansionCaseStart(peek) {
        return peek !== $RBRACE;
      }

      function compareCharCodeCaseInsensitive(code1, code2) {
        return toUpperCaseCharCode(code1) == toUpperCaseCharCode(code2);
      }

      function toUpperCaseCharCode(code) {
        return code >= $a && code <= $z ? code - $a + $A : code;
      }

      function mergeTextTokens(srcTokens) {
        var dstTokens = [];
        var lastDstToken = undefined;

        for (var i = 0; i < srcTokens.length; i++) {
          var token = srcTokens[i];

          if (lastDstToken && lastDstToken.type == TokenType.TEXT && token.type == TokenType.TEXT) {
            lastDstToken.parts[0] += token.parts[0];
            lastDstToken.sourceSpan.end = token.sourceSpan.end;
          } else {
            lastDstToken = token;
            dstTokens.push(lastDstToken);
          }
        }

        return dstTokens;
      }

      var PlainCharacterCursor = /*#__PURE__*/function () {
        function PlainCharacterCursor(fileOrCursor, range) {
          _classCallCheck(this, PlainCharacterCursor);

          if (fileOrCursor instanceof PlainCharacterCursor) {
            this.file = fileOrCursor.file;
            this.input = fileOrCursor.input;
            this.end = fileOrCursor.end;
            var state = fileOrCursor.state; // Note: avoid using `{...fileOrCursor.state}` here as that has a severe performance penalty.
            // In ES5 bundles the object spread operator is translated into the `__assign` helper, which
            // is not optimized by VMs as efficiently as a raw object literal. Since this constructor is
            // called in tight loops, this difference matters.

            this.state = {
              peek: state.peek,
              offset: state.offset,
              line: state.line,
              column: state.column
            };
          } else {
            if (!range) {
              throw new Error('Programming error: the range argument must be provided with a file argument.');
            }

            this.file = fileOrCursor;
            this.input = fileOrCursor.content;
            this.end = range.endPos;
            this.state = {
              peek: -1,
              offset: range.startPos,
              line: range.startLine,
              column: range.startCol
            };
          }
        }

        _createClass(PlainCharacterCursor, [{
          key: "clone",
          value: function clone() {
            return new PlainCharacterCursor(this);
          }
        }, {
          key: "peek",
          value: function peek() {
            return this.state.peek;
          }
        }, {
          key: "charsLeft",
          value: function charsLeft() {
            return this.end - this.state.offset;
          }
        }, {
          key: "diff",
          value: function diff(other) {
            return this.state.offset - other.state.offset;
          }
        }, {
          key: "advance",
          value: function advance() {
            this.advanceState(this.state);
          }
        }, {
          key: "init",
          value: function init() {
            this.updatePeek(this.state);
          }
        }, {
          key: "getSpan",
          value: function getSpan(start, leadingTriviaCodePoints) {
            start = start || this;
            var fullStart = start;

            if (leadingTriviaCodePoints) {
              while (this.diff(start) > 0 && leadingTriviaCodePoints.indexOf(start.peek()) !== -1) {
                if (fullStart === start) {
                  start = start.clone();
                }

                start.advance();
              }
            }

            var startLocation = this.locationFromCursor(start);
            var endLocation = this.locationFromCursor(this);
            var fullStartLocation = fullStart !== start ? this.locationFromCursor(fullStart) : startLocation;
            return new ParseSourceSpan(startLocation, endLocation, fullStartLocation);
          }
        }, {
          key: "getChars",
          value: function getChars(start) {
            return this.input.substring(start.state.offset, this.state.offset);
          }
        }, {
          key: "charAt",
          value: function charAt(pos) {
            return this.input.charCodeAt(pos);
          }
        }, {
          key: "advanceState",
          value: function advanceState(state) {
            if (state.offset >= this.end) {
              this.state = state;
              throw new CursorError('Unexpected character "EOF"', this);
            }

            var currentChar = this.charAt(state.offset);

            if (currentChar === $LF) {
              state.line++;
              state.column = 0;
            } else if (!isNewLine(currentChar)) {
              state.column++;
            }

            state.offset++;
            this.updatePeek(state);
          }
        }, {
          key: "updatePeek",
          value: function updatePeek(state) {
            state.peek = state.offset >= this.end ? $EOF : this.charAt(state.offset);
          }
        }, {
          key: "locationFromCursor",
          value: function locationFromCursor(cursor) {
            return new ParseLocation(cursor.file, cursor.state.offset, cursor.state.line, cursor.state.column);
          }
        }]);

        return PlainCharacterCursor;
      }();

      var EscapedCharacterCursor = /*#__PURE__*/function (_PlainCharacterCursor) {
        _inherits(EscapedCharacterCursor, _PlainCharacterCursor);

        var _super87 = _createSuper(EscapedCharacterCursor);

        function EscapedCharacterCursor(fileOrCursor, range) {
          var _this134;

          _classCallCheck(this, EscapedCharacterCursor);

          if (fileOrCursor instanceof EscapedCharacterCursor) {
            _this134 = _super87.call(this, fileOrCursor);
            _this134.internalState = Object.assign({}, fileOrCursor.internalState);
          } else {
            _this134 = _super87.call(this, fileOrCursor, range);
            _this134.internalState = _this134.state;
          }

          return _possibleConstructorReturn(_this134);
        }

        _createClass(EscapedCharacterCursor, [{
          key: "advance",
          value: function advance() {
            this.state = this.internalState;

            _get(_getPrototypeOf(EscapedCharacterCursor.prototype), "advance", this).call(this);

            this.processEscapeSequence();
          }
        }, {
          key: "init",
          value: function init() {
            _get(_getPrototypeOf(EscapedCharacterCursor.prototype), "init", this).call(this);

            this.processEscapeSequence();
          }
        }, {
          key: "clone",
          value: function clone() {
            return new EscapedCharacterCursor(this);
          }
        }, {
          key: "getChars",
          value: function getChars(start) {
            var cursor = start.clone();
            var chars = '';

            while (cursor.internalState.offset < this.internalState.offset) {
              chars += String.fromCodePoint(cursor.peek());
              cursor.advance();
            }

            return chars;
          }
          /**
           * Process the escape sequence that starts at the current position in the text.
           *
           * This method is called to ensure that `peek` has the unescaped value of escape sequences.
           */

        }, {
          key: "processEscapeSequence",
          value: function processEscapeSequence() {
            var _this135 = this;

            var peek = function peek() {
              return _this135.internalState.peek;
            };

            if (peek() === $BACKSLASH) {
              // We have hit an escape sequence so we need the internal state to become independent
              // of the external state.
              this.internalState = Object.assign({}, this.state); // Move past the backslash

              this.advanceState(this.internalState); // First check for standard control char sequences

              if (peek() === $n) {
                this.state.peek = $LF;
              } else if (peek() === $r) {
                this.state.peek = $CR;
              } else if (peek() === $v) {
                this.state.peek = $VTAB;
              } else if (peek() === $t) {
                this.state.peek = $TAB;
              } else if (peek() === $b) {
                this.state.peek = $BSPACE;
              } else if (peek() === $f) {
                this.state.peek = $FF;
              } // Now consider more complex sequences
              else if (peek() === $u) {
                  // Unicode code-point sequence
                  this.advanceState(this.internalState); // advance past the `u` char

                  if (peek() === $LBRACE) {
                    // Variable length Unicode, e.g. `\x{123}`
                    this.advanceState(this.internalState); // advance past the `{` char
                    // Advance past the variable number of hex digits until we hit a `}` char

                    var digitStart = this.clone();
                    var length = 0;

                    while (peek() !== $RBRACE) {
                      this.advanceState(this.internalState);
                      length++;
                    }

                    this.state.peek = this.decodeHexDigits(digitStart, length);
                  } else {
                    // Fixed length Unicode, e.g. `\u1234`
                    var _digitStart = this.clone();

                    this.advanceState(this.internalState);
                    this.advanceState(this.internalState);
                    this.advanceState(this.internalState);
                    this.state.peek = this.decodeHexDigits(_digitStart, 4);
                  }
                } else if (peek() === $x) {
                  // Hex char code, e.g. `\x2F`
                  this.advanceState(this.internalState); // advance past the `x` char

                  var _digitStart2 = this.clone();

                  this.advanceState(this.internalState);
                  this.state.peek = this.decodeHexDigits(_digitStart2, 2);
                } else if (isOctalDigit(peek())) {
                  // Octal char code, e.g. `\012`,
                  var octal = '';
                  var _length = 0;
                  var previous = this.clone();

                  while (isOctalDigit(peek()) && _length < 3) {
                    previous = this.clone();
                    octal += String.fromCodePoint(peek());
                    this.advanceState(this.internalState);
                    _length++;
                  }

                  this.state.peek = parseInt(octal, 8); // Backup one char

                  this.internalState = previous.internalState;
                } else if (isNewLine(this.internalState.peek)) {
                  // Line continuation `\` followed by a new line
                  this.advanceState(this.internalState); // advance over the newline

                  this.state = this.internalState;
                } else {
                  // If none of the `if` blocks were executed then we just have an escaped normal character.
                  // In that case we just, effectively, skip the backslash from the character.
                  this.state.peek = this.internalState.peek;
                }
            }
          }
        }, {
          key: "decodeHexDigits",
          value: function decodeHexDigits(start, length) {
            var hex = this.input.substr(start.internalState.offset, length);
            var charCode = parseInt(hex, 16);

            if (!isNaN(charCode)) {
              return charCode;
            } else {
              start.state = start.internalState;
              throw new CursorError('Invalid hexadecimal escape sequence', start);
            }
          }
        }]);

        return EscapedCharacterCursor;
      }(PlainCharacterCursor);

      var CursorError = function CursorError(msg, cursor) {
        _classCallCheck(this, CursorError);

        this.msg = msg;
        this.cursor = cursor;
      };
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      var TreeError = /*#__PURE__*/function (_ParseError2) {
        _inherits(TreeError, _ParseError2);

        var _super88 = _createSuper(TreeError);

        function TreeError(elementName, span, msg) {
          var _this136;

          _classCallCheck(this, TreeError);

          _this136 = _super88.call(this, span, msg);
          _this136.elementName = elementName;
          return _this136;
        }

        _createClass(TreeError, null, [{
          key: "create",
          value: function create(elementName, span, msg) {
            return new TreeError(elementName, span, msg);
          }
        }]);

        return TreeError;
      }(ParseError);

      var ParseTreeResult = function ParseTreeResult(rootNodes, errors) {
        _classCallCheck(this, ParseTreeResult);

        this.rootNodes = rootNodes;
        this.errors = errors;
      };

      var Parser = /*#__PURE__*/function () {
        function Parser(getTagDefinition) {
          _classCallCheck(this, Parser);

          this.getTagDefinition = getTagDefinition;
        }

        _createClass(Parser, [{
          key: "parse",
          value: function parse(source, url, options) {
            var tokenizeResult = tokenize(source, url, this.getTagDefinition, options);
            var parser = new _TreeBuilder(tokenizeResult.tokens, this.getTagDefinition);
            parser.build();
            return new ParseTreeResult(parser.rootNodes, tokenizeResult.errors.concat(parser.errors));
          }
        }]);

        return Parser;
      }();

      var _TreeBuilder = /*#__PURE__*/function () {
        function _TreeBuilder(tokens, getTagDefinition) {
          _classCallCheck(this, _TreeBuilder);

          this.tokens = tokens;
          this.getTagDefinition = getTagDefinition;
          this._index = -1;
          this._elementStack = [];
          this.rootNodes = [];
          this.errors = [];

          this._advance();
        }

        _createClass(_TreeBuilder, [{
          key: "build",
          value: function build() {
            while (this._peek.type !== TokenType.EOF) {
              if (this._peek.type === TokenType.TAG_OPEN_START || this._peek.type === TokenType.INCOMPLETE_TAG_OPEN) {
                this._consumeStartTag(this._advance());
              } else if (this._peek.type === TokenType.TAG_CLOSE) {
                this._consumeEndTag(this._advance());
              } else if (this._peek.type === TokenType.CDATA_START) {
                this._closeVoidElement();

                this._consumeCdata(this._advance());
              } else if (this._peek.type === TokenType.COMMENT_START) {
                this._closeVoidElement();

                this._consumeComment(this._advance());
              } else if (this._peek.type === TokenType.TEXT || this._peek.type === TokenType.RAW_TEXT || this._peek.type === TokenType.ESCAPABLE_RAW_TEXT) {
                this._closeVoidElement();

                this._consumeText(this._advance());
              } else if (this._peek.type === TokenType.EXPANSION_FORM_START) {
                this._consumeExpansion(this._advance());
              } else {
                // Skip all other tokens...
                this._advance();
              }
            }
          }
        }, {
          key: "_advance",
          value: function _advance() {
            var prev = this._peek;

            if (this._index < this.tokens.length - 1) {
              // Note: there is always an EOF token at the end
              this._index++;
            }

            this._peek = this.tokens[this._index];
            return prev;
          }
        }, {
          key: "_advanceIf",
          value: function _advanceIf(type) {
            if (this._peek.type === type) {
              return this._advance();
            }

            return null;
          }
        }, {
          key: "_consumeCdata",
          value: function _consumeCdata(_startToken) {
            this._consumeText(this._advance());

            this._advanceIf(TokenType.CDATA_END);
          }
        }, {
          key: "_consumeComment",
          value: function _consumeComment(token) {
            var text = this._advanceIf(TokenType.RAW_TEXT);

            this._advanceIf(TokenType.COMMENT_END);

            var value = text != null ? text.parts[0].trim() : null;

            this._addToParent(new Comment(value, token.sourceSpan));
          }
        }, {
          key: "_consumeExpansion",
          value: function _consumeExpansion(token) {
            var switchValue = this._advance();

            var type = this._advance();

            var cases = []; // read =

            while (this._peek.type === TokenType.EXPANSION_CASE_VALUE) {
              var expCase = this._parseExpansionCase();

              if (!expCase) return; // error

              cases.push(expCase);
            } // read the final }


            if (this._peek.type !== TokenType.EXPANSION_FORM_END) {
              this.errors.push(TreeError.create(null, this._peek.sourceSpan, "Invalid ICU message. Missing '}'."));
              return;
            }

            var sourceSpan = new ParseSourceSpan(token.sourceSpan.start, this._peek.sourceSpan.end, token.sourceSpan.fullStart);

            this._addToParent(new Expansion(switchValue.parts[0], type.parts[0], cases, sourceSpan, switchValue.sourceSpan));

            this._advance();
          }
        }, {
          key: "_parseExpansionCase",
          value: function _parseExpansionCase() {
            var value = this._advance(); // read {


            if (this._peek.type !== TokenType.EXPANSION_CASE_EXP_START) {
              this.errors.push(TreeError.create(null, this._peek.sourceSpan, "Invalid ICU message. Missing '{'."));
              return null;
            } // read until }


            var start = this._advance();

            var exp = this._collectExpansionExpTokens(start);

            if (!exp) return null;

            var end = this._advance();

            exp.push(new Token(TokenType.EOF, [], end.sourceSpan)); // parse everything in between { and }

            var expansionCaseParser = new _TreeBuilder(exp, this.getTagDefinition);
            expansionCaseParser.build();

            if (expansionCaseParser.errors.length > 0) {
              this.errors = this.errors.concat(expansionCaseParser.errors);
              return null;
            }

            var sourceSpan = new ParseSourceSpan(value.sourceSpan.start, end.sourceSpan.end, value.sourceSpan.fullStart);
            var expSourceSpan = new ParseSourceSpan(start.sourceSpan.start, end.sourceSpan.end, start.sourceSpan.fullStart);
            return new ExpansionCase(value.parts[0], expansionCaseParser.rootNodes, sourceSpan, value.sourceSpan, expSourceSpan);
          }
        }, {
          key: "_collectExpansionExpTokens",
          value: function _collectExpansionExpTokens(start) {
            var exp = [];
            var expansionFormStack = [TokenType.EXPANSION_CASE_EXP_START];

            while (true) {
              if (this._peek.type === TokenType.EXPANSION_FORM_START || this._peek.type === TokenType.EXPANSION_CASE_EXP_START) {
                expansionFormStack.push(this._peek.type);
              }

              if (this._peek.type === TokenType.EXPANSION_CASE_EXP_END) {
                if (lastOnStack(expansionFormStack, TokenType.EXPANSION_CASE_EXP_START)) {
                  expansionFormStack.pop();
                  if (expansionFormStack.length == 0) return exp;
                } else {
                  this.errors.push(TreeError.create(null, start.sourceSpan, "Invalid ICU message. Missing '}'."));
                  return null;
                }
              }

              if (this._peek.type === TokenType.EXPANSION_FORM_END) {
                if (lastOnStack(expansionFormStack, TokenType.EXPANSION_FORM_START)) {
                  expansionFormStack.pop();
                } else {
                  this.errors.push(TreeError.create(null, start.sourceSpan, "Invalid ICU message. Missing '}'."));
                  return null;
                }
              }

              if (this._peek.type === TokenType.EOF) {
                this.errors.push(TreeError.create(null, start.sourceSpan, "Invalid ICU message. Missing '}'."));
                return null;
              }

              exp.push(this._advance());
            }
          }
        }, {
          key: "_consumeText",
          value: function _consumeText(token) {
            var text = token.parts[0];

            if (text.length > 0 && text[0] == '\n') {
              var parent = this._getParentElement();

              if (parent != null && parent.children.length == 0 && this.getTagDefinition(parent.name).ignoreFirstLf) {
                text = text.substring(1);
              }
            }

            if (text.length > 0) {
              this._addToParent(new Text$3(text, token.sourceSpan));
            }
          }
        }, {
          key: "_closeVoidElement",
          value: function _closeVoidElement() {
            var el = this._getParentElement();

            if (el && this.getTagDefinition(el.name).isVoid) {
              this._elementStack.pop();
            }
          }
        }, {
          key: "_consumeStartTag",
          value: function _consumeStartTag(startTagToken) {
            var _startTagToken$parts = _slicedToArray(startTagToken.parts, 2),
                prefix = _startTagToken$parts[0],
                name = _startTagToken$parts[1];

            var attrs = [];

            while (this._peek.type === TokenType.ATTR_NAME) {
              attrs.push(this._consumeAttr(this._advance()));
            }

            var fullName = this._getElementFullName(prefix, name, this._getParentElement());

            var selfClosing = false; // Note: There could have been a tokenizer error
            // so that we don't get a token for the end tag...

            if (this._peek.type === TokenType.TAG_OPEN_END_VOID) {
              this._advance();

              selfClosing = true;
              var tagDef = this.getTagDefinition(fullName);

              if (!(tagDef.canSelfClose || getNsPrefix(fullName) !== null || tagDef.isVoid)) {
                this.errors.push(TreeError.create(fullName, startTagToken.sourceSpan, "Only void and foreign elements can be self closed \"".concat(startTagToken.parts[1], "\"")));
              }
            } else if (this._peek.type === TokenType.TAG_OPEN_END) {
              this._advance();

              selfClosing = false;
            }

            var end = this._peek.sourceSpan.fullStart;
            var span = new ParseSourceSpan(startTagToken.sourceSpan.start, end, startTagToken.sourceSpan.fullStart); // Create a separate `startSpan` because `span` will be modified when there is an `end` span.

            var startSpan = new ParseSourceSpan(startTagToken.sourceSpan.start, end, startTagToken.sourceSpan.fullStart);
            var el = new Element$1(fullName, attrs, [], span, startSpan, undefined);

            this._pushElement(el);

            if (selfClosing) {
              // Elements that are self-closed have their `endSourceSpan` set to the full span, as the
              // element start tag also represents the end tag.
              this._popElement(fullName, span);
            } else if (startTagToken.type === TokenType.INCOMPLETE_TAG_OPEN) {
              // We already know the opening tag is not complete, so it is unlikely it has a corresponding
              // close tag. Let's optimistically parse it as a full element and emit an error.
              this._popElement(fullName, null);

              this.errors.push(TreeError.create(fullName, span, "Opening tag \"".concat(fullName, "\" not terminated.")));
            }
          }
        }, {
          key: "_pushElement",
          value: function _pushElement(el) {
            var parentEl = this._getParentElement();

            if (parentEl && this.getTagDefinition(parentEl.name).isClosedByChild(el.name)) {
              this._elementStack.pop();
            }

            this._addToParent(el);

            this._elementStack.push(el);
          }
        }, {
          key: "_consumeEndTag",
          value: function _consumeEndTag(endTagToken) {
            var fullName = this._getElementFullName(endTagToken.parts[0], endTagToken.parts[1], this._getParentElement());

            if (this.getTagDefinition(fullName).isVoid) {
              this.errors.push(TreeError.create(fullName, endTagToken.sourceSpan, "Void elements do not have end tags \"".concat(endTagToken.parts[1], "\"")));
            } else if (!this._popElement(fullName, endTagToken.sourceSpan)) {
              var errMsg = "Unexpected closing tag \"".concat(fullName, "\". It may happen when the tag has already been closed by another tag. For more info see https://www.w3.org/TR/html5/syntax.html#closing-elements-that-have-implied-end-tags");
              this.errors.push(TreeError.create(fullName, endTagToken.sourceSpan, errMsg));
            }
          }
          /**
           * Closes the nearest element with the tag name `fullName` in the parse tree.
           * `endSourceSpan` is the span of the closing tag, or null if the element does
           * not have a closing tag (for example, this happens when an incomplete
           * opening tag is recovered).
           */

        }, {
          key: "_popElement",
          value: function _popElement(fullName, endSourceSpan) {
            for (var stackIndex = this._elementStack.length - 1; stackIndex >= 0; stackIndex--) {
              var el = this._elementStack[stackIndex];

              if (el.name == fullName) {
                // Record the parse span with the element that is being closed. Any elements that are
                // removed from the element stack at this point are closed implicitly, so they won't get
                // an end source span (as there is no explicit closing element).
                el.endSourceSpan = endSourceSpan;
                el.sourceSpan.end = endSourceSpan !== null ? endSourceSpan.end : el.sourceSpan.end;

                this._elementStack.splice(stackIndex, this._elementStack.length - stackIndex);

                return true;
              }

              if (!this.getTagDefinition(el.name).closedByParent) {
                return false;
              }
            }

            return false;
          }
        }, {
          key: "_consumeAttr",
          value: function _consumeAttr(attrName) {
            var fullName = mergeNsAndName(attrName.parts[0], attrName.parts[1]);
            var end = attrName.sourceSpan.end;
            var value = '';
            var valueSpan = undefined;

            if (this._peek.type === TokenType.ATTR_QUOTE) {
              this._advance();
            }

            if (this._peek.type === TokenType.ATTR_VALUE) {
              var valueToken = this._advance();

              value = valueToken.parts[0];
              end = valueToken.sourceSpan.end;
              valueSpan = valueToken.sourceSpan;
            }

            if (this._peek.type === TokenType.ATTR_QUOTE) {
              var quoteToken = this._advance();

              end = quoteToken.sourceSpan.end;
            }

            var keySpan = new ParseSourceSpan(attrName.sourceSpan.start, attrName.sourceSpan.end);
            return new Attribute(fullName, value, new ParseSourceSpan(attrName.sourceSpan.start, end, attrName.sourceSpan.fullStart), keySpan, valueSpan);
          }
        }, {
          key: "_getParentElement",
          value: function _getParentElement() {
            return this._elementStack.length > 0 ? this._elementStack[this._elementStack.length - 1] : null;
          }
        }, {
          key: "_addToParent",
          value: function _addToParent(node) {
            var parent = this._getParentElement();

            if (parent != null) {
              parent.children.push(node);
            } else {
              this.rootNodes.push(node);
            }
          }
        }, {
          key: "_getElementFullName",
          value: function _getElementFullName(prefix, localName, parentElement) {
            if (prefix === '') {
              prefix = this.getTagDefinition(localName).implicitNamespacePrefix || '';

              if (prefix === '' && parentElement != null) {
                var parentTagName = splitNsName(parentElement.name)[1];
                var parentTagDefinition = this.getTagDefinition(parentTagName);

                if (!parentTagDefinition.preventNamespaceInheritance) {
                  prefix = getNsPrefix(parentElement.name);
                }
              }
            }

            return mergeNsAndName(prefix, localName);
          }
        }]);

        return _TreeBuilder;
      }();

      function lastOnStack(stack, element) {
        return stack.length > 0 && stack[stack.length - 1] === element;
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      var HtmlParser = /*#__PURE__*/function (_Parser) {
        _inherits(HtmlParser, _Parser);

        var _super89 = _createSuper(HtmlParser);

        function HtmlParser() {
          _classCallCheck(this, HtmlParser);

          return _super89.call(this, getHtmlTagDefinition);
        }

        _createClass(HtmlParser, [{
          key: "parse",
          value: function parse(source, url, options) {
            return _get(_getPrototypeOf(HtmlParser.prototype), "parse", this).call(this, source, url, options);
          }
        }]);

        return HtmlParser;
      }(Parser);
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      var PRESERVE_WS_ATTR_NAME = 'ngPreserveWhitespaces';
      var SKIP_WS_TRIM_TAGS = new Set(['pre', 'template', 'textarea', 'script', 'style']); // Equivalent to \s with \u00a0 (non-breaking space) excluded.
      // Based on https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp

      var WS_CHARS = " \f\n\r\t\x0B\u1680\u180E\u2000-\u200A\u2028\u2029\u202F\u205F\u3000\uFEFF";
      var NO_WS_REGEXP = new RegExp("[^".concat(WS_CHARS, "]"));
      var WS_REPLACE_REGEXP = new RegExp("[".concat(WS_CHARS, "]{2,}"), 'g');

      function hasPreserveWhitespacesAttr(attrs) {
        return attrs.some(function (attr) {
          return attr.name === PRESERVE_WS_ATTR_NAME;
        });
      }
      /**
       * Angular Dart introduced &ngsp; as a placeholder for non-removable space, see:
       * https://github.com/dart-lang/angular/blob/0bb611387d29d65b5af7f9d2515ab571fd3fbee4/_tests/test/compiler/preserve_whitespace_test.dart#L25-L32
       * In Angular Dart &ngsp; is converted to the 0xE500 PUA (Private Use Areas) unicode character
       * and later on replaced by a space. We are re-implementing the same idea here.
       */


      function replaceNgsp(value) {
        // lexer is replacing the &ngsp; pseudo-entity with NGSP_UNICODE
        return value.replace(new RegExp(NGSP_UNICODE, 'g'), ' ');
      }
      /**
       * This visitor can walk HTML parse tree and remove / trim text nodes using the following rules:
       * - consider spaces, tabs and new lines as whitespace characters;
       * - drop text nodes consisting of whitespace characters only;
       * - for all other text nodes replace consecutive whitespace characters with one space;
       * - convert &ngsp; pseudo-entity to a single space;
       *
       * Removal and trimming of whitespaces have positive performance impact (less code to generate
       * while compiling templates, faster view creation). At the same time it can be "destructive"
       * in some cases (whitespaces can influence layout). Because of the potential of breaking layout
       * this visitor is not activated by default in Angular 5 and people need to explicitly opt-in for
       * whitespace removal. The default option for whitespace removal will be revisited in Angular 6
       * and might be changed to "on" by default.
       */


      var WhitespaceVisitor = /*#__PURE__*/function () {
        function WhitespaceVisitor() {
          _classCallCheck(this, WhitespaceVisitor);
        }

        _createClass(WhitespaceVisitor, [{
          key: "visitElement",
          value: function visitElement(element, context) {
            if (SKIP_WS_TRIM_TAGS.has(element.name) || hasPreserveWhitespacesAttr(element.attrs)) {
              // don't descent into elements where we need to preserve whitespaces
              // but still visit all attributes to eliminate one used as a market to preserve WS
              return new Element$1(element.name, visitAll$1(this, element.attrs), element.children, element.sourceSpan, element.startSourceSpan, element.endSourceSpan, element.i18n);
            }

            return new Element$1(element.name, element.attrs, visitAllWithSiblings(this, element.children), element.sourceSpan, element.startSourceSpan, element.endSourceSpan, element.i18n);
          }
        }, {
          key: "visitAttribute",
          value: function visitAttribute(attribute, context) {
            return attribute.name !== PRESERVE_WS_ATTR_NAME ? attribute : null;
          }
        }, {
          key: "visitText",
          value: function visitText(text, context) {
            var isNotBlank = text.value.match(NO_WS_REGEXP);
            var hasExpansionSibling = context && (context.prev instanceof Expansion || context.next instanceof Expansion);

            if (isNotBlank || hasExpansionSibling) {
              return new Text$3(replaceNgsp(text.value).replace(WS_REPLACE_REGEXP, ' '), text.sourceSpan, text.i18n);
            }

            return null;
          }
        }, {
          key: "visitComment",
          value: function visitComment(comment, context) {
            return comment;
          }
        }, {
          key: "visitExpansion",
          value: function visitExpansion(expansion, context) {
            return expansion;
          }
        }, {
          key: "visitExpansionCase",
          value: function visitExpansionCase(expansionCase, context) {
            return expansionCase;
          }
        }]);

        return WhitespaceVisitor;
      }();

      function removeWhitespaces(htmlAstWithErrors) {
        return new ParseTreeResult(visitAll$1(new WhitespaceVisitor(), htmlAstWithErrors.rootNodes), htmlAstWithErrors.errors);
      }

      function visitAllWithSiblings(visitor, nodes) {
        var result = [];
        nodes.forEach(function (ast, i) {
          var context = {
            prev: nodes[i - 1],
            next: nodes[i + 1]
          };
          var astResult = ast.visit(visitor, context);

          if (astResult) {
            result.push(astResult);
          }
        });
        return result;
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */
      // http://cldr.unicode.org/index/cldr-spec/plural-rules


      var PLURAL_CASES = ['zero', 'one', 'two', 'few', 'many', 'other'];
      /**
       * Expands special forms into elements.
       *
       * For example,
       *
       * ```
       * { messages.length, plural,
       *   =0 {zero}
       *   =1 {one}
       *   other {more than one}
       * }
       * ```
       *
       * will be expanded into
       *
       * ```
       * <ng-container [ngPlural]="messages.length">
       *   <ng-template ngPluralCase="=0">zero</ng-template>
       *   <ng-template ngPluralCase="=1">one</ng-template>
       *   <ng-template ngPluralCase="other">more than one</ng-template>
       * </ng-container>
       * ```
       */

      function expandNodes(nodes) {
        var expander = new _Expander();
        return new ExpansionResult(visitAll$1(expander, nodes), expander.isExpanded, expander.errors);
      }

      var ExpansionResult = function ExpansionResult(nodes, expanded, errors) {
        _classCallCheck(this, ExpansionResult);

        this.nodes = nodes;
        this.expanded = expanded;
        this.errors = errors;
      };

      var ExpansionError = /*#__PURE__*/function (_ParseError3) {
        _inherits(ExpansionError, _ParseError3);

        var _super90 = _createSuper(ExpansionError);

        function ExpansionError(span, errorMsg) {
          _classCallCheck(this, ExpansionError);

          return _super90.call(this, span, errorMsg);
        }

        return ExpansionError;
      }(ParseError);
      /**
       * Expand expansion forms (plural, select) to directives
       *
       * @internal
       */


      var _Expander = /*#__PURE__*/function () {
        function _Expander() {
          _classCallCheck(this, _Expander);

          this.isExpanded = false;
          this.errors = [];
        }

        _createClass(_Expander, [{
          key: "visitElement",
          value: function visitElement(element, context) {
            return new Element$1(element.name, element.attrs, visitAll$1(this, element.children), element.sourceSpan, element.startSourceSpan, element.endSourceSpan);
          }
        }, {
          key: "visitAttribute",
          value: function visitAttribute(attribute, context) {
            return attribute;
          }
        }, {
          key: "visitText",
          value: function visitText(text, context) {
            return text;
          }
        }, {
          key: "visitComment",
          value: function visitComment(comment, context) {
            return comment;
          }
        }, {
          key: "visitExpansion",
          value: function visitExpansion(icu, context) {
            this.isExpanded = true;
            return icu.type == 'plural' ? _expandPluralForm(icu, this.errors) : _expandDefaultForm(icu, this.errors);
          }
        }, {
          key: "visitExpansionCase",
          value: function visitExpansionCase(icuCase, context) {
            throw new Error('Should not be reached');
          }
        }]);

        return _Expander;
      }(); // Plural forms are expanded to `NgPlural` and `NgPluralCase`s


      function _expandPluralForm(ast, errors) {
        var children = ast.cases.map(function (c) {
          if (PLURAL_CASES.indexOf(c.value) == -1 && !c.value.match(/^=\d+$/)) {
            errors.push(new ExpansionError(c.valueSourceSpan, "Plural cases should be \"=<number>\" or one of ".concat(PLURAL_CASES.join(', '))));
          }

          var expansionResult = expandNodes(c.expression);
          errors.push.apply(errors, _toConsumableArray(expansionResult.errors));
          return new Element$1("ng-template", [new Attribute('ngPluralCase', "".concat(c.value), c.valueSourceSpan, undefined
          /* keySpan */
          , undefined
          /* valueSpan */
          , undefined
          /* i18n */
          )], expansionResult.nodes, c.sourceSpan, c.sourceSpan, c.sourceSpan);
        });
        var switchAttr = new Attribute('[ngPlural]', ast.switchValue, ast.switchValueSourceSpan, undefined
        /* keySpan */
        , undefined
        /* valueSpan */
        , undefined
        /* i18n */
        );
        return new Element$1('ng-container', [switchAttr], children, ast.sourceSpan, ast.sourceSpan, ast.sourceSpan);
      } // ICU messages (excluding plural form) are expanded to `NgSwitch`  and `NgSwitchCase`s


      function _expandDefaultForm(ast, errors) {
        var children = ast.cases.map(function (c) {
          var expansionResult = expandNodes(c.expression);
          errors.push.apply(errors, _toConsumableArray(expansionResult.errors));

          if (c.value === 'other') {
            // other is the default case when no values match
            return new Element$1("ng-template", [new Attribute('ngSwitchDefault', '', c.valueSourceSpan, undefined
            /* keySpan */
            , undefined
            /* valueSpan */
            , undefined
            /* i18n */
            )], expansionResult.nodes, c.sourceSpan, c.sourceSpan, c.sourceSpan);
          }

          return new Element$1("ng-template", [new Attribute('ngSwitchCase', "".concat(c.value), c.valueSourceSpan, undefined
          /* keySpan */
          , undefined
          /* valueSpan */
          , undefined
          /* i18n */
          )], expansionResult.nodes, c.sourceSpan, c.sourceSpan, c.sourceSpan);
        });
        var switchAttr = new Attribute('[ngSwitch]', ast.switchValue, ast.switchValueSourceSpan, undefined
        /* keySpan */
        , undefined
        /* valueSpan */
        , undefined
        /* i18n */
        );
        return new Element$1('ng-container', [switchAttr], children, ast.sourceSpan, ast.sourceSpan, ast.sourceSpan);
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * A segment of text within the template.
       */


      var TextAst = /*#__PURE__*/function () {
        function TextAst(value, ngContentIndex, sourceSpan) {
          _classCallCheck(this, TextAst);

          this.value = value;
          this.ngContentIndex = ngContentIndex;
          this.sourceSpan = sourceSpan;
        }

        _createClass(TextAst, [{
          key: "visit",
          value: function visit(visitor, context) {
            return visitor.visitText(this, context);
          }
        }]);

        return TextAst;
      }();
      /**
       * A bound expression within the text of a template.
       */


      var BoundTextAst = /*#__PURE__*/function () {
        function BoundTextAst(value, ngContentIndex, sourceSpan) {
          _classCallCheck(this, BoundTextAst);

          this.value = value;
          this.ngContentIndex = ngContentIndex;
          this.sourceSpan = sourceSpan;
        }

        _createClass(BoundTextAst, [{
          key: "visit",
          value: function visit(visitor, context) {
            return visitor.visitBoundText(this, context);
          }
        }]);

        return BoundTextAst;
      }();
      /**
       * A plain attribute on an element.
       */


      var AttrAst = /*#__PURE__*/function () {
        function AttrAst(name, value, sourceSpan) {
          _classCallCheck(this, AttrAst);

          this.name = name;
          this.value = value;
          this.sourceSpan = sourceSpan;
        }

        _createClass(AttrAst, [{
          key: "visit",
          value: function visit(visitor, context) {
            return visitor.visitAttr(this, context);
          }
        }]);

        return AttrAst;
      }();

      var BoundPropertyMapping = (_BoundPropertyMapping = {}, _defineProperty2(_BoundPropertyMapping, 4
      /* Animation */
      , 4), _defineProperty2(_BoundPropertyMapping, 1
      /* Attribute */
      ,
      /* Animation */
      1), _defineProperty2(_BoundPropertyMapping, 2
      /* Class */
      ,
      /* Attribute */
      2), _defineProperty2(_BoundPropertyMapping, 0
      /* Property */
      ,
      /* Class */
      0), _defineProperty2(_BoundPropertyMapping, 3
      /* Style */
      ,
      /* Property */
      3), _BoundPropertyMapping);
      /**
       * A binding for an element property (e.g. `[property]="expression"`) or an animation trigger (e.g.
       * `[@trigger]="stateExp"`)
       */

      var BoundElementPropertyAst = /*#__PURE__*/function () {
        function BoundElementPropertyAst(name, type, securityContext, value, unit, sourceSpan) {
          _classCallCheck(this, BoundElementPropertyAst);

          this.name = name;
          this.type = type;
          this.securityContext = securityContext;
          this.value = value;
          this.unit = unit;
          this.sourceSpan = sourceSpan;
          this.isAnimation = this.type === 4
          /* Animation */
          ;
        }

        _createClass(BoundElementPropertyAst, [{
          key: "visit",
          value: function visit(visitor, context) {
            return visitor.visitElementProperty(this, context);
          }
        }], [{
          key: "fromBoundProperty",
          value: function fromBoundProperty(prop) {
            var type = BoundPropertyMapping[prop.type];
            return new BoundElementPropertyAst(prop.name, type, prop.securityContext, prop.value, prop.unit, prop.sourceSpan);
          }
        }]);

        return BoundElementPropertyAst;
      }();
      /**
       * A binding for an element event (e.g. `(event)="handler()"`) or an animation trigger event (e.g.
       * `(@trigger.phase)="callback($event)"`).
       */


      var BoundEventAst = /*#__PURE__*/function () {
        function BoundEventAst(name, target, phase, handler, sourceSpan, handlerSpan) {
          _classCallCheck(this, BoundEventAst);

          this.name = name;
          this.target = target;
          this.phase = phase;
          this.handler = handler;
          this.sourceSpan = sourceSpan;
          this.handlerSpan = handlerSpan;
          this.fullName = BoundEventAst.calcFullName(this.name, this.target, this.phase);
          this.isAnimation = !!this.phase;
        }

        _createClass(BoundEventAst, [{
          key: "visit",
          value: function visit(visitor, context) {
            return visitor.visitEvent(this, context);
          }
        }], [{
          key: "calcFullName",
          value: function calcFullName(name, target, phase) {
            if (target) {
              return "".concat(target, ":").concat(name);
            }

            if (phase) {
              return "@".concat(name, ".").concat(phase);
            }

            return name;
          }
        }, {
          key: "fromParsedEvent",
          value: function fromParsedEvent(event) {
            var target = event.type === 0
            /* Regular */
            ? event.targetOrPhase : null;
            var phase = event.type === 1
            /* Animation */
            ? event.targetOrPhase : null;
            return new BoundEventAst(event.name, target, phase, event.handler, event.sourceSpan, event.handlerSpan);
          }
        }]);

        return BoundEventAst;
      }();
      /**
       * A reference declaration on an element (e.g. `let someName="expression"`).
       */


      var ReferenceAst = /*#__PURE__*/function () {
        function ReferenceAst(name, value, originalValue, sourceSpan) {
          _classCallCheck(this, ReferenceAst);

          this.name = name;
          this.value = value;
          this.originalValue = originalValue;
          this.sourceSpan = sourceSpan;
        }

        _createClass(ReferenceAst, [{
          key: "visit",
          value: function visit(visitor, context) {
            return visitor.visitReference(this, context);
          }
        }]);

        return ReferenceAst;
      }();
      /**
       * A variable declaration on a <ng-template> (e.g. `var-someName="someLocalName"`).
       */


      var VariableAst = /*#__PURE__*/function () {
        function VariableAst(name, value, sourceSpan, valueSpan) {
          _classCallCheck(this, VariableAst);

          this.name = name;
          this.value = value;
          this.sourceSpan = sourceSpan;
          this.valueSpan = valueSpan;
        }

        _createClass(VariableAst, [{
          key: "visit",
          value: function visit(visitor, context) {
            return visitor.visitVariable(this, context);
          }
        }], [{
          key: "fromParsedVariable",
          value: function fromParsedVariable(v) {
            return new VariableAst(v.name, v.value, v.sourceSpan, v.valueSpan);
          }
        }]);

        return VariableAst;
      }();
      /**
       * An element declaration in a template.
       */


      var ElementAst = /*#__PURE__*/function () {
        function ElementAst(name, attrs, inputs, outputs, references, directives, providers, hasViewContainer, queryMatches, children, ngContentIndex, sourceSpan, endSourceSpan) {
          _classCallCheck(this, ElementAst);

          this.name = name;
          this.attrs = attrs;
          this.inputs = inputs;
          this.outputs = outputs;
          this.references = references;
          this.directives = directives;
          this.providers = providers;
          this.hasViewContainer = hasViewContainer;
          this.queryMatches = queryMatches;
          this.children = children;
          this.ngContentIndex = ngContentIndex;
          this.sourceSpan = sourceSpan;
          this.endSourceSpan = endSourceSpan;
        }

        _createClass(ElementAst, [{
          key: "visit",
          value: function visit(visitor, context) {
            return visitor.visitElement(this, context);
          }
        }]);

        return ElementAst;
      }();
      /**
       * A `<ng-template>` element included in an Angular template.
       */


      var EmbeddedTemplateAst = /*#__PURE__*/function () {
        function EmbeddedTemplateAst(attrs, outputs, references, variables, directives, providers, hasViewContainer, queryMatches, children, ngContentIndex, sourceSpan) {
          _classCallCheck(this, EmbeddedTemplateAst);

          this.attrs = attrs;
          this.outputs = outputs;
          this.references = references;
          this.variables = variables;
          this.directives = directives;
          this.providers = providers;
          this.hasViewContainer = hasViewContainer;
          this.queryMatches = queryMatches;
          this.children = children;
          this.ngContentIndex = ngContentIndex;
          this.sourceSpan = sourceSpan;
        }

        _createClass(EmbeddedTemplateAst, [{
          key: "visit",
          value: function visit(visitor, context) {
            return visitor.visitEmbeddedTemplate(this, context);
          }
        }]);

        return EmbeddedTemplateAst;
      }();
      /**
       * A directive property with a bound value (e.g. `*ngIf="condition").
       */


      var BoundDirectivePropertyAst = /*#__PURE__*/function () {
        function BoundDirectivePropertyAst(directiveName, templateName, value, sourceSpan) {
          _classCallCheck(this, BoundDirectivePropertyAst);

          this.directiveName = directiveName;
          this.templateName = templateName;
          this.value = value;
          this.sourceSpan = sourceSpan;
        }

        _createClass(BoundDirectivePropertyAst, [{
          key: "visit",
          value: function visit(visitor, context) {
            return visitor.visitDirectiveProperty(this, context);
          }
        }]);

        return BoundDirectivePropertyAst;
      }();
      /**
       * A directive declared on an element.
       */


      var DirectiveAst = /*#__PURE__*/function () {
        function DirectiveAst(directive, inputs, hostProperties, hostEvents, contentQueryStartId, sourceSpan) {
          _classCallCheck(this, DirectiveAst);

          this.directive = directive;
          this.inputs = inputs;
          this.hostProperties = hostProperties;
          this.hostEvents = hostEvents;
          this.contentQueryStartId = contentQueryStartId;
          this.sourceSpan = sourceSpan;
        }

        _createClass(DirectiveAst, [{
          key: "visit",
          value: function visit(visitor, context) {
            return visitor.visitDirective(this, context);
          }
        }]);

        return DirectiveAst;
      }();
      /**
       * A provider declared on an element
       */


      var ProviderAst = /*#__PURE__*/function () {
        function ProviderAst(token, multiProvider, eager, providers, providerType, lifecycleHooks, sourceSpan, isModule) {
          _classCallCheck(this, ProviderAst);

          this.token = token;
          this.multiProvider = multiProvider;
          this.eager = eager;
          this.providers = providers;
          this.providerType = providerType;
          this.lifecycleHooks = lifecycleHooks;
          this.sourceSpan = sourceSpan;
          this.isModule = isModule;
        }

        _createClass(ProviderAst, [{
          key: "visit",
          value: function visit(visitor, context) {
            // No visit method in the visitor for now...
            return null;
          }
        }]);

        return ProviderAst;
      }();

      var ProviderAstType;

      (function (ProviderAstType) {
        ProviderAstType[ProviderAstType["PublicService"] = 0] = "PublicService";
        ProviderAstType[ProviderAstType["PrivateService"] = 1] = "PrivateService";
        ProviderAstType[ProviderAstType["Component"] = 2] = "Component";
        ProviderAstType[ProviderAstType["Directive"] = 3] = "Directive";
        ProviderAstType[ProviderAstType["Builtin"] = 4] = "Builtin";
      })(ProviderAstType || (ProviderAstType = {}));
      /**
       * Position where content is to be projected (instance of `<ng-content>` in a template).
       */


      var NgContentAst = /*#__PURE__*/function () {
        function NgContentAst(index, ngContentIndex, sourceSpan) {
          _classCallCheck(this, NgContentAst);

          this.index = index;
          this.ngContentIndex = ngContentIndex;
          this.sourceSpan = sourceSpan;
        }

        _createClass(NgContentAst, [{
          key: "visit",
          value: function visit(visitor, context) {
            return visitor.visitNgContent(this, context);
          }
        }]);

        return NgContentAst;
      }();
      /**
       * A visitor that accepts each node but doesn't do anything. It is intended to be used
       * as the base class for a visitor that is only interested in a subset of the node types.
       */


      var NullTemplateVisitor = /*#__PURE__*/function () {
        function NullTemplateVisitor() {
          _classCallCheck(this, NullTemplateVisitor);
        }

        _createClass(NullTemplateVisitor, [{
          key: "visitNgContent",
          value: function visitNgContent(ast, context) {}
        }, {
          key: "visitEmbeddedTemplate",
          value: function visitEmbeddedTemplate(ast, context) {}
        }, {
          key: "visitElement",
          value: function visitElement(ast, context) {}
        }, {
          key: "visitReference",
          value: function visitReference(ast, context) {}
        }, {
          key: "visitVariable",
          value: function visitVariable(ast, context) {}
        }, {
          key: "visitEvent",
          value: function visitEvent(ast, context) {}
        }, {
          key: "visitElementProperty",
          value: function visitElementProperty(ast, context) {}
        }, {
          key: "visitAttr",
          value: function visitAttr(ast, context) {}
        }, {
          key: "visitBoundText",
          value: function visitBoundText(ast, context) {}
        }, {
          key: "visitText",
          value: function visitText(ast, context) {}
        }, {
          key: "visitDirective",
          value: function visitDirective(ast, context) {}
        }, {
          key: "visitDirectiveProperty",
          value: function visitDirectiveProperty(ast, context) {}
        }]);

        return NullTemplateVisitor;
      }();
      /**
       * Base class that can be used to build a visitor that visits each node
       * in an template ast recursively.
       */


      var RecursiveTemplateAstVisitor = /*#__PURE__*/function (_NullTemplateVisitor) {
        _inherits(RecursiveTemplateAstVisitor, _NullTemplateVisitor);

        var _super91 = _createSuper(RecursiveTemplateAstVisitor);

        function RecursiveTemplateAstVisitor() {
          _classCallCheck(this, RecursiveTemplateAstVisitor);

          return _super91.call(this);
        } // Nodes with children


        _createClass(RecursiveTemplateAstVisitor, [{
          key: "visitEmbeddedTemplate",
          value: function visitEmbeddedTemplate(ast, context) {
            return this.visitChildren(context, function (visit) {
              visit(ast.attrs);
              visit(ast.references);
              visit(ast.variables);
              visit(ast.directives);
              visit(ast.providers);
              visit(ast.children);
            });
          }
        }, {
          key: "visitElement",
          value: function visitElement(ast, context) {
            return this.visitChildren(context, function (visit) {
              visit(ast.attrs);
              visit(ast.inputs);
              visit(ast.outputs);
              visit(ast.references);
              visit(ast.directives);
              visit(ast.providers);
              visit(ast.children);
            });
          }
        }, {
          key: "visitDirective",
          value: function visitDirective(ast, context) {
            return this.visitChildren(context, function (visit) {
              visit(ast.inputs);
              visit(ast.hostProperties);
              visit(ast.hostEvents);
            });
          }
        }, {
          key: "visitChildren",
          value: function visitChildren(context, cb) {
            var results = [];
            var t = this;

            function visit(children) {
              if (children && children.length) results.push(templateVisitAll(t, children, context));
            }

            cb(visit);
            return Array.prototype.concat.apply([], results);
          }
        }]);

        return RecursiveTemplateAstVisitor;
      }(NullTemplateVisitor);
      /**
       * Visit every node in a list of {@link TemplateAst}s with the given {@link TemplateAstVisitor}.
       */


      function templateVisitAll(visitor, asts) {
        var context = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
        var result = [];
        var visit = visitor.visit ? function (ast) {
          return visitor.visit(ast, context) || ast.visit(visitor, context);
        } : function (ast) {
          return ast.visit(visitor, context);
        };
        asts.forEach(function (ast) {
          var astResult = visit(ast);

          if (astResult) {
            result.push(astResult);
          }
        });
        return result;
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      var ProviderError = /*#__PURE__*/function (_ParseError4) {
        _inherits(ProviderError, _ParseError4);

        var _super92 = _createSuper(ProviderError);

        function ProviderError(message, span) {
          _classCallCheck(this, ProviderError);

          return _super92.call(this, span, message);
        }

        return ProviderError;
      }(ParseError);

      var ProviderViewContext = function ProviderViewContext(reflector, component) {
        var _this137 = this;

        _classCallCheck(this, ProviderViewContext);

        this.reflector = reflector;
        this.component = component;
        this.errors = [];
        this.viewQueries = _getViewQueries(component);
        this.viewProviders = new Map();
        component.viewProviders.forEach(function (provider) {
          if (_this137.viewProviders.get(tokenReference(provider.token)) == null) {
            _this137.viewProviders.set(tokenReference(provider.token), true);
          }
        });
      };

      var ProviderElementContext = /*#__PURE__*/function () {
        function ProviderElementContext(viewContext, _parent, _isViewRoot, _directiveAsts, attrs, refs, isTemplate, contentQueryStartId, _sourceSpan) {
          var _this138 = this;

          _classCallCheck(this, ProviderElementContext);

          this.viewContext = viewContext;
          this._parent = _parent;
          this._isViewRoot = _isViewRoot;
          this._directiveAsts = _directiveAsts;
          this._sourceSpan = _sourceSpan;
          this._transformedProviders = new Map();
          this._seenProviders = new Map();
          this._queriedTokens = new Map();
          this.transformedHasViewContainer = false;
          this._attrs = {};
          attrs.forEach(function (attrAst) {
            return _this138._attrs[attrAst.name] = attrAst.value;
          });

          var directivesMeta = _directiveAsts.map(function (directiveAst) {
            return directiveAst.directive;
          });

          this._allProviders = _resolveProvidersFromDirectives(directivesMeta, _sourceSpan, viewContext.errors);
          this._contentQueries = _getContentQueries(contentQueryStartId, directivesMeta);
          Array.from(this._allProviders.values()).forEach(function (provider) {
            _this138._addQueryReadsTo(provider.token, provider.token, _this138._queriedTokens);
          });

          if (isTemplate) {
            var templateRefId = createTokenForExternalReference(this.viewContext.reflector, Identifiers.TemplateRef);

            this._addQueryReadsTo(templateRefId, templateRefId, this._queriedTokens);
          }

          refs.forEach(function (refAst) {
            var defaultQueryValue = refAst.value || createTokenForExternalReference(_this138.viewContext.reflector, Identifiers.ElementRef);

            _this138._addQueryReadsTo({
              value: refAst.name
            }, defaultQueryValue, _this138._queriedTokens);
          });

          if (this._queriedTokens.get(this.viewContext.reflector.resolveExternalReference(Identifiers.ViewContainerRef))) {
            this.transformedHasViewContainer = true;
          } // create the providers that we know are eager first


          Array.from(this._allProviders.values()).forEach(function (provider) {
            var eager = provider.eager || _this138._queriedTokens.get(tokenReference(provider.token));

            if (eager) {
              _this138._getOrCreateLocalProvider(provider.providerType, provider.token, true);
            }
          });
        }

        _createClass(ProviderElementContext, [{
          key: "afterElement",
          value: function afterElement() {
            var _this139 = this;

            // collect lazy providers
            Array.from(this._allProviders.values()).forEach(function (provider) {
              _this139._getOrCreateLocalProvider(provider.providerType, provider.token, false);
            });
          }
        }, {
          key: "transformProviders",
          get: function get() {
            // Note: Maps keep their insertion order.
            var lazyProviders = [];
            var eagerProviders = [];

            this._transformedProviders.forEach(function (provider) {
              if (provider.eager) {
                eagerProviders.push(provider);
              } else {
                lazyProviders.push(provider);
              }
            });

            return lazyProviders.concat(eagerProviders);
          }
        }, {
          key: "transformedDirectiveAsts",
          get: function get() {
            var sortedProviderTypes = this.transformProviders.map(function (provider) {
              return provider.token.identifier;
            });

            var sortedDirectives = this._directiveAsts.slice();

            sortedDirectives.sort(function (dir1, dir2) {
              return sortedProviderTypes.indexOf(dir1.directive.type) - sortedProviderTypes.indexOf(dir2.directive.type);
            });
            return sortedDirectives;
          }
        }, {
          key: "queryMatches",
          get: function get() {
            var allMatches = [];

            this._queriedTokens.forEach(function (matches) {
              allMatches.push.apply(allMatches, _toConsumableArray(matches));
            });

            return allMatches;
          }
        }, {
          key: "_addQueryReadsTo",
          value: function _addQueryReadsTo(token, defaultValue, queryReadTokens) {
            this._getQueriesFor(token).forEach(function (query) {
              var queryValue = query.meta.read || defaultValue;
              var tokenRef = tokenReference(queryValue);
              var queryMatches = queryReadTokens.get(tokenRef);

              if (!queryMatches) {
                queryMatches = [];
                queryReadTokens.set(tokenRef, queryMatches);
              }

              queryMatches.push({
                queryId: query.queryId,
                value: queryValue
              });
            });
          }
        }, {
          key: "_getQueriesFor",
          value: function _getQueriesFor(token) {
            var result = [];
            var currentEl = this;
            var distance = 0;
            var queries;

            while (currentEl !== null) {
              queries = currentEl._contentQueries.get(tokenReference(token));

              if (queries) {
                result.push.apply(result, _toConsumableArray(queries.filter(function (query) {
                  return query.meta.descendants || distance <= 1;
                })));
              }

              if (currentEl._directiveAsts.length > 0) {
                distance++;
              }

              currentEl = currentEl._parent;
            }

            queries = this.viewContext.viewQueries.get(tokenReference(token));

            if (queries) {
              result.push.apply(result, _toConsumableArray(queries));
            }

            return result;
          }
        }, {
          key: "_getOrCreateLocalProvider",
          value: function _getOrCreateLocalProvider(requestingProviderType, token, eager) {
            var _this140 = this;

            var resolvedProvider = this._allProviders.get(tokenReference(token));

            if (!resolvedProvider || (requestingProviderType === ProviderAstType.Directive || requestingProviderType === ProviderAstType.PublicService) && resolvedProvider.providerType === ProviderAstType.PrivateService || (requestingProviderType === ProviderAstType.PrivateService || requestingProviderType === ProviderAstType.PublicService) && resolvedProvider.providerType === ProviderAstType.Builtin) {
              return null;
            }

            var transformedProviderAst = this._transformedProviders.get(tokenReference(token));

            if (transformedProviderAst) {
              return transformedProviderAst;
            }

            if (this._seenProviders.get(tokenReference(token)) != null) {
              this.viewContext.errors.push(new ProviderError("Cannot instantiate cyclic dependency! ".concat(tokenName(token)), this._sourceSpan));
              return null;
            }

            this._seenProviders.set(tokenReference(token), true);

            var transformedProviders = resolvedProvider.providers.map(function (provider) {
              var transformedUseValue = provider.useValue;
              var transformedUseExisting = provider.useExisting;
              var transformedDeps = undefined;

              if (provider.useExisting != null) {
                var existingDiDep = _this140._getDependency(resolvedProvider.providerType, {
                  token: provider.useExisting
                }, eager);

                if (existingDiDep.token != null) {
                  transformedUseExisting = existingDiDep.token;
                } else {
                  transformedUseExisting = null;
                  transformedUseValue = existingDiDep.value;
                }
              } else if (provider.useFactory) {
                var deps = provider.deps || provider.useFactory.diDeps;
                transformedDeps = deps.map(function (dep) {
                  return _this140._getDependency(resolvedProvider.providerType, dep, eager);
                });
              } else if (provider.useClass) {
                var _deps = provider.deps || provider.useClass.diDeps;

                transformedDeps = _deps.map(function (dep) {
                  return _this140._getDependency(resolvedProvider.providerType, dep, eager);
                });
              }

              return _transformProvider(provider, {
                useExisting: transformedUseExisting,
                useValue: transformedUseValue,
                deps: transformedDeps
              });
            });
            transformedProviderAst = _transformProviderAst(resolvedProvider, {
              eager: eager,
              providers: transformedProviders
            });

            this._transformedProviders.set(tokenReference(token), transformedProviderAst);

            return transformedProviderAst;
          }
        }, {
          key: "_getLocalDependency",
          value: function _getLocalDependency(requestingProviderType, dep) {
            var eager = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

            if (dep.isAttribute) {
              var attrValue = this._attrs[dep.token.value];
              return {
                isValue: true,
                value: attrValue == null ? null : attrValue
              };
            }

            if (dep.token != null) {
              // access builtints
              if (requestingProviderType === ProviderAstType.Directive || requestingProviderType === ProviderAstType.Component) {
                if (tokenReference(dep.token) === this.viewContext.reflector.resolveExternalReference(Identifiers.Renderer) || tokenReference(dep.token) === this.viewContext.reflector.resolveExternalReference(Identifiers.ElementRef) || tokenReference(dep.token) === this.viewContext.reflector.resolveExternalReference(Identifiers.ChangeDetectorRef) || tokenReference(dep.token) === this.viewContext.reflector.resolveExternalReference(Identifiers.TemplateRef)) {
                  return dep;
                }

                if (tokenReference(dep.token) === this.viewContext.reflector.resolveExternalReference(Identifiers.ViewContainerRef)) {
                  this.transformedHasViewContainer = true;
                }
              } // access the injector


              if (tokenReference(dep.token) === this.viewContext.reflector.resolveExternalReference(Identifiers.Injector)) {
                return dep;
              } // access providers


              if (this._getOrCreateLocalProvider(requestingProviderType, dep.token, eager) != null) {
                return dep;
              }
            }

            return null;
          }
        }, {
          key: "_getDependency",
          value: function _getDependency(requestingProviderType, dep) {
            var eager = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
            var currElement = this;
            var currEager = eager;
            var result = null;

            if (!dep.isSkipSelf) {
              result = this._getLocalDependency(requestingProviderType, dep, eager);
            }

            if (dep.isSelf) {
              if (!result && dep.isOptional) {
                result = {
                  isValue: true,
                  value: null
                };
              }
            } else {
              // check parent elements
              while (!result && currElement._parent) {
                var prevElement = currElement;
                currElement = currElement._parent;

                if (prevElement._isViewRoot) {
                  currEager = false;
                }

                result = currElement._getLocalDependency(ProviderAstType.PublicService, dep, currEager);
              } // check @Host restriction


              if (!result) {
                if (!dep.isHost || this.viewContext.component.isHost || this.viewContext.component.type.reference === tokenReference(dep.token) || this.viewContext.viewProviders.get(tokenReference(dep.token)) != null) {
                  result = dep;
                } else {
                  result = dep.isOptional ? {
                    isValue: true,
                    value: null
                  } : null;
                }
              }
            }

            if (!result) {
              this.viewContext.errors.push(new ProviderError("No provider for ".concat(tokenName(dep.token)), this._sourceSpan));
            }

            return result;
          }
        }]);

        return ProviderElementContext;
      }();

      var NgModuleProviderAnalyzer = /*#__PURE__*/function () {
        function NgModuleProviderAnalyzer(reflector, ngModule, extraProviders, sourceSpan) {
          var _this141 = this;

          _classCallCheck(this, NgModuleProviderAnalyzer);

          this.reflector = reflector;
          this._transformedProviders = new Map();
          this._seenProviders = new Map();
          this._errors = [];
          this._allProviders = new Map();
          ngModule.transitiveModule.modules.forEach(function (ngModuleType) {
            var ngModuleProvider = {
              token: {
                identifier: ngModuleType
              },
              useClass: ngModuleType
            };

            _resolveProviders([ngModuleProvider], ProviderAstType.PublicService, true, sourceSpan, _this141._errors, _this141._allProviders,
            /* isModule */
            true);
          });

          _resolveProviders(ngModule.transitiveModule.providers.map(function (entry) {
            return entry.provider;
          }).concat(extraProviders), ProviderAstType.PublicService, false, sourceSpan, this._errors, this._allProviders,
          /* isModule */
          false);
        }

        _createClass(NgModuleProviderAnalyzer, [{
          key: "parse",
          value: function parse() {
            var _this142 = this;

            Array.from(this._allProviders.values()).forEach(function (provider) {
              _this142._getOrCreateLocalProvider(provider.token, provider.eager);
            });

            if (this._errors.length > 0) {
              var errorString = this._errors.join('\n');

              throw new Error("Provider parse errors:\n".concat(errorString));
            } // Note: Maps keep their insertion order.


            var lazyProviders = [];
            var eagerProviders = [];

            this._transformedProviders.forEach(function (provider) {
              if (provider.eager) {
                eagerProviders.push(provider);
              } else {
                lazyProviders.push(provider);
              }
            });

            return lazyProviders.concat(eagerProviders);
          }
        }, {
          key: "_getOrCreateLocalProvider",
          value: function _getOrCreateLocalProvider(token, eager) {
            var _this143 = this;

            var resolvedProvider = this._allProviders.get(tokenReference(token));

            if (!resolvedProvider) {
              return null;
            }

            var transformedProviderAst = this._transformedProviders.get(tokenReference(token));

            if (transformedProviderAst) {
              return transformedProviderAst;
            }

            if (this._seenProviders.get(tokenReference(token)) != null) {
              this._errors.push(new ProviderError("Cannot instantiate cyclic dependency! ".concat(tokenName(token)), resolvedProvider.sourceSpan));

              return null;
            }

            this._seenProviders.set(tokenReference(token), true);

            var transformedProviders = resolvedProvider.providers.map(function (provider) {
              var transformedUseValue = provider.useValue;
              var transformedUseExisting = provider.useExisting;
              var transformedDeps = undefined;

              if (provider.useExisting != null) {
                var existingDiDep = _this143._getDependency({
                  token: provider.useExisting
                }, eager, resolvedProvider.sourceSpan);

                if (existingDiDep.token != null) {
                  transformedUseExisting = existingDiDep.token;
                } else {
                  transformedUseExisting = null;
                  transformedUseValue = existingDiDep.value;
                }
              } else if (provider.useFactory) {
                var deps = provider.deps || provider.useFactory.diDeps;
                transformedDeps = deps.map(function (dep) {
                  return _this143._getDependency(dep, eager, resolvedProvider.sourceSpan);
                });
              } else if (provider.useClass) {
                var _deps2 = provider.deps || provider.useClass.diDeps;

                transformedDeps = _deps2.map(function (dep) {
                  return _this143._getDependency(dep, eager, resolvedProvider.sourceSpan);
                });
              }

              return _transformProvider(provider, {
                useExisting: transformedUseExisting,
                useValue: transformedUseValue,
                deps: transformedDeps
              });
            });
            transformedProviderAst = _transformProviderAst(resolvedProvider, {
              eager: eager,
              providers: transformedProviders
            });

            this._transformedProviders.set(tokenReference(token), transformedProviderAst);

            return transformedProviderAst;
          }
        }, {
          key: "_getDependency",
          value: function _getDependency(dep) {
            var eager = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
            var requestorSourceSpan = arguments.length > 2 ? arguments[2] : undefined;
            var foundLocal = false;

            if (!dep.isSkipSelf && dep.token != null) {
              // access the injector
              if (tokenReference(dep.token) === this.reflector.resolveExternalReference(Identifiers.Injector) || tokenReference(dep.token) === this.reflector.resolveExternalReference(Identifiers.ComponentFactoryResolver)) {
                foundLocal = true; // access providers
              } else if (this._getOrCreateLocalProvider(dep.token, eager) != null) {
                foundLocal = true;
              }
            }

            return dep;
          }
        }]);

        return NgModuleProviderAnalyzer;
      }();

      function _transformProvider(provider, _ref11) {
        var useExisting = _ref11.useExisting,
            useValue = _ref11.useValue,
            deps = _ref11.deps;
        return {
          token: provider.token,
          useClass: provider.useClass,
          useExisting: useExisting,
          useFactory: provider.useFactory,
          useValue: useValue,
          deps: deps,
          multi: provider.multi
        };
      }

      function _transformProviderAst(provider, _ref12) {
        var eager = _ref12.eager,
            providers = _ref12.providers;
        return new ProviderAst(provider.token, provider.multiProvider, provider.eager || eager, providers, provider.providerType, provider.lifecycleHooks, provider.sourceSpan, provider.isModule);
      }

      function _resolveProvidersFromDirectives(directives, sourceSpan, targetErrors) {
        var providersByToken = new Map();
        directives.forEach(function (directive) {
          var dirProvider = {
            token: {
              identifier: directive.type
            },
            useClass: directive.type
          };

          _resolveProviders([dirProvider], directive.isComponent ? ProviderAstType.Component : ProviderAstType.Directive, true, sourceSpan, targetErrors, providersByToken,
          /* isModule */
          false);
        }); // Note: directives need to be able to overwrite providers of a component!

        var directivesWithComponentFirst = directives.filter(function (dir) {
          return dir.isComponent;
        }).concat(directives.filter(function (dir) {
          return !dir.isComponent;
        }));
        directivesWithComponentFirst.forEach(function (directive) {
          _resolveProviders(directive.providers, ProviderAstType.PublicService, false, sourceSpan, targetErrors, providersByToken,
          /* isModule */
          false);

          _resolveProviders(directive.viewProviders, ProviderAstType.PrivateService, false, sourceSpan, targetErrors, providersByToken,
          /* isModule */
          false);
        });
        return providersByToken;
      }

      function _resolveProviders(providers, providerType, eager, sourceSpan, targetErrors, targetProvidersByToken, isModule) {
        providers.forEach(function (provider) {
          var resolvedProvider = targetProvidersByToken.get(tokenReference(provider.token));

          if (resolvedProvider != null && !!resolvedProvider.multiProvider !== !!provider.multi) {
            targetErrors.push(new ProviderError("Mixing multi and non multi provider is not possible for token ".concat(tokenName(resolvedProvider.token)), sourceSpan));
          }

          if (!resolvedProvider) {
            var lifecycleHooks = provider.token.identifier && provider.token.identifier.lifecycleHooks ? provider.token.identifier.lifecycleHooks : [];
            var isUseValue = !(provider.useClass || provider.useExisting || provider.useFactory);
            resolvedProvider = new ProviderAst(provider.token, !!provider.multi, eager || isUseValue, [provider], providerType, lifecycleHooks, sourceSpan, isModule);
            targetProvidersByToken.set(tokenReference(provider.token), resolvedProvider);
          } else {
            if (!provider.multi) {
              resolvedProvider.providers.length = 0;
            }

            resolvedProvider.providers.push(provider);
          }
        });
      }

      function _getViewQueries(component) {
        // Note: queries start with id 1 so we can use the number in a Bloom filter!
        var viewQueryId = 1;
        var viewQueries = new Map();

        if (component.viewQueries) {
          component.viewQueries.forEach(function (query) {
            return _addQueryToTokenMap(viewQueries, {
              meta: query,
              queryId: viewQueryId++
            });
          });
        }

        return viewQueries;
      }

      function _getContentQueries(contentQueryStartId, directives) {
        var contentQueryId = contentQueryStartId;
        var contentQueries = new Map();
        directives.forEach(function (directive, directiveIndex) {
          if (directive.queries) {
            directive.queries.forEach(function (query) {
              return _addQueryToTokenMap(contentQueries, {
                meta: query,
                queryId: contentQueryId++
              });
            });
          }
        });
        return contentQueries;
      }

      function _addQueryToTokenMap(map, query) {
        query.meta.selectors.forEach(function (token) {
          var entry = map.get(tokenReference(token));

          if (!entry) {
            entry = [];
            map.set(tokenReference(token), entry);
          }

          entry.push(query);
        });
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      var StyleWithImports = function StyleWithImports(style, styleUrls) {
        _classCallCheck(this, StyleWithImports);

        this.style = style;
        this.styleUrls = styleUrls;
      };

      function isStyleUrlResolvable(url) {
        if (url == null || url.length === 0 || url[0] == '/') return false;
        var schemeMatch = url.match(URL_WITH_SCHEMA_REGEXP);
        return schemeMatch === null || schemeMatch[1] == 'package' || schemeMatch[1] == 'asset';
      }
      /**
       * Rewrites stylesheets by resolving and removing the @import urls that
       * are either relative or don't have a `package:` scheme
       */


      function extractStyleUrls(resolver, baseUrl, cssText) {
        var foundUrls = [];
        var modifiedCssText = cssText.replace(CSS_STRIPPABLE_COMMENT_REGEXP, '').replace(CSS_IMPORT_REGEXP, function () {
          var url = (arguments.length <= 1 ? undefined : arguments[1]) || (arguments.length <= 2 ? undefined : arguments[2]);

          if (!isStyleUrlResolvable(url)) {
            // Do not attempt to resolve non-package absolute URLs with URI
            // scheme
            return arguments.length <= 0 ? undefined : arguments[0];
          }

          foundUrls.push(resolver.resolve(baseUrl, url));
          return '';
        });
        return new StyleWithImports(modifiedCssText, foundUrls);
      }

      var CSS_IMPORT_REGEXP = /@import\s+(?:url\()?\s*(?:(?:['"]([^'"]*))|([^;\)\s]*))[^;]*;?/g;
      var CSS_STRIPPABLE_COMMENT_REGEXP = /\/\*(?!#\s*(?:sourceURL|sourceMappingURL)=)[\s\S]+?\*\//g;
      var URL_WITH_SCHEMA_REGEXP = /^([^:/?#]+):/;
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      var PROPERTY_PARTS_SEPARATOR = '.';
      var ATTRIBUTE_PREFIX = 'attr';
      var CLASS_PREFIX = 'class';
      var STYLE_PREFIX = 'style';
      var TEMPLATE_ATTR_PREFIX = '*';
      var ANIMATE_PROP_PREFIX = 'animate-';
      /**
       * Parses bindings in templates and in the directive host area.
       */

      var BindingParser = /*#__PURE__*/function () {
        function BindingParser(_exprParser, _interpolationConfig, _schemaRegistry, pipes, errors) {
          _classCallCheck(this, BindingParser);

          this._exprParser = _exprParser;
          this._interpolationConfig = _interpolationConfig;
          this._schemaRegistry = _schemaRegistry;
          this.errors = errors;
          this.pipesByName = null;
          this._usedPipes = new Map(); // When the `pipes` parameter is `null`, do not check for used pipes
          // This is used in IVY when we might not know the available pipes at compile time

          if (pipes) {
            var pipesByName = new Map();
            pipes.forEach(function (pipe) {
              return pipesByName.set(pipe.name, pipe);
            });
            this.pipesByName = pipesByName;
          }
        }

        _createClass(BindingParser, [{
          key: "interpolationConfig",
          get: function get() {
            return this._interpolationConfig;
          }
        }, {
          key: "getUsedPipes",
          value: function getUsedPipes() {
            return Array.from(this._usedPipes.values());
          }
        }, {
          key: "createBoundHostProperties",
          value: function createBoundHostProperties(dirMeta, sourceSpan) {
            var _this144 = this;

            if (dirMeta.hostProperties) {
              var boundProps = [];
              Object.keys(dirMeta.hostProperties).forEach(function (propName) {
                var expression = dirMeta.hostProperties[propName];

                if (typeof expression === 'string') {
                  _this144.parsePropertyBinding(propName, expression, true, sourceSpan, sourceSpan.start.offset, undefined, [], // Use the `sourceSpan` for  `keySpan`. This isn't really accurate, but neither is the
                  // sourceSpan, as it represents the sourceSpan of the host itself rather than the
                  // source of the host binding (which doesn't exist in the template). Regardless,
                  // neither of these values are used in Ivy but are only here to satisfy the function
                  // signature. This should likely be refactored in the future so that `sourceSpan`
                  // isn't being used inaccurately.
                  boundProps, sourceSpan);
                } else {
                  _this144._reportError("Value of the host property binding \"".concat(propName, "\" needs to be a string representing an expression but got \"").concat(expression, "\" (").concat(typeof expression, ")"), sourceSpan);
                }
              });
              return boundProps;
            }

            return null;
          }
        }, {
          key: "createDirectiveHostPropertyAsts",
          value: function createDirectiveHostPropertyAsts(dirMeta, elementSelector, sourceSpan) {
            var _this145 = this;

            var boundProps = this.createBoundHostProperties(dirMeta, sourceSpan);
            return boundProps && boundProps.map(function (prop) {
              return _this145.createBoundElementProperty(elementSelector, prop);
            });
          }
        }, {
          key: "createDirectiveHostEventAsts",
          value: function createDirectiveHostEventAsts(dirMeta, sourceSpan) {
            var _this146 = this;

            if (dirMeta.hostListeners) {
              var targetEvents = [];
              Object.keys(dirMeta.hostListeners).forEach(function (propName) {
                var expression = dirMeta.hostListeners[propName];

                if (typeof expression === 'string') {
                  // Use the `sourceSpan` for  `keySpan` and `handlerSpan`. This isn't really accurate, but
                  // neither is the `sourceSpan`, as it represents the `sourceSpan` of the host itself
                  // rather than the source of the host binding (which doesn't exist in the template).
                  // Regardless, neither of these values are used in Ivy but are only here to satisfy the
                  // function signature. This should likely be refactored in the future so that `sourceSpan`
                  // isn't being used inaccurately.
                  _this146.parseEvent(propName, expression, sourceSpan, sourceSpan, [], targetEvents, sourceSpan);
                } else {
                  _this146._reportError("Value of the host listener \"".concat(propName, "\" needs to be a string representing an expression but got \"").concat(expression, "\" (").concat(typeof expression, ")"), sourceSpan);
                }
              });
              return targetEvents;
            }

            return null;
          }
        }, {
          key: "parseInterpolation",
          value: function parseInterpolation(value, sourceSpan) {
            var sourceInfo = sourceSpan.start.toString();
            var absoluteOffset = sourceSpan.fullStart.offset;

            try {
              var ast = this._exprParser.parseInterpolation(value, sourceInfo, absoluteOffset, this._interpolationConfig);

              if (ast) this._reportExpressionParserErrors(ast.errors, sourceSpan);

              this._checkPipes(ast, sourceSpan);

              return ast;
            } catch (e) {
              this._reportError("".concat(e), sourceSpan);

              return this._exprParser.wrapLiteralPrimitive('ERROR', sourceInfo, absoluteOffset);
            }
          }
          /**
           * Similar to `parseInterpolation`, but treats the provided string as a single expression
           * element that would normally appear within the interpolation prefix and suffix (`{{` and `}}`).
           * This is used for parsing the switch expression in ICUs.
           */

        }, {
          key: "parseInterpolationExpression",
          value: function parseInterpolationExpression(expression, sourceSpan) {
            var sourceInfo = sourceSpan.start.toString();
            var absoluteOffset = sourceSpan.start.offset;

            try {
              var ast = this._exprParser.parseInterpolationExpression(expression, sourceInfo, absoluteOffset);

              if (ast) this._reportExpressionParserErrors(ast.errors, sourceSpan);

              this._checkPipes(ast, sourceSpan);

              return ast;
            } catch (e) {
              this._reportError("".concat(e), sourceSpan);

              return this._exprParser.wrapLiteralPrimitive('ERROR', sourceInfo, absoluteOffset);
            }
          }
          /**
           * Parses the bindings in a microsyntax expression, and converts them to
           * `ParsedProperty` or `ParsedVariable`.
           *
           * @param tplKey template binding name
           * @param tplValue template binding value
           * @param sourceSpan span of template binding relative to entire the template
           * @param absoluteValueOffset start of the tplValue relative to the entire template
           * @param targetMatchableAttrs potential attributes to match in the template
           * @param targetProps target property bindings in the template
           * @param targetVars target variables in the template
           */

        }, {
          key: "parseInlineTemplateBinding",
          value: function parseInlineTemplateBinding(tplKey, tplValue, sourceSpan, absoluteValueOffset, targetMatchableAttrs, targetProps, targetVars, isIvyAst) {
            var absoluteKeyOffset = sourceSpan.start.offset + TEMPLATE_ATTR_PREFIX.length;

            var bindings = this._parseTemplateBindings(tplKey, tplValue, sourceSpan, absoluteKeyOffset, absoluteValueOffset);

            var _iterator10 = _createForOfIteratorHelper(bindings),
                _step10;

            try {
              for (_iterator10.s(); !(_step10 = _iterator10.n()).done;) {
                var binding = _step10.value;
                // sourceSpan is for the entire HTML attribute. bindingSpan is for a particular
                // binding within the microsyntax expression so it's more narrow than sourceSpan.
                var bindingSpan = moveParseSourceSpan(sourceSpan, binding.sourceSpan);
                var key = binding.key.source;
                var keySpan = moveParseSourceSpan(sourceSpan, binding.key.span);

                if (binding instanceof VariableBinding) {
                  var value = binding.value ? binding.value.source : '$implicit';
                  var valueSpan = binding.value ? moveParseSourceSpan(sourceSpan, binding.value.span) : undefined;
                  targetVars.push(new ParsedVariable(key, value, bindingSpan, keySpan, valueSpan));
                } else if (binding.value) {
                  var srcSpan = isIvyAst ? bindingSpan : sourceSpan;

                  var _valueSpan = moveParseSourceSpan(sourceSpan, binding.value.ast.sourceSpan);

                  this._parsePropertyAst(key, binding.value, srcSpan, keySpan, _valueSpan, targetMatchableAttrs, targetProps);
                } else {
                  targetMatchableAttrs.push([key, ''
                  /* value */
                  ]); // Since this is a literal attribute with no RHS, source span should be
                  // just the key span.

                  this.parseLiteralAttr(key, null
                  /* value */
                  , keySpan, absoluteValueOffset, undefined
                  /* valueSpan */
                  , targetMatchableAttrs, targetProps, keySpan);
                }
              }
            } catch (err) {
              _iterator10.e(err);
            } finally {
              _iterator10.f();
            }
          }
          /**
           * Parses the bindings in a microsyntax expression, e.g.
           * ```
           *    <tag *tplKey="let value1 = prop; let value2 = localVar">
           * ```
           *
           * @param tplKey template binding name
           * @param tplValue template binding value
           * @param sourceSpan span of template binding relative to entire the template
           * @param absoluteKeyOffset start of the `tplKey`
           * @param absoluteValueOffset start of the `tplValue`
           */

        }, {
          key: "_parseTemplateBindings",
          value: function _parseTemplateBindings(tplKey, tplValue, sourceSpan, absoluteKeyOffset, absoluteValueOffset) {
            var _this147 = this;

            var sourceInfo = sourceSpan.start.toString();

            try {
              var bindingsResult = this._exprParser.parseTemplateBindings(tplKey, tplValue, sourceInfo, absoluteKeyOffset, absoluteValueOffset);

              this._reportExpressionParserErrors(bindingsResult.errors, sourceSpan);

              bindingsResult.templateBindings.forEach(function (binding) {
                if (binding.value instanceof ASTWithSource) {
                  _this147._checkPipes(binding.value, sourceSpan);
                }
              });
              bindingsResult.warnings.forEach(function (warning) {
                _this147._reportError(warning, sourceSpan, ParseErrorLevel.WARNING);
              });
              return bindingsResult.templateBindings;
            } catch (e) {
              this._reportError("".concat(e), sourceSpan);

              return [];
            }
          }
        }, {
          key: "parseLiteralAttr",
          value: function parseLiteralAttr(name, value, sourceSpan, absoluteOffset, valueSpan, targetMatchableAttrs, // TODO(atscott): keySpan is only optional here so VE template parser implementation does not
          // have to change This should be required when VE is removed.
          targetProps, keySpan) {
            if (isAnimationLabel(name)) {
              name = name.substring(1);

              if (keySpan !== undefined) {
                keySpan = moveParseSourceSpan(keySpan, new AbsoluteSourceSpan(keySpan.start.offset + 1, keySpan.end.offset));
              }

              if (value) {
                this._reportError("Assigning animation triggers via @prop=\"exp\" attributes with an expression is invalid." + " Use property bindings (e.g. [@prop]=\"exp\") or use an attribute without a value (e.g. @prop) instead.", sourceSpan, ParseErrorLevel.ERROR);
              }

              this._parseAnimation(name, value, sourceSpan, absoluteOffset, keySpan, valueSpan, targetMatchableAttrs, targetProps);
            } else {
              targetProps.push(new ParsedProperty(name, this._exprParser.wrapLiteralPrimitive(value, '', absoluteOffset), ParsedPropertyType.LITERAL_ATTR, sourceSpan, keySpan, valueSpan));
            }
          }
        }, {
          key: "parsePropertyBinding",
          value: function parsePropertyBinding(name, expression, isHost, sourceSpan, absoluteOffset, valueSpan, // TODO(atscott): keySpan is only optional here so VE template parser implementation does not
          // have to change This should be required when VE is removed.
          targetMatchableAttrs, targetProps, keySpan) {
            if (name.length === 0) {
              this._reportError("Property name is missing in binding", sourceSpan);
            }

            var isAnimationProp = false;

            if (name.startsWith(ANIMATE_PROP_PREFIX)) {
              isAnimationProp = true;
              name = name.substring(ANIMATE_PROP_PREFIX.length);

              if (keySpan !== undefined) {
                keySpan = moveParseSourceSpan(keySpan, new AbsoluteSourceSpan(keySpan.start.offset + ANIMATE_PROP_PREFIX.length, keySpan.end.offset));
              }
            } else if (isAnimationLabel(name)) {
              isAnimationProp = true;
              name = name.substring(1);

              if (keySpan !== undefined) {
                keySpan = moveParseSourceSpan(keySpan, new AbsoluteSourceSpan(keySpan.start.offset + 1, keySpan.end.offset));
              }
            }

            if (isAnimationProp) {
              this._parseAnimation(name, expression, sourceSpan, absoluteOffset, keySpan, valueSpan, targetMatchableAttrs, targetProps);
            } else {
              this._parsePropertyAst(name, this._parseBinding(expression, isHost, valueSpan || sourceSpan, absoluteOffset), sourceSpan, keySpan, valueSpan, targetMatchableAttrs, targetProps);
            }
          }
        }, {
          key: "parsePropertyInterpolation",
          value: function parsePropertyInterpolation(name, value, sourceSpan, valueSpan, targetMatchableAttrs, // TODO(atscott): keySpan is only optional here so VE template parser implementation does not
          // have to change This should be required when VE is removed.
          targetProps, keySpan) {
            var expr = this.parseInterpolation(value, valueSpan || sourceSpan);

            if (expr) {
              this._parsePropertyAst(name, expr, sourceSpan, keySpan, valueSpan, targetMatchableAttrs, targetProps);

              return true;
            }

            return false;
          }
        }, {
          key: "_parsePropertyAst",
          value: function _parsePropertyAst(name, ast, sourceSpan, keySpan, valueSpan, targetMatchableAttrs, targetProps) {
            targetMatchableAttrs.push([name, ast.source]);
            targetProps.push(new ParsedProperty(name, ast, ParsedPropertyType.DEFAULT, sourceSpan, keySpan, valueSpan));
          }
        }, {
          key: "_parseAnimation",
          value: function _parseAnimation(name, expression, sourceSpan, absoluteOffset, keySpan, valueSpan, targetMatchableAttrs, targetProps) {
            if (name.length === 0) {
              this._reportError('Animation trigger is missing', sourceSpan);
            } // This will occur when a @trigger is not paired with an expression.
            // For animations it is valid to not have an expression since */void
            // states will be applied by angular when the element is attached/detached


            var ast = this._parseBinding(expression || 'undefined', false, valueSpan || sourceSpan, absoluteOffset);

            targetMatchableAttrs.push([name, ast.source]);
            targetProps.push(new ParsedProperty(name, ast, ParsedPropertyType.ANIMATION, sourceSpan, keySpan, valueSpan));
          }
        }, {
          key: "_parseBinding",
          value: function _parseBinding(value, isHostBinding, sourceSpan, absoluteOffset) {
            var sourceInfo = (sourceSpan && sourceSpan.start || '(unknown)').toString();

            try {
              var ast = isHostBinding ? this._exprParser.parseSimpleBinding(value, sourceInfo, absoluteOffset, this._interpolationConfig) : this._exprParser.parseBinding(value, sourceInfo, absoluteOffset, this._interpolationConfig);
              if (ast) this._reportExpressionParserErrors(ast.errors, sourceSpan);

              this._checkPipes(ast, sourceSpan);

              return ast;
            } catch (e) {
              this._reportError("".concat(e), sourceSpan);

              return this._exprParser.wrapLiteralPrimitive('ERROR', sourceInfo, absoluteOffset);
            }
          }
        }, {
          key: "createBoundElementProperty",
          value: function createBoundElementProperty(elementSelector, boundProp) {
            var skipValidation = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
            var mapPropertyName = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;

            if (boundProp.isAnimation) {
              return new BoundElementProperty(boundProp.name, 4
              /* Animation */
              , SecurityContext.NONE, boundProp.expression, null, boundProp.sourceSpan, boundProp.keySpan, boundProp.valueSpan);
            }

            var unit = null;
            var bindingType = undefined;
            var boundPropertyName = null;
            var parts = boundProp.name.split(PROPERTY_PARTS_SEPARATOR);
            var securityContexts = undefined; // Check for special cases (prefix style, attr, class)

            if (parts.length > 1) {
              if (parts[0] == ATTRIBUTE_PREFIX) {
                boundPropertyName = parts.slice(1).join(PROPERTY_PARTS_SEPARATOR);

                if (!skipValidation) {
                  this._validatePropertyOrAttributeName(boundPropertyName, boundProp.sourceSpan, true);
                }

                securityContexts = _calcPossibleSecurityContexts(this._schemaRegistry, elementSelector, boundPropertyName, true);
                var nsSeparatorIdx = boundPropertyName.indexOf(':');

                if (nsSeparatorIdx > -1) {
                  var ns = boundPropertyName.substring(0, nsSeparatorIdx);
                  var name = boundPropertyName.substring(nsSeparatorIdx + 1);
                  boundPropertyName = mergeNsAndName(ns, name);
                }

                bindingType = 1
                /* Attribute */
                ;
              } else if (parts[0] == CLASS_PREFIX) {
                boundPropertyName = parts[1];
                bindingType = 2
                /* Class */
                ;
                securityContexts = [SecurityContext.NONE];
              } else if (parts[0] == STYLE_PREFIX) {
                unit = parts.length > 2 ? parts[2] : null;
                boundPropertyName = parts[1];
                bindingType = 3
                /* Style */
                ;
                securityContexts = [SecurityContext.STYLE];
              }
            } // If not a special case, use the full property name


            if (boundPropertyName === null) {
              var mappedPropName = this._schemaRegistry.getMappedPropName(boundProp.name);

              boundPropertyName = mapPropertyName ? mappedPropName : boundProp.name;
              securityContexts = _calcPossibleSecurityContexts(this._schemaRegistry, elementSelector, mappedPropName, false);
              bindingType = 0
              /* Property */
              ;

              if (!skipValidation) {
                this._validatePropertyOrAttributeName(mappedPropName, boundProp.sourceSpan, false);
              }
            }

            return new BoundElementProperty(boundPropertyName, bindingType, securityContexts[0], boundProp.expression, unit, boundProp.sourceSpan, boundProp.keySpan, boundProp.valueSpan);
          } // TODO: keySpan should be required but was made optional to avoid changing VE parser.

        }, {
          key: "parseEvent",
          value: function parseEvent(name, expression, sourceSpan, handlerSpan, targetMatchableAttrs, targetEvents, keySpan) {
            if (name.length === 0) {
              this._reportError("Event name is missing in binding", sourceSpan);
            }

            if (isAnimationLabel(name)) {
              name = name.substr(1);

              if (keySpan !== undefined) {
                keySpan = moveParseSourceSpan(keySpan, new AbsoluteSourceSpan(keySpan.start.offset + 1, keySpan.end.offset));
              }

              this._parseAnimationEvent(name, expression, sourceSpan, handlerSpan, targetEvents, keySpan);
            } else {
              this._parseRegularEvent(name, expression, sourceSpan, handlerSpan, targetMatchableAttrs, targetEvents, keySpan);
            }
          }
        }, {
          key: "calcPossibleSecurityContexts",
          value: function calcPossibleSecurityContexts(selector, propName, isAttribute) {
            var prop = this._schemaRegistry.getMappedPropName(propName);

            return _calcPossibleSecurityContexts(this._schemaRegistry, selector, prop, isAttribute);
          }
        }, {
          key: "_parseAnimationEvent",
          value: function _parseAnimationEvent(name, expression, sourceSpan, handlerSpan, targetEvents, keySpan) {
            var matches = splitAtPeriod(name, [name, '']);
            var eventName = matches[0];
            var phase = matches[1].toLowerCase();

            var ast = this._parseAction(expression, handlerSpan);

            targetEvents.push(new ParsedEvent(eventName, phase, 1
            /* Animation */
            , ast, sourceSpan, handlerSpan, keySpan));

            if (eventName.length === 0) {
              this._reportError("Animation event name is missing in binding", sourceSpan);
            }

            if (phase) {
              if (phase !== 'start' && phase !== 'done') {
                this._reportError("The provided animation output phase value \"".concat(phase, "\" for \"@").concat(eventName, "\" is not supported (use start or done)"), sourceSpan);
              }
            } else {
              this._reportError("The animation trigger output event (@".concat(eventName, ") is missing its phase value name (start or done are currently supported)"), sourceSpan);
            }
          }
        }, {
          key: "_parseRegularEvent",
          value: function _parseRegularEvent(name, expression, sourceSpan, handlerSpan, targetMatchableAttrs, targetEvents, keySpan) {
            // long format: 'target: eventName'
            var _splitAtColon3 = splitAtColon(name, [null, name]),
                _splitAtColon4 = _slicedToArray(_splitAtColon3, 2),
                target = _splitAtColon4[0],
                eventName = _splitAtColon4[1];

            var ast = this._parseAction(expression, handlerSpan);

            targetMatchableAttrs.push([name, ast.source]);
            targetEvents.push(new ParsedEvent(eventName, target, 0
            /* Regular */
            , ast, sourceSpan, handlerSpan, keySpan)); // Don't detect directives for event names for now,
            // so don't add the event name to the matchableAttrs
          }
        }, {
          key: "_parseAction",
          value: function _parseAction(value, sourceSpan) {
            var sourceInfo = (sourceSpan && sourceSpan.start || '(unknown').toString();
            var absoluteOffset = sourceSpan && sourceSpan.start ? sourceSpan.start.offset : 0;

            try {
              var ast = this._exprParser.parseAction(value, sourceInfo, absoluteOffset, this._interpolationConfig);

              if (ast) {
                this._reportExpressionParserErrors(ast.errors, sourceSpan);
              }

              if (!ast || ast.ast instanceof EmptyExpr) {
                this._reportError("Empty expressions are not allowed", sourceSpan);

                return this._exprParser.wrapLiteralPrimitive('ERROR', sourceInfo, absoluteOffset);
              }

              this._checkPipes(ast, sourceSpan);

              return ast;
            } catch (e) {
              this._reportError("".concat(e), sourceSpan);

              return this._exprParser.wrapLiteralPrimitive('ERROR', sourceInfo, absoluteOffset);
            }
          }
        }, {
          key: "_reportError",
          value: function _reportError(message, sourceSpan) {
            var level = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : ParseErrorLevel.ERROR;
            this.errors.push(new ParseError(sourceSpan, message, level));
          }
        }, {
          key: "_reportExpressionParserErrors",
          value: function _reportExpressionParserErrors(errors, sourceSpan) {
            var _iterator11 = _createForOfIteratorHelper(errors),
                _step11;

            try {
              for (_iterator11.s(); !(_step11 = _iterator11.n()).done;) {
                var _error = _step11.value;

                this._reportError(_error.message, sourceSpan);
              }
            } catch (err) {
              _iterator11.e(err);
            } finally {
              _iterator11.f();
            }
          } // Make sure all the used pipes are known in `this.pipesByName`

        }, {
          key: "_checkPipes",
          value: function _checkPipes(ast, sourceSpan) {
            var _this148 = this;

            if (ast && this.pipesByName) {
              var collector = new PipeCollector();
              ast.visit(collector);
              collector.pipes.forEach(function (ast, pipeName) {
                var pipeMeta = _this148.pipesByName.get(pipeName);

                if (!pipeMeta) {
                  _this148._reportError("The pipe '".concat(pipeName, "' could not be found"), new ParseSourceSpan(sourceSpan.start.moveBy(ast.span.start), sourceSpan.start.moveBy(ast.span.end)));
                } else {
                  _this148._usedPipes.set(pipeName, pipeMeta);
                }
              });
            }
          }
          /**
           * @param propName the name of the property / attribute
           * @param sourceSpan
           * @param isAttr true when binding to an attribute
           */

        }, {
          key: "_validatePropertyOrAttributeName",
          value: function _validatePropertyOrAttributeName(propName, sourceSpan, isAttr) {
            var report = isAttr ? this._schemaRegistry.validateAttribute(propName) : this._schemaRegistry.validateProperty(propName);

            if (report.error) {
              this._reportError(report.msg, sourceSpan, ParseErrorLevel.ERROR);
            }
          }
        }]);

        return BindingParser;
      }();

      var PipeCollector = /*#__PURE__*/function (_RecursiveAstVisitor$) {
        _inherits(PipeCollector, _RecursiveAstVisitor$);

        var _super93 = _createSuper(PipeCollector);

        function PipeCollector() {
          var _this149;

          _classCallCheck(this, PipeCollector);

          _this149 = _super93.apply(this, arguments);
          _this149.pipes = new Map();
          return _this149;
        }

        _createClass(PipeCollector, [{
          key: "visitPipe",
          value: function visitPipe(ast, context) {
            this.pipes.set(ast.name, ast);
            ast.exp.visit(this);
            this.visitAll(ast.args, context);
            return null;
          }
        }]);

        return PipeCollector;
      }(RecursiveAstVisitor$1);

      function isAnimationLabel(name) {
        return name[0] == '@';
      }

      function _calcPossibleSecurityContexts(registry, selector, propName, isAttribute) {
        var ctxs = [];
        CssSelector.parse(selector).forEach(function (selector) {
          var elementNames = selector.element ? [selector.element] : registry.allKnownElementNames();
          var notElementNames = new Set(selector.notSelectors.filter(function (selector) {
            return selector.isElementSelector();
          }).map(function (selector) {
            return selector.element;
          }));
          var possibleElementNames = elementNames.filter(function (elementName) {
            return !notElementNames.has(elementName);
          });
          ctxs.push.apply(ctxs, _toConsumableArray(possibleElementNames.map(function (elementName) {
            return registry.securityContext(elementName, propName, isAttribute);
          })));
        });
        return ctxs.length === 0 ? [SecurityContext.NONE] : Array.from(new Set(ctxs)).sort();
      }
      /**
       * Compute a new ParseSourceSpan based off an original `sourceSpan` by using
       * absolute offsets from the specified `absoluteSpan`.
       *
       * @param sourceSpan original source span
       * @param absoluteSpan absolute source span to move to
       */


      function moveParseSourceSpan(sourceSpan, absoluteSpan) {
        // The difference of two absolute offsets provide the relative offset
        var startDiff = absoluteSpan.start - sourceSpan.start.offset;
        var endDiff = absoluteSpan.end - sourceSpan.end.offset;
        return new ParseSourceSpan(sourceSpan.start.moveBy(startDiff), sourceSpan.end.moveBy(endDiff), sourceSpan.fullStart.moveBy(startDiff), sourceSpan.details);
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      var NG_CONTENT_SELECT_ATTR = 'select';
      var LINK_ELEMENT = 'link';
      var LINK_STYLE_REL_ATTR = 'rel';
      var LINK_STYLE_HREF_ATTR = 'href';
      var LINK_STYLE_REL_VALUE = 'stylesheet';
      var STYLE_ELEMENT = 'style';
      var SCRIPT_ELEMENT = 'script';
      var NG_NON_BINDABLE_ATTR = 'ngNonBindable';
      var NG_PROJECT_AS = 'ngProjectAs';

      function preparseElement(ast) {
        var selectAttr = null;
        var hrefAttr = null;
        var relAttr = null;
        var nonBindable = false;
        var projectAs = '';
        ast.attrs.forEach(function (attr) {
          var lcAttrName = attr.name.toLowerCase();

          if (lcAttrName == NG_CONTENT_SELECT_ATTR) {
            selectAttr = attr.value;
          } else if (lcAttrName == LINK_STYLE_HREF_ATTR) {
            hrefAttr = attr.value;
          } else if (lcAttrName == LINK_STYLE_REL_ATTR) {
            relAttr = attr.value;
          } else if (attr.name == NG_NON_BINDABLE_ATTR) {
            nonBindable = true;
          } else if (attr.name == NG_PROJECT_AS) {
            if (attr.value.length > 0) {
              projectAs = attr.value;
            }
          }
        });
        selectAttr = normalizeNgContentSelect(selectAttr);
        var nodeName = ast.name.toLowerCase();
        var type = PreparsedElementType.OTHER;

        if (isNgContent(nodeName)) {
          type = PreparsedElementType.NG_CONTENT;
        } else if (nodeName == STYLE_ELEMENT) {
          type = PreparsedElementType.STYLE;
        } else if (nodeName == SCRIPT_ELEMENT) {
          type = PreparsedElementType.SCRIPT;
        } else if (nodeName == LINK_ELEMENT && relAttr == LINK_STYLE_REL_VALUE) {
          type = PreparsedElementType.STYLESHEET;
        }

        return new PreparsedElement(type, selectAttr, hrefAttr, nonBindable, projectAs);
      }

      var PreparsedElementType;

      (function (PreparsedElementType) {
        PreparsedElementType[PreparsedElementType["NG_CONTENT"] = 0] = "NG_CONTENT";
        PreparsedElementType[PreparsedElementType["STYLE"] = 1] = "STYLE";
        PreparsedElementType[PreparsedElementType["STYLESHEET"] = 2] = "STYLESHEET";
        PreparsedElementType[PreparsedElementType["SCRIPT"] = 3] = "SCRIPT";
        PreparsedElementType[PreparsedElementType["OTHER"] = 4] = "OTHER";
      })(PreparsedElementType || (PreparsedElementType = {}));

      var PreparsedElement = function PreparsedElement(type, selectAttr, hrefAttr, nonBindable, projectAs) {
        _classCallCheck(this, PreparsedElement);

        this.type = type;
        this.selectAttr = selectAttr;
        this.hrefAttr = hrefAttr;
        this.nonBindable = nonBindable;
        this.projectAs = projectAs;
      };

      function normalizeNgContentSelect(selectAttr) {
        if (selectAttr === null || selectAttr.length === 0) {
          return '*';
        }

        return selectAttr;
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      var BIND_NAME_REGEXP = /^(?:(?:(?:(bind-)|(let-)|(ref-|#)|(on-)|(bindon-)|(@))(.*))|\[\(([^\)]+)\)\]|\[([^\]]+)\]|\(([^\)]+)\))$/; // Group 1 = "bind-"

      var KW_BIND_IDX = 1; // Group 2 = "let-"

      var KW_LET_IDX = 2; // Group 3 = "ref-/#"

      var KW_REF_IDX = 3; // Group 4 = "on-"

      var KW_ON_IDX = 4; // Group 5 = "bindon-"

      var KW_BINDON_IDX = 5; // Group 6 = "@"

      var KW_AT_IDX = 6; // Group 7 = the identifier after "bind-", "let-", "ref-/#", "on-", "bindon-" or "@"

      var IDENT_KW_IDX = 7; // Group 8 = identifier inside [()]

      var IDENT_BANANA_BOX_IDX = 8; // Group 9 = identifier inside []

      var IDENT_PROPERTY_IDX = 9; // Group 10 = identifier inside ()

      var IDENT_EVENT_IDX = 10;
      var TEMPLATE_ATTR_PREFIX$1 = '*';
      var CLASS_ATTR = 'class';

      var _TEXT_CSS_SELECTOR;

      function TEXT_CSS_SELECTOR() {
        if (!_TEXT_CSS_SELECTOR) {
          _TEXT_CSS_SELECTOR = CssSelector.parse('*')[0];
        }

        return _TEXT_CSS_SELECTOR;
      }

      var TemplateParseError = /*#__PURE__*/function (_ParseError5) {
        _inherits(TemplateParseError, _ParseError5);

        var _super94 = _createSuper(TemplateParseError);

        function TemplateParseError(message, span, level) {
          _classCallCheck(this, TemplateParseError);

          return _super94.call(this, span, message, level);
        }

        return TemplateParseError;
      }(ParseError);

      var TemplateParseResult = function TemplateParseResult(templateAst, usedPipes, errors) {
        _classCallCheck(this, TemplateParseResult);

        this.templateAst = templateAst;
        this.usedPipes = usedPipes;
        this.errors = errors;
      };

      var TemplateParser = /*#__PURE__*/function () {
        function TemplateParser(_config, _reflector, _exprParser, _schemaRegistry, _htmlParser, _console, transforms) {
          _classCallCheck(this, TemplateParser);

          this._config = _config;
          this._reflector = _reflector;
          this._exprParser = _exprParser;
          this._schemaRegistry = _schemaRegistry;
          this._htmlParser = _htmlParser;
          this._console = _console;
          this.transforms = transforms;
        }

        _createClass(TemplateParser, [{
          key: "expressionParser",
          get: function get() {
            return this._exprParser;
          }
        }, {
          key: "parse",
          value: function parse(component, template, directives, pipes, schemas, templateUrl, preserveWhitespaces) {
            var _a;

            var result = this.tryParse(component, template, directives, pipes, schemas, templateUrl, preserveWhitespaces);
            var warnings = result.errors.filter(function (error) {
              return error.level === ParseErrorLevel.WARNING;
            });
            var errors = result.errors.filter(function (error) {
              return error.level === ParseErrorLevel.ERROR;
            });

            if (warnings.length > 0) {
              (_a = this._console) === null || _a === void 0 ? void 0 : _a.warn("Template parse warnings:\n".concat(warnings.join('\n')));
            }

            if (errors.length > 0) {
              var errorString = errors.join('\n');
              throw syntaxError("Template parse errors:\n".concat(errorString), errors);
            }

            return {
              template: result.templateAst,
              pipes: result.usedPipes
            };
          }
        }, {
          key: "tryParse",
          value: function tryParse(component, template, directives, pipes, schemas, templateUrl, preserveWhitespaces) {
            var htmlParseResult = typeof template === 'string' ? this._htmlParser.parse(template, templateUrl, {
              tokenizeExpansionForms: true,
              interpolationConfig: this.getInterpolationConfig(component)
            }) : template;

            if (!preserveWhitespaces) {
              htmlParseResult = removeWhitespaces(htmlParseResult);
            }

            return this.tryParseHtml(this.expandHtml(htmlParseResult), component, directives, pipes, schemas);
          }
        }, {
          key: "tryParseHtml",
          value: function tryParseHtml(htmlAstWithErrors, component, directives, pipes, schemas) {
            var result;
            var errors = htmlAstWithErrors.errors;
            var usedPipes = [];

            if (htmlAstWithErrors.rootNodes.length > 0) {
              var uniqDirectives = removeSummaryDuplicates(directives);
              var uniqPipes = removeSummaryDuplicates(pipes);
              var providerViewContext = new ProviderViewContext(this._reflector, component);
              var interpolationConfig = undefined;

              if (component.template && component.template.interpolation) {
                interpolationConfig = {
                  start: component.template.interpolation[0],
                  end: component.template.interpolation[1]
                };
              }

              var bindingParser = new BindingParser(this._exprParser, interpolationConfig, this._schemaRegistry, uniqPipes, errors);
              var parseVisitor = new TemplateParseVisitor(this._reflector, this._config, providerViewContext, uniqDirectives, bindingParser, this._schemaRegistry, schemas, errors);
              result = visitAll$1(parseVisitor, htmlAstWithErrors.rootNodes, EMPTY_ELEMENT_CONTEXT);
              errors.push.apply(errors, _toConsumableArray(providerViewContext.errors));
              usedPipes.push.apply(usedPipes, _toConsumableArray(bindingParser.getUsedPipes()));
            } else {
              result = [];
            }

            this._assertNoReferenceDuplicationOnTemplate(result, errors);

            if (errors.length > 0) {
              return new TemplateParseResult(result, usedPipes, errors);
            }

            if (this.transforms) {
              this.transforms.forEach(function (transform) {
                result = templateVisitAll(transform, result);
              });
            }

            return new TemplateParseResult(result, usedPipes, errors);
          }
        }, {
          key: "expandHtml",
          value: function expandHtml(htmlAstWithErrors) {
            var forced = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
            var errors = htmlAstWithErrors.errors;

            if (errors.length == 0 || forced) {
              // Transform ICU messages to angular directives
              var expandedHtmlAst = expandNodes(htmlAstWithErrors.rootNodes);
              errors.push.apply(errors, _toConsumableArray(expandedHtmlAst.errors));
              htmlAstWithErrors = new ParseTreeResult(expandedHtmlAst.nodes, errors);
            }

            return htmlAstWithErrors;
          }
        }, {
          key: "getInterpolationConfig",
          value: function getInterpolationConfig(component) {
            if (component.template) {
              return InterpolationConfig.fromArray(component.template.interpolation);
            }

            return undefined;
          }
          /** @internal */

        }, {
          key: "_assertNoReferenceDuplicationOnTemplate",
          value: function _assertNoReferenceDuplicationOnTemplate(result, errors) {
            var existingReferences = [];
            result.filter(function (element) {
              return !!element.references;
            }).forEach(function (element) {
              return element.references.forEach(function (reference) {
                var name = reference.name;

                if (existingReferences.indexOf(name) < 0) {
                  existingReferences.push(name);
                } else {
                  var _error2 = new TemplateParseError("Reference \"#".concat(name, "\" is defined several times"), reference.sourceSpan, ParseErrorLevel.ERROR);

                  errors.push(_error2);
                }
              });
            });
          }
        }]);

        return TemplateParser;
      }();

      var TemplateParseVisitor = /*#__PURE__*/function () {
        function TemplateParseVisitor(reflector, config, providerViewContext, directives, _bindingParser, _schemaRegistry, _schemas, _targetErrors) {
          var _this150 = this;

          _classCallCheck(this, TemplateParseVisitor);

          this.reflector = reflector;
          this.config = config;
          this.providerViewContext = providerViewContext;
          this._bindingParser = _bindingParser;
          this._schemaRegistry = _schemaRegistry;
          this._schemas = _schemas;
          this._targetErrors = _targetErrors;
          this.selectorMatcher = new SelectorMatcher();
          this.directivesIndex = new Map();
          this.ngContentCount = 0; // Note: queries start with id 1 so we can use the number in a Bloom filter!

          this.contentQueryStartId = providerViewContext.component.viewQueries.length + 1;
          directives.forEach(function (directive, index) {
            var selector = CssSelector.parse(directive.selector);

            _this150.selectorMatcher.addSelectables(selector, directive);

            _this150.directivesIndex.set(directive, index);
          });
        }

        _createClass(TemplateParseVisitor, [{
          key: "visitExpansion",
          value: function visitExpansion(expansion, context) {
            return null;
          }
        }, {
          key: "visitExpansionCase",
          value: function visitExpansionCase(expansionCase, context) {
            return null;
          }
        }, {
          key: "visitText",
          value: function visitText(text, parent) {
            var ngContentIndex = parent.findNgContentIndex(TEXT_CSS_SELECTOR());
            var valueNoNgsp = replaceNgsp(text.value);

            var expr = this._bindingParser.parseInterpolation(valueNoNgsp, text.sourceSpan);

            return expr ? new BoundTextAst(expr, ngContentIndex, text.sourceSpan) : new TextAst(valueNoNgsp, ngContentIndex, text.sourceSpan);
          }
        }, {
          key: "visitAttribute",
          value: function visitAttribute(attribute, context) {
            return new AttrAst(attribute.name, attribute.value, attribute.sourceSpan);
          }
        }, {
          key: "visitComment",
          value: function visitComment(comment, context) {
            return null;
          }
        }, {
          key: "visitElement",
          value: function visitElement(element, parent) {
            var _this151 = this;

            var queryStartIndex = this.contentQueryStartId;
            var elName = element.name;
            var preparsedElement = preparseElement(element);

            if (preparsedElement.type === PreparsedElementType.SCRIPT || preparsedElement.type === PreparsedElementType.STYLE) {
              // Skipping <script> for security reasons
              // Skipping <style> as we already processed them
              // in the StyleCompiler
              return null;
            }

            if (preparsedElement.type === PreparsedElementType.STYLESHEET && isStyleUrlResolvable(preparsedElement.hrefAttr)) {
              // Skipping stylesheets with either relative urls or package scheme as we already processed
              // them in the StyleCompiler
              return null;
            }

            var matchableAttrs = [];
            var elementOrDirectiveProps = [];
            var elementOrDirectiveRefs = [];
            var elementVars = [];
            var events = [];
            var templateElementOrDirectiveProps = [];
            var templateMatchableAttrs = [];
            var templateElementVars = [];
            var hasInlineTemplates = false;
            var attrs = [];
            var isTemplateElement = isNgTemplate(element.name);
            element.attrs.forEach(function (attr) {
              var parsedVariables = [];

              var hasBinding = _this151._parseAttr(isTemplateElement, attr, matchableAttrs, elementOrDirectiveProps, events, elementOrDirectiveRefs, elementVars);

              elementVars.push.apply(elementVars, _toConsumableArray(parsedVariables.map(function (v) {
                return VariableAst.fromParsedVariable(v);
              })));
              var templateValue;
              var templateKey;

              var normalizedName = _this151._normalizeAttributeName(attr.name);

              if (normalizedName.startsWith(TEMPLATE_ATTR_PREFIX$1)) {
                templateValue = attr.value;
                templateKey = normalizedName.substring(TEMPLATE_ATTR_PREFIX$1.length);
              }

              var hasTemplateBinding = templateValue != null;

              if (hasTemplateBinding) {
                if (hasInlineTemplates) {
                  _this151._reportError("Can't have multiple template bindings on one element. Use only one attribute prefixed with *", attr.sourceSpan);
                }

                hasInlineTemplates = true;
                var _parsedVariables = [];
                var absoluteOffset = (attr.valueSpan || attr.sourceSpan).start.offset;

                _this151._bindingParser.parseInlineTemplateBinding(templateKey, templateValue, attr.sourceSpan, absoluteOffset, templateMatchableAttrs, templateElementOrDirectiveProps, _parsedVariables, false
                /* isIvyAst */
                );

                templateElementVars.push.apply(templateElementVars, _toConsumableArray(_parsedVariables.map(function (v) {
                  return VariableAst.fromParsedVariable(v);
                })));
              }

              if (!hasBinding && !hasTemplateBinding) {
                // don't include the bindings as attributes as well in the AST
                attrs.push(_this151.visitAttribute(attr, null));
                matchableAttrs.push([attr.name, attr.value]);
              }
            });
            var elementCssSelector = createElementCssSelector(elName, matchableAttrs);

            var _this$_parseDirective = this._parseDirectives(this.selectorMatcher, elementCssSelector),
                directiveMetas = _this$_parseDirective.directives,
                matchElement = _this$_parseDirective.matchElement;

            var references = [];
            var boundDirectivePropNames = new Set();

            var directiveAsts = this._createDirectiveAsts(isTemplateElement, element.name, directiveMetas, elementOrDirectiveProps, elementOrDirectiveRefs, element.sourceSpan, references, boundDirectivePropNames);

            var elementProps = this._createElementPropertyAsts(element.name, elementOrDirectiveProps, boundDirectivePropNames);

            var isViewRoot = parent.isTemplateElement || hasInlineTemplates;
            var providerContext = new ProviderElementContext(this.providerViewContext, parent.providerContext, isViewRoot, directiveAsts, attrs, references, isTemplateElement, queryStartIndex, element.sourceSpan);
            var children = visitAll$1(preparsedElement.nonBindable ? NON_BINDABLE_VISITOR : this, element.children, ElementContext.create(isTemplateElement, directiveAsts, isTemplateElement ? parent.providerContext : providerContext));
            providerContext.afterElement(); // Override the actual selector when the `ngProjectAs` attribute is provided

            var projectionSelector = preparsedElement.projectAs != '' ? CssSelector.parse(preparsedElement.projectAs)[0] : elementCssSelector;
            var ngContentIndex = parent.findNgContentIndex(projectionSelector);
            var parsedElement;

            if (preparsedElement.type === PreparsedElementType.NG_CONTENT) {
              // `<ng-content>` element
              if (element.children && !element.children.every(_isEmptyTextNode)) {
                this._reportError("<ng-content> element cannot have content.", element.sourceSpan);
              }

              parsedElement = new NgContentAst(this.ngContentCount++, hasInlineTemplates ? null : ngContentIndex, element.sourceSpan);
            } else if (isTemplateElement) {
              // `<ng-template>` element
              this._assertAllEventsPublishedByDirectives(directiveAsts, events);

              this._assertNoComponentsNorElementBindingsOnTemplate(directiveAsts, elementProps, element.sourceSpan);

              parsedElement = new EmbeddedTemplateAst(attrs, events, references, elementVars, providerContext.transformedDirectiveAsts, providerContext.transformProviders, providerContext.transformedHasViewContainer, providerContext.queryMatches, children, hasInlineTemplates ? null : ngContentIndex, element.sourceSpan);
            } else {
              // element other than `<ng-content>` and `<ng-template>`
              this._assertElementExists(matchElement, element);

              this._assertOnlyOneComponent(directiveAsts, element.sourceSpan);

              var _ngContentIndex = hasInlineTemplates ? null : parent.findNgContentIndex(projectionSelector);

              parsedElement = new ElementAst(elName, attrs, elementProps, events, references, providerContext.transformedDirectiveAsts, providerContext.transformProviders, providerContext.transformedHasViewContainer, providerContext.queryMatches, children, hasInlineTemplates ? null : _ngContentIndex, element.sourceSpan, element.endSourceSpan || null);
            }

            if (hasInlineTemplates) {
              // The element as a *-attribute
              var templateQueryStartIndex = this.contentQueryStartId;
              var templateSelector = createElementCssSelector('ng-template', templateMatchableAttrs);

              var _this$_parseDirective2 = this._parseDirectives(this.selectorMatcher, templateSelector),
                  directives = _this$_parseDirective2.directives;

              var templateBoundDirectivePropNames = new Set();

              var templateDirectiveAsts = this._createDirectiveAsts(true, elName, directives, templateElementOrDirectiveProps, [], element.sourceSpan, [], templateBoundDirectivePropNames);

              var templateElementProps = this._createElementPropertyAsts(elName, templateElementOrDirectiveProps, templateBoundDirectivePropNames);

              this._assertNoComponentsNorElementBindingsOnTemplate(templateDirectiveAsts, templateElementProps, element.sourceSpan);

              var templateProviderContext = new ProviderElementContext(this.providerViewContext, parent.providerContext, parent.isTemplateElement, templateDirectiveAsts, [], [], true, templateQueryStartIndex, element.sourceSpan);
              templateProviderContext.afterElement();
              parsedElement = new EmbeddedTemplateAst([], [], [], templateElementVars, templateProviderContext.transformedDirectiveAsts, templateProviderContext.transformProviders, templateProviderContext.transformedHasViewContainer, templateProviderContext.queryMatches, [parsedElement], ngContentIndex, element.sourceSpan);
            }

            return parsedElement;
          }
        }, {
          key: "_parseAttr",
          value: function _parseAttr(isTemplateElement, attr, targetMatchableAttrs, targetProps, targetEvents, targetRefs, targetVars) {
            var name = this._normalizeAttributeName(attr.name);

            var value = attr.value;
            var srcSpan = attr.sourceSpan;
            var absoluteOffset = attr.valueSpan ? attr.valueSpan.start.offset : srcSpan.start.offset;
            var boundEvents = [];
            var bindParts = name.match(BIND_NAME_REGEXP);
            var hasBinding = false;

            if (bindParts !== null) {
              hasBinding = true;

              if (bindParts[KW_BIND_IDX] != null) {
                this._bindingParser.parsePropertyBinding(bindParts[IDENT_KW_IDX], value, false, srcSpan, absoluteOffset, attr.valueSpan, targetMatchableAttrs, targetProps);
              } else if (bindParts[KW_LET_IDX]) {
                if (isTemplateElement) {
                  var identifier = bindParts[IDENT_KW_IDX];

                  this._parseVariable(identifier, value, srcSpan, targetVars);
                } else {
                  this._reportError("\"let-\" is only supported on ng-template elements.", srcSpan);
                }
              } else if (bindParts[KW_REF_IDX]) {
                var _identifier = bindParts[IDENT_KW_IDX];

                this._parseReference(_identifier, value, srcSpan, targetRefs);
              } else if (bindParts[KW_ON_IDX]) {
                this._bindingParser.parseEvent(bindParts[IDENT_KW_IDX], value, srcSpan, attr.valueSpan || srcSpan, targetMatchableAttrs, boundEvents);
              } else if (bindParts[KW_BINDON_IDX]) {
                this._bindingParser.parsePropertyBinding(bindParts[IDENT_KW_IDX], value, false, srcSpan, absoluteOffset, attr.valueSpan, targetMatchableAttrs, targetProps);

                this._parseAssignmentEvent(bindParts[IDENT_KW_IDX], value, srcSpan, attr.valueSpan || srcSpan, targetMatchableAttrs, boundEvents);
              } else if (bindParts[KW_AT_IDX]) {
                this._bindingParser.parseLiteralAttr(name, value, srcSpan, absoluteOffset, attr.valueSpan, targetMatchableAttrs, targetProps);
              } else if (bindParts[IDENT_BANANA_BOX_IDX]) {
                this._bindingParser.parsePropertyBinding(bindParts[IDENT_BANANA_BOX_IDX], value, false, srcSpan, absoluteOffset, attr.valueSpan, targetMatchableAttrs, targetProps);

                this._parseAssignmentEvent(bindParts[IDENT_BANANA_BOX_IDX], value, srcSpan, attr.valueSpan || srcSpan, targetMatchableAttrs, boundEvents);
              } else if (bindParts[IDENT_PROPERTY_IDX]) {
                this._bindingParser.parsePropertyBinding(bindParts[IDENT_PROPERTY_IDX], value, false, srcSpan, absoluteOffset, attr.valueSpan, targetMatchableAttrs, targetProps);
              } else if (bindParts[IDENT_EVENT_IDX]) {
                this._bindingParser.parseEvent(bindParts[IDENT_EVENT_IDX], value, srcSpan, attr.valueSpan || srcSpan, targetMatchableAttrs, boundEvents);
              }
            } else {
              hasBinding = this._bindingParser.parsePropertyInterpolation(name, value, srcSpan, attr.valueSpan, targetMatchableAttrs, targetProps);
            }

            if (!hasBinding) {
              this._bindingParser.parseLiteralAttr(name, value, srcSpan, absoluteOffset, attr.valueSpan, targetMatchableAttrs, targetProps);
            }

            targetEvents.push.apply(targetEvents, _toConsumableArray(boundEvents.map(function (e) {
              return BoundEventAst.fromParsedEvent(e);
            })));
            return hasBinding;
          }
        }, {
          key: "_normalizeAttributeName",
          value: function _normalizeAttributeName(attrName) {
            return /^data-/i.test(attrName) ? attrName.substring(5) : attrName;
          }
        }, {
          key: "_parseVariable",
          value: function _parseVariable(identifier, value, sourceSpan, targetVars) {
            if (identifier.indexOf('-') > -1) {
              this._reportError("\"-\" is not allowed in variable names", sourceSpan);
            } else if (identifier.length === 0) {
              this._reportError("Variable does not have a name", sourceSpan);
            }

            targetVars.push(new VariableAst(identifier, value, sourceSpan));
          }
        }, {
          key: "_parseReference",
          value: function _parseReference(identifier, value, sourceSpan, targetRefs) {
            if (identifier.indexOf('-') > -1) {
              this._reportError("\"-\" is not allowed in reference names", sourceSpan);
            } else if (identifier.length === 0) {
              this._reportError("Reference does not have a name", sourceSpan);
            }

            targetRefs.push(new ElementOrDirectiveRef(identifier, value, sourceSpan));
          }
        }, {
          key: "_parseAssignmentEvent",
          value: function _parseAssignmentEvent(name, expression, sourceSpan, valueSpan, targetMatchableAttrs, targetEvents) {
            this._bindingParser.parseEvent("".concat(name, "Change"), "".concat(expression, "=$event"), sourceSpan, valueSpan, targetMatchableAttrs, targetEvents);
          }
        }, {
          key: "_parseDirectives",
          value: function _parseDirectives(selectorMatcher, elementCssSelector) {
            var _this152 = this;

            // Need to sort the directives so that we get consistent results throughout,
            // as selectorMatcher uses Maps inside.
            // Also deduplicate directives as they might match more than one time!
            var directives = newArray(this.directivesIndex.size); // Whether any directive selector matches on the element name

            var matchElement = false;
            selectorMatcher.match(elementCssSelector, function (selector, directive) {
              directives[_this152.directivesIndex.get(directive)] = directive;
              matchElement = matchElement || selector.hasElementSelector();
            });
            return {
              directives: directives.filter(function (dir) {
                return !!dir;
              }),
              matchElement: matchElement
            };
          }
        }, {
          key: "_createDirectiveAsts",
          value: function _createDirectiveAsts(isTemplateElement, elementName, directives, props, elementOrDirectiveRefs, elementSourceSpan, targetReferences, targetBoundDirectivePropNames) {
            var _this153 = this;

            var matchedReferences = new Set();
            var component = null;
            var directiveAsts = directives.map(function (directive) {
              var sourceSpan = new ParseSourceSpan(elementSourceSpan.start, elementSourceSpan.end, elementSourceSpan.fullStart, "Directive ".concat(identifierName(directive.type)));

              if (directive.isComponent) {
                component = directive;
              }

              var directiveProperties = [];

              var boundProperties = _this153._bindingParser.createDirectiveHostPropertyAsts(directive, elementName, sourceSpan);

              var hostProperties = boundProperties.map(function (prop) {
                return BoundElementPropertyAst.fromBoundProperty(prop);
              }); // Note: We need to check the host properties here as well,
              // as we don't know the element name in the DirectiveWrapperCompiler yet.

              hostProperties = _this153._checkPropertiesInSchema(elementName, hostProperties);

              var parsedEvents = _this153._bindingParser.createDirectiveHostEventAsts(directive, sourceSpan);

              _this153._createDirectivePropertyAsts(directive.inputs, props, directiveProperties, targetBoundDirectivePropNames);

              elementOrDirectiveRefs.forEach(function (elOrDirRef) {
                if (elOrDirRef.value.length === 0 && directive.isComponent || elOrDirRef.isReferenceToDirective(directive)) {
                  targetReferences.push(new ReferenceAst(elOrDirRef.name, createTokenForReference(directive.type.reference), elOrDirRef.value, elOrDirRef.sourceSpan));
                  matchedReferences.add(elOrDirRef.name);
                }
              });
              var hostEvents = parsedEvents.map(function (e) {
                return BoundEventAst.fromParsedEvent(e);
              });
              var contentQueryStartId = _this153.contentQueryStartId;
              _this153.contentQueryStartId += directive.queries.length;
              return new DirectiveAst(directive, directiveProperties, hostProperties, hostEvents, contentQueryStartId, sourceSpan);
            });
            elementOrDirectiveRefs.forEach(function (elOrDirRef) {
              if (elOrDirRef.value.length > 0) {
                if (!matchedReferences.has(elOrDirRef.name)) {
                  _this153._reportError("There is no directive with \"exportAs\" set to \"".concat(elOrDirRef.value, "\""), elOrDirRef.sourceSpan);
                }
              } else if (!component) {
                var refToken = null;

                if (isTemplateElement) {
                  refToken = createTokenForExternalReference(_this153.reflector, Identifiers.TemplateRef);
                }

                targetReferences.push(new ReferenceAst(elOrDirRef.name, refToken, elOrDirRef.value, elOrDirRef.sourceSpan));
              }
            });
            return directiveAsts;
          }
        }, {
          key: "_createDirectivePropertyAsts",
          value: function _createDirectivePropertyAsts(directiveProperties, boundProps, targetBoundDirectiveProps, targetBoundDirectivePropNames) {
            if (directiveProperties) {
              var boundPropsByName = new Map();
              boundProps.forEach(function (boundProp) {
                var prevValue = boundPropsByName.get(boundProp.name);

                if (!prevValue || prevValue.isLiteral) {
                  // give [a]="b" a higher precedence than a="b" on the same element
                  boundPropsByName.set(boundProp.name, boundProp);
                }
              });
              Object.keys(directiveProperties).forEach(function (dirProp) {
                var elProp = directiveProperties[dirProp];
                var boundProp = boundPropsByName.get(elProp); // Bindings are optional, so this binding only needs to be set up if an expression is given.

                if (boundProp) {
                  targetBoundDirectivePropNames.add(boundProp.name);

                  if (!isEmptyExpression(boundProp.expression)) {
                    targetBoundDirectiveProps.push(new BoundDirectivePropertyAst(dirProp, boundProp.name, boundProp.expression, boundProp.sourceSpan));
                  }
                }
              });
            }
          }
        }, {
          key: "_createElementPropertyAsts",
          value: function _createElementPropertyAsts(elementName, props, boundDirectivePropNames) {
            var _this154 = this;

            var boundElementProps = [];
            props.forEach(function (prop) {
              if (!prop.isLiteral && !boundDirectivePropNames.has(prop.name)) {
                var boundProp = _this154._bindingParser.createBoundElementProperty(elementName, prop);

                boundElementProps.push(BoundElementPropertyAst.fromBoundProperty(boundProp));
              }
            });
            return this._checkPropertiesInSchema(elementName, boundElementProps);
          }
        }, {
          key: "_findComponentDirectives",
          value: function _findComponentDirectives(directives) {
            return directives.filter(function (directive) {
              return directive.directive.isComponent;
            });
          }
        }, {
          key: "_findComponentDirectiveNames",
          value: function _findComponentDirectiveNames(directives) {
            return this._findComponentDirectives(directives).map(function (directive) {
              return identifierName(directive.directive.type);
            });
          }
        }, {
          key: "_assertOnlyOneComponent",
          value: function _assertOnlyOneComponent(directives, sourceSpan) {
            var componentTypeNames = this._findComponentDirectiveNames(directives);

            if (componentTypeNames.length > 1) {
              this._reportError("More than one component matched on this element.\n" + "Make sure that only one component's selector can match a given element.\n" + "Conflicting components: ".concat(componentTypeNames.join(',')), sourceSpan);
            }
          }
          /**
           * Make sure that non-angular tags conform to the schemas.
           *
           * Note: An element is considered an angular tag when at least one directive selector matches the
           * tag name.
           *
           * @param matchElement Whether any directive has matched on the tag name
           * @param element the html element
           */

        }, {
          key: "_assertElementExists",
          value: function _assertElementExists(matchElement, element) {
            var elName = element.name.replace(/^:xhtml:/, '');

            if (!matchElement && !this._schemaRegistry.hasElement(elName, this._schemas)) {
              var errorMsg = "'".concat(elName, "' is not a known element:\n");
              errorMsg += "1. If '".concat(elName, "' is an Angular component, then verify that it is part of this module.\n");

              if (elName.indexOf('-') > -1) {
                errorMsg += "2. If '".concat(elName, "' is a Web Component then add 'CUSTOM_ELEMENTS_SCHEMA' to the '@NgModule.schemas' of this component to suppress this message.");
              } else {
                errorMsg += "2. To allow any element add 'NO_ERRORS_SCHEMA' to the '@NgModule.schemas' of this component.";
              }

              this._reportError(errorMsg, element.sourceSpan);
            }
          }
        }, {
          key: "_assertNoComponentsNorElementBindingsOnTemplate",
          value: function _assertNoComponentsNorElementBindingsOnTemplate(directives, elementProps, sourceSpan) {
            var _this155 = this;

            var componentTypeNames = this._findComponentDirectiveNames(directives);

            if (componentTypeNames.length > 0) {
              this._reportError("Components on an embedded template: ".concat(componentTypeNames.join(',')), sourceSpan);
            }

            elementProps.forEach(function (prop) {
              _this155._reportError("Property binding ".concat(prop.name, " not used by any directive on an embedded template. Make sure that the property name is spelled correctly and all directives are listed in the \"@NgModule.declarations\"."), sourceSpan);
            });
          }
        }, {
          key: "_assertAllEventsPublishedByDirectives",
          value: function _assertAllEventsPublishedByDirectives(directives, events) {
            var _this156 = this;

            var allDirectiveEvents = new Set();
            directives.forEach(function (directive) {
              Object.keys(directive.directive.outputs).forEach(function (k) {
                var eventName = directive.directive.outputs[k];
                allDirectiveEvents.add(eventName);
              });
            });
            events.forEach(function (event) {
              if (event.target != null || !allDirectiveEvents.has(event.name)) {
                _this156._reportError("Event binding ".concat(event.fullName, " not emitted by any directive on an embedded template. Make sure that the event name is spelled correctly and all directives are listed in the \"@NgModule.declarations\"."), event.sourceSpan);
              }
            });
          }
        }, {
          key: "_checkPropertiesInSchema",
          value: function _checkPropertiesInSchema(elementName, boundProps) {
            var _this157 = this;

            // Note: We can't filter out empty expressions before this method,
            // as we still want to validate them!
            return boundProps.filter(function (boundProp) {
              if (boundProp.type === 0
              /* Property */
              && !_this157._schemaRegistry.hasProperty(elementName, boundProp.name, _this157._schemas)) {
                var errorMsg = "Can't bind to '".concat(boundProp.name, "' since it isn't a known property of '").concat(elementName, "'.");

                if (elementName.startsWith('ng-')) {
                  errorMsg += "\n1. If '".concat(boundProp.name, "' is an Angular directive, then add 'CommonModule' to the '@NgModule.imports' of this component.") + "\n2. To allow any property add 'NO_ERRORS_SCHEMA' to the '@NgModule.schemas' of this component.";
                } else if (elementName.indexOf('-') > -1) {
                  errorMsg += "\n1. If '".concat(elementName, "' is an Angular component and it has '").concat(boundProp.name, "' input, then verify that it is part of this module.") + "\n2. If '".concat(elementName, "' is a Web Component then add 'CUSTOM_ELEMENTS_SCHEMA' to the '@NgModule.schemas' of this component to suppress this message.") + "\n3. To allow any property add 'NO_ERRORS_SCHEMA' to the '@NgModule.schemas' of this component.";
                }

                _this157._reportError(errorMsg, boundProp.sourceSpan);
              }

              return !isEmptyExpression(boundProp.value);
            });
          }
        }, {
          key: "_reportError",
          value: function _reportError(message, sourceSpan) {
            var level = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : ParseErrorLevel.ERROR;

            this._targetErrors.push(new ParseError(sourceSpan, message, level));
          }
        }]);

        return TemplateParseVisitor;
      }();

      var NonBindableVisitor = /*#__PURE__*/function () {
        function NonBindableVisitor() {
          _classCallCheck(this, NonBindableVisitor);
        }

        _createClass(NonBindableVisitor, [{
          key: "visitElement",
          value: function visitElement(ast, parent) {
            var preparsedElement = preparseElement(ast);

            if (preparsedElement.type === PreparsedElementType.SCRIPT || preparsedElement.type === PreparsedElementType.STYLE || preparsedElement.type === PreparsedElementType.STYLESHEET) {
              // Skipping <script> for security reasons
              // Skipping <style> and stylesheets as we already processed them
              // in the StyleCompiler
              return null;
            }

            var attrNameAndValues = ast.attrs.map(function (attr) {
              return [attr.name, attr.value];
            });
            var selector = createElementCssSelector(ast.name, attrNameAndValues);
            var ngContentIndex = parent.findNgContentIndex(selector);
            var children = visitAll$1(this, ast.children, EMPTY_ELEMENT_CONTEXT);
            return new ElementAst(ast.name, visitAll$1(this, ast.attrs), [], [], [], [], [], false, [], children, ngContentIndex, ast.sourceSpan, ast.endSourceSpan);
          }
        }, {
          key: "visitComment",
          value: function visitComment(comment, context) {
            return null;
          }
        }, {
          key: "visitAttribute",
          value: function visitAttribute(attribute, context) {
            return new AttrAst(attribute.name, attribute.value, attribute.sourceSpan);
          }
        }, {
          key: "visitText",
          value: function visitText(text, parent) {
            var ngContentIndex = parent.findNgContentIndex(TEXT_CSS_SELECTOR());
            return new TextAst(text.value, ngContentIndex, text.sourceSpan);
          }
        }, {
          key: "visitExpansion",
          value: function visitExpansion(expansion, context) {
            return expansion;
          }
        }, {
          key: "visitExpansionCase",
          value: function visitExpansionCase(expansionCase, context) {
            return expansionCase;
          }
        }]);

        return NonBindableVisitor;
      }();
      /**
       * A reference to an element or directive in a template. E.g., the reference in this template:
       *
       * <div #myMenu="coolMenu">
       *
       * would be {name: 'myMenu', value: 'coolMenu', sourceSpan: ...}
       */


      var ElementOrDirectiveRef = /*#__PURE__*/function () {
        function ElementOrDirectiveRef(name, value, sourceSpan) {
          _classCallCheck(this, ElementOrDirectiveRef);

          this.name = name;
          this.value = value;
          this.sourceSpan = sourceSpan;
        }
        /** Gets whether this is a reference to the given directive. */


        _createClass(ElementOrDirectiveRef, [{
          key: "isReferenceToDirective",
          value: function isReferenceToDirective(directive) {
            return splitExportAs(directive.exportAs).indexOf(this.value) !== -1;
          }
        }]);

        return ElementOrDirectiveRef;
      }();
      /** Splits a raw, potentially comma-delimited `exportAs` value into an array of names. */


      function splitExportAs(exportAs) {
        return exportAs ? exportAs.split(',').map(function (e) {
          return e.trim();
        }) : [];
      }

      function splitClasses(classAttrValue) {
        return classAttrValue.trim().split(/\s+/g);
      }

      var ElementContext = /*#__PURE__*/function () {
        function ElementContext(isTemplateElement, _ngContentIndexMatcher, _wildcardNgContentIndex, providerContext) {
          _classCallCheck(this, ElementContext);

          this.isTemplateElement = isTemplateElement;
          this._ngContentIndexMatcher = _ngContentIndexMatcher;
          this._wildcardNgContentIndex = _wildcardNgContentIndex;
          this.providerContext = providerContext;
        }

        _createClass(ElementContext, [{
          key: "findNgContentIndex",
          value: function findNgContentIndex(selector) {
            var ngContentIndices = [];

            this._ngContentIndexMatcher.match(selector, function (selector, ngContentIndex) {
              ngContentIndices.push(ngContentIndex);
            });

            ngContentIndices.sort();

            if (this._wildcardNgContentIndex != null) {
              ngContentIndices.push(this._wildcardNgContentIndex);
            }

            return ngContentIndices.length > 0 ? ngContentIndices[0] : null;
          }
        }], [{
          key: "create",
          value: function create(isTemplateElement, directives, providerContext) {
            var matcher = new SelectorMatcher();
            var wildcardNgContentIndex = null;
            var component = directives.find(function (directive) {
              return directive.directive.isComponent;
            });

            if (component) {
              var ngContentSelectors = component.directive.template.ngContentSelectors;

              for (var i = 0; i < ngContentSelectors.length; i++) {
                var selector = ngContentSelectors[i];

                if (selector === '*') {
                  wildcardNgContentIndex = i;
                } else {
                  matcher.addSelectables(CssSelector.parse(ngContentSelectors[i]), i);
                }
              }
            }

            return new ElementContext(isTemplateElement, matcher, wildcardNgContentIndex, providerContext);
          }
        }]);

        return ElementContext;
      }();

      function createElementCssSelector(elementName, attributes) {
        var cssSelector = new CssSelector();
        var elNameNoNs = splitNsName(elementName)[1];
        cssSelector.setElement(elNameNoNs);

        for (var i = 0; i < attributes.length; i++) {
          var attrName = attributes[i][0];
          var attrNameNoNs = splitNsName(attrName)[1];
          var attrValue = attributes[i][1];
          cssSelector.addAttribute(attrNameNoNs, attrValue);

          if (attrName.toLowerCase() == CLASS_ATTR) {
            var classes = splitClasses(attrValue);
            classes.forEach(function (className) {
              return cssSelector.addClassName(className);
            });
          }
        }

        return cssSelector;
      }

      var EMPTY_ELEMENT_CONTEXT = new ElementContext(true, new SelectorMatcher(), null, null);
      var NON_BINDABLE_VISITOR = new NonBindableVisitor();

      function _isEmptyTextNode(node) {
        return node instanceof Text$3 && node.value.trim().length == 0;
      }

      function removeSummaryDuplicates(items) {
        var map = new Map();
        items.forEach(function (item) {
          if (!map.get(item.type.reference)) {
            map.set(item.type.reference, item);
          }
        });
        return Array.from(map.values());
      }

      function isEmptyExpression(ast) {
        if (ast instanceof ASTWithSource) {
          ast = ast.ast;
        }

        return ast instanceof EmptyExpr;
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * Parses string representation of a style and converts it into object literal.
       *
       * @param value string representation of style as used in the `style` attribute in HTML.
       *   Example: `color: red; height: auto`.
       * @returns An array of style property name and value pairs, e.g. `['color', 'red', 'height',
       * 'auto']`
       */


      function parse(value) {
        // we use a string array here instead of a string map
        // because a string-map is not guaranteed to retain the
        // order of the entries whereas a string array can be
        // constructed in a [key, value, key, value] format.
        var styles = [];
        var i = 0;
        var parenDepth = 0;
        var quote = 0
        /* QuoteNone */
        ;
        var valueStart = 0;
        var propStart = 0;
        var currentProp = null;
        var valueHasQuotes = false;

        while (i < value.length) {
          var token = value.charCodeAt(i++);

          switch (token) {
            case 40
            /* OpenParen */
            :
              parenDepth++;
              break;

            case 41
            /* CloseParen */
            :
              parenDepth--;
              break;

            case 39
            /* QuoteSingle */
            :
              // valueStart needs to be there since prop values don't
              // have quotes in CSS
              valueHasQuotes = valueHasQuotes || valueStart > 0;

              if (quote === 0
              /* QuoteNone */
              ) {
                  quote = 39
                  /* QuoteSingle */
                  ;
                } else if (quote === 39
              /* QuoteSingle */
              && value.charCodeAt(i - 1) !== 92
              /* BackSlash */
              ) {
                  quote = 0
                  /* QuoteNone */
                  ;
                }

              break;

            case 34
            /* QuoteDouble */
            :
              // same logic as above
              valueHasQuotes = valueHasQuotes || valueStart > 0;

              if (quote === 0
              /* QuoteNone */
              ) {
                  quote = 34
                  /* QuoteDouble */
                  ;
                } else if (quote === 34
              /* QuoteDouble */
              && value.charCodeAt(i - 1) !== 92
              /* BackSlash */
              ) {
                  quote = 0
                  /* QuoteNone */
                  ;
                }

              break;

            case 58
            /* Colon */
            :
              if (!currentProp && parenDepth === 0 && quote === 0
              /* QuoteNone */
              ) {
                  currentProp = hyphenate(value.substring(propStart, i - 1).trim());
                  valueStart = i;
                }

              break;

            case 59
            /* Semicolon */
            :
              if (currentProp && valueStart > 0 && parenDepth === 0 && quote === 0
              /* QuoteNone */
              ) {
                  var styleVal = value.substring(valueStart, i - 1).trim();
                  styles.push(currentProp, valueHasQuotes ? stripUnnecessaryQuotes(styleVal) : styleVal);
                  propStart = i;
                  valueStart = 0;
                  currentProp = null;
                  valueHasQuotes = false;
                }

              break;
          }
        }

        if (currentProp && valueStart) {
          var _styleVal = value.substr(valueStart).trim();

          styles.push(currentProp, valueHasQuotes ? stripUnnecessaryQuotes(_styleVal) : _styleVal);
        }

        return styles;
      }

      function stripUnnecessaryQuotes(value) {
        var qS = value.charCodeAt(0);
        var qE = value.charCodeAt(value.length - 1);

        if (qS == qE && (qS == 39
        /* QuoteSingle */
        || qS == 34
        /* QuoteDouble */
        )) {
          var tempValue = value.substring(1, value.length - 1); // special case to avoid using a multi-quoted string that was just chomped
          // (e.g. `font-family: "Verdana", "sans-serif"`)

          if (tempValue.indexOf('\'') == -1 && tempValue.indexOf('"') == -1) {
            value = tempValue;
          }
        }

        return value;
      }

      function hyphenate(value) {
        return value.replace(/[a-z][A-Z]/g, function (v) {
          return v.charAt(0) + '-' + v.charAt(1);
        }).toLowerCase();
      }

      var IMPORTANT_FLAG = '!important';
      /**
       * Minimum amount of binding slots required in the runtime for style/class bindings.
       *
       * Styling in Angular uses up two slots in the runtime LView/TData data structures to
       * record binding data, property information and metadata.
       *
       * When a binding is registered it will place the following information in the `LView`:
       *
       * slot 1) binding value
       * slot 2) cached value (all other values collected before it in string form)
       *
       * When a binding is registered it will place the following information in the `TData`:
       *
       * slot 1) prop name
       * slot 2) binding index that points to the previous style/class binding (and some extra config
       * values)
       *
       * Let's imagine we have a binding that looks like so:
       *
       * ```
       * <div [style.width]="x" [style.height]="y">
       * ```
       *
       * Our `LView` and `TData` data-structures look like so:
       *
       * ```typescript
       * LView = [
       *   // ...
       *   x, // value of x
       *   "width: x",
       *
       *   y, // value of y
       *   "width: x; height: y",
       *   // ...
       * ];
       *
       * TData = [
       *   // ...
       *   "width", // binding slot 20
       *   0,
       *
       *   "height",
       *   20,
       *   // ...
       * ];
       * ```
       *
       * */

      var MIN_STYLING_BINDING_SLOTS_REQUIRED = 2;
      /**
       * Produces creation/update instructions for all styling bindings (class and style)
       *
       * It also produces the creation instruction to register all initial styling values
       * (which are all the static class="..." and style="..." attribute values that exist
       * on an element within a template).
       *
       * The builder class below handles producing instructions for the following cases:
       *
       * - Static style/class attributes (style="..." and class="...")
       * - Dynamic style/class map bindings ([style]="map" and [class]="map|string")
       * - Dynamic style/class property bindings ([style.prop]="exp" and [class.name]="exp")
       *
       * Due to the complex relationship of all of these cases, the instructions generated
       * for these attributes/properties/bindings must be done so in the correct order. The
       * order which these must be generated is as follows:
       *
       * if (createMode) {
       *   styling(...)
       * }
       * if (updateMode) {
       *   styleMap(...)
       *   classMap(...)
       *   styleProp(...)
       *   classProp(...)
       * }
       *
       * The creation/update methods within the builder class produce these instructions.
       */

      var StylingBuilder = /*#__PURE__*/function () {
        function StylingBuilder(_directiveExpr) {
          _classCallCheck(this, StylingBuilder);

          this._directiveExpr = _directiveExpr;
          /** Whether or not there are any static styling values present */

          this._hasInitialValues = false;
          /**
           *  Whether or not there are any styling bindings present
           *  (i.e. `[style]`, `[class]`, `[style.prop]` or `[class.name]`)
           */

          this.hasBindings = false;
          this.hasBindingsWithPipes = false;
          /** the input for [class] (if it exists) */

          this._classMapInput = null;
          /** the input for [style] (if it exists) */

          this._styleMapInput = null;
          /** an array of each [style.prop] input */

          this._singleStyleInputs = null;
          /** an array of each [class.name] input */

          this._singleClassInputs = null;
          this._lastStylingInput = null;
          this._firstStylingInput = null; // maps are used instead of hash maps because a Map will
          // retain the ordering of the keys

          /**
           * Represents the location of each style binding in the template
           * (e.g. `<div [style.width]="w" [style.height]="h">` implies
           * that `width=0` and `height=1`)
           */

          this._stylesIndex = new Map();
          /**
           * Represents the location of each class binding in the template
           * (e.g. `<div [class.big]="b" [class.hidden]="h">` implies
           * that `big=0` and `hidden=1`)
           */

          this._classesIndex = new Map();
          this._initialStyleValues = [];
          this._initialClassValues = [];
        }
        /**
         * Registers a given input to the styling builder to be later used when producing AOT code.
         *
         * The code below will only accept the input if it is somehow tied to styling (whether it be
         * style/class bindings or static style/class attributes).
         */


        _createClass(StylingBuilder, [{
          key: "registerBoundInput",
          value: function registerBoundInput(input) {
            // [attr.style] or [attr.class] are skipped in the code below,
            // they should not be treated as styling-based bindings since
            // they are intended to be written directly to the attr and
            // will therefore skip all style/class resolution that is present
            // with style="", [style]="" and [style.prop]="", class="",
            // [class.prop]="". [class]="" assignments
            var binding = null;
            var name = input.name;

            switch (input.type) {
              case 0
              /* Property */
              :
                binding = this.registerInputBasedOnName(name, input.value, input.sourceSpan);
                break;

              case 3
              /* Style */
              :
                binding = this.registerStyleInput(name, false, input.value, input.sourceSpan, input.unit);
                break;

              case 2
              /* Class */
              :
                binding = this.registerClassInput(name, false, input.value, input.sourceSpan);
                break;
            }

            return binding ? true : false;
          }
        }, {
          key: "registerInputBasedOnName",
          value: function registerInputBasedOnName(name, expression, sourceSpan) {
            var binding = null;
            var prefix = name.substring(0, 6);
            var isStyle = name === 'style' || prefix === 'style.' || prefix === 'style!';
            var isClass = !isStyle && (name === 'class' || prefix === 'class.' || prefix === 'class!');

            if (isStyle || isClass) {
              var isMapBased = name.charAt(5) !== '.'; // style.prop or class.prop makes this a no

              var property = name.substr(isMapBased ? 5 : 6); // the dot explains why there's a +1

              if (isStyle) {
                binding = this.registerStyleInput(property, isMapBased, expression, sourceSpan);
              } else {
                binding = this.registerClassInput(property, isMapBased, expression, sourceSpan);
              }
            }

            return binding;
          }
        }, {
          key: "registerStyleInput",
          value: function registerStyleInput(name, isMapBased, value, sourceSpan, suffix) {
            if (isEmptyExpression(value)) {
              return null;
            }

            name = normalizePropName(name);

            var _parseProperty = parseProperty(name),
                property = _parseProperty.property,
                hasOverrideFlag = _parseProperty.hasOverrideFlag,
                bindingSuffix = _parseProperty.suffix;

            suffix = typeof suffix === 'string' && suffix.length !== 0 ? suffix : bindingSuffix;
            var entry = {
              name: property,
              suffix: suffix,
              value: value,
              sourceSpan: sourceSpan,
              hasOverrideFlag: hasOverrideFlag
            };

            if (isMapBased) {
              this._styleMapInput = entry;
            } else {
              (this._singleStyleInputs = this._singleStyleInputs || []).push(entry);
              registerIntoMap(this._stylesIndex, property);
            }

            this._lastStylingInput = entry;
            this._firstStylingInput = this._firstStylingInput || entry;

            this._checkForPipes(value);

            this.hasBindings = true;
            return entry;
          }
        }, {
          key: "registerClassInput",
          value: function registerClassInput(name, isMapBased, value, sourceSpan) {
            if (isEmptyExpression(value)) {
              return null;
            }

            var _parseProperty2 = parseProperty(name),
                property = _parseProperty2.property,
                hasOverrideFlag = _parseProperty2.hasOverrideFlag;

            var entry = {
              name: property,
              value: value,
              sourceSpan: sourceSpan,
              hasOverrideFlag: hasOverrideFlag,
              suffix: null
            };

            if (isMapBased) {
              if (this._classMapInput) {
                throw new Error('[class] and [className] bindings cannot be used on the same element simultaneously');
              }

              this._classMapInput = entry;
            } else {
              (this._singleClassInputs = this._singleClassInputs || []).push(entry);
              registerIntoMap(this._classesIndex, property);
            }

            this._lastStylingInput = entry;
            this._firstStylingInput = this._firstStylingInput || entry;

            this._checkForPipes(value);

            this.hasBindings = true;
            return entry;
          }
        }, {
          key: "_checkForPipes",
          value: function _checkForPipes(value) {
            if (value instanceof ASTWithSource && value.ast instanceof BindingPipe) {
              this.hasBindingsWithPipes = true;
            }
          }
          /**
           * Registers the element's static style string value to the builder.
           *
           * @param value the style string (e.g. `width:100px; height:200px;`)
           */

        }, {
          key: "registerStyleAttr",
          value: function registerStyleAttr(value) {
            this._initialStyleValues = parse(value);
            this._hasInitialValues = true;
          }
          /**
           * Registers the element's static class string value to the builder.
           *
           * @param value the className string (e.g. `disabled gold zoom`)
           */

        }, {
          key: "registerClassAttr",
          value: function registerClassAttr(value) {
            this._initialClassValues = value.trim().split(/\s+/g);
            this._hasInitialValues = true;
          }
          /**
           * Appends all styling-related expressions to the provided attrs array.
           *
           * @param attrs an existing array where each of the styling expressions
           * will be inserted into.
           */

        }, {
          key: "populateInitialStylingAttrs",
          value: function populateInitialStylingAttrs(attrs) {
            // [CLASS_MARKER, 'foo', 'bar', 'baz' ...]
            if (this._initialClassValues.length) {
              attrs.push(literal(1
              /* Classes */
              ));

              for (var i = 0; i < this._initialClassValues.length; i++) {
                attrs.push(literal(this._initialClassValues[i]));
              }
            } // [STYLE_MARKER, 'width', '200px', 'height', '100px', ...]


            if (this._initialStyleValues.length) {
              attrs.push(literal(2
              /* Styles */
              ));

              for (var _i6 = 0; _i6 < this._initialStyleValues.length; _i6 += 2) {
                attrs.push(literal(this._initialStyleValues[_i6]), literal(this._initialStyleValues[_i6 + 1]));
              }
            }
          }
          /**
           * Builds an instruction with all the expressions and parameters for `elementHostAttrs`.
           *
           * The instruction generation code below is used for producing the AOT statement code which is
           * responsible for registering initial styles (within a directive hostBindings' creation block),
           * as well as any of the provided attribute values, to the directive host element.
           */

        }, {
          key: "assignHostAttrs",
          value: function assignHostAttrs(attrs, definitionMap) {
            if (this._directiveExpr && (attrs.length || this._hasInitialValues)) {
              this.populateInitialStylingAttrs(attrs);
              definitionMap.set('hostAttrs', literalArr(attrs));
            }
          }
          /**
           * Builds an instruction with all the expressions and parameters for `classMap`.
           *
           * The instruction data will contain all expressions for `classMap` to function
           * which includes the `[class]` expression params.
           */

        }, {
          key: "buildClassMapInstruction",
          value: function buildClassMapInstruction(valueConverter) {
            if (this._classMapInput) {
              return this._buildMapBasedInstruction(valueConverter, true, this._classMapInput);
            }

            return null;
          }
          /**
           * Builds an instruction with all the expressions and parameters for `styleMap`.
           *
           * The instruction data will contain all expressions for `styleMap` to function
           * which includes the `[style]` expression params.
           */

        }, {
          key: "buildStyleMapInstruction",
          value: function buildStyleMapInstruction(valueConverter) {
            if (this._styleMapInput) {
              return this._buildMapBasedInstruction(valueConverter, false, this._styleMapInput);
            }

            return null;
          }
        }, {
          key: "_buildMapBasedInstruction",
          value: function _buildMapBasedInstruction(valueConverter, isClassBased, stylingInput) {
            // each styling binding value is stored in the LView
            // map-based bindings allocate two slots: one for the
            // previous binding value and another for the previous
            // className or style attribute value.
            var totalBindingSlotsRequired = MIN_STYLING_BINDING_SLOTS_REQUIRED; // these values must be outside of the update block so that they can
            // be evaluated (the AST visit call) during creation time so that any
            // pipes can be picked up in time before the template is built

            var mapValue = stylingInput.value.visit(valueConverter);
            var reference;

            if (mapValue instanceof Interpolation) {
              totalBindingSlotsRequired += mapValue.expressions.length;
              reference = isClassBased ? getClassMapInterpolationExpression(mapValue) : getStyleMapInterpolationExpression(mapValue);
            } else {
              reference = isClassBased ? Identifiers$1.classMap : Identifiers$1.styleMap;
            }

            return {
              reference: reference,
              calls: [{
                supportsInterpolation: true,
                sourceSpan: stylingInput.sourceSpan,
                allocateBindingSlots: totalBindingSlotsRequired,
                params: function params(convertFn) {
                  var convertResult = convertFn(mapValue);
                  var params = Array.isArray(convertResult) ? convertResult : [convertResult];
                  return params;
                }
              }]
            };
          }
        }, {
          key: "_buildSingleInputs",
          value: function _buildSingleInputs(reference, inputs, valueConverter, getInterpolationExpressionFn, isClassBased) {
            var instructions = [];
            inputs.forEach(function (input) {
              var previousInstruction = instructions[instructions.length - 1];
              var value = input.value.visit(valueConverter);
              var referenceForCall = reference; // each styling binding value is stored in the LView
              // but there are two values stored for each binding:
              //   1) the value itself
              //   2) an intermediate value (concatenation of style up to this point).
              //      We need to store the intermediate value so that we don't allocate
              //      the strings on each CD.

              var totalBindingSlotsRequired = MIN_STYLING_BINDING_SLOTS_REQUIRED;

              if (value instanceof Interpolation) {
                totalBindingSlotsRequired += value.expressions.length;

                if (getInterpolationExpressionFn) {
                  referenceForCall = getInterpolationExpressionFn(value);
                }
              }

              var call = {
                sourceSpan: input.sourceSpan,
                allocateBindingSlots: totalBindingSlotsRequired,
                supportsInterpolation: !!getInterpolationExpressionFn,
                params: function params(convertFn) {
                  // params => stylingProp(propName, value, suffix)
                  var params = [];
                  params.push(literal(input.name));
                  var convertResult = convertFn(value);

                  if (Array.isArray(convertResult)) {
                    params.push.apply(params, _toConsumableArray(convertResult));
                  } else {
                    params.push(convertResult);
                  } // [style.prop] bindings may use suffix values (e.g. px, em, etc...), therefore,
                  // if that is detected then we need to pass that in as an optional param.


                  if (!isClassBased && input.suffix !== null) {
                    params.push(literal(input.suffix));
                  }

                  return params;
                }
              }; // If we ended up generating a call to the same instruction as the previous styling property
              // we can chain the calls together safely to save some bytes, otherwise we have to generate
              // a separate instruction call. This is primarily a concern with interpolation instructions
              // where we may start off with one `reference`, but end up using another based on the
              // number of interpolations.

              if (previousInstruction && previousInstruction.reference === referenceForCall) {
                previousInstruction.calls.push(call);
              } else {
                instructions.push({
                  reference: referenceForCall,
                  calls: [call]
                });
              }
            });
            return instructions;
          }
        }, {
          key: "_buildClassInputs",
          value: function _buildClassInputs(valueConverter) {
            if (this._singleClassInputs) {
              return this._buildSingleInputs(Identifiers$1.classProp, this._singleClassInputs, valueConverter, null, true);
            }

            return [];
          }
        }, {
          key: "_buildStyleInputs",
          value: function _buildStyleInputs(valueConverter) {
            if (this._singleStyleInputs) {
              return this._buildSingleInputs(Identifiers$1.styleProp, this._singleStyleInputs, valueConverter, getStylePropInterpolationExpression, false);
            }

            return [];
          }
          /**
           * Constructs all instructions which contain the expressions that will be placed
           * into the update block of a template function or a directive hostBindings function.
           */

        }, {
          key: "buildUpdateLevelInstructions",
          value: function buildUpdateLevelInstructions(valueConverter) {
            var instructions = [];

            if (this.hasBindings) {
              var styleMapInstruction = this.buildStyleMapInstruction(valueConverter);

              if (styleMapInstruction) {
                instructions.push(styleMapInstruction);
              }

              var classMapInstruction = this.buildClassMapInstruction(valueConverter);

              if (classMapInstruction) {
                instructions.push(classMapInstruction);
              }

              instructions.push.apply(instructions, _toConsumableArray(this._buildStyleInputs(valueConverter)));
              instructions.push.apply(instructions, _toConsumableArray(this._buildClassInputs(valueConverter)));
            }

            return instructions;
          }
        }]);

        return StylingBuilder;
      }();

      function registerIntoMap(map, key) {
        if (!map.has(key)) {
          map.set(key, map.size);
        }
      }

      function parseProperty(name) {
        var hasOverrideFlag = false;
        var overrideIndex = name.indexOf(IMPORTANT_FLAG);

        if (overrideIndex !== -1) {
          name = overrideIndex > 0 ? name.substring(0, overrideIndex) : '';
          hasOverrideFlag = true;
        }

        var suffix = null;
        var property = name;
        var unitIndex = name.lastIndexOf('.');

        if (unitIndex > 0) {
          suffix = name.substr(unitIndex + 1);
          property = name.substring(0, unitIndex);
        }

        return {
          property: property,
          suffix: suffix,
          hasOverrideFlag: hasOverrideFlag
        };
      }
      /**
       * Gets the instruction to generate for an interpolated class map.
       * @param interpolation An Interpolation AST
       */


      function getClassMapInterpolationExpression(interpolation) {
        switch (getInterpolationArgsLength(interpolation)) {
          case 1:
            return Identifiers$1.classMap;

          case 3:
            return Identifiers$1.classMapInterpolate1;

          case 5:
            return Identifiers$1.classMapInterpolate2;

          case 7:
            return Identifiers$1.classMapInterpolate3;

          case 9:
            return Identifiers$1.classMapInterpolate4;

          case 11:
            return Identifiers$1.classMapInterpolate5;

          case 13:
            return Identifiers$1.classMapInterpolate6;

          case 15:
            return Identifiers$1.classMapInterpolate7;

          case 17:
            return Identifiers$1.classMapInterpolate8;

          default:
            return Identifiers$1.classMapInterpolateV;
        }
      }
      /**
       * Gets the instruction to generate for an interpolated style map.
       * @param interpolation An Interpolation AST
       */


      function getStyleMapInterpolationExpression(interpolation) {
        switch (getInterpolationArgsLength(interpolation)) {
          case 1:
            return Identifiers$1.styleMap;

          case 3:
            return Identifiers$1.styleMapInterpolate1;

          case 5:
            return Identifiers$1.styleMapInterpolate2;

          case 7:
            return Identifiers$1.styleMapInterpolate3;

          case 9:
            return Identifiers$1.styleMapInterpolate4;

          case 11:
            return Identifiers$1.styleMapInterpolate5;

          case 13:
            return Identifiers$1.styleMapInterpolate6;

          case 15:
            return Identifiers$1.styleMapInterpolate7;

          case 17:
            return Identifiers$1.styleMapInterpolate8;

          default:
            return Identifiers$1.styleMapInterpolateV;
        }
      }
      /**
       * Gets the instruction to generate for an interpolated style prop.
       * @param interpolation An Interpolation AST
       */


      function getStylePropInterpolationExpression(interpolation) {
        switch (getInterpolationArgsLength(interpolation)) {
          case 1:
            return Identifiers$1.styleProp;

          case 3:
            return Identifiers$1.stylePropInterpolate1;

          case 5:
            return Identifiers$1.stylePropInterpolate2;

          case 7:
            return Identifiers$1.stylePropInterpolate3;

          case 9:
            return Identifiers$1.stylePropInterpolate4;

          case 11:
            return Identifiers$1.stylePropInterpolate5;

          case 13:
            return Identifiers$1.stylePropInterpolate6;

          case 15:
            return Identifiers$1.stylePropInterpolate7;

          case 17:
            return Identifiers$1.stylePropInterpolate8;

          default:
            return Identifiers$1.stylePropInterpolateV;
        }
      }

      function normalizePropName(prop) {
        return hyphenate(prop);
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      var TokenType$1;

      (function (TokenType) {
        TokenType[TokenType["Character"] = 0] = "Character";
        TokenType[TokenType["Identifier"] = 1] = "Identifier";
        TokenType[TokenType["Keyword"] = 2] = "Keyword";
        TokenType[TokenType["String"] = 3] = "String";
        TokenType[TokenType["Operator"] = 4] = "Operator";
        TokenType[TokenType["Number"] = 5] = "Number";
        TokenType[TokenType["Error"] = 6] = "Error";
      })(TokenType$1 || (TokenType$1 = {}));

      var KEYWORDS = ['var', 'let', 'as', 'null', 'undefined', 'true', 'false', 'if', 'else', 'this'];

      var Lexer = /*#__PURE__*/function () {
        function Lexer() {
          _classCallCheck(this, Lexer);
        }

        _createClass(Lexer, [{
          key: "tokenize",
          value: function tokenize(text) {
            var scanner = new _Scanner(text);
            var tokens = [];
            var token = scanner.scanToken();

            while (token != null) {
              tokens.push(token);
              token = scanner.scanToken();
            }

            return tokens;
          }
        }]);

        return Lexer;
      }();

      var Token$1 = /*#__PURE__*/function () {
        function Token$1(index, end, type, numValue, strValue) {
          _classCallCheck(this, Token$1);

          this.index = index;
          this.end = end;
          this.type = type;
          this.numValue = numValue;
          this.strValue = strValue;
        }

        _createClass(Token$1, [{
          key: "isCharacter",
          value: function isCharacter(code) {
            return this.type == TokenType$1.Character && this.numValue == code;
          }
        }, {
          key: "isNumber",
          value: function isNumber() {
            return this.type == TokenType$1.Number;
          }
        }, {
          key: "isString",
          value: function isString() {
            return this.type == TokenType$1.String;
          }
        }, {
          key: "isOperator",
          value: function isOperator(operator) {
            return this.type == TokenType$1.Operator && this.strValue == operator;
          }
        }, {
          key: "isIdentifier",
          value: function isIdentifier() {
            return this.type == TokenType$1.Identifier;
          }
        }, {
          key: "isKeyword",
          value: function isKeyword() {
            return this.type == TokenType$1.Keyword;
          }
        }, {
          key: "isKeywordLet",
          value: function isKeywordLet() {
            return this.type == TokenType$1.Keyword && this.strValue == 'let';
          }
        }, {
          key: "isKeywordAs",
          value: function isKeywordAs() {
            return this.type == TokenType$1.Keyword && this.strValue == 'as';
          }
        }, {
          key: "isKeywordNull",
          value: function isKeywordNull() {
            return this.type == TokenType$1.Keyword && this.strValue == 'null';
          }
        }, {
          key: "isKeywordUndefined",
          value: function isKeywordUndefined() {
            return this.type == TokenType$1.Keyword && this.strValue == 'undefined';
          }
        }, {
          key: "isKeywordTrue",
          value: function isKeywordTrue() {
            return this.type == TokenType$1.Keyword && this.strValue == 'true';
          }
        }, {
          key: "isKeywordFalse",
          value: function isKeywordFalse() {
            return this.type == TokenType$1.Keyword && this.strValue == 'false';
          }
        }, {
          key: "isKeywordThis",
          value: function isKeywordThis() {
            return this.type == TokenType$1.Keyword && this.strValue == 'this';
          }
        }, {
          key: "isError",
          value: function isError() {
            return this.type == TokenType$1.Error;
          }
        }, {
          key: "toNumber",
          value: function toNumber() {
            return this.type == TokenType$1.Number ? this.numValue : -1;
          }
        }, {
          key: "toString",
          value: function toString() {
            switch (this.type) {
              case TokenType$1.Character:
              case TokenType$1.Identifier:
              case TokenType$1.Keyword:
              case TokenType$1.Operator:
              case TokenType$1.String:
              case TokenType$1.Error:
                return this.strValue;

              case TokenType$1.Number:
                return this.numValue.toString();

              default:
                return null;
            }
          }
        }]);

        return Token$1;
      }();

      function newCharacterToken(index, end, code) {
        return new Token$1(index, end, TokenType$1.Character, code, String.fromCharCode(code));
      }

      function newIdentifierToken(index, end, text) {
        return new Token$1(index, end, TokenType$1.Identifier, 0, text);
      }

      function newKeywordToken(index, end, text) {
        return new Token$1(index, end, TokenType$1.Keyword, 0, text);
      }

      function newOperatorToken(index, end, text) {
        return new Token$1(index, end, TokenType$1.Operator, 0, text);
      }

      function newStringToken(index, end, text) {
        return new Token$1(index, end, TokenType$1.String, 0, text);
      }

      function newNumberToken(index, end, n) {
        return new Token$1(index, end, TokenType$1.Number, n, '');
      }

      function newErrorToken(index, end, message) {
        return new Token$1(index, end, TokenType$1.Error, 0, message);
      }

      var EOF = new Token$1(-1, -1, TokenType$1.Character, 0, '');

      var _Scanner = /*#__PURE__*/function () {
        function _Scanner(input) {
          _classCallCheck(this, _Scanner);

          this.input = input;
          this.peek = 0;
          this.index = -1;
          this.length = input.length;
          this.advance();
        }

        _createClass(_Scanner, [{
          key: "advance",
          value: function advance() {
            this.peek = ++this.index >= this.length ? $EOF : this.input.charCodeAt(this.index);
          }
        }, {
          key: "scanToken",
          value: function scanToken() {
            var input = this.input,
                length = this.length;
            var peek = this.peek,
                index = this.index; // Skip whitespace.

            while (peek <= $SPACE) {
              if (++index >= length) {
                peek = $EOF;
                break;
              } else {
                peek = input.charCodeAt(index);
              }
            }

            this.peek = peek;
            this.index = index;

            if (index >= length) {
              return null;
            } // Handle identifiers and numbers.


            if (isIdentifierStart(peek)) return this.scanIdentifier();
            if (isDigit(peek)) return this.scanNumber(index);
            var start = index;

            switch (peek) {
              case $PERIOD:
                this.advance();
                return isDigit(this.peek) ? this.scanNumber(start) : newCharacterToken(start, this.index, $PERIOD);

              case $LPAREN:
              case $RPAREN:
              case $LBRACE:
              case $RBRACE:
              case $LBRACKET:
              case $RBRACKET:
              case $COMMA:
              case $COLON:
              case $SEMICOLON:
                return this.scanCharacter(start, peek);

              case $SQ:
              case $DQ:
                return this.scanString();

              case $HASH:
              case $PLUS:
              case $MINUS:
              case $STAR:
              case $SLASH:
              case $PERCENT:
              case $CARET:
                return this.scanOperator(start, String.fromCharCode(peek));

              case $QUESTION:
                return this.scanComplexOperator(start, '?', $PERIOD, '.');

              case $LT:
              case $GT:
                return this.scanComplexOperator(start, String.fromCharCode(peek), $EQ, '=');

              case $BANG:
              case $EQ:
                return this.scanComplexOperator(start, String.fromCharCode(peek), $EQ, '=', $EQ, '=');

              case $AMPERSAND:
                return this.scanComplexOperator(start, '&', $AMPERSAND, '&');

              case $BAR:
                return this.scanComplexOperator(start, '|', $BAR, '|');

              case $NBSP:
                while (isWhitespace(this.peek)) {
                  this.advance();
                }

                return this.scanToken();
            }

            this.advance();
            return this.error("Unexpected character [".concat(String.fromCharCode(peek), "]"), 0);
          }
        }, {
          key: "scanCharacter",
          value: function scanCharacter(start, code) {
            this.advance();
            return newCharacterToken(start, this.index, code);
          }
        }, {
          key: "scanOperator",
          value: function scanOperator(start, str) {
            this.advance();
            return newOperatorToken(start, this.index, str);
          }
          /**
           * Tokenize a 2/3 char long operator
           *
           * @param start start index in the expression
           * @param one first symbol (always part of the operator)
           * @param twoCode code point for the second symbol
           * @param two second symbol (part of the operator when the second code point matches)
           * @param threeCode code point for the third symbol
           * @param three third symbol (part of the operator when provided and matches source expression)
           */

        }, {
          key: "scanComplexOperator",
          value: function scanComplexOperator(start, one, twoCode, two, threeCode, three) {
            this.advance();
            var str = one;

            if (this.peek == twoCode) {
              this.advance();
              str += two;
            }

            if (threeCode != null && this.peek == threeCode) {
              this.advance();
              str += three;
            }

            return newOperatorToken(start, this.index, str);
          }
        }, {
          key: "scanIdentifier",
          value: function scanIdentifier() {
            var start = this.index;
            this.advance();

            while (isIdentifierPart(this.peek)) {
              this.advance();
            }

            var str = this.input.substring(start, this.index);
            return KEYWORDS.indexOf(str) > -1 ? newKeywordToken(start, this.index, str) : newIdentifierToken(start, this.index, str);
          }
        }, {
          key: "scanNumber",
          value: function scanNumber(start) {
            var simple = this.index === start;
            this.advance(); // Skip initial digit.

            while (true) {
              if (isDigit(this.peek)) {// Do nothing.
              } else if (this.peek == $PERIOD) {
                simple = false;
              } else if (isExponentStart(this.peek)) {
                this.advance();
                if (isExponentSign(this.peek)) this.advance();
                if (!isDigit(this.peek)) return this.error('Invalid exponent', -1);
                simple = false;
              } else {
                break;
              }

              this.advance();
            }

            var str = this.input.substring(start, this.index);
            var value = simple ? parseIntAutoRadix(str) : parseFloat(str);
            return newNumberToken(start, this.index, value);
          }
        }, {
          key: "scanString",
          value: function scanString() {
            var start = this.index;
            var quote = this.peek;
            this.advance(); // Skip initial quote.

            var buffer = '';
            var marker = this.index;
            var input = this.input;

            while (this.peek != quote) {
              if (this.peek == $BACKSLASH) {
                buffer += input.substring(marker, this.index);
                this.advance();
                var unescapedCode = void 0; // Workaround for TS2.1-introduced type strictness

                this.peek = this.peek;

                if (this.peek == $u) {
                  // 4 character hex code for unicode character.
                  var hex = input.substring(this.index + 1, this.index + 5);

                  if (/^[0-9a-f]+$/i.test(hex)) {
                    unescapedCode = parseInt(hex, 16);
                  } else {
                    return this.error("Invalid unicode escape [\\u".concat(hex, "]"), 0);
                  }

                  for (var i = 0; i < 5; i++) {
                    this.advance();
                  }
                } else {
                  unescapedCode = unescape(this.peek);
                  this.advance();
                }

                buffer += String.fromCharCode(unescapedCode);
                marker = this.index;
              } else if (this.peek == $EOF) {
                return this.error('Unterminated quote', 0);
              } else {
                this.advance();
              }
            }

            var last = input.substring(marker, this.index);
            this.advance(); // Skip terminating quote.

            return newStringToken(start, this.index, buffer + last);
          }
        }, {
          key: "error",
          value: function error(message, offset) {
            var position = this.index + offset;
            return newErrorToken(position, this.index, "Lexer Error: ".concat(message, " at column ").concat(position, " in expression [").concat(this.input, "]"));
          }
        }]);

        return _Scanner;
      }();

      function isIdentifierStart(code) {
        return $a <= code && code <= $z || $A <= code && code <= $Z || code == $_ || code == $$;
      }

      function isIdentifier(input) {
        if (input.length == 0) return false;
        var scanner = new _Scanner(input);
        if (!isIdentifierStart(scanner.peek)) return false;
        scanner.advance();

        while (scanner.peek !== $EOF) {
          if (!isIdentifierPart(scanner.peek)) return false;
          scanner.advance();
        }

        return true;
      }

      function isIdentifierPart(code) {
        return isAsciiLetter(code) || isDigit(code) || code == $_ || code == $$;
      }

      function isExponentStart(code) {
        return code == $e || code == $E;
      }

      function isExponentSign(code) {
        return code == $MINUS || code == $PLUS;
      }

      function isQuote(code) {
        return code === $SQ || code === $DQ || code === $BT;
      }

      function unescape(code) {
        switch (code) {
          case $n:
            return $LF;

          case $f:
            return $FF;

          case $r:
            return $CR;

          case $t:
            return $TAB;

          case $v:
            return $VTAB;

          default:
            return code;
        }
      }

      function parseIntAutoRadix(text) {
        var result = parseInt(text);

        if (isNaN(result)) {
          throw new Error('Invalid integer literal when parsing ' + text);
        }

        return result;
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      var SplitInterpolation = function SplitInterpolation(strings, expressions, offsets) {
        _classCallCheck(this, SplitInterpolation);

        this.strings = strings;
        this.expressions = expressions;
        this.offsets = offsets;
      };

      var TemplateBindingParseResult = function TemplateBindingParseResult(templateBindings, warnings, errors) {
        _classCallCheck(this, TemplateBindingParseResult);

        this.templateBindings = templateBindings;
        this.warnings = warnings;
        this.errors = errors;
      };

      var Parser$1 = /*#__PURE__*/function () {
        function Parser$1(_lexer) {
          _classCallCheck(this, Parser$1);

          this._lexer = _lexer;
          this.errors = [];
          this.simpleExpressionChecker = SimpleExpressionChecker;
        }

        _createClass(Parser$1, [{
          key: "parseAction",
          value: function parseAction(input, location, absoluteOffset) {
            var interpolationConfig = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : DEFAULT_INTERPOLATION_CONFIG;

            this._checkNoInterpolation(input, location, interpolationConfig);

            var sourceToLex = this._stripComments(input);

            var tokens = this._lexer.tokenize(this._stripComments(input));

            var ast = new _ParseAST(input, location, absoluteOffset, tokens, sourceToLex.length, true, this.errors, input.length - sourceToLex.length).parseChain();
            return new ASTWithSource(ast, input, location, absoluteOffset, this.errors);
          }
        }, {
          key: "parseBinding",
          value: function parseBinding(input, location, absoluteOffset) {
            var interpolationConfig = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : DEFAULT_INTERPOLATION_CONFIG;

            var ast = this._parseBindingAst(input, location, absoluteOffset, interpolationConfig);

            return new ASTWithSource(ast, input, location, absoluteOffset, this.errors);
          }
        }, {
          key: "checkSimpleExpression",
          value: function checkSimpleExpression(ast) {
            var checker = new this.simpleExpressionChecker();
            ast.visit(checker);
            return checker.errors;
          }
        }, {
          key: "parseSimpleBinding",
          value: function parseSimpleBinding(input, location, absoluteOffset) {
            var interpolationConfig = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : DEFAULT_INTERPOLATION_CONFIG;

            var ast = this._parseBindingAst(input, location, absoluteOffset, interpolationConfig);

            var errors = this.checkSimpleExpression(ast);

            if (errors.length > 0) {
              this._reportError("Host binding expression cannot contain ".concat(errors.join(' ')), input, location);
            }

            return new ASTWithSource(ast, input, location, absoluteOffset, this.errors);
          }
        }, {
          key: "_reportError",
          value: function _reportError(message, input, errLocation, ctxLocation) {
            this.errors.push(new ParserError(message, input, errLocation, ctxLocation));
          }
        }, {
          key: "_parseBindingAst",
          value: function _parseBindingAst(input, location, absoluteOffset, interpolationConfig) {
            // Quotes expressions use 3rd-party expression language. We don't want to use
            // our lexer or parser for that, so we check for that ahead of time.
            var quote = this._parseQuote(input, location, absoluteOffset);

            if (quote != null) {
              return quote;
            }

            this._checkNoInterpolation(input, location, interpolationConfig);

            var sourceToLex = this._stripComments(input);

            var tokens = this._lexer.tokenize(sourceToLex);

            return new _ParseAST(input, location, absoluteOffset, tokens, sourceToLex.length, false, this.errors, input.length - sourceToLex.length).parseChain();
          }
        }, {
          key: "_parseQuote",
          value: function _parseQuote(input, location, absoluteOffset) {
            if (input == null) return null;
            var prefixSeparatorIndex = input.indexOf(':');
            if (prefixSeparatorIndex == -1) return null;
            var prefix = input.substring(0, prefixSeparatorIndex).trim();
            if (!isIdentifier(prefix)) return null;
            var uninterpretedExpression = input.substring(prefixSeparatorIndex + 1);
            var span = new ParseSpan(0, input.length);
            return new Quote(span, span.toAbsolute(absoluteOffset), prefix, uninterpretedExpression, location);
          }
          /**
           * Parse microsyntax template expression and return a list of bindings or
           * parsing errors in case the given expression is invalid.
           *
           * For example,
           * ```
           *   <div *ngFor="let item of items">
           *         ^      ^ absoluteValueOffset for `templateValue`
           *         absoluteKeyOffset for `templateKey`
           * ```
           * contains three bindings:
           * 1. ngFor -> null
           * 2. item -> NgForOfContext.$implicit
           * 3. ngForOf -> items
           *
           * This is apparent from the de-sugared template:
           * ```
           *   <ng-template ngFor let-item [ngForOf]="items">
           * ```
           *
           * @param templateKey name of directive, without the * prefix. For example: ngIf, ngFor
           * @param templateValue RHS of the microsyntax attribute
           * @param templateUrl template filename if it's external, component filename if it's inline
           * @param absoluteKeyOffset start of the `templateKey`
           * @param absoluteValueOffset start of the `templateValue`
           */

        }, {
          key: "parseTemplateBindings",
          value: function parseTemplateBindings(templateKey, templateValue, templateUrl, absoluteKeyOffset, absoluteValueOffset) {
            var tokens = this._lexer.tokenize(templateValue);

            var parser = new _ParseAST(templateValue, templateUrl, absoluteValueOffset, tokens, templateValue.length, false
            /* parseAction */
            , this.errors, 0
            /* relative offset */
            );
            return parser.parseTemplateBindings({
              source: templateKey,
              span: new AbsoluteSourceSpan(absoluteKeyOffset, absoluteKeyOffset + templateKey.length)
            });
          }
        }, {
          key: "parseInterpolation",
          value: function parseInterpolation(input, location, absoluteOffset) {
            var interpolationConfig = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : DEFAULT_INTERPOLATION_CONFIG;

            var _this$splitInterpolat = this.splitInterpolation(input, location, interpolationConfig),
                strings = _this$splitInterpolat.strings,
                expressions = _this$splitInterpolat.expressions,
                offsets = _this$splitInterpolat.offsets;

            if (expressions.length === 0) return null;
            var expressionNodes = [];

            for (var i = 0; i < expressions.length; ++i) {
              var expressionText = expressions[i].text;

              var sourceToLex = this._stripComments(expressionText);

              var tokens = this._lexer.tokenize(sourceToLex);

              var ast = new _ParseAST(input, location, absoluteOffset, tokens, sourceToLex.length, false, this.errors, offsets[i] + (expressionText.length - sourceToLex.length)).parseChain();
              expressionNodes.push(ast);
            }

            return this.createInterpolationAst(strings.map(function (s) {
              return s.text;
            }), expressionNodes, input, location, absoluteOffset);
          }
          /**
           * Similar to `parseInterpolation`, but treats the provided string as a single expression
           * element that would normally appear within the interpolation prefix and suffix (`{{` and `}}`).
           * This is used for parsing the switch expression in ICUs.
           */

        }, {
          key: "parseInterpolationExpression",
          value: function parseInterpolationExpression(expression, location, absoluteOffset) {
            var sourceToLex = this._stripComments(expression);

            var tokens = this._lexer.tokenize(sourceToLex);

            var ast = new _ParseAST(expression, location, absoluteOffset, tokens, sourceToLex.length,
            /* parseAction */
            false, this.errors, 0).parseChain();
            var strings = ['', '']; // The prefix and suffix strings are both empty

            return this.createInterpolationAst(strings, [ast], expression, location, absoluteOffset);
          }
        }, {
          key: "createInterpolationAst",
          value: function createInterpolationAst(strings, expressions, input, location, absoluteOffset) {
            var span = new ParseSpan(0, input.length);
            var interpolation = new Interpolation(span, span.toAbsolute(absoluteOffset), strings, expressions);
            return new ASTWithSource(interpolation, input, location, absoluteOffset, this.errors);
          }
          /**
           * Splits a string of text into "raw" text segments and expressions present in interpolations in
           * the string.
           * Returns `null` if there are no interpolations, otherwise a
           * `SplitInterpolation` with splits that look like
           *   <raw text> <expression> <raw text> ... <raw text> <expression> <raw text>
           */

        }, {
          key: "splitInterpolation",
          value: function splitInterpolation(input, location) {
            var interpolationConfig = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : DEFAULT_INTERPOLATION_CONFIG;
            var strings = [];
            var expressions = [];
            var offsets = [];
            var i = 0;
            var atInterpolation = false;
            var extendLastString = false;
            var interpStart = interpolationConfig.start,
                interpEnd = interpolationConfig.end;

            while (i < input.length) {
              if (!atInterpolation) {
                // parse until starting {{
                var _start4 = i;
                i = input.indexOf(interpStart, i);

                if (i === -1) {
                  i = input.length;
                }

                var text = input.substring(_start4, i);
                strings.push({
                  text: text,
                  start: _start4,
                  end: i
                });
                atInterpolation = true;
              } else {
                // parse from starting {{ to ending }} while ignoring content inside quotes.
                var fullStart = i;
                var exprStart = fullStart + interpStart.length;

                var exprEnd = this._getInterpolationEndIndex(input, interpEnd, exprStart);

                if (exprEnd === -1) {
                  // Could not find the end of the interpolation; do not parse an expression.
                  // Instead we should extend the content on the last raw string.
                  atInterpolation = false;
                  extendLastString = true;
                  break;
                }

                var fullEnd = exprEnd + interpEnd.length;

                var _text = input.substring(exprStart, exprEnd);

                if (_text.trim().length === 0) {
                  this._reportError('Blank expressions are not allowed in interpolated strings', input, "at column ".concat(i, " in"), location);
                }

                expressions.push({
                  text: _text,
                  start: fullStart,
                  end: fullEnd
                });
                offsets.push(exprStart);
                i = fullEnd;
                atInterpolation = false;
              }
            }

            if (!atInterpolation) {
              // If we are now at a text section, add the remaining content as a raw string.
              if (extendLastString) {
                var piece = strings[strings.length - 1];
                piece.text += input.substring(i);
                piece.end = input.length;
              } else {
                strings.push({
                  text: input.substring(i),
                  start: i,
                  end: input.length
                });
              }
            }

            return new SplitInterpolation(strings, expressions, offsets);
          }
        }, {
          key: "wrapLiteralPrimitive",
          value: function wrapLiteralPrimitive(input, location, absoluteOffset) {
            var span = new ParseSpan(0, input == null ? 0 : input.length);
            return new ASTWithSource(new LiteralPrimitive(span, span.toAbsolute(absoluteOffset), input), input, location, absoluteOffset, this.errors);
          }
        }, {
          key: "_stripComments",
          value: function _stripComments(input) {
            var i = this._commentStart(input);

            return i != null ? input.substring(0, i).trim() : input;
          }
        }, {
          key: "_commentStart",
          value: function _commentStart(input) {
            var outerQuote = null;

            for (var i = 0; i < input.length - 1; i++) {
              var _char7 = input.charCodeAt(i);

              var nextChar = input.charCodeAt(i + 1);
              if (_char7 === $SLASH && nextChar == $SLASH && outerQuote == null) return i;

              if (outerQuote === _char7) {
                outerQuote = null;
              } else if (outerQuote == null && isQuote(_char7)) {
                outerQuote = _char7;
              }
            }

            return null;
          }
        }, {
          key: "_checkNoInterpolation",
          value: function _checkNoInterpolation(input, location, _ref13) {
            var start = _ref13.start,
                end = _ref13.end;
            var startIndex = -1;
            var endIndex = -1;

            var _iterator12 = _createForOfIteratorHelper(this._forEachUnquotedChar(input, 0)),
                _step12;

            try {
              for (_iterator12.s(); !(_step12 = _iterator12.n()).done;) {
                var charIndex = _step12.value;

                if (startIndex === -1) {
                  if (input.startsWith(start)) {
                    startIndex = charIndex;
                  }
                } else {
                  endIndex = this._getInterpolationEndIndex(input, end, charIndex);

                  if (endIndex > -1) {
                    break;
                  }
                }
              }
            } catch (err) {
              _iterator12.e(err);
            } finally {
              _iterator12.f();
            }

            if (startIndex > -1 && endIndex > -1) {
              this._reportError("Got interpolation (".concat(start).concat(end, ") where expression was expected"), input, "at column ".concat(startIndex, " in"), location);
            }
          }
          /**
           * Finds the index of the end of an interpolation expression
           * while ignoring comments and quoted content.
           */

        }, {
          key: "_getInterpolationEndIndex",
          value: function _getInterpolationEndIndex(input, expressionEnd, start) {
            var _iterator13 = _createForOfIteratorHelper(this._forEachUnquotedChar(input, start)),
                _step13;

            try {
              for (_iterator13.s(); !(_step13 = _iterator13.n()).done;) {
                var charIndex = _step13.value;

                if (input.startsWith(expressionEnd, charIndex)) {
                  return charIndex;
                } // Nothing else in the expression matters after we've
                // hit a comment so look directly for the end token.


                if (input.startsWith('//', charIndex)) {
                  return input.indexOf(expressionEnd, charIndex);
                }
              }
            } catch (err) {
              _iterator13.e(err);
            } finally {
              _iterator13.f();
            }

            return -1;
          }
          /**
           * Generator used to iterate over the character indexes of a string that are outside of quotes.
           * @param input String to loop through.
           * @param start Index within the string at which to start.
           */

        }, {
          key: "_forEachUnquotedChar",
          value:
          /*#__PURE__*/
          regeneratorRuntime.mark(function _forEachUnquotedChar(input, start) {
            var currentQuote, escapeCount, i, _char8;

            return regeneratorRuntime.wrap(function _forEachUnquotedChar$(_context2) {
              while (1) {
                switch (_context2.prev = _context2.next) {
                  case 0:
                    currentQuote = null;
                    escapeCount = 0;
                    i = start;

                  case 3:
                    if (!(i < input.length)) {
                      _context2.next = 16;
                      break;
                    }

                    _char8 = input[i]; // Skip the characters inside quotes. Note that we only care about the outer-most
                    // quotes matching up and we need to account for escape characters.

                    if (!(isQuote(input.charCodeAt(i)) && (currentQuote === null || currentQuote === _char8) && escapeCount % 2 === 0)) {
                      _context2.next = 9;
                      break;
                    }

                    currentQuote = currentQuote === null ? _char8 : null;
                    _context2.next = 12;
                    break;

                  case 9:
                    if (!(currentQuote === null)) {
                      _context2.next = 12;
                      break;
                    }

                    _context2.next = 12;
                    return i;

                  case 12:
                    escapeCount = _char8 === '\\' ? escapeCount + 1 : 0;

                  case 13:
                    i++;
                    _context2.next = 3;
                    break;

                  case 16:
                  case "end":
                    return _context2.stop();
                }
              }
            }, _forEachUnquotedChar);
          })
        }]);

        return Parser$1;
      }();

      var IvyParser = /*#__PURE__*/function (_Parser$) {
        _inherits(IvyParser, _Parser$);

        var _super95 = _createSuper(IvyParser);

        function IvyParser() {
          var _this158;

          _classCallCheck(this, IvyParser);

          _this158 = _super95.apply(this, arguments);
          _this158.simpleExpressionChecker = IvySimpleExpressionChecker;
          return _this158;
        }

        return IvyParser;
      }(Parser$1);
      /** Describes a stateful context an expression parser is in. */


      var ParseContextFlags;

      (function (ParseContextFlags) {
        ParseContextFlags[ParseContextFlags["None"] = 0] = "None";
        /**
         * A Writable context is one in which a value may be written to an lvalue.
         * For example, after we see a property access, we may expect a write to the
         * property via the "=" operator.
         *   prop
         *        ^ possible "=" after
         */

        ParseContextFlags[ParseContextFlags["Writable"] = 1] = "Writable";
      })(ParseContextFlags || (ParseContextFlags = {}));

      var _ParseAST = /*#__PURE__*/function () {
        function _ParseAST(input, location, absoluteOffset, tokens, inputLength, parseAction, errors, offset) {
          _classCallCheck(this, _ParseAST);

          this.input = input;
          this.location = location;
          this.absoluteOffset = absoluteOffset;
          this.tokens = tokens;
          this.inputLength = inputLength;
          this.parseAction = parseAction;
          this.errors = errors;
          this.offset = offset;
          this.rparensExpected = 0;
          this.rbracketsExpected = 0;
          this.rbracesExpected = 0;
          this.context = ParseContextFlags.None; // Cache of expression start and input indeces to the absolute source span they map to, used to
          // prevent creating superfluous source spans in `sourceSpan`.
          // A serial of the expression start and input index is used for mapping because both are stateful
          // and may change for subsequent expressions visited by the parser.

          this.sourceSpanCache = new Map();
          this.index = 0;
        }

        _createClass(_ParseAST, [{
          key: "peek",
          value: function peek(offset) {
            var i = this.index + offset;
            return i < this.tokens.length ? this.tokens[i] : EOF;
          }
        }, {
          key: "next",
          get: function get() {
            return this.peek(0);
          }
          /** Whether all the parser input has been processed. */

        }, {
          key: "atEOF",
          get: function get() {
            return this.index >= this.tokens.length;
          }
          /**
           * Index of the next token to be processed, or the end of the last token if all have been
           * processed.
           */

        }, {
          key: "inputIndex",
          get: function get() {
            return this.atEOF ? this.currentEndIndex : this.next.index + this.offset;
          }
          /**
           * End index of the last processed token, or the start of the first token if none have been
           * processed.
           */

        }, {
          key: "currentEndIndex",
          get: function get() {
            if (this.index > 0) {
              var curToken = this.peek(-1);
              return curToken.end + this.offset;
            } // No tokens have been processed yet; return the next token's start or the length of the input
            // if there is no token.


            if (this.tokens.length === 0) {
              return this.inputLength + this.offset;
            }

            return this.next.index + this.offset;
          }
          /**
           * Returns the absolute offset of the start of the current token.
           */

        }, {
          key: "currentAbsoluteOffset",
          get: function get() {
            return this.absoluteOffset + this.inputIndex;
          }
          /**
           * Retrieve a `ParseSpan` from `start` to the current position (or to `artificialEndIndex` if
           * provided).
           *
           * @param start Position from which the `ParseSpan` will start.
           * @param artificialEndIndex Optional ending index to be used if provided (and if greater than the
           *     natural ending index)
           */

        }, {
          key: "span",
          value: function span(start, artificialEndIndex) {
            var endIndex = this.currentEndIndex;

            if (artificialEndIndex !== undefined && artificialEndIndex > this.currentEndIndex) {
              endIndex = artificialEndIndex;
            }

            return new ParseSpan(start, endIndex);
          }
        }, {
          key: "sourceSpan",
          value: function sourceSpan(start, artificialEndIndex) {
            var serial = "".concat(start, "@").concat(this.inputIndex, ":").concat(artificialEndIndex);

            if (!this.sourceSpanCache.has(serial)) {
              this.sourceSpanCache.set(serial, this.span(start, artificialEndIndex).toAbsolute(this.absoluteOffset));
            }

            return this.sourceSpanCache.get(serial);
          }
        }, {
          key: "advance",
          value: function advance() {
            this.index++;
          }
          /**
           * Executes a callback in the provided context.
           */

        }, {
          key: "withContext",
          value: function withContext(context, cb) {
            this.context |= context;
            var ret = cb();
            this.context ^= context;
            return ret;
          }
        }, {
          key: "consumeOptionalCharacter",
          value: function consumeOptionalCharacter(code) {
            if (this.next.isCharacter(code)) {
              this.advance();
              return true;
            } else {
              return false;
            }
          }
        }, {
          key: "peekKeywordLet",
          value: function peekKeywordLet() {
            return this.next.isKeywordLet();
          }
        }, {
          key: "peekKeywordAs",
          value: function peekKeywordAs() {
            return this.next.isKeywordAs();
          }
          /**
           * Consumes an expected character, otherwise emits an error about the missing expected character
           * and skips over the token stream until reaching a recoverable point.
           *
           * See `this.error` and `this.skip` for more details.
           */

        }, {
          key: "expectCharacter",
          value: function expectCharacter(code) {
            if (this.consumeOptionalCharacter(code)) return;
            this.error("Missing expected ".concat(String.fromCharCode(code)));
          }
        }, {
          key: "consumeOptionalOperator",
          value: function consumeOptionalOperator(op) {
            if (this.next.isOperator(op)) {
              this.advance();
              return true;
            } else {
              return false;
            }
          }
        }, {
          key: "expectOperator",
          value: function expectOperator(operator) {
            if (this.consumeOptionalOperator(operator)) return;
            this.error("Missing expected operator ".concat(operator));
          }
        }, {
          key: "prettyPrintToken",
          value: function prettyPrintToken(tok) {
            return tok === EOF ? 'end of input' : "token ".concat(tok);
          }
        }, {
          key: "expectIdentifierOrKeyword",
          value: function expectIdentifierOrKeyword() {
            var n = this.next;

            if (!n.isIdentifier() && !n.isKeyword()) {
              this.error("Unexpected ".concat(this.prettyPrintToken(n), ", expected identifier or keyword"));
              return null;
            }

            this.advance();
            return n.toString();
          }
        }, {
          key: "expectIdentifierOrKeywordOrString",
          value: function expectIdentifierOrKeywordOrString() {
            var n = this.next;

            if (!n.isIdentifier() && !n.isKeyword() && !n.isString()) {
              this.error("Unexpected ".concat(this.prettyPrintToken(n), ", expected identifier, keyword, or string"));
              return '';
            }

            this.advance();
            return n.toString();
          }
        }, {
          key: "parseChain",
          value: function parseChain() {
            var exprs = [];
            var start = this.inputIndex;

            while (this.index < this.tokens.length) {
              var expr = this.parsePipe();
              exprs.push(expr);

              if (this.consumeOptionalCharacter($SEMICOLON)) {
                if (!this.parseAction) {
                  this.error('Binding expression cannot contain chained expression');
                }

                while (this.consumeOptionalCharacter($SEMICOLON)) {} // read all semicolons

              } else if (this.index < this.tokens.length) {
                this.error("Unexpected token '".concat(this.next, "'"));
              }
            }

            if (exprs.length == 0) {
              // We have no expressions so create an empty expression that spans the entire input length
              var artificialStart = this.offset;
              var artificialEnd = this.offset + this.inputLength;
              return new EmptyExpr(this.span(artificialStart, artificialEnd), this.sourceSpan(artificialStart, artificialEnd));
            }

            if (exprs.length == 1) return exprs[0];
            return new Chain(this.span(start), this.sourceSpan(start), exprs);
          }
        }, {
          key: "parsePipe",
          value: function parsePipe() {
            var start = this.inputIndex;
            var result = this.parseExpression();

            if (this.consumeOptionalOperator('|')) {
              if (this.parseAction) {
                this.error('Cannot have a pipe in an action expression');
              }

              do {
                var nameStart = this.inputIndex;
                var nameId = this.expectIdentifierOrKeyword();
                var nameSpan = void 0;
                var fullSpanEnd = undefined;

                if (nameId !== null) {
                  nameSpan = this.sourceSpan(nameStart);
                } else {
                  // No valid identifier was found, so we'll assume an empty pipe name ('').
                  nameId = ''; // However, there may have been whitespace present between the pipe character and the next
                  // token in the sequence (or the end of input). We want to track this whitespace so that
                  // the `BindingPipe` we produce covers not just the pipe character, but any trailing
                  // whitespace beyond it. Another way of thinking about this is that the zero-length name
                  // is assumed to be at the end of any whitespace beyond the pipe character.
                  //
                  // Therefore, we push the end of the `ParseSpan` for this pipe all the way up to the
                  // beginning of the next token, or until the end of input if the next token is EOF.

                  fullSpanEnd = this.next.index !== -1 ? this.next.index : this.inputLength + this.offset; // The `nameSpan` for an empty pipe name is zero-length at the end of any whitespace
                  // beyond the pipe character.

                  nameSpan = new ParseSpan(fullSpanEnd, fullSpanEnd).toAbsolute(this.absoluteOffset);
                }

                var args = [];

                while (this.consumeOptionalCharacter($COLON)) {
                  args.push(this.parseExpression()); // If there are additional expressions beyond the name, then the artificial end for the
                  // name is no longer relevant.
                }

                result = new BindingPipe(this.span(start), this.sourceSpan(start, fullSpanEnd), result, nameId, args, nameSpan);
              } while (this.consumeOptionalOperator('|'));
            }

            return result;
          }
        }, {
          key: "parseExpression",
          value: function parseExpression() {
            return this.parseConditional();
          }
        }, {
          key: "parseConditional",
          value: function parseConditional() {
            var start = this.inputIndex;
            var result = this.parseLogicalOr();

            if (this.consumeOptionalOperator('?')) {
              var yes = this.parsePipe();
              var no;

              if (!this.consumeOptionalCharacter($COLON)) {
                var end = this.inputIndex;
                var expression = this.input.substring(start, end);
                this.error("Conditional expression ".concat(expression, " requires all 3 expressions"));
                no = new EmptyExpr(this.span(start), this.sourceSpan(start));
              } else {
                no = this.parsePipe();
              }

              return new Conditional(this.span(start), this.sourceSpan(start), result, yes, no);
            } else {
              return result;
            }
          }
        }, {
          key: "parseLogicalOr",
          value: function parseLogicalOr() {
            // '||'
            var start = this.inputIndex;
            var result = this.parseLogicalAnd();

            while (this.consumeOptionalOperator('||')) {
              var right = this.parseLogicalAnd();
              result = new Binary(this.span(start), this.sourceSpan(start), '||', result, right);
            }

            return result;
          }
        }, {
          key: "parseLogicalAnd",
          value: function parseLogicalAnd() {
            // '&&'
            var start = this.inputIndex;
            var result = this.parseEquality();

            while (this.consumeOptionalOperator('&&')) {
              var right = this.parseEquality();
              result = new Binary(this.span(start), this.sourceSpan(start), '&&', result, right);
            }

            return result;
          }
        }, {
          key: "parseEquality",
          value: function parseEquality() {
            // '==','!=','===','!=='
            var start = this.inputIndex;
            var result = this.parseRelational();

            while (this.next.type == TokenType$1.Operator) {
              var operator = this.next.strValue;

              switch (operator) {
                case '==':
                case '===':
                case '!=':
                case '!==':
                  this.advance();
                  var right = this.parseRelational();
                  result = new Binary(this.span(start), this.sourceSpan(start), operator, result, right);
                  continue;
              }

              break;
            }

            return result;
          }
        }, {
          key: "parseRelational",
          value: function parseRelational() {
            // '<', '>', '<=', '>='
            var start = this.inputIndex;
            var result = this.parseAdditive();

            while (this.next.type == TokenType$1.Operator) {
              var operator = this.next.strValue;

              switch (operator) {
                case '<':
                case '>':
                case '<=':
                case '>=':
                  this.advance();
                  var right = this.parseAdditive();
                  result = new Binary(this.span(start), this.sourceSpan(start), operator, result, right);
                  continue;
              }

              break;
            }

            return result;
          }
        }, {
          key: "parseAdditive",
          value: function parseAdditive() {
            // '+', '-'
            var start = this.inputIndex;
            var result = this.parseMultiplicative();

            while (this.next.type == TokenType$1.Operator) {
              var operator = this.next.strValue;

              switch (operator) {
                case '+':
                case '-':
                  this.advance();
                  var right = this.parseMultiplicative();
                  result = new Binary(this.span(start), this.sourceSpan(start), operator, result, right);
                  continue;
              }

              break;
            }

            return result;
          }
        }, {
          key: "parseMultiplicative",
          value: function parseMultiplicative() {
            // '*', '%', '/'
            var start = this.inputIndex;
            var result = this.parsePrefix();

            while (this.next.type == TokenType$1.Operator) {
              var operator = this.next.strValue;

              switch (operator) {
                case '*':
                case '%':
                case '/':
                  this.advance();
                  var right = this.parsePrefix();
                  result = new Binary(this.span(start), this.sourceSpan(start), operator, result, right);
                  continue;
              }

              break;
            }

            return result;
          }
        }, {
          key: "parsePrefix",
          value: function parsePrefix() {
            if (this.next.type == TokenType$1.Operator) {
              var _start5 = this.inputIndex;
              var operator = this.next.strValue;
              var result;

              switch (operator) {
                case '+':
                  this.advance();
                  result = this.parsePrefix();
                  return Unary.createPlus(this.span(_start5), this.sourceSpan(_start5), result);

                case '-':
                  this.advance();
                  result = this.parsePrefix();
                  return Unary.createMinus(this.span(_start5), this.sourceSpan(_start5), result);

                case '!':
                  this.advance();
                  result = this.parsePrefix();
                  return new PrefixNot(this.span(_start5), this.sourceSpan(_start5), result);
              }
            }

            return this.parseCallChain();
          }
        }, {
          key: "parseCallChain",
          value: function parseCallChain() {
            var _this159 = this;

            var start = this.inputIndex;
            var result = this.parsePrimary();

            while (true) {
              if (this.consumeOptionalCharacter($PERIOD)) {
                result = this.parseAccessMemberOrMethodCall(result, start, false);
              } else if (this.consumeOptionalOperator('?.')) {
                result = this.parseAccessMemberOrMethodCall(result, start, true);
              } else if (this.consumeOptionalCharacter($LBRACKET)) {
                this.withContext(ParseContextFlags.Writable, function () {
                  _this159.rbracketsExpected++;

                  var key = _this159.parsePipe();

                  if (key instanceof EmptyExpr) {
                    _this159.error("Key access cannot be empty");
                  }

                  _this159.rbracketsExpected--;

                  _this159.expectCharacter($RBRACKET);

                  if (_this159.consumeOptionalOperator('=')) {
                    var value = _this159.parseConditional();

                    result = new KeyedWrite(_this159.span(start), _this159.sourceSpan(start), result, key, value);
                  } else {
                    result = new KeyedRead(_this159.span(start), _this159.sourceSpan(start), result, key);
                  }
                });
              } else if (this.consumeOptionalCharacter($LPAREN)) {
                this.rparensExpected++;
                var args = this.parseCallArguments();
                this.rparensExpected--;
                this.expectCharacter($RPAREN);
                result = new FunctionCall(this.span(start), this.sourceSpan(start), result, args);
              } else if (this.consumeOptionalOperator('!')) {
                result = new NonNullAssert(this.span(start), this.sourceSpan(start), result);
              } else {
                return result;
              }
            }
          }
        }, {
          key: "parsePrimary",
          value: function parsePrimary() {
            var start = this.inputIndex;

            if (this.consumeOptionalCharacter($LPAREN)) {
              this.rparensExpected++;
              var result = this.parsePipe();
              this.rparensExpected--;
              this.expectCharacter($RPAREN);
              return result;
            } else if (this.next.isKeywordNull()) {
              this.advance();
              return new LiteralPrimitive(this.span(start), this.sourceSpan(start), null);
            } else if (this.next.isKeywordUndefined()) {
              this.advance();
              return new LiteralPrimitive(this.span(start), this.sourceSpan(start), void 0);
            } else if (this.next.isKeywordTrue()) {
              this.advance();
              return new LiteralPrimitive(this.span(start), this.sourceSpan(start), true);
            } else if (this.next.isKeywordFalse()) {
              this.advance();
              return new LiteralPrimitive(this.span(start), this.sourceSpan(start), false);
            } else if (this.next.isKeywordThis()) {
              this.advance();
              return new ThisReceiver(this.span(start), this.sourceSpan(start));
            } else if (this.consumeOptionalCharacter($LBRACKET)) {
              this.rbracketsExpected++;
              var elements = this.parseExpressionList($RBRACKET);
              this.rbracketsExpected--;
              this.expectCharacter($RBRACKET);
              return new LiteralArray(this.span(start), this.sourceSpan(start), elements);
            } else if (this.next.isCharacter($LBRACE)) {
              return this.parseLiteralMap();
            } else if (this.next.isIdentifier()) {
              return this.parseAccessMemberOrMethodCall(new ImplicitReceiver(this.span(start), this.sourceSpan(start)), start, false);
            } else if (this.next.isNumber()) {
              var value = this.next.toNumber();
              this.advance();
              return new LiteralPrimitive(this.span(start), this.sourceSpan(start), value);
            } else if (this.next.isString()) {
              var literalValue = this.next.toString();
              this.advance();
              return new LiteralPrimitive(this.span(start), this.sourceSpan(start), literalValue);
            } else if (this.index >= this.tokens.length) {
              this.error("Unexpected end of expression: ".concat(this.input));
              return new EmptyExpr(this.span(start), this.sourceSpan(start));
            } else {
              this.error("Unexpected token ".concat(this.next));
              return new EmptyExpr(this.span(start), this.sourceSpan(start));
            }
          }
        }, {
          key: "parseExpressionList",
          value: function parseExpressionList(terminator) {
            var result = [];

            do {
              if (!this.next.isCharacter(terminator)) {
                result.push(this.parsePipe());
              } else {
                break;
              }
            } while (this.consumeOptionalCharacter($COMMA));

            return result;
          }
        }, {
          key: "parseLiteralMap",
          value: function parseLiteralMap() {
            var keys = [];
            var values = [];
            var start = this.inputIndex;
            this.expectCharacter($LBRACE);

            if (!this.consumeOptionalCharacter($RBRACE)) {
              this.rbracesExpected++;

              do {
                var quoted = this.next.isString();
                var key = this.expectIdentifierOrKeywordOrString();
                keys.push({
                  key: key,
                  quoted: quoted
                });
                this.expectCharacter($COLON);
                values.push(this.parsePipe());
              } while (this.consumeOptionalCharacter($COMMA));

              this.rbracesExpected--;
              this.expectCharacter($RBRACE);
            }

            return new LiteralMap(this.span(start), this.sourceSpan(start), keys, values);
          }
        }, {
          key: "parseAccessMemberOrMethodCall",
          value: function parseAccessMemberOrMethodCall(receiver, start) {
            var _this160 = this;

            var isSafe = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
            var nameStart = this.inputIndex;
            var id = this.withContext(ParseContextFlags.Writable, function () {
              var _a;

              var id = (_a = _this160.expectIdentifierOrKeyword()) !== null && _a !== void 0 ? _a : '';

              if (id.length === 0) {
                _this160.error("Expected identifier for property access", receiver.span.end);
              }

              return id;
            });
            var nameSpan = this.sourceSpan(nameStart);

            if (this.consumeOptionalCharacter($LPAREN)) {
              this.rparensExpected++;
              var args = this.parseCallArguments();
              this.expectCharacter($RPAREN);
              this.rparensExpected--;
              var span = this.span(start);
              var sourceSpan = this.sourceSpan(start);
              return isSafe ? new SafeMethodCall(span, sourceSpan, nameSpan, receiver, id, args) : new MethodCall(span, sourceSpan, nameSpan, receiver, id, args);
            } else {
              if (isSafe) {
                if (this.consumeOptionalOperator('=')) {
                  this.error('The \'?.\' operator cannot be used in the assignment');
                  return new EmptyExpr(this.span(start), this.sourceSpan(start));
                } else {
                  return new SafePropertyRead(this.span(start), this.sourceSpan(start), nameSpan, receiver, id);
                }
              } else {
                if (this.consumeOptionalOperator('=')) {
                  if (!this.parseAction) {
                    this.error('Bindings cannot contain assignments');
                    return new EmptyExpr(this.span(start), this.sourceSpan(start));
                  }

                  var value = this.parseConditional();
                  return new PropertyWrite(this.span(start), this.sourceSpan(start), nameSpan, receiver, id, value);
                } else {
                  return new PropertyRead(this.span(start), this.sourceSpan(start), nameSpan, receiver, id);
                }
              }
            }
          }
        }, {
          key: "parseCallArguments",
          value: function parseCallArguments() {
            if (this.next.isCharacter($RPAREN)) return [];
            var positionals = [];

            do {
              positionals.push(this.parsePipe());
            } while (this.consumeOptionalCharacter($COMMA));

            return positionals;
          }
          /**
           * Parses an identifier, a keyword, a string with an optional `-` in between,
           * and returns the string along with its absolute source span.
           */

        }, {
          key: "expectTemplateBindingKey",
          value: function expectTemplateBindingKey() {
            var result = '';
            var operatorFound = false;
            var start = this.currentAbsoluteOffset;

            do {
              result += this.expectIdentifierOrKeywordOrString();
              operatorFound = this.consumeOptionalOperator('-');

              if (operatorFound) {
                result += '-';
              }
            } while (operatorFound);

            return {
              source: result,
              span: new AbsoluteSourceSpan(start, start + result.length)
            };
          }
          /**
           * Parse microsyntax template expression and return a list of bindings or
           * parsing errors in case the given expression is invalid.
           *
           * For example,
           * ```
           *   <div *ngFor="let item of items; index as i; trackBy: func">
           * ```
           * contains five bindings:
           * 1. ngFor -> null
           * 2. item -> NgForOfContext.$implicit
           * 3. ngForOf -> items
           * 4. i -> NgForOfContext.index
           * 5. ngForTrackBy -> func
           *
           * For a full description of the microsyntax grammar, see
           * https://gist.github.com/mhevery/d3530294cff2e4a1b3fe15ff75d08855
           *
           * @param templateKey name of the microsyntax directive, like ngIf, ngFor,
           * without the *, along with its absolute span.
           */

        }, {
          key: "parseTemplateBindings",
          value: function parseTemplateBindings(templateKey) {
            var bindings = []; // The first binding is for the template key itself
            // In *ngFor="let item of items", key = "ngFor", value = null
            // In *ngIf="cond | pipe", key = "ngIf", value = "cond | pipe"

            bindings.push.apply(bindings, _toConsumableArray(this.parseDirectiveKeywordBindings(templateKey)));

            while (this.index < this.tokens.length) {
              // If it starts with 'let', then this must be variable declaration
              var letBinding = this.parseLetBinding();

              if (letBinding) {
                bindings.push(letBinding);
              } else {
                // Two possible cases here, either `value "as" key` or
                // "directive-keyword expression". We don't know which case, but both
                // "value" and "directive-keyword" are template binding key, so consume
                // the key first.
                var key = this.expectTemplateBindingKey(); // Peek at the next token, if it is "as" then this must be variable
                // declaration.

                var binding = this.parseAsBinding(key);

                if (binding) {
                  bindings.push(binding);
                } else {
                  // Otherwise the key must be a directive keyword, like "of". Transform
                  // the key to actual key. Eg. of -> ngForOf, trackBy -> ngForTrackBy
                  key.source = templateKey.source + key.source.charAt(0).toUpperCase() + key.source.substring(1);
                  bindings.push.apply(bindings, _toConsumableArray(this.parseDirectiveKeywordBindings(key)));
                }
              }

              this.consumeStatementTerminator();
            }

            return new TemplateBindingParseResult(bindings, []
            /* warnings */
            , this.errors);
          }
          /**
           * Parse a directive keyword, followed by a mandatory expression.
           * For example, "of items", "trackBy: func".
           * The bindings are: ngForOf -> items, ngForTrackBy -> func
           * There could be an optional "as" binding that follows the expression.
           * For example,
           * ```
           *   *ngFor="let item of items | slice:0:1 as collection".
           *                    ^^ ^^^^^^^^^^^^^^^^^ ^^^^^^^^^^^^^
           *               keyword    bound target   optional 'as' binding
           * ```
           *
           * @param key binding key, for example, ngFor, ngIf, ngForOf, along with its
           * absolute span.
           */

        }, {
          key: "parseDirectiveKeywordBindings",
          value: function parseDirectiveKeywordBindings(key) {
            var bindings = [];
            this.consumeOptionalCharacter($COLON); // trackBy: trackByFunction

            var value = this.getDirectiveBoundTarget();
            var spanEnd = this.currentAbsoluteOffset; // The binding could optionally be followed by "as". For example,
            // *ngIf="cond | pipe as x". In this case, the key in the "as" binding
            // is "x" and the value is the template key itself ("ngIf"). Note that the
            // 'key' in the current context now becomes the "value" in the next binding.

            var asBinding = this.parseAsBinding(key);

            if (!asBinding) {
              this.consumeStatementTerminator();
              spanEnd = this.currentAbsoluteOffset;
            }

            var sourceSpan = new AbsoluteSourceSpan(key.span.start, spanEnd);
            bindings.push(new ExpressionBinding(sourceSpan, key, value));

            if (asBinding) {
              bindings.push(asBinding);
            }

            return bindings;
          }
          /**
           * Return the expression AST for the bound target of a directive keyword
           * binding. For example,
           * ```
           *   *ngIf="condition | pipe"
           *          ^^^^^^^^^^^^^^^^ bound target for "ngIf"
           *   *ngFor="let item of items"
           *                       ^^^^^ bound target for "ngForOf"
           * ```
           */

        }, {
          key: "getDirectiveBoundTarget",
          value: function getDirectiveBoundTarget() {
            if (this.next === EOF || this.peekKeywordAs() || this.peekKeywordLet()) {
              return null;
            }

            var ast = this.parsePipe(); // example: "condition | async"

            var _ast$span = ast.span,
                start = _ast$span.start,
                end = _ast$span.end;
            var value = this.input.substring(start, end);
            return new ASTWithSource(ast, value, this.location, this.absoluteOffset + start, this.errors);
          }
          /**
           * Return the binding for a variable declared using `as`. Note that the order
           * of the key-value pair in this declaration is reversed. For example,
           * ```
           *   *ngFor="let item of items; index as i"
           *                              ^^^^^    ^
           *                              value    key
           * ```
           *
           * @param value name of the value in the declaration, "ngIf" in the example
           * above, along with its absolute span.
           */

        }, {
          key: "parseAsBinding",
          value: function parseAsBinding(value) {
            if (!this.peekKeywordAs()) {
              return null;
            }

            this.advance(); // consume the 'as' keyword

            var key = this.expectTemplateBindingKey();
            this.consumeStatementTerminator();
            var sourceSpan = new AbsoluteSourceSpan(value.span.start, this.currentAbsoluteOffset);
            return new VariableBinding(sourceSpan, key, value);
          }
          /**
           * Return the binding for a variable declared using `let`. For example,
           * ```
           *   *ngFor="let item of items; let i=index;"
           *           ^^^^^^^^           ^^^^^^^^^^^
           * ```
           * In the first binding, `item` is bound to `NgForOfContext.$implicit`.
           * In the second binding, `i` is bound to `NgForOfContext.index`.
           */

        }, {
          key: "parseLetBinding",
          value: function parseLetBinding() {
            if (!this.peekKeywordLet()) {
              return null;
            }

            var spanStart = this.currentAbsoluteOffset;
            this.advance(); // consume the 'let' keyword

            var key = this.expectTemplateBindingKey();
            var value = null;

            if (this.consumeOptionalOperator('=')) {
              value = this.expectTemplateBindingKey();
            }

            this.consumeStatementTerminator();
            var sourceSpan = new AbsoluteSourceSpan(spanStart, this.currentAbsoluteOffset);
            return new VariableBinding(sourceSpan, key, value);
          }
          /**
           * Consume the optional statement terminator: semicolon or comma.
           */

        }, {
          key: "consumeStatementTerminator",
          value: function consumeStatementTerminator() {
            this.consumeOptionalCharacter($SEMICOLON) || this.consumeOptionalCharacter($COMMA);
          }
          /**
           * Records an error and skips over the token stream until reaching a recoverable point. See
           * `this.skip` for more details on token skipping.
           */

        }, {
          key: "error",
          value: function error(message) {
            var index = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
            this.errors.push(new ParserError(message, this.input, this.locationText(index), this.location));
            this.skip();
          }
        }, {
          key: "locationText",
          value: function locationText() {
            var index = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
            if (index == null) index = this.index;
            return index < this.tokens.length ? "at column ".concat(this.tokens[index].index + 1, " in") : "at the end of the expression";
          }
          /**
           * Error recovery should skip tokens until it encounters a recovery point.
           *
           * The following are treated as unconditional recovery points:
           *   - end of input
           *   - ';' (parseChain() is always the root production, and it expects a ';')
           *   - '|' (since pipes may be chained and each pipe expression may be treated independently)
           *
           * The following are conditional recovery points:
           *   - ')', '}', ']' if one of calling productions is expecting one of these symbols
           *     - This allows skip() to recover from errors such as '(a.) + 1' allowing more of the AST to
           *       be retained (it doesn't skip any tokens as the ')' is retained because of the '(' begins
           *       an '(' <expr> ')' production).
           *       The recovery points of grouping symbols must be conditional as they must be skipped if
           *       none of the calling productions are not expecting the closing token else we will never
           *       make progress in the case of an extraneous group closing symbol (such as a stray ')').
           *       That is, we skip a closing symbol if we are not in a grouping production.
           *   - '=' in a `Writable` context
           *     - In this context, we are able to recover after seeing the `=` operator, which
           *       signals the presence of an independent rvalue expression following the `=` operator.
           *
           * If a production expects one of these token it increments the corresponding nesting count,
           * and then decrements it just prior to checking if the token is in the input.
           */

        }, {
          key: "skip",
          value: function skip() {
            var n = this.next;

            while (this.index < this.tokens.length && !n.isCharacter($SEMICOLON) && !n.isOperator('|') && (this.rparensExpected <= 0 || !n.isCharacter($RPAREN)) && (this.rbracesExpected <= 0 || !n.isCharacter($RBRACE)) && (this.rbracketsExpected <= 0 || !n.isCharacter($RBRACKET)) && (!(this.context & ParseContextFlags.Writable) || !n.isOperator('='))) {
              if (this.next.isError()) {
                this.errors.push(new ParserError(this.next.toString(), this.input, this.locationText(), this.location));
              }

              this.advance();
              n = this.next;
            }
          }
        }]);

        return _ParseAST;
      }();

      var SimpleExpressionChecker = /*#__PURE__*/function () {
        function SimpleExpressionChecker() {
          _classCallCheck(this, SimpleExpressionChecker);

          this.errors = [];
        }

        _createClass(SimpleExpressionChecker, [{
          key: "visitImplicitReceiver",
          value: function visitImplicitReceiver(ast, context) {}
        }, {
          key: "visitThisReceiver",
          value: function visitThisReceiver(ast, context) {}
        }, {
          key: "visitInterpolation",
          value: function visitInterpolation(ast, context) {}
        }, {
          key: "visitLiteralPrimitive",
          value: function visitLiteralPrimitive(ast, context) {}
        }, {
          key: "visitPropertyRead",
          value: function visitPropertyRead(ast, context) {}
        }, {
          key: "visitPropertyWrite",
          value: function visitPropertyWrite(ast, context) {}
        }, {
          key: "visitSafePropertyRead",
          value: function visitSafePropertyRead(ast, context) {}
        }, {
          key: "visitMethodCall",
          value: function visitMethodCall(ast, context) {}
        }, {
          key: "visitSafeMethodCall",
          value: function visitSafeMethodCall(ast, context) {}
        }, {
          key: "visitFunctionCall",
          value: function visitFunctionCall(ast, context) {}
        }, {
          key: "visitLiteralArray",
          value: function visitLiteralArray(ast, context) {
            this.visitAll(ast.expressions, context);
          }
        }, {
          key: "visitLiteralMap",
          value: function visitLiteralMap(ast, context) {
            this.visitAll(ast.values, context);
          }
        }, {
          key: "visitUnary",
          value: function visitUnary(ast, context) {}
        }, {
          key: "visitBinary",
          value: function visitBinary(ast, context) {}
        }, {
          key: "visitPrefixNot",
          value: function visitPrefixNot(ast, context) {}
        }, {
          key: "visitNonNullAssert",
          value: function visitNonNullAssert(ast, context) {}
        }, {
          key: "visitConditional",
          value: function visitConditional(ast, context) {}
        }, {
          key: "visitPipe",
          value: function visitPipe(ast, context) {
            this.errors.push('pipes');
          }
        }, {
          key: "visitKeyedRead",
          value: function visitKeyedRead(ast, context) {}
        }, {
          key: "visitKeyedWrite",
          value: function visitKeyedWrite(ast, context) {}
        }, {
          key: "visitAll",
          value: function visitAll(asts, context) {
            var _this161 = this;

            return asts.map(function (node) {
              return node.visit(_this161, context);
            });
          }
        }, {
          key: "visitChain",
          value: function visitChain(ast, context) {}
        }, {
          key: "visitQuote",
          value: function visitQuote(ast, context) {}
        }]);

        return SimpleExpressionChecker;
      }();
      /**
       * This class implements SimpleExpressionChecker used in View Engine and performs more strict checks
       * to make sure host bindings do not contain pipes. In View Engine, having pipes in host bindings is
       * not supported as well, but in some cases (like `!(value | async)`) the error is not triggered at
       * compile time. In order to preserve View Engine behavior, more strict checks are introduced for
       * Ivy mode only.
       */


      var IvySimpleExpressionChecker = /*#__PURE__*/function (_RecursiveAstVisitor$2) {
        _inherits(IvySimpleExpressionChecker, _RecursiveAstVisitor$2);

        var _super96 = _createSuper(IvySimpleExpressionChecker);

        function IvySimpleExpressionChecker() {
          var _this162;

          _classCallCheck(this, IvySimpleExpressionChecker);

          _this162 = _super96.apply(this, arguments);
          _this162.errors = [];
          return _this162;
        }

        _createClass(IvySimpleExpressionChecker, [{
          key: "visitPipe",
          value: function visitPipe() {
            this.errors.push('pipes');
          }
        }]);

        return IvySimpleExpressionChecker;
      }(RecursiveAstVisitor$1);
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */
      // =================================================================================================
      // =================================================================================================
      // =========== S T O P   -  S T O P   -  S T O P   -  S T O P   -  S T O P   -  S T O P  ===========
      // =================================================================================================
      // =================================================================================================
      //
      //        DO NOT EDIT THIS LIST OF SECURITY SENSITIVE PROPERTIES WITHOUT A SECURITY REVIEW!
      //                               Reach out to mprobst for details.
      //
      // =================================================================================================

      /** Map from tagName|propertyName to SecurityContext. Properties applying to all tags use '*'. */


      var _SECURITY_SCHEMA;

      function SECURITY_SCHEMA() {
        if (!_SECURITY_SCHEMA) {
          _SECURITY_SCHEMA = {}; // Case is insignificant below, all element and attribute names are lower-cased for lookup.

          registerContext(SecurityContext.HTML, ['iframe|srcdoc', '*|innerHTML', '*|outerHTML']);
          registerContext(SecurityContext.STYLE, ['*|style']); // NB: no SCRIPT contexts here, they are never allowed due to the parser stripping them.

          registerContext(SecurityContext.URL, ['*|formAction', 'area|href', 'area|ping', 'audio|src', 'a|href', 'a|ping', 'blockquote|cite', 'body|background', 'del|cite', 'form|action', 'img|src', 'img|srcset', 'input|src', 'ins|cite', 'q|cite', 'source|src', 'source|srcset', 'track|src', 'video|poster', 'video|src']);
          registerContext(SecurityContext.RESOURCE_URL, ['applet|code', 'applet|codebase', 'base|href', 'embed|src', 'frame|src', 'head|profile', 'html|manifest', 'iframe|src', 'link|href', 'media|src', 'object|codebase', 'object|data', 'script|src']);
        }

        return _SECURITY_SCHEMA;
      }

      function registerContext(ctx, specs) {
        var _iterator14 = _createForOfIteratorHelper(specs),
            _step14;

        try {
          for (_iterator14.s(); !(_step14 = _iterator14.n()).done;) {
            var spec = _step14.value;
            _SECURITY_SCHEMA[spec.toLowerCase()] = ctx;
          }
        } catch (err) {
          _iterator14.e(err);
        } finally {
          _iterator14.f();
        }
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      var ElementSchemaRegistry = function ElementSchemaRegistry() {
        _classCallCheck(this, ElementSchemaRegistry);
      };
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      var BOOLEAN = 'boolean';
      var NUMBER = 'number';
      var STRING = 'string';
      var OBJECT = 'object';
      /**
       * This array represents the DOM schema. It encodes inheritance, properties, and events.
       *
       * ## Overview
       *
       * Each line represents one kind of element. The `element_inheritance` and properties are joined
       * using `element_inheritance|properties` syntax.
       *
       * ## Element Inheritance
       *
       * The `element_inheritance` can be further subdivided as `element1,element2,...^parentElement`.
       * Here the individual elements are separated by `,` (commas). Every element in the list
       * has identical properties.
       *
       * An `element` may inherit additional properties from `parentElement` If no `^parentElement` is
       * specified then `""` (blank) element is assumed.
       *
       * NOTE: The blank element inherits from root `[Element]` element, the super element of all
       * elements.
       *
       * NOTE an element prefix such as `:svg:` has no special meaning to the schema.
       *
       * ## Properties
       *
       * Each element has a set of properties separated by `,` (commas). Each property can be prefixed
       * by a special character designating its type:
       *
       * - (no prefix): property is a string.
       * - `*`: property represents an event.
       * - `!`: property is a boolean.
       * - `#`: property is a number.
       * - `%`: property is an object.
       *
       * ## Query
       *
       * The class creates an internal squas representation which allows to easily answer the query of
       * if a given property exist on a given element.
       *
       * NOTE: We don't yet support querying for types or events.
       * NOTE: This schema is auto extracted from `schema_extractor.ts` located in the test folder,
       *       see dom_element_schema_registry_spec.ts
       */
      // =================================================================================================
      // =================================================================================================
      // =========== S T O P   -  S T O P   -  S T O P   -  S T O P   -  S T O P   -  S T O P  ===========
      // =================================================================================================
      // =================================================================================================
      //
      //                       DO NOT EDIT THIS DOM SCHEMA WITHOUT A SECURITY REVIEW!
      //
      // Newly added properties must be security reviewed and assigned an appropriate SecurityContext in
      // dom_security_schema.ts. Reach out to mprobst & rjamet for details.
      //
      // =================================================================================================

      var SCHEMA = ['[Element]|textContent,%classList,className,id,innerHTML,*beforecopy,*beforecut,*beforepaste,*copy,*cut,*paste,*search,*selectstart,*webkitfullscreenchange,*webkitfullscreenerror,*wheel,outerHTML,#scrollLeft,#scrollTop,slot' +
      /* added manually to avoid breaking changes */
      ',*message,*mozfullscreenchange,*mozfullscreenerror,*mozpointerlockchange,*mozpointerlockerror,*webglcontextcreationerror,*webglcontextlost,*webglcontextrestored', '[HTMLElement]^[Element]|accessKey,contentEditable,dir,!draggable,!hidden,innerText,lang,*abort,*auxclick,*blur,*cancel,*canplay,*canplaythrough,*change,*click,*close,*contextmenu,*cuechange,*dblclick,*drag,*dragend,*dragenter,*dragleave,*dragover,*dragstart,*drop,*durationchange,*emptied,*ended,*error,*focus,*gotpointercapture,*input,*invalid,*keydown,*keypress,*keyup,*load,*loadeddata,*loadedmetadata,*loadstart,*lostpointercapture,*mousedown,*mouseenter,*mouseleave,*mousemove,*mouseout,*mouseover,*mouseup,*mousewheel,*pause,*play,*playing,*pointercancel,*pointerdown,*pointerenter,*pointerleave,*pointermove,*pointerout,*pointerover,*pointerup,*progress,*ratechange,*reset,*resize,*scroll,*seeked,*seeking,*select,*show,*stalled,*submit,*suspend,*timeupdate,*toggle,*volumechange,*waiting,outerText,!spellcheck,%style,#tabIndex,title,!translate', 'abbr,address,article,aside,b,bdi,bdo,cite,code,dd,dfn,dt,em,figcaption,figure,footer,header,i,kbd,main,mark,nav,noscript,rb,rp,rt,rtc,ruby,s,samp,section,small,strong,sub,sup,u,var,wbr^[HTMLElement]|accessKey,contentEditable,dir,!draggable,!hidden,innerText,lang,*abort,*auxclick,*blur,*cancel,*canplay,*canplaythrough,*change,*click,*close,*contextmenu,*cuechange,*dblclick,*drag,*dragend,*dragenter,*dragleave,*dragover,*dragstart,*drop,*durationchange,*emptied,*ended,*error,*focus,*gotpointercapture,*input,*invalid,*keydown,*keypress,*keyup,*load,*loadeddata,*loadedmetadata,*loadstart,*lostpointercapture,*mousedown,*mouseenter,*mouseleave,*mousemove,*mouseout,*mouseover,*mouseup,*mousewheel,*pause,*play,*playing,*pointercancel,*pointerdown,*pointerenter,*pointerleave,*pointermove,*pointerout,*pointerover,*pointerup,*progress,*ratechange,*reset,*resize,*scroll,*seeked,*seeking,*select,*show,*stalled,*submit,*suspend,*timeupdate,*toggle,*volumechange,*waiting,outerText,!spellcheck,%style,#tabIndex,title,!translate', 'media^[HTMLElement]|!autoplay,!controls,%controlsList,%crossOrigin,#currentTime,!defaultMuted,#defaultPlaybackRate,!disableRemotePlayback,!loop,!muted,*encrypted,*waitingforkey,#playbackRate,preload,src,%srcObject,#volume', ':svg:^[HTMLElement]|*abort,*auxclick,*blur,*cancel,*canplay,*canplaythrough,*change,*click,*close,*contextmenu,*cuechange,*dblclick,*drag,*dragend,*dragenter,*dragleave,*dragover,*dragstart,*drop,*durationchange,*emptied,*ended,*error,*focus,*gotpointercapture,*input,*invalid,*keydown,*keypress,*keyup,*load,*loadeddata,*loadedmetadata,*loadstart,*lostpointercapture,*mousedown,*mouseenter,*mouseleave,*mousemove,*mouseout,*mouseover,*mouseup,*mousewheel,*pause,*play,*playing,*pointercancel,*pointerdown,*pointerenter,*pointerleave,*pointermove,*pointerout,*pointerover,*pointerup,*progress,*ratechange,*reset,*resize,*scroll,*seeked,*seeking,*select,*show,*stalled,*submit,*suspend,*timeupdate,*toggle,*volumechange,*waiting,%style,#tabIndex', ':svg:graphics^:svg:|', ':svg:animation^:svg:|*begin,*end,*repeat', ':svg:geometry^:svg:|', ':svg:componentTransferFunction^:svg:|', ':svg:gradient^:svg:|', ':svg:textContent^:svg:graphics|', ':svg:textPositioning^:svg:textContent|', 'a^[HTMLElement]|charset,coords,download,hash,host,hostname,href,hreflang,name,password,pathname,ping,port,protocol,referrerPolicy,rel,rev,search,shape,target,text,type,username', 'area^[HTMLElement]|alt,coords,download,hash,host,hostname,href,!noHref,password,pathname,ping,port,protocol,referrerPolicy,rel,search,shape,target,username', 'audio^media|', 'br^[HTMLElement]|clear', 'base^[HTMLElement]|href,target', 'body^[HTMLElement]|aLink,background,bgColor,link,*beforeunload,*blur,*error,*focus,*hashchange,*languagechange,*load,*message,*offline,*online,*pagehide,*pageshow,*popstate,*rejectionhandled,*resize,*scroll,*storage,*unhandledrejection,*unload,text,vLink', 'button^[HTMLElement]|!autofocus,!disabled,formAction,formEnctype,formMethod,!formNoValidate,formTarget,name,type,value', 'canvas^[HTMLElement]|#height,#width', 'content^[HTMLElement]|select', 'dl^[HTMLElement]|!compact', 'datalist^[HTMLElement]|', 'details^[HTMLElement]|!open', 'dialog^[HTMLElement]|!open,returnValue', 'dir^[HTMLElement]|!compact', 'div^[HTMLElement]|align', 'embed^[HTMLElement]|align,height,name,src,type,width', 'fieldset^[HTMLElement]|!disabled,name', 'font^[HTMLElement]|color,face,size', 'form^[HTMLElement]|acceptCharset,action,autocomplete,encoding,enctype,method,name,!noValidate,target', 'frame^[HTMLElement]|frameBorder,longDesc,marginHeight,marginWidth,name,!noResize,scrolling,src', 'frameset^[HTMLElement]|cols,*beforeunload,*blur,*error,*focus,*hashchange,*languagechange,*load,*message,*offline,*online,*pagehide,*pageshow,*popstate,*rejectionhandled,*resize,*scroll,*storage,*unhandledrejection,*unload,rows', 'hr^[HTMLElement]|align,color,!noShade,size,width', 'head^[HTMLElement]|', 'h1,h2,h3,h4,h5,h6^[HTMLElement]|align', 'html^[HTMLElement]|version', 'iframe^[HTMLElement]|align,!allowFullscreen,frameBorder,height,longDesc,marginHeight,marginWidth,name,referrerPolicy,%sandbox,scrolling,src,srcdoc,width', 'img^[HTMLElement]|align,alt,border,%crossOrigin,#height,#hspace,!isMap,longDesc,lowsrc,name,referrerPolicy,sizes,src,srcset,useMap,#vspace,#width', 'input^[HTMLElement]|accept,align,alt,autocapitalize,autocomplete,!autofocus,!checked,!defaultChecked,defaultValue,dirName,!disabled,%files,formAction,formEnctype,formMethod,!formNoValidate,formTarget,#height,!incremental,!indeterminate,max,#maxLength,min,#minLength,!multiple,name,pattern,placeholder,!readOnly,!required,selectionDirection,#selectionEnd,#selectionStart,#size,src,step,type,useMap,value,%valueAsDate,#valueAsNumber,#width', 'li^[HTMLElement]|type,#value', 'label^[HTMLElement]|htmlFor', 'legend^[HTMLElement]|align', 'link^[HTMLElement]|as,charset,%crossOrigin,!disabled,href,hreflang,integrity,media,referrerPolicy,rel,%relList,rev,%sizes,target,type', 'map^[HTMLElement]|name', 'marquee^[HTMLElement]|behavior,bgColor,direction,height,#hspace,#loop,#scrollAmount,#scrollDelay,!trueSpeed,#vspace,width', 'menu^[HTMLElement]|!compact', 'meta^[HTMLElement]|content,httpEquiv,name,scheme', 'meter^[HTMLElement]|#high,#low,#max,#min,#optimum,#value', 'ins,del^[HTMLElement]|cite,dateTime', 'ol^[HTMLElement]|!compact,!reversed,#start,type', 'object^[HTMLElement]|align,archive,border,code,codeBase,codeType,data,!declare,height,#hspace,name,standby,type,useMap,#vspace,width', 'optgroup^[HTMLElement]|!disabled,label', 'option^[HTMLElement]|!defaultSelected,!disabled,label,!selected,text,value', 'output^[HTMLElement]|defaultValue,%htmlFor,name,value', 'p^[HTMLElement]|align', 'param^[HTMLElement]|name,type,value,valueType', 'picture^[HTMLElement]|', 'pre^[HTMLElement]|#width', 'progress^[HTMLElement]|#max,#value', 'q,blockquote,cite^[HTMLElement]|', 'script^[HTMLElement]|!async,charset,%crossOrigin,!defer,event,htmlFor,integrity,src,text,type', 'select^[HTMLElement]|autocomplete,!autofocus,!disabled,#length,!multiple,name,!required,#selectedIndex,#size,value', 'shadow^[HTMLElement]|', 'slot^[HTMLElement]|name', 'source^[HTMLElement]|media,sizes,src,srcset,type', 'span^[HTMLElement]|', 'style^[HTMLElement]|!disabled,media,type', 'caption^[HTMLElement]|align', 'th,td^[HTMLElement]|abbr,align,axis,bgColor,ch,chOff,#colSpan,headers,height,!noWrap,#rowSpan,scope,vAlign,width', 'col,colgroup^[HTMLElement]|align,ch,chOff,#span,vAlign,width', 'table^[HTMLElement]|align,bgColor,border,%caption,cellPadding,cellSpacing,frame,rules,summary,%tFoot,%tHead,width', 'tr^[HTMLElement]|align,bgColor,ch,chOff,vAlign', 'tfoot,thead,tbody^[HTMLElement]|align,ch,chOff,vAlign', 'template^[HTMLElement]|', 'textarea^[HTMLElement]|autocapitalize,autocomplete,!autofocus,#cols,defaultValue,dirName,!disabled,#maxLength,#minLength,name,placeholder,!readOnly,!required,#rows,selectionDirection,#selectionEnd,#selectionStart,value,wrap', 'title^[HTMLElement]|text', 'track^[HTMLElement]|!default,kind,label,src,srclang', 'ul^[HTMLElement]|!compact,type', 'unknown^[HTMLElement]|', 'video^media|#height,poster,#width', ':svg:a^:svg:graphics|', ':svg:animate^:svg:animation|', ':svg:animateMotion^:svg:animation|', ':svg:animateTransform^:svg:animation|', ':svg:circle^:svg:geometry|', ':svg:clipPath^:svg:graphics|', ':svg:defs^:svg:graphics|', ':svg:desc^:svg:|', ':svg:discard^:svg:|', ':svg:ellipse^:svg:geometry|', ':svg:feBlend^:svg:|', ':svg:feColorMatrix^:svg:|', ':svg:feComponentTransfer^:svg:|', ':svg:feComposite^:svg:|', ':svg:feConvolveMatrix^:svg:|', ':svg:feDiffuseLighting^:svg:|', ':svg:feDisplacementMap^:svg:|', ':svg:feDistantLight^:svg:|', ':svg:feDropShadow^:svg:|', ':svg:feFlood^:svg:|', ':svg:feFuncA^:svg:componentTransferFunction|', ':svg:feFuncB^:svg:componentTransferFunction|', ':svg:feFuncG^:svg:componentTransferFunction|', ':svg:feFuncR^:svg:componentTransferFunction|', ':svg:feGaussianBlur^:svg:|', ':svg:feImage^:svg:|', ':svg:feMerge^:svg:|', ':svg:feMergeNode^:svg:|', ':svg:feMorphology^:svg:|', ':svg:feOffset^:svg:|', ':svg:fePointLight^:svg:|', ':svg:feSpecularLighting^:svg:|', ':svg:feSpotLight^:svg:|', ':svg:feTile^:svg:|', ':svg:feTurbulence^:svg:|', ':svg:filter^:svg:|', ':svg:foreignObject^:svg:graphics|', ':svg:g^:svg:graphics|', ':svg:image^:svg:graphics|', ':svg:line^:svg:geometry|', ':svg:linearGradient^:svg:gradient|', ':svg:mpath^:svg:|', ':svg:marker^:svg:|', ':svg:mask^:svg:|', ':svg:metadata^:svg:|', ':svg:path^:svg:geometry|', ':svg:pattern^:svg:|', ':svg:polygon^:svg:geometry|', ':svg:polyline^:svg:geometry|', ':svg:radialGradient^:svg:gradient|', ':svg:rect^:svg:geometry|', ':svg:svg^:svg:graphics|#currentScale,#zoomAndPan', ':svg:script^:svg:|type', ':svg:set^:svg:animation|', ':svg:stop^:svg:|', ':svg:style^:svg:|!disabled,media,title,type', ':svg:switch^:svg:graphics|', ':svg:symbol^:svg:|', ':svg:tspan^:svg:textPositioning|', ':svg:text^:svg:textPositioning|', ':svg:textPath^:svg:textContent|', ':svg:title^:svg:|', ':svg:use^:svg:graphics|', ':svg:view^:svg:|#zoomAndPan', 'data^[HTMLElement]|value', 'keygen^[HTMLElement]|!autofocus,challenge,!disabled,form,keytype,name', 'menuitem^[HTMLElement]|type,label,icon,!disabled,!checked,radiogroup,!default', 'summary^[HTMLElement]|', 'time^[HTMLElement]|dateTime', ':svg:cursor^:svg:|'];
      var _ATTR_TO_PROP = {
        'class': 'className',
        'for': 'htmlFor',
        'formaction': 'formAction',
        'innerHtml': 'innerHTML',
        'readonly': 'readOnly',
        'tabindex': 'tabIndex'
      }; // Invert _ATTR_TO_PROP.

      var _PROP_TO_ATTR = Object.keys(_ATTR_TO_PROP).reduce(function (inverted, attr) {
        inverted[_ATTR_TO_PROP[attr]] = attr;
        return inverted;
      }, {});

      var DomElementSchemaRegistry = /*#__PURE__*/function (_ElementSchemaRegistr) {
        _inherits(DomElementSchemaRegistry, _ElementSchemaRegistr);

        var _super97 = _createSuper(DomElementSchemaRegistry);

        function DomElementSchemaRegistry() {
          var _this163;

          _classCallCheck(this, DomElementSchemaRegistry);

          _this163 = _super97.call(this);
          _this163._schema = {};
          SCHEMA.forEach(function (encodedType) {
            var type = {};

            var _encodedType$split = encodedType.split('|'),
                _encodedType$split2 = _slicedToArray(_encodedType$split, 2),
                strType = _encodedType$split2[0],
                strProperties = _encodedType$split2[1];

            var properties = strProperties.split(',');

            var _strType$split = strType.split('^'),
                _strType$split2 = _slicedToArray(_strType$split, 2),
                typeNames = _strType$split2[0],
                superName = _strType$split2[1];

            typeNames.split(',').forEach(function (tag) {
              return _this163._schema[tag.toLowerCase()] = type;
            });

            var superType = superName && _this163._schema[superName.toLowerCase()];

            if (superType) {
              Object.keys(superType).forEach(function (prop) {
                type[prop] = superType[prop];
              });
            }

            properties.forEach(function (property) {
              if (property.length > 0) {
                switch (property[0]) {
                  case '*':
                    // We don't yet support events.
                    // If ever allowing to bind to events, GO THROUGH A SECURITY REVIEW, allowing events
                    // will
                    // almost certainly introduce bad XSS vulnerabilities.
                    // type[property.substring(1)] = EVENT;
                    break;

                  case '!':
                    type[property.substring(1)] = BOOLEAN;
                    break;

                  case '#':
                    type[property.substring(1)] = NUMBER;
                    break;

                  case '%':
                    type[property.substring(1)] = OBJECT;
                    break;

                  default:
                    type[property] = STRING;
                }
              }
            });
          });
          return _this163;
        }

        _createClass(DomElementSchemaRegistry, [{
          key: "hasProperty",
          value: function hasProperty(tagName, propName, schemaMetas) {
            if (schemaMetas.some(function (schema) {
              return schema.name === NO_ERRORS_SCHEMA.name;
            })) {
              return true;
            }

            if (tagName.indexOf('-') > -1) {
              if (isNgContainer(tagName) || isNgContent(tagName)) {
                return false;
              }

              if (schemaMetas.some(function (schema) {
                return schema.name === CUSTOM_ELEMENTS_SCHEMA.name;
              })) {
                // Can't tell now as we don't know which properties a custom element will get
                // once it is instantiated
                return true;
              }
            }

            var elementProperties = this._schema[tagName.toLowerCase()] || this._schema['unknown'];

            return !!elementProperties[propName];
          }
        }, {
          key: "hasElement",
          value: function hasElement(tagName, schemaMetas) {
            if (schemaMetas.some(function (schema) {
              return schema.name === NO_ERRORS_SCHEMA.name;
            })) {
              return true;
            }

            if (tagName.indexOf('-') > -1) {
              if (isNgContainer(tagName) || isNgContent(tagName)) {
                return true;
              }

              if (schemaMetas.some(function (schema) {
                return schema.name === CUSTOM_ELEMENTS_SCHEMA.name;
              })) {
                // Allow any custom elements
                return true;
              }
            }

            return !!this._schema[tagName.toLowerCase()];
          }
          /**
           * securityContext returns the security context for the given property on the given DOM tag.
           *
           * Tag and property name are statically known and cannot change at runtime, i.e. it is not
           * possible to bind a value into a changing attribute or tag name.
           *
           * The filtering is based on a list of allowed tags|attributes. All attributes in the schema
           * above are assumed to have the 'NONE' security context, i.e. that they are safe inert
           * string values. Only specific well known attack vectors are assigned their appropriate context.
           */

        }, {
          key: "securityContext",
          value: function securityContext(tagName, propName, isAttribute) {
            if (isAttribute) {
              // NB: For security purposes, use the mapped property name, not the attribute name.
              propName = this.getMappedPropName(propName);
            } // Make sure comparisons are case insensitive, so that case differences between attribute and
            // property names do not have a security impact.


            tagName = tagName.toLowerCase();
            propName = propName.toLowerCase();
            var ctx = SECURITY_SCHEMA()[tagName + '|' + propName];

            if (ctx) {
              return ctx;
            }

            ctx = SECURITY_SCHEMA()['*|' + propName];
            return ctx ? ctx : SecurityContext.NONE;
          }
        }, {
          key: "getMappedPropName",
          value: function getMappedPropName(propName) {
            return _ATTR_TO_PROP[propName] || propName;
          }
        }, {
          key: "getDefaultComponentElementName",
          value: function getDefaultComponentElementName() {
            return 'ng-component';
          }
        }, {
          key: "validateProperty",
          value: function validateProperty(name) {
            if (name.toLowerCase().startsWith('on')) {
              var msg = "Binding to event property '".concat(name, "' is disallowed for security reasons, ") + "please use (".concat(name.slice(2), ")=...") + "\nIf '".concat(name, "' is a directive input, make sure the directive is imported by the") + " current module.";
              return {
                error: true,
                msg: msg
              };
            } else {
              return {
                error: false
              };
            }
          }
        }, {
          key: "validateAttribute",
          value: function validateAttribute(name) {
            if (name.toLowerCase().startsWith('on')) {
              var msg = "Binding to event attribute '".concat(name, "' is disallowed for security reasons, ") + "please use (".concat(name.slice(2), ")=...");
              return {
                error: true,
                msg: msg
              };
            } else {
              return {
                error: false
              };
            }
          }
        }, {
          key: "allKnownElementNames",
          value: function allKnownElementNames() {
            return Object.keys(this._schema);
          }
        }, {
          key: "allKnownAttributesOfElement",
          value: function allKnownAttributesOfElement(tagName) {
            var elementProperties = this._schema[tagName.toLowerCase()] || this._schema['unknown']; // Convert properties to attributes.


            return Object.keys(elementProperties).map(function (prop) {
              var _a;

              return (_a = _PROP_TO_ATTR[prop]) !== null && _a !== void 0 ? _a : prop;
            });
          }
        }, {
          key: "normalizeAnimationStyleProperty",
          value: function normalizeAnimationStyleProperty(propName) {
            return dashCaseToCamelCase(propName);
          }
        }, {
          key: "normalizeAnimationStyleValue",
          value: function normalizeAnimationStyleValue(camelCaseProp, userProvidedProp, val) {
            var unit = '';
            var strVal = val.toString().trim();
            var errorMsg = null;

            if (_isPixelDimensionStyle(camelCaseProp) && val !== 0 && val !== '0') {
              if (typeof val === 'number') {
                unit = 'px';
              } else {
                var valAndSuffixMatch = val.match(/^[+-]?[\d\.]+([a-z]*)$/);

                if (valAndSuffixMatch && valAndSuffixMatch[1].length == 0) {
                  errorMsg = "Please provide a CSS unit value for ".concat(userProvidedProp, ":").concat(val);
                }
              }
            }

            return {
              error: errorMsg,
              value: strVal + unit
            };
          }
        }]);

        return DomElementSchemaRegistry;
      }(ElementSchemaRegistry);

      function _isPixelDimensionStyle(prop) {
        switch (prop) {
          case 'width':
          case 'height':
          case 'minWidth':
          case 'minHeight':
          case 'maxWidth':
          case 'maxHeight':
          case 'left':
          case 'top':
          case 'bottom':
          case 'right':
          case 'fontSize':
          case 'outlineWidth':
          case 'outlineOffset':
          case 'paddingTop':
          case 'paddingLeft':
          case 'paddingBottom':
          case 'paddingRight':
          case 'marginTop':
          case 'marginLeft':
          case 'marginBottom':
          case 'marginRight':
          case 'borderRadius':
          case 'borderWidth':
          case 'borderTopWidth':
          case 'borderLeftWidth':
          case 'borderRightWidth':
          case 'borderBottomWidth':
          case 'textIndent':
            return true;

          default:
            return false;
        }
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * Set of tagName|propertyName corresponding to Trusted Types sinks. Properties applying to all
       * tags use '*'.
       *
       * Extracted from, and should be kept in sync with
       * https://w3c.github.io/webappsec-trusted-types/dist/spec/#integrations
       */


      var TRUSTED_TYPES_SINKS = new Set([// NOTE: All strings in this set *must* be lowercase!
      // TrustedHTML
      'iframe|srcdoc', '*|innerhtml', '*|outerhtml', // NB: no TrustedScript here, as the corresponding tags are stripped by the compiler.
      // TrustedScriptURL
      'embed|src', 'object|codebase', 'object|data']);
      /**
       * isTrustedTypesSink returns true if the given property on the given DOM tag is a Trusted Types
       * sink. In that case, use `ElementSchemaRegistry.securityContext` to determine which particular
       * Trusted Type is required for values passed to the sink:
       * - SecurityContext.HTML corresponds to TrustedHTML
       * - SecurityContext.RESOURCE_URL corresponds to TrustedScriptURL
       */

      function isTrustedTypesSink(tagName, propName) {
        // Make sure comparisons are case insensitive, so that case differences between attribute and
        // property names do not have a security impact.
        tagName = tagName.toLowerCase();
        propName = propName.toLowerCase();
        return TRUSTED_TYPES_SINKS.has(tagName + '|' + propName) || TRUSTED_TYPES_SINKS.has('*|' + propName);
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      var BIND_NAME_REGEXP$1 = /^(?:(bind-)|(let-)|(ref-|#)|(on-)|(bindon-)|(@))(.*)$/; // Group 1 = "bind-"

      var KW_BIND_IDX$1 = 1; // Group 2 = "let-"

      var KW_LET_IDX$1 = 2; // Group 3 = "ref-/#"

      var KW_REF_IDX$1 = 3; // Group 4 = "on-"

      var KW_ON_IDX$1 = 4; // Group 5 = "bindon-"

      var KW_BINDON_IDX$1 = 5; // Group 6 = "@"

      var KW_AT_IDX$1 = 6; // Group 7 = the identifier after "bind-", "let-", "ref-/#", "on-", "bindon-" or "@"

      var IDENT_KW_IDX$1 = 7;
      var BINDING_DELIMS = {
        BANANA_BOX: {
          start: '[(',
          end: ')]'
        },
        PROPERTY: {
          start: '[',
          end: ']'
        },
        EVENT: {
          start: '(',
          end: ')'
        }
      };
      var TEMPLATE_ATTR_PREFIX$2 = '*';

      function htmlAstToRender3Ast(htmlNodes, bindingParser) {
        var transformer = new HtmlAstToIvyAst(bindingParser);
        var ivyNodes = visitAll$1(transformer, htmlNodes); // Errors might originate in either the binding parser or the html to ivy transformer

        var allErrors = bindingParser.errors.concat(transformer.errors);
        return {
          nodes: ivyNodes,
          errors: allErrors,
          styleUrls: transformer.styleUrls,
          styles: transformer.styles,
          ngContentSelectors: transformer.ngContentSelectors
        };
      }

      var HtmlAstToIvyAst = /*#__PURE__*/function () {
        function HtmlAstToIvyAst(bindingParser) {
          _classCallCheck(this, HtmlAstToIvyAst);

          this.bindingParser = bindingParser;
          this.errors = [];
          this.styles = [];
          this.styleUrls = [];
          this.ngContentSelectors = [];
          this.inI18nBlock = false;
        } // HTML visitor


        _createClass(HtmlAstToIvyAst, [{
          key: "visitElement",
          value: function visitElement(element) {
            var _this164 = this;

            var isI18nRootElement = isI18nRootNode(element.i18n);

            if (isI18nRootElement) {
              if (this.inI18nBlock) {
                this.reportError('Cannot mark an element as translatable inside of a translatable section. Please remove the nested i18n marker.', element.sourceSpan);
              }

              this.inI18nBlock = true;
            }

            var preparsedElement = preparseElement(element);

            if (preparsedElement.type === PreparsedElementType.SCRIPT) {
              return null;
            } else if (preparsedElement.type === PreparsedElementType.STYLE) {
              var contents = textContents(element);

              if (contents !== null) {
                this.styles.push(contents);
              }

              return null;
            } else if (preparsedElement.type === PreparsedElementType.STYLESHEET && isStyleUrlResolvable(preparsedElement.hrefAttr)) {
              this.styleUrls.push(preparsedElement.hrefAttr);
              return null;
            } // Whether the element is a `<ng-template>`


            var isTemplateElement = isNgTemplate(element.name);
            var parsedProperties = [];
            var boundEvents = [];
            var variables = [];
            var references = [];
            var attributes = [];
            var i18nAttrsMeta = {};
            var templateParsedProperties = [];
            var templateVariables = []; // Whether the element has any *-attribute

            var elementHasInlineTemplate = false;

            var _iterator15 = _createForOfIteratorHelper(element.attrs),
                _step15;

            try {
              for (_iterator15.s(); !(_step15 = _iterator15.n()).done;) {
                var attribute = _step15.value;
                var hasBinding = false;
                var normalizedName = normalizeAttributeName(attribute.name); // `*attr` defines template bindings

                var isTemplateBinding = false;

                if (attribute.i18n) {
                  i18nAttrsMeta[attribute.name] = attribute.i18n;
                }

                if (normalizedName.startsWith(TEMPLATE_ATTR_PREFIX$2)) {
                  // *-attributes
                  if (elementHasInlineTemplate) {
                    this.reportError("Can't have multiple template bindings on one element. Use only one attribute prefixed with *", attribute.sourceSpan);
                  }

                  isTemplateBinding = true;
                  elementHasInlineTemplate = true;
                  var templateValue = attribute.value;
                  var templateKey = normalizedName.substring(TEMPLATE_ATTR_PREFIX$2.length);
                  var parsedVariables = [];
                  var absoluteValueOffset = attribute.valueSpan ? attribute.valueSpan.start.offset : // If there is no value span the attribute does not have a value, like `attr` in
                  //`<div attr></div>`. In this case, point to one character beyond the last character of
                  // the attribute name.
                  attribute.sourceSpan.start.offset + attribute.name.length;
                  this.bindingParser.parseInlineTemplateBinding(templateKey, templateValue, attribute.sourceSpan, absoluteValueOffset, [], templateParsedProperties, parsedVariables, true
                  /* isIvyAst */
                  );
                  templateVariables.push.apply(templateVariables, _toConsumableArray(parsedVariables.map(function (v) {
                    return new Variable(v.name, v.value, v.sourceSpan, v.keySpan, v.valueSpan);
                  })));
                } else {
                  // Check for variables, events, property bindings, interpolation
                  hasBinding = this.parseAttribute(isTemplateElement, attribute, [], parsedProperties, boundEvents, variables, references);
                }

                if (!hasBinding && !isTemplateBinding) {
                  // don't include the bindings as attributes as well in the AST
                  attributes.push(this.visitAttribute(attribute));
                }
              }
            } catch (err) {
              _iterator15.e(err);
            } finally {
              _iterator15.f();
            }

            var children = visitAll$1(preparsedElement.nonBindable ? NON_BINDABLE_VISITOR$1 : this, element.children);
            var parsedElement;

            if (preparsedElement.type === PreparsedElementType.NG_CONTENT) {
              // `<ng-content>`
              if (element.children && !element.children.every(function (node) {
                return isEmptyTextNode(node) || isCommentNode(node);
              })) {
                this.reportError("<ng-content> element cannot have content.", element.sourceSpan);
              }

              var selector = preparsedElement.selectAttr;
              var attrs = element.attrs.map(function (attr) {
                return _this164.visitAttribute(attr);
              });
              parsedElement = new Content(selector, attrs, element.sourceSpan, element.i18n);
              this.ngContentSelectors.push(selector);
            } else if (isTemplateElement) {
              // `<ng-template>`
              var _attrs = this.extractAttributes(element.name, parsedProperties, i18nAttrsMeta);

              parsedElement = new Template(element.name, attributes, _attrs.bound, boundEvents, [
                /* no template attributes */
              ], children, references, variables, element.sourceSpan, element.startSourceSpan, element.endSourceSpan, element.i18n);
            } else {
              var _attrs2 = this.extractAttributes(element.name, parsedProperties, i18nAttrsMeta);

              parsedElement = new Element(element.name, attributes, _attrs2.bound, boundEvents, children, references, element.sourceSpan, element.startSourceSpan, element.endSourceSpan, element.i18n);
            }

            if (elementHasInlineTemplate) {
              // If this node is an inline-template (e.g. has *ngFor) then we need to create a template
              // node that contains this node.
              // Moreover, if the node is an element, then we need to hoist its attributes to the template
              // node for matching against content projection selectors.
              var _attrs3 = this.extractAttributes('ng-template', templateParsedProperties, i18nAttrsMeta);

              var templateAttrs = [];

              _attrs3.literal.forEach(function (attr) {
                return templateAttrs.push(attr);
              });

              _attrs3.bound.forEach(function (attr) {
                return templateAttrs.push(attr);
              });

              var hoistedAttrs = parsedElement instanceof Element ? {
                attributes: parsedElement.attributes,
                inputs: parsedElement.inputs,
                outputs: parsedElement.outputs
              } : {
                attributes: [],
                inputs: [],
                outputs: []
              }; // For <ng-template>s with structural directives on them, avoid passing i18n information to
              // the wrapping template to prevent unnecessary i18n instructions from being generated. The
              // necessary i18n meta information will be extracted from child elements.

              var i18n = isTemplateElement && isI18nRootElement ? undefined : element.i18n; // TODO(pk): test for this case

              parsedElement = new Template(parsedElement.name, hoistedAttrs.attributes, hoistedAttrs.inputs, hoistedAttrs.outputs, templateAttrs, [parsedElement], [
                /* no references */
              ], templateVariables, element.sourceSpan, element.startSourceSpan, element.endSourceSpan, i18n);
            }

            if (isI18nRootElement) {
              this.inI18nBlock = false;
            }

            return parsedElement;
          }
        }, {
          key: "visitAttribute",
          value: function visitAttribute(attribute) {
            return new TextAttribute(attribute.name, attribute.value, attribute.sourceSpan, attribute.keySpan, attribute.valueSpan, attribute.i18n);
          }
        }, {
          key: "visitText",
          value: function visitText(text) {
            return this._visitTextWithInterpolation(text.value, text.sourceSpan, text.i18n);
          }
        }, {
          key: "visitExpansion",
          value: function visitExpansion(expansion) {
            var _this165 = this;

            if (!expansion.i18n) {
              // do not generate Icu in case it was created
              // outside of i18n block in a template
              return null;
            }

            if (!isI18nRootNode(expansion.i18n)) {
              throw new Error("Invalid type \"".concat(expansion.i18n.constructor, "\" for \"i18n\" property of ").concat(expansion.sourceSpan.toString(), ". Expected a \"Message\""));
            }

            var message = expansion.i18n;
            var vars = {};
            var placeholders = {}; // extract VARs from ICUs - we process them separately while
            // assembling resulting message via goog.getMsg function, since
            // we need to pass them to top-level goog.getMsg call

            Object.keys(message.placeholders).forEach(function (key) {
              var value = message.placeholders[key];

              if (key.startsWith(I18N_ICU_VAR_PREFIX)) {
                // Currently when the `plural` or `select` keywords in an ICU contain trailing spaces (e.g.
                // `{count, select , ...}`), these spaces are also included into the key names in ICU vars
                // (e.g. "VAR_SELECT "). These trailing spaces are not desirable, since they will later be
                // converted into `_` symbols while normalizing placeholder names, which might lead to
                // mismatches at runtime (i.e. placeholder will not be replaced with the correct value).
                var formattedKey = key.trim();

                var ast = _this165.bindingParser.parseInterpolationExpression(value.text, value.sourceSpan);

                vars[formattedKey] = new BoundText(ast, value.sourceSpan);
              } else {
                placeholders[key] = _this165._visitTextWithInterpolation(value.text, value.sourceSpan);
              }
            });
            return new Icu(vars, placeholders, expansion.sourceSpan, message);
          }
        }, {
          key: "visitExpansionCase",
          value: function visitExpansionCase(expansionCase) {
            return null;
          }
        }, {
          key: "visitComment",
          value: function visitComment(comment) {
            return null;
          } // convert view engine `ParsedProperty` to a format suitable for IVY

        }, {
          key: "extractAttributes",
          value: function extractAttributes(elementName, properties, i18nPropsMeta) {
            var _this166 = this;

            var bound = [];
            var literal = [];
            properties.forEach(function (prop) {
              var i18n = i18nPropsMeta[prop.name];

              if (prop.isLiteral) {
                literal.push(new TextAttribute(prop.name, prop.expression.source || '', prop.sourceSpan, prop.keySpan, prop.valueSpan, i18n));
              } else {
                // Note that validation is skipped and property mapping is disabled
                // due to the fact that we need to make sure a given prop is not an
                // input of a directive and directive matching happens at runtime.
                var bep = _this166.bindingParser.createBoundElementProperty(elementName, prop,
                /* skipValidation */
                true,
                /* mapPropertyName */
                false);

                bound.push(BoundAttribute.fromBoundElementProperty(bep, i18n));
              }
            });
            return {
              bound: bound,
              literal: literal
            };
          }
        }, {
          key: "parseAttribute",
          value: function parseAttribute(isTemplateElement, attribute, matchableAttributes, parsedProperties, boundEvents, variables, references) {
            var name = normalizeAttributeName(attribute.name);
            var value = attribute.value;
            var srcSpan = attribute.sourceSpan;
            var absoluteOffset = attribute.valueSpan ? attribute.valueSpan.start.offset : srcSpan.start.offset;

            function createKeySpan(srcSpan, prefix, identifier) {
              // We need to adjust the start location for the keySpan to account for the removed 'data-'
              // prefix from `normalizeAttributeName`.
              var normalizationAdjustment = attribute.name.length - name.length;
              var keySpanStart = srcSpan.start.moveBy(prefix.length + normalizationAdjustment);
              var keySpanEnd = keySpanStart.moveBy(identifier.length);
              return new ParseSourceSpan(keySpanStart, keySpanEnd, keySpanStart, identifier);
            }

            var bindParts = name.match(BIND_NAME_REGEXP$1);

            if (bindParts) {
              if (bindParts[KW_BIND_IDX$1] != null) {
                var identifier = bindParts[IDENT_KW_IDX$1];

                var _keySpan = createKeySpan(srcSpan, bindParts[KW_BIND_IDX$1], identifier);

                this.bindingParser.parsePropertyBinding(identifier, value, false, srcSpan, absoluteOffset, attribute.valueSpan, matchableAttributes, parsedProperties, _keySpan);
              } else if (bindParts[KW_LET_IDX$1]) {
                if (isTemplateElement) {
                  var _identifier2 = bindParts[IDENT_KW_IDX$1];

                  var _keySpan2 = createKeySpan(srcSpan, bindParts[KW_LET_IDX$1], _identifier2);

                  this.parseVariable(_identifier2, value, srcSpan, _keySpan2, attribute.valueSpan, variables);
                } else {
                  this.reportError("\"let-\" is only supported on ng-template elements.", srcSpan);
                }
              } else if (bindParts[KW_REF_IDX$1]) {
                var _identifier3 = bindParts[IDENT_KW_IDX$1];

                var _keySpan3 = createKeySpan(srcSpan, bindParts[KW_REF_IDX$1], _identifier3);

                this.parseReference(_identifier3, value, srcSpan, _keySpan3, attribute.valueSpan, references);
              } else if (bindParts[KW_ON_IDX$1]) {
                var events = [];
                var _identifier4 = bindParts[IDENT_KW_IDX$1];

                var _keySpan4 = createKeySpan(srcSpan, bindParts[KW_ON_IDX$1], _identifier4);

                this.bindingParser.parseEvent(_identifier4, value, srcSpan, attribute.valueSpan || srcSpan, matchableAttributes, events, _keySpan4);
                addEvents(events, boundEvents);
              } else if (bindParts[KW_BINDON_IDX$1]) {
                var _identifier5 = bindParts[IDENT_KW_IDX$1];

                var _keySpan5 = createKeySpan(srcSpan, bindParts[KW_BINDON_IDX$1], _identifier5);

                this.bindingParser.parsePropertyBinding(_identifier5, value, false, srcSpan, absoluteOffset, attribute.valueSpan, matchableAttributes, parsedProperties, _keySpan5);
                this.parseAssignmentEvent(_identifier5, value, srcSpan, attribute.valueSpan, matchableAttributes, boundEvents, _keySpan5);
              } else if (bindParts[KW_AT_IDX$1]) {
                var _keySpan6 = createKeySpan(srcSpan, '', name);

                this.bindingParser.parseLiteralAttr(name, value, srcSpan, absoluteOffset, attribute.valueSpan, matchableAttributes, parsedProperties, _keySpan6);
              }

              return true;
            } // We didn't see a kw-prefixed property binding, but we have not yet checked
            // for the []/()/[()] syntax.


            var delims = null;

            if (name.startsWith(BINDING_DELIMS.BANANA_BOX.start)) {
              delims = BINDING_DELIMS.BANANA_BOX;
            } else if (name.startsWith(BINDING_DELIMS.PROPERTY.start)) {
              delims = BINDING_DELIMS.PROPERTY;
            } else if (name.startsWith(BINDING_DELIMS.EVENT.start)) {
              delims = BINDING_DELIMS.EVENT;
            }

            if (delims !== null && // NOTE: older versions of the parser would match a start/end delimited
            // binding iff the property name was terminated by the ending delimiter
            // and the identifier in the binding was non-empty.
            // TODO(ayazhafiz): update this to handle malformed bindings.
            name.endsWith(delims.end) && name.length > delims.start.length + delims.end.length) {
              var _identifier6 = name.substring(delims.start.length, name.length - delims.end.length);

              var _keySpan7 = createKeySpan(srcSpan, delims.start, _identifier6);

              if (delims.start === BINDING_DELIMS.BANANA_BOX.start) {
                this.bindingParser.parsePropertyBinding(_identifier6, value, false, srcSpan, absoluteOffset, attribute.valueSpan, matchableAttributes, parsedProperties, _keySpan7);
                this.parseAssignmentEvent(_identifier6, value, srcSpan, attribute.valueSpan, matchableAttributes, boundEvents, _keySpan7);
              } else if (delims.start === BINDING_DELIMS.PROPERTY.start) {
                this.bindingParser.parsePropertyBinding(_identifier6, value, false, srcSpan, absoluteOffset, attribute.valueSpan, matchableAttributes, parsedProperties, _keySpan7);
              } else {
                var _events = [];
                this.bindingParser.parseEvent(_identifier6, value, srcSpan, attribute.valueSpan || srcSpan, matchableAttributes, _events, _keySpan7);
                addEvents(_events, boundEvents);
              }

              return true;
            } // No explicit binding found.


            var keySpan = createKeySpan(srcSpan, ''
            /* prefix */
            , name);
            var hasBinding = this.bindingParser.parsePropertyInterpolation(name, value, srcSpan, attribute.valueSpan, matchableAttributes, parsedProperties, keySpan);
            return hasBinding;
          }
        }, {
          key: "_visitTextWithInterpolation",
          value: function _visitTextWithInterpolation(value, sourceSpan, i18n) {
            var valueNoNgsp = replaceNgsp(value);
            var expr = this.bindingParser.parseInterpolation(valueNoNgsp, sourceSpan);
            return expr ? new BoundText(expr, sourceSpan, i18n) : new Text(valueNoNgsp, sourceSpan);
          }
        }, {
          key: "parseVariable",
          value: function parseVariable(identifier, value, sourceSpan, keySpan, valueSpan, variables) {
            if (identifier.indexOf('-') > -1) {
              this.reportError("\"-\" is not allowed in variable names", sourceSpan);
            } else if (identifier.length === 0) {
              this.reportError("Variable does not have a name", sourceSpan);
            }

            variables.push(new Variable(identifier, value, sourceSpan, keySpan, valueSpan));
          }
        }, {
          key: "parseReference",
          value: function parseReference(identifier, value, sourceSpan, keySpan, valueSpan, references) {
            if (identifier.indexOf('-') > -1) {
              this.reportError("\"-\" is not allowed in reference names", sourceSpan);
            } else if (identifier.length === 0) {
              this.reportError("Reference does not have a name", sourceSpan);
            } else if (references.some(function (reference) {
              return reference.name === identifier;
            })) {
              this.reportError("Reference \"#".concat(identifier, "\" is defined more than once"), sourceSpan);
            }

            references.push(new Reference(identifier, value, sourceSpan, keySpan, valueSpan));
          }
        }, {
          key: "parseAssignmentEvent",
          value: function parseAssignmentEvent(name, expression, sourceSpan, valueSpan, targetMatchableAttrs, boundEvents, keySpan) {
            var events = [];
            this.bindingParser.parseEvent("".concat(name, "Change"), "".concat(expression, "=$event"), sourceSpan, valueSpan || sourceSpan, targetMatchableAttrs, events, keySpan);
            addEvents(events, boundEvents);
          }
        }, {
          key: "reportError",
          value: function reportError(message, sourceSpan) {
            var level = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : ParseErrorLevel.ERROR;
            this.errors.push(new ParseError(sourceSpan, message, level));
          }
        }]);

        return HtmlAstToIvyAst;
      }();

      var NonBindableVisitor$1 = /*#__PURE__*/function () {
        function NonBindableVisitor$1() {
          _classCallCheck(this, NonBindableVisitor$1);
        }

        _createClass(NonBindableVisitor$1, [{
          key: "visitElement",
          value: function visitElement(ast) {
            var preparsedElement = preparseElement(ast);

            if (preparsedElement.type === PreparsedElementType.SCRIPT || preparsedElement.type === PreparsedElementType.STYLE || preparsedElement.type === PreparsedElementType.STYLESHEET) {
              // Skipping <script> for security reasons
              // Skipping <style> and stylesheets as we already processed them
              // in the StyleCompiler
              return null;
            }

            var children = visitAll$1(this, ast.children, null);
            return new Element(ast.name, visitAll$1(this, ast.attrs),
            /* inputs */
            [],
            /* outputs */
            [], children,
            /* references */
            [], ast.sourceSpan, ast.startSourceSpan, ast.endSourceSpan);
          }
        }, {
          key: "visitComment",
          value: function visitComment(comment) {
            return null;
          }
        }, {
          key: "visitAttribute",
          value: function visitAttribute(attribute) {
            return new TextAttribute(attribute.name, attribute.value, attribute.sourceSpan, attribute.keySpan, attribute.valueSpan, attribute.i18n);
          }
        }, {
          key: "visitText",
          value: function visitText(text) {
            return new Text(text.value, text.sourceSpan);
          }
        }, {
          key: "visitExpansion",
          value: function visitExpansion(expansion) {
            return null;
          }
        }, {
          key: "visitExpansionCase",
          value: function visitExpansionCase(expansionCase) {
            return null;
          }
        }]);

        return NonBindableVisitor$1;
      }();

      var NON_BINDABLE_VISITOR$1 = new NonBindableVisitor$1();

      function normalizeAttributeName(attrName) {
        return /^data-/i.test(attrName) ? attrName.substring(5) : attrName;
      }

      function addEvents(events, boundEvents) {
        boundEvents.push.apply(boundEvents, _toConsumableArray(events.map(function (e) {
          return BoundEvent.fromParsedEvent(e);
        })));
      }

      function isEmptyTextNode(node) {
        return node instanceof Text$3 && node.value.trim().length == 0;
      }

      function isCommentNode(node) {
        return node instanceof Comment;
      }

      function textContents(node) {
        if (node.children.length !== 1 || !(node.children[0] instanceof Text$3)) {
          return null;
        } else {
          return node.children[0].value;
        }
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      var TagType;

      (function (TagType) {
        TagType[TagType["ELEMENT"] = 0] = "ELEMENT";
        TagType[TagType["TEMPLATE"] = 1] = "TEMPLATE";
      })(TagType || (TagType = {}));
      /**
       * Generates an object that is used as a shared state between parent and all child contexts.
       */


      function setupRegistry() {
        return {
          getUniqueId: getSeqNumberGenerator(),
          icus: new Map()
        };
      }
      /**
       * I18nContext is a helper class which keeps track of all i18n-related aspects
       * (accumulates placeholders, bindings, etc) between i18nStart and i18nEnd instructions.
       *
       * When we enter a nested template, the top-level context is being passed down
       * to the nested component, which uses this context to generate a child instance
       * of I18nContext class (to handle nested template) and at the end, reconciles it back
       * with the parent context.
       *
       * @param index Instruction index of i18nStart, which initiates this context
       * @param ref Reference to a translation const that represents the content if thus context
       * @param level Nestng level defined for child contexts
       * @param templateIndex Instruction index of a template which this context belongs to
       * @param meta Meta information (id, meaning, description, etc) associated with this context
       */


      var I18nContext = /*#__PURE__*/function () {
        function I18nContext(index, ref) {
          var level = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
          var templateIndex = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;
          var meta = arguments.length > 4 ? arguments[4] : undefined;
          var registry = arguments.length > 5 ? arguments[5] : undefined;

          _classCallCheck(this, I18nContext);

          this.index = index;
          this.ref = ref;
          this.level = level;
          this.templateIndex = templateIndex;
          this.meta = meta;
          this.registry = registry;
          this.bindings = new Set();
          this.placeholders = new Map();
          this.isEmitted = false;
          this._unresolvedCtxCount = 0;
          this._registry = registry || setupRegistry();
          this.id = this._registry.getUniqueId();
        }

        _createClass(I18nContext, [{
          key: "appendTag",
          value: function appendTag(type, node, index, closed) {
            if (node.isVoid && closed) {
              return; // ignore "close" for void tags
            }

            var ph = node.isVoid || !closed ? node.startName : node.closeName;
            var content = {
              type: type,
              index: index,
              ctx: this.id,
              isVoid: node.isVoid,
              closed: closed
            };
            updatePlaceholderMap(this.placeholders, ph, content);
          }
        }, {
          key: "icus",
          get: function get() {
            return this._registry.icus;
          }
        }, {
          key: "isRoot",
          get: function get() {
            return this.level === 0;
          }
        }, {
          key: "isResolved",
          get: function get() {
            return this._unresolvedCtxCount === 0;
          }
        }, {
          key: "getSerializedPlaceholders",
          value: function getSerializedPlaceholders() {
            var result = new Map();
            this.placeholders.forEach(function (values, key) {
              return result.set(key, values.map(serializePlaceholderValue));
            });
            return result;
          } // public API to accumulate i18n-related content

        }, {
          key: "appendBinding",
          value: function appendBinding(binding) {
            this.bindings.add(binding);
          }
        }, {
          key: "appendIcu",
          value: function appendIcu(name, ref) {
            updatePlaceholderMap(this._registry.icus, name, ref);
          }
        }, {
          key: "appendBoundText",
          value: function appendBoundText(node) {
            var _this167 = this;

            var phs = assembleBoundTextPlaceholders(node, this.bindings.size, this.id);
            phs.forEach(function (values, key) {
              return updatePlaceholderMap.apply(void 0, [_this167.placeholders, key].concat(_toConsumableArray(values)));
            });
          }
        }, {
          key: "appendTemplate",
          value: function appendTemplate(node, index) {
            // add open and close tags at the same time,
            // since we process nested templates separately
            this.appendTag(TagType.TEMPLATE, node, index, false);
            this.appendTag(TagType.TEMPLATE, node, index, true);
            this._unresolvedCtxCount++;
          }
        }, {
          key: "appendElement",
          value: function appendElement(node, index, closed) {
            this.appendTag(TagType.ELEMENT, node, index, closed);
          }
        }, {
          key: "appendProjection",
          value: function appendProjection(node, index) {
            // Add open and close tags at the same time, since `<ng-content>` has no content,
            // so when we come across `<ng-content>` we can register both open and close tags.
            // Note: runtime i18n logic doesn't distinguish `<ng-content>` tag placeholders and
            // regular element tag placeholders, so we generate element placeholders for both types.
            this.appendTag(TagType.ELEMENT, node, index, false);
            this.appendTag(TagType.ELEMENT, node, index, true);
          }
          /**
           * Generates an instance of a child context based on the root one,
           * when we enter a nested template within I18n section.
           *
           * @param index Instruction index of corresponding i18nStart, which initiates this context
           * @param templateIndex Instruction index of a template which this context belongs to
           * @param meta Meta information (id, meaning, description, etc) associated with this context
           *
           * @returns I18nContext instance
           */

        }, {
          key: "forkChildContext",
          value: function forkChildContext(index, templateIndex, meta) {
            return new I18nContext(index, this.ref, this.level + 1, templateIndex, meta, this._registry);
          }
          /**
           * Reconciles child context into parent one once the end of the i18n block is reached (i18nEnd).
           *
           * @param context Child I18nContext instance to be reconciled with parent context.
           */

        }, {
          key: "reconcileChildContext",
          value: function reconcileChildContext(context) {
            var _this168 = this;

            // set the right context id for open and close
            // template tags, so we can use it as sub-block ids
            ['start', 'close'].forEach(function (op) {
              var key = context.meta["".concat(op, "Name")];
              var phs = _this168.placeholders.get(key) || [];
              var tag = phs.find(findTemplateFn(_this168.id, context.templateIndex));

              if (tag) {
                tag.ctx = context.id;
              }
            }); // reconcile placeholders

            var childPhs = context.placeholders;
            childPhs.forEach(function (values, key) {
              var phs = _this168.placeholders.get(key);

              if (!phs) {
                _this168.placeholders.set(key, values);

                return;
              } // try to find matching template...


              var tmplIdx = phs.findIndex(findTemplateFn(context.id, context.templateIndex));

              if (tmplIdx >= 0) {
                // ... if found - replace it with nested template content
                var isCloseTag = key.startsWith('CLOSE');
                var isTemplateTag = key.endsWith('NG-TEMPLATE');

                if (isTemplateTag) {
                  // current template's content is placed before or after
                  // parent template tag, depending on the open/close atrribute
                  phs.splice.apply(phs, [tmplIdx + (isCloseTag ? 0 : 1), 0].concat(_toConsumableArray(values)));
                } else {
                  var idx = isCloseTag ? values.length - 1 : 0;
                  values[idx].tmpl = phs[tmplIdx];
                  phs.splice.apply(phs, [tmplIdx, 1].concat(_toConsumableArray(values)));
                }
              } else {
                // ... otherwise just append content to placeholder value
                phs.push.apply(phs, _toConsumableArray(values));
              }

              _this168.placeholders.set(key, phs);
            });
            this._unresolvedCtxCount--;
          }
        }]);

        return I18nContext;
      }(); //
      // Helper methods
      //


      function wrap(symbol, index, contextId, closed) {
        var state = closed ? '/' : '';
        return wrapI18nPlaceholder("".concat(state).concat(symbol).concat(index), contextId);
      }

      function wrapTag(symbol, _ref14, closed) {
        var index = _ref14.index,
            ctx = _ref14.ctx,
            isVoid = _ref14.isVoid;
        return isVoid ? wrap(symbol, index, ctx) + wrap(symbol, index, ctx, true) : wrap(symbol, index, ctx, closed);
      }

      function findTemplateFn(ctx, templateIndex) {
        return function (token) {
          return typeof token === 'object' && token.type === TagType.TEMPLATE && token.index === templateIndex && token.ctx === ctx;
        };
      }

      function serializePlaceholderValue(value) {
        var element = function element(data, closed) {
          return wrapTag('#', data, closed);
        };

        var template = function template(data, closed) {
          return wrapTag('*', data, closed);
        };

        var projection = function projection(data, closed) {
          return wrapTag('!', data, closed);
        };

        switch (value.type) {
          case TagType.ELEMENT:
            // close element tag
            if (value.closed) {
              return element(value, true) + (value.tmpl ? template(value.tmpl, true) : '');
            } // open element tag that also initiates a template


            if (value.tmpl) {
              return template(value.tmpl) + element(value) + (value.isVoid ? template(value.tmpl, true) : '');
            }

            return element(value);

          case TagType.TEMPLATE:
            return template(value, value.closed);

          default:
            return value;
        }
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      var IcuSerializerVisitor = /*#__PURE__*/function () {
        function IcuSerializerVisitor() {
          _classCallCheck(this, IcuSerializerVisitor);
        }

        _createClass(IcuSerializerVisitor, [{
          key: "visitText",
          value: function visitText(text) {
            return text.value;
          }
        }, {
          key: "visitContainer",
          value: function visitContainer(container) {
            var _this169 = this;

            return container.children.map(function (child) {
              return child.visit(_this169);
            }).join('');
          }
        }, {
          key: "visitIcu",
          value: function visitIcu(icu) {
            var _this170 = this;

            var strCases = Object.keys(icu.cases).map(function (k) {
              return "".concat(k, " {").concat(icu.cases[k].visit(_this170), "}");
            });
            var result = "{".concat(icu.expressionPlaceholder, ", ").concat(icu.type, ", ").concat(strCases.join(' '), "}");
            return result;
          }
        }, {
          key: "visitTagPlaceholder",
          value: function visitTagPlaceholder(ph) {
            var _this171 = this;

            return ph.isVoid ? this.formatPh(ph.startName) : "".concat(this.formatPh(ph.startName)).concat(ph.children.map(function (child) {
              return child.visit(_this171);
            }).join('')).concat(this.formatPh(ph.closeName));
          }
        }, {
          key: "visitPlaceholder",
          value: function visitPlaceholder(ph) {
            return this.formatPh(ph.name);
          }
        }, {
          key: "visitIcuPlaceholder",
          value: function visitIcuPlaceholder(ph, context) {
            return this.formatPh(ph.name);
          }
        }, {
          key: "formatPh",
          value: function formatPh(value) {
            return "{".concat(formatI18nPlaceholderName(value,
            /* useCamelCase */
            false), "}");
          }
        }]);

        return IcuSerializerVisitor;
      }();

      var serializer = new IcuSerializerVisitor();

      function serializeIcuNode(icu) {
        return icu.visit(serializer);
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      var TAG_TO_PLACEHOLDER_NAMES = {
        'A': 'LINK',
        'B': 'BOLD_TEXT',
        'BR': 'LINE_BREAK',
        'EM': 'EMPHASISED_TEXT',
        'H1': 'HEADING_LEVEL1',
        'H2': 'HEADING_LEVEL2',
        'H3': 'HEADING_LEVEL3',
        'H4': 'HEADING_LEVEL4',
        'H5': 'HEADING_LEVEL5',
        'H6': 'HEADING_LEVEL6',
        'HR': 'HORIZONTAL_RULE',
        'I': 'ITALIC_TEXT',
        'LI': 'LIST_ITEM',
        'LINK': 'MEDIA_LINK',
        'OL': 'ORDERED_LIST',
        'P': 'PARAGRAPH',
        'Q': 'QUOTATION',
        'S': 'STRIKETHROUGH_TEXT',
        'SMALL': 'SMALL_TEXT',
        'SUB': 'SUBSTRIPT',
        'SUP': 'SUPERSCRIPT',
        'TBODY': 'TABLE_BODY',
        'TD': 'TABLE_CELL',
        'TFOOT': 'TABLE_FOOTER',
        'TH': 'TABLE_HEADER_CELL',
        'THEAD': 'TABLE_HEADER',
        'TR': 'TABLE_ROW',
        'TT': 'MONOSPACED_TEXT',
        'U': 'UNDERLINED_TEXT',
        'UL': 'UNORDERED_LIST'
      };
      /**
       * Creates unique names for placeholder with different content.
       *
       * Returns the same placeholder name when the content is identical.
       */

      var PlaceholderRegistry = /*#__PURE__*/function () {
        function PlaceholderRegistry() {
          _classCallCheck(this, PlaceholderRegistry);

          // Count the occurrence of the base name top generate a unique name
          this._placeHolderNameCounts = {}; // Maps signature to placeholder names

          this._signatureToName = {};
        }

        _createClass(PlaceholderRegistry, [{
          key: "getStartTagPlaceholderName",
          value: function getStartTagPlaceholderName(tag, attrs, isVoid) {
            var signature = this._hashTag(tag, attrs, isVoid);

            if (this._signatureToName[signature]) {
              return this._signatureToName[signature];
            }

            var upperTag = tag.toUpperCase();
            var baseName = TAG_TO_PLACEHOLDER_NAMES[upperTag] || "TAG_".concat(upperTag);

            var name = this._generateUniqueName(isVoid ? baseName : "START_".concat(baseName));

            this._signatureToName[signature] = name;
            return name;
          }
        }, {
          key: "getCloseTagPlaceholderName",
          value: function getCloseTagPlaceholderName(tag) {
            var signature = this._hashClosingTag(tag);

            if (this._signatureToName[signature]) {
              return this._signatureToName[signature];
            }

            var upperTag = tag.toUpperCase();
            var baseName = TAG_TO_PLACEHOLDER_NAMES[upperTag] || "TAG_".concat(upperTag);

            var name = this._generateUniqueName("CLOSE_".concat(baseName));

            this._signatureToName[signature] = name;
            return name;
          }
        }, {
          key: "getPlaceholderName",
          value: function getPlaceholderName(name, content) {
            var upperName = name.toUpperCase();
            var signature = "PH: ".concat(upperName, "=").concat(content);

            if (this._signatureToName[signature]) {
              return this._signatureToName[signature];
            }

            var uniqueName = this._generateUniqueName(upperName);

            this._signatureToName[signature] = uniqueName;
            return uniqueName;
          }
        }, {
          key: "getUniquePlaceholder",
          value: function getUniquePlaceholder(name) {
            return this._generateUniqueName(name.toUpperCase());
          } // Generate a hash for a tag - does not take attribute order into account

        }, {
          key: "_hashTag",
          value: function _hashTag(tag, attrs, isVoid) {
            var start = "<".concat(tag);
            var strAttrs = Object.keys(attrs).sort().map(function (name) {
              return " ".concat(name, "=").concat(attrs[name]);
            }).join('');
            var end = isVoid ? '/>' : "></".concat(tag, ">");
            return start + strAttrs + end;
          }
        }, {
          key: "_hashClosingTag",
          value: function _hashClosingTag(tag) {
            return this._hashTag("/".concat(tag), {}, false);
          }
        }, {
          key: "_generateUniqueName",
          value: function _generateUniqueName(base) {
            var seen = this._placeHolderNameCounts.hasOwnProperty(base);

            if (!seen) {
              this._placeHolderNameCounts[base] = 1;
              return base;
            }

            var id = this._placeHolderNameCounts[base];
            this._placeHolderNameCounts[base] = id + 1;
            return "".concat(base, "_").concat(id);
          }
        }]);

        return PlaceholderRegistry;
      }();
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      var _expParser = new Parser$1(new Lexer());
      /**
       * Returns a function converting html nodes to an i18n Message given an interpolationConfig
       */


      function createI18nMessageFactory(interpolationConfig) {
        var visitor = new _I18nVisitor(_expParser, interpolationConfig);
        return function (nodes, meaning, description, customId, visitNodeFn) {
          return visitor.toI18nMessage(nodes, meaning, description, customId, visitNodeFn);
        };
      }

      function noopVisitNodeFn(_html, i18n) {
        return i18n;
      }

      var _I18nVisitor = /*#__PURE__*/function () {
        function _I18nVisitor(_expressionParser, _interpolationConfig) {
          _classCallCheck(this, _I18nVisitor);

          this._expressionParser = _expressionParser;
          this._interpolationConfig = _interpolationConfig;
        }

        _createClass(_I18nVisitor, [{
          key: "toI18nMessage",
          value: function toI18nMessage(nodes) {
            var meaning = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
            var description = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';
            var customId = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : '';
            var visitNodeFn = arguments.length > 4 ? arguments[4] : undefined;
            var context = {
              isIcu: nodes.length == 1 && nodes[0] instanceof Expansion,
              icuDepth: 0,
              placeholderRegistry: new PlaceholderRegistry(),
              placeholderToContent: {},
              placeholderToMessage: {},
              visitNodeFn: visitNodeFn || noopVisitNodeFn
            };
            var i18nodes = visitAll$1(this, nodes, context);
            return new Message(i18nodes, context.placeholderToContent, context.placeholderToMessage, meaning, description, customId);
          }
        }, {
          key: "visitElement",
          value: function visitElement(el, context) {
            var _a;

            var children = visitAll$1(this, el.children, context);
            var attrs = {};
            el.attrs.forEach(function (attr) {
              // Do not visit the attributes, translatable ones are top-level ASTs
              attrs[attr.name] = attr.value;
            });
            var isVoid = getHtmlTagDefinition(el.name).isVoid;
            var startPhName = context.placeholderRegistry.getStartTagPlaceholderName(el.name, attrs, isVoid);
            context.placeholderToContent[startPhName] = {
              text: el.startSourceSpan.toString(),
              sourceSpan: el.startSourceSpan
            };
            var closePhName = '';

            if (!isVoid) {
              closePhName = context.placeholderRegistry.getCloseTagPlaceholderName(el.name);
              context.placeholderToContent[closePhName] = {
                text: "</".concat(el.name, ">"),
                sourceSpan: (_a = el.endSourceSpan) !== null && _a !== void 0 ? _a : el.sourceSpan
              };
            }

            var node = new TagPlaceholder(el.name, attrs, startPhName, closePhName, children, isVoid, el.sourceSpan, el.startSourceSpan, el.endSourceSpan);
            return context.visitNodeFn(el, node);
          }
        }, {
          key: "visitAttribute",
          value: function visitAttribute(attribute, context) {
            var node = this._visitTextWithInterpolation(attribute.value, attribute.valueSpan || attribute.sourceSpan, context, attribute.i18n);

            return context.visitNodeFn(attribute, node);
          }
        }, {
          key: "visitText",
          value: function visitText(text, context) {
            var node = this._visitTextWithInterpolation(text.value, text.sourceSpan, context, text.i18n);

            return context.visitNodeFn(text, node);
          }
        }, {
          key: "visitComment",
          value: function visitComment(comment, context) {
            return null;
          }
        }, {
          key: "visitExpansion",
          value: function visitExpansion(icu, context) {
            var _this172 = this;

            context.icuDepth++;
            var i18nIcuCases = {};
            var i18nIcu = new Icu$1(icu.switchValue, icu.type, i18nIcuCases, icu.sourceSpan);
            icu.cases.forEach(function (caze) {
              i18nIcuCases[caze.value] = new Container(caze.expression.map(function (node) {
                return node.visit(_this172, context);
              }), caze.expSourceSpan);
            });
            context.icuDepth--;

            if (context.isIcu || context.icuDepth > 0) {
              // Returns an ICU node when:
              // - the message (vs a part of the message) is an ICU message, or
              // - the ICU message is nested.
              var expPh = context.placeholderRegistry.getUniquePlaceholder("VAR_".concat(icu.type));
              i18nIcu.expressionPlaceholder = expPh;
              context.placeholderToContent[expPh] = {
                text: icu.switchValue,
                sourceSpan: icu.switchValueSourceSpan
              };
              return context.visitNodeFn(icu, i18nIcu);
            } // Else returns a placeholder
            // ICU placeholders should not be replaced with their original content but with the their
            // translations.
            // TODO(vicb): add a html.Node -> i18n.Message cache to avoid having to re-create the msg


            var phName = context.placeholderRegistry.getPlaceholderName('ICU', icu.sourceSpan.toString());
            context.placeholderToMessage[phName] = this.toI18nMessage([icu], '', '', '', undefined);
            var node = new IcuPlaceholder(i18nIcu, phName, icu.sourceSpan);
            return context.visitNodeFn(icu, node);
          }
        }, {
          key: "visitExpansionCase",
          value: function visitExpansionCase(_icuCase, _context) {
            throw new Error('Unreachable code');
          }
          /**
           * Split the, potentially interpolated, text up into text and placeholder pieces.
           *
           * @param text The potentially interpolated string to be split.
           * @param sourceSpan The span of the whole of the `text` string.
           * @param context The current context of the visitor, used to compute and store placeholders.
           * @param previousI18n Any i18n metadata associated with this `text` from a previous pass.
           */

        }, {
          key: "_visitTextWithInterpolation",
          value: function _visitTextWithInterpolation(text, sourceSpan, context, previousI18n) {
            var _this$_expressionPars = this._expressionParser.splitInterpolation(text, sourceSpan.start.toString(), this._interpolationConfig),
                strings = _this$_expressionPars.strings,
                expressions = _this$_expressionPars.expressions; // No expressions, return a single text.


            if (expressions.length === 0) {
              return new Text$1(text, sourceSpan);
            } // Return a sequence of `Text` and `Placeholder` nodes grouped in a `Container`.


            var nodes = [];

            for (var i = 0; i < strings.length - 1; i++) {
              this._addText(nodes, strings[i], sourceSpan);

              this._addPlaceholder(nodes, context, expressions[i], sourceSpan);
            } // The last index contains no expression


            this._addText(nodes, strings[strings.length - 1], sourceSpan); // Whitespace removal may have invalidated the interpolation source-spans.


            reusePreviousSourceSpans(nodes, previousI18n);
            return new Container(nodes, sourceSpan);
          }
          /**
           * Create a new `Text` node from the `textPiece` and add it to the `nodes` collection.
           *
           * @param nodes The nodes to which the created `Text` node should be added.
           * @param textPiece The text and relative span information for this `Text` node.
           * @param interpolationSpan The span of the whole interpolated text.
           */

        }, {
          key: "_addText",
          value: function _addText(nodes, textPiece, interpolationSpan) {
            if (textPiece.text.length > 0) {
              // No need to add empty strings
              var stringSpan = getOffsetSourceSpan(interpolationSpan, textPiece);
              nodes.push(new Text$1(textPiece.text, stringSpan));
            }
          }
          /**
           * Create a new `Placeholder` node from the `expression` and add it to the `nodes` collection.
           *
           * @param nodes The nodes to which the created `Text` node should be added.
           * @param context The current context of the visitor, used to compute and store placeholders.
           * @param expression The expression text and relative span information for this `Placeholder`
           *     node.
           * @param interpolationSpan The span of the whole interpolated text.
           */

        }, {
          key: "_addPlaceholder",
          value: function _addPlaceholder(nodes, context, expression, interpolationSpan) {
            var sourceSpan = getOffsetSourceSpan(interpolationSpan, expression);
            var baseName = extractPlaceholderName(expression.text) || 'INTERPOLATION';
            var phName = context.placeholderRegistry.getPlaceholderName(baseName, expression.text);
            var text = this._interpolationConfig.start + expression.text + this._interpolationConfig.end;
            context.placeholderToContent[phName] = {
              text: text,
              sourceSpan: sourceSpan
            };
            nodes.push(new Placeholder(expression.text, phName, sourceSpan));
          }
        }]);

        return _I18nVisitor;
      }();
      /**
       * Re-use the source-spans from `previousI18n` metadata for the `nodes`.
       *
       * Whitespace removal can invalidate the source-spans of interpolation nodes, so we
       * reuse the source-span stored from a previous pass before the whitespace was removed.
       *
       * @param nodes The `Text` and `Placeholder` nodes to be processed.
       * @param previousI18n Any i18n metadata for these `nodes` stored from a previous pass.
       */


      function reusePreviousSourceSpans(nodes, previousI18n) {
        if (previousI18n instanceof Message) {
          // The `previousI18n` is an i18n `Message`, so we are processing an `Attribute` with i18n
          // metadata. The `Message` should consist only of a single `Container` that contains the
          // parts (`Text` and `Placeholder`) to process.
          assertSingleContainerMessage(previousI18n);
          previousI18n = previousI18n.nodes[0];
        }

        if (previousI18n instanceof Container) {
          // The `previousI18n` is a `Container`, which means that this is a second i18n extraction pass
          // after whitespace has been removed from the AST ndoes.
          assertEquivalentNodes(previousI18n.children, nodes); // Reuse the source-spans from the first pass.

          for (var i = 0; i < nodes.length; i++) {
            nodes[i].sourceSpan = previousI18n.children[i].sourceSpan;
          }
        }
      }
      /**
       * Asserts that the `message` contains exactly one `Container` node.
       */


      function assertSingleContainerMessage(message) {
        var nodes = message.nodes;

        if (nodes.length !== 1 || !(nodes[0] instanceof Container)) {
          throw new Error('Unexpected previous i18n message - expected it to consist of only a single `Container` node.');
        }
      }
      /**
       * Asserts that the `previousNodes` and `node` collections have the same number of elements and
       * corresponding elements have the same node type.
       */


      function assertEquivalentNodes(previousNodes, nodes) {
        if (previousNodes.length !== nodes.length) {
          throw new Error('The number of i18n message children changed between first and second pass.');
        }

        if (previousNodes.some(function (node, i) {
          return nodes[i].constructor !== node.constructor;
        })) {
          throw new Error('The types of the i18n message children changed between first and second pass.');
        }
      }
      /**
       * Create a new `ParseSourceSpan` from the `sourceSpan`, offset by the `start` and `end` values.
       */


      function getOffsetSourceSpan(sourceSpan, _ref15) {
        var start = _ref15.start,
            end = _ref15.end;
        return new ParseSourceSpan(sourceSpan.fullStart.moveBy(start), sourceSpan.fullStart.moveBy(end));
      }

      var _CUSTOM_PH_EXP = /\/\/[\s\S]*i18n[\s\S]*\([\s\S]*ph[\s\S]*=[\s\S]*("|')([\s\S]*?)\1[\s\S]*\)/g;

      function extractPlaceholderName(input) {
        return input.split(_CUSTOM_PH_EXP)[2];
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * An i18n error.
       */


      var I18nError = /*#__PURE__*/function (_ParseError6) {
        _inherits(I18nError, _ParseError6);

        var _super98 = _createSuper(I18nError);

        function I18nError(span, msg) {
          _classCallCheck(this, I18nError);

          return _super98.call(this, span, msg);
        }

        return I18nError;
      }(ParseError);
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      var setI18nRefs = function setI18nRefs(htmlNode, i18nNode) {
        if (htmlNode instanceof NodeWithI18n) {
          if (i18nNode instanceof IcuPlaceholder && htmlNode.i18n instanceof Message) {
            // This html node represents an ICU but this is a second processing pass, and the legacy id
            // was computed in the previous pass and stored in the `i18n` property as a message.
            // We are about to wipe out that property so capture the previous message to be reused when
            // generating the message for this ICU later. See `_generateI18nMessage()`.
            i18nNode.previousMessage = htmlNode.i18n;
          }

          htmlNode.i18n = i18nNode;
        }

        return i18nNode;
      };
      /**
       * This visitor walks over HTML parse tree and converts information stored in
       * i18n-related attributes ("i18n" and "i18n-*") into i18n meta object that is
       * stored with other element's and attribute's information.
       */


      var I18nMetaVisitor = /*#__PURE__*/function () {
        function I18nMetaVisitor() {
          var interpolationConfig = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : DEFAULT_INTERPOLATION_CONFIG;
          var keepI18nAttrs = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
          var enableI18nLegacyMessageIdFormat = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

          _classCallCheck(this, I18nMetaVisitor);

          this.interpolationConfig = interpolationConfig;
          this.keepI18nAttrs = keepI18nAttrs;
          this.enableI18nLegacyMessageIdFormat = enableI18nLegacyMessageIdFormat; // whether visited nodes contain i18n information

          this.hasI18nMeta = false;
          this._errors = []; // i18n message generation factory

          this._createI18nMessage = createI18nMessageFactory(this.interpolationConfig);
        }

        _createClass(I18nMetaVisitor, [{
          key: "_generateI18nMessage",
          value: function _generateI18nMessage(nodes) {
            var meta = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
            var visitNodeFn = arguments.length > 2 ? arguments[2] : undefined;

            var _this$_parseMetadata = this._parseMetadata(meta),
                meaning = _this$_parseMetadata.meaning,
                description = _this$_parseMetadata.description,
                customId = _this$_parseMetadata.customId;

            var message = this._createI18nMessage(nodes, meaning, description, customId, visitNodeFn);

            this._setMessageId(message, meta);

            this._setLegacyIds(message, meta);

            return message;
          }
        }, {
          key: "visitAllWithErrors",
          value: function visitAllWithErrors(nodes) {
            var _this173 = this;

            var result = nodes.map(function (node) {
              return node.visit(_this173, null);
            });
            return new ParseTreeResult(result, this._errors);
          }
        }, {
          key: "visitElement",
          value: function visitElement(element) {
            if (hasI18nAttrs(element)) {
              this.hasI18nMeta = true;
              var attrs = [];
              var attrsMeta = {};

              var _iterator16 = _createForOfIteratorHelper(element.attrs),
                  _step16;

              try {
                for (_iterator16.s(); !(_step16 = _iterator16.n()).done;) {
                  var _attr = _step16.value;

                  if (_attr.name === I18N_ATTR) {
                    // root 'i18n' node attribute
                    var i18n = element.i18n || _attr.value;

                    var message = this._generateI18nMessage(element.children, i18n, setI18nRefs); // do not assign empty i18n meta


                    if (message.nodes.length) {
                      element.i18n = message;
                    }
                  } else if (_attr.name.startsWith(I18N_ATTR_PREFIX)) {
                    // 'i18n-*' attributes
                    var name = _attr.name.slice(I18N_ATTR_PREFIX.length);

                    if (isTrustedTypesSink(element.name, name)) {
                      this._reportError(_attr, "Translating attribute '".concat(name, "' is disallowed for security reasons."));
                    } else {
                      attrsMeta[name] = _attr.value;
                    }
                  } else {
                    // non-i18n attributes
                    attrs.push(_attr);
                  }
                } // set i18n meta for attributes

              } catch (err) {
                _iterator16.e(err);
              } finally {
                _iterator16.f();
              }

              if (Object.keys(attrsMeta).length) {
                var _iterator17 = _createForOfIteratorHelper(attrs),
                    _step17;

                try {
                  for (_iterator17.s(); !(_step17 = _iterator17.n()).done;) {
                    var attr = _step17.value;
                    var meta = attrsMeta[attr.name]; // do not create translation for empty attributes

                    if (meta !== undefined && attr.value) {
                      attr.i18n = this._generateI18nMessage([attr], attr.i18n || meta);
                    }
                  }
                } catch (err) {
                  _iterator17.e(err);
                } finally {
                  _iterator17.f();
                }
              }

              if (!this.keepI18nAttrs) {
                // update element's attributes,
                // keeping only non-i18n related ones
                element.attrs = attrs;
              }
            }

            visitAll$1(this, element.children, element.i18n);
            return element;
          }
        }, {
          key: "visitExpansion",
          value: function visitExpansion(expansion, currentMessage) {
            var message;
            var meta = expansion.i18n;
            this.hasI18nMeta = true;

            if (meta instanceof IcuPlaceholder) {
              // set ICU placeholder name (e.g. "ICU_1"),
              // generated while processing root element contents,
              // so we can reference it when we output translation
              var name = meta.name;
              message = this._generateI18nMessage([expansion], meta);
              var icu = icuFromI18nMessage(message);
              icu.name = name;
            } else {
              // ICU is a top level message, try to use metadata from container element if provided via
              // `context` argument. Note: context may not be available for standalone ICUs (without
              // wrapping element), so fallback to ICU metadata in this case.
              message = this._generateI18nMessage([expansion], currentMessage || meta);
            }

            expansion.i18n = message;
            return expansion;
          }
        }, {
          key: "visitText",
          value: function visitText(text) {
            return text;
          }
        }, {
          key: "visitAttribute",
          value: function visitAttribute(attribute) {
            return attribute;
          }
        }, {
          key: "visitComment",
          value: function visitComment(comment) {
            return comment;
          }
        }, {
          key: "visitExpansionCase",
          value: function visitExpansionCase(expansionCase) {
            return expansionCase;
          }
          /**
           * Parse the general form `meta` passed into extract the explicit metadata needed to create a
           * `Message`.
           *
           * There are three possibilities for the `meta` variable
           * 1) a string from an `i18n` template attribute: parse it to extract the metadata values.
           * 2) a `Message` from a previous processing pass: reuse the metadata values in the message.
           * 4) other: ignore this and just process the message metadata as normal
           *
           * @param meta the bucket that holds information about the message
           * @returns the parsed metadata.
           */

        }, {
          key: "_parseMetadata",
          value: function _parseMetadata(meta) {
            return typeof meta === 'string' ? parseI18nMeta(meta) : meta instanceof Message ? meta : {};
          }
          /**
           * Generate (or restore) message id if not specified already.
           */

        }, {
          key: "_setMessageId",
          value: function _setMessageId(message, meta) {
            if (!message.id) {
              message.id = meta instanceof Message && meta.id || decimalDigest(message);
            }
          }
          /**
           * Update the `message` with a `legacyId` if necessary.
           *
           * @param message the message whose legacy id should be set
           * @param meta information about the message being processed
           */

        }, {
          key: "_setLegacyIds",
          value: function _setLegacyIds(message, meta) {
            if (this.enableI18nLegacyMessageIdFormat) {
              message.legacyIds = [computeDigest(message), computeDecimalDigest(message)];
            } else if (typeof meta !== 'string') {
              // This occurs if we are doing the 2nd pass after whitespace removal (see `parseTemplate()` in
              // `packages/compiler/src/render3/view/template.ts`).
              // In that case we want to reuse the legacy message generated in the 1st pass (see
              // `setI18nRefs()`).
              var previousMessage = meta instanceof Message ? meta : meta instanceof IcuPlaceholder ? meta.previousMessage : undefined;
              message.legacyIds = previousMessage ? previousMessage.legacyIds : [];
            }
          }
        }, {
          key: "_reportError",
          value: function _reportError(node, msg) {
            this._errors.push(new I18nError(node.sourceSpan, msg));
          }
        }]);

        return I18nMetaVisitor;
      }();
      /** I18n separators for metadata **/


      var I18N_MEANING_SEPARATOR = '|';
      var I18N_ID_SEPARATOR = '@@';
      /**
       * Parses i18n metas like:
       *  - "@@id",
       *  - "description[@@id]",
       *  - "meaning|description[@@id]"
       * and returns an object with parsed output.
       *
       * @param meta String that represents i18n meta
       * @returns Object with id, meaning and description fields
       */

      function parseI18nMeta() {
        var meta = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
        var customId;
        var meaning;
        var description;
        meta = meta.trim();

        if (meta) {
          var idIndex = meta.indexOf(I18N_ID_SEPARATOR);
          var descIndex = meta.indexOf(I18N_MEANING_SEPARATOR);
          var meaningAndDesc;

          var _ref16 = idIndex > -1 ? [meta.slice(0, idIndex), meta.slice(idIndex + 2)] : [meta, ''];

          var _ref17 = _slicedToArray(_ref16, 2);

          meaningAndDesc = _ref17[0];
          customId = _ref17[1];

          var _ref18 = descIndex > -1 ? [meaningAndDesc.slice(0, descIndex), meaningAndDesc.slice(descIndex + 1)] : ['', meaningAndDesc];

          var _ref19 = _slicedToArray(_ref18, 2);

          meaning = _ref19[0];
          description = _ref19[1];
        }

        return {
          customId: customId,
          meaning: meaning,
          description: description
        };
      } // Converts i18n meta information for a message (id, description, meaning)
      // to a JsDoc statement formatted as expected by the Closure compiler.


      function i18nMetaToJSDoc(meta) {
        var tags = [];

        if (meta.description) {
          tags.push({
            tagName: "desc"
            /* Desc */
            ,
            text: meta.description
          });
        }

        if (meta.meaning) {
          tags.push({
            tagName: "meaning"
            /* Meaning */
            ,
            text: meta.meaning
          });
        }

        return tags.length == 0 ? null : jsDocComment(tags);
      }
      /** Closure uses `goog.getMsg(message)` to lookup translations */


      var GOOG_GET_MSG = 'goog.getMsg';

      function createGoogleGetMsgStatements(variable$1, message, closureVar, params) {
        var messageString = serializeI18nMessageForGetMsg(message);
        var args = [literal(messageString)];

        if (Object.keys(params).length) {
          args.push(mapLiteral(params, true));
        } // /**
        //  * @desc description of message
        //  * @meaning meaning of message
        //  */
        // const MSG_... = goog.getMsg(..);
        // I18N_X = MSG_...;


        var googGetMsgStmt = closureVar.set(variable(GOOG_GET_MSG).callFn(args)).toConstDecl();
        var metaComment = i18nMetaToJSDoc(message);

        if (metaComment !== null) {
          googGetMsgStmt.addLeadingComment(metaComment);
        }

        var i18nAssignmentStmt = new ExpressionStatement(variable$1.set(closureVar));
        return [googGetMsgStmt, i18nAssignmentStmt];
      }
      /**
       * This visitor walks over i18n tree and generates its string representation, including ICUs and
       * placeholders in `{$placeholder}` (for plain messages) or `{PLACEHOLDER}` (inside ICUs) format.
       */


      var GetMsgSerializerVisitor = /*#__PURE__*/function () {
        function GetMsgSerializerVisitor() {
          _classCallCheck(this, GetMsgSerializerVisitor);
        }

        _createClass(GetMsgSerializerVisitor, [{
          key: "formatPh",
          value: function formatPh(value) {
            return "{$".concat(formatI18nPlaceholderName(value), "}");
          }
        }, {
          key: "visitText",
          value: function visitText(text) {
            return text.value;
          }
        }, {
          key: "visitContainer",
          value: function visitContainer(container) {
            var _this174 = this;

            return container.children.map(function (child) {
              return child.visit(_this174);
            }).join('');
          }
        }, {
          key: "visitIcu",
          value: function visitIcu(icu) {
            return serializeIcuNode(icu);
          }
        }, {
          key: "visitTagPlaceholder",
          value: function visitTagPlaceholder(ph) {
            var _this175 = this;

            return ph.isVoid ? this.formatPh(ph.startName) : "".concat(this.formatPh(ph.startName)).concat(ph.children.map(function (child) {
              return child.visit(_this175);
            }).join('')).concat(this.formatPh(ph.closeName));
          }
        }, {
          key: "visitPlaceholder",
          value: function visitPlaceholder(ph) {
            return this.formatPh(ph.name);
          }
        }, {
          key: "visitIcuPlaceholder",
          value: function visitIcuPlaceholder(ph, context) {
            return this.formatPh(ph.name);
          }
        }]);

        return GetMsgSerializerVisitor;
      }();

      var serializerVisitor$1 = new GetMsgSerializerVisitor();

      function serializeI18nMessageForGetMsg(message) {
        return message.nodes.map(function (node) {
          return node.visit(serializerVisitor$1, null);
        }).join('');
      }

      function createLocalizeStatements(variable, message, params) {
        var _serializeI18nMessage = serializeI18nMessageForLocalize(message),
            messageParts = _serializeI18nMessage.messageParts,
            placeHolders = _serializeI18nMessage.placeHolders;

        var sourceSpan = getSourceSpan(message);
        var expressions = placeHolders.map(function (ph) {
          return params[ph.text];
        });
        var localizedString$1 = localizedString(message, messageParts, placeHolders, expressions, sourceSpan);
        var variableInitialization = variable.set(localizedString$1);
        return [new ExpressionStatement(variableInitialization)];
      }
      /**
       * This visitor walks over an i18n tree, capturing literal strings and placeholders.
       *
       * The result can be used for generating the `$localize` tagged template literals.
       */


      var LocalizeSerializerVisitor = /*#__PURE__*/function () {
        function LocalizeSerializerVisitor() {
          _classCallCheck(this, LocalizeSerializerVisitor);
        }

        _createClass(LocalizeSerializerVisitor, [{
          key: "visitText",
          value: function visitText(text, context) {
            if (context[context.length - 1] instanceof LiteralPiece) {
              // Two literal pieces in a row means that there was some comment node in-between.
              context[context.length - 1].text += text.value;
            } else {
              context.push(new LiteralPiece(text.value, text.sourceSpan));
            }
          }
        }, {
          key: "visitContainer",
          value: function visitContainer(container, context) {
            var _this176 = this;

            container.children.forEach(function (child) {
              return child.visit(_this176, context);
            });
          }
        }, {
          key: "visitIcu",
          value: function visitIcu(icu, context) {
            context.push(new LiteralPiece(serializeIcuNode(icu), icu.sourceSpan));
          }
        }, {
          key: "visitTagPlaceholder",
          value: function visitTagPlaceholder(ph, context) {
            var _this177 = this;

            var _a, _b;

            context.push(this.createPlaceholderPiece(ph.startName, (_a = ph.startSourceSpan) !== null && _a !== void 0 ? _a : ph.sourceSpan));

            if (!ph.isVoid) {
              ph.children.forEach(function (child) {
                return child.visit(_this177, context);
              });
              context.push(this.createPlaceholderPiece(ph.closeName, (_b = ph.endSourceSpan) !== null && _b !== void 0 ? _b : ph.sourceSpan));
            }
          }
        }, {
          key: "visitPlaceholder",
          value: function visitPlaceholder(ph, context) {
            context.push(this.createPlaceholderPiece(ph.name, ph.sourceSpan));
          }
        }, {
          key: "visitIcuPlaceholder",
          value: function visitIcuPlaceholder(ph, context) {
            context.push(this.createPlaceholderPiece(ph.name, ph.sourceSpan));
          }
        }, {
          key: "createPlaceholderPiece",
          value: function createPlaceholderPiece(name, sourceSpan) {
            return new PlaceholderPiece(formatI18nPlaceholderName(name,
            /* useCamelCase */
            false), sourceSpan);
          }
        }]);

        return LocalizeSerializerVisitor;
      }();

      var serializerVisitor$2 = new LocalizeSerializerVisitor();
      /**
       * Serialize an i18n message into two arrays: messageParts and placeholders.
       *
       * These arrays will be used to generate `$localize` tagged template literals.
       *
       * @param message The message to be serialized.
       * @returns an object containing the messageParts and placeholders.
       */

      function serializeI18nMessageForLocalize(message) {
        var pieces = [];
        message.nodes.forEach(function (node) {
          return node.visit(serializerVisitor$2, pieces);
        });
        return processMessagePieces(pieces);
      }

      function getSourceSpan(message) {
        var startNode = message.nodes[0];
        var endNode = message.nodes[message.nodes.length - 1];
        return new ParseSourceSpan(startNode.sourceSpan.start, endNode.sourceSpan.end, startNode.sourceSpan.fullStart, startNode.sourceSpan.details);
      }
      /**
       * Convert the list of serialized MessagePieces into two arrays.
       *
       * One contains the literal string pieces and the other the placeholders that will be replaced by
       * expressions when rendering `$localize` tagged template literals.
       *
       * @param pieces The pieces to process.
       * @returns an object containing the messageParts and placeholders.
       */


      function processMessagePieces(pieces) {
        var messageParts = [];
        var placeHolders = [];

        if (pieces[0] instanceof PlaceholderPiece) {
          // The first piece was a placeholder so we need to add an initial empty message part.
          messageParts.push(createEmptyMessagePart(pieces[0].sourceSpan.start));
        }

        for (var i = 0; i < pieces.length; i++) {
          var part = pieces[i];

          if (part instanceof LiteralPiece) {
            messageParts.push(part);
          } else {
            placeHolders.push(part);

            if (pieces[i - 1] instanceof PlaceholderPiece) {
              // There were two placeholders in a row, so we need to add an empty message part.
              messageParts.push(createEmptyMessagePart(pieces[i - 1].sourceSpan.end));
            }
          }
        }

        if (pieces[pieces.length - 1] instanceof PlaceholderPiece) {
          // The last piece was a placeholder so we need to add a final empty message part.
          messageParts.push(createEmptyMessagePart(pieces[pieces.length - 1].sourceSpan.end));
        }

        return {
          messageParts: messageParts,
          placeHolders: placeHolders
        };
      }

      function createEmptyMessagePart(location) {
        return new LiteralPiece('', new ParseSourceSpan(location, location));
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */
      // Selector attribute name of `<ng-content>`


      var NG_CONTENT_SELECT_ATTR$1 = 'select'; // Attribute name of `ngProjectAs`.

      var NG_PROJECT_AS_ATTR_NAME = 'ngProjectAs'; // Global symbols available only inside event bindings.

      var EVENT_BINDING_SCOPE_GLOBALS = new Set(['$event']); // List of supported global targets for event listeners

      var GLOBAL_TARGET_RESOLVERS = new Map([['window', Identifiers$1.resolveWindow], ['document', Identifiers$1.resolveDocument], ['body', Identifiers$1.resolveBody]]);
      var LEADING_TRIVIA_CHARS = [' ', '\n', '\r', '\t']; //  if (rf & flags) { .. }

      function renderFlagCheckIfStmt(flags, statements) {
        return ifStmt(variable(RENDER_FLAGS).bitwiseAnd(literal(flags), null, false), statements);
      }

      function prepareEventListenerParameters(eventAst) {
        var handlerName = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
        var scope = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
        var type = eventAst.type,
            name = eventAst.name,
            target = eventAst.target,
            phase = eventAst.phase,
            handler = eventAst.handler;

        if (target && !GLOBAL_TARGET_RESOLVERS.has(target)) {
          throw new Error("Unexpected global target '".concat(target, "' defined for '").concat(name, "' event.\n        Supported list of global targets: ").concat(Array.from(GLOBAL_TARGET_RESOLVERS.keys()), "."));
        }

        var eventArgumentName = '$event';
        var implicitReceiverAccesses = new Set();
        var implicitReceiverExpr = scope === null || scope.bindingLevel === 0 ? variable(CONTEXT_NAME) : scope.getOrCreateSharedContextVar(0);
        var bindingExpr = convertActionBinding(scope, implicitReceiverExpr, handler, 'b', function () {
          return error('Unexpected interpolation');
        }, eventAst.handlerSpan, implicitReceiverAccesses, EVENT_BINDING_SCOPE_GLOBALS);
        var statements = [];

        if (scope) {
          statements.push.apply(statements, _toConsumableArray(scope.restoreViewStatement()));
          statements.push.apply(statements, _toConsumableArray(scope.variableDeclarations()));
        }

        statements.push.apply(statements, _toConsumableArray(bindingExpr.render3Stmts));
        var eventName = type === 1
        /* Animation */
        ? prepareSyntheticListenerName(name, phase) : name;
        var fnName = handlerName && sanitizeIdentifier(handlerName);
        var fnArgs = [];

        if (implicitReceiverAccesses.has(eventArgumentName)) {
          fnArgs.push(new FnParam(eventArgumentName, DYNAMIC_TYPE));
        }

        var handlerFn = fn(fnArgs, statements, INFERRED_TYPE, null, fnName);
        var params = [literal(eventName), handlerFn];

        if (target) {
          params.push(literal(false), // `useCapture` flag, defaults to `false`
          importExpr(GLOBAL_TARGET_RESOLVERS.get(target)));
        }

        return params;
      }

      function createComponentDefConsts() {
        return {
          prepareStatements: [],
          constExpressions: [],
          i18nVarRefsCache: new Map()
        };
      }

      var TemplateDefinitionBuilder = /*#__PURE__*/function () {
        function TemplateDefinitionBuilder(constantPool, parentBindingScope) {
          var _this178 = this;

          var level = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
          var contextName = arguments.length > 3 ? arguments[3] : undefined;
          var i18nContext = arguments.length > 4 ? arguments[4] : undefined;
          var templateIndex = arguments.length > 5 ? arguments[5] : undefined;
          var templateName = arguments.length > 6 ? arguments[6] : undefined;
          var directiveMatcher = arguments.length > 7 ? arguments[7] : undefined;
          var directives = arguments.length > 8 ? arguments[8] : undefined;
          var pipeTypeByName = arguments.length > 9 ? arguments[9] : undefined;
          var pipes = arguments.length > 10 ? arguments[10] : undefined;

          var _namespace = arguments.length > 11 ? arguments[11] : undefined;

          var relativeContextFilePath = arguments.length > 12 ? arguments[12] : undefined;
          var i18nUseExternalIds = arguments.length > 13 ? arguments[13] : undefined;

          var _constants = arguments.length > 14 && arguments[14] !== undefined ? arguments[14] : createComponentDefConsts();

          _classCallCheck(this, TemplateDefinitionBuilder);

          this.constantPool = constantPool;
          this.level = level;
          this.contextName = contextName;
          this.i18nContext = i18nContext;
          this.templateIndex = templateIndex;
          this.templateName = templateName;
          this.directiveMatcher = directiveMatcher;
          this.directives = directives;
          this.pipeTypeByName = pipeTypeByName;
          this.pipes = pipes;
          this._namespace = _namespace;
          this.i18nUseExternalIds = i18nUseExternalIds;
          this._constants = _constants;
          this._dataIndex = 0;
          this._bindingContext = 0;
          this._prefixCode = [];
          /**
           * List of callbacks to generate creation mode instructions. We store them here as we process
           * the template so bindings in listeners are resolved only once all nodes have been visited.
           * This ensures all local refs and context variables are available for matching.
           */

          this._creationCodeFns = [];
          /**
           * List of callbacks to generate update mode instructions. We store them here as we process
           * the template so bindings are resolved only once all nodes have been visited. This ensures
           * all local refs and context variables are available for matching.
           */

          this._updateCodeFns = [];
          /** Index of the currently-selected node. */

          this._currentIndex = 0;
          /** Temporary variable declarations generated from visiting pipes, literals, etc. */

          this._tempVariables = [];
          /**
           * List of callbacks to build nested templates. Nested templates must not be visited until
           * after the parent template has finished visiting all of its nodes. This ensures that all
           * local ref bindings in nested templates are able to find local ref values if the refs
           * are defined after the template declaration.
           */

          this._nestedTemplateFns = [];
          this._unsupported = unsupported; // i18n context local to this template

          this.i18n = null; // Number of slots to reserve for pureFunctions

          this._pureFunctionSlots = 0; // Number of binding slots

          this._bindingSlots = 0; // Projection slots found in the template. Projection slots can distribute projected
          // nodes based on a selector, or can just use the wildcard selector to match
          // all nodes which aren't matching any selector.

          this._ngContentReservedSlots = []; // Number of non-default selectors found in all parent templates of this template. We need to
          // track it to properly adjust projection slot index in the `projection` instruction.

          this._ngContentSelectorsOffset = 0; // Expression that should be used as implicit receiver when converting template
          // expressions to output AST.

          this._implicitReceiverExpr = null; // These should be handled in the template or element directly.

          this.visitReference = invalid$1;
          this.visitVariable = invalid$1;
          this.visitTextAttribute = invalid$1;
          this.visitBoundAttribute = invalid$1;
          this.visitBoundEvent = invalid$1;
          this._bindingScope = parentBindingScope.nestedScope(level); // Turn the relative context file path into an identifier by replacing non-alphanumeric
          // characters with underscores.

          this.fileBasedI18nSuffix = relativeContextFilePath.replace(/[^A-Za-z0-9]/g, '_') + '_';
          this._valueConverter = new ValueConverter(constantPool, function () {
            return _this178.allocateDataSlot();
          }, function (numSlots) {
            return _this178.allocatePureFunctionSlots(numSlots);
          }, function (name, localName, slot, value) {
            var pipeType = pipeTypeByName.get(name);

            if (pipeType) {
              _this178.pipes.add(pipeType);
            }

            _this178._bindingScope.set(_this178.level, localName, value);

            _this178.creationInstruction(null, Identifiers$1.pipe, [literal(slot), literal(name)]);
          });
        }

        _createClass(TemplateDefinitionBuilder, [{
          key: "buildTemplateFunction",
          value: function buildTemplateFunction(nodes, variables) {
            var _this179 = this;

            var ngContentSelectorsOffset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
            var i18n = arguments.length > 3 ? arguments[3] : undefined;
            this._ngContentSelectorsOffset = ngContentSelectorsOffset;

            if (this._namespace !== Identifiers$1.namespaceHTML) {
              this.creationInstruction(null, this._namespace);
            } // Create variable bindings


            variables.forEach(function (v) {
              return _this179.registerContextVariables(v);
            }); // Initiate i18n context in case:
            // - this template has parent i18n context
            // - or the template has i18n meta associated with it,
            //   but it's not initiated by the Element (e.g. <ng-template i18n>)

            var initI18nContext = this.i18nContext || isI18nRootNode(i18n) && !isSingleI18nIcu(i18n) && !(isSingleElementTemplate(nodes) && nodes[0].i18n === i18n);
            var selfClosingI18nInstruction = hasTextChildrenOnly(nodes);

            if (initI18nContext) {
              this.i18nStart(null, i18n, selfClosingI18nInstruction);
            } // This is the initial pass through the nodes of this template. In this pass, we
            // queue all creation mode and update mode instructions for generation in the second
            // pass. It's necessary to separate the passes to ensure local refs are defined before
            // resolving bindings. We also count bindings in this pass as we walk bound expressions.


            visitAll(this, nodes); // Add total binding count to pure function count so pure function instructions are
            // generated with the correct slot offset when update instructions are processed.

            this._pureFunctionSlots += this._bindingSlots; // Pipes are walked in the first pass (to enqueue `pipe()` creation instructions and
            // `pipeBind` update instructions), so we have to update the slot offsets manually
            // to account for bindings.

            this._valueConverter.updatePipeSlotOffsets(this._bindingSlots); // Nested templates must be processed before creation instructions so template()
            // instructions can be generated with the correct internal const count.


            this._nestedTemplateFns.forEach(function (buildTemplateFn) {
              return buildTemplateFn();
            }); // Output the `projectionDef` instruction when some `<ng-content>` tags are present.
            // The `projectionDef` instruction is only emitted for the component template and
            // is skipped for nested templates (<ng-template> tags).


            if (this.level === 0 && this._ngContentReservedSlots.length) {
              var parameters = []; // By default the `projectionDef` instructions creates one slot for the wildcard
              // selector if no parameters are passed. Therefore we only want to allocate a new
              // array for the projection slots if the default projection slot is not sufficient.

              if (this._ngContentReservedSlots.length > 1 || this._ngContentReservedSlots[0] !== '*') {
                var r3ReservedSlots = this._ngContentReservedSlots.map(function (s) {
                  return s !== '*' ? parseSelectorToR3Selector(s) : s;
                });

                parameters.push(this.constantPool.getConstLiteral(asLiteral(r3ReservedSlots), true));
              } // Since we accumulate ngContent selectors while processing template elements,
              // we *prepend* `projectionDef` to creation instructions block, to put it before
              // any `projection` instructions


              this.creationInstruction(null, Identifiers$1.projectionDef, parameters,
              /* prepend */
              true);
            }

            if (initI18nContext) {
              this.i18nEnd(null, selfClosingI18nInstruction);
            } // Generate all the creation mode instructions (e.g. resolve bindings in listeners)


            var creationStatements = this._creationCodeFns.map(function (fn) {
              return fn();
            }); // Generate all the update mode instructions (e.g. resolve property or text bindings)


            var updateStatements = this._updateCodeFns.map(function (fn) {
              return fn();
            }); //  Variable declaration must occur after binding resolution so we can generate context
            //  instructions that build on each other.
            // e.g. const b = nextContext().$implicit(); const b = nextContext();


            var creationVariables = this._bindingScope.viewSnapshotStatements();

            var updateVariables = this._bindingScope.variableDeclarations().concat(this._tempVariables);

            var creationBlock = creationStatements.length > 0 ? [renderFlagCheckIfStmt(1
            /* Create */
            , creationVariables.concat(creationStatements))] : [];
            var updateBlock = updateStatements.length > 0 ? [renderFlagCheckIfStmt(2
            /* Update */
            , updateVariables.concat(updateStatements))] : [];
            return fn( // i.e. (rf: RenderFlags, ctx: any)
            [new FnParam(RENDER_FLAGS, NUMBER_TYPE), new FnParam(CONTEXT_NAME, null)], [].concat(_toConsumableArray(this._prefixCode), creationBlock, updateBlock), INFERRED_TYPE, null, this.templateName);
          } // LocalResolver

        }, {
          key: "getLocal",
          value: function getLocal(name) {
            return this._bindingScope.get(name);
          } // LocalResolver

        }, {
          key: "notifyImplicitReceiverUse",
          value: function notifyImplicitReceiverUse() {
            this._bindingScope.notifyImplicitReceiverUse();
          }
        }, {
          key: "i18nTranslate",
          value: function i18nTranslate(message) {
            var _this$_constants$prep;

            var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
            var ref = arguments.length > 2 ? arguments[2] : undefined;
            var transformFn = arguments.length > 3 ? arguments[3] : undefined;

            var _ref = ref || this.i18nGenerateMainBlockVar(); // Closure Compiler requires const names to start with `MSG_` but disallows any other const to
            // start with `MSG_`. We define a variable starting with `MSG_` just for the `goog.getMsg` call


            var closureVar = this.i18nGenerateClosureVar(message.id);
            var statements = getTranslationDeclStmts(message, _ref, closureVar, params, transformFn);

            (_this$_constants$prep = this._constants.prepareStatements).push.apply(_this$_constants$prep, _toConsumableArray(statements));

            return _ref;
          }
        }, {
          key: "registerContextVariables",
          value: function registerContextVariables(variable$1) {
            var scopedName = this._bindingScope.freshReferenceName();

            var retrievalLevel = this.level;
            var lhs = variable(variable$1.name + scopedName);

            this._bindingScope.set(retrievalLevel, variable$1.name, lhs, 1
            /* CONTEXT */
            , function (scope, relativeLevel) {
              var rhs;

              if (scope.bindingLevel === retrievalLevel) {
                // e.g. ctx
                rhs = variable(CONTEXT_NAME);
              } else {
                var sharedCtxVar = scope.getSharedContextName(retrievalLevel); // e.g. ctx_r0   OR  x(2);

                rhs = sharedCtxVar ? sharedCtxVar : generateNextContextExpr(relativeLevel);
              } // e.g. const $item$ = x(2).$implicit;


              return [lhs.set(rhs.prop(variable$1.value || IMPLICIT_REFERENCE)).toConstDecl()];
            });
          }
        }, {
          key: "i18nAppendBindings",
          value: function i18nAppendBindings(expressions) {
            var _this180 = this;

            if (expressions.length > 0) {
              expressions.forEach(function (expression) {
                return _this180.i18n.appendBinding(expression);
              });
            }
          }
        }, {
          key: "i18nBindProps",
          value: function i18nBindProps(props) {
            var _this181 = this;

            var bound = {};
            Object.keys(props).forEach(function (key) {
              var prop = props[key];

              if (prop instanceof Text) {
                bound[key] = literal(prop.value);
              } else {
                var value = prop.value.visit(_this181._valueConverter);

                _this181.allocateBindingSlots(value);

                if (value instanceof Interpolation) {
                  var strings = value.strings,
                      expressions = value.expressions;
                  var _this181$i18n = _this181.i18n,
                      id = _this181$i18n.id,
                      bindings = _this181$i18n.bindings;
                  var label = assembleI18nBoundString(strings, bindings.size, id);

                  _this181.i18nAppendBindings(expressions);

                  bound[key] = literal(label);
                }
              }
            });
            return bound;
          } // Generates top level vars for i18n blocks (i.e. `i18n_N`).

        }, {
          key: "i18nGenerateMainBlockVar",
          value: function i18nGenerateMainBlockVar() {
            return variable(this.constantPool.uniqueName(TRANSLATION_VAR_PREFIX));
          } // Generates vars with Closure-specific names for i18n blocks (i.e. `MSG_XXX`).

        }, {
          key: "i18nGenerateClosureVar",
          value: function i18nGenerateClosureVar(messageId) {
            var name;
            var suffix = this.fileBasedI18nSuffix.toUpperCase();

            if (this.i18nUseExternalIds) {
              var prefix = getTranslationConstPrefix("EXTERNAL_");
              var uniqueSuffix = this.constantPool.uniqueName(suffix);
              name = "".concat(prefix).concat(sanitizeIdentifier(messageId), "$$").concat(uniqueSuffix);
            } else {
              var _prefix = getTranslationConstPrefix(suffix);

              name = this.constantPool.uniqueName(_prefix);
            }

            return variable(name);
          }
        }, {
          key: "i18nUpdateRef",
          value: function i18nUpdateRef(context) {
            var icus = context.icus,
                meta = context.meta,
                isRoot = context.isRoot,
                isResolved = context.isResolved,
                isEmitted = context.isEmitted;

            if (isRoot && isResolved && !isEmitted && !isSingleI18nIcu(meta)) {
              context.isEmitted = true;
              var placeholders = context.getSerializedPlaceholders();
              var icuMapping = {};
              var params = placeholders.size ? placeholdersToParams(placeholders) : {};

              if (icus.size) {
                icus.forEach(function (refs, key) {
                  if (refs.length === 1) {
                    // if we have one ICU defined for a given
                    // placeholder - just output its reference
                    params[key] = refs[0];
                  } else {
                    // ... otherwise we need to activate post-processing
                    // to replace ICU placeholders with proper values
                    var placeholder = wrapI18nPlaceholder("".concat(I18N_ICU_MAPPING_PREFIX).concat(key));
                    params[key] = literal(placeholder);
                    icuMapping[key] = literalArr(refs);
                  }
                });
              } // translation requires post processing in 2 cases:
              // - if we have placeholders with multiple values (ex. `START_DIV`: [�#1�, �#2�, ...])
              // - if we have multiple ICUs that refer to the same placeholder name


              var needsPostprocessing = Array.from(placeholders.values()).some(function (value) {
                return value.length > 1;
              }) || Object.keys(icuMapping).length;
              var transformFn;

              if (needsPostprocessing) {
                transformFn = function transformFn(raw) {
                  var args = [raw];

                  if (Object.keys(icuMapping).length) {
                    args.push(mapLiteral(icuMapping, true));
                  }

                  return instruction(null, Identifiers$1.i18nPostprocess, args);
                };
              }

              this.i18nTranslate(meta, params, context.ref, transformFn);
            }
          }
        }, {
          key: "i18nStart",
          value: function i18nStart() {
            var span = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
            var meta = arguments.length > 1 ? arguments[1] : undefined;
            var selfClosing = arguments.length > 2 ? arguments[2] : undefined;
            var index = this.allocateDataSlot();
            this.i18n = this.i18nContext ? this.i18nContext.forkChildContext(index, this.templateIndex, meta) : new I18nContext(index, this.i18nGenerateMainBlockVar(), 0, this.templateIndex, meta); // generate i18nStart instruction

            var _this$i18n = this.i18n,
                id = _this$i18n.id,
                ref = _this$i18n.ref;
            var params = [literal(index), this.addToConsts(ref)];

            if (id > 0) {
              // do not push 3rd argument (sub-block id)
              // into i18nStart call for top level i18n context
              params.push(literal(id));
            }

            this.creationInstruction(span, selfClosing ? Identifiers$1.i18n : Identifiers$1.i18nStart, params);
          }
        }, {
          key: "i18nEnd",
          value: function i18nEnd() {
            var _this182 = this;

            var span = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
            var selfClosing = arguments.length > 1 ? arguments[1] : undefined;

            if (!this.i18n) {
              throw new Error('i18nEnd is executed with no i18n context present');
            }

            if (this.i18nContext) {
              this.i18nContext.reconcileChildContext(this.i18n);
              this.i18nUpdateRef(this.i18nContext);
            } else {
              this.i18nUpdateRef(this.i18n);
            } // setup accumulated bindings


            var _this$i18n2 = this.i18n,
                index = _this$i18n2.index,
                bindings = _this$i18n2.bindings;

            if (bindings.size) {
              var chainBindings = [];
              bindings.forEach(function (binding) {
                chainBindings.push({
                  sourceSpan: span,
                  value: function value() {
                    return _this182.convertPropertyBinding(binding);
                  }
                });
              }); // for i18n block, advance to the most recent element index (by taking the current number of
              // elements and subtracting one) before invoking `i18nExp` instructions, to make sure the
              // necessary lifecycle hooks of components/directives are properly flushed.

              this.updateInstructionChainWithAdvance(this.getConstCount() - 1, Identifiers$1.i18nExp, chainBindings);
              this.updateInstruction(span, Identifiers$1.i18nApply, [literal(index)]);
            }

            if (!selfClosing) {
              this.creationInstruction(span, Identifiers$1.i18nEnd);
            }

            this.i18n = null; // reset local i18n context
          }
        }, {
          key: "i18nAttributesInstruction",
          value: function i18nAttributesInstruction(nodeIndex, attrs, sourceSpan) {
            var _this183 = this;

            var hasBindings = false;
            var i18nAttrArgs = [];
            var bindings = [];
            attrs.forEach(function (attr) {
              var message = attr.i18n;
              var converted = attr.value.visit(_this183._valueConverter);

              _this183.allocateBindingSlots(converted);

              if (converted instanceof Interpolation) {
                var placeholders = assembleBoundTextPlaceholders(message);
                var params = placeholdersToParams(placeholders);
                i18nAttrArgs.push(literal(attr.name), _this183.i18nTranslate(message, params));
                converted.expressions.forEach(function (expression) {
                  hasBindings = true;
                  bindings.push({
                    sourceSpan: sourceSpan,
                    value: function value() {
                      return _this183.convertPropertyBinding(expression);
                    }
                  });
                });
              }
            });

            if (bindings.length > 0) {
              this.updateInstructionChainWithAdvance(nodeIndex, Identifiers$1.i18nExp, bindings);
            }

            if (i18nAttrArgs.length > 0) {
              var index = literal(this.allocateDataSlot());
              var constIndex = this.addToConsts(literalArr(i18nAttrArgs));
              this.creationInstruction(sourceSpan, Identifiers$1.i18nAttributes, [index, constIndex]);

              if (hasBindings) {
                this.updateInstruction(sourceSpan, Identifiers$1.i18nApply, [index]);
              }
            }
          }
        }, {
          key: "getNamespaceInstruction",
          value: function getNamespaceInstruction(namespaceKey) {
            switch (namespaceKey) {
              case 'math':
                return Identifiers$1.namespaceMathML;

              case 'svg':
                return Identifiers$1.namespaceSVG;

              default:
                return Identifiers$1.namespaceHTML;
            }
          }
        }, {
          key: "addNamespaceInstruction",
          value: function addNamespaceInstruction(nsInstruction, element) {
            this._namespace = nsInstruction;
            this.creationInstruction(element.startSourceSpan, nsInstruction);
          }
          /**
           * Adds an update instruction for an interpolated property or attribute, such as
           * `prop="{{value}}"` or `attr.title="{{value}}"`
           */

        }, {
          key: "interpolatedUpdateInstruction",
          value: function interpolatedUpdateInstruction(instruction, elementIndex, attrName, input, value, params) {
            var _this184 = this;

            this.updateInstructionWithAdvance(elementIndex, input.sourceSpan, instruction, function () {
              return [literal(attrName)].concat(_toConsumableArray(_this184.getUpdateInstructionArguments(value)), _toConsumableArray(params));
            });
          }
        }, {
          key: "visitContent",
          value: function visitContent(ngContent) {
            var slot = this.allocateDataSlot();
            var projectionSlotIdx = this._ngContentSelectorsOffset + this._ngContentReservedSlots.length;
            var parameters = [literal(slot)];

            this._ngContentReservedSlots.push(ngContent.selector);

            var nonContentSelectAttributes = ngContent.attributes.filter(function (attr) {
              return attr.name.toLowerCase() !== NG_CONTENT_SELECT_ATTR$1;
            });
            var attributes = this.getAttributeExpressions(ngContent.name, nonContentSelectAttributes, [], []);

            if (attributes.length > 0) {
              parameters.push(literal(projectionSlotIdx), literalArr(attributes));
            } else if (projectionSlotIdx !== 0) {
              parameters.push(literal(projectionSlotIdx));
            }

            this.creationInstruction(ngContent.sourceSpan, Identifiers$1.projection, parameters);

            if (this.i18n) {
              this.i18n.appendProjection(ngContent.i18n, slot);
            }
          }
        }, {
          key: "visitElement",
          value: function visitElement(element) {
            var _this185 = this;

            var _a, _b;

            var elementIndex = this.allocateDataSlot();
            var stylingBuilder = new StylingBuilder(null);
            var isNonBindableMode = false;
            var isI18nRootElement = isI18nRootNode(element.i18n) && !isSingleI18nIcu(element.i18n);
            var outputAttrs = [];

            var _splitNsName = splitNsName(element.name),
                _splitNsName2 = _slicedToArray(_splitNsName, 2),
                namespaceKey = _splitNsName2[0],
                elementName = _splitNsName2[1];

            var isNgContainer$1 = isNgContainer(element.name); // Handle styling, i18n, ngNonBindable attributes

            var _iterator18 = _createForOfIteratorHelper(element.attributes),
                _step18;

            try {
              for (_iterator18.s(); !(_step18 = _iterator18.n()).done;) {
                var attr = _step18.value;
                var name = attr.name,
                    value = attr.value;

                if (name === NON_BINDABLE_ATTR) {
                  isNonBindableMode = true;
                } else if (name === 'style') {
                  stylingBuilder.registerStyleAttr(value);
                } else if (name === 'class') {
                  stylingBuilder.registerClassAttr(value);
                } else {
                  outputAttrs.push(attr);
                }
              } // Match directives on non i18n attributes

            } catch (err) {
              _iterator18.e(err);
            } finally {
              _iterator18.f();
            }

            this.matchDirectives(element.name, element); // Regular element or ng-container creation mode

            var parameters = [literal(elementIndex)];

            if (!isNgContainer$1) {
              parameters.push(literal(elementName));
            } // Add the attributes


            var allOtherInputs = [];
            var boundI18nAttrs = [];
            element.inputs.forEach(function (input) {
              var stylingInputWasSet = stylingBuilder.registerBoundInput(input);

              if (!stylingInputWasSet) {
                if (input.type === 0
                /* Property */
                && input.i18n) {
                  boundI18nAttrs.push(input);
                } else {
                  allOtherInputs.push(input);
                }
              }
            }); // add attributes for directive and projection matching purposes

            var attributes = this.getAttributeExpressions(element.name, outputAttrs, allOtherInputs, element.outputs, stylingBuilder, [], boundI18nAttrs);
            parameters.push(this.addAttrsToConsts(attributes)); // local refs (ex.: <div #foo #bar="baz">)

            var refs = this.prepareRefsArray(element.references);
            parameters.push(this.addToConsts(refs));
            var wasInNamespace = this._namespace;
            var currentNamespace = this.getNamespaceInstruction(namespaceKey); // If the namespace is changing now, include an instruction to change it
            // during element creation.

            if (currentNamespace !== wasInNamespace) {
              this.addNamespaceInstruction(currentNamespace, element);
            }

            if (this.i18n) {
              this.i18n.appendElement(element.i18n, elementIndex);
            } // Note that we do not append text node instructions and ICUs inside i18n section,
            // so we exclude them while calculating whether current element has children


            var hasChildren = !isI18nRootElement && this.i18n ? !hasTextChildrenOnly(element.children) : element.children.length > 0;
            var createSelfClosingInstruction = !stylingBuilder.hasBindingsWithPipes && element.outputs.length === 0 && boundI18nAttrs.length === 0 && !hasChildren;
            var createSelfClosingI18nInstruction = !createSelfClosingInstruction && hasTextChildrenOnly(element.children);

            if (createSelfClosingInstruction) {
              this.creationInstruction(element.sourceSpan, isNgContainer$1 ? Identifiers$1.elementContainer : Identifiers$1.element, trimTrailingNulls(parameters));
            } else {
              this.creationInstruction(element.startSourceSpan, isNgContainer$1 ? Identifiers$1.elementContainerStart : Identifiers$1.elementStart, trimTrailingNulls(parameters));

              if (isNonBindableMode) {
                this.creationInstruction(element.startSourceSpan, Identifiers$1.disableBindings);
              }

              if (boundI18nAttrs.length > 0) {
                this.i18nAttributesInstruction(elementIndex, boundI18nAttrs, (_a = element.startSourceSpan) !== null && _a !== void 0 ? _a : element.sourceSpan);
              } // Generate Listeners (outputs)


              if (element.outputs.length > 0) {
                var listeners = element.outputs.map(function (outputAst) {
                  return {
                    sourceSpan: outputAst.sourceSpan,
                    params: _this185.prepareListenerParameter(element.name, outputAst, elementIndex)
                  };
                });
                this.creationInstructionChain(Identifiers$1.listener, listeners);
              } // Note: it's important to keep i18n/i18nStart instructions after i18nAttributes and
              // listeners, to make sure i18nAttributes instruction targets current element at runtime.


              if (isI18nRootElement) {
                this.i18nStart(element.startSourceSpan, element.i18n, createSelfClosingI18nInstruction);
              }
            } // the code here will collect all update-level styling instructions and add them to the
            // update block of the template function AOT code. Instructions like `styleProp`,
            // `styleMap`, `classMap`, `classProp`
            // are all generated and assigned in the code below.


            var stylingInstructions = stylingBuilder.buildUpdateLevelInstructions(this._valueConverter);
            var limit = stylingInstructions.length - 1;

            for (var i = 0; i <= limit; i++) {
              var _instruction = stylingInstructions[i];
              this._bindingSlots += this.processStylingUpdateInstruction(elementIndex, _instruction);
            } // the reason why `undefined` is used is because the renderer understands this as a
            // special value to symbolize that there is no RHS to this binding
            // TODO (matsko): revisit this once FW-959 is approached


            var emptyValueBindInstruction = literal(undefined);
            var propertyBindings = [];
            var attributeBindings = []; // Generate element input bindings

            allOtherInputs.forEach(function (input) {
              var inputType = input.type;

              if (inputType === 4
              /* Animation */
              ) {
                  var _value2 = input.value.visit(_this185._valueConverter); // animation bindings can be presented in the following formats:
                  // 1. [@binding]="fooExp"
                  // 2. [@binding]="{value:fooExp, params:{...}}"
                  // 3. [@binding]
                  // 4. @binding
                  // All formats will be valid for when a synthetic binding is created.
                  // The reasoning for this is because the renderer should get each
                  // synthetic binding value in the order of the array that they are
                  // defined in...


                  var hasValue = _value2 instanceof LiteralPrimitive ? !!_value2.value : true;

                  _this185.allocateBindingSlots(_value2);

                  propertyBindings.push({
                    name: prepareSyntheticPropertyName(input.name),
                    sourceSpan: input.sourceSpan,
                    value: function value() {
                      return hasValue ? _this185.convertPropertyBinding(_value2) : emptyValueBindInstruction;
                    }
                  });
                } else {
                // we must skip attributes with associated i18n context, since these attributes are handled
                // separately and corresponding `i18nExp` and `i18nApply` instructions will be generated
                if (input.i18n) return;

                var _value3 = input.value.visit(_this185._valueConverter);

                if (_value3 !== undefined) {
                  var params = [];

                  var _splitNsName3 = splitNsName(input.name),
                      _splitNsName4 = _slicedToArray(_splitNsName3, 2),
                      attrNamespace = _splitNsName4[0],
                      attrName = _splitNsName4[1];

                  var isAttributeBinding = inputType === 1
                  /* Attribute */
                  ;
                  var sanitizationRef = resolveSanitizationFn(input.securityContext, isAttributeBinding);
                  if (sanitizationRef) params.push(sanitizationRef);

                  if (attrNamespace) {
                    var namespaceLiteral = literal(attrNamespace);

                    if (sanitizationRef) {
                      params.push(namespaceLiteral);
                    } else {
                      // If there wasn't a sanitization ref, we need to add
                      // an extra param so that we can pass in the namespace.
                      params.push(literal(null), namespaceLiteral);
                    }
                  }

                  _this185.allocateBindingSlots(_value3);

                  if (inputType === 0
                  /* Property */
                  ) {
                      if (_value3 instanceof Interpolation) {
                        // prop="{{value}}" and friends
                        _this185.interpolatedUpdateInstruction(getPropertyInterpolationExpression(_value3), elementIndex, attrName, input, _value3, params);
                      } else {
                        // [prop]="value"
                        // Collect all the properties so that we can chain into a single function at the end.
                        propertyBindings.push({
                          name: attrName,
                          sourceSpan: input.sourceSpan,
                          value: function value() {
                            return _this185.convertPropertyBinding(_value3);
                          },
                          params: params
                        });
                      }
                    } else if (inputType === 1
                  /* Attribute */
                  ) {
                      if (_value3 instanceof Interpolation && getInterpolationArgsLength(_value3) > 1) {
                        // attr.name="text{{value}}" and friends
                        _this185.interpolatedUpdateInstruction(getAttributeInterpolationExpression(_value3), elementIndex, attrName, input, _value3, params);
                      } else {
                        var boundValue = _value3 instanceof Interpolation ? _value3.expressions[0] : _value3; // [attr.name]="value" or attr.name="{{value}}"
                        // Collect the attribute bindings so that they can be chained at the end.

                        attributeBindings.push({
                          name: attrName,
                          sourceSpan: input.sourceSpan,
                          value: function value() {
                            return _this185.convertPropertyBinding(boundValue);
                          },
                          params: params
                        });
                      }
                    } else {
                    // class prop
                    _this185.updateInstructionWithAdvance(elementIndex, input.sourceSpan, Identifiers$1.classProp, function () {
                      return [literal(elementIndex), literal(attrName), _this185.convertPropertyBinding(_value3)].concat(params);
                    });
                  }
                }
              }
            });

            if (propertyBindings.length > 0) {
              this.updateInstructionChainWithAdvance(elementIndex, Identifiers$1.property, propertyBindings);
            }

            if (attributeBindings.length > 0) {
              this.updateInstructionChainWithAdvance(elementIndex, Identifiers$1.attribute, attributeBindings);
            } // Traverse element child nodes


            visitAll(this, element.children);

            if (!isI18nRootElement && this.i18n) {
              this.i18n.appendElement(element.i18n, elementIndex, true);
            }

            if (!createSelfClosingInstruction) {
              // Finish element construction mode.
              var span = (_b = element.endSourceSpan) !== null && _b !== void 0 ? _b : element.sourceSpan;

              if (isI18nRootElement) {
                this.i18nEnd(span, createSelfClosingI18nInstruction);
              }

              if (isNonBindableMode) {
                this.creationInstruction(span, Identifiers$1.enableBindings);
              }

              this.creationInstruction(span, isNgContainer$1 ? Identifiers$1.elementContainerEnd : Identifiers$1.elementEnd);
            }
          }
        }, {
          key: "visitTemplate",
          value: function visitTemplate(template) {
            var _this186 = this;

            var _a;

            var NG_TEMPLATE_TAG_NAME = 'ng-template';
            var templateIndex = this.allocateDataSlot();

            if (this.i18n) {
              this.i18n.appendTemplate(template.i18n, templateIndex);
            }

            var tagName = sanitizeIdentifier(template.tagName || '');
            var contextName = "".concat(this.contextName).concat(tagName ? '_' + tagName : '', "_").concat(templateIndex);
            var templateName = "".concat(contextName, "_Template");
            var parameters = [literal(templateIndex), variable(templateName), // We don't care about the tag's namespace here, because we infer
            // it based on the parent nodes inside the template instruction.
            literal(template.tagName ? splitNsName(template.tagName)[1] : template.tagName)]; // find directives matching on a given <ng-template> node

            this.matchDirectives(NG_TEMPLATE_TAG_NAME, template); // prepare attributes parameter (including attributes used for directive matching)

            var attrsExprs = this.getAttributeExpressions(NG_TEMPLATE_TAG_NAME, template.attributes, template.inputs, template.outputs, undefined
            /* styles */
            , template.templateAttrs);
            parameters.push(this.addAttrsToConsts(attrsExprs)); // local refs (ex.: <ng-template #foo>)

            if (template.references && template.references.length) {
              var refs = this.prepareRefsArray(template.references);
              parameters.push(this.addToConsts(refs));
              parameters.push(importExpr(Identifiers$1.templateRefExtractor));
            } // Create the template function


            var templateVisitor = new TemplateDefinitionBuilder(this.constantPool, this._bindingScope, this.level + 1, contextName, this.i18n, templateIndex, templateName, this.directiveMatcher, this.directives, this.pipeTypeByName, this.pipes, this._namespace, this.fileBasedI18nSuffix, this.i18nUseExternalIds, this._constants); // Nested templates must not be visited until after their parent templates have completed
            // processing, so they are queued here until after the initial pass. Otherwise, we wouldn't
            // be able to support bindings in nested templates to local refs that occur after the
            // template definition. e.g. <div *ngIf="showing">{{ foo }}</div>  <div #foo></div>

            this._nestedTemplateFns.push(function () {
              var templateFunctionExpr = templateVisitor.buildTemplateFunction(template.children, template.variables, _this186._ngContentReservedSlots.length + _this186._ngContentSelectorsOffset, template.i18n);

              _this186.constantPool.statements.push(templateFunctionExpr.toDeclStmt(templateName));

              if (templateVisitor._ngContentReservedSlots.length) {
                var _this186$_ngContentRe;

                (_this186$_ngContentRe = _this186._ngContentReservedSlots).push.apply(_this186$_ngContentRe, _toConsumableArray(templateVisitor._ngContentReservedSlots));
              }
            }); // e.g. template(1, MyComp_Template_1)


            this.creationInstruction(template.sourceSpan, Identifiers$1.templateCreate, function () {
              parameters.splice(2, 0, literal(templateVisitor.getConstCount()), literal(templateVisitor.getVarCount()));
              return trimTrailingNulls(parameters);
            }); // handle property bindings e.g. ɵɵproperty('ngForOf', ctx.items), et al;

            this.templatePropertyBindings(templateIndex, template.templateAttrs); // Only add normal input/output binding instructions on explicit <ng-template> elements.

            if (template.tagName === NG_TEMPLATE_TAG_NAME) {
              var _partitionArray = partitionArray(template.inputs, hasI18nMeta),
                  _partitionArray2 = _slicedToArray(_partitionArray, 2),
                  i18nInputs = _partitionArray2[0],
                  inputs = _partitionArray2[1]; // Add i18n attributes that may act as inputs to directives. If such attributes are present,
              // generate `i18nAttributes` instruction. Note: we generate it only for explicit <ng-template>
              // elements, in case of inline templates, corresponding instructions will be generated in the
              // nested template function.


              if (i18nInputs.length > 0) {
                this.i18nAttributesInstruction(templateIndex, i18nInputs, (_a = template.startSourceSpan) !== null && _a !== void 0 ? _a : template.sourceSpan);
              } // Add the input bindings


              if (inputs.length > 0) {
                this.templatePropertyBindings(templateIndex, inputs);
              } // Generate listeners for directive output


              if (template.outputs.length > 0) {
                var listeners = template.outputs.map(function (outputAst) {
                  return {
                    sourceSpan: outputAst.sourceSpan,
                    params: _this186.prepareListenerParameter('ng_template', outputAst, templateIndex)
                  };
                });
                this.creationInstructionChain(Identifiers$1.listener, listeners);
              }
            }
          }
        }, {
          key: "visitBoundText",
          value: function visitBoundText(text) {
            var _this187 = this;

            if (this.i18n) {
              var _value4 = text.value.visit(this._valueConverter);

              this.allocateBindingSlots(_value4);

              if (_value4 instanceof Interpolation) {
                this.i18n.appendBoundText(text.i18n);
                this.i18nAppendBindings(_value4.expressions);
              }

              return;
            }

            var nodeIndex = this.allocateDataSlot();
            this.creationInstruction(text.sourceSpan, Identifiers$1.text, [literal(nodeIndex)]);
            var value = text.value.visit(this._valueConverter);
            this.allocateBindingSlots(value);

            if (value instanceof Interpolation) {
              this.updateInstructionWithAdvance(nodeIndex, text.sourceSpan, getTextInterpolationExpression(value), function () {
                return _this187.getUpdateInstructionArguments(value);
              });
            } else {
              error('Text nodes should be interpolated and never bound directly.');
            }
          }
        }, {
          key: "visitText",
          value: function visitText(text) {
            // when a text element is located within a translatable
            // block, we exclude this text element from instructions set,
            // since it will be captured in i18n content and processed at runtime
            if (!this.i18n) {
              this.creationInstruction(text.sourceSpan, Identifiers$1.text, [literal(this.allocateDataSlot()), literal(text.value)]);
            }
          }
        }, {
          key: "visitIcu",
          value: function visitIcu(icu) {
            var initWasInvoked = false; // if an ICU was created outside of i18n block, we still treat
            // it as a translatable entity and invoke i18nStart and i18nEnd
            // to generate i18n context and the necessary instructions

            if (!this.i18n) {
              initWasInvoked = true;
              this.i18nStart(null, icu.i18n, true);
            }

            var i18n = this.i18n;
            var vars = this.i18nBindProps(icu.vars);
            var placeholders = this.i18nBindProps(icu.placeholders); // output ICU directly and keep ICU reference in context

            var message = icu.i18n; // we always need post-processing function for ICUs, to make sure that:
            // - all placeholders in a form of {PLACEHOLDER} are replaced with actual values (note:
            // `goog.getMsg` does not process ICUs and uses the `{PLACEHOLDER}` format for placeholders
            // inside ICUs)
            // - all ICU vars (such as `VAR_SELECT` or `VAR_PLURAL`) are replaced with correct values

            var transformFn = function transformFn(raw) {
              var params = Object.assign(Object.assign({}, vars), placeholders);
              var formatted = i18nFormatPlaceholderNames(params,
              /* useCamelCase */
              false);
              return instruction(null, Identifiers$1.i18nPostprocess, [raw, mapLiteral(formatted, true)]);
            }; // in case the whole i18n message is a single ICU - we do not need to
            // create a separate top-level translation, we can use the root ref instead
            // and make this ICU a top-level translation
            // note: ICU placeholders are replaced with actual values in `i18nPostprocess` function
            // separately, so we do not pass placeholders into `i18nTranslate` function.


            if (isSingleI18nIcu(i18n.meta)) {
              this.i18nTranslate(message,
              /* placeholders */
              {}, i18n.ref, transformFn);
            } else {
              // output ICU directly and keep ICU reference in context
              var ref = this.i18nTranslate(message,
              /* placeholders */
              {},
              /* ref */
              undefined, transformFn);
              i18n.appendIcu(icuFromI18nMessage(message).name, ref);
            }

            if (initWasInvoked) {
              this.i18nEnd(null, true);
            }

            return null;
          }
        }, {
          key: "allocateDataSlot",
          value: function allocateDataSlot() {
            return this._dataIndex++;
          }
        }, {
          key: "getConstCount",
          value: function getConstCount() {
            return this._dataIndex;
          }
        }, {
          key: "getVarCount",
          value: function getVarCount() {
            return this._pureFunctionSlots;
          }
        }, {
          key: "getConsts",
          value: function getConsts() {
            return this._constants;
          }
        }, {
          key: "getNgContentSelectors",
          value: function getNgContentSelectors() {
            return this._ngContentReservedSlots.length ? this.constantPool.getConstLiteral(asLiteral(this._ngContentReservedSlots), true) : null;
          }
        }, {
          key: "bindingContext",
          value: function bindingContext() {
            return "".concat(this._bindingContext++);
          }
        }, {
          key: "templatePropertyBindings",
          value: function templatePropertyBindings(templateIndex, attrs) {
            var _this188 = this;

            var propertyBindings = [];
            attrs.forEach(function (input) {
              if (input instanceof BoundAttribute) {
                var _value5 = input.value.visit(_this188._valueConverter);

                if (_value5 !== undefined) {
                  _this188.allocateBindingSlots(_value5);

                  if (_value5 instanceof Interpolation) {
                    // Params typically contain attribute namespace and value sanitizer, which is applicable
                    // for regular HTML elements, but not applicable for <ng-template> (since props act as
                    // inputs to directives), so keep params array empty.
                    var params = []; // prop="{{value}}" case

                    _this188.interpolatedUpdateInstruction(getPropertyInterpolationExpression(_value5), templateIndex, input.name, input, _value5, params);
                  } else {
                    // [prop]="value" case
                    propertyBindings.push({
                      name: input.name,
                      sourceSpan: input.sourceSpan,
                      value: function value() {
                        return _this188.convertPropertyBinding(_value5);
                      }
                    });
                  }
                }
              }
            });

            if (propertyBindings.length > 0) {
              this.updateInstructionChainWithAdvance(templateIndex, Identifiers$1.property, propertyBindings);
            }
          } // Bindings must only be resolved after all local refs have been visited, so all
          // instructions are queued in callbacks that execute once the initial pass has completed.
          // Otherwise, we wouldn't be able to support local refs that are defined after their
          // bindings. e.g. {{ foo }} <div #foo></div>

        }, {
          key: "instructionFn",
          value: function instructionFn(fns, span, reference, paramsOrFn) {
            var prepend = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;
            fns[prepend ? 'unshift' : 'push'](function () {
              var params = Array.isArray(paramsOrFn) ? paramsOrFn : paramsOrFn();
              return instruction(span, reference, params).toStmt();
            });
          }
        }, {
          key: "processStylingUpdateInstruction",
          value: function processStylingUpdateInstruction(elementIndex, instruction) {
            var _this189 = this;

            var allocateBindingSlots = 0;

            if (instruction) {
              var calls = [];
              instruction.calls.forEach(function (call) {
                allocateBindingSlots += call.allocateBindingSlots;
                calls.push({
                  sourceSpan: call.sourceSpan,
                  value: function value() {
                    return call.params(function (value) {
                      return call.supportsInterpolation && value instanceof Interpolation ? _this189.getUpdateInstructionArguments(value) : _this189.convertPropertyBinding(value);
                    });
                  }
                });
              });
              this.updateInstructionChainWithAdvance(elementIndex, instruction.reference, calls);
            }

            return allocateBindingSlots;
          }
        }, {
          key: "creationInstruction",
          value: function creationInstruction(span, reference, paramsOrFn, prepend) {
            this.instructionFn(this._creationCodeFns, span, reference, paramsOrFn || [], prepend);
          }
        }, {
          key: "creationInstructionChain",
          value: function creationInstructionChain(reference, calls) {
            var span = calls.length ? calls[0].sourceSpan : null;

            this._creationCodeFns.push(function () {
              return chainedInstruction(reference, calls.map(function (call) {
                return call.params();
              }), span).toStmt();
            });
          }
        }, {
          key: "updateInstructionWithAdvance",
          value: function updateInstructionWithAdvance(nodeIndex, span, reference, paramsOrFn) {
            this.addAdvanceInstructionIfNecessary(nodeIndex, span);
            this.updateInstruction(span, reference, paramsOrFn);
          }
        }, {
          key: "updateInstruction",
          value: function updateInstruction(span, reference, paramsOrFn) {
            this.instructionFn(this._updateCodeFns, span, reference, paramsOrFn || []);
          }
        }, {
          key: "updateInstructionChain",
          value: function updateInstructionChain(reference, bindings) {
            var span = bindings.length ? bindings[0].sourceSpan : null;

            this._updateCodeFns.push(function () {
              var calls = bindings.map(function (property) {
                var value = property.value();
                var fnParams = Array.isArray(value) ? value : [value];

                if (property.params) {
                  fnParams.push.apply(fnParams, _toConsumableArray(property.params));
                }

                if (property.name) {
                  // We want the property name to always be the first function parameter.
                  fnParams.unshift(literal(property.name));
                }

                return fnParams;
              });
              return chainedInstruction(reference, calls, span).toStmt();
            });
          }
        }, {
          key: "updateInstructionChainWithAdvance",
          value: function updateInstructionChainWithAdvance(nodeIndex, reference, bindings) {
            this.addAdvanceInstructionIfNecessary(nodeIndex, bindings.length ? bindings[0].sourceSpan : null);
            this.updateInstructionChain(reference, bindings);
          }
        }, {
          key: "addAdvanceInstructionIfNecessary",
          value: function addAdvanceInstructionIfNecessary(nodeIndex, span) {
            if (nodeIndex !== this._currentIndex) {
              var delta = nodeIndex - this._currentIndex;

              if (delta < 1) {
                throw new Error('advance instruction can only go forwards');
              }

              this.instructionFn(this._updateCodeFns, span, Identifiers$1.advance, [literal(delta)]);
              this._currentIndex = nodeIndex;
            }
          }
        }, {
          key: "allocatePureFunctionSlots",
          value: function allocatePureFunctionSlots(numSlots) {
            var originalSlots = this._pureFunctionSlots;
            this._pureFunctionSlots += numSlots;
            return originalSlots;
          }
        }, {
          key: "allocateBindingSlots",
          value: function allocateBindingSlots(value) {
            this._bindingSlots += value instanceof Interpolation ? value.expressions.length : 1;
          }
          /**
           * Gets an expression that refers to the implicit receiver. The implicit
           * receiver is always the root level context.
           */

        }, {
          key: "getImplicitReceiverExpr",
          value: function getImplicitReceiverExpr() {
            if (this._implicitReceiverExpr) {
              return this._implicitReceiverExpr;
            }

            return this._implicitReceiverExpr = this.level === 0 ? variable(CONTEXT_NAME) : this._bindingScope.getOrCreateSharedContextVar(0);
          }
        }, {
          key: "convertPropertyBinding",
          value: function convertPropertyBinding(value) {
            var _this$_tempVariables;

            var convertedPropertyBinding = _convertPropertyBinding(this, this.getImplicitReceiverExpr(), value, this.bindingContext(), BindingForm.Expression, function () {
              return error('Unexpected interpolation');
            });

            var valExpr = convertedPropertyBinding.currValExpr;

            (_this$_tempVariables = this._tempVariables).push.apply(_this$_tempVariables, _toConsumableArray(convertedPropertyBinding.stmts));

            return valExpr;
          }
          /**
           * Gets a list of argument expressions to pass to an update instruction expression. Also updates
           * the temp variables state with temp variables that were identified as needing to be created
           * while visiting the arguments.
           * @param value The original expression we will be resolving an arguments list from.
           */

        }, {
          key: "getUpdateInstructionArguments",
          value: function getUpdateInstructionArguments(value) {
            var _this$_tempVariables2;

            var _convertUpdateArgumen = convertUpdateArguments(this, this.getImplicitReceiverExpr(), value, this.bindingContext()),
                args = _convertUpdateArgumen.args,
                stmts = _convertUpdateArgumen.stmts;

            (_this$_tempVariables2 = this._tempVariables).push.apply(_this$_tempVariables2, _toConsumableArray(stmts));

            return args;
          }
        }, {
          key: "matchDirectives",
          value: function matchDirectives(elementName, elOrTpl) {
            var _this190 = this;

            if (this.directiveMatcher) {
              var selector = createCssSelector(elementName, getAttrsForDirectiveMatching(elOrTpl));
              this.directiveMatcher.match(selector, function (cssSelector, staticType) {
                _this190.directives.add(staticType);
              });
            }
          }
          /**
           * Prepares all attribute expression values for the `TAttributes` array.
           *
           * The purpose of this function is to properly construct an attributes array that
           * is passed into the `elementStart` (or just `element`) functions. Because there
           * are many different types of attributes, the array needs to be constructed in a
           * special way so that `elementStart` can properly evaluate them.
           *
           * The format looks like this:
           *
           * ```
           * attrs = [prop, value, prop2, value2,
           *   PROJECT_AS, selector,
           *   CLASSES, class1, class2,
           *   STYLES, style1, value1, style2, value2,
           *   BINDINGS, name1, name2, name3,
           *   TEMPLATE, name4, name5, name6,
           *   I18N, name7, name8, ...]
           * ```
           *
           * Note that this function will fully ignore all synthetic (@foo) attribute values
           * because those values are intended to always be generated as property instructions.
           */

        }, {
          key: "getAttributeExpressions",
          value: function getAttributeExpressions(elementName, renderAttributes, inputs, outputs, styles) {
            var templateAttrs = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : [];
            var boundI18nAttrs = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : [];
            var alreadySeen = new Set();
            var attrExprs = [];
            var ngProjectAsAttr;

            var _iterator19 = _createForOfIteratorHelper(renderAttributes),
                _step19;

            try {
              for (_iterator19.s(); !(_step19 = _iterator19.n()).done;) {
                var attr = _step19.value;

                if (attr.name === NG_PROJECT_AS_ATTR_NAME) {
                  ngProjectAsAttr = attr;
                } // Note that static i18n attributes aren't in the i18n array,
                // because they're treated in the same way as regular attributes.


                if (attr.i18n) {
                  // When i18n attributes are present on elements with structural directives
                  // (e.g. `<div *ngIf title="Hello" i18n-title>`), we want to avoid generating
                  // duplicate i18n translation blocks for `ɵɵtemplate` and `ɵɵelement` instruction
                  // attributes. So we do a cache lookup to see if suitable i18n translation block
                  // already exists.
                  var i18nVarRefsCache = this._constants.i18nVarRefsCache;
                  var i18nVarRef = void 0;

                  if (i18nVarRefsCache.has(attr.i18n)) {
                    i18nVarRef = i18nVarRefsCache.get(attr.i18n);
                  } else {
                    i18nVarRef = this.i18nTranslate(attr.i18n);
                    i18nVarRefsCache.set(attr.i18n, i18nVarRef);
                  }

                  attrExprs.push(literal(attr.name), i18nVarRef);
                } else {
                  attrExprs.push.apply(attrExprs, _toConsumableArray(getAttributeNameLiterals(attr.name)).concat([trustedConstAttribute(elementName, attr)]));
                }
              } // Keep ngProjectAs next to the other name, value pairs so we can verify that we match
              // ngProjectAs marker in the attribute name slot.

            } catch (err) {
              _iterator19.e(err);
            } finally {
              _iterator19.f();
            }

            if (ngProjectAsAttr) {
              attrExprs.push.apply(attrExprs, _toConsumableArray(getNgProjectAsLiteral(ngProjectAsAttr)));
            }

            function addAttrExpr(key, value) {
              if (typeof key === 'string') {
                if (!alreadySeen.has(key)) {
                  attrExprs.push.apply(attrExprs, _toConsumableArray(getAttributeNameLiterals(key)));
                  value !== undefined && attrExprs.push(value);
                  alreadySeen.add(key);
                }
              } else {
                attrExprs.push(literal(key));
              }
            } // it's important that this occurs before BINDINGS and TEMPLATE because once `elementStart`
            // comes across the BINDINGS or TEMPLATE markers then it will continue reading each value as
            // as single property value cell by cell.


            if (styles) {
              styles.populateInitialStylingAttrs(attrExprs);
            }

            if (inputs.length || outputs.length) {
              var attrsLengthBeforeInputs = attrExprs.length;

              for (var i = 0; i < inputs.length; i++) {
                var input = inputs[i]; // We don't want the animation and attribute bindings in the
                // attributes array since they aren't used for directive matching.

                if (input.type !== 4
                /* Animation */
                && input.type !== 1
                /* Attribute */
                ) {
                    addAttrExpr(input.name);
                  }
              }

              for (var _i7 = 0; _i7 < outputs.length; _i7++) {
                var output = outputs[_i7];

                if (output.type !== 1
                /* Animation */
                ) {
                    addAttrExpr(output.name);
                  }
              } // this is a cheap way of adding the marker only after all the input/output
              // values have been filtered (by not including the animation ones) and added
              // to the expressions. The marker is important because it tells the runtime
              // code that this is where attributes without values start...


              if (attrExprs.length !== attrsLengthBeforeInputs) {
                attrExprs.splice(attrsLengthBeforeInputs, 0, literal(3
                /* Bindings */
                ));
              }
            }

            if (templateAttrs.length) {
              attrExprs.push(literal(4
              /* Template */
              ));
              templateAttrs.forEach(function (attr) {
                return addAttrExpr(attr.name);
              });
            }

            if (boundI18nAttrs.length) {
              attrExprs.push(literal(6
              /* I18n */
              ));
              boundI18nAttrs.forEach(function (attr) {
                return addAttrExpr(attr.name);
              });
            }

            return attrExprs;
          }
        }, {
          key: "addToConsts",
          value: function addToConsts(expression) {
            if (isNull(expression)) {
              return TYPED_NULL_EXPR;
            }

            var consts = this._constants.constExpressions; // Try to reuse a literal that's already in the array, if possible.

            for (var i = 0; i < consts.length; i++) {
              if (consts[i].isEquivalent(expression)) {
                return literal(i);
              }
            }

            return literal(consts.push(expression) - 1);
          }
        }, {
          key: "addAttrsToConsts",
          value: function addAttrsToConsts(attrs) {
            return attrs.length > 0 ? this.addToConsts(literalArr(attrs)) : TYPED_NULL_EXPR;
          }
        }, {
          key: "prepareRefsArray",
          value: function prepareRefsArray(references) {
            var _this191 = this;

            if (!references || references.length === 0) {
              return TYPED_NULL_EXPR;
            }

            var refsParam = flatten(references.map(function (reference) {
              var slot = _this191.allocateDataSlot(); // Generate the update temporary.


              var variableName = _this191._bindingScope.freshReferenceName();

              var retrievalLevel = _this191.level;
              var lhs = variable(variableName);

              _this191._bindingScope.set(retrievalLevel, reference.name, lhs, 0
              /* DEFAULT */
              , function (scope, relativeLevel) {
                // e.g. nextContext(2);
                var nextContextStmt = relativeLevel > 0 ? [generateNextContextExpr(relativeLevel).toStmt()] : []; // e.g. const $foo$ = reference(1);

                var refExpr = lhs.set(importExpr(Identifiers$1.reference).callFn([literal(slot)]));
                return nextContextStmt.concat(refExpr.toConstDecl());
              }, true);

              return [reference.name, reference.value];
            }));
            return asLiteral(refsParam);
          }
        }, {
          key: "prepareListenerParameter",
          value: function prepareListenerParameter(tagName, outputAst, index) {
            var _this192 = this;

            return function () {
              var eventName = outputAst.name;
              var bindingFnName = outputAst.type === 1
              /* Animation */
              ? // synthetic @listener.foo values are treated the exact same as are standard listeners
              prepareSyntheticListenerFunctionName(eventName, outputAst.phase) : sanitizeIdentifier(eventName);
              var handlerName = "".concat(_this192.templateName, "_").concat(tagName, "_").concat(bindingFnName, "_").concat(index, "_listener");

              var scope = _this192._bindingScope.nestedScope(_this192._bindingScope.bindingLevel, EVENT_BINDING_SCOPE_GLOBALS);

              return prepareEventListenerParameters(outputAst, handlerName, scope);
            };
          }
        }]);

        return TemplateDefinitionBuilder;
      }();

      var ValueConverter = /*#__PURE__*/function (_AstMemoryEfficientTr) {
        _inherits(ValueConverter, _AstMemoryEfficientTr);

        var _super99 = _createSuper(ValueConverter);

        function ValueConverter(constantPool, allocateSlot, allocatePureFunctionSlots, definePipe) {
          var _this193;

          _classCallCheck(this, ValueConverter);

          _this193 = _super99.call(this);
          _this193.constantPool = constantPool;
          _this193.allocateSlot = allocateSlot;
          _this193.allocatePureFunctionSlots = allocatePureFunctionSlots;
          _this193.definePipe = definePipe;
          _this193._pipeBindExprs = [];
          return _this193;
        } // AstMemoryEfficientTransformer


        _createClass(ValueConverter, [{
          key: "visitPipe",
          value: function visitPipe(pipe, context) {
            // Allocate a slot to create the pipe
            var slot = this.allocateSlot();
            var slotPseudoLocal = "PIPE:".concat(slot); // Allocate one slot for the result plus one slot per pipe argument

            var pureFunctionSlot = this.allocatePureFunctionSlots(2 + pipe.args.length);
            var target = new PropertyRead(pipe.span, pipe.sourceSpan, pipe.nameSpan, new ImplicitReceiver(pipe.span, pipe.sourceSpan), slotPseudoLocal);

            var _pipeBindingCallInfo = pipeBindingCallInfo(pipe.args),
                identifier = _pipeBindingCallInfo.identifier,
                isVarLength = _pipeBindingCallInfo.isVarLength;

            this.definePipe(pipe.name, slotPseudoLocal, slot, importExpr(identifier));
            var args = [pipe.exp].concat(_toConsumableArray(pipe.args));
            var convertedArgs = isVarLength ? this.visitAll([new LiteralArray(pipe.span, pipe.sourceSpan, args)]) : this.visitAll(args);
            var pipeBindExpr = new FunctionCall(pipe.span, pipe.sourceSpan, target, [new LiteralPrimitive(pipe.span, pipe.sourceSpan, slot), new LiteralPrimitive(pipe.span, pipe.sourceSpan, pureFunctionSlot)].concat(_toConsumableArray(convertedArgs)));

            this._pipeBindExprs.push(pipeBindExpr);

            return pipeBindExpr;
          }
        }, {
          key: "updatePipeSlotOffsets",
          value: function updatePipeSlotOffsets(bindingSlots) {
            this._pipeBindExprs.forEach(function (pipe) {
              // update the slot offset arg (index 1) to account for binding slots
              var slotOffset = pipe.args[1];
              slotOffset.value += bindingSlots;
            });
          }
        }, {
          key: "visitLiteralArray",
          value: function visitLiteralArray(array, context) {
            var _this194 = this;

            return new BuiltinFunctionCall(array.span, array.sourceSpan, this.visitAll(array.expressions), function (values) {
              // If the literal has calculated (non-literal) elements transform it into
              // calls to literal factories that compose the literal and will cache intermediate
              // values.
              var literal = literalArr(values);
              return getLiteralFactory(_this194.constantPool, literal, _this194.allocatePureFunctionSlots);
            });
          }
        }, {
          key: "visitLiteralMap",
          value: function visitLiteralMap(map, context) {
            var _this195 = this;

            return new BuiltinFunctionCall(map.span, map.sourceSpan, this.visitAll(map.values), function (values) {
              // If the literal has calculated (non-literal) elements  transform it into
              // calls to literal factories that compose the literal and will cache intermediate
              // values.
              var literal = literalMap(values.map(function (value, index) {
                return {
                  key: map.keys[index].key,
                  value: value,
                  quoted: map.keys[index].quoted
                };
              }));
              return getLiteralFactory(_this195.constantPool, literal, _this195.allocatePureFunctionSlots);
            });
          }
        }]);

        return ValueConverter;
      }(AstMemoryEfficientTransformer); // Pipes always have at least one parameter, the value they operate on


      var pipeBindingIdentifiers = [Identifiers$1.pipeBind1, Identifiers$1.pipeBind2, Identifiers$1.pipeBind3, Identifiers$1.pipeBind4];

      function pipeBindingCallInfo(args) {
        var identifier = pipeBindingIdentifiers[args.length];
        return {
          identifier: identifier || Identifiers$1.pipeBindV,
          isVarLength: !identifier
        };
      }

      var pureFunctionIdentifiers = [Identifiers$1.pureFunction0, Identifiers$1.pureFunction1, Identifiers$1.pureFunction2, Identifiers$1.pureFunction3, Identifiers$1.pureFunction4, Identifiers$1.pureFunction5, Identifiers$1.pureFunction6, Identifiers$1.pureFunction7, Identifiers$1.pureFunction8];

      function pureFunctionCallInfo(args) {
        var identifier = pureFunctionIdentifiers[args.length];
        return {
          identifier: identifier || Identifiers$1.pureFunctionV,
          isVarLength: !identifier
        };
      }

      function instruction(span, reference, params) {
        return importExpr(reference, null, span).callFn(params, span);
      } // e.g. x(2);


      function generateNextContextExpr(relativeLevelDiff) {
        return importExpr(Identifiers$1.nextContext).callFn(relativeLevelDiff > 1 ? [literal(relativeLevelDiff)] : []);
      }

      function getLiteralFactory(constantPool, literal$1, allocateSlots) {
        var _constantPool$getLite = constantPool.getLiteralFactory(literal$1),
            literalFactory = _constantPool$getLite.literalFactory,
            literalFactoryArguments = _constantPool$getLite.literalFactoryArguments; // Allocate 1 slot for the result plus 1 per argument


        var startSlot = allocateSlots(1 + literalFactoryArguments.length);

        var _pureFunctionCallInfo = pureFunctionCallInfo(literalFactoryArguments),
            identifier = _pureFunctionCallInfo.identifier,
            isVarLength = _pureFunctionCallInfo.isVarLength; // Literal factories are pure functions that only need to be re-invoked when the parameters
        // change.


        var args = [literal(startSlot), literalFactory];

        if (isVarLength) {
          args.push(literalArr(literalFactoryArguments));
        } else {
          args.push.apply(args, _toConsumableArray(literalFactoryArguments));
        }

        return importExpr(identifier).callFn(args);
      }
      /**
       * Gets an array of literals that can be added to an expression
       * to represent the name and namespace of an attribute. E.g.
       * `:xlink:href` turns into `[AttributeMarker.NamespaceURI, 'xlink', 'href']`.
       *
       * @param name Name of the attribute, including the namespace.
       */


      function getAttributeNameLiterals(name) {
        var _splitNsName5 = splitNsName(name),
            _splitNsName6 = _slicedToArray(_splitNsName5, 2),
            attributeNamespace = _splitNsName6[0],
            attributeName = _splitNsName6[1];

        var nameLiteral = literal(attributeName);

        if (attributeNamespace) {
          return [literal(0
          /* NamespaceURI */
          ), literal(attributeNamespace), nameLiteral];
        }

        return [nameLiteral];
      }
      /** The prefix used to get a shared context in BindingScope's map. */


      var SHARED_CONTEXT_KEY = '$$shared_ctx$$';

      var BindingScope = /*#__PURE__*/function () {
        function BindingScope() {
          var bindingLevel = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
          var parent = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
          var globals = arguments.length > 2 ? arguments[2] : undefined;

          _classCallCheck(this, BindingScope);

          this.bindingLevel = bindingLevel;
          this.parent = parent;
          this.globals = globals;
          /** Keeps a map from local variables to their BindingData. */

          this.map = new Map();
          this.referenceNameIndex = 0;
          this.restoreViewVariable = null;

          if (globals !== undefined) {
            var _iterator20 = _createForOfIteratorHelper(globals),
                _step20;

            try {
              for (_iterator20.s(); !(_step20 = _iterator20.n()).done;) {
                var name = _step20.value;
                this.set(0, name, variable(name));
              }
            } catch (err) {
              _iterator20.e(err);
            } finally {
              _iterator20.f();
            }
          }
        }

        _createClass(BindingScope, [{
          key: "get",
          value: function get(name) {
            var current = this;

            while (current) {
              var value = current.map.get(name);

              if (value != null) {
                if (current !== this) {
                  // make a local copy and reset the `declare` state
                  value = {
                    retrievalLevel: value.retrievalLevel,
                    lhs: value.lhs,
                    declareLocalCallback: value.declareLocalCallback,
                    declare: false,
                    priority: value.priority,
                    localRef: value.localRef
                  }; // Cache the value locally.

                  this.map.set(name, value); // Possibly generate a shared context var

                  this.maybeGenerateSharedContextVar(value);
                  this.maybeRestoreView(value.retrievalLevel, value.localRef);
                }

                if (value.declareLocalCallback && !value.declare) {
                  value.declare = true;
                }

                return value.lhs;
              }

              current = current.parent;
            } // If we get to this point, we are looking for a property on the top level component
            // - If level === 0, we are on the top and don't need to re-declare `ctx`.
            // - If level > 0, we are in an embedded view. We need to retrieve the name of the
            // local var we used to store the component context, e.g. const $comp$ = x();


            return this.bindingLevel === 0 ? null : this.getComponentProperty(name);
          }
          /**
           * Create a local variable for later reference.
           *
           * @param retrievalLevel The level from which this value can be retrieved
           * @param name Name of the variable.
           * @param lhs AST representing the left hand side of the `let lhs = rhs;`.
           * @param priority The sorting priority of this var
           * @param declareLocalCallback The callback to invoke when declaring this local var
           * @param localRef Whether or not this is a local ref
           */

        }, {
          key: "set",
          value: function set(retrievalLevel, name, lhs) {
            var priority = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;
            var
            /* DEFAULT */
            declareLocalCallback = arguments.length > 4 ? arguments[4] : undefined;
            var localRef = arguments.length > 5 ? arguments[5] : undefined;

            if (this.map.has(name)) {
              if (localRef) {
                // Do not throw an error if it's a local ref and do not update existing value,
                // so the first defined ref is always returned.
                return this;
              }

              error("The name ".concat(name, " is already defined in scope to be ").concat(this.map.get(name)));
            }

            this.map.set(name, {
              retrievalLevel: retrievalLevel,
              lhs: lhs,
              declare: false,
              declareLocalCallback: declareLocalCallback,
              priority: priority,
              localRef: localRef || false
            });
            return this;
          } // Implemented as part of LocalResolver.

        }, {
          key: "getLocal",
          value: function getLocal(name) {
            return this.get(name);
          } // Implemented as part of LocalResolver.

        }, {
          key: "notifyImplicitReceiverUse",
          value: function notifyImplicitReceiverUse() {
            if (this.bindingLevel !== 0) {
              // Since the implicit receiver is accessed in an embedded view, we need to
              // ensure that we declare a shared context variable for the current template
              // in the update variables.
              this.map.get(SHARED_CONTEXT_KEY + 0).declare = true;
            }
          }
        }, {
          key: "nestedScope",
          value: function nestedScope(level, globals) {
            var newScope = new BindingScope(level, this, globals);
            if (level > 0) newScope.generateSharedContextVar(0);
            return newScope;
          }
          /**
           * Gets or creates a shared context variable and returns its expression. Note that
           * this does not mean that the shared variable will be declared. Variables in the
           * binding scope will be only declared if they are used.
           */

        }, {
          key: "getOrCreateSharedContextVar",
          value: function getOrCreateSharedContextVar(retrievalLevel) {
            var bindingKey = SHARED_CONTEXT_KEY + retrievalLevel;

            if (!this.map.has(bindingKey)) {
              this.generateSharedContextVar(retrievalLevel);
            } // Shared context variables are always generated as "ReadVarExpr".


            return this.map.get(bindingKey).lhs;
          }
        }, {
          key: "getSharedContextName",
          value: function getSharedContextName(retrievalLevel) {
            var sharedCtxObj = this.map.get(SHARED_CONTEXT_KEY + retrievalLevel); // Shared context variables are always generated as "ReadVarExpr".

            return sharedCtxObj && sharedCtxObj.declare ? sharedCtxObj.lhs : null;
          }
        }, {
          key: "maybeGenerateSharedContextVar",
          value: function maybeGenerateSharedContextVar(value) {
            if (value.priority === 1
            /* CONTEXT */
            && value.retrievalLevel < this.bindingLevel) {
              var sharedCtxObj = this.map.get(SHARED_CONTEXT_KEY + value.retrievalLevel);

              if (sharedCtxObj) {
                sharedCtxObj.declare = true;
              } else {
                this.generateSharedContextVar(value.retrievalLevel);
              }
            }
          }
        }, {
          key: "generateSharedContextVar",
          value: function generateSharedContextVar(retrievalLevel) {
            var lhs = variable(CONTEXT_NAME + this.freshReferenceName());
            this.map.set(SHARED_CONTEXT_KEY + retrievalLevel, {
              retrievalLevel: retrievalLevel,
              lhs: lhs,
              declareLocalCallback: function declareLocalCallback(scope, relativeLevel) {
                // const ctx_r0 = nextContext(2);
                return [lhs.set(generateNextContextExpr(relativeLevel)).toConstDecl()];
              },
              declare: false,
              priority: 2
              /* SHARED_CONTEXT */
              ,
              localRef: false
            });
          }
        }, {
          key: "getComponentProperty",
          value: function getComponentProperty(name) {
            var componentValue = this.map.get(SHARED_CONTEXT_KEY + 0);
            componentValue.declare = true;
            this.maybeRestoreView(0, false);
            return componentValue.lhs.prop(name);
          }
        }, {
          key: "maybeRestoreView",
          value: function maybeRestoreView(retrievalLevel, localRefLookup) {
            // We want to restore the current view in listener fns if:
            // 1 - we are accessing a value in a parent view, which requires walking the view tree rather
            // than using the ctx arg. In this case, the retrieval and binding level will be different.
            // 2 - we are looking up a local ref, which requires restoring the view where the local
            // ref is stored
            if (this.isListenerScope() && (retrievalLevel < this.bindingLevel || localRefLookup)) {
              if (!this.parent.restoreViewVariable) {
                // parent saves variable to generate a shared `const $s$ = getCurrentView();` instruction
                this.parent.restoreViewVariable = variable(this.parent.freshReferenceName());
              }

              this.restoreViewVariable = this.parent.restoreViewVariable;
            }
          }
        }, {
          key: "restoreViewStatement",
          value: function restoreViewStatement() {
            // restoreView($state$);
            return this.restoreViewVariable ? [instruction(null, Identifiers$1.restoreView, [this.restoreViewVariable]).toStmt()] : [];
          }
        }, {
          key: "viewSnapshotStatements",
          value: function viewSnapshotStatements() {
            // const $state$ = getCurrentView();
            var getCurrentViewInstruction = instruction(null, Identifiers$1.getCurrentView, []);
            return this.restoreViewVariable ? [this.restoreViewVariable.set(getCurrentViewInstruction).toConstDecl()] : [];
          }
        }, {
          key: "isListenerScope",
          value: function isListenerScope() {
            return this.parent && this.parent.bindingLevel === this.bindingLevel;
          }
        }, {
          key: "variableDeclarations",
          value: function variableDeclarations() {
            var _this196 = this;

            var currentContextLevel = 0;
            return Array.from(this.map.values()).filter(function (value) {
              return value.declare;
            }).sort(function (a, b) {
              return b.retrievalLevel - a.retrievalLevel || b.priority - a.priority;
            }).reduce(function (stmts, value) {
              var levelDiff = _this196.bindingLevel - value.retrievalLevel;
              var currStmts = value.declareLocalCallback(_this196, levelDiff - currentContextLevel);
              currentContextLevel = levelDiff;
              return stmts.concat(currStmts);
            }, []);
          }
        }, {
          key: "freshReferenceName",
          value: function freshReferenceName() {
            var current = this; // Find the top scope as it maintains the global reference count

            while (current.parent) {
              current = current.parent;
            }

            var ref = "".concat(REFERENCE_PREFIX).concat(current.referenceNameIndex++);
            return ref;
          }
        }], [{
          key: "createRootScope",
          value: function createRootScope() {
            return new BindingScope();
          }
        }]);

        return BindingScope;
      }();
      /**
       * Creates a `CssSelector` given a tag name and a map of attributes
       */


      function createCssSelector(elementName, attributes) {
        var cssSelector = new CssSelector();
        var elementNameNoNs = splitNsName(elementName)[1];
        cssSelector.setElement(elementNameNoNs);
        Object.getOwnPropertyNames(attributes).forEach(function (name) {
          var nameNoNs = splitNsName(name)[1];
          var value = attributes[name];
          cssSelector.addAttribute(nameNoNs, value);

          if (name.toLowerCase() === 'class') {
            var classes = value.trim().split(/\s+/);
            classes.forEach(function (className) {
              return cssSelector.addClassName(className);
            });
          }
        });
        return cssSelector;
      }
      /**
       * Creates an array of expressions out of an `ngProjectAs` attributes
       * which can be added to the instruction parameters.
       */


      function getNgProjectAsLiteral(attribute) {
        // Parse the attribute value into a CssSelectorList. Note that we only take the
        // first selector, because we don't support multiple selectors in ngProjectAs.
        var parsedR3Selector = parseSelectorToR3Selector(attribute.value)[0];
        return [literal(5
        /* ProjectAs */
        ), asLiteral(parsedR3Selector)];
      }
      /**
       * Gets the instruction to generate for an interpolated property
       * @param interpolation An Interpolation AST
       */


      function getPropertyInterpolationExpression(interpolation) {
        switch (getInterpolationArgsLength(interpolation)) {
          case 1:
            return Identifiers$1.propertyInterpolate;

          case 3:
            return Identifiers$1.propertyInterpolate1;

          case 5:
            return Identifiers$1.propertyInterpolate2;

          case 7:
            return Identifiers$1.propertyInterpolate3;

          case 9:
            return Identifiers$1.propertyInterpolate4;

          case 11:
            return Identifiers$1.propertyInterpolate5;

          case 13:
            return Identifiers$1.propertyInterpolate6;

          case 15:
            return Identifiers$1.propertyInterpolate7;

          case 17:
            return Identifiers$1.propertyInterpolate8;

          default:
            return Identifiers$1.propertyInterpolateV;
        }
      }
      /**
       * Gets the instruction to generate for an interpolated attribute
       * @param interpolation An Interpolation AST
       */


      function getAttributeInterpolationExpression(interpolation) {
        switch (getInterpolationArgsLength(interpolation)) {
          case 3:
            return Identifiers$1.attributeInterpolate1;

          case 5:
            return Identifiers$1.attributeInterpolate2;

          case 7:
            return Identifiers$1.attributeInterpolate3;

          case 9:
            return Identifiers$1.attributeInterpolate4;

          case 11:
            return Identifiers$1.attributeInterpolate5;

          case 13:
            return Identifiers$1.attributeInterpolate6;

          case 15:
            return Identifiers$1.attributeInterpolate7;

          case 17:
            return Identifiers$1.attributeInterpolate8;

          default:
            return Identifiers$1.attributeInterpolateV;
        }
      }
      /**
       * Gets the instruction to generate for interpolated text.
       * @param interpolation An Interpolation AST
       */


      function getTextInterpolationExpression(interpolation) {
        switch (getInterpolationArgsLength(interpolation)) {
          case 1:
            return Identifiers$1.textInterpolate;

          case 3:
            return Identifiers$1.textInterpolate1;

          case 5:
            return Identifiers$1.textInterpolate2;

          case 7:
            return Identifiers$1.textInterpolate3;

          case 9:
            return Identifiers$1.textInterpolate4;

          case 11:
            return Identifiers$1.textInterpolate5;

          case 13:
            return Identifiers$1.textInterpolate6;

          case 15:
            return Identifiers$1.textInterpolate7;

          case 17:
            return Identifiers$1.textInterpolate8;

          default:
            return Identifiers$1.textInterpolateV;
        }
      }
      /**
       * Parse a template into render3 `Node`s and additional metadata, with no other dependencies.
       *
       * @param template text of the template to parse
       * @param templateUrl URL to use for source mapping of the parsed template
       * @param options options to modify how the template is parsed
       */


      function parseTemplate(template, templateUrl) {
        var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

        var _a;

        var interpolationConfig = options.interpolationConfig,
            preserveWhitespaces = options.preserveWhitespaces,
            enableI18nLegacyMessageIdFormat = options.enableI18nLegacyMessageIdFormat;
        var isInline = (_a = options.isInline) !== null && _a !== void 0 ? _a : false;
        var bindingParser = makeBindingParser(interpolationConfig);
        var htmlParser = new HtmlParser();
        var parseResult = htmlParser.parse(template, templateUrl, Object.assign(Object.assign({
          leadingTriviaChars: LEADING_TRIVIA_CHARS
        }, options), {
          tokenizeExpansionForms: true
        }));

        if (!options.alwaysAttemptHtmlToR3AstConversion && parseResult.errors && parseResult.errors.length > 0) {
          return {
            interpolationConfig: interpolationConfig,
            preserveWhitespaces: preserveWhitespaces,
            template: template,
            templateUrl: templateUrl,
            isInline: isInline,
            errors: parseResult.errors,
            nodes: [],
            styleUrls: [],
            styles: [],
            ngContentSelectors: []
          };
        }

        var rootNodes = parseResult.rootNodes; // process i18n meta information (scan attributes, generate ids)
        // before we run whitespace removal process, because existing i18n
        // extraction process (ng extract-i18n) relies on a raw content to generate
        // message ids

        var i18nMetaVisitor = new I18nMetaVisitor(interpolationConfig,
        /* keepI18nAttrs */
        !preserveWhitespaces, enableI18nLegacyMessageIdFormat);
        var i18nMetaResult = i18nMetaVisitor.visitAllWithErrors(rootNodes);

        if (!options.alwaysAttemptHtmlToR3AstConversion && i18nMetaResult.errors && i18nMetaResult.errors.length > 0) {
          return {
            interpolationConfig: interpolationConfig,
            preserveWhitespaces: preserveWhitespaces,
            template: template,
            templateUrl: templateUrl,
            isInline: isInline,
            errors: i18nMetaResult.errors,
            nodes: [],
            styleUrls: [],
            styles: [],
            ngContentSelectors: []
          };
        }

        rootNodes = i18nMetaResult.rootNodes;

        if (!preserveWhitespaces) {
          rootNodes = visitAll$1(new WhitespaceVisitor(), rootNodes); // run i18n meta visitor again in case whitespaces are removed (because that might affect
          // generated i18n message content) and first pass indicated that i18n content is present in a
          // template. During this pass i18n IDs generated at the first pass will be preserved, so we can
          // mimic existing extraction process (ng extract-i18n)

          if (i18nMetaVisitor.hasI18nMeta) {
            rootNodes = visitAll$1(new I18nMetaVisitor(interpolationConfig,
            /* keepI18nAttrs */
            false), rootNodes);
          }
        }

        var _htmlAstToRender3Ast = htmlAstToRender3Ast(rootNodes, bindingParser),
            nodes = _htmlAstToRender3Ast.nodes,
            errors = _htmlAstToRender3Ast.errors,
            styleUrls = _htmlAstToRender3Ast.styleUrls,
            styles = _htmlAstToRender3Ast.styles,
            ngContentSelectors = _htmlAstToRender3Ast.ngContentSelectors;

        errors.push.apply(errors, _toConsumableArray(parseResult.errors).concat(_toConsumableArray(i18nMetaResult.errors)));
        return {
          interpolationConfig: interpolationConfig,
          preserveWhitespaces: preserveWhitespaces,
          errors: errors.length > 0 ? errors : null,
          template: template,
          templateUrl: templateUrl,
          isInline: isInline,
          nodes: nodes,
          styleUrls: styleUrls,
          styles: styles,
          ngContentSelectors: ngContentSelectors
        };
      }

      var elementRegistry = new DomElementSchemaRegistry();
      /**
       * Construct a `BindingParser` with a default configuration.
       */

      function makeBindingParser() {
        var interpolationConfig = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : DEFAULT_INTERPOLATION_CONFIG;
        return new BindingParser(new IvyParser(new Lexer()), interpolationConfig, elementRegistry, null, []);
      }

      function resolveSanitizationFn(context, isAttribute) {
        switch (context) {
          case SecurityContext.HTML:
            return importExpr(Identifiers$1.sanitizeHtml);

          case SecurityContext.SCRIPT:
            return importExpr(Identifiers$1.sanitizeScript);

          case SecurityContext.STYLE:
            // the compiler does not fill in an instruction for [style.prop?] binding
            // values because the style algorithm knows internally what props are subject
            // to sanitization (only [attr.style] values are explicitly sanitized)
            return isAttribute ? importExpr(Identifiers$1.sanitizeStyle) : null;

          case SecurityContext.URL:
            return importExpr(Identifiers$1.sanitizeUrl);

          case SecurityContext.RESOURCE_URL:
            return importExpr(Identifiers$1.sanitizeResourceUrl);

          default:
            return null;
        }
      }

      function trustedConstAttribute(tagName, attr) {
        var value = asLiteral(attr.value);

        if (isTrustedTypesSink(tagName, attr.name)) {
          switch (elementRegistry.securityContext(tagName, attr.name,
          /* isAttribute */
          true)) {
            case SecurityContext.HTML:
              return taggedTemplate(importExpr(Identifiers$1.trustConstantHtml), new TemplateLiteral([new TemplateLiteralElement(attr.value)], []), undefined, attr.valueSpan);
            // NB: no SecurityContext.SCRIPT here, as the corresponding tags are stripped by the compiler.

            case SecurityContext.RESOURCE_URL:
              return taggedTemplate(importExpr(Identifiers$1.trustConstantResourceUrl), new TemplateLiteral([new TemplateLiteralElement(attr.value)], []), undefined, attr.valueSpan);

            default:
              return value;
          }
        } else {
          return value;
        }
      }

      function isSingleElementTemplate(children) {
        return children.length === 1 && children[0] instanceof Element;
      }

      function isTextNode(node) {
        return node instanceof Text || node instanceof BoundText || node instanceof Icu;
      }

      function hasTextChildrenOnly(children) {
        return children.every(isTextNode);
      }
      /** Name of the global variable that is used to determine if we use Closure translations or not */


      var NG_I18N_CLOSURE_MODE = 'ngI18nClosureMode';
      /**
       * Generate statements that define a given translation message.
       *
       * ```
       * var I18N_1;
       * if (typeof ngI18nClosureMode !== undefined && ngI18nClosureMode) {
       *     var MSG_EXTERNAL_XXX = goog.getMsg(
       *          "Some message with {$interpolation}!",
       *          { "interpolation": "\uFFFD0\uFFFD" }
       *     );
       *     I18N_1 = MSG_EXTERNAL_XXX;
       * }
       * else {
       *     I18N_1 = $localize`Some message with ${'\uFFFD0\uFFFD'}!`;
       * }
       * ```
       *
       * @param message The original i18n AST message node
       * @param variable The variable that will be assigned the translation, e.g. `I18N_1`.
       * @param closureVar The variable for Closure `goog.getMsg` calls, e.g. `MSG_EXTERNAL_XXX`.
       * @param params Object mapping placeholder names to their values (e.g.
       * `{ "interpolation": "\uFFFD0\uFFFD" }`).
       * @param transformFn Optional transformation function that will be applied to the translation (e.g.
       * post-processing).
       * @returns An array of statements that defined a given translation.
       */

      function getTranslationDeclStmts(message, variable, closureVar) {
        var params = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
        var transformFn = arguments.length > 4 ? arguments[4] : undefined;
        var statements = [declareI18nVariable(variable), ifStmt(createClosureModeGuard(), createGoogleGetMsgStatements(variable, message, closureVar, i18nFormatPlaceholderNames(params,
        /* useCamelCase */
        true)), createLocalizeStatements(variable, message, i18nFormatPlaceholderNames(params,
        /* useCamelCase */
        false)))];

        if (transformFn) {
          statements.push(new ExpressionStatement(variable.set(transformFn(variable))));
        }

        return statements;
      }
      /**
       * Create the expression that will be used to guard the closure mode block
       * It is equivalent to:
       *
       * ```
       * typeof ngI18nClosureMode !== undefined && ngI18nClosureMode
       * ```
       */


      function createClosureModeGuard() {
        return typeofExpr(variable(NG_I18N_CLOSURE_MODE)).notIdentical(literal('undefined', STRING_TYPE)).and(variable(NG_I18N_CLOSURE_MODE));
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      var EMPTY_ARRAY = []; // This regex matches any binding names that contain the "attr." prefix, e.g. "attr.required"
      // If there is a match, the first matching group will contain the attribute name to bind.

      var ATTR_REGEX = /attr\.([^\]]+)/;

      function baseDirectiveFields(meta, constantPool, bindingParser) {
        var definitionMap = new DefinitionMap();
        var selectors = parseSelectorToR3Selector(meta.selector); // e.g. `type: MyDirective`

        definitionMap.set('type', meta.internalType); // e.g. `selectors: [['', 'someDir', '']]`

        if (selectors.length > 0) {
          definitionMap.set('selectors', asLiteral(selectors));
        }

        if (meta.queries.length > 0) {
          // e.g. `contentQueries: (rf, ctx, dirIndex) => { ... }
          definitionMap.set('contentQueries', createContentQueriesFunction(meta.queries, constantPool, meta.name));
        }

        if (meta.viewQueries.length) {
          definitionMap.set('viewQuery', createViewQueriesFunction(meta.viewQueries, constantPool, meta.name));
        } // e.g. `hostBindings: (rf, ctx) => { ... }


        definitionMap.set('hostBindings', createHostBindingsFunction(meta.host, meta.typeSourceSpan, bindingParser, constantPool, meta.selector || '', meta.name, definitionMap)); // e.g 'inputs: {a: 'a'}`

        definitionMap.set('inputs', conditionallyCreateMapObjectLiteral(meta.inputs, true)); // e.g 'outputs: {a: 'a'}`

        definitionMap.set('outputs', conditionallyCreateMapObjectLiteral(meta.outputs));

        if (meta.exportAs !== null) {
          definitionMap.set('exportAs', literalArr(meta.exportAs.map(function (e) {
            return literal(e);
          })));
        }

        return definitionMap;
      }
      /**
       * Add features to the definition map.
       */


      function addFeatures(definitionMap, meta) {
        // e.g. `features: [NgOnChangesFeature]`
        var features = [];
        var providers = meta.providers;
        var viewProviders = meta.viewProviders;

        if (providers || viewProviders) {
          var args = [providers || new LiteralArrayExpr([])];

          if (viewProviders) {
            args.push(viewProviders);
          }

          features.push(importExpr(Identifiers$1.ProvidersFeature).callFn(args));
        }

        if (meta.usesInheritance) {
          features.push(importExpr(Identifiers$1.InheritDefinitionFeature));
        }

        if (meta.fullInheritance) {
          features.push(importExpr(Identifiers$1.CopyDefinitionFeature));
        }

        if (meta.lifecycle.usesOnChanges) {
          features.push(importExpr(Identifiers$1.NgOnChangesFeature));
        }

        if (features.length) {
          definitionMap.set('features', literalArr(features));
        }
      }
      /**
       * Compile a directive for the render3 runtime as defined by the `R3DirectiveMetadata`.
       */


      function compileDirectiveFromMetadata(meta, constantPool, bindingParser) {
        var definitionMap = baseDirectiveFields(meta, constantPool, bindingParser);
        addFeatures(definitionMap, meta);
        var expression = importExpr(Identifiers$1.defineDirective).callFn([definitionMap.toLiteralMap()]);
        var type = createDirectiveType(meta);
        return {
          expression: expression,
          type: type
        };
      }
      /**
       * Compile a component for the render3 runtime as defined by the `R3ComponentMetadata`.
       */


      function compileComponentFromMetadata(meta, constantPool, bindingParser) {
        var definitionMap = baseDirectiveFields(meta, constantPool, bindingParser);
        addFeatures(definitionMap, meta);
        var selector = meta.selector && CssSelector.parse(meta.selector);
        var firstSelector = selector && selector[0]; // e.g. `attr: ["class", ".my.app"]`
        // This is optional an only included if the first selector of a component specifies attributes.

        if (firstSelector) {
          var selectorAttributes = firstSelector.getAttrs();

          if (selectorAttributes.length) {
            definitionMap.set('attrs', constantPool.getConstLiteral(literalArr(selectorAttributes.map(function (value) {
              return value != null ? literal(value) : literal(undefined);
            })),
            /* forceShared */
            true));
          }
        } // Generate the CSS matcher that recognize directive


        var directiveMatcher = null;

        if (meta.directives.length > 0) {
          var matcher = new SelectorMatcher();

          var _iterator21 = _createForOfIteratorHelper(meta.directives),
              _step21;

          try {
            for (_iterator21.s(); !(_step21 = _iterator21.n()).done;) {
              var _step21$value = _step21.value,
                  _selector = _step21$value.selector,
                  _type = _step21$value.type;
              matcher.addSelectables(CssSelector.parse(_selector), _type);
            }
          } catch (err) {
            _iterator21.e(err);
          } finally {
            _iterator21.f();
          }

          directiveMatcher = matcher;
        } // e.g. `template: function MyComponent_Template(_ctx, _cm) {...}`


        var templateTypeName = meta.name;
        var templateName = templateTypeName ? "".concat(templateTypeName, "_Template") : null;
        var directivesUsed = new Set();
        var pipesUsed = new Set();
        var changeDetection = meta.changeDetection;
        var template = meta.template;
        var templateBuilder = new TemplateDefinitionBuilder(constantPool, BindingScope.createRootScope(), 0, templateTypeName, null, null, templateName, directiveMatcher, directivesUsed, meta.pipes, pipesUsed, Identifiers$1.namespaceHTML, meta.relativeContextFilePath, meta.i18nUseExternalIds);
        var templateFunctionExpression = templateBuilder.buildTemplateFunction(template.nodes, []); // We need to provide this so that dynamically generated components know what
        // projected content blocks to pass through to the component when it is instantiated.

        var ngContentSelectors = templateBuilder.getNgContentSelectors();

        if (ngContentSelectors) {
          definitionMap.set('ngContentSelectors', ngContentSelectors);
        } // e.g. `decls: 2`


        definitionMap.set('decls', literal(templateBuilder.getConstCount())); // e.g. `vars: 2`

        definitionMap.set('vars', literal(templateBuilder.getVarCount())); // Generate `consts` section of ComponentDef:
        // - either as an array:
        //   `consts: [['one', 'two'], ['three', 'four']]`
        // - or as a factory function in case additional statements are present (to support i18n):
        //   `consts: function() { var i18n_0; if (ngI18nClosureMode) {...} else {...} return [i18n_0]; }`

        var _templateBuilder$getC = templateBuilder.getConsts(),
            constExpressions = _templateBuilder$getC.constExpressions,
            prepareStatements = _templateBuilder$getC.prepareStatements;

        if (constExpressions.length > 0) {
          var constsExpr = literalArr(constExpressions); // Prepare statements are present - turn `consts` into a function.

          if (prepareStatements.length > 0) {
            constsExpr = fn([], [].concat(_toConsumableArray(prepareStatements), [new ReturnStatement(constsExpr)]));
          }

          definitionMap.set('consts', constsExpr);
        }

        definitionMap.set('template', templateFunctionExpression); // e.g. `directives: [MyDirective]`

        if (directivesUsed.size) {
          var directivesList = literalArr(Array.from(directivesUsed));
          var directivesExpr = compileDeclarationList(directivesList, meta.declarationListEmitMode);
          definitionMap.set('directives', directivesExpr);
        } // e.g. `pipes: [MyPipe]`


        if (pipesUsed.size) {
          var pipesList = literalArr(Array.from(pipesUsed));
          var pipesExpr = compileDeclarationList(pipesList, meta.declarationListEmitMode);
          definitionMap.set('pipes', pipesExpr);
        }

        if (meta.encapsulation === null) {
          meta.encapsulation = ViewEncapsulation.Emulated;
        } // e.g. `styles: [str1, str2]`


        if (meta.styles && meta.styles.length) {
          var styleValues = meta.encapsulation == ViewEncapsulation.Emulated ? compileStyles(meta.styles, CONTENT_ATTR, HOST_ATTR) : meta.styles;
          var strings = styleValues.map(function (str) {
            return constantPool.getConstLiteral(literal(str));
          });
          definitionMap.set('styles', literalArr(strings));
        } else if (meta.encapsulation === ViewEncapsulation.Emulated) {
          // If there is no style, don't generate css selectors on elements
          meta.encapsulation = ViewEncapsulation.None;
        } // Only set view encapsulation if it's not the default value


        if (meta.encapsulation !== ViewEncapsulation.Emulated) {
          definitionMap.set('encapsulation', literal(meta.encapsulation));
        } // e.g. `animation: [trigger('123', [])]`


        if (meta.animations !== null) {
          definitionMap.set('data', literalMap([{
            key: 'animation',
            value: meta.animations,
            quoted: false
          }]));
        } // Only set the change detection flag if it's defined and it's not the default.


        if (changeDetection != null && changeDetection !== ChangeDetectionStrategy.Default) {
          definitionMap.set('changeDetection', literal(changeDetection));
        }

        var expression = importExpr(Identifiers$1.defineComponent).callFn([definitionMap.toLiteralMap()]);
        var type = createComponentType(meta);
        return {
          expression: expression,
          type: type
        };
      }
      /**
       * Creates the type specification from the component meta. This type is inserted into .d.ts files
       * to be consumed by upstream compilations.
       */


      function createComponentType(meta) {
        var typeParams = createDirectiveTypeParams(meta);
        typeParams.push(stringArrayAsType(meta.template.ngContentSelectors));
        return expressionType(importExpr(Identifiers$1.ComponentDefWithMeta, typeParams));
      }
      /**
       * Compiles the array literal of declarations into an expression according to the provided emit
       * mode.
       */


      function compileDeclarationList(list, mode) {
        switch (mode) {
          case 0
          /* Direct */
          :
            // directives: [MyDir],
            return list;

          case 1
          /* Closure */
          :
            // directives: function () { return [MyDir]; }
            return fn([], [new ReturnStatement(list)]);

          case 2
          /* ClosureResolved */
          :
            // directives: function () { return [MyDir].map(ng.resolveForwardRef); }
            var resolvedList = list.callMethod('map', [importExpr(Identifiers$1.resolveForwardRef)]);
            return fn([], [new ReturnStatement(resolvedList)]);
        }
      }
      /**
       * A wrapper around `compileDirective` which depends on render2 global analysis data as its input
       * instead of the `R3DirectiveMetadata`.
       *
       * `R3DirectiveMetadata` is computed from `CompileDirectiveMetadata` and other statically reflected
       * information.
       */


      function compileDirectiveFromRender2(outputCtx, directive, reflector, bindingParser) {
        var name = identifierName(directive.type);
        name || error("Cannot resolver the name of ".concat(directive.type));
        var definitionField = outputCtx.constantPool.propertyNameOf(1
        /* Directive */
        );
        var meta = directiveMetadataFromGlobalMetadata(directive, outputCtx, reflector);
        var res = compileDirectiveFromMetadata(meta, outputCtx.constantPool, bindingParser);
        var factoryRes = compileFactoryFunction(Object.assign(Object.assign({}, meta), {
          injectFn: Identifiers$1.directiveInject,
          target: R3FactoryTarget.Directive
        }));
        var ngFactoryDefStatement = new ClassStmt(name, null, [new ClassField('ɵfac', INFERRED_TYPE, [StmtModifier.Static], factoryRes.factory)], [], new ClassMethod(null, [], []), []);
        var directiveDefStatement = new ClassStmt(name, null, [new ClassField(definitionField, INFERRED_TYPE, [StmtModifier.Static], res.expression)], [], new ClassMethod(null, [], []), []); // Create the partial class to be merged with the actual class.

        outputCtx.statements.push(ngFactoryDefStatement, directiveDefStatement);
      }
      /**
       * A wrapper around `compileComponent` which depends on render2 global analysis data as its input
       * instead of the `R3DirectiveMetadata`.
       *
       * `R3ComponentMetadata` is computed from `CompileDirectiveMetadata` and other statically reflected
       * information.
       */


      function compileComponentFromRender2(outputCtx, component, render3Ast, reflector, bindingParser, directiveTypeBySel, pipeTypeByName) {
        var name = identifierName(component.type);
        name || error("Cannot resolver the name of ".concat(component.type));
        var definitionField = outputCtx.constantPool.propertyNameOf(2
        /* Component */
        );
        var summary = component.toSummary(); // Compute the R3ComponentMetadata from the CompileDirectiveMetadata

        var meta = Object.assign(Object.assign({}, directiveMetadataFromGlobalMetadata(component, outputCtx, reflector)), {
          selector: component.selector,
          template: {
            nodes: render3Ast.nodes,
            ngContentSelectors: render3Ast.ngContentSelectors
          },
          directives: [],
          pipes: typeMapToExpressionMap(pipeTypeByName, outputCtx),
          viewQueries: queriesFromGlobalMetadata(component.viewQueries, outputCtx),
          declarationListEmitMode: 0
          /* Direct */
          ,
          styles: summary.template && summary.template.styles || EMPTY_ARRAY,
          encapsulation: summary.template && summary.template.encapsulation || ViewEncapsulation.Emulated,
          interpolation: DEFAULT_INTERPOLATION_CONFIG,
          animations: null,
          viewProviders: component.viewProviders.length > 0 ? new WrappedNodeExpr(component.viewProviders) : null,
          relativeContextFilePath: '',
          i18nUseExternalIds: true
        });
        var res = compileComponentFromMetadata(meta, outputCtx.constantPool, bindingParser);
        var factoryRes = compileFactoryFunction(Object.assign(Object.assign({}, meta), {
          injectFn: Identifiers$1.directiveInject,
          target: R3FactoryTarget.Directive
        }));
        var ngFactoryDefStatement = new ClassStmt(name, null, [new ClassField('ɵfac', INFERRED_TYPE, [StmtModifier.Static], factoryRes.factory)], [], new ClassMethod(null, [], []), []);
        var componentDefStatement = new ClassStmt(name, null, [new ClassField(definitionField, INFERRED_TYPE, [StmtModifier.Static], res.expression)], [], new ClassMethod(null, [], []), []); // Create the partial class to be merged with the actual class.

        outputCtx.statements.push(ngFactoryDefStatement, componentDefStatement);
      }
      /**
       * Compute `R3DirectiveMetadata` given `CompileDirectiveMetadata` and a `CompileReflector`.
       */


      function directiveMetadataFromGlobalMetadata(directive, outputCtx, reflector) {
        // The global-analysis based Ivy mode in ngc is no longer utilized/supported.
        throw new Error('unsupported');
      }
      /**
       * Convert `CompileQueryMetadata` into `R3QueryMetadata`.
       */


      function queriesFromGlobalMetadata(queries, outputCtx) {
        return queries.map(function (query) {
          var read = null;

          if (query.read && query.read.identifier) {
            read = outputCtx.importExpr(query.read.identifier.reference);
          }

          return {
            propertyName: query.propertyName,
            first: query.first,
            predicate: selectorsFromGlobalMetadata(query.selectors, outputCtx),
            descendants: query.descendants,
            read: read,
            emitDistinctChangesOnly: !!query.emitDistinctChangesOnly,
            "static": !!query["static"]
          };
        });
      }
      /**
       * Convert `CompileTokenMetadata` for query selectors into either an expression for a predicate
       * type, or a list of string predicates.
       */


      function selectorsFromGlobalMetadata(selectors, outputCtx) {
        if (selectors.length > 1 || selectors.length == 1 && selectors[0].value) {
          var selectorStrings = selectors.map(function (value) {
            return value.value;
          });
          selectorStrings.some(function (value) {
            return !value;
          }) && error('Found a type among the string selectors expected');
          return outputCtx.constantPool.getConstLiteral(literalArr(selectorStrings.map(function (value) {
            return literal(value);
          })));
        }

        if (selectors.length == 1) {
          var first = selectors[0];

          if (first.identifier) {
            return outputCtx.importExpr(first.identifier.reference);
          }
        }

        error('Unexpected query form');
      }

      function prepareQueryParams(query, constantPool) {
        var parameters = [getQueryPredicate(query, constantPool), literal(toQueryFlags(query))];

        if (query.read) {
          parameters.push(query.read);
        }

        return parameters;
      }
      /**
       * Translates query flags into `TQueryFlags` type in packages/core/src/render3/interfaces/query.ts
       * @param query
       */


      function toQueryFlags(query) {
        return (query.descendants ? 1
        /* descendants */
        : 0
        /* none */
        ) | (query["static"] ? 2
        /* isStatic */
        : 0
        /* none */
        ) | (query.emitDistinctChangesOnly ? 4
        /* emitDistinctChangesOnly */
        : 0
        /* none */
        );
      }

      function convertAttributesToExpressions(attributes) {
        var values = [];

        var _iterator22 = _createForOfIteratorHelper(Object.getOwnPropertyNames(attributes)),
            _step22;

        try {
          for (_iterator22.s(); !(_step22 = _iterator22.n()).done;) {
            var key = _step22.value;
            var value = attributes[key];
            values.push(literal(key), value);
          }
        } catch (err) {
          _iterator22.e(err);
        } finally {
          _iterator22.f();
        }

        return values;
      } // Define and update any content queries


      function createContentQueriesFunction(queries, constantPool, name) {
        var createStatements = [];
        var updateStatements = [];
        var tempAllocator = temporaryAllocator(updateStatements, TEMPORARY_NAME);

        var _iterator23 = _createForOfIteratorHelper(queries),
            _step23;

        try {
          for (_iterator23.s(); !(_step23 = _iterator23.n()).done;) {
            var query = _step23.value;
            // creation, e.g. r3.contentQuery(dirIndex, somePredicate, true, null);
            createStatements.push(importExpr(Identifiers$1.contentQuery).callFn([variable('dirIndex')].concat(_toConsumableArray(prepareQueryParams(query, constantPool)))).toStmt()); // update, e.g. (r3.queryRefresh(tmp = r3.loadQuery()) && (ctx.someDir = tmp));

            var temporary = tempAllocator();
            var getQueryList = importExpr(Identifiers$1.loadQuery).callFn([]);
            var refresh = importExpr(Identifiers$1.queryRefresh).callFn([temporary.set(getQueryList)]);
            var updateDirective = variable(CONTEXT_NAME).prop(query.propertyName).set(query.first ? temporary.prop('first') : temporary);
            updateStatements.push(refresh.and(updateDirective).toStmt());
          }
        } catch (err) {
          _iterator23.e(err);
        } finally {
          _iterator23.f();
        }

        var contentQueriesFnName = name ? "".concat(name, "_ContentQueries") : null;
        return fn([new FnParam(RENDER_FLAGS, NUMBER_TYPE), new FnParam(CONTEXT_NAME, null), new FnParam('dirIndex', null)], [renderFlagCheckIfStmt(1
        /* Create */
        , createStatements), renderFlagCheckIfStmt(2
        /* Update */
        , updateStatements)], INFERRED_TYPE, null, contentQueriesFnName);
      }

      function stringAsType(str) {
        return expressionType(literal(str));
      }

      function stringMapAsType(map) {
        var mapValues = Object.keys(map).map(function (key) {
          var value = Array.isArray(map[key]) ? map[key][0] : map[key];
          return {
            key: key,
            value: literal(value),
            quoted: true
          };
        });
        return expressionType(literalMap(mapValues));
      }

      function stringArrayAsType(arr) {
        return arr.length > 0 ? expressionType(literalArr(arr.map(function (value) {
          return literal(value);
        }))) : NONE_TYPE;
      }

      function createDirectiveTypeParams(meta) {
        // On the type side, remove newlines from the selector as it will need to fit into a TypeScript
        // string literal, which must be on one line.
        var selectorForType = meta.selector !== null ? meta.selector.replace(/\n/g, '') : null;
        return [typeWithParameters(meta.type.type, meta.typeArgumentCount), selectorForType !== null ? stringAsType(selectorForType) : NONE_TYPE, meta.exportAs !== null ? stringArrayAsType(meta.exportAs) : NONE_TYPE, stringMapAsType(meta.inputs), stringMapAsType(meta.outputs), stringArrayAsType(meta.queries.map(function (q) {
          return q.propertyName;
        }))];
      }
      /**
       * Creates the type specification from the directive meta. This type is inserted into .d.ts files
       * to be consumed by upstream compilations.
       */


      function createDirectiveType(meta) {
        var typeParams = createDirectiveTypeParams(meta);
        return expressionType(importExpr(Identifiers$1.DirectiveDefWithMeta, typeParams));
      } // Define and update any view queries


      function createViewQueriesFunction(viewQueries, constantPool, name) {
        var createStatements = [];
        var updateStatements = [];
        var tempAllocator = temporaryAllocator(updateStatements, TEMPORARY_NAME);
        viewQueries.forEach(function (query) {
          // creation, e.g. r3.viewQuery(somePredicate, true);
          var queryDefinition = importExpr(Identifiers$1.viewQuery).callFn(prepareQueryParams(query, constantPool));
          createStatements.push(queryDefinition.toStmt()); // update, e.g. (r3.queryRefresh(tmp = r3.loadQuery()) && (ctx.someDir = tmp));

          var temporary = tempAllocator();
          var getQueryList = importExpr(Identifiers$1.loadQuery).callFn([]);
          var refresh = importExpr(Identifiers$1.queryRefresh).callFn([temporary.set(getQueryList)]);
          var updateDirective = variable(CONTEXT_NAME).prop(query.propertyName).set(query.first ? temporary.prop('first') : temporary);
          updateStatements.push(refresh.and(updateDirective).toStmt());
        });
        var viewQueryFnName = name ? "".concat(name, "_Query") : null;
        return fn([new FnParam(RENDER_FLAGS, NUMBER_TYPE), new FnParam(CONTEXT_NAME, null)], [renderFlagCheckIfStmt(1
        /* Create */
        , createStatements), renderFlagCheckIfStmt(2
        /* Update */
        , updateStatements)], INFERRED_TYPE, null, viewQueryFnName);
      } // Return a host binding function or null if one is not necessary.


      function createHostBindingsFunction(hostBindingsMetadata, typeSourceSpan, bindingParser, constantPool, selector, name, definitionMap) {
        var bindingContext = variable(CONTEXT_NAME);
        var styleBuilder = new StylingBuilder(bindingContext);
        var _hostBindingsMetadata = hostBindingsMetadata.specialAttributes,
            styleAttr = _hostBindingsMetadata.styleAttr,
            classAttr = _hostBindingsMetadata.classAttr;

        if (styleAttr !== undefined) {
          styleBuilder.registerStyleAttr(styleAttr);
        }

        if (classAttr !== undefined) {
          styleBuilder.registerClassAttr(classAttr);
        }

        var createStatements = [];
        var updateStatements = [];
        var hostBindingSourceSpan = typeSourceSpan;
        var directiveSummary = metadataAsSummary(hostBindingsMetadata); // Calculate host event bindings

        var eventBindings = bindingParser.createDirectiveHostEventAsts(directiveSummary, hostBindingSourceSpan);

        if (eventBindings && eventBindings.length) {
          var listeners = createHostListeners(eventBindings, name);
          createStatements.push.apply(createStatements, _toConsumableArray(listeners));
        } // Calculate the host property bindings


        var bindings = bindingParser.createBoundHostProperties(directiveSummary, hostBindingSourceSpan);
        var allOtherBindings = []; // We need to calculate the total amount of binding slots required by
        // all the instructions together before any value conversions happen.
        // Value conversions may require additional slots for interpolation and
        // bindings with pipes. These calculates happen after this block.

        var totalHostVarsCount = 0;
        bindings && bindings.forEach(function (binding) {
          var stylingInputWasSet = styleBuilder.registerInputBasedOnName(binding.name, binding.expression, hostBindingSourceSpan);

          if (stylingInputWasSet) {
            totalHostVarsCount += MIN_STYLING_BINDING_SLOTS_REQUIRED;
          } else {
            allOtherBindings.push(binding);
            totalHostVarsCount++;
          }
        });
        var valueConverter;

        var getValueConverter = function getValueConverter() {
          if (!valueConverter) {
            var hostVarsCountFn = function hostVarsCountFn(numSlots) {
              var originalVarsCount = totalHostVarsCount;
              totalHostVarsCount += numSlots;
              return originalVarsCount;
            };

            valueConverter = new ValueConverter(constantPool, function () {
              return error('Unexpected node');
            }, // new nodes are illegal here
            hostVarsCountFn, function () {
              return error('Unexpected pipe');
            }); // pipes are illegal here
          }

          return valueConverter;
        };

        var propertyBindings = [];
        var attributeBindings = [];
        var syntheticHostBindings = [];
        allOtherBindings.forEach(function (binding) {
          // resolve literal arrays and literal objects
          var value = binding.expression.visit(getValueConverter());
          var bindingExpr = bindingFn(bindingContext, value);

          var _getBindingNameAndIns = getBindingNameAndInstruction(binding),
              bindingName = _getBindingNameAndIns.bindingName,
              instruction = _getBindingNameAndIns.instruction,
              isAttribute = _getBindingNameAndIns.isAttribute;

          var securityContexts = bindingParser.calcPossibleSecurityContexts(selector, bindingName, isAttribute).filter(function (context) {
            return context !== SecurityContext.NONE;
          });
          var sanitizerFn = null;

          if (securityContexts.length) {
            if (securityContexts.length === 2 && securityContexts.indexOf(SecurityContext.URL) > -1 && securityContexts.indexOf(SecurityContext.RESOURCE_URL) > -1) {
              // Special case for some URL attributes (such as "src" and "href") that may be a part
              // of different security contexts. In this case we use special santitization function and
              // select the actual sanitizer at runtime based on a tag name that is provided while
              // invoking sanitization function.
              sanitizerFn = importExpr(Identifiers$1.sanitizeUrlOrResourceUrl);
            } else {
              sanitizerFn = resolveSanitizationFn(securityContexts[0], isAttribute);
            }
          }

          var instructionParams = [literal(bindingName), bindingExpr.currValExpr];

          if (sanitizerFn) {
            instructionParams.push(sanitizerFn);
          }

          updateStatements.push.apply(updateStatements, _toConsumableArray(bindingExpr.stmts));

          if (instruction === Identifiers$1.hostProperty) {
            propertyBindings.push(instructionParams);
          } else if (instruction === Identifiers$1.attribute) {
            attributeBindings.push(instructionParams);
          } else if (instruction === Identifiers$1.syntheticHostProperty) {
            syntheticHostBindings.push(instructionParams);
          } else {
            updateStatements.push(importExpr(instruction).callFn(instructionParams).toStmt());
          }
        });

        if (propertyBindings.length > 0) {
          updateStatements.push(chainedInstruction(Identifiers$1.hostProperty, propertyBindings).toStmt());
        }

        if (attributeBindings.length > 0) {
          updateStatements.push(chainedInstruction(Identifiers$1.attribute, attributeBindings).toStmt());
        }

        if (syntheticHostBindings.length > 0) {
          updateStatements.push(chainedInstruction(Identifiers$1.syntheticHostProperty, syntheticHostBindings).toStmt());
        } // since we're dealing with directives/components and both have hostBinding
        // functions, we need to generate a special hostAttrs instruction that deals
        // with both the assignment of styling as well as static attributes to the host
        // element. The instruction below will instruct all initial styling (styling
        // that is inside of a host binding within a directive/component) to be attached
        // to the host element alongside any of the provided host attributes that were
        // collected earlier.


        var hostAttrs = convertAttributesToExpressions(hostBindingsMetadata.attributes);
        styleBuilder.assignHostAttrs(hostAttrs, definitionMap);

        if (styleBuilder.hasBindings) {
          // finally each binding that was registered in the statement above will need to be added to
          // the update block of a component/directive templateFn/hostBindingsFn so that the bindings
          // are evaluated and updated for the element.
          styleBuilder.buildUpdateLevelInstructions(getValueConverter()).forEach(function (instruction) {
            if (instruction.calls.length > 0) {
              var calls = [];
              instruction.calls.forEach(function (call) {
                // we subtract a value of `1` here because the binding slot was already allocated
                // at the top of this method when all the input bindings were counted.
                totalHostVarsCount += Math.max(call.allocateBindingSlots - MIN_STYLING_BINDING_SLOTS_REQUIRED, 0);
                calls.push(convertStylingCall(call, bindingContext, bindingFn));
              });
              updateStatements.push(chainedInstruction(instruction.reference, calls).toStmt());
            }
          });
        }

        if (totalHostVarsCount) {
          definitionMap.set('hostVars', literal(totalHostVarsCount));
        }

        if (createStatements.length > 0 || updateStatements.length > 0) {
          var hostBindingsFnName = name ? "".concat(name, "_HostBindings") : null;
          var statements = [];

          if (createStatements.length > 0) {
            statements.push(renderFlagCheckIfStmt(1
            /* Create */
            , createStatements));
          }

          if (updateStatements.length > 0) {
            statements.push(renderFlagCheckIfStmt(2
            /* Update */
            , updateStatements));
          }

          return fn([new FnParam(RENDER_FLAGS, NUMBER_TYPE), new FnParam(CONTEXT_NAME, null)], statements, INFERRED_TYPE, null, hostBindingsFnName);
        }

        return null;
      }

      function bindingFn(implicit, value) {
        return _convertPropertyBinding(null, implicit, value, 'b', BindingForm.Expression, function () {
          return error('Unexpected interpolation');
        });
      }

      function convertStylingCall(call, bindingContext, bindingFn) {
        return call.params(function (value) {
          return bindingFn(bindingContext, value).currValExpr;
        });
      }

      function getBindingNameAndInstruction(binding) {
        var bindingName = binding.name;
        var instruction; // Check to see if this is an attr binding or a property binding

        var attrMatches = bindingName.match(ATTR_REGEX);

        if (attrMatches) {
          bindingName = attrMatches[1];
          instruction = Identifiers$1.attribute;
        } else {
          if (binding.isAnimation) {
            bindingName = prepareSyntheticPropertyName(bindingName); // host bindings that have a synthetic property (e.g. @foo) should always be rendered
            // in the context of the component and not the parent. Therefore there is a special
            // compatibility instruction available for this purpose.

            instruction = Identifiers$1.syntheticHostProperty;
          } else {
            instruction = Identifiers$1.hostProperty;
          }
        }

        return {
          bindingName: bindingName,
          instruction: instruction,
          isAttribute: !!attrMatches
        };
      }

      function createHostListeners(eventBindings, name) {
        var listeners = [];
        var syntheticListeners = [];
        var instructions = [];
        eventBindings.forEach(function (binding) {
          var bindingName = binding.name && sanitizeIdentifier(binding.name);
          var bindingFnName = binding.type === 1
          /* Animation */
          ? prepareSyntheticListenerFunctionName(bindingName, binding.targetOrPhase) : bindingName;
          var handlerName = name && bindingName ? "".concat(name, "_").concat(bindingFnName, "_HostBindingHandler") : null;
          var params = prepareEventListenerParameters(BoundEvent.fromParsedEvent(binding), handlerName);

          if (binding.type == 1
          /* Animation */
          ) {
              syntheticListeners.push(params);
            } else {
            listeners.push(params);
          }
        });

        if (syntheticListeners.length > 0) {
          instructions.push(chainedInstruction(Identifiers$1.syntheticHostListener, syntheticListeners).toStmt());
        }

        if (listeners.length > 0) {
          instructions.push(chainedInstruction(Identifiers$1.listener, listeners).toStmt());
        }

        return instructions;
      }

      function metadataAsSummary(meta) {
        // clang-format off
        return {
          // This is used by the BindingParser, which only deals with listeners and properties. There's no
          // need to pass attributes to it.
          hostAttributes: {},
          hostListeners: meta.listeners,
          hostProperties: meta.properties
        }; // clang-format on
      }

      function typeMapToExpressionMap(map, outputCtx) {
        // Convert each map entry into another entry where the value is an expression importing the type.
        var entries = Array.from(map).map(function (_ref20) {
          var _ref21 = _slicedToArray(_ref20, 2),
              key = _ref21[0],
              type = _ref21[1];

          return [key, outputCtx.importExpr(type)];
        });
        return new Map(entries);
      }

      var HOST_REG_EXP$1 = /^(?:\[([^\]]+)\])|(?:\(([^\)]+)\))$/;

      function parseHostBindings(host) {
        var attributes = {};
        var listeners = {};
        var properties = {};
        var specialAttributes = {};

        for (var _i8 = 0, _Object$keys2 = Object.keys(host); _i8 < _Object$keys2.length; _i8++) {
          var key = _Object$keys2[_i8];
          var value = host[key];
          var matches = key.match(HOST_REG_EXP$1);

          if (matches === null) {
            switch (key) {
              case 'class':
                if (typeof value !== 'string') {
                  // TODO(alxhub): make this a diagnostic.
                  throw new Error("Class binding must be string");
                }

                specialAttributes.classAttr = value;
                break;

              case 'style':
                if (typeof value !== 'string') {
                  // TODO(alxhub): make this a diagnostic.
                  throw new Error("Style binding must be string");
                }

                specialAttributes.styleAttr = value;
                break;

              default:
                if (typeof value === 'string') {
                  attributes[key] = literal(value);
                } else {
                  attributes[key] = value;
                }

            }
          } else if (matches[1
          /* Binding */
          ] != null) {
            if (typeof value !== 'string') {
              // TODO(alxhub): make this a diagnostic.
              throw new Error("Property binding must be string");
            } // synthetic properties (the ones that have a `@` as a prefix)
            // are still treated the same as regular properties. Therefore
            // there is no point in storing them in a separate map.


            properties[matches[1
            /* Binding */
            ]] = value;
          } else if (matches[2
          /* Event */
          ] != null) {
            if (typeof value !== 'string') {
              // TODO(alxhub): make this a diagnostic.
              throw new Error("Event binding must be string");
            }

            listeners[matches[2
            /* Event */
            ]] = value;
          }
        }

        return {
          attributes: attributes,
          listeners: listeners,
          properties: properties,
          specialAttributes: specialAttributes
        };
      }
      /**
       * Verifies host bindings and returns the list of errors (if any). Empty array indicates that a
       * given set of host bindings has no errors.
       *
       * @param bindings set of host bindings to verify.
       * @param sourceSpan source span where host bindings were defined.
       * @returns array of errors associated with a given set of host bindings.
       */


      function verifyHostBindings(bindings, sourceSpan) {
        var summary = metadataAsSummary(bindings); // TODO: abstract out host bindings verification logic and use it instead of
        // creating events and properties ASTs to detect errors (FW-996)

        var bindingParser = makeBindingParser();
        bindingParser.createDirectiveHostEventAsts(summary, sourceSpan);
        bindingParser.createBoundHostProperties(summary, sourceSpan);
        return bindingParser.errors;
      }

      function compileStyles(styles, selector, hostSelector) {
        var shadowCss = new ShadowCss();
        return styles.map(function (style) {
          return shadowCss.shimCssText(style, selector, hostSelector);
        });
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * An interface for retrieving documents by URL that the compiler uses
       * to load templates.
       */


      var ResourceLoader = /*#__PURE__*/function () {
        function ResourceLoader() {
          _classCallCheck(this, ResourceLoader);
        }

        _createClass(ResourceLoader, [{
          key: "get",
          value: function get(url) {
            return '';
          }
        }]);

        return ResourceLoader;
      }();
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      var CompilerFacadeImpl = /*#__PURE__*/function () {
        function CompilerFacadeImpl() {
          var jitEvaluator = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new JitEvaluator();

          _classCallCheck(this, CompilerFacadeImpl);

          this.jitEvaluator = jitEvaluator;
          this.R3ResolvedDependencyType = R3ResolvedDependencyType;
          this.R3FactoryTarget = R3FactoryTarget;
          this.ResourceLoader = ResourceLoader;
          this.elementSchemaRegistry = new DomElementSchemaRegistry();
        }

        _createClass(CompilerFacadeImpl, [{
          key: "compilePipe",
          value: function compilePipe(angularCoreEnv, sourceMapUrl, facade) {
            var metadata = {
              name: facade.name,
              type: wrapReference$1(facade.type),
              internalType: new WrappedNodeExpr(facade.type),
              typeArgumentCount: facade.typeArgumentCount,
              deps: convertR3DependencyMetadataArray(facade.deps),
              pipeName: facade.pipeName,
              pure: facade.pure
            };
            var res = compilePipeFromMetadata(metadata);
            return this.jitExpression(res.expression, angularCoreEnv, sourceMapUrl, []);
          }
        }, {
          key: "compilePipeDeclaration",
          value: function compilePipeDeclaration(angularCoreEnv, sourceMapUrl, declaration) {
            var meta = convertDeclarePipeFacadeToMetadata(declaration);
            var res = compilePipeFromMetadata(meta);
            return this.jitExpression(res.expression, angularCoreEnv, sourceMapUrl, []);
          }
        }, {
          key: "compileInjectable",
          value: function compileInjectable(angularCoreEnv, sourceMapUrl, facade) {
            var _compileInjectable2 = _compileInjectable({
              name: facade.name,
              type: wrapReference$1(facade.type),
              internalType: new WrappedNodeExpr(facade.type),
              typeArgumentCount: facade.typeArgumentCount,
              providedIn: computeProvidedIn(facade.providedIn),
              useClass: wrapExpression(facade, USE_CLASS),
              useFactory: wrapExpression(facade, USE_FACTORY),
              useValue: wrapExpression(facade, USE_VALUE),
              useExisting: wrapExpression(facade, USE_EXISTING),
              userDeps: convertR3DependencyMetadataArray(facade.userDeps) || undefined
            }),
                expression = _compileInjectable2.expression,
                statements = _compileInjectable2.statements;

            return this.jitExpression(expression, angularCoreEnv, sourceMapUrl, statements);
          }
        }, {
          key: "compileInjector",
          value: function compileInjector(angularCoreEnv, sourceMapUrl, facade) {
            var meta = {
              name: facade.name,
              type: wrapReference$1(facade.type),
              internalType: new WrappedNodeExpr(facade.type),
              deps: convertR3DependencyMetadataArray(facade.deps),
              providers: new WrappedNodeExpr(facade.providers),
              imports: facade.imports.map(function (i) {
                return new WrappedNodeExpr(i);
              })
            };

            var res = _compileInjector(meta);

            return this.jitExpression(res.expression, angularCoreEnv, sourceMapUrl, res.statements);
          }
        }, {
          key: "compileNgModule",
          value: function compileNgModule(angularCoreEnv, sourceMapUrl, facade) {
            var meta = {
              type: wrapReference$1(facade.type),
              internalType: new WrappedNodeExpr(facade.type),
              adjacentType: new WrappedNodeExpr(facade.type),
              bootstrap: facade.bootstrap.map(wrapReference$1),
              declarations: facade.declarations.map(wrapReference$1),
              imports: facade.imports.map(wrapReference$1),
              exports: facade.exports.map(wrapReference$1),
              emitInline: true,
              containsForwardDecls: false,
              schemas: facade.schemas ? facade.schemas.map(wrapReference$1) : null,
              id: facade.id ? new WrappedNodeExpr(facade.id) : null
            };

            var res = _compileNgModule(meta);

            return this.jitExpression(res.expression, angularCoreEnv, sourceMapUrl, []);
          }
        }, {
          key: "compileDirective",
          value: function compileDirective(angularCoreEnv, sourceMapUrl, facade) {
            var meta = convertDirectiveFacadeToMetadata(facade);
            return this.compileDirectiveFromMeta(angularCoreEnv, sourceMapUrl, meta);
          }
        }, {
          key: "compileDirectiveDeclaration",
          value: function compileDirectiveDeclaration(angularCoreEnv, sourceMapUrl, declaration) {
            var typeSourceSpan = this.createParseSourceSpan('Directive', declaration.type.name, sourceMapUrl);
            var meta = convertDeclareDirectiveFacadeToMetadata(declaration, typeSourceSpan);
            return this.compileDirectiveFromMeta(angularCoreEnv, sourceMapUrl, meta);
          }
        }, {
          key: "compileDirectiveFromMeta",
          value: function compileDirectiveFromMeta(angularCoreEnv, sourceMapUrl, meta) {
            var constantPool = new ConstantPool();
            var bindingParser = makeBindingParser();
            var res = compileDirectiveFromMetadata(meta, constantPool, bindingParser);
            return this.jitExpression(res.expression, angularCoreEnv, sourceMapUrl, constantPool.statements);
          }
        }, {
          key: "compileComponent",
          value: function compileComponent(angularCoreEnv, sourceMapUrl, facade) {
            // Parse the template and check for errors.
            var _parseJitTemplate = parseJitTemplate(facade.template, facade.name, sourceMapUrl, facade.preserveWhitespaces, facade.interpolation),
                template = _parseJitTemplate.template,
                interpolation = _parseJitTemplate.interpolation; // Compile the component metadata, including template, into an expression.


            var meta = Object.assign(Object.assign(Object.assign({}, facade), convertDirectiveFacadeToMetadata(facade)), {
              selector: facade.selector || this.elementSchemaRegistry.getDefaultComponentElementName(),
              template: template,
              declarationListEmitMode: 0
              /* Direct */
              ,
              styles: [].concat(_toConsumableArray(facade.styles), _toConsumableArray(template.styles)),
              encapsulation: facade.encapsulation,
              interpolation: interpolation,
              changeDetection: facade.changeDetection,
              animations: facade.animations != null ? new WrappedNodeExpr(facade.animations) : null,
              viewProviders: facade.viewProviders != null ? new WrappedNodeExpr(facade.viewProviders) : null,
              relativeContextFilePath: '',
              i18nUseExternalIds: true
            });
            var jitExpressionSourceMap = "ng:///".concat(facade.name, ".js");
            return this.compileComponentFromMeta(angularCoreEnv, jitExpressionSourceMap, meta);
          }
        }, {
          key: "compileComponentDeclaration",
          value: function compileComponentDeclaration(angularCoreEnv, sourceMapUrl, declaration) {
            var typeSourceSpan = this.createParseSourceSpan('Component', declaration.type.name, sourceMapUrl);
            var meta = convertDeclareComponentFacadeToMetadata(declaration, typeSourceSpan, sourceMapUrl);
            return this.compileComponentFromMeta(angularCoreEnv, sourceMapUrl, meta);
          }
        }, {
          key: "compileComponentFromMeta",
          value: function compileComponentFromMeta(angularCoreEnv, sourceMapUrl, meta) {
            var constantPool = new ConstantPool();
            var bindingParser = makeBindingParser(meta.interpolation);
            var res = compileComponentFromMetadata(meta, constantPool, bindingParser);
            return this.jitExpression(res.expression, angularCoreEnv, sourceMapUrl, constantPool.statements);
          }
        }, {
          key: "compileFactory",
          value: function compileFactory(angularCoreEnv, sourceMapUrl, meta) {
            var factoryRes = compileFactoryFunction({
              name: meta.name,
              type: wrapReference$1(meta.type),
              internalType: new WrappedNodeExpr(meta.type),
              typeArgumentCount: meta.typeArgumentCount,
              deps: convertR3DependencyMetadataArray(meta.deps),
              injectFn: meta.injectFn === 'directiveInject' ? Identifiers.directiveInject : Identifiers.inject,
              target: meta.target
            });
            return this.jitExpression(factoryRes.factory, angularCoreEnv, sourceMapUrl, factoryRes.statements);
          }
        }, {
          key: "createParseSourceSpan",
          value: function createParseSourceSpan(kind, typeName, sourceUrl) {
            return r3JitTypeSourceSpan(kind, typeName, sourceUrl);
          }
          /**
           * JIT compiles an expression and returns the result of executing that expression.
           *
           * @param def the definition which will be compiled and executed to get the value to patch
           * @param context an object map of @angular/core symbol names to symbols which will be available
           * in the context of the compiled expression
           * @param sourceUrl a URL to use for the source map of the compiled expression
           * @param preStatements a collection of statements that should be evaluated before the expression.
           */

        }, {
          key: "jitExpression",
          value: function jitExpression(def, context, sourceUrl, preStatements) {
            // The ConstantPool may contain Statements which declare variables used in the final expression.
            // Therefore, its statements need to precede the actual JIT operation. The final statement is a
            // declaration of $def which is set to the expression being compiled.
            var statements = [].concat(_toConsumableArray(preStatements), [new DeclareVarStmt('$def', def, undefined, [StmtModifier.Exported])]);
            var res = this.jitEvaluator.evaluateStatements(sourceUrl, statements, new R3JitReflector(context),
            /* enableSourceMaps */
            true);
            return res['$def'];
          }
        }]);

        return CompilerFacadeImpl;
      }();

      var USE_CLASS = Object.keys({
        useClass: null
      })[0];
      var USE_FACTORY = Object.keys({
        useFactory: null
      })[0];
      var USE_VALUE = Object.keys({
        useValue: null
      })[0];
      var USE_EXISTING = Object.keys({
        useExisting: null
      })[0];

      var wrapReference$1 = function wrapReference$1(value) {
        var wrapped = new WrappedNodeExpr(value);
        return {
          value: wrapped,
          type: wrapped
        };
      };

      function convertToR3QueryMetadata(facade) {
        return Object.assign(Object.assign({}, facade), {
          predicate: Array.isArray(facade.predicate) ? facade.predicate : new WrappedNodeExpr(facade.predicate),
          read: facade.read ? new WrappedNodeExpr(facade.read) : null,
          "static": facade["static"],
          emitDistinctChangesOnly: facade.emitDistinctChangesOnly
        });
      }

      function convertQueryDeclarationToMetadata(declaration) {
        var _a, _b, _c, _d;

        return {
          propertyName: declaration.propertyName,
          first: (_a = declaration.first) !== null && _a !== void 0 ? _a : false,
          predicate: Array.isArray(declaration.predicate) ? declaration.predicate : new WrappedNodeExpr(declaration.predicate),
          descendants: (_b = declaration.descendants) !== null && _b !== void 0 ? _b : false,
          read: declaration.read ? new WrappedNodeExpr(declaration.read) : null,
          "static": (_c = declaration["static"]) !== null && _c !== void 0 ? _c : false,
          emitDistinctChangesOnly: (_d = declaration.emitDistinctChangesOnly) !== null && _d !== void 0 ? _d : true
        };
      }

      function convertDirectiveFacadeToMetadata(facade) {
        var inputsFromMetadata = parseInputOutputs(facade.inputs || []);
        var outputsFromMetadata = parseInputOutputs(facade.outputs || []);
        var propMetadata = facade.propMetadata;
        var inputsFromType = {};
        var outputsFromType = {};

        var _loop = function _loop(field) {
          if (propMetadata.hasOwnProperty(field)) {
            propMetadata[field].forEach(function (ann) {
              if (isInput(ann)) {
                inputsFromType[field] = ann.bindingPropertyName ? [ann.bindingPropertyName, field] : field;
              } else if (isOutput(ann)) {
                outputsFromType[field] = ann.bindingPropertyName || field;
              }
            });
          }
        };

        for (var field in propMetadata) {
          _loop(field);
        }

        return Object.assign(Object.assign({}, facade), {
          typeSourceSpan: facade.typeSourceSpan,
          type: wrapReference$1(facade.type),
          internalType: new WrappedNodeExpr(facade.type),
          deps: convertR3DependencyMetadataArray(facade.deps),
          host: extractHostBindings(facade.propMetadata, facade.typeSourceSpan, facade.host),
          inputs: Object.assign(Object.assign({}, inputsFromMetadata), inputsFromType),
          outputs: Object.assign(Object.assign({}, outputsFromMetadata), outputsFromType),
          queries: facade.queries.map(convertToR3QueryMetadata),
          providers: facade.providers != null ? new WrappedNodeExpr(facade.providers) : null,
          viewQueries: facade.viewQueries.map(convertToR3QueryMetadata),
          fullInheritance: false
        });
      }

      function convertDeclareDirectiveFacadeToMetadata(declaration, typeSourceSpan) {
        var _a, _b, _c, _d, _e, _f, _g, _h;

        return {
          name: declaration.type.name,
          type: wrapReference$1(declaration.type),
          typeSourceSpan: typeSourceSpan,
          internalType: new WrappedNodeExpr(declaration.type),
          selector: (_a = declaration.selector) !== null && _a !== void 0 ? _a : null,
          inputs: (_b = declaration.inputs) !== null && _b !== void 0 ? _b : {},
          outputs: (_c = declaration.outputs) !== null && _c !== void 0 ? _c : {},
          host: convertHostDeclarationToMetadata(declaration.host),
          queries: ((_d = declaration.queries) !== null && _d !== void 0 ? _d : []).map(convertQueryDeclarationToMetadata),
          viewQueries: ((_e = declaration.viewQueries) !== null && _e !== void 0 ? _e : []).map(convertQueryDeclarationToMetadata),
          providers: declaration.providers !== undefined ? new WrappedNodeExpr(declaration.providers) : null,
          exportAs: (_f = declaration.exportAs) !== null && _f !== void 0 ? _f : null,
          usesInheritance: (_g = declaration.usesInheritance) !== null && _g !== void 0 ? _g : false,
          lifecycle: {
            usesOnChanges: (_h = declaration.usesOnChanges) !== null && _h !== void 0 ? _h : false
          },
          deps: null,
          typeArgumentCount: 0,
          fullInheritance: false
        };
      }

      function convertHostDeclarationToMetadata() {
        var host = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

        var _a, _b, _c;

        return {
          attributes: convertOpaqueValuesToExpressions((_a = host.attributes) !== null && _a !== void 0 ? _a : {}),
          listeners: (_b = host.listeners) !== null && _b !== void 0 ? _b : {},
          properties: (_c = host.properties) !== null && _c !== void 0 ? _c : {},
          specialAttributes: {
            classAttr: host.classAttribute,
            styleAttr: host.styleAttribute
          }
        };
      }

      function convertOpaqueValuesToExpressions(obj) {
        var result = {};

        for (var _i9 = 0, _Object$keys3 = Object.keys(obj); _i9 < _Object$keys3.length; _i9++) {
          var key = _Object$keys3[_i9];
          result[key] = new WrappedNodeExpr(obj[key]);
        }

        return result;
      }

      function convertDeclareComponentFacadeToMetadata(declaration, typeSourceSpan, sourceMapUrl) {
        var _a, _b, _c, _d, _e;

        var _parseJitTemplate2 = parseJitTemplate(declaration.template, declaration.type.name, sourceMapUrl, (_a = declaration.preserveWhitespaces) !== null && _a !== void 0 ? _a : false, declaration.interpolation),
            template = _parseJitTemplate2.template,
            interpolation = _parseJitTemplate2.interpolation;

        return Object.assign(Object.assign({}, convertDeclareDirectiveFacadeToMetadata(declaration, typeSourceSpan)), {
          template: template,
          styles: (_b = declaration.styles) !== null && _b !== void 0 ? _b : [],
          directives: ((_c = declaration.directives) !== null && _c !== void 0 ? _c : []).map(convertUsedDirectiveDeclarationToMetadata),
          pipes: convertUsedPipesToMetadata(declaration.pipes),
          viewProviders: declaration.viewProviders !== undefined ? new WrappedNodeExpr(declaration.viewProviders) : null,
          animations: declaration.animations !== undefined ? new WrappedNodeExpr(declaration.animations) : null,
          changeDetection: (_d = declaration.changeDetection) !== null && _d !== void 0 ? _d : ChangeDetectionStrategy.Default,
          encapsulation: (_e = declaration.encapsulation) !== null && _e !== void 0 ? _e : ViewEncapsulation.Emulated,
          interpolation: interpolation,
          declarationListEmitMode: 2
          /* ClosureResolved */
          ,
          relativeContextFilePath: '',
          i18nUseExternalIds: true
        });
      }

      function convertUsedDirectiveDeclarationToMetadata(declaration) {
        var _a, _b, _c;

        return {
          selector: declaration.selector,
          type: new WrappedNodeExpr(declaration.type),
          inputs: (_a = declaration.inputs) !== null && _a !== void 0 ? _a : [],
          outputs: (_b = declaration.outputs) !== null && _b !== void 0 ? _b : [],
          exportAs: (_c = declaration.exportAs) !== null && _c !== void 0 ? _c : null
        };
      }

      function convertUsedPipesToMetadata(declaredPipes) {
        var pipes = new Map();

        if (declaredPipes === undefined) {
          return pipes;
        }

        for (var _i10 = 0, _Object$keys4 = Object.keys(declaredPipes); _i10 < _Object$keys4.length; _i10++) {
          var pipeName = _Object$keys4[_i10];
          var pipeType = declaredPipes[pipeName];
          pipes.set(pipeName, new WrappedNodeExpr(pipeType));
        }

        return pipes;
      }

      function parseJitTemplate(template, typeName, sourceMapUrl, preserveWhitespaces, interpolation) {
        var interpolationConfig = interpolation ? InterpolationConfig.fromArray(interpolation) : DEFAULT_INTERPOLATION_CONFIG; // Parse the template and check for errors.

        var parsed = parseTemplate(template, sourceMapUrl, {
          preserveWhitespaces: preserveWhitespaces,
          interpolationConfig: interpolationConfig
        });

        if (parsed.errors !== null) {
          var errors = parsed.errors.map(function (err) {
            return err.toString();
          }).join(', ');
          throw new Error("Errors during JIT compilation of template for ".concat(typeName, ": ").concat(errors));
        }

        return {
          template: parsed,
          interpolation: interpolationConfig
        };
      }

      function wrapExpression(obj, property) {
        if (obj.hasOwnProperty(property)) {
          return new WrappedNodeExpr(obj[property]);
        } else {
          return undefined;
        }
      }

      function computeProvidedIn(providedIn) {
        if (providedIn == null || typeof providedIn === 'string') {
          return new LiteralExpr(providedIn);
        } else {
          return new WrappedNodeExpr(providedIn);
        }
      }

      function convertR3DependencyMetadata(facade) {
        var tokenExpr;

        if (facade.token === null) {
          tokenExpr = new LiteralExpr(null);
        } else if (facade.resolved === R3ResolvedDependencyType.Attribute) {
          tokenExpr = new LiteralExpr(facade.token);
        } else {
          tokenExpr = new WrappedNodeExpr(facade.token);
        }

        return {
          token: tokenExpr,
          attribute: null,
          resolved: facade.resolved,
          host: facade.host,
          optional: facade.optional,
          self: facade.self,
          skipSelf: facade.skipSelf
        };
      }

      function convertR3DependencyMetadataArray(facades) {
        return facades == null ? null : facades.map(convertR3DependencyMetadata);
      }

      function extractHostBindings(propMetadata, sourceSpan, host) {
        // First parse the declarations from the metadata.
        var bindings = parseHostBindings(host || {}); // After that check host bindings for errors

        var errors = verifyHostBindings(bindings, sourceSpan);

        if (errors.length) {
          throw new Error(errors.map(function (error) {
            return error.msg;
          }).join('\n'));
        } // Next, loop over the properties of the object, looking for @HostBinding and @HostListener.


        var _loop2 = function _loop2(field) {
          if (propMetadata.hasOwnProperty(field)) {
            propMetadata[field].forEach(function (ann) {
              if (isHostBinding(ann)) {
                // Since this is a decorator, we know that the value is a class member. Always access it
                // through `this` so that further down the line it can't be confused for a literal value
                // (e.g. if there's a property called `true`).
                bindings.properties[ann.hostPropertyName || field] = getSafePropertyAccessString('this', field);
              } else if (isHostListener(ann)) {
                bindings.listeners[ann.eventName || field] = "".concat(field, "(").concat((ann.args || []).join(','), ")");
              }
            });
          }
        };

        for (var field in propMetadata) {
          _loop2(field);
        }

        return bindings;
      }

      function isHostBinding(value) {
        return value.ngMetadataName === 'HostBinding';
      }

      function isHostListener(value) {
        return value.ngMetadataName === 'HostListener';
      }

      function isInput(value) {
        return value.ngMetadataName === 'Input';
      }

      function isOutput(value) {
        return value.ngMetadataName === 'Output';
      }

      function parseInputOutputs(values) {
        return values.reduce(function (map, value) {
          var _value$split$map = value.split(',').map(function (piece) {
            return piece.trim();
          }),
              _value$split$map2 = _slicedToArray(_value$split$map, 2),
              field = _value$split$map2[0],
              property = _value$split$map2[1];

          map[field] = property || field;
          return map;
        }, {});
      }

      function convertDeclarePipeFacadeToMetadata(declaration) {
        var _a;

        return {
          name: declaration.type.name,
          type: wrapReference$1(declaration.type),
          internalType: new WrappedNodeExpr(declaration.type),
          typeArgumentCount: 0,
          pipeName: declaration.name,
          deps: null,
          pure: (_a = declaration.pure) !== null && _a !== void 0 ? _a : true
        };
      }

      function publishFacade(global) {
        var ng = global.ng || (global.ng = {});
        ng.ɵcompilerFacade = new CompilerFacadeImpl();
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      var VERSION$1 = new Version('11.2.4');
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      var CompilerConfig = function CompilerConfig() {
        var _ref22 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
            _ref22$defaultEncapsu = _ref22.defaultEncapsulation,
            defaultEncapsulation = _ref22$defaultEncapsu === void 0 ? ViewEncapsulation.Emulated : _ref22$defaultEncapsu,
            _ref22$useJit = _ref22.useJit,
            useJit = _ref22$useJit === void 0 ? true : _ref22$useJit,
            _ref22$jitDevMode = _ref22.jitDevMode,
            jitDevMode = _ref22$jitDevMode === void 0 ? false : _ref22$jitDevMode,
            _ref22$missingTransla = _ref22.missingTranslation,
            missingTranslation = _ref22$missingTransla === void 0 ? null : _ref22$missingTransla,
            preserveWhitespaces = _ref22.preserveWhitespaces,
            strictInjectionParameters = _ref22.strictInjectionParameters;

        _classCallCheck(this, CompilerConfig);

        this.defaultEncapsulation = defaultEncapsulation;
        this.useJit = !!useJit;
        this.jitDevMode = !!jitDevMode;
        this.missingTranslation = missingTranslation;
        this.preserveWhitespaces = preserveWhitespacesDefault(noUndefined(preserveWhitespaces));
        this.strictInjectionParameters = strictInjectionParameters === true;
      };

      function preserveWhitespacesDefault(preserveWhitespacesOption) {
        var defaultSetting = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
        return preserveWhitespacesOption === null ? defaultSetting : preserveWhitespacesOption;
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      var DirectiveNormalizer = /*#__PURE__*/function () {
        function DirectiveNormalizer(_resourceLoader, _urlResolver, _htmlParser, _config) {
          _classCallCheck(this, DirectiveNormalizer);

          this._resourceLoader = _resourceLoader;
          this._urlResolver = _urlResolver;
          this._htmlParser = _htmlParser;
          this._config = _config;
          this._resourceLoaderCache = new Map();
        }

        _createClass(DirectiveNormalizer, [{
          key: "clearCache",
          value: function clearCache() {
            this._resourceLoaderCache.clear();
          }
        }, {
          key: "clearCacheFor",
          value: function clearCacheFor(normalizedDirective) {
            var _this197 = this;

            if (!normalizedDirective.isComponent) {
              return;
            }

            var template = normalizedDirective.template;

            this._resourceLoaderCache["delete"](template.templateUrl);

            template.externalStylesheets.forEach(function (stylesheet) {
              _this197._resourceLoaderCache["delete"](stylesheet.moduleUrl);
            });
          }
        }, {
          key: "_fetch",
          value: function _fetch(url) {
            var result = this._resourceLoaderCache.get(url);

            if (!result) {
              result = this._resourceLoader.get(url);

              this._resourceLoaderCache.set(url, result);
            }

            return result;
          }
        }, {
          key: "normalizeTemplate",
          value: function normalizeTemplate(prenormData) {
            var _this198 = this;

            if (isDefined(prenormData.template)) {
              if (isDefined(prenormData.templateUrl)) {
                throw syntaxError("'".concat(stringify(prenormData.componentType), "' component cannot define both template and templateUrl"));
              }

              if (typeof prenormData.template !== 'string') {
                throw syntaxError("The template specified for component ".concat(stringify(prenormData.componentType), " is not a string"));
              }
            } else if (isDefined(prenormData.templateUrl)) {
              if (typeof prenormData.templateUrl !== 'string') {
                throw syntaxError("The templateUrl specified for component ".concat(stringify(prenormData.componentType), " is not a string"));
              }
            } else {
              throw syntaxError("No template specified for component ".concat(stringify(prenormData.componentType)));
            }

            if (isDefined(prenormData.preserveWhitespaces) && typeof prenormData.preserveWhitespaces !== 'boolean') {
              throw syntaxError("The preserveWhitespaces option for component ".concat(stringify(prenormData.componentType), " must be a boolean"));
            }

            return SyncAsync.then(this._preParseTemplate(prenormData), function (preparsedTemplate) {
              return _this198._normalizeTemplateMetadata(prenormData, preparsedTemplate);
            });
          }
        }, {
          key: "_preParseTemplate",
          value: function _preParseTemplate(prenomData) {
            var _this199 = this;

            var template;
            var templateUrl;

            if (prenomData.template != null) {
              template = prenomData.template;
              templateUrl = prenomData.moduleUrl;
            } else {
              templateUrl = this._urlResolver.resolve(prenomData.moduleUrl, prenomData.templateUrl);
              template = this._fetch(templateUrl);
            }

            return SyncAsync.then(template, function (template) {
              return _this199._preparseLoadedTemplate(prenomData, template, templateUrl);
            });
          }
        }, {
          key: "_preparseLoadedTemplate",
          value: function _preparseLoadedTemplate(prenormData, template, templateAbsUrl) {
            var isInline = !!prenormData.template;
            var interpolationConfig = InterpolationConfig.fromArray(prenormData.interpolation);
            var templateUrl = templateSourceUrl({
              reference: prenormData.ngModuleType
            }, {
              type: {
                reference: prenormData.componentType
              }
            }, {
              isInline: isInline,
              templateUrl: templateAbsUrl
            });

            var rootNodesAndErrors = this._htmlParser.parse(template, templateUrl, {
              tokenizeExpansionForms: true,
              interpolationConfig: interpolationConfig
            });

            if (rootNodesAndErrors.errors.length > 0) {
              var errorString = rootNodesAndErrors.errors.join('\n');
              throw syntaxError("Template parse errors:\n".concat(errorString));
            }

            var templateMetadataStyles = this._normalizeStylesheet(new CompileStylesheetMetadata({
              styles: prenormData.styles,
              moduleUrl: prenormData.moduleUrl
            }));

            var visitor = new TemplatePreparseVisitor();
            visitAll$1(visitor, rootNodesAndErrors.rootNodes);

            var templateStyles = this._normalizeStylesheet(new CompileStylesheetMetadata({
              styles: visitor.styles,
              styleUrls: visitor.styleUrls,
              moduleUrl: templateAbsUrl
            }));

            var styles = templateMetadataStyles.styles.concat(templateStyles.styles);
            var inlineStyleUrls = templateMetadataStyles.styleUrls.concat(templateStyles.styleUrls);

            var styleUrls = this._normalizeStylesheet(new CompileStylesheetMetadata({
              styleUrls: prenormData.styleUrls,
              moduleUrl: prenormData.moduleUrl
            })).styleUrls;

            return {
              template: template,
              templateUrl: templateAbsUrl,
              isInline: isInline,
              htmlAst: rootNodesAndErrors,
              styles: styles,
              inlineStyleUrls: inlineStyleUrls,
              styleUrls: styleUrls,
              ngContentSelectors: visitor.ngContentSelectors
            };
          }
        }, {
          key: "_normalizeTemplateMetadata",
          value: function _normalizeTemplateMetadata(prenormData, preparsedTemplate) {
            var _this200 = this;

            return SyncAsync.then(this._loadMissingExternalStylesheets(preparsedTemplate.styleUrls.concat(preparsedTemplate.inlineStyleUrls)), function (externalStylesheets) {
              return _this200._normalizeLoadedTemplateMetadata(prenormData, preparsedTemplate, externalStylesheets);
            });
          }
        }, {
          key: "_normalizeLoadedTemplateMetadata",
          value: function _normalizeLoadedTemplateMetadata(prenormData, preparsedTemplate, stylesheets) {
            var _this201 = this;

            // Algorithm:
            // - produce exactly 1 entry per original styleUrl in
            // CompileTemplateMetadata.externalStylesheets with all styles inlined
            // - inline all styles that are referenced by the template into CompileTemplateMetadata.styles.
            // Reason: be able to determine how many stylesheets there are even without loading
            // the template nor the stylesheets, so we can create a stub for TypeScript always synchronously
            // (as resource loading may be async)
            var styles = _toConsumableArray(preparsedTemplate.styles);

            this._inlineStyles(preparsedTemplate.inlineStyleUrls, stylesheets, styles);

            var styleUrls = preparsedTemplate.styleUrls;
            var externalStylesheets = styleUrls.map(function (styleUrl) {
              var stylesheet = stylesheets.get(styleUrl);

              var styles = _toConsumableArray(stylesheet.styles);

              _this201._inlineStyles(stylesheet.styleUrls, stylesheets, styles);

              return new CompileStylesheetMetadata({
                moduleUrl: styleUrl,
                styles: styles
              });
            });
            var encapsulation = prenormData.encapsulation;

            if (encapsulation == null) {
              encapsulation = this._config.defaultEncapsulation;
            }

            if (encapsulation === ViewEncapsulation.Emulated && styles.length === 0 && styleUrls.length === 0) {
              encapsulation = ViewEncapsulation.None;
            }

            return new CompileTemplateMetadata({
              encapsulation: encapsulation,
              template: preparsedTemplate.template,
              templateUrl: preparsedTemplate.templateUrl,
              htmlAst: preparsedTemplate.htmlAst,
              styles: styles,
              styleUrls: styleUrls,
              ngContentSelectors: preparsedTemplate.ngContentSelectors,
              animations: prenormData.animations,
              interpolation: prenormData.interpolation,
              isInline: preparsedTemplate.isInline,
              externalStylesheets: externalStylesheets,
              preserveWhitespaces: preserveWhitespacesDefault(prenormData.preserveWhitespaces, this._config.preserveWhitespaces)
            });
          }
        }, {
          key: "_inlineStyles",
          value: function _inlineStyles(styleUrls, stylesheets, targetStyles) {
            var _this202 = this;

            styleUrls.forEach(function (styleUrl) {
              var stylesheet = stylesheets.get(styleUrl);
              stylesheet.styles.forEach(function (style) {
                return targetStyles.push(style);
              });

              _this202._inlineStyles(stylesheet.styleUrls, stylesheets, targetStyles);
            });
          }
        }, {
          key: "_loadMissingExternalStylesheets",
          value: function _loadMissingExternalStylesheets(styleUrls) {
            var _this203 = this;

            var loadedStylesheets = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Map();
            return SyncAsync.then(SyncAsync.all(styleUrls.filter(function (styleUrl) {
              return !loadedStylesheets.has(styleUrl);
            }).map(function (styleUrl) {
              return SyncAsync.then(_this203._fetch(styleUrl), function (loadedStyle) {
                var stylesheet = _this203._normalizeStylesheet(new CompileStylesheetMetadata({
                  styles: [loadedStyle],
                  moduleUrl: styleUrl
                }));

                loadedStylesheets.set(styleUrl, stylesheet);
                return _this203._loadMissingExternalStylesheets(stylesheet.styleUrls, loadedStylesheets);
              });
            })), function (_) {
              return loadedStylesheets;
            });
          }
        }, {
          key: "_normalizeStylesheet",
          value: function _normalizeStylesheet(stylesheet) {
            var _this204 = this;

            var moduleUrl = stylesheet.moduleUrl;
            var allStyleUrls = stylesheet.styleUrls.filter(isStyleUrlResolvable).map(function (url) {
              return _this204._urlResolver.resolve(moduleUrl, url);
            });
            var allStyles = stylesheet.styles.map(function (style) {
              var styleWithImports = extractStyleUrls(_this204._urlResolver, moduleUrl, style);
              allStyleUrls.push.apply(allStyleUrls, _toConsumableArray(styleWithImports.styleUrls));
              return styleWithImports.style;
            });
            return new CompileStylesheetMetadata({
              styles: allStyles,
              styleUrls: allStyleUrls,
              moduleUrl: moduleUrl
            });
          }
        }]);

        return DirectiveNormalizer;
      }();

      var TemplatePreparseVisitor = /*#__PURE__*/function () {
        function TemplatePreparseVisitor() {
          _classCallCheck(this, TemplatePreparseVisitor);

          this.ngContentSelectors = [];
          this.styles = [];
          this.styleUrls = [];
          this.ngNonBindableStackCount = 0;
        }

        _createClass(TemplatePreparseVisitor, [{
          key: "visitElement",
          value: function visitElement(ast, context) {
            var preparsedElement = preparseElement(ast);

            switch (preparsedElement.type) {
              case PreparsedElementType.NG_CONTENT:
                if (this.ngNonBindableStackCount === 0) {
                  this.ngContentSelectors.push(preparsedElement.selectAttr);
                }

                break;

              case PreparsedElementType.STYLE:
                var textContent = '';
                ast.children.forEach(function (child) {
                  if (child instanceof Text$3) {
                    textContent += child.value;
                  }
                });
                this.styles.push(textContent);
                break;

              case PreparsedElementType.STYLESHEET:
                this.styleUrls.push(preparsedElement.hrefAttr);
                break;

              default:
                break;
            }

            if (preparsedElement.nonBindable) {
              this.ngNonBindableStackCount++;
            }

            visitAll$1(this, ast.children);

            if (preparsedElement.nonBindable) {
              this.ngNonBindableStackCount--;
            }

            return null;
          }
        }, {
          key: "visitExpansion",
          value: function visitExpansion(ast, context) {
            visitAll$1(this, ast.cases);
          }
        }, {
          key: "visitExpansionCase",
          value: function visitExpansionCase(ast, context) {
            visitAll$1(this, ast.expression);
          }
        }, {
          key: "visitComment",
          value: function visitComment(ast, context) {
            return null;
          }
        }, {
          key: "visitAttribute",
          value: function visitAttribute(ast, context) {
            return null;
          }
        }, {
          key: "visitText",
          value: function visitText(ast, context) {
            return null;
          }
        }]);

        return TemplatePreparseVisitor;
      }();
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      var QUERY_METADATA_IDENTIFIERS = [createViewChild, createViewChildren, createContentChild, createContentChildren];
      /*
       * Resolve a `Type` for {@link Directive}.
       *
       * This interface can be overridden by the application developer to create custom behavior.
       *
       * See {@link Compiler}
       */

      var DirectiveResolver = /*#__PURE__*/function () {
        function DirectiveResolver(_reflector) {
          _classCallCheck(this, DirectiveResolver);

          this._reflector = _reflector;
        }

        _createClass(DirectiveResolver, [{
          key: "isDirective",
          value: function isDirective(type) {
            var typeMetadata = this._reflector.annotations(resolveForwardRef(type));

            return typeMetadata && typeMetadata.some(isDirectiveMetadata);
          }
        }, {
          key: "resolve",
          value: function resolve(type) {
            var throwIfNotFound = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

            var typeMetadata = this._reflector.annotations(resolveForwardRef(type));

            if (typeMetadata) {
              var metadata = findLast(typeMetadata, isDirectiveMetadata);

              if (metadata) {
                var propertyMetadata = this._reflector.propMetadata(type);

                var guards = this._reflector.guards(type);

                return this._mergeWithPropertyMetadata(metadata, propertyMetadata, guards, type);
              }
            }

            if (throwIfNotFound) {
              throw new Error("No Directive annotation found on ".concat(stringify(type)));
            }

            return null;
          }
        }, {
          key: "_mergeWithPropertyMetadata",
          value: function _mergeWithPropertyMetadata(dm, propertyMetadata, guards, directiveType) {
            var inputs = [];
            var outputs = [];
            var host = {};
            var queries = {};
            Object.keys(propertyMetadata).forEach(function (propName) {
              var input = findLast(propertyMetadata[propName], function (a) {
                return createInput.isTypeOf(a);
              });

              if (input) {
                if (input.bindingPropertyName) {
                  inputs.push("".concat(propName, ": ").concat(input.bindingPropertyName));
                } else {
                  inputs.push(propName);
                }
              }

              var output = findLast(propertyMetadata[propName], function (a) {
                return createOutput.isTypeOf(a);
              });

              if (output) {
                if (output.bindingPropertyName) {
                  outputs.push("".concat(propName, ": ").concat(output.bindingPropertyName));
                } else {
                  outputs.push(propName);
                }
              }

              var hostBindings = propertyMetadata[propName].filter(function (a) {
                return createHostBinding.isTypeOf(a);
              });
              hostBindings.forEach(function (hostBinding) {
                if (hostBinding.hostPropertyName) {
                  var startWith = hostBinding.hostPropertyName[0];

                  if (startWith === '(') {
                    throw new Error("@HostBinding can not bind to events. Use @HostListener instead.");
                  } else if (startWith === '[') {
                    throw new Error("@HostBinding parameter should be a property name, 'class.<name>', or 'attr.<name>'.");
                  }

                  host["[".concat(hostBinding.hostPropertyName, "]")] = propName;
                } else {
                  host["[".concat(propName, "]")] = propName;
                }
              });
              var hostListeners = propertyMetadata[propName].filter(function (a) {
                return createHostListener.isTypeOf(a);
              });
              hostListeners.forEach(function (hostListener) {
                var args = hostListener.args || [];
                host["(".concat(hostListener.eventName, ")")] = "".concat(propName, "(").concat(args.join(','), ")");
              });
              var query = findLast(propertyMetadata[propName], function (a) {
                return QUERY_METADATA_IDENTIFIERS.some(function (i) {
                  return i.isTypeOf(a);
                });
              });

              if (query) {
                queries[propName] = query;
              }
            });
            return this._merge(dm, inputs, outputs, host, queries, guards, directiveType);
          }
        }, {
          key: "_extractPublicName",
          value: function _extractPublicName(def) {
            return splitAtColon(def, [null, def])[1].trim();
          }
        }, {
          key: "_dedupeBindings",
          value: function _dedupeBindings(bindings) {
            var names = new Set();
            var publicNames = new Set();
            var reversedResult = []; // go last to first to allow later entries to overwrite previous entries

            for (var i = bindings.length - 1; i >= 0; i--) {
              var binding = bindings[i];

              var name = this._extractPublicName(binding);

              publicNames.add(name);

              if (!names.has(name)) {
                names.add(name);
                reversedResult.push(binding);
              }
            }

            return reversedResult.reverse();
          }
        }, {
          key: "_merge",
          value: function _merge(directive, inputs, outputs, host, queries, guards, directiveType) {
            var mergedInputs = this._dedupeBindings(directive.inputs ? directive.inputs.concat(inputs) : inputs);

            var mergedOutputs = this._dedupeBindings(directive.outputs ? directive.outputs.concat(outputs) : outputs);

            var mergedHost = directive.host ? Object.assign(Object.assign({}, directive.host), host) : host;
            var mergedQueries = directive.queries ? Object.assign(Object.assign({}, directive.queries), queries) : queries;

            if (createComponent.isTypeOf(directive)) {
              var comp = directive;
              return createComponent({
                selector: comp.selector,
                inputs: mergedInputs,
                outputs: mergedOutputs,
                host: mergedHost,
                exportAs: comp.exportAs,
                moduleId: comp.moduleId,
                queries: mergedQueries,
                changeDetection: comp.changeDetection,
                providers: comp.providers,
                viewProviders: comp.viewProviders,
                entryComponents: comp.entryComponents,
                template: comp.template,
                templateUrl: comp.templateUrl,
                styles: comp.styles,
                styleUrls: comp.styleUrls,
                encapsulation: comp.encapsulation,
                animations: comp.animations,
                interpolation: comp.interpolation,
                preserveWhitespaces: directive.preserveWhitespaces
              });
            } else {
              return createDirective({
                selector: directive.selector,
                inputs: mergedInputs,
                outputs: mergedOutputs,
                host: mergedHost,
                exportAs: directive.exportAs,
                queries: mergedQueries,
                providers: directive.providers,
                guards: guards
              });
            }
          }
        }]);

        return DirectiveResolver;
      }();

      function isDirectiveMetadata(type) {
        return createDirective.isTypeOf(type) || createComponent.isTypeOf(type);
      }

      function findLast(arr, condition) {
        for (var i = arr.length - 1; i >= 0; i--) {
          if (condition(arr[i])) {
            return arr[i];
          }
        }

        return null;
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      var _I18N_ATTR = 'i18n';
      var _I18N_ATTR_PREFIX = 'i18n-';
      var _I18N_COMMENT_PREFIX_REGEXP = /^i18n:?/;
      var MEANING_SEPARATOR = '|';
      var ID_SEPARATOR = '@@';
      var i18nCommentsWarned = false;
      /**
       * Extract translatable messages from an html AST
       */

      function extractMessages(nodes, interpolationConfig, implicitTags, implicitAttrs) {
        var visitor = new _Visitor$2(implicitTags, implicitAttrs);
        return visitor.extract(nodes, interpolationConfig);
      }

      function mergeTranslations(nodes, translations, interpolationConfig, implicitTags, implicitAttrs) {
        var visitor = new _Visitor$2(implicitTags, implicitAttrs);
        return visitor.merge(nodes, translations, interpolationConfig);
      }

      var ExtractionResult = function ExtractionResult(messages, errors) {
        _classCallCheck(this, ExtractionResult);

        this.messages = messages;
        this.errors = errors;
      };

      var _VisitorMode;

      (function (_VisitorMode) {
        _VisitorMode[_VisitorMode["Extract"] = 0] = "Extract";
        _VisitorMode[_VisitorMode["Merge"] = 1] = "Merge";
      })(_VisitorMode || (_VisitorMode = {}));
      /**
       * This Visitor is used:
       * 1. to extract all the translatable strings from an html AST (see `extract()`),
       * 2. to replace the translatable strings with the actual translations (see `merge()`)
       *
       * @internal
       */


      var _Visitor$2 = /*#__PURE__*/function () {
        function _Visitor$2(_implicitTags, _implicitAttrs) {
          _classCallCheck(this, _Visitor$2);

          this._implicitTags = _implicitTags;
          this._implicitAttrs = _implicitAttrs;
        }
        /**
         * Extracts the messages from the tree
         */


        _createClass(_Visitor$2, [{
          key: "extract",
          value: function extract(nodes, interpolationConfig) {
            var _this205 = this;

            this._init(_VisitorMode.Extract, interpolationConfig);

            nodes.forEach(function (node) {
              return node.visit(_this205, null);
            });

            if (this._inI18nBlock) {
              this._reportError(nodes[nodes.length - 1], 'Unclosed block');
            }

            return new ExtractionResult(this._messages, this._errors);
          }
          /**
           * Returns a tree where all translatable nodes are translated
           */

        }, {
          key: "merge",
          value: function merge(nodes, translations, interpolationConfig) {
            this._init(_VisitorMode.Merge, interpolationConfig);

            this._translations = translations; // Construct a single fake root element

            var wrapper = new Element$1('wrapper', [], nodes, undefined, undefined, undefined);
            var translatedNode = wrapper.visit(this, null);

            if (this._inI18nBlock) {
              this._reportError(nodes[nodes.length - 1], 'Unclosed block');
            }

            return new ParseTreeResult(translatedNode.children, this._errors);
          }
        }, {
          key: "visitExpansionCase",
          value: function visitExpansionCase(icuCase, context) {
            // Parse cases for translatable html attributes
            var expression = visitAll$1(this, icuCase.expression, context);

            if (this._mode === _VisitorMode.Merge) {
              return new ExpansionCase(icuCase.value, expression, icuCase.sourceSpan, icuCase.valueSourceSpan, icuCase.expSourceSpan);
            }
          }
        }, {
          key: "visitExpansion",
          value: function visitExpansion(icu, context) {
            this._mayBeAddBlockChildren(icu);

            var wasInIcu = this._inIcu;

            if (!this._inIcu) {
              // nested ICU messages should not be extracted but top-level translated as a whole
              if (this._isInTranslatableSection) {
                this._addMessage([icu]);
              }

              this._inIcu = true;
            }

            var cases = visitAll$1(this, icu.cases, context);

            if (this._mode === _VisitorMode.Merge) {
              icu = new Expansion(icu.switchValue, icu.type, cases, icu.sourceSpan, icu.switchValueSourceSpan);
            }

            this._inIcu = wasInIcu;
            return icu;
          }
        }, {
          key: "visitComment",
          value: function visitComment(comment, context) {
            var isOpening = _isOpeningComment(comment);

            if (isOpening && this._isInTranslatableSection) {
              this._reportError(comment, 'Could not start a block inside a translatable section');

              return;
            }

            var isClosing = _isClosingComment(comment);

            if (isClosing && !this._inI18nBlock) {
              this._reportError(comment, 'Trying to close an unopened block');

              return;
            }

            if (!this._inI18nNode && !this._inIcu) {
              if (!this._inI18nBlock) {
                if (isOpening) {
                  // deprecated from v5 you should use <ng-container i18n> instead of i18n comments
                  if (!i18nCommentsWarned && console && console.warn) {
                    i18nCommentsWarned = true;
                    var details = comment.sourceSpan.details ? ", ".concat(comment.sourceSpan.details) : ''; // TODO(ocombe): use a log service once there is a public one available

                    console.warn("I18n comments are deprecated, use an <ng-container> element instead (".concat(comment.sourceSpan.start).concat(details, ")"));
                  }

                  this._inI18nBlock = true;
                  this._blockStartDepth = this._depth;
                  this._blockChildren = [];
                  this._blockMeaningAndDesc = comment.value.replace(_I18N_COMMENT_PREFIX_REGEXP, '').trim();

                  this._openTranslatableSection(comment);
                }
              } else {
                if (isClosing) {
                  if (this._depth == this._blockStartDepth) {
                    this._closeTranslatableSection(comment, this._blockChildren);

                    this._inI18nBlock = false;

                    var message = this._addMessage(this._blockChildren, this._blockMeaningAndDesc); // merge attributes in sections


                    var nodes = this._translateMessage(comment, message);

                    return visitAll$1(this, nodes);
                  } else {
                    this._reportError(comment, 'I18N blocks should not cross element boundaries');

                    return;
                  }
                }
              }
            }
          }
        }, {
          key: "visitText",
          value: function visitText(text, context) {
            if (this._isInTranslatableSection) {
              this._mayBeAddBlockChildren(text);
            }

            return text;
          }
        }, {
          key: "visitElement",
          value: function visitElement(el, context) {
            var _this206 = this;

            this._mayBeAddBlockChildren(el);

            this._depth++;
            var wasInI18nNode = this._inI18nNode;
            var wasInImplicitNode = this._inImplicitNode;
            var childNodes = [];
            var translatedChildNodes = undefined; // Extract:
            // - top level nodes with the (implicit) "i18n" attribute if not already in a section
            // - ICU messages

            var i18nAttr = _getI18nAttr(el);

            var i18nMeta = i18nAttr ? i18nAttr.value : '';
            var isImplicit = this._implicitTags.some(function (tag) {
              return el.name === tag;
            }) && !this._inIcu && !this._isInTranslatableSection;
            var isTopLevelImplicit = !wasInImplicitNode && isImplicit;
            this._inImplicitNode = wasInImplicitNode || isImplicit;

            if (!this._isInTranslatableSection && !this._inIcu) {
              if (i18nAttr || isTopLevelImplicit) {
                this._inI18nNode = true;

                var message = this._addMessage(el.children, i18nMeta);

                translatedChildNodes = this._translateMessage(el, message);
              }

              if (this._mode == _VisitorMode.Extract) {
                var isTranslatable = i18nAttr || isTopLevelImplicit;
                if (isTranslatable) this._openTranslatableSection(el);
                visitAll$1(this, el.children);
                if (isTranslatable) this._closeTranslatableSection(el, el.children);
              }
            } else {
              if (i18nAttr || isTopLevelImplicit) {
                this._reportError(el, 'Could not mark an element as translatable inside a translatable section');
              }

              if (this._mode == _VisitorMode.Extract) {
                // Descend into child nodes for extraction
                visitAll$1(this, el.children);
              }
            }

            if (this._mode === _VisitorMode.Merge) {
              var visitNodes = translatedChildNodes || el.children;
              visitNodes.forEach(function (child) {
                var visited = child.visit(_this206, context);

                if (visited && !_this206._isInTranslatableSection) {
                  // Do not add the children from translatable sections (= i18n blocks here)
                  // They will be added later in this loop when the block closes (i.e. on `<!-- /i18n -->`)
                  childNodes = childNodes.concat(visited);
                }
              });
            }

            this._visitAttributesOf(el);

            this._depth--;
            this._inI18nNode = wasInI18nNode;
            this._inImplicitNode = wasInImplicitNode;

            if (this._mode === _VisitorMode.Merge) {
              var translatedAttrs = this._translateAttributes(el);

              return new Element$1(el.name, translatedAttrs, childNodes, el.sourceSpan, el.startSourceSpan, el.endSourceSpan);
            }

            return null;
          }
        }, {
          key: "visitAttribute",
          value: function visitAttribute(attribute, context) {
            throw new Error('unreachable code');
          }
        }, {
          key: "_init",
          value: function _init(mode, interpolationConfig) {
            this._mode = mode;
            this._inI18nBlock = false;
            this._inI18nNode = false;
            this._depth = 0;
            this._inIcu = false;
            this._msgCountAtSectionStart = undefined;
            this._errors = [];
            this._messages = [];
            this._inImplicitNode = false;
            this._createI18nMessage = createI18nMessageFactory(interpolationConfig);
          } // looks for translatable attributes

        }, {
          key: "_visitAttributesOf",
          value: function _visitAttributesOf(el) {
            var _this207 = this;

            var explicitAttrNameToValue = {};
            var implicitAttrNames = this._implicitAttrs[el.name] || [];
            el.attrs.filter(function (attr) {
              return attr.name.startsWith(_I18N_ATTR_PREFIX);
            }).forEach(function (attr) {
              return explicitAttrNameToValue[attr.name.slice(_I18N_ATTR_PREFIX.length)] = attr.value;
            });
            el.attrs.forEach(function (attr) {
              if (attr.name in explicitAttrNameToValue) {
                _this207._addMessage([attr], explicitAttrNameToValue[attr.name]);
              } else if (implicitAttrNames.some(function (name) {
                return attr.name === name;
              })) {
                _this207._addMessage([attr]);
              }
            });
          } // add a translatable message

        }, {
          key: "_addMessage",
          value: function _addMessage(ast, msgMeta) {
            if (ast.length == 0 || ast.length == 1 && ast[0] instanceof Attribute && !ast[0].value) {
              // Do not create empty messages
              return null;
            }

            var _parseMessageMeta2 = _parseMessageMeta(msgMeta),
                meaning = _parseMessageMeta2.meaning,
                description = _parseMessageMeta2.description,
                id = _parseMessageMeta2.id;

            var message = this._createI18nMessage(ast, meaning, description, id);

            this._messages.push(message);

            return message;
          } // Translates the given message given the `TranslationBundle`
          // This is used for translating elements / blocks - see `_translateAttributes` for attributes
          // no-op when called in extraction mode (returns [])

        }, {
          key: "_translateMessage",
          value: function _translateMessage(el, message) {
            if (message && this._mode === _VisitorMode.Merge) {
              var nodes = this._translations.get(message);

              if (nodes) {
                return nodes;
              }

              this._reportError(el, "Translation unavailable for message id=\"".concat(this._translations.digest(message), "\""));
            }

            return [];
          } // translate the attributes of an element and remove i18n specific attributes

        }, {
          key: "_translateAttributes",
          value: function _translateAttributes(el) {
            var _this208 = this;

            var attributes = el.attrs;
            var i18nParsedMessageMeta = {};
            attributes.forEach(function (attr) {
              if (attr.name.startsWith(_I18N_ATTR_PREFIX)) {
                i18nParsedMessageMeta[attr.name.slice(_I18N_ATTR_PREFIX.length)] = _parseMessageMeta(attr.value);
              }
            });
            var translatedAttributes = [];
            attributes.forEach(function (attr) {
              if (attr.name === _I18N_ATTR || attr.name.startsWith(_I18N_ATTR_PREFIX)) {
                // strip i18n specific attributes
                return;
              }

              if (attr.value && attr.value != '' && i18nParsedMessageMeta.hasOwnProperty(attr.name)) {
                var _i18nParsedMessageMet = i18nParsedMessageMeta[attr.name],
                    meaning = _i18nParsedMessageMet.meaning,
                    description = _i18nParsedMessageMet.description,
                    id = _i18nParsedMessageMet.id;

                var message = _this208._createI18nMessage([attr], meaning, description, id);

                var nodes = _this208._translations.get(message);

                if (nodes) {
                  if (nodes.length == 0) {
                    translatedAttributes.push(new Attribute(attr.name, '', attr.sourceSpan, undefined
                    /* keySpan */
                    , undefined
                    /* valueSpan */
                    , undefined
                    /* i18n */
                    ));
                  } else if (nodes[0] instanceof Text$3) {
                    var value = nodes[0].value;
                    translatedAttributes.push(new Attribute(attr.name, value, attr.sourceSpan, undefined
                    /* keySpan */
                    , undefined
                    /* valueSpan */
                    , undefined
                    /* i18n */
                    ));
                  } else {
                    _this208._reportError(el, "Unexpected translation for attribute \"".concat(attr.name, "\" (id=\"").concat(id || _this208._translations.digest(message), "\")"));
                  }
                } else {
                  _this208._reportError(el, "Translation unavailable for attribute \"".concat(attr.name, "\" (id=\"").concat(id || _this208._translations.digest(message), "\")"));
                }
              } else {
                translatedAttributes.push(attr);
              }
            });
            return translatedAttributes;
          }
          /**
           * Add the node as a child of the block when:
           * - we are in a block,
           * - we are not inside a ICU message (those are handled separately),
           * - the node is a "direct child" of the block
           */

        }, {
          key: "_mayBeAddBlockChildren",
          value: function _mayBeAddBlockChildren(node) {
            if (this._inI18nBlock && !this._inIcu && this._depth == this._blockStartDepth) {
              this._blockChildren.push(node);
            }
          }
          /**
           * Marks the start of a section, see `_closeTranslatableSection`
           */

        }, {
          key: "_openTranslatableSection",
          value: function _openTranslatableSection(node) {
            if (this._isInTranslatableSection) {
              this._reportError(node, 'Unexpected section start');
            } else {
              this._msgCountAtSectionStart = this._messages.length;
            }
          }
          /**
           * A translatable section could be:
           * - the content of translatable element,
           * - nodes between `<!-- i18n -->` and `<!-- /i18n -->` comments
           */

        }, {
          key: "_isInTranslatableSection",
          get: function get() {
            return this._msgCountAtSectionStart !== void 0;
          }
          /**
           * Terminates a section.
           *
           * If a section has only one significant children (comments not significant) then we should not
           * keep the message from this children:
           *
           * `<p i18n="meaning|description">{ICU message}</p>` would produce two messages:
           * - one for the <p> content with meaning and description,
           * - another one for the ICU message.
           *
           * In this case the last message is discarded as it contains less information (the AST is
           * otherwise identical).
           *
           * Note that we should still keep messages extracted from attributes inside the section (ie in the
           * ICU message here)
           */

        }, {
          key: "_closeTranslatableSection",
          value: function _closeTranslatableSection(node, directChildren) {
            if (!this._isInTranslatableSection) {
              this._reportError(node, 'Unexpected section end');

              return;
            }

            var startIndex = this._msgCountAtSectionStart;
            var significantChildren = directChildren.reduce(function (count, node) {
              return count + (node instanceof Comment ? 0 : 1);
            }, 0);

            if (significantChildren == 1) {
              for (var i = this._messages.length - 1; i >= startIndex; i--) {
                var ast = this._messages[i].nodes;

                if (!(ast.length == 1 && ast[0] instanceof Text$1)) {
                  this._messages.splice(i, 1);

                  break;
                }
              }
            }

            this._msgCountAtSectionStart = undefined;
          }
        }, {
          key: "_reportError",
          value: function _reportError(node, msg) {
            this._errors.push(new I18nError(node.sourceSpan, msg));
          }
        }]);

        return _Visitor$2;
      }();

      function _isOpeningComment(n) {
        return !!(n instanceof Comment && n.value && n.value.startsWith('i18n'));
      }

      function _isClosingComment(n) {
        return !!(n instanceof Comment && n.value && n.value === '/i18n');
      }

      function _getI18nAttr(p) {
        return p.attrs.find(function (attr) {
          return attr.name === _I18N_ATTR;
        }) || null;
      }

      function _parseMessageMeta(i18n) {
        if (!i18n) return {
          meaning: '',
          description: '',
          id: ''
        };
        var idIndex = i18n.indexOf(ID_SEPARATOR);
        var descIndex = i18n.indexOf(MEANING_SEPARATOR);

        var _ref23 = idIndex > -1 ? [i18n.slice(0, idIndex), i18n.slice(idIndex + 2)] : [i18n, ''],
            _ref24 = _slicedToArray(_ref23, 2),
            meaningAndDesc = _ref24[0],
            id = _ref24[1];

        var _ref25 = descIndex > -1 ? [meaningAndDesc.slice(0, descIndex), meaningAndDesc.slice(descIndex + 1)] : ['', meaningAndDesc],
            _ref26 = _slicedToArray(_ref25, 2),
            meaning = _ref26[0],
            description = _ref26[1];

        return {
          meaning: meaning,
          description: description,
          id: id.trim()
        };
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      var XmlTagDefinition = /*#__PURE__*/function () {
        function XmlTagDefinition() {
          _classCallCheck(this, XmlTagDefinition);

          this.closedByParent = false;
          this.isVoid = false;
          this.ignoreFirstLf = false;
          this.canSelfClose = true;
          this.preventNamespaceInheritance = false;
        }

        _createClass(XmlTagDefinition, [{
          key: "requireExtraParent",
          value: function requireExtraParent(currentParent) {
            return false;
          }
        }, {
          key: "isClosedByChild",
          value: function isClosedByChild(name) {
            return false;
          }
        }, {
          key: "getContentType",
          value: function getContentType() {
            return TagContentType.PARSABLE_DATA;
          }
        }]);

        return XmlTagDefinition;
      }();

      var _TAG_DEFINITION = new XmlTagDefinition();

      function getXmlTagDefinition(tagName) {
        return _TAG_DEFINITION;
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      var XmlParser = /*#__PURE__*/function (_Parser2) {
        _inherits(XmlParser, _Parser2);

        var _super100 = _createSuper(XmlParser);

        function XmlParser() {
          _classCallCheck(this, XmlParser);

          return _super100.call(this, getXmlTagDefinition);
        }

        _createClass(XmlParser, [{
          key: "parse",
          value: function parse(source, url, options) {
            return _get(_getPrototypeOf(XmlParser.prototype), "parse", this).call(this, source, url, options);
          }
        }]);

        return XmlParser;
      }(Parser);
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      var _VERSION = '1.2';
      var _XMLNS = 'urn:oasis:names:tc:xliff:document:1.2'; // TODO(vicb): make this a param (s/_/-/)

      var _DEFAULT_SOURCE_LANG = 'en';
      var _PLACEHOLDER_TAG$1 = 'x';
      var _MARKER_TAG = 'mrk';
      var _FILE_TAG = 'file';
      var _SOURCE_TAG$1 = 'source';
      var _SEGMENT_SOURCE_TAG = 'seg-source';
      var _ALT_TRANS_TAG = 'alt-trans';
      var _TARGET_TAG = 'target';
      var _UNIT_TAG = 'trans-unit';
      var _CONTEXT_GROUP_TAG = 'context-group';
      var _CONTEXT_TAG = 'context'; // https://docs.oasis-open.org/xliff/v1.2/os/xliff-core.html
      // https://docs.oasis-open.org/xliff/v1.2/xliff-profile-html/xliff-profile-html-1.2.html

      var Xliff = /*#__PURE__*/function (_Serializer2) {
        _inherits(Xliff, _Serializer2);

        var _super101 = _createSuper(Xliff);

        function Xliff() {
          _classCallCheck(this, Xliff);

          return _super101.apply(this, arguments);
        }

        _createClass(Xliff, [{
          key: "write",
          value: function write(messages, locale) {
            var visitor = new _WriteVisitor();
            var transUnits = [];
            messages.forEach(function (message) {
              var _transUnit$children;

              var contextTags = [];
              message.sources.forEach(function (source) {
                var contextGroupTag = new Tag(_CONTEXT_GROUP_TAG, {
                  purpose: 'location'
                });
                contextGroupTag.children.push(new CR(10), new Tag(_CONTEXT_TAG, {
                  'context-type': 'sourcefile'
                }, [new Text$2(source.filePath)]), new CR(10), new Tag(_CONTEXT_TAG, {
                  'context-type': 'linenumber'
                }, [new Text$2("".concat(source.startLine))]), new CR(8));
                contextTags.push(new CR(8), contextGroupTag);
              });
              var transUnit = new Tag(_UNIT_TAG, {
                id: message.id,
                datatype: 'html'
              });

              (_transUnit$children = transUnit.children).push.apply(_transUnit$children, [new CR(8), new Tag(_SOURCE_TAG$1, {}, visitor.serialize(message.nodes))].concat(contextTags));

              if (message.description) {
                transUnit.children.push(new CR(8), new Tag('note', {
                  priority: '1',
                  from: 'description'
                }, [new Text$2(message.description)]));
              }

              if (message.meaning) {
                transUnit.children.push(new CR(8), new Tag('note', {
                  priority: '1',
                  from: 'meaning'
                }, [new Text$2(message.meaning)]));
              }

              transUnit.children.push(new CR(6));
              transUnits.push(new CR(6), transUnit);
            });
            var body = new Tag('body', {}, [].concat(transUnits, [new CR(4)]));
            var file = new Tag('file', {
              'source-language': locale || _DEFAULT_SOURCE_LANG,
              datatype: 'plaintext',
              original: 'ng2.template'
            }, [new CR(4), body, new CR(2)]);
            var xliff = new Tag('xliff', {
              version: _VERSION,
              xmlns: _XMLNS
            }, [new CR(2), file, new CR()]);
            return serialize([new Declaration({
              version: '1.0',
              encoding: 'UTF-8'
            }), new CR(), xliff, new CR()]);
          }
        }, {
          key: "load",
          value: function load(content, url) {
            // xliff to xml nodes
            var xliffParser = new XliffParser();

            var _xliffParser$parse = xliffParser.parse(content, url),
                locale = _xliffParser$parse.locale,
                msgIdToHtml = _xliffParser$parse.msgIdToHtml,
                errors = _xliffParser$parse.errors; // xml nodes to i18n nodes


            var i18nNodesByMsgId = {};
            var converter = new XmlToI18n();
            Object.keys(msgIdToHtml).forEach(function (msgId) {
              var _converter$convert = converter.convert(msgIdToHtml[msgId], url),
                  i18nNodes = _converter$convert.i18nNodes,
                  e = _converter$convert.errors;

              errors.push.apply(errors, _toConsumableArray(e));
              i18nNodesByMsgId[msgId] = i18nNodes;
            });

            if (errors.length) {
              throw new Error("xliff parse errors:\n".concat(errors.join('\n')));
            }

            return {
              locale: locale,
              i18nNodesByMsgId: i18nNodesByMsgId
            };
          }
        }, {
          key: "digest",
          value: function digest(message) {
            return _digest2(message);
          }
        }]);

        return Xliff;
      }(Serializer);

      var _WriteVisitor = /*#__PURE__*/function () {
        function _WriteVisitor() {
          _classCallCheck(this, _WriteVisitor);
        }

        _createClass(_WriteVisitor, [{
          key: "visitText",
          value: function visitText(text, context) {
            return [new Text$2(text.value)];
          }
        }, {
          key: "visitContainer",
          value: function visitContainer(container, context) {
            var _this209 = this;

            var nodes = [];
            container.children.forEach(function (node) {
              return nodes.push.apply(nodes, _toConsumableArray(node.visit(_this209)));
            });
            return nodes;
          }
        }, {
          key: "visitIcu",
          value: function visitIcu(icu, context) {
            var _this210 = this;

            var nodes = [new Text$2("{".concat(icu.expressionPlaceholder, ", ").concat(icu.type, ", "))];
            Object.keys(icu.cases).forEach(function (c) {
              nodes.push.apply(nodes, [new Text$2("".concat(c, " {"))].concat(_toConsumableArray(icu.cases[c].visit(_this210)), [new Text$2("} ")]));
            });
            nodes.push(new Text$2("}"));
            return nodes;
          }
        }, {
          key: "visitTagPlaceholder",
          value: function visitTagPlaceholder(ph, context) {
            var ctype = getCtypeForTag(ph.tag);

            if (ph.isVoid) {
              // void tags have no children nor closing tags
              return [new Tag(_PLACEHOLDER_TAG$1, {
                id: ph.startName,
                ctype: ctype,
                'equiv-text': "<".concat(ph.tag, "/>")
              })];
            }

            var startTagPh = new Tag(_PLACEHOLDER_TAG$1, {
              id: ph.startName,
              ctype: ctype,
              'equiv-text': "<".concat(ph.tag, ">")
            });
            var closeTagPh = new Tag(_PLACEHOLDER_TAG$1, {
              id: ph.closeName,
              ctype: ctype,
              'equiv-text': "</".concat(ph.tag, ">")
            });
            return [startTagPh].concat(_toConsumableArray(this.serialize(ph.children)), [closeTagPh]);
          }
        }, {
          key: "visitPlaceholder",
          value: function visitPlaceholder(ph, context) {
            return [new Tag(_PLACEHOLDER_TAG$1, {
              id: ph.name,
              'equiv-text': "{{".concat(ph.value, "}}")
            })];
          }
        }, {
          key: "visitIcuPlaceholder",
          value: function visitIcuPlaceholder(ph, context) {
            var equivText = "{".concat(ph.value.expression, ", ").concat(ph.value.type, ", ").concat(Object.keys(ph.value.cases).map(function (value) {
              return value + ' {...}';
            }).join(' '), "}");
            return [new Tag(_PLACEHOLDER_TAG$1, {
              id: ph.name,
              'equiv-text': equivText
            })];
          }
        }, {
          key: "serialize",
          value: function serialize(nodes) {
            var _ref27,
                _this211 = this;

            return (_ref27 = []).concat.apply(_ref27, _toConsumableArray(nodes.map(function (node) {
              return node.visit(_this211);
            })));
          }
        }]);

        return _WriteVisitor;
      }(); // TODO(vicb): add error management (structure)
      // Extract messages as xml nodes from the xliff file


      var XliffParser = /*#__PURE__*/function () {
        function XliffParser() {
          _classCallCheck(this, XliffParser);

          this._locale = null;
        }

        _createClass(XliffParser, [{
          key: "parse",
          value: function parse(xliff, url) {
            this._unitMlString = null;
            this._msgIdToHtml = {};
            var xml = new XmlParser().parse(xliff, url);
            this._errors = xml.errors;
            visitAll$1(this, xml.rootNodes, null);
            return {
              msgIdToHtml: this._msgIdToHtml,
              errors: this._errors,
              locale: this._locale
            };
          }
        }, {
          key: "visitElement",
          value: function visitElement(element, context) {
            switch (element.name) {
              case _UNIT_TAG:
                this._unitMlString = null;
                var idAttr = element.attrs.find(function (attr) {
                  return attr.name === 'id';
                });

                if (!idAttr) {
                  this._addError(element, "<".concat(_UNIT_TAG, "> misses the \"id\" attribute"));
                } else {
                  var id = idAttr.value;

                  if (this._msgIdToHtml.hasOwnProperty(id)) {
                    this._addError(element, "Duplicated translations for msg ".concat(id));
                  } else {
                    visitAll$1(this, element.children, null);

                    if (typeof this._unitMlString === 'string') {
                      this._msgIdToHtml[id] = this._unitMlString;
                    } else {
                      this._addError(element, "Message ".concat(id, " misses a translation"));
                    }
                  }
                }

                break;
              // ignore those tags

              case _SOURCE_TAG$1:
              case _SEGMENT_SOURCE_TAG:
              case _ALT_TRANS_TAG:
                break;

              case _TARGET_TAG:
                var innerTextStart = element.startSourceSpan.end.offset;
                var innerTextEnd = element.endSourceSpan.start.offset;
                var content = element.startSourceSpan.start.file.content;
                var innerText = content.slice(innerTextStart, innerTextEnd);
                this._unitMlString = innerText;
                break;

              case _FILE_TAG:
                var localeAttr = element.attrs.find(function (attr) {
                  return attr.name === 'target-language';
                });

                if (localeAttr) {
                  this._locale = localeAttr.value;
                }

                visitAll$1(this, element.children, null);
                break;

              default:
                // TODO(vicb): assert file structure, xliff version
                // For now only recurse on unhandled nodes
                visitAll$1(this, element.children, null);
            }
          }
        }, {
          key: "visitAttribute",
          value: function visitAttribute(attribute, context) {}
        }, {
          key: "visitText",
          value: function visitText(text, context) {}
        }, {
          key: "visitComment",
          value: function visitComment(comment, context) {}
        }, {
          key: "visitExpansion",
          value: function visitExpansion(expansion, context) {}
        }, {
          key: "visitExpansionCase",
          value: function visitExpansionCase(expansionCase, context) {}
        }, {
          key: "_addError",
          value: function _addError(node, message) {
            this._errors.push(new I18nError(node.sourceSpan, message));
          }
        }]);

        return XliffParser;
      }(); // Convert ml nodes (xliff syntax) to i18n nodes


      var XmlToI18n = /*#__PURE__*/function () {
        function XmlToI18n() {
          _classCallCheck(this, XmlToI18n);
        }

        _createClass(XmlToI18n, [{
          key: "convert",
          value: function convert(message, url) {
            var _ref28;

            var xmlIcu = new XmlParser().parse(message, url, {
              tokenizeExpansionForms: true
            });
            this._errors = xmlIcu.errors;
            var i18nNodes = this._errors.length > 0 || xmlIcu.rootNodes.length == 0 ? [] : (_ref28 = []).concat.apply(_ref28, _toConsumableArray(visitAll$1(this, xmlIcu.rootNodes)));
            return {
              i18nNodes: i18nNodes,
              errors: this._errors
            };
          }
        }, {
          key: "visitText",
          value: function visitText(text, context) {
            return new Text$1(text.value, text.sourceSpan);
          }
        }, {
          key: "visitElement",
          value: function visitElement(el, context) {
            if (el.name === _PLACEHOLDER_TAG$1) {
              var nameAttr = el.attrs.find(function (attr) {
                return attr.name === 'id';
              });

              if (nameAttr) {
                return new Placeholder('', nameAttr.value, el.sourceSpan);
              }

              this._addError(el, "<".concat(_PLACEHOLDER_TAG$1, "> misses the \"id\" attribute"));

              return null;
            }

            if (el.name === _MARKER_TAG) {
              var _ref29;

              return (_ref29 = []).concat.apply(_ref29, _toConsumableArray(visitAll$1(this, el.children)));
            }

            this._addError(el, "Unexpected tag");

            return null;
          }
        }, {
          key: "visitExpansion",
          value: function visitExpansion(icu, context) {
            var caseMap = {};
            visitAll$1(this, icu.cases).forEach(function (c) {
              caseMap[c.value] = new Container(c.nodes, icu.sourceSpan);
            });
            return new Icu$1(icu.switchValue, icu.type, caseMap, icu.sourceSpan);
          }
        }, {
          key: "visitExpansionCase",
          value: function visitExpansionCase(icuCase, context) {
            return {
              value: icuCase.value,
              nodes: visitAll$1(this, icuCase.expression)
            };
          }
        }, {
          key: "visitComment",
          value: function visitComment(comment, context) {}
        }, {
          key: "visitAttribute",
          value: function visitAttribute(attribute, context) {}
        }, {
          key: "_addError",
          value: function _addError(node, message) {
            this._errors.push(new I18nError(node.sourceSpan, message));
          }
        }]);

        return XmlToI18n;
      }();

      function getCtypeForTag(tag) {
        switch (tag.toLowerCase()) {
          case 'br':
            return 'lb';

          case 'img':
            return 'image';

          default:
            return "x-".concat(tag);
        }
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      var _VERSION$1 = '2.0';
      var _XMLNS$1 = 'urn:oasis:names:tc:xliff:document:2.0'; // TODO(vicb): make this a param (s/_/-/)

      var _DEFAULT_SOURCE_LANG$1 = 'en';
      var _PLACEHOLDER_TAG$2 = 'ph';
      var _PLACEHOLDER_SPANNING_TAG = 'pc';
      var _MARKER_TAG$1 = 'mrk';
      var _XLIFF_TAG = 'xliff';
      var _SOURCE_TAG$2 = 'source';
      var _TARGET_TAG$1 = 'target';
      var _UNIT_TAG$1 = 'unit'; // https://docs.oasis-open.org/xliff/xliff-core/v2.0/os/xliff-core-v2.0-os.html

      var Xliff2 = /*#__PURE__*/function (_Serializer3) {
        _inherits(Xliff2, _Serializer3);

        var _super102 = _createSuper(Xliff2);

        function Xliff2() {
          _classCallCheck(this, Xliff2);

          return _super102.apply(this, arguments);
        }

        _createClass(Xliff2, [{
          key: "write",
          value: function write(messages, locale) {
            var visitor = new _WriteVisitor$1();
            var units = [];
            messages.forEach(function (message) {
              var unit = new Tag(_UNIT_TAG$1, {
                id: message.id
              });
              var notes = new Tag('notes');

              if (message.description || message.meaning) {
                if (message.description) {
                  notes.children.push(new CR(8), new Tag('note', {
                    category: 'description'
                  }, [new Text$2(message.description)]));
                }

                if (message.meaning) {
                  notes.children.push(new CR(8), new Tag('note', {
                    category: 'meaning'
                  }, [new Text$2(message.meaning)]));
                }
              }

              message.sources.forEach(function (source) {
                notes.children.push(new CR(8), new Tag('note', {
                  category: 'location'
                }, [new Text$2("".concat(source.filePath, ":").concat(source.startLine).concat(source.endLine !== source.startLine ? ',' + source.endLine : ''))]));
              });
              notes.children.push(new CR(6));
              unit.children.push(new CR(6), notes);
              var segment = new Tag('segment');
              segment.children.push(new CR(8), new Tag(_SOURCE_TAG$2, {}, visitor.serialize(message.nodes)), new CR(6));
              unit.children.push(new CR(6), segment, new CR(4));
              units.push(new CR(4), unit);
            });
            var file = new Tag('file', {
              'original': 'ng.template',
              id: 'ngi18n'
            }, [].concat(units, [new CR(2)]));
            var xliff = new Tag(_XLIFF_TAG, {
              version: _VERSION$1,
              xmlns: _XMLNS$1,
              srcLang: locale || _DEFAULT_SOURCE_LANG$1
            }, [new CR(2), file, new CR()]);
            return serialize([new Declaration({
              version: '1.0',
              encoding: 'UTF-8'
            }), new CR(), xliff, new CR()]);
          }
        }, {
          key: "load",
          value: function load(content, url) {
            // xliff to xml nodes
            var xliff2Parser = new Xliff2Parser();

            var _xliff2Parser$parse = xliff2Parser.parse(content, url),
                locale = _xliff2Parser$parse.locale,
                msgIdToHtml = _xliff2Parser$parse.msgIdToHtml,
                errors = _xliff2Parser$parse.errors; // xml nodes to i18n nodes


            var i18nNodesByMsgId = {};
            var converter = new XmlToI18n$1();
            Object.keys(msgIdToHtml).forEach(function (msgId) {
              var _converter$convert2 = converter.convert(msgIdToHtml[msgId], url),
                  i18nNodes = _converter$convert2.i18nNodes,
                  e = _converter$convert2.errors;

              errors.push.apply(errors, _toConsumableArray(e));
              i18nNodesByMsgId[msgId] = i18nNodes;
            });

            if (errors.length) {
              throw new Error("xliff2 parse errors:\n".concat(errors.join('\n')));
            }

            return {
              locale: locale,
              i18nNodesByMsgId: i18nNodesByMsgId
            };
          }
        }, {
          key: "digest",
          value: function digest(message) {
            return decimalDigest(message);
          }
        }]);

        return Xliff2;
      }(Serializer);

      var _WriteVisitor$1 = /*#__PURE__*/function () {
        function _WriteVisitor$1() {
          _classCallCheck(this, _WriteVisitor$1);
        }

        _createClass(_WriteVisitor$1, [{
          key: "visitText",
          value: function visitText(text, context) {
            return [new Text$2(text.value)];
          }
        }, {
          key: "visitContainer",
          value: function visitContainer(container, context) {
            var _this212 = this;

            var nodes = [];
            container.children.forEach(function (node) {
              return nodes.push.apply(nodes, _toConsumableArray(node.visit(_this212)));
            });
            return nodes;
          }
        }, {
          key: "visitIcu",
          value: function visitIcu(icu, context) {
            var _this213 = this;

            var nodes = [new Text$2("{".concat(icu.expressionPlaceholder, ", ").concat(icu.type, ", "))];
            Object.keys(icu.cases).forEach(function (c) {
              nodes.push.apply(nodes, [new Text$2("".concat(c, " {"))].concat(_toConsumableArray(icu.cases[c].visit(_this213)), [new Text$2("} ")]));
            });
            nodes.push(new Text$2("}"));
            return nodes;
          }
        }, {
          key: "visitTagPlaceholder",
          value: function visitTagPlaceholder(ph, context) {
            var _ref30,
                _this214 = this;

            var type = getTypeForTag(ph.tag);

            if (ph.isVoid) {
              var tagPh = new Tag(_PLACEHOLDER_TAG$2, {
                id: (this._nextPlaceholderId++).toString(),
                equiv: ph.startName,
                type: type,
                disp: "<".concat(ph.tag, "/>")
              });
              return [tagPh];
            }

            var tagPc = new Tag(_PLACEHOLDER_SPANNING_TAG, {
              id: (this._nextPlaceholderId++).toString(),
              equivStart: ph.startName,
              equivEnd: ph.closeName,
              type: type,
              dispStart: "<".concat(ph.tag, ">"),
              dispEnd: "</".concat(ph.tag, ">")
            });

            var nodes = (_ref30 = []).concat.apply(_ref30, _toConsumableArray(ph.children.map(function (node) {
              return node.visit(_this214);
            })));

            if (nodes.length) {
              nodes.forEach(function (node) {
                return tagPc.children.push(node);
              });
            } else {
              tagPc.children.push(new Text$2(''));
            }

            return [tagPc];
          }
        }, {
          key: "visitPlaceholder",
          value: function visitPlaceholder(ph, context) {
            var idStr = (this._nextPlaceholderId++).toString();
            return [new Tag(_PLACEHOLDER_TAG$2, {
              id: idStr,
              equiv: ph.name,
              disp: "{{".concat(ph.value, "}}")
            })];
          }
        }, {
          key: "visitIcuPlaceholder",
          value: function visitIcuPlaceholder(ph, context) {
            var cases = Object.keys(ph.value.cases).map(function (value) {
              return value + ' {...}';
            }).join(' ');
            var idStr = (this._nextPlaceholderId++).toString();
            return [new Tag(_PLACEHOLDER_TAG$2, {
              id: idStr,
              equiv: ph.name,
              disp: "{".concat(ph.value.expression, ", ").concat(ph.value.type, ", ").concat(cases, "}")
            })];
          }
        }, {
          key: "serialize",
          value: function serialize(nodes) {
            var _ref31,
                _this215 = this;

            this._nextPlaceholderId = 0;
            return (_ref31 = []).concat.apply(_ref31, _toConsumableArray(nodes.map(function (node) {
              return node.visit(_this215);
            })));
          }
        }]);

        return _WriteVisitor$1;
      }(); // Extract messages as xml nodes from the xliff file


      var Xliff2Parser = /*#__PURE__*/function () {
        function Xliff2Parser() {
          _classCallCheck(this, Xliff2Parser);

          this._locale = null;
        }

        _createClass(Xliff2Parser, [{
          key: "parse",
          value: function parse(xliff, url) {
            this._unitMlString = null;
            this._msgIdToHtml = {};
            var xml = new XmlParser().parse(xliff, url);
            this._errors = xml.errors;
            visitAll$1(this, xml.rootNodes, null);
            return {
              msgIdToHtml: this._msgIdToHtml,
              errors: this._errors,
              locale: this._locale
            };
          }
        }, {
          key: "visitElement",
          value: function visitElement(element, context) {
            switch (element.name) {
              case _UNIT_TAG$1:
                this._unitMlString = null;
                var idAttr = element.attrs.find(function (attr) {
                  return attr.name === 'id';
                });

                if (!idAttr) {
                  this._addError(element, "<".concat(_UNIT_TAG$1, "> misses the \"id\" attribute"));
                } else {
                  var id = idAttr.value;

                  if (this._msgIdToHtml.hasOwnProperty(id)) {
                    this._addError(element, "Duplicated translations for msg ".concat(id));
                  } else {
                    visitAll$1(this, element.children, null);

                    if (typeof this._unitMlString === 'string') {
                      this._msgIdToHtml[id] = this._unitMlString;
                    } else {
                      this._addError(element, "Message ".concat(id, " misses a translation"));
                    }
                  }
                }

                break;

              case _SOURCE_TAG$2:
                // ignore source message
                break;

              case _TARGET_TAG$1:
                var innerTextStart = element.startSourceSpan.end.offset;
                var innerTextEnd = element.endSourceSpan.start.offset;
                var content = element.startSourceSpan.start.file.content;
                var innerText = content.slice(innerTextStart, innerTextEnd);
                this._unitMlString = innerText;
                break;

              case _XLIFF_TAG:
                var localeAttr = element.attrs.find(function (attr) {
                  return attr.name === 'trgLang';
                });

                if (localeAttr) {
                  this._locale = localeAttr.value;
                }

                var versionAttr = element.attrs.find(function (attr) {
                  return attr.name === 'version';
                });

                if (versionAttr) {
                  var version = versionAttr.value;

                  if (version !== '2.0') {
                    this._addError(element, "The XLIFF file version ".concat(version, " is not compatible with XLIFF 2.0 serializer"));
                  } else {
                    visitAll$1(this, element.children, null);
                  }
                }

                break;

              default:
                visitAll$1(this, element.children, null);
            }
          }
        }, {
          key: "visitAttribute",
          value: function visitAttribute(attribute, context) {}
        }, {
          key: "visitText",
          value: function visitText(text, context) {}
        }, {
          key: "visitComment",
          value: function visitComment(comment, context) {}
        }, {
          key: "visitExpansion",
          value: function visitExpansion(expansion, context) {}
        }, {
          key: "visitExpansionCase",
          value: function visitExpansionCase(expansionCase, context) {}
        }, {
          key: "_addError",
          value: function _addError(node, message) {
            this._errors.push(new I18nError(node.sourceSpan, message));
          }
        }]);

        return Xliff2Parser;
      }(); // Convert ml nodes (xliff syntax) to i18n nodes


      var XmlToI18n$1 = /*#__PURE__*/function () {
        function XmlToI18n$1() {
          _classCallCheck(this, XmlToI18n$1);
        }

        _createClass(XmlToI18n$1, [{
          key: "convert",
          value: function convert(message, url) {
            var _ref32;

            var xmlIcu = new XmlParser().parse(message, url, {
              tokenizeExpansionForms: true
            });
            this._errors = xmlIcu.errors;
            var i18nNodes = this._errors.length > 0 || xmlIcu.rootNodes.length == 0 ? [] : (_ref32 = []).concat.apply(_ref32, _toConsumableArray(visitAll$1(this, xmlIcu.rootNodes)));
            return {
              i18nNodes: i18nNodes,
              errors: this._errors
            };
          }
        }, {
          key: "visitText",
          value: function visitText(text, context) {
            return new Text$1(text.value, text.sourceSpan);
          }
        }, {
          key: "visitElement",
          value: function visitElement(el, context) {
            var _this216 = this,
                _ref33;

            switch (el.name) {
              case _PLACEHOLDER_TAG$2:
                var nameAttr = el.attrs.find(function (attr) {
                  return attr.name === 'equiv';
                });

                if (nameAttr) {
                  return [new Placeholder('', nameAttr.value, el.sourceSpan)];
                }

                this._addError(el, "<".concat(_PLACEHOLDER_TAG$2, "> misses the \"equiv\" attribute"));

                break;

              case _PLACEHOLDER_SPANNING_TAG:
                var startAttr = el.attrs.find(function (attr) {
                  return attr.name === 'equivStart';
                });
                var endAttr = el.attrs.find(function (attr) {
                  return attr.name === 'equivEnd';
                });

                if (!startAttr) {
                  this._addError(el, "<".concat(_PLACEHOLDER_TAG$2, "> misses the \"equivStart\" attribute"));
                } else if (!endAttr) {
                  this._addError(el, "<".concat(_PLACEHOLDER_TAG$2, "> misses the \"equivEnd\" attribute"));
                } else {
                  var startId = startAttr.value;
                  var endId = endAttr.value;
                  var nodes = [];
                  return nodes.concat.apply(nodes, [new Placeholder('', startId, el.sourceSpan)].concat(_toConsumableArray(el.children.map(function (node) {
                    return node.visit(_this216, null);
                  })), [new Placeholder('', endId, el.sourceSpan)]));
                }

                break;

              case _MARKER_TAG$1:
                return (_ref33 = []).concat.apply(_ref33, _toConsumableArray(visitAll$1(this, el.children)));

              default:
                this._addError(el, "Unexpected tag");

            }

            return null;
          }
        }, {
          key: "visitExpansion",
          value: function visitExpansion(icu, context) {
            var caseMap = {};
            visitAll$1(this, icu.cases).forEach(function (c) {
              caseMap[c.value] = new Container(c.nodes, icu.sourceSpan);
            });
            return new Icu$1(icu.switchValue, icu.type, caseMap, icu.sourceSpan);
          }
        }, {
          key: "visitExpansionCase",
          value: function visitExpansionCase(icuCase, context) {
            var _ref34;

            return {
              value: icuCase.value,
              nodes: (_ref34 = []).concat.apply(_ref34, _toConsumableArray(visitAll$1(this, icuCase.expression)))
            };
          }
        }, {
          key: "visitComment",
          value: function visitComment(comment, context) {}
        }, {
          key: "visitAttribute",
          value: function visitAttribute(attribute, context) {}
        }, {
          key: "_addError",
          value: function _addError(node, message) {
            this._errors.push(new I18nError(node.sourceSpan, message));
          }
        }]);

        return XmlToI18n$1;
      }();

      function getTypeForTag(tag) {
        switch (tag.toLowerCase()) {
          case 'br':
          case 'b':
          case 'i':
          case 'u':
            return 'fmt';

          case 'img':
            return 'image';

          case 'a':
            return 'link';

          default:
            return 'other';
        }
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      var _TRANSLATIONS_TAG = 'translationbundle';
      var _TRANSLATION_TAG = 'translation';
      var _PLACEHOLDER_TAG$3 = 'ph';

      var Xtb = /*#__PURE__*/function (_Serializer4) {
        _inherits(Xtb, _Serializer4);

        var _super103 = _createSuper(Xtb);

        function Xtb() {
          _classCallCheck(this, Xtb);

          return _super103.apply(this, arguments);
        }

        _createClass(Xtb, [{
          key: "write",
          value: function write(messages, locale) {
            throw new Error('Unsupported');
          }
        }, {
          key: "load",
          value: function load(content, url) {
            // xtb to xml nodes
            var xtbParser = new XtbParser();

            var _xtbParser$parse = xtbParser.parse(content, url),
                locale = _xtbParser$parse.locale,
                msgIdToHtml = _xtbParser$parse.msgIdToHtml,
                errors = _xtbParser$parse.errors; // xml nodes to i18n nodes


            var i18nNodesByMsgId = {};
            var converter = new XmlToI18n$2(); // Because we should be able to load xtb files that rely on features not supported by angular,
            // we need to delay the conversion of html to i18n nodes so that non angular messages are not
            // converted

            Object.keys(msgIdToHtml).forEach(function (msgId) {
              var valueFn = function valueFn() {
                var _converter$convert3 = converter.convert(msgIdToHtml[msgId], url),
                    i18nNodes = _converter$convert3.i18nNodes,
                    errors = _converter$convert3.errors;

                if (errors.length) {
                  throw new Error("xtb parse errors:\n".concat(errors.join('\n')));
                }

                return i18nNodes;
              };

              createLazyProperty(i18nNodesByMsgId, msgId, valueFn);
            });

            if (errors.length) {
              throw new Error("xtb parse errors:\n".concat(errors.join('\n')));
            }

            return {
              locale: locale,
              i18nNodesByMsgId: i18nNodesByMsgId
            };
          }
        }, {
          key: "digest",
          value: function digest(message) {
            return digest$1(message);
          }
        }, {
          key: "createNameMapper",
          value: function createNameMapper(message) {
            return new SimplePlaceholderMapper(message, toPublicName);
          }
        }]);

        return Xtb;
      }(Serializer);

      function createLazyProperty(messages, id, valueFn) {
        Object.defineProperty(messages, id, {
          configurable: true,
          enumerable: true,
          get: function get() {
            var value = valueFn();
            Object.defineProperty(messages, id, {
              enumerable: true,
              value: value
            });
            return value;
          },
          set: function set(_) {
            throw new Error('Could not overwrite an XTB translation');
          }
        });
      } // Extract messages as xml nodes from the xtb file


      var XtbParser = /*#__PURE__*/function () {
        function XtbParser() {
          _classCallCheck(this, XtbParser);

          this._locale = null;
        }

        _createClass(XtbParser, [{
          key: "parse",
          value: function parse(xtb, url) {
            this._bundleDepth = 0;
            this._msgIdToHtml = {}; // We can not parse the ICU messages at this point as some messages might not originate
            // from Angular that could not be lex'd.

            var xml = new XmlParser().parse(xtb, url);
            this._errors = xml.errors;
            visitAll$1(this, xml.rootNodes);
            return {
              msgIdToHtml: this._msgIdToHtml,
              errors: this._errors,
              locale: this._locale
            };
          }
        }, {
          key: "visitElement",
          value: function visitElement(element, context) {
            switch (element.name) {
              case _TRANSLATIONS_TAG:
                this._bundleDepth++;

                if (this._bundleDepth > 1) {
                  this._addError(element, "<".concat(_TRANSLATIONS_TAG, "> elements can not be nested"));
                }

                var langAttr = element.attrs.find(function (attr) {
                  return attr.name === 'lang';
                });

                if (langAttr) {
                  this._locale = langAttr.value;
                }

                visitAll$1(this, element.children, null);
                this._bundleDepth--;
                break;

              case _TRANSLATION_TAG:
                var idAttr = element.attrs.find(function (attr) {
                  return attr.name === 'id';
                });

                if (!idAttr) {
                  this._addError(element, "<".concat(_TRANSLATION_TAG, "> misses the \"id\" attribute"));
                } else {
                  var id = idAttr.value;

                  if (this._msgIdToHtml.hasOwnProperty(id)) {
                    this._addError(element, "Duplicated translations for msg ".concat(id));
                  } else {
                    var innerTextStart = element.startSourceSpan.end.offset;
                    var innerTextEnd = element.endSourceSpan.start.offset;
                    var content = element.startSourceSpan.start.file.content;
                    var innerText = content.slice(innerTextStart, innerTextEnd);
                    this._msgIdToHtml[id] = innerText;
                  }
                }

                break;

              default:
                this._addError(element, 'Unexpected tag');

            }
          }
        }, {
          key: "visitAttribute",
          value: function visitAttribute(attribute, context) {}
        }, {
          key: "visitText",
          value: function visitText(text, context) {}
        }, {
          key: "visitComment",
          value: function visitComment(comment, context) {}
        }, {
          key: "visitExpansion",
          value: function visitExpansion(expansion, context) {}
        }, {
          key: "visitExpansionCase",
          value: function visitExpansionCase(expansionCase, context) {}
        }, {
          key: "_addError",
          value: function _addError(node, message) {
            this._errors.push(new I18nError(node.sourceSpan, message));
          }
        }]);

        return XtbParser;
      }(); // Convert ml nodes (xtb syntax) to i18n nodes


      var XmlToI18n$2 = /*#__PURE__*/function () {
        function XmlToI18n$2() {
          _classCallCheck(this, XmlToI18n$2);
        }

        _createClass(XmlToI18n$2, [{
          key: "convert",
          value: function convert(message, url) {
            var xmlIcu = new XmlParser().parse(message, url, {
              tokenizeExpansionForms: true
            });
            this._errors = xmlIcu.errors;
            var i18nNodes = this._errors.length > 0 || xmlIcu.rootNodes.length == 0 ? [] : visitAll$1(this, xmlIcu.rootNodes);
            return {
              i18nNodes: i18nNodes,
              errors: this._errors
            };
          }
        }, {
          key: "visitText",
          value: function visitText(text, context) {
            return new Text$1(text.value, text.sourceSpan);
          }
        }, {
          key: "visitExpansion",
          value: function visitExpansion(icu, context) {
            var caseMap = {};
            visitAll$1(this, icu.cases).forEach(function (c) {
              caseMap[c.value] = new Container(c.nodes, icu.sourceSpan);
            });
            return new Icu$1(icu.switchValue, icu.type, caseMap, icu.sourceSpan);
          }
        }, {
          key: "visitExpansionCase",
          value: function visitExpansionCase(icuCase, context) {
            return {
              value: icuCase.value,
              nodes: visitAll$1(this, icuCase.expression)
            };
          }
        }, {
          key: "visitElement",
          value: function visitElement(el, context) {
            if (el.name === _PLACEHOLDER_TAG$3) {
              var nameAttr = el.attrs.find(function (attr) {
                return attr.name === 'name';
              });

              if (nameAttr) {
                return new Placeholder('', nameAttr.value, el.sourceSpan);
              }

              this._addError(el, "<".concat(_PLACEHOLDER_TAG$3, "> misses the \"name\" attribute"));
            } else {
              this._addError(el, "Unexpected tag");
            }

            return null;
          }
        }, {
          key: "visitComment",
          value: function visitComment(comment, context) {}
        }, {
          key: "visitAttribute",
          value: function visitAttribute(attribute, context) {}
        }, {
          key: "_addError",
          value: function _addError(node, message) {
            this._errors.push(new I18nError(node.sourceSpan, message));
          }
        }]);

        return XmlToI18n$2;
      }();
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * A container for translated messages
       */


      var TranslationBundle = /*#__PURE__*/function () {
        function TranslationBundle() {
          var _i18nNodesByMsgId = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

          var locale = arguments.length > 1 ? arguments[1] : undefined;
          var digest = arguments.length > 2 ? arguments[2] : undefined;
          var mapperFactory = arguments.length > 3 ? arguments[3] : undefined;
          var missingTranslationStrategy = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : MissingTranslationStrategy.Warning;
          var console = arguments.length > 5 ? arguments[5] : undefined;

          _classCallCheck(this, TranslationBundle);

          this._i18nNodesByMsgId = _i18nNodesByMsgId;
          this.digest = digest;
          this.mapperFactory = mapperFactory;
          this._i18nToHtml = new I18nToHtmlVisitor(_i18nNodesByMsgId, locale, digest, mapperFactory, missingTranslationStrategy, console);
        } // Creates a `TranslationBundle` by parsing the given `content` with the `serializer`.


        _createClass(TranslationBundle, [{
          key: "get",
          value: // Returns the translation as HTML nodes from the given source message.
          function get(srcMsg) {
            var html = this._i18nToHtml.convert(srcMsg);

            if (html.errors.length) {
              throw new Error(html.errors.join('\n'));
            }

            return html.nodes;
          }
        }, {
          key: "has",
          value: function has(srcMsg) {
            return this.digest(srcMsg) in this._i18nNodesByMsgId;
          }
        }], [{
          key: "load",
          value: function load(content, url, serializer, missingTranslationStrategy, console) {
            var _serializer$load = serializer.load(content, url),
                locale = _serializer$load.locale,
                i18nNodesByMsgId = _serializer$load.i18nNodesByMsgId;

            var digestFn = function digestFn(m) {
              return serializer.digest(m);
            };

            var mapperFactory = function mapperFactory(m) {
              return serializer.createNameMapper(m);
            };

            return new TranslationBundle(i18nNodesByMsgId, locale, digestFn, mapperFactory, missingTranslationStrategy, console);
          }
        }]);

        return TranslationBundle;
      }();

      var I18nToHtmlVisitor = /*#__PURE__*/function () {
        function I18nToHtmlVisitor() {
          var _i18nNodesByMsgId = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

          var _locale = arguments.length > 1 ? arguments[1] : undefined;

          var _digest = arguments.length > 2 ? arguments[2] : undefined;

          var _mapperFactory = arguments.length > 3 ? arguments[3] : undefined;

          var _missingTranslationStrategy = arguments.length > 4 ? arguments[4] : undefined;

          var _console = arguments.length > 5 ? arguments[5] : undefined;

          _classCallCheck(this, I18nToHtmlVisitor);

          this._i18nNodesByMsgId = _i18nNodesByMsgId;
          this._locale = _locale;
          this._digest = _digest;
          this._mapperFactory = _mapperFactory;
          this._missingTranslationStrategy = _missingTranslationStrategy;
          this._console = _console;
          this._contextStack = [];
          this._errors = [];
        }

        _createClass(I18nToHtmlVisitor, [{
          key: "convert",
          value: function convert(srcMsg) {
            this._contextStack.length = 0;
            this._errors.length = 0; // i18n to text

            var text = this._convertToText(srcMsg); // text to html


            var url = srcMsg.nodes[0].sourceSpan.start.file.url;
            var html = new HtmlParser().parse(text, url, {
              tokenizeExpansionForms: true
            });
            return {
              nodes: html.rootNodes,
              errors: [].concat(_toConsumableArray(this._errors), _toConsumableArray(html.errors))
            };
          }
        }, {
          key: "visitText",
          value: function visitText(text, context) {
            // `convert()` uses an `HtmlParser` to return `html.Node`s
            // we should then make sure that any special characters are escaped
            return escapeXml(text.value);
          }
        }, {
          key: "visitContainer",
          value: function visitContainer(container, context) {
            var _this217 = this;

            return container.children.map(function (n) {
              return n.visit(_this217);
            }).join('');
          }
        }, {
          key: "visitIcu",
          value: function visitIcu(icu, context) {
            var _this218 = this;

            var cases = Object.keys(icu.cases).map(function (k) {
              return "".concat(k, " {").concat(icu.cases[k].visit(_this218), "}");
            }); // TODO(vicb): Once all format switch to using expression placeholders
            // we should throw when the placeholder is not in the source message

            var exp = this._srcMsg.placeholders.hasOwnProperty(icu.expression) ? this._srcMsg.placeholders[icu.expression].text : icu.expression;
            return "{".concat(exp, ", ").concat(icu.type, ", ").concat(cases.join(' '), "}");
          }
        }, {
          key: "visitPlaceholder",
          value: function visitPlaceholder(ph, context) {
            var phName = this._mapper(ph.name);

            if (this._srcMsg.placeholders.hasOwnProperty(phName)) {
              return this._srcMsg.placeholders[phName].text;
            }

            if (this._srcMsg.placeholderToMessage.hasOwnProperty(phName)) {
              return this._convertToText(this._srcMsg.placeholderToMessage[phName]);
            }

            this._addError(ph, "Unknown placeholder \"".concat(ph.name, "\""));

            return '';
          } // Loaded message contains only placeholders (vs tag and icu placeholders).
          // However when a translation can not be found, we need to serialize the source message
          // which can contain tag placeholders

        }, {
          key: "visitTagPlaceholder",
          value: function visitTagPlaceholder(ph, context) {
            var _this219 = this;

            var tag = "".concat(ph.tag);
            var attrs = Object.keys(ph.attrs).map(function (name) {
              return "".concat(name, "=\"").concat(ph.attrs[name], "\"");
            }).join(' ');

            if (ph.isVoid) {
              return "<".concat(tag, " ").concat(attrs, "/>");
            }

            var children = ph.children.map(function (c) {
              return c.visit(_this219);
            }).join('');
            return "<".concat(tag, " ").concat(attrs, ">").concat(children, "</").concat(tag, ">");
          } // Loaded message contains only placeholders (vs tag and icu placeholders).
          // However when a translation can not be found, we need to serialize the source message
          // which can contain tag placeholders

        }, {
          key: "visitIcuPlaceholder",
          value: function visitIcuPlaceholder(ph, context) {
            // An ICU placeholder references the source message to be serialized
            return this._convertToText(this._srcMsg.placeholderToMessage[ph.name]);
          }
          /**
           * Convert a source message to a translated text string:
           * - text nodes are replaced with their translation,
           * - placeholders are replaced with their content,
           * - ICU nodes are converted to ICU expressions.
           */

        }, {
          key: "_convertToText",
          value: function _convertToText(srcMsg) {
            var _this220 = this;

            var id = this._digest(srcMsg);

            var mapper = this._mapperFactory ? this._mapperFactory(srcMsg) : null;
            var nodes;

            this._contextStack.push({
              msg: this._srcMsg,
              mapper: this._mapper
            });

            this._srcMsg = srcMsg;

            if (this._i18nNodesByMsgId.hasOwnProperty(id)) {
              // When there is a translation use its nodes as the source
              // And create a mapper to convert serialized placeholder names to internal names
              nodes = this._i18nNodesByMsgId[id];

              this._mapper = function (name) {
                return mapper ? mapper.toInternalName(name) : name;
              };
            } else {
              // When no translation has been found
              // - report an error / a warning / nothing,
              // - use the nodes from the original message
              // - placeholders are already internal and need no mapper
              if (this._missingTranslationStrategy === MissingTranslationStrategy.Error) {
                var ctx = this._locale ? " for locale \"".concat(this._locale, "\"") : '';

                this._addError(srcMsg.nodes[0], "Missing translation for message \"".concat(id, "\"").concat(ctx));
              } else if (this._console && this._missingTranslationStrategy === MissingTranslationStrategy.Warning) {
                var _ctx2 = this._locale ? " for locale \"".concat(this._locale, "\"") : '';

                this._console.warn("Missing translation for message \"".concat(id, "\"").concat(_ctx2));
              }

              nodes = srcMsg.nodes;

              this._mapper = function (name) {
                return name;
              };
            }

            var text = nodes.map(function (node) {
              return node.visit(_this220);
            }).join('');

            var context = this._contextStack.pop();

            this._srcMsg = context.msg;
            this._mapper = context.mapper;
            return text;
          }
        }, {
          key: "_addError",
          value: function _addError(el, msg) {
            this._errors.push(new I18nError(el.sourceSpan, msg));
          }
        }]);

        return I18nToHtmlVisitor;
      }();
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      var I18NHtmlParser = /*#__PURE__*/function () {
        function I18NHtmlParser(_htmlParser, translations, translationsFormat) {
          var missingTranslation = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : MissingTranslationStrategy.Warning;
          var console = arguments.length > 4 ? arguments[4] : undefined;

          _classCallCheck(this, I18NHtmlParser);

          this._htmlParser = _htmlParser;

          if (translations) {
            var _serializer = createSerializer(translationsFormat);

            this._translationBundle = TranslationBundle.load(translations, 'i18n', _serializer, missingTranslation, console);
          } else {
            this._translationBundle = new TranslationBundle({}, null, _digest2, undefined, missingTranslation, console);
          }
        }

        _createClass(I18NHtmlParser, [{
          key: "parse",
          value: function parse(source, url) {
            var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
            var interpolationConfig = options.interpolationConfig || DEFAULT_INTERPOLATION_CONFIG;

            var parseResult = this._htmlParser.parse(source, url, Object.assign({
              interpolationConfig: interpolationConfig
            }, options));

            if (parseResult.errors.length) {
              return new ParseTreeResult(parseResult.rootNodes, parseResult.errors);
            }

            return mergeTranslations(parseResult.rootNodes, this._translationBundle, interpolationConfig, [], {});
          }
        }]);

        return I18NHtmlParser;
      }();

      function createSerializer(format) {
        format = (format || 'xlf').toLowerCase();

        switch (format) {
          case 'xmb':
            return new Xmb();

          case 'xtb':
            return new Xtb();

          case 'xliff2':
          case 'xlf2':
            return new Xliff2();

          case 'xliff':
          case 'xlf':
          default:
            return new Xliff();
        }
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      var QUOTED_KEYS = '$quoted$';

      function convertValueToOutputAst(ctx, value) {
        var type = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
        return visitValue(value, new _ValueOutputAstTransformer(ctx), type);
      }

      var _ValueOutputAstTransformer = /*#__PURE__*/function () {
        function _ValueOutputAstTransformer(ctx) {
          _classCallCheck(this, _ValueOutputAstTransformer);

          this.ctx = ctx;
        }

        _createClass(_ValueOutputAstTransformer, [{
          key: "visitArray",
          value: function visitArray(arr, type) {
            var values = []; // Note Array.map() must not be used to convert the values because it will
            // skip over empty elements in arrays constructed using `new Array(length)`,
            // resulting in `undefined` elements. This breaks the type guarantee that
            // all values in `o.LiteralArrayExpr` are of type `o.Expression`.
            // See test case in `value_util_spec.ts`.

            for (var i = 0; i < arr.length; ++i) {
              values.push(visitValue(arr[i], this, null
              /* context */
              ));
            }

            return literalArr(values, type);
          }
        }, {
          key: "visitStringMap",
          value: function visitStringMap(map, type) {
            var _this221 = this;

            var entries = [];
            var quotedSet = new Set(map && map[QUOTED_KEYS]);
            Object.keys(map).forEach(function (key) {
              entries.push(new LiteralMapEntry(key, visitValue(map[key], _this221, null), quotedSet.has(key)));
            });
            return new LiteralMapExpr(entries, type);
          }
        }, {
          key: "visitPrimitive",
          value: function visitPrimitive(value, type) {
            return literal(value, type);
          }
        }, {
          key: "visitOther",
          value: function visitOther(value, type) {
            if (value instanceof Expression) {
              return value;
            } else {
              return this.ctx.importExpr(value);
            }
          }
        }]);

        return _ValueOutputAstTransformer;
      }();
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      function mapEntry$1(key, value) {
        return {
          key: key,
          value: value,
          quoted: false
        };
      }

      var InjectableCompiler = /*#__PURE__*/function () {
        function InjectableCompiler(reflector, alwaysGenerateDef) {
          _classCallCheck(this, InjectableCompiler);

          this.reflector = reflector;
          this.alwaysGenerateDef = alwaysGenerateDef;
          this.tokenInjector = reflector.resolveExternalReference(Identifiers.Injector);
        }

        _createClass(InjectableCompiler, [{
          key: "depsArray",
          value: function depsArray(deps, ctx) {
            var _this222 = this;

            return deps.map(function (dep) {
              var token = dep;
              var args = [token];
              var flags = 0
              /* Default */
              ;

              if (Array.isArray(dep)) {
                for (var i = 0; i < dep.length; i++) {
                  var v = dep[i];

                  if (v) {
                    if (v.ngMetadataName === 'Optional') {
                      flags |= 8
                      /* Optional */
                      ;
                    } else if (v.ngMetadataName === 'SkipSelf') {
                      flags |= 4
                      /* SkipSelf */
                      ;
                    } else if (v.ngMetadataName === 'Self') {
                      flags |= 2
                      /* Self */
                      ;
                    } else if (v.ngMetadataName === 'Inject') {
                      token = v.token;
                    } else {
                      token = v;
                    }
                  }
                }
              }

              var tokenExpr;

              if (typeof token === 'string') {
                tokenExpr = literal(token);
              } else if (token === _this222.tokenInjector) {
                tokenExpr = importExpr(Identifiers.INJECTOR);
              } else {
                tokenExpr = ctx.importExpr(token);
              }

              if (flags !== 0
              /* Default */
              ) {
                  args = [tokenExpr, literal(flags)];
                } else {
                args = [tokenExpr];
              }

              return importExpr(Identifiers.inject).callFn(args);
            });
          }
        }, {
          key: "factoryFor",
          value: function factoryFor(injectable, ctx) {
            var retValue;

            if (injectable.useExisting) {
              retValue = importExpr(Identifiers.inject).callFn([ctx.importExpr(injectable.useExisting)]);
            } else if (injectable.useFactory) {
              var deps = injectable.deps || [];

              if (deps.length > 0) {
                retValue = ctx.importExpr(injectable.useFactory).callFn(this.depsArray(deps, ctx));
              } else {
                return ctx.importExpr(injectable.useFactory);
              }
            } else if (injectable.useValue) {
              retValue = convertValueToOutputAst(ctx, injectable.useValue);
            } else {
              var clazz = injectable.useClass || injectable.symbol;
              var depArgs = this.depsArray(this.reflector.parameters(clazz), ctx);
              retValue = new InstantiateExpr(ctx.importExpr(clazz), depArgs);
            }

            return fn([], [new ReturnStatement(retValue)], undefined, undefined, injectable.symbol.name + '_Factory');
          }
        }, {
          key: "injectableDef",
          value: function injectableDef(injectable, ctx) {
            var providedIn = NULL_EXPR;

            if (injectable.providedIn !== undefined) {
              if (injectable.providedIn === null) {
                providedIn = NULL_EXPR;
              } else if (typeof injectable.providedIn === 'string') {
                providedIn = literal(injectable.providedIn);
              } else {
                providedIn = ctx.importExpr(injectable.providedIn);
              }
            }

            var def = [mapEntry$1('factory', this.factoryFor(injectable, ctx)), mapEntry$1('token', ctx.importExpr(injectable.type.reference)), mapEntry$1('providedIn', providedIn)];
            return importExpr(Identifiers.ɵɵdefineInjectable).callFn([literalMap(def)]);
          }
        }, {
          key: "compile",
          value: function compile(injectable, ctx) {
            if (this.alwaysGenerateDef || injectable.providedIn !== undefined) {
              var className = identifierName(injectable.type);
              var clazz = new ClassStmt(className, null, [new ClassField('ɵprov', INFERRED_TYPE, [StmtModifier.Static], this.injectableDef(injectable, ctx))], [], new ClassMethod(null, [], []), []);
              ctx.statements.push(clazz);
            }
          }
        }]);

        return InjectableCompiler;
      }();
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      var STRIP_SRC_FILE_SUFFIXES = /(\.ts|\.d\.ts|\.js|\.jsx|\.tsx)$/;
      var GENERATED_FILE = /\.ngfactory\.|\.ngsummary\./;
      var JIT_SUMMARY_FILE = /\.ngsummary\./;
      var JIT_SUMMARY_NAME = /NgSummary$/;

      function ngfactoryFilePath(filePath) {
        var forceSourceFile = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
        var urlWithSuffix = splitTypescriptSuffix(filePath, forceSourceFile);
        return "".concat(urlWithSuffix[0], ".ngfactory").concat(normalizeGenFileSuffix(urlWithSuffix[1]));
      }

      function stripGeneratedFileSuffix(filePath) {
        return filePath.replace(GENERATED_FILE, '.');
      }

      function isGeneratedFile(filePath) {
        return GENERATED_FILE.test(filePath);
      }

      function splitTypescriptSuffix(path) {
        var forceSourceFile = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

        if (path.endsWith('.d.ts')) {
          return [path.slice(0, -5), forceSourceFile ? '.ts' : '.d.ts'];
        }

        var lastDot = path.lastIndexOf('.');

        if (lastDot !== -1) {
          return [path.substring(0, lastDot), path.substring(lastDot)];
        }

        return [path, ''];
      }

      function normalizeGenFileSuffix(srcFileSuffix) {
        return srcFileSuffix === '.tsx' ? '.ts' : srcFileSuffix;
      }

      function summaryFileName(fileName) {
        var fileNameWithoutSuffix = fileName.replace(STRIP_SRC_FILE_SUFFIXES, '');
        return "".concat(fileNameWithoutSuffix, ".ngsummary.json");
      }

      function summaryForJitFileName(fileName) {
        var forceSourceFile = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
        var urlWithSuffix = splitTypescriptSuffix(stripGeneratedFileSuffix(fileName), forceSourceFile);
        return "".concat(urlWithSuffix[0], ".ngsummary").concat(urlWithSuffix[1]);
      }

      function stripSummaryForJitFileSuffix(filePath) {
        return filePath.replace(JIT_SUMMARY_FILE, '.');
      }

      function summaryForJitName(symbolName) {
        return "".concat(symbolName, "NgSummary");
      }

      function stripSummaryForJitNameSuffix(symbolName) {
        return symbolName.replace(JIT_SUMMARY_NAME, '');
      }

      var LOWERED_SYMBOL = /\u0275\d+/;

      function isLoweredSymbol(name) {
        return LOWERED_SYMBOL.test(name);
      }

      function createLoweredSymbol(id) {
        return "\u0275".concat(id);
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      var LifecycleHooks;

      (function (LifecycleHooks) {
        LifecycleHooks[LifecycleHooks["OnInit"] = 0] = "OnInit";
        LifecycleHooks[LifecycleHooks["OnDestroy"] = 1] = "OnDestroy";
        LifecycleHooks[LifecycleHooks["DoCheck"] = 2] = "DoCheck";
        LifecycleHooks[LifecycleHooks["OnChanges"] = 3] = "OnChanges";
        LifecycleHooks[LifecycleHooks["AfterContentInit"] = 4] = "AfterContentInit";
        LifecycleHooks[LifecycleHooks["AfterContentChecked"] = 5] = "AfterContentChecked";
        LifecycleHooks[LifecycleHooks["AfterViewInit"] = 6] = "AfterViewInit";
        LifecycleHooks[LifecycleHooks["AfterViewChecked"] = 7] = "AfterViewChecked";
      })(LifecycleHooks || (LifecycleHooks = {}));

      var LIFECYCLE_HOOKS_VALUES = [LifecycleHooks.OnInit, LifecycleHooks.OnDestroy, LifecycleHooks.DoCheck, LifecycleHooks.OnChanges, LifecycleHooks.AfterContentInit, LifecycleHooks.AfterContentChecked, LifecycleHooks.AfterViewInit, LifecycleHooks.AfterViewChecked];

      function hasLifecycleHook(reflector, hook, token) {
        return reflector.hasLifecycleHook(token, getHookName(hook));
      }

      function getAllLifecycleHooks(reflector, token) {
        return LIFECYCLE_HOOKS_VALUES.filter(function (hook) {
          return hasLifecycleHook(reflector, hook, token);
        });
      }

      function getHookName(hook) {
        switch (hook) {
          case LifecycleHooks.OnInit:
            return 'ngOnInit';

          case LifecycleHooks.OnDestroy:
            return 'ngOnDestroy';

          case LifecycleHooks.DoCheck:
            return 'ngDoCheck';

          case LifecycleHooks.OnChanges:
            return 'ngOnChanges';

          case LifecycleHooks.AfterContentInit:
            return 'ngAfterContentInit';

          case LifecycleHooks.AfterContentChecked:
            return 'ngAfterContentChecked';

          case LifecycleHooks.AfterViewInit:
            return 'ngAfterViewInit';

          case LifecycleHooks.AfterViewChecked:
            return 'ngAfterViewChecked';

          default:
            // This default case is not needed by TypeScript compiler, as the switch is exhaustive.
            // However Closure Compiler does not understand that and reports an error in typed mode.
            // The `throw new Error` below works around the problem, and the unexpected: never variable
            // makes sure tsc still checks this code is unreachable.
            var unexpected = hook;
            throw new Error("unexpected ".concat(unexpected));
        }
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      var ERROR_COMPONENT_TYPE = 'ngComponentType'; // Design notes:
      // - don't lazily create metadata:
      //   For some metadata, we need to do async work sometimes,
      //   so the user has to kick off this loading.
      //   But we want to report errors even when the async work is
      //   not required to check that the user would have been able
      //   to wait correctly.

      var CompileMetadataResolver = /*#__PURE__*/function () {
        function CompileMetadataResolver(_config, _htmlParser, _ngModuleResolver, _directiveResolver, _pipeResolver, _summaryResolver, _schemaRegistry, _directiveNormalizer, _console, _staticSymbolCache, _reflector, _errorCollector) {
          _classCallCheck(this, CompileMetadataResolver);

          this._config = _config;
          this._htmlParser = _htmlParser;
          this._ngModuleResolver = _ngModuleResolver;
          this._directiveResolver = _directiveResolver;
          this._pipeResolver = _pipeResolver;
          this._summaryResolver = _summaryResolver;
          this._schemaRegistry = _schemaRegistry;
          this._directiveNormalizer = _directiveNormalizer;
          this._console = _console;
          this._staticSymbolCache = _staticSymbolCache;
          this._reflector = _reflector;
          this._errorCollector = _errorCollector;
          this._nonNormalizedDirectiveCache = new Map();
          this._directiveCache = new Map();
          this._summaryCache = new Map();
          this._pipeCache = new Map();
          this._ngModuleCache = new Map();
          this._ngModuleOfTypes = new Map();
          this._shallowModuleCache = new Map();
        }

        _createClass(CompileMetadataResolver, [{
          key: "getReflector",
          value: function getReflector() {
            return this._reflector;
          }
        }, {
          key: "clearCacheFor",
          value: function clearCacheFor(type) {
            var dirMeta = this._directiveCache.get(type);

            this._directiveCache["delete"](type);

            this._nonNormalizedDirectiveCache["delete"](type);

            this._summaryCache["delete"](type);

            this._pipeCache["delete"](type);

            this._ngModuleOfTypes["delete"](type); // Clear all of the NgModule as they contain transitive information!


            this._ngModuleCache.clear();

            if (dirMeta) {
              this._directiveNormalizer.clearCacheFor(dirMeta);
            }
          }
        }, {
          key: "clearCache",
          value: function clearCache() {
            this._directiveCache.clear();

            this._nonNormalizedDirectiveCache.clear();

            this._summaryCache.clear();

            this._pipeCache.clear();

            this._ngModuleCache.clear();

            this._ngModuleOfTypes.clear();

            this._directiveNormalizer.clearCache();
          }
        }, {
          key: "_createProxyClass",
          value: function _createProxyClass(baseType, name) {
            var delegate = null;

            var proxyClass = function proxyClass() {
              if (!delegate) {
                throw new Error("Illegal state: Class ".concat(name, " for type ").concat(stringify(baseType), " is not compiled yet!"));
              }

              return delegate.apply(this, arguments);
            };

            proxyClass.setDelegate = function (d) {
              delegate = d;
              proxyClass.prototype = d.prototype;
            }; // Make stringify work correctly


            proxyClass.overriddenName = name;
            return proxyClass;
          }
        }, {
          key: "getGeneratedClass",
          value: function getGeneratedClass(dirType, name) {
            if (dirType instanceof StaticSymbol) {
              return this._staticSymbolCache.get(ngfactoryFilePath(dirType.filePath), name);
            } else {
              return this._createProxyClass(dirType, name);
            }
          }
        }, {
          key: "getComponentViewClass",
          value: function getComponentViewClass(dirType) {
            return this.getGeneratedClass(dirType, viewClassName(dirType, 0));
          }
        }, {
          key: "getHostComponentViewClass",
          value: function getHostComponentViewClass(dirType) {
            return this.getGeneratedClass(dirType, hostViewClassName(dirType));
          }
        }, {
          key: "getHostComponentType",
          value: function getHostComponentType(dirType) {
            var name = "".concat(identifierName({
              reference: dirType
            }), "_Host");

            if (dirType instanceof StaticSymbol) {
              return this._staticSymbolCache.get(dirType.filePath, name);
            }

            return this._createProxyClass(dirType, name);
          }
        }, {
          key: "getRendererType",
          value: function getRendererType(dirType) {
            if (dirType instanceof StaticSymbol) {
              return this._staticSymbolCache.get(ngfactoryFilePath(dirType.filePath), rendererTypeName(dirType));
            } else {
              // returning an object as proxy,
              // that we fill later during runtime compilation.
              return {};
            }
          }
        }, {
          key: "getComponentFactory",
          value: function getComponentFactory(selector, dirType, inputs, outputs) {
            if (dirType instanceof StaticSymbol) {
              return this._staticSymbolCache.get(ngfactoryFilePath(dirType.filePath), componentFactoryName(dirType));
            } else {
              var hostView = this.getHostComponentViewClass(dirType); // Note: ngContentSelectors will be filled later once the template is
              // loaded.

              var createComponentFactory = this._reflector.resolveExternalReference(Identifiers.createComponentFactory);

              return createComponentFactory(selector, dirType, hostView, inputs, outputs, []);
            }
          }
        }, {
          key: "initComponentFactory",
          value: function initComponentFactory(factory, ngContentSelectors) {
            if (!(factory instanceof StaticSymbol)) {
              var _factory$ngContentSel;

              (_factory$ngContentSel = factory.ngContentSelectors).push.apply(_factory$ngContentSel, _toConsumableArray(ngContentSelectors));
            }
          }
        }, {
          key: "_loadSummary",
          value: function _loadSummary(type, kind) {
            var typeSummary = this._summaryCache.get(type);

            if (!typeSummary) {
              var summary = this._summaryResolver.resolveSummary(type);

              typeSummary = summary ? summary.type : null;

              this._summaryCache.set(type, typeSummary || null);
            }

            return typeSummary && typeSummary.summaryKind === kind ? typeSummary : null;
          }
        }, {
          key: "getHostComponentMetadata",
          value: function getHostComponentMetadata(compMeta, hostViewType) {
            var hostType = this.getHostComponentType(compMeta.type.reference);

            if (!hostViewType) {
              hostViewType = this.getHostComponentViewClass(hostType);
            } // Note: ! is ok here as this method should only be called with normalized directive
            // metadata, which always fills in the selector.


            var template = CssSelector.parse(compMeta.selector)[0].getMatchingElementTemplate();
            var templateUrl = '';

            var htmlAst = this._htmlParser.parse(template, templateUrl);

            return CompileDirectiveMetadata.create({
              isHost: true,
              type: {
                reference: hostType,
                diDeps: [],
                lifecycleHooks: []
              },
              template: new CompileTemplateMetadata({
                encapsulation: ViewEncapsulation.None,
                template: template,
                templateUrl: templateUrl,
                htmlAst: htmlAst,
                styles: [],
                styleUrls: [],
                ngContentSelectors: [],
                animations: [],
                isInline: true,
                externalStylesheets: [],
                interpolation: null,
                preserveWhitespaces: false
              }),
              exportAs: null,
              changeDetection: ChangeDetectionStrategy.Default,
              inputs: [],
              outputs: [],
              host: {},
              isComponent: true,
              selector: '*',
              providers: [],
              viewProviders: [],
              queries: [],
              guards: {},
              viewQueries: [],
              componentViewType: hostViewType,
              rendererType: {
                id: '__Host__',
                encapsulation: ViewEncapsulation.None,
                styles: [],
                data: {}
              },
              entryComponents: [],
              componentFactory: null
            });
          }
        }, {
          key: "loadDirectiveMetadata",
          value: function loadDirectiveMetadata(ngModuleType, directiveType, isSync) {
            var _this223 = this;

            if (this._directiveCache.has(directiveType)) {
              return null;
            }

            directiveType = resolveForwardRef(directiveType);

            var _this$getNonNormalize = this.getNonNormalizedDirectiveMetadata(directiveType),
                annotation = _this$getNonNormalize.annotation,
                metadata = _this$getNonNormalize.metadata;

            var createDirectiveMetadata = function createDirectiveMetadata(templateMetadata) {
              var normalizedDirMeta = new CompileDirectiveMetadata({
                isHost: false,
                type: metadata.type,
                isComponent: metadata.isComponent,
                selector: metadata.selector,
                exportAs: metadata.exportAs,
                changeDetection: metadata.changeDetection,
                inputs: metadata.inputs,
                outputs: metadata.outputs,
                hostListeners: metadata.hostListeners,
                hostProperties: metadata.hostProperties,
                hostAttributes: metadata.hostAttributes,
                providers: metadata.providers,
                viewProviders: metadata.viewProviders,
                queries: metadata.queries,
                guards: metadata.guards,
                viewQueries: metadata.viewQueries,
                entryComponents: metadata.entryComponents,
                componentViewType: metadata.componentViewType,
                rendererType: metadata.rendererType,
                componentFactory: metadata.componentFactory,
                template: templateMetadata
              });

              if (templateMetadata) {
                _this223.initComponentFactory(metadata.componentFactory, templateMetadata.ngContentSelectors);
              }

              _this223._directiveCache.set(directiveType, normalizedDirMeta);

              _this223._summaryCache.set(directiveType, normalizedDirMeta.toSummary());

              return null;
            };

            if (metadata.isComponent) {
              var template = metadata.template;

              var templateMeta = this._directiveNormalizer.normalizeTemplate({
                ngModuleType: ngModuleType,
                componentType: directiveType,
                moduleUrl: this._reflector.componentModuleUrl(directiveType, annotation),
                encapsulation: template.encapsulation,
                template: template.template,
                templateUrl: template.templateUrl,
                styles: template.styles,
                styleUrls: template.styleUrls,
                animations: template.animations,
                interpolation: template.interpolation,
                preserveWhitespaces: template.preserveWhitespaces
              });

              if (isPromise(templateMeta) && isSync) {
                this._reportError(componentStillLoadingError(directiveType), directiveType);

                return null;
              }

              return SyncAsync.then(templateMeta, createDirectiveMetadata);
            } else {
              // directive
              createDirectiveMetadata(null);
              return null;
            }
          }
        }, {
          key: "getNonNormalizedDirectiveMetadata",
          value: function getNonNormalizedDirectiveMetadata(directiveType) {
            var _this224 = this;

            directiveType = resolveForwardRef(directiveType);

            if (!directiveType) {
              return null;
            }

            var cacheEntry = this._nonNormalizedDirectiveCache.get(directiveType);

            if (cacheEntry) {
              return cacheEntry;
            }

            var dirMeta = this._directiveResolver.resolve(directiveType, false);

            if (!dirMeta) {
              return null;
            }

            var nonNormalizedTemplateMetadata = undefined;

            if (createComponent.isTypeOf(dirMeta)) {
              // component
              var compMeta = dirMeta;
              assertArrayOfStrings('styles', compMeta.styles);
              assertArrayOfStrings('styleUrls', compMeta.styleUrls);
              assertInterpolationSymbols('interpolation', compMeta.interpolation);
              var animations = compMeta.animations;
              nonNormalizedTemplateMetadata = new CompileTemplateMetadata({
                encapsulation: noUndefined(compMeta.encapsulation),
                template: noUndefined(compMeta.template),
                templateUrl: noUndefined(compMeta.templateUrl),
                htmlAst: null,
                styles: compMeta.styles || [],
                styleUrls: compMeta.styleUrls || [],
                animations: animations || [],
                interpolation: noUndefined(compMeta.interpolation),
                isInline: !!compMeta.template,
                externalStylesheets: [],
                ngContentSelectors: [],
                preserveWhitespaces: noUndefined(dirMeta.preserveWhitespaces)
              });
            }

            var changeDetectionStrategy = null;
            var viewProviders = [];
            var entryComponentMetadata = [];
            var selector = dirMeta.selector;

            if (createComponent.isTypeOf(dirMeta)) {
              // Component
              var _compMeta = dirMeta;
              changeDetectionStrategy = _compMeta.changeDetection;

              if (_compMeta.viewProviders) {
                viewProviders = this._getProvidersMetadata(_compMeta.viewProviders, entryComponentMetadata, "viewProviders for \"".concat(stringifyType(directiveType), "\""), [], directiveType);
              }

              if (_compMeta.entryComponents) {
                entryComponentMetadata = flattenAndDedupeArray(_compMeta.entryComponents).map(function (type) {
                  return _this224._getEntryComponentMetadata(type);
                }).concat(entryComponentMetadata);
              }

              if (!selector) {
                selector = this._schemaRegistry.getDefaultComponentElementName();
              }
            } else {
              // Directive
              if (!selector) {
                selector = null;
              }
            }

            var providers = [];

            if (dirMeta.providers != null) {
              providers = this._getProvidersMetadata(dirMeta.providers, entryComponentMetadata, "providers for \"".concat(stringifyType(directiveType), "\""), [], directiveType);
            }

            var queries = [];
            var viewQueries = [];

            if (dirMeta.queries != null) {
              queries = this._getQueriesMetadata(dirMeta.queries, false, directiveType);
              viewQueries = this._getQueriesMetadata(dirMeta.queries, true, directiveType);
            }

            var metadata = CompileDirectiveMetadata.create({
              isHost: false,
              selector: selector,
              exportAs: noUndefined(dirMeta.exportAs),
              isComponent: !!nonNormalizedTemplateMetadata,
              type: this._getTypeMetadata(directiveType),
              template: nonNormalizedTemplateMetadata,
              changeDetection: changeDetectionStrategy,
              inputs: dirMeta.inputs || [],
              outputs: dirMeta.outputs || [],
              host: dirMeta.host || {},
              providers: providers || [],
              viewProviders: viewProviders || [],
              queries: queries || [],
              guards: dirMeta.guards || {},
              viewQueries: viewQueries || [],
              entryComponents: entryComponentMetadata,
              componentViewType: nonNormalizedTemplateMetadata ? this.getComponentViewClass(directiveType) : null,
              rendererType: nonNormalizedTemplateMetadata ? this.getRendererType(directiveType) : null,
              componentFactory: null
            });

            if (nonNormalizedTemplateMetadata) {
              metadata.componentFactory = this.getComponentFactory(selector, directiveType, metadata.inputs, metadata.outputs);
            }

            cacheEntry = {
              metadata: metadata,
              annotation: dirMeta
            };

            this._nonNormalizedDirectiveCache.set(directiveType, cacheEntry);

            return cacheEntry;
          }
          /**
           * Gets the metadata for the given directive.
           * This assumes `loadNgModuleDirectiveAndPipeMetadata` has been called first.
           */

        }, {
          key: "getDirectiveMetadata",
          value: function getDirectiveMetadata(directiveType) {
            var dirMeta = this._directiveCache.get(directiveType);

            if (!dirMeta) {
              this._reportError(syntaxError("Illegal state: getDirectiveMetadata can only be called after loadNgModuleDirectiveAndPipeMetadata for a module that declares it. Directive ".concat(stringifyType(directiveType), ".")), directiveType);
            }

            return dirMeta;
          }
        }, {
          key: "getDirectiveSummary",
          value: function getDirectiveSummary(dirType) {
            var dirSummary = this._loadSummary(dirType, CompileSummaryKind.Directive);

            if (!dirSummary) {
              this._reportError(syntaxError("Illegal state: Could not load the summary for directive ".concat(stringifyType(dirType), ".")), dirType);
            }

            return dirSummary;
          }
        }, {
          key: "isDirective",
          value: function isDirective(type) {
            return !!this._loadSummary(type, CompileSummaryKind.Directive) || this._directiveResolver.isDirective(type);
          }
        }, {
          key: "isAbstractDirective",
          value: function isAbstractDirective(type) {
            var summary = this._loadSummary(type, CompileSummaryKind.Directive);

            if (summary && !summary.isComponent) {
              return !summary.selector;
            }

            var meta = this._directiveResolver.resolve(type, false);

            if (meta && !createComponent.isTypeOf(meta)) {
              return !meta.selector;
            }

            return false;
          }
        }, {
          key: "isPipe",
          value: function isPipe(type) {
            return !!this._loadSummary(type, CompileSummaryKind.Pipe) || this._pipeResolver.isPipe(type);
          }
        }, {
          key: "isNgModule",
          value: function isNgModule(type) {
            return !!this._loadSummary(type, CompileSummaryKind.NgModule) || this._ngModuleResolver.isNgModule(type);
          }
        }, {
          key: "getNgModuleSummary",
          value: function getNgModuleSummary(moduleType) {
            var alreadyCollecting = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

            var moduleSummary = this._loadSummary(moduleType, CompileSummaryKind.NgModule);

            if (!moduleSummary) {
              var moduleMeta = this.getNgModuleMetadata(moduleType, false, alreadyCollecting);
              moduleSummary = moduleMeta ? moduleMeta.toSummary() : null;

              if (moduleSummary) {
                this._summaryCache.set(moduleType, moduleSummary);
              }
            }

            return moduleSummary;
          }
          /**
           * Loads the declared directives and pipes of an NgModule.
           */

        }, {
          key: "loadNgModuleDirectiveAndPipeMetadata",
          value: function loadNgModuleDirectiveAndPipeMetadata(moduleType, isSync) {
            var _this225 = this;

            var throwIfNotFound = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
            var ngModule = this.getNgModuleMetadata(moduleType, throwIfNotFound);
            var loading = [];

            if (ngModule) {
              ngModule.declaredDirectives.forEach(function (id) {
                var promise = _this225.loadDirectiveMetadata(moduleType, id.reference, isSync);

                if (promise) {
                  loading.push(promise);
                }
              });
              ngModule.declaredPipes.forEach(function (id) {
                return _this225._loadPipeMetadata(id.reference);
              });
            }

            return Promise.all(loading);
          }
        }, {
          key: "getShallowModuleMetadata",
          value: function getShallowModuleMetadata(moduleType) {
            var compileMeta = this._shallowModuleCache.get(moduleType);

            if (compileMeta) {
              return compileMeta;
            }

            var ngModuleMeta = findLast(this._reflector.shallowAnnotations(moduleType), createNgModule.isTypeOf);
            compileMeta = {
              type: this._getTypeMetadata(moduleType),
              rawExports: ngModuleMeta.exports,
              rawImports: ngModuleMeta.imports,
              rawProviders: ngModuleMeta.providers
            };

            this._shallowModuleCache.set(moduleType, compileMeta);

            return compileMeta;
          }
        }, {
          key: "getNgModuleMetadata",
          value: function getNgModuleMetadata(moduleType) {
            var _this226 = this;

            var throwIfNotFound = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
            var alreadyCollecting = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
            moduleType = resolveForwardRef(moduleType);

            var compileMeta = this._ngModuleCache.get(moduleType);

            if (compileMeta) {
              return compileMeta;
            }

            var meta = this._ngModuleResolver.resolve(moduleType, throwIfNotFound);

            if (!meta) {
              return null;
            }

            var declaredDirectives = [];
            var exportedNonModuleIdentifiers = [];
            var declaredPipes = [];
            var importedModules = [];
            var exportedModules = [];
            var providers = [];
            var entryComponents = [];
            var bootstrapComponents = [];
            var schemas = [];

            if (meta.imports) {
              flattenAndDedupeArray(meta.imports).forEach(function (importedType) {
                var importedModuleType = undefined;

                if (isValidType(importedType)) {
                  importedModuleType = importedType;
                } else if (importedType && importedType.ngModule) {
                  var moduleWithProviders = importedType;
                  importedModuleType = moduleWithProviders.ngModule;

                  if (moduleWithProviders.providers) {
                    providers.push.apply(providers, _toConsumableArray(_this226._getProvidersMetadata(moduleWithProviders.providers, entryComponents, "provider for the NgModule '".concat(stringifyType(importedModuleType), "'"), [], importedType)));
                  }
                }

                if (importedModuleType) {
                  if (_this226._checkSelfImport(moduleType, importedModuleType)) return;
                  if (!alreadyCollecting) alreadyCollecting = new Set();

                  if (alreadyCollecting.has(importedModuleType)) {
                    _this226._reportError(syntaxError("".concat(_this226._getTypeDescriptor(importedModuleType), " '").concat(stringifyType(importedType), "' is imported recursively by the module '").concat(stringifyType(moduleType), "'.")), moduleType);

                    return;
                  }

                  alreadyCollecting.add(importedModuleType);

                  var importedModuleSummary = _this226.getNgModuleSummary(importedModuleType, alreadyCollecting);

                  alreadyCollecting["delete"](importedModuleType);

                  if (!importedModuleSummary) {
                    _this226._reportError(syntaxError("Unexpected ".concat(_this226._getTypeDescriptor(importedType), " '").concat(stringifyType(importedType), "' imported by the module '").concat(stringifyType(moduleType), "'. Please add a @NgModule annotation.")), moduleType);

                    return;
                  }

                  importedModules.push(importedModuleSummary);
                } else {
                  _this226._reportError(syntaxError("Unexpected value '".concat(stringifyType(importedType), "' imported by the module '").concat(stringifyType(moduleType), "'")), moduleType);

                  return;
                }
              });
            }

            if (meta.exports) {
              flattenAndDedupeArray(meta.exports).forEach(function (exportedType) {
                if (!isValidType(exportedType)) {
                  _this226._reportError(syntaxError("Unexpected value '".concat(stringifyType(exportedType), "' exported by the module '").concat(stringifyType(moduleType), "'")), moduleType);

                  return;
                }

                if (!alreadyCollecting) alreadyCollecting = new Set();

                if (alreadyCollecting.has(exportedType)) {
                  _this226._reportError(syntaxError("".concat(_this226._getTypeDescriptor(exportedType), " '").concat(stringify(exportedType), "' is exported recursively by the module '").concat(stringifyType(moduleType), "'")), moduleType);

                  return;
                }

                alreadyCollecting.add(exportedType);

                var exportedModuleSummary = _this226.getNgModuleSummary(exportedType, alreadyCollecting);

                alreadyCollecting["delete"](exportedType);

                if (exportedModuleSummary) {
                  exportedModules.push(exportedModuleSummary);
                } else {
                  exportedNonModuleIdentifiers.push(_this226._getIdentifierMetadata(exportedType));
                }
              });
            } // Note: This will be modified later, so we rely on
            // getting a new instance every time!


            var transitiveModule = this._getTransitiveNgModuleMetadata(importedModules, exportedModules);

            if (meta.declarations) {
              flattenAndDedupeArray(meta.declarations).forEach(function (declaredType) {
                if (!isValidType(declaredType)) {
                  _this226._reportError(syntaxError("Unexpected value '".concat(stringifyType(declaredType), "' declared by the module '").concat(stringifyType(moduleType), "'")), moduleType);

                  return;
                }

                var declaredIdentifier = _this226._getIdentifierMetadata(declaredType);

                if (_this226.isDirective(declaredType)) {
                  if (_this226.isAbstractDirective(declaredType)) {
                    _this226._reportError(syntaxError("Directive ".concat(stringifyType(declaredType), " has no selector, please add it!")), declaredType);
                  }

                  transitiveModule.addDirective(declaredIdentifier);
                  declaredDirectives.push(declaredIdentifier);

                  _this226._addTypeToModule(declaredType, moduleType);
                } else if (_this226.isPipe(declaredType)) {
                  transitiveModule.addPipe(declaredIdentifier);
                  transitiveModule.pipes.push(declaredIdentifier);
                  declaredPipes.push(declaredIdentifier);

                  _this226._addTypeToModule(declaredType, moduleType);
                } else {
                  _this226._reportError(syntaxError("Unexpected ".concat(_this226._getTypeDescriptor(declaredType), " '").concat(stringifyType(declaredType), "' declared by the module '").concat(stringifyType(moduleType), "'. Please add a @Pipe/@Directive/@Component annotation.")), moduleType);

                  return;
                }
              });
            }

            var exportedDirectives = [];
            var exportedPipes = [];
            exportedNonModuleIdentifiers.forEach(function (exportedId) {
              if (transitiveModule.directivesSet.has(exportedId.reference)) {
                exportedDirectives.push(exportedId);
                transitiveModule.addExportedDirective(exportedId);
              } else if (transitiveModule.pipesSet.has(exportedId.reference)) {
                exportedPipes.push(exportedId);
                transitiveModule.addExportedPipe(exportedId);
              } else {
                _this226._reportError(syntaxError("Can't export ".concat(_this226._getTypeDescriptor(exportedId.reference), " ").concat(stringifyType(exportedId.reference), " from ").concat(stringifyType(moduleType), " as it was neither declared nor imported!")), moduleType);

                return;
              }
            }); // The providers of the module have to go last
            // so that they overwrite any other provider we already added.

            if (meta.providers) {
              providers.push.apply(providers, _toConsumableArray(this._getProvidersMetadata(meta.providers, entryComponents, "provider for the NgModule '".concat(stringifyType(moduleType), "'"), [], moduleType)));
            }

            if (meta.entryComponents) {
              entryComponents.push.apply(entryComponents, _toConsumableArray(flattenAndDedupeArray(meta.entryComponents).map(function (type) {
                return _this226._getEntryComponentMetadata(type);
              })));
            }

            if (meta.bootstrap) {
              flattenAndDedupeArray(meta.bootstrap).forEach(function (type) {
                if (!isValidType(type)) {
                  _this226._reportError(syntaxError("Unexpected value '".concat(stringifyType(type), "' used in the bootstrap property of module '").concat(stringifyType(moduleType), "'")), moduleType);

                  return;
                }

                bootstrapComponents.push(_this226._getIdentifierMetadata(type));
              });
            }

            entryComponents.push.apply(entryComponents, _toConsumableArray(bootstrapComponents.map(function (type) {
              return _this226._getEntryComponentMetadata(type.reference);
            })));

            if (meta.schemas) {
              schemas.push.apply(schemas, _toConsumableArray(flattenAndDedupeArray(meta.schemas)));
            }

            compileMeta = new CompileNgModuleMetadata({
              type: this._getTypeMetadata(moduleType),
              providers: providers,
              entryComponents: entryComponents,
              bootstrapComponents: bootstrapComponents,
              schemas: schemas,
              declaredDirectives: declaredDirectives,
              exportedDirectives: exportedDirectives,
              declaredPipes: declaredPipes,
              exportedPipes: exportedPipes,
              importedModules: importedModules,
              exportedModules: exportedModules,
              transitiveModule: transitiveModule,
              id: meta.id || null
            });
            entryComponents.forEach(function (id) {
              return transitiveModule.addEntryComponent(id);
            });
            providers.forEach(function (provider) {
              return transitiveModule.addProvider(provider, compileMeta.type);
            });
            transitiveModule.addModule(compileMeta.type);

            this._ngModuleCache.set(moduleType, compileMeta);

            return compileMeta;
          }
        }, {
          key: "_checkSelfImport",
          value: function _checkSelfImport(moduleType, importedModuleType) {
            if (moduleType === importedModuleType) {
              this._reportError(syntaxError("'".concat(stringifyType(moduleType), "' module can't import itself")), moduleType);

              return true;
            }

            return false;
          }
        }, {
          key: "_getTypeDescriptor",
          value: function _getTypeDescriptor(type) {
            if (isValidType(type)) {
              if (this.isDirective(type)) {
                return 'directive';
              }

              if (this.isPipe(type)) {
                return 'pipe';
              }

              if (this.isNgModule(type)) {
                return 'module';
              }
            }

            if (type.provide) {
              return 'provider';
            }

            return 'value';
          }
        }, {
          key: "_addTypeToModule",
          value: function _addTypeToModule(type, moduleType) {
            var oldModule = this._ngModuleOfTypes.get(type);

            if (oldModule && oldModule !== moduleType) {
              this._reportError(syntaxError("Type ".concat(stringifyType(type), " is part of the declarations of 2 modules: ").concat(stringifyType(oldModule), " and ").concat(stringifyType(moduleType), "! ") + "Please consider moving ".concat(stringifyType(type), " to a higher module that imports ").concat(stringifyType(oldModule), " and ").concat(stringifyType(moduleType), ". ") + "You can also create a new NgModule that exports and includes ".concat(stringifyType(type), " then import that NgModule in ").concat(stringifyType(oldModule), " and ").concat(stringifyType(moduleType), ".")), moduleType);

              return;
            }

            this._ngModuleOfTypes.set(type, moduleType);
          }
        }, {
          key: "_getTransitiveNgModuleMetadata",
          value: function _getTransitiveNgModuleMetadata(importedModules, exportedModules) {
            // collect `providers` / `entryComponents` from all imported and all exported modules
            var result = new TransitiveCompileNgModuleMetadata();
            var modulesByToken = new Map();
            importedModules.concat(exportedModules).forEach(function (modSummary) {
              modSummary.modules.forEach(function (mod) {
                return result.addModule(mod);
              });
              modSummary.entryComponents.forEach(function (comp) {
                return result.addEntryComponent(comp);
              });
              var addedTokens = new Set();
              modSummary.providers.forEach(function (entry) {
                var tokenRef = tokenReference(entry.provider.token);
                var prevModules = modulesByToken.get(tokenRef);

                if (!prevModules) {
                  prevModules = new Set();
                  modulesByToken.set(tokenRef, prevModules);
                }

                var moduleRef = entry.module.reference; // Note: the providers of one module may still contain multiple providers
                // per token (e.g. for multi providers), and we need to preserve these.

                if (addedTokens.has(tokenRef) || !prevModules.has(moduleRef)) {
                  prevModules.add(moduleRef);
                  addedTokens.add(tokenRef);
                  result.addProvider(entry.provider, entry.module);
                }
              });
            });
            exportedModules.forEach(function (modSummary) {
              modSummary.exportedDirectives.forEach(function (id) {
                return result.addExportedDirective(id);
              });
              modSummary.exportedPipes.forEach(function (id) {
                return result.addExportedPipe(id);
              });
            });
            importedModules.forEach(function (modSummary) {
              modSummary.exportedDirectives.forEach(function (id) {
                return result.addDirective(id);
              });
              modSummary.exportedPipes.forEach(function (id) {
                return result.addPipe(id);
              });
            });
            return result;
          }
        }, {
          key: "_getIdentifierMetadata",
          value: function _getIdentifierMetadata(type) {
            type = resolveForwardRef(type);
            return {
              reference: type
            };
          }
        }, {
          key: "isInjectable",
          value: function isInjectable(type) {
            var annotations = this._reflector.tryAnnotations(type);

            return annotations.some(function (ann) {
              return createInjectable.isTypeOf(ann);
            });
          }
        }, {
          key: "getInjectableSummary",
          value: function getInjectableSummary(type) {
            return {
              summaryKind: CompileSummaryKind.Injectable,
              type: this._getTypeMetadata(type, null, false)
            };
          }
        }, {
          key: "getInjectableMetadata",
          value: function getInjectableMetadata(type) {
            var dependencies = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
            var throwOnUnknownDeps = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;

            var typeSummary = this._loadSummary(type, CompileSummaryKind.Injectable);

            var typeMetadata = typeSummary ? typeSummary.type : this._getTypeMetadata(type, dependencies, throwOnUnknownDeps);

            var annotations = this._reflector.annotations(type).filter(function (ann) {
              return createInjectable.isTypeOf(ann);
            });

            if (annotations.length === 0) {
              return null;
            }

            var meta = annotations[annotations.length - 1];
            return {
              symbol: type,
              type: typeMetadata,
              providedIn: meta.providedIn,
              useValue: meta.useValue,
              useClass: meta.useClass,
              useExisting: meta.useExisting,
              useFactory: meta.useFactory,
              deps: meta.deps
            };
          }
        }, {
          key: "_getTypeMetadata",
          value: function _getTypeMetadata(type) {
            var dependencies = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
            var throwOnUnknownDeps = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;

            var identifier = this._getIdentifierMetadata(type);

            return {
              reference: identifier.reference,
              diDeps: this._getDependenciesMetadata(identifier.reference, dependencies, throwOnUnknownDeps),
              lifecycleHooks: getAllLifecycleHooks(this._reflector, identifier.reference)
            };
          }
        }, {
          key: "_getFactoryMetadata",
          value: function _getFactoryMetadata(factory) {
            var dependencies = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
            factory = resolveForwardRef(factory);
            return {
              reference: factory,
              diDeps: this._getDependenciesMetadata(factory, dependencies)
            };
          }
          /**
           * Gets the metadata for the given pipe.
           * This assumes `loadNgModuleDirectiveAndPipeMetadata` has been called first.
           */

        }, {
          key: "getPipeMetadata",
          value: function getPipeMetadata(pipeType) {
            var pipeMeta = this._pipeCache.get(pipeType);

            if (!pipeMeta) {
              this._reportError(syntaxError("Illegal state: getPipeMetadata can only be called after loadNgModuleDirectiveAndPipeMetadata for a module that declares it. Pipe ".concat(stringifyType(pipeType), ".")), pipeType);
            }

            return pipeMeta || null;
          }
        }, {
          key: "getPipeSummary",
          value: function getPipeSummary(pipeType) {
            var pipeSummary = this._loadSummary(pipeType, CompileSummaryKind.Pipe);

            if (!pipeSummary) {
              this._reportError(syntaxError("Illegal state: Could not load the summary for pipe ".concat(stringifyType(pipeType), ".")), pipeType);
            }

            return pipeSummary;
          }
        }, {
          key: "getOrLoadPipeMetadata",
          value: function getOrLoadPipeMetadata(pipeType) {
            var pipeMeta = this._pipeCache.get(pipeType);

            if (!pipeMeta) {
              pipeMeta = this._loadPipeMetadata(pipeType);
            }

            return pipeMeta;
          }
        }, {
          key: "_loadPipeMetadata",
          value: function _loadPipeMetadata(pipeType) {
            pipeType = resolveForwardRef(pipeType);

            var pipeAnnotation = this._pipeResolver.resolve(pipeType);

            var pipeMeta = new CompilePipeMetadata({
              type: this._getTypeMetadata(pipeType),
              name: pipeAnnotation.name,
              pure: !!pipeAnnotation.pure
            });

            this._pipeCache.set(pipeType, pipeMeta);

            this._summaryCache.set(pipeType, pipeMeta.toSummary());

            return pipeMeta;
          }
        }, {
          key: "_getDependenciesMetadata",
          value: function _getDependenciesMetadata(typeOrFunc, dependencies) {
            var _this227 = this;

            var throwOnUnknownDeps = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
            var hasUnknownDeps = false;
            var params = dependencies || this._reflector.parameters(typeOrFunc) || [];
            var dependenciesMetadata = params.map(function (param) {
              var isAttribute = false;
              var isHost = false;
              var isSelf = false;
              var isSkipSelf = false;
              var isOptional = false;
              var token = null;

              if (Array.isArray(param)) {
                param.forEach(function (paramEntry) {
                  if (createHost.isTypeOf(paramEntry)) {
                    isHost = true;
                  } else if (createSelf.isTypeOf(paramEntry)) {
                    isSelf = true;
                  } else if (createSkipSelf.isTypeOf(paramEntry)) {
                    isSkipSelf = true;
                  } else if (createOptional.isTypeOf(paramEntry)) {
                    isOptional = true;
                  } else if (createAttribute.isTypeOf(paramEntry)) {
                    isAttribute = true;
                    token = paramEntry.attributeName;
                  } else if (createInject.isTypeOf(paramEntry)) {
                    token = paramEntry.token;
                  } else if (createInjectionToken.isTypeOf(paramEntry) || paramEntry instanceof StaticSymbol) {
                    token = paramEntry;
                  } else if (isValidType(paramEntry) && token == null) {
                    token = paramEntry;
                  }
                });
              } else {
                token = param;
              }

              if (token == null) {
                hasUnknownDeps = true;
                return {};
              }

              return {
                isAttribute: isAttribute,
                isHost: isHost,
                isSelf: isSelf,
                isSkipSelf: isSkipSelf,
                isOptional: isOptional,
                token: _this227._getTokenMetadata(token)
              };
            });

            if (hasUnknownDeps) {
              var depsTokens = dependenciesMetadata.map(function (dep) {
                return dep.token ? stringifyType(dep.token) : '?';
              }).join(', ');
              var message = "Can't resolve all parameters for ".concat(stringifyType(typeOrFunc), ": (").concat(depsTokens, ").");

              if (throwOnUnknownDeps || this._config.strictInjectionParameters) {
                this._reportError(syntaxError(message), typeOrFunc);
              }
            }

            return dependenciesMetadata;
          }
        }, {
          key: "_getTokenMetadata",
          value: function _getTokenMetadata(token) {
            token = resolveForwardRef(token);
            var compileToken;

            if (typeof token === 'string') {
              compileToken = {
                value: token
              };
            } else {
              compileToken = {
                identifier: {
                  reference: token
                }
              };
            }

            return compileToken;
          }
        }, {
          key: "_getProvidersMetadata",
          value: function _getProvidersMetadata(providers, targetEntryComponents, debugInfo) {
            var _this228 = this;

            var compileProviders = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];
            var type = arguments.length > 4 ? arguments[4] : undefined;
            providers.forEach(function (provider, providerIdx) {
              if (Array.isArray(provider)) {
                _this228._getProvidersMetadata(provider, targetEntryComponents, debugInfo, compileProviders);
              } else {
                provider = resolveForwardRef(provider);
                var providerMeta = undefined;

                if (provider && typeof provider === 'object' && provider.hasOwnProperty('provide')) {
                  _this228._validateProvider(provider);

                  providerMeta = new ProviderMeta(provider.provide, provider);
                } else if (isValidType(provider)) {
                  providerMeta = new ProviderMeta(provider, {
                    useClass: provider
                  });
                } else if (provider === void 0) {
                  _this228._reportError(syntaxError("Encountered undefined provider! Usually this means you have a circular dependencies. This might be caused by using 'barrel' index.ts files."));

                  return;
                } else {
                  var providersInfo = providers.reduce(function (soFar, seenProvider, seenProviderIdx) {
                    if (seenProviderIdx < providerIdx) {
                      soFar.push("".concat(stringifyType(seenProvider)));
                    } else if (seenProviderIdx == providerIdx) {
                      soFar.push("?".concat(stringifyType(seenProvider), "?"));
                    } else if (seenProviderIdx == providerIdx + 1) {
                      soFar.push('...');
                    }

                    return soFar;
                  }, []).join(', ');

                  _this228._reportError(syntaxError("Invalid ".concat(debugInfo ? debugInfo : 'provider', " - only instances of Provider and Type are allowed, got: [").concat(providersInfo, "]")), type);

                  return;
                }

                if (providerMeta.token === _this228._reflector.resolveExternalReference(Identifiers.ANALYZE_FOR_ENTRY_COMPONENTS)) {
                  targetEntryComponents.push.apply(targetEntryComponents, _toConsumableArray(_this228._getEntryComponentsFromProvider(providerMeta, type)));
                } else {
                  compileProviders.push(_this228.getProviderMetadata(providerMeta));
                }
              }
            });
            return compileProviders;
          }
        }, {
          key: "_validateProvider",
          value: function _validateProvider(provider) {
            if (provider.hasOwnProperty('useClass') && provider.useClass == null) {
              this._reportError(syntaxError("Invalid provider for ".concat(stringifyType(provider.provide), ". useClass cannot be ").concat(provider.useClass, ".\n           Usually it happens when:\n           1. There's a circular dependency (might be caused by using index.ts (barrel) files).\n           2. Class was used before it was declared. Use forwardRef in this case.")));
            }
          }
        }, {
          key: "_getEntryComponentsFromProvider",
          value: function _getEntryComponentsFromProvider(provider, type) {
            var _this229 = this;

            var components = [];
            var collectedIdentifiers = [];

            if (provider.useFactory || provider.useExisting || provider.useClass) {
              this._reportError(syntaxError("The ANALYZE_FOR_ENTRY_COMPONENTS token only supports useValue!"), type);

              return [];
            }

            if (!provider.multi) {
              this._reportError(syntaxError("The ANALYZE_FOR_ENTRY_COMPONENTS token only supports 'multi = true'!"), type);

              return [];
            }

            extractIdentifiers(provider.useValue, collectedIdentifiers);
            collectedIdentifiers.forEach(function (identifier) {
              var entry = _this229._getEntryComponentMetadata(identifier.reference, false);

              if (entry) {
                components.push(entry);
              }
            });
            return components;
          }
        }, {
          key: "_getEntryComponentMetadata",
          value: function _getEntryComponentMetadata(dirType) {
            var throwIfNotFound = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
            var dirMeta = this.getNonNormalizedDirectiveMetadata(dirType);

            if (dirMeta && dirMeta.metadata.isComponent) {
              return {
                componentType: dirType,
                componentFactory: dirMeta.metadata.componentFactory
              };
            }

            var dirSummary = this._loadSummary(dirType, CompileSummaryKind.Directive);

            if (dirSummary && dirSummary.isComponent) {
              return {
                componentType: dirType,
                componentFactory: dirSummary.componentFactory
              };
            }

            if (throwIfNotFound) {
              throw syntaxError("".concat(dirType.name, " cannot be used as an entry component."));
            }

            return null;
          }
        }, {
          key: "_getInjectableTypeMetadata",
          value: function _getInjectableTypeMetadata(type) {
            var dependencies = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

            var typeSummary = this._loadSummary(type, CompileSummaryKind.Injectable);

            if (typeSummary) {
              return typeSummary.type;
            }

            return this._getTypeMetadata(type, dependencies);
          }
        }, {
          key: "getProviderMetadata",
          value: function getProviderMetadata(provider) {
            var compileDeps = undefined;
            var compileTypeMetadata = null;
            var compileFactoryMetadata = null;

            var token = this._getTokenMetadata(provider.token);

            if (provider.useClass) {
              compileTypeMetadata = this._getInjectableTypeMetadata(provider.useClass, provider.dependencies);
              compileDeps = compileTypeMetadata.diDeps;

              if (provider.token === provider.useClass) {
                // use the compileTypeMetadata as it contains information about lifecycleHooks...
                token = {
                  identifier: compileTypeMetadata
                };
              }
            } else if (provider.useFactory) {
              compileFactoryMetadata = this._getFactoryMetadata(provider.useFactory, provider.dependencies);
              compileDeps = compileFactoryMetadata.diDeps;
            }

            return {
              token: token,
              useClass: compileTypeMetadata,
              useValue: provider.useValue,
              useFactory: compileFactoryMetadata,
              useExisting: provider.useExisting ? this._getTokenMetadata(provider.useExisting) : undefined,
              deps: compileDeps,
              multi: provider.multi
            };
          }
        }, {
          key: "_getQueriesMetadata",
          value: function _getQueriesMetadata(queries, isViewQuery, directiveType) {
            var _this230 = this;

            var res = [];
            Object.keys(queries).forEach(function (propertyName) {
              var query = queries[propertyName];

              if (query.isViewQuery === isViewQuery) {
                res.push(_this230._getQueryMetadata(query, propertyName, directiveType));
              }
            });
            return res;
          }
        }, {
          key: "_queryVarBindings",
          value: function _queryVarBindings(selector) {
            return selector.split(/\s*,\s*/);
          }
        }, {
          key: "_getQueryMetadata",
          value: function _getQueryMetadata(q, propertyName, typeOrFunc) {
            var _this231 = this;

            var selectors;

            if (typeof q.selector === 'string') {
              selectors = this._queryVarBindings(q.selector).map(function (varName) {
                return _this231._getTokenMetadata(varName);
              });
            } else {
              if (!q.selector) {
                this._reportError(syntaxError("Can't construct a query for the property \"".concat(propertyName, "\" of \"").concat(stringifyType(typeOrFunc), "\" since the query selector wasn't defined.")), typeOrFunc);

                selectors = [];
              } else {
                selectors = [this._getTokenMetadata(q.selector)];
              }
            }

            return {
              selectors: selectors,
              first: q.first,
              descendants: q.descendants,
              emitDistinctChangesOnly: q.emitDistinctChangesOnly,
              propertyName: propertyName,
              read: q.read ? this._getTokenMetadata(q.read) : null,
              "static": q["static"]
            };
          }
        }, {
          key: "_reportError",
          value: function _reportError(error, type, otherType) {
            if (this._errorCollector) {
              this._errorCollector(error, type);

              if (otherType) {
                this._errorCollector(error, otherType);
              }
            } else {
              throw error;
            }
          }
        }]);

        return CompileMetadataResolver;
      }();

      function flattenArray(tree) {
        var out = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];

        if (tree) {
          for (var i = 0; i < tree.length; i++) {
            var item = resolveForwardRef(tree[i]);

            if (Array.isArray(item)) {
              flattenArray(item, out);
            } else {
              out.push(item);
            }
          }
        }

        return out;
      }

      function dedupeArray(array) {
        if (array) {
          return Array.from(new Set(array));
        }

        return [];
      }

      function flattenAndDedupeArray(tree) {
        return dedupeArray(flattenArray(tree));
      }

      function isValidType(value) {
        return value instanceof StaticSymbol || value instanceof Type;
      }

      function extractIdentifiers(value, targetIdentifiers) {
        visitValue(value, new _CompileValueConverter(), targetIdentifiers);
      }

      var _CompileValueConverter = /*#__PURE__*/function (_ValueTransformer) {
        _inherits(_CompileValueConverter, _ValueTransformer);

        var _super104 = _createSuper(_CompileValueConverter);

        function _CompileValueConverter() {
          _classCallCheck(this, _CompileValueConverter);

          return _super104.apply(this, arguments);
        }

        _createClass(_CompileValueConverter, [{
          key: "visitOther",
          value: function visitOther(value, targetIdentifiers) {
            targetIdentifiers.push({
              reference: value
            });
          }
        }]);

        return _CompileValueConverter;
      }(ValueTransformer);

      function stringifyType(type) {
        if (type instanceof StaticSymbol) {
          return "".concat(type.name, " in ").concat(type.filePath);
        } else {
          return stringify(type);
        }
      }
      /**
       * Indicates that a component is still being loaded in a synchronous compile.
       */


      function componentStillLoadingError(compType) {
        var error = Error("Can't compile synchronously as ".concat(stringify(compType), " is still being loaded!"));
        error[ERROR_COMPONENT_TYPE] = compType;
        return error;
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      function providerDef(ctx, providerAst) {
        var flags = 0
        /* None */
        ;

        if (!providerAst.eager) {
          flags |= 4096
          /* LazyProvider */
          ;
        }

        if (providerAst.providerType === ProviderAstType.PrivateService) {
          flags |= 8192
          /* PrivateProvider */
          ;
        }

        if (providerAst.isModule) {
          flags |= 1073741824
          /* TypeModuleProvider */
          ;
        }

        providerAst.lifecycleHooks.forEach(function (lifecycleHook) {
          // for regular providers, we only support ngOnDestroy
          if (lifecycleHook === LifecycleHooks.OnDestroy || providerAst.providerType === ProviderAstType.Directive || providerAst.providerType === ProviderAstType.Component) {
            flags |= lifecycleHookToNodeFlag(lifecycleHook);
          }
        });

        var _ref35 = providerAst.multiProvider ? multiProviderDef(ctx, flags, providerAst.providers) : singleProviderDef(ctx, flags, providerAst.providerType, providerAst.providers[0]),
            providerExpr = _ref35.providerExpr,
            providerFlags = _ref35.flags,
            depsExpr = _ref35.depsExpr;

        return {
          providerExpr: providerExpr,
          flags: providerFlags,
          depsExpr: depsExpr,
          tokenExpr: tokenExpr(ctx, providerAst.token)
        };
      }

      function multiProviderDef(ctx, flags, providers) {
        var allDepDefs = [];
        var allParams = [];
        var exprs = providers.map(function (provider, providerIndex) {
          var expr;

          if (provider.useClass) {
            var depExprs = convertDeps(providerIndex, provider.deps || provider.useClass.diDeps);
            expr = ctx.importExpr(provider.useClass.reference).instantiate(depExprs);
          } else if (provider.useFactory) {
            var _depExprs = convertDeps(providerIndex, provider.deps || provider.useFactory.diDeps);

            expr = ctx.importExpr(provider.useFactory.reference).callFn(_depExprs);
          } else if (provider.useExisting) {
            var _depExprs2 = convertDeps(providerIndex, [{
              token: provider.useExisting
            }]);

            expr = _depExprs2[0];
          } else {
            expr = convertValueToOutputAst(ctx, provider.useValue);
          }

          return expr;
        });
        var providerExpr = fn(allParams, [new ReturnStatement(literalArr(exprs))], INFERRED_TYPE);
        return {
          providerExpr: providerExpr,
          flags: flags | 1024
          /* TypeFactoryProvider */
          ,
          depsExpr: literalArr(allDepDefs)
        };

        function convertDeps(providerIndex, deps) {
          return deps.map(function (dep, depIndex) {
            var paramName = "p".concat(providerIndex, "_").concat(depIndex);
            allParams.push(new FnParam(paramName, DYNAMIC_TYPE));
            allDepDefs.push(depDef(ctx, dep));
            return variable(paramName);
          });
        }
      }

      function singleProviderDef(ctx, flags, providerType, providerMeta) {
        var providerExpr;
        var deps;

        if (providerType === ProviderAstType.Directive || providerType === ProviderAstType.Component) {
          providerExpr = ctx.importExpr(providerMeta.useClass.reference);
          flags |= 16384
          /* TypeDirective */
          ;
          deps = providerMeta.deps || providerMeta.useClass.diDeps;
        } else {
          if (providerMeta.useClass) {
            providerExpr = ctx.importExpr(providerMeta.useClass.reference);
            flags |= 512
            /* TypeClassProvider */
            ;
            deps = providerMeta.deps || providerMeta.useClass.diDeps;
          } else if (providerMeta.useFactory) {
            providerExpr = ctx.importExpr(providerMeta.useFactory.reference);
            flags |= 1024
            /* TypeFactoryProvider */
            ;
            deps = providerMeta.deps || providerMeta.useFactory.diDeps;
          } else if (providerMeta.useExisting) {
            providerExpr = NULL_EXPR;
            flags |= 2048
            /* TypeUseExistingProvider */
            ;
            deps = [{
              token: providerMeta.useExisting
            }];
          } else {
            providerExpr = convertValueToOutputAst(ctx, providerMeta.useValue);
            flags |= 256
            /* TypeValueProvider */
            ;
            deps = [];
          }
        }

        var depsExpr = literalArr(deps.map(function (dep) {
          return depDef(ctx, dep);
        }));
        return {
          providerExpr: providerExpr,
          flags: flags,
          depsExpr: depsExpr
        };
      }

      function tokenExpr(ctx, tokenMeta) {
        return tokenMeta.identifier ? ctx.importExpr(tokenMeta.identifier.reference) : literal(tokenMeta.value);
      }

      function depDef(ctx, dep) {
        // Note: the following fields have already been normalized out by provider_analyzer:
        // - isAttribute, isHost
        var expr = dep.isValue ? convertValueToOutputAst(ctx, dep.value) : tokenExpr(ctx, dep.token);
        var flags = 0
        /* None */
        ;

        if (dep.isSkipSelf) {
          flags |= 1
          /* SkipSelf */
          ;
        }

        if (dep.isOptional) {
          flags |= 2
          /* Optional */
          ;
        }

        if (dep.isSelf) {
          flags |= 4
          /* Self */
          ;
        }

        if (dep.isValue) {
          flags |= 8
          /* Value */
          ;
        }

        return flags === 0
        /* None */
        ? expr : literalArr([literal(flags), expr]);
      }

      function lifecycleHookToNodeFlag(lifecycleHook) {
        var nodeFlag = 0
        /* None */
        ;

        switch (lifecycleHook) {
          case LifecycleHooks.AfterContentChecked:
            nodeFlag = 2097152
            /* AfterContentChecked */
            ;
            break;

          case LifecycleHooks.AfterContentInit:
            nodeFlag = 1048576
            /* AfterContentInit */
            ;
            break;

          case LifecycleHooks.AfterViewChecked:
            nodeFlag = 8388608
            /* AfterViewChecked */
            ;
            break;

          case LifecycleHooks.AfterViewInit:
            nodeFlag = 4194304
            /* AfterViewInit */
            ;
            break;

          case LifecycleHooks.DoCheck:
            nodeFlag = 262144
            /* DoCheck */
            ;
            break;

          case LifecycleHooks.OnChanges:
            nodeFlag = 524288
            /* OnChanges */
            ;
            break;

          case LifecycleHooks.OnDestroy:
            nodeFlag = 131072
            /* OnDestroy */
            ;
            break;

          case LifecycleHooks.OnInit:
            nodeFlag = 65536
            /* OnInit */
            ;
            break;
        }

        return nodeFlag;
      }

      function componentFactoryResolverProviderDef(reflector, ctx, flags, entryComponents) {
        var entryComponentFactories = entryComponents.map(function (entryComponent) {
          return ctx.importExpr(entryComponent.componentFactory);
        });
        var token = createTokenForExternalReference(reflector, Identifiers.ComponentFactoryResolver);
        var classMeta = {
          diDeps: [{
            isValue: true,
            value: literalArr(entryComponentFactories)
          }, {
            token: token,
            isSkipSelf: true,
            isOptional: true
          }, {
            token: createTokenForExternalReference(reflector, Identifiers.NgModuleRef)
          }],
          lifecycleHooks: [],
          reference: reflector.resolveExternalReference(Identifiers.CodegenComponentFactoryResolver)
        };

        var _singleProviderDef = singleProviderDef(ctx, flags, ProviderAstType.PrivateService, {
          token: token,
          multi: false,
          useClass: classMeta
        }),
            providerExpr = _singleProviderDef.providerExpr,
            providerFlags = _singleProviderDef.flags,
            depsExpr = _singleProviderDef.depsExpr;

        return {
          providerExpr: providerExpr,
          flags: providerFlags,
          depsExpr: depsExpr,
          tokenExpr: tokenExpr(ctx, token)
        };
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      var NgModuleCompileResult = function NgModuleCompileResult(ngModuleFactoryVar) {
        _classCallCheck(this, NgModuleCompileResult);

        this.ngModuleFactoryVar = ngModuleFactoryVar;
      };

      var LOG_VAR = variable('_l');

      var NgModuleCompiler = /*#__PURE__*/function () {
        function NgModuleCompiler(reflector) {
          _classCallCheck(this, NgModuleCompiler);

          this.reflector = reflector;
        }

        _createClass(NgModuleCompiler, [{
          key: "compile",
          value: function compile(ctx, ngModuleMeta, extraProviders) {
            var sourceSpan = typeSourceSpan('NgModule', ngModuleMeta.type);
            var entryComponentFactories = ngModuleMeta.transitiveModule.entryComponents;
            var bootstrapComponents = ngModuleMeta.bootstrapComponents;
            var providerParser = new NgModuleProviderAnalyzer(this.reflector, ngModuleMeta, extraProviders, sourceSpan);
            var providerDefs = [componentFactoryResolverProviderDef(this.reflector, ctx, 0
            /* None */
            , entryComponentFactories)].concat(providerParser.parse().map(function (provider) {
              return providerDef(ctx, provider);
            })).map(function (_ref36) {
              var providerExpr = _ref36.providerExpr,
                  depsExpr = _ref36.depsExpr,
                  flags = _ref36.flags,
                  tokenExpr = _ref36.tokenExpr;
              return importExpr(Identifiers.moduleProviderDef).callFn([literal(flags), tokenExpr, providerExpr, depsExpr]);
            });
            var ngModuleDef = importExpr(Identifiers.moduleDef).callFn([literalArr(providerDefs)]);
            var ngModuleDefFactory = fn([new FnParam(LOG_VAR.name)], [new ReturnStatement(ngModuleDef)], INFERRED_TYPE);
            var ngModuleFactoryVar = "".concat(identifierName(ngModuleMeta.type), "NgFactory");

            this._createNgModuleFactory(ctx, ngModuleMeta.type.reference, importExpr(Identifiers.createModuleFactory).callFn([ctx.importExpr(ngModuleMeta.type.reference), literalArr(bootstrapComponents.map(function (id) {
              return ctx.importExpr(id.reference);
            })), ngModuleDefFactory]));

            if (ngModuleMeta.id) {
              var id = typeof ngModuleMeta.id === 'string' ? literal(ngModuleMeta.id) : ctx.importExpr(ngModuleMeta.id);
              var registerFactoryStmt = importExpr(Identifiers.RegisterModuleFactoryFn).callFn([id, variable(ngModuleFactoryVar)]).toStmt();
              ctx.statements.push(registerFactoryStmt);
            }

            return new NgModuleCompileResult(ngModuleFactoryVar);
          }
        }, {
          key: "createStub",
          value: function createStub(ctx, ngModuleReference) {
            this._createNgModuleFactory(ctx, ngModuleReference, NULL_EXPR);
          }
        }, {
          key: "_createNgModuleFactory",
          value: function _createNgModuleFactory(ctx, reference, value) {
            var ngModuleFactoryVar = "".concat(identifierName({
              reference: reference
            }), "NgFactory");
            var ngModuleFactoryStmt = variable(ngModuleFactoryVar).set(value).toDeclStmt(importType(Identifiers.NgModuleFactory, [expressionType(ctx.importExpr(reference))], [TypeModifier.Const]), [StmtModifier.Final, StmtModifier.Exported]);
            ctx.statements.push(ngModuleFactoryStmt);
          }
        }]);

        return NgModuleCompiler;
      }();
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * Resolves types to {@link NgModule}.
       */


      var NgModuleResolver = /*#__PURE__*/function () {
        function NgModuleResolver(_reflector) {
          _classCallCheck(this, NgModuleResolver);

          this._reflector = _reflector;
        }

        _createClass(NgModuleResolver, [{
          key: "isNgModule",
          value: function isNgModule(type) {
            return this._reflector.annotations(type).some(createNgModule.isTypeOf);
          }
        }, {
          key: "resolve",
          value: function resolve(type) {
            var throwIfNotFound = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
            var ngModuleMeta = findLast(this._reflector.annotations(type), createNgModule.isTypeOf);

            if (ngModuleMeta) {
              return ngModuleMeta;
            } else {
              if (throwIfNotFound) {
                throw new Error("No NgModule metadata found for '".concat(stringify(type), "'."));
              }

              return null;
            }
          }
        }]);

        return NgModuleResolver;
      }();
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      function debugOutputAstAsTypeScript(ast) {
        var converter = new _TsEmitterVisitor();
        var ctx = EmitterVisitorContext.createRoot();
        var asts = Array.isArray(ast) ? ast : [ast];
        asts.forEach(function (ast) {
          if (ast instanceof Statement) {
            ast.visitStatement(converter, ctx);
          } else if (ast instanceof Expression) {
            ast.visitExpression(converter, ctx);
          } else if (ast instanceof Type$1) {
            ast.visitType(converter, ctx);
          } else {
            throw new Error("Don't know how to print debug info for ".concat(ast));
          }
        });
        return ctx.toSource();
      }

      var TypeScriptEmitter = /*#__PURE__*/function () {
        function TypeScriptEmitter() {
          _classCallCheck(this, TypeScriptEmitter);
        }

        _createClass(TypeScriptEmitter, [{
          key: "emitStatementsAndContext",
          value: function emitStatementsAndContext(genFilePath, stmts) {
            var preamble = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';
            var emitSourceMaps = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;
            var referenceFilter = arguments.length > 4 ? arguments[4] : undefined;
            var importFilter = arguments.length > 5 ? arguments[5] : undefined;
            var converter = new _TsEmitterVisitor(referenceFilter, importFilter);
            var ctx = EmitterVisitorContext.createRoot();
            converter.visitAllStatements(stmts, ctx);
            var preambleLines = preamble ? preamble.split('\n') : [];
            converter.reexports.forEach(function (reexports, exportedModuleName) {
              var reexportsCode = reexports.map(function (reexport) {
                return "".concat(reexport.name, " as ").concat(reexport.as);
              }).join(',');
              preambleLines.push("export {".concat(reexportsCode, "} from '").concat(exportedModuleName, "';"));
            });
            converter.importsWithPrefixes.forEach(function (prefix, importedModuleName) {
              // Note: can't write the real word for import as it screws up system.js auto detection...
              preambleLines.push("imp" + "ort * as ".concat(prefix, " from '").concat(importedModuleName, "';"));
            });
            var sm = emitSourceMaps ? ctx.toSourceMapGenerator(genFilePath, preambleLines.length).toJsComment() : '';
            var lines = [].concat(_toConsumableArray(preambleLines), [ctx.toSource(), sm]);

            if (sm) {
              // always add a newline at the end, as some tools have bugs without it.
              lines.push('');
            }

            ctx.setPreambleLineCount(preambleLines.length);
            return {
              sourceText: lines.join('\n'),
              context: ctx
            };
          }
        }, {
          key: "emitStatements",
          value: function emitStatements(genFilePath, stmts) {
            var preamble = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';
            return this.emitStatementsAndContext(genFilePath, stmts, preamble).sourceText;
          }
        }]);

        return TypeScriptEmitter;
      }();

      var _TsEmitterVisitor = /*#__PURE__*/function (_AbstractEmitterVisit2) {
        _inherits(_TsEmitterVisitor, _AbstractEmitterVisit2);

        var _super105 = _createSuper(_TsEmitterVisitor);

        function _TsEmitterVisitor(referenceFilter, importFilter) {
          var _this232;

          _classCallCheck(this, _TsEmitterVisitor);

          _this232 = _super105.call(this, false);
          _this232.referenceFilter = referenceFilter;
          _this232.importFilter = importFilter;
          _this232.typeExpression = 0;
          _this232.importsWithPrefixes = new Map();
          _this232.reexports = new Map();
          return _this232;
        }

        _createClass(_TsEmitterVisitor, [{
          key: "visitType",
          value: function visitType(t, ctx) {
            var defaultType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'any';

            if (t) {
              this.typeExpression++;
              t.visitType(this, ctx);
              this.typeExpression--;
            } else {
              ctx.print(null, defaultType);
            }
          }
        }, {
          key: "visitLiteralExpr",
          value: function visitLiteralExpr(ast, ctx) {
            var value = ast.value;

            if (value == null && ast.type != INFERRED_TYPE) {
              ctx.print(ast, "(".concat(value, " as any)"));
              return null;
            }

            return _get(_getPrototypeOf(_TsEmitterVisitor.prototype), "visitLiteralExpr", this).call(this, ast, ctx);
          } // Temporary workaround to support strictNullCheck enabled consumers of ngc emit.
          // In SNC mode, [] have the type never[], so we cast here to any[].
          // TODO: narrow the cast to a more explicit type, or use a pattern that does not
          // start with [].concat. see https://github.com/angular/angular/pull/11846

        }, {
          key: "visitLiteralArrayExpr",
          value: function visitLiteralArrayExpr(ast, ctx) {
            if (ast.entries.length === 0) {
              ctx.print(ast, '(');
            }

            var result = _get(_getPrototypeOf(_TsEmitterVisitor.prototype), "visitLiteralArrayExpr", this).call(this, ast, ctx);

            if (ast.entries.length === 0) {
              ctx.print(ast, ' as any[])');
            }

            return result;
          }
        }, {
          key: "visitExternalExpr",
          value: function visitExternalExpr(ast, ctx) {
            this._visitIdentifier(ast.value, ast.typeParams, ctx);

            return null;
          }
        }, {
          key: "visitAssertNotNullExpr",
          value: function visitAssertNotNullExpr(ast, ctx) {
            var result = _get(_getPrototypeOf(_TsEmitterVisitor.prototype), "visitAssertNotNullExpr", this).call(this, ast, ctx);

            ctx.print(ast, '!');
            return result;
          }
        }, {
          key: "visitDeclareVarStmt",
          value: function visitDeclareVarStmt(stmt, ctx) {
            if (stmt.hasModifier(StmtModifier.Exported) && stmt.value instanceof ExternalExpr && !stmt.type) {
              // check for a reexport
              var _stmt$value$value = stmt.value.value,
                  name = _stmt$value$value.name,
                  moduleName = _stmt$value$value.moduleName;

              if (moduleName) {
                var reexports = this.reexports.get(moduleName);

                if (!reexports) {
                  reexports = [];
                  this.reexports.set(moduleName, reexports);
                }

                reexports.push({
                  name: name,
                  as: stmt.name
                });
                return null;
              }
            }

            if (stmt.hasModifier(StmtModifier.Exported)) {
              ctx.print(stmt, "export ");
            }

            if (stmt.hasModifier(StmtModifier.Final)) {
              ctx.print(stmt, "const");
            } else {
              ctx.print(stmt, "var");
            }

            ctx.print(stmt, " ".concat(stmt.name));

            this._printColonType(stmt.type, ctx);

            if (stmt.value) {
              ctx.print(stmt, " = ");
              stmt.value.visitExpression(this, ctx);
            }

            ctx.println(stmt, ";");
            return null;
          }
        }, {
          key: "visitWrappedNodeExpr",
          value: function visitWrappedNodeExpr(ast, ctx) {
            throw new Error('Cannot visit a WrappedNodeExpr when outputting Typescript.');
          }
        }, {
          key: "visitCastExpr",
          value: function visitCastExpr(ast, ctx) {
            ctx.print(ast, "(<");
            ast.type.visitType(this, ctx);
            ctx.print(ast, ">");
            ast.value.visitExpression(this, ctx);
            ctx.print(ast, ")");
            return null;
          }
        }, {
          key: "visitInstantiateExpr",
          value: function visitInstantiateExpr(ast, ctx) {
            ctx.print(ast, "new ");
            this.typeExpression++;
            ast.classExpr.visitExpression(this, ctx);
            this.typeExpression--;
            ctx.print(ast, "(");
            this.visitAllExpressions(ast.args, ctx, ',');
            ctx.print(ast, ")");
            return null;
          }
        }, {
          key: "visitDeclareClassStmt",
          value: function visitDeclareClassStmt(stmt, ctx) {
            var _this233 = this;

            ctx.pushClass(stmt);

            if (stmt.hasModifier(StmtModifier.Exported)) {
              ctx.print(stmt, "export ");
            }

            ctx.print(stmt, "class ".concat(stmt.name));

            if (stmt.parent != null) {
              ctx.print(stmt, " extends ");
              this.typeExpression++;
              stmt.parent.visitExpression(this, ctx);
              this.typeExpression--;
            }

            ctx.println(stmt, " {");
            ctx.incIndent();
            stmt.fields.forEach(function (field) {
              return _this233._visitClassField(field, ctx);
            });

            if (stmt.constructorMethod != null) {
              this._visitClassConstructor(stmt, ctx);
            }

            stmt.getters.forEach(function (getter) {
              return _this233._visitClassGetter(getter, ctx);
            });
            stmt.methods.forEach(function (method) {
              return _this233._visitClassMethod(method, ctx);
            });
            ctx.decIndent();
            ctx.println(stmt, "}");
            ctx.popClass();
            return null;
          }
        }, {
          key: "_visitClassField",
          value: function _visitClassField(field, ctx) {
            if (field.hasModifier(StmtModifier.Private)) {
              // comment out as a workaround for #10967
              ctx.print(null, "/*private*/ ");
            }

            if (field.hasModifier(StmtModifier.Static)) {
              ctx.print(null, 'static ');
            }

            ctx.print(null, field.name);

            this._printColonType(field.type, ctx);

            if (field.initializer) {
              ctx.print(null, ' = ');
              field.initializer.visitExpression(this, ctx);
            }

            ctx.println(null, ";");
          }
        }, {
          key: "_visitClassGetter",
          value: function _visitClassGetter(getter, ctx) {
            if (getter.hasModifier(StmtModifier.Private)) {
              ctx.print(null, "private ");
            }

            ctx.print(null, "get ".concat(getter.name, "()"));

            this._printColonType(getter.type, ctx);

            ctx.println(null, " {");
            ctx.incIndent();
            this.visitAllStatements(getter.body, ctx);
            ctx.decIndent();
            ctx.println(null, "}");
          }
        }, {
          key: "_visitClassConstructor",
          value: function _visitClassConstructor(stmt, ctx) {
            ctx.print(stmt, "constructor(");

            this._visitParams(stmt.constructorMethod.params, ctx);

            ctx.println(stmt, ") {");
            ctx.incIndent();
            this.visitAllStatements(stmt.constructorMethod.body, ctx);
            ctx.decIndent();
            ctx.println(stmt, "}");
          }
        }, {
          key: "_visitClassMethod",
          value: function _visitClassMethod(method, ctx) {
            if (method.hasModifier(StmtModifier.Private)) {
              ctx.print(null, "private ");
            }

            ctx.print(null, "".concat(method.name, "("));

            this._visitParams(method.params, ctx);

            ctx.print(null, ")");

            this._printColonType(method.type, ctx, 'void');

            ctx.println(null, " {");
            ctx.incIndent();
            this.visitAllStatements(method.body, ctx);
            ctx.decIndent();
            ctx.println(null, "}");
          }
        }, {
          key: "visitFunctionExpr",
          value: function visitFunctionExpr(ast, ctx) {
            if (ast.name) {
              ctx.print(ast, 'function ');
              ctx.print(ast, ast.name);
            }

            ctx.print(ast, "(");

            this._visitParams(ast.params, ctx);

            ctx.print(ast, ")");

            this._printColonType(ast.type, ctx, 'void');

            if (!ast.name) {
              ctx.print(ast, " => ");
            }

            ctx.println(ast, '{');
            ctx.incIndent();
            this.visitAllStatements(ast.statements, ctx);
            ctx.decIndent();
            ctx.print(ast, "}");
            return null;
          }
        }, {
          key: "visitDeclareFunctionStmt",
          value: function visitDeclareFunctionStmt(stmt, ctx) {
            if (stmt.hasModifier(StmtModifier.Exported)) {
              ctx.print(stmt, "export ");
            }

            ctx.print(stmt, "function ".concat(stmt.name, "("));

            this._visitParams(stmt.params, ctx);

            ctx.print(stmt, ")");

            this._printColonType(stmt.type, ctx, 'void');

            ctx.println(stmt, " {");
            ctx.incIndent();
            this.visitAllStatements(stmt.statements, ctx);
            ctx.decIndent();
            ctx.println(stmt, "}");
            return null;
          }
        }, {
          key: "visitTryCatchStmt",
          value: function visitTryCatchStmt(stmt, ctx) {
            ctx.println(stmt, "try {");
            ctx.incIndent();
            this.visitAllStatements(stmt.bodyStmts, ctx);
            ctx.decIndent();
            ctx.println(stmt, "} catch (".concat(CATCH_ERROR_VAR$1.name, ") {"));
            ctx.incIndent();
            var catchStmts = [CATCH_STACK_VAR$1.set(CATCH_ERROR_VAR$1.prop('stack', null)).toDeclStmt(null, [StmtModifier.Final])].concat(stmt.catchStmts);
            this.visitAllStatements(catchStmts, ctx);
            ctx.decIndent();
            ctx.println(stmt, "}");
            return null;
          }
        }, {
          key: "visitBuiltinType",
          value: function visitBuiltinType(type, ctx) {
            var typeStr;

            switch (type.name) {
              case BuiltinTypeName.Bool:
                typeStr = 'boolean';
                break;

              case BuiltinTypeName.Dynamic:
                typeStr = 'any';
                break;

              case BuiltinTypeName.Function:
                typeStr = 'Function';
                break;

              case BuiltinTypeName.Number:
                typeStr = 'number';
                break;

              case BuiltinTypeName.Int:
                typeStr = 'number';
                break;

              case BuiltinTypeName.String:
                typeStr = 'string';
                break;

              case BuiltinTypeName.None:
                typeStr = 'never';
                break;

              default:
                throw new Error("Unsupported builtin type ".concat(type.name));
            }

            ctx.print(null, typeStr);
            return null;
          }
        }, {
          key: "visitExpressionType",
          value: function visitExpressionType(ast, ctx) {
            var _this234 = this;

            ast.value.visitExpression(this, ctx);

            if (ast.typeParams !== null) {
              ctx.print(null, '<');
              this.visitAllObjects(function (type) {
                return _this234.visitType(type, ctx);
              }, ast.typeParams, ctx, ',');
              ctx.print(null, '>');
            }

            return null;
          }
        }, {
          key: "visitArrayType",
          value: function visitArrayType(type, ctx) {
            this.visitType(type.of, ctx);
            ctx.print(null, "[]");
            return null;
          }
        }, {
          key: "visitMapType",
          value: function visitMapType(type, ctx) {
            ctx.print(null, "{[key: string]:");
            this.visitType(type.valueType, ctx);
            ctx.print(null, "}");
            return null;
          }
        }, {
          key: "getBuiltinMethodName",
          value: function getBuiltinMethodName(method) {
            var name;

            switch (method) {
              case BuiltinMethod.ConcatArray:
                name = 'concat';
                break;

              case BuiltinMethod.SubscribeObservable:
                name = 'subscribe';
                break;

              case BuiltinMethod.Bind:
                name = 'bind';
                break;

              default:
                throw new Error("Unknown builtin method: ".concat(method));
            }

            return name;
          }
        }, {
          key: "_visitParams",
          value: function _visitParams(params, ctx) {
            var _this235 = this;

            this.visitAllObjects(function (param) {
              ctx.print(null, param.name);

              _this235._printColonType(param.type, ctx);
            }, params, ctx, ',');
          }
        }, {
          key: "_visitIdentifier",
          value: function _visitIdentifier(value, typeParams, ctx) {
            var _this236 = this;

            var name = value.name,
                moduleName = value.moduleName;

            if (this.referenceFilter && this.referenceFilter(value)) {
              ctx.print(null, '(null as any)');
              return;
            }

            if (moduleName && (!this.importFilter || !this.importFilter(value))) {
              var prefix = this.importsWithPrefixes.get(moduleName);

              if (prefix == null) {
                prefix = "i".concat(this.importsWithPrefixes.size);
                this.importsWithPrefixes.set(moduleName, prefix);
              }

              ctx.print(null, "".concat(prefix, "."));
            }

            ctx.print(null, name);

            if (this.typeExpression > 0) {
              // If we are in a type expression that refers to a generic type then supply
              // the required type parameters. If there were not enough type parameters
              // supplied, supply any as the type. Outside a type expression the reference
              // should not supply type parameters and be treated as a simple value reference
              // to the constructor function itself.
              var suppliedParameters = typeParams || [];

              if (suppliedParameters.length > 0) {
                ctx.print(null, "<");
                this.visitAllObjects(function (type) {
                  return type.visitType(_this236, ctx);
                }, typeParams, ctx, ',');
                ctx.print(null, ">");
              }
            }
          }
        }, {
          key: "_printColonType",
          value: function _printColonType(type, ctx, defaultType) {
            if (type !== INFERRED_TYPE) {
              ctx.print(null, ':');
              this.visitType(type, ctx, defaultType);
            }
          }
        }]);

        return _TsEmitterVisitor;
      }(AbstractEmitterVisitor);
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * Resolve a `Type` for {@link Pipe}.
       *
       * This interface can be overridden by the application developer to create custom behavior.
       *
       * See {@link Compiler}
       */


      var PipeResolver = /*#__PURE__*/function () {
        function PipeResolver(_reflector) {
          _classCallCheck(this, PipeResolver);

          this._reflector = _reflector;
        }

        _createClass(PipeResolver, [{
          key: "isPipe",
          value: function isPipe(type) {
            var typeMetadata = this._reflector.annotations(resolveForwardRef(type));

            return typeMetadata && typeMetadata.some(createPipe.isTypeOf);
          }
          /**
           * Return {@link Pipe} for a given `Type`.
           */

        }, {
          key: "resolve",
          value: function resolve(type) {
            var throwIfNotFound = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

            var metas = this._reflector.annotations(resolveForwardRef(type));

            if (metas) {
              var annotation = findLast(metas, createPipe.isTypeOf);

              if (annotation) {
                return annotation;
              }
            }

            if (throwIfNotFound) {
              throw new Error("No Pipe decorator found on ".concat(stringify(type)));
            }

            return null;
          }
        }]);

        return PipeResolver;
      }();
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * Generates code that is used to type check templates.
       */


      var TypeCheckCompiler = /*#__PURE__*/function () {
        function TypeCheckCompiler(options, reflector) {
          _classCallCheck(this, TypeCheckCompiler);

          this.options = options;
          this.reflector = reflector;
        }
        /**
         * Important notes:
         * - This must not produce new `import` statements, but only refer to types outside
         *   of the file via the variables provided via externalReferenceVars.
         *   This allows Typescript to reuse the old program's structure as no imports have changed.
         * - This must not produce any exports, as this would pollute the .d.ts file
         *   and also violate the point above.
         */


        _createClass(TypeCheckCompiler, [{
          key: "compileComponent",
          value: function compileComponent(componentId, component, template, usedPipes, externalReferenceVars, ctx) {
            var _this237 = this;

            var pipes = new Map();
            usedPipes.forEach(function (p) {
              return pipes.set(p.name, p.type.reference);
            });
            var embeddedViewCount = 0;

            var viewBuilderFactory = function viewBuilderFactory(parent, guards) {
              var embeddedViewIndex = embeddedViewCount++;
              return new ViewBuilder(_this237.options, _this237.reflector, externalReferenceVars, parent, component.type.reference, component.isHost, embeddedViewIndex, pipes, guards, ctx, viewBuilderFactory);
            };

            var visitor = viewBuilderFactory(null, []);
            visitor.visitAll([], template);
            return visitor.build(componentId);
          }
        }]);

        return TypeCheckCompiler;
      }();

      var DYNAMIC_VAR_NAME = '_any';

      var TypeCheckLocalResolver = /*#__PURE__*/function () {
        function TypeCheckLocalResolver() {
          _classCallCheck(this, TypeCheckLocalResolver);
        }

        _createClass(TypeCheckLocalResolver, [{
          key: "notifyImplicitReceiverUse",
          value: function notifyImplicitReceiverUse() {}
        }, {
          key: "getLocal",
          value: function getLocal(name) {
            if (name === EventHandlerVars.event.name) {
              // References to the event should not be type-checked.
              // TODO(chuckj): determine a better type for the event.
              return variable(DYNAMIC_VAR_NAME);
            }

            return null;
          }
        }]);

        return TypeCheckLocalResolver;
      }();

      var defaultResolver = new TypeCheckLocalResolver();

      var ViewBuilder = /*#__PURE__*/function () {
        function ViewBuilder(options, reflector, externalReferenceVars, parent, component, isHostComponent, embeddedViewIndex, pipes, guards, ctx, viewBuilderFactory) {
          _classCallCheck(this, ViewBuilder);

          this.options = options;
          this.reflector = reflector;
          this.externalReferenceVars = externalReferenceVars;
          this.parent = parent;
          this.component = component;
          this.isHostComponent = isHostComponent;
          this.embeddedViewIndex = embeddedViewIndex;
          this.pipes = pipes;
          this.guards = guards;
          this.ctx = ctx;
          this.viewBuilderFactory = viewBuilderFactory;
          this.refOutputVars = new Map();
          this.variables = [];
          this.children = [];
          this.updates = [];
          this.actions = [];
        }

        _createClass(ViewBuilder, [{
          key: "getOutputVar",
          value: function getOutputVar(type) {
            var varName;

            if (type === this.component && this.isHostComponent) {
              varName = DYNAMIC_VAR_NAME;
            } else if (type instanceof StaticSymbol) {
              varName = this.externalReferenceVars.get(type);
            } else {
              varName = DYNAMIC_VAR_NAME;
            }

            if (!varName) {
              throw new Error("Illegal State: referring to a type without a variable ".concat(JSON.stringify(type)));
            }

            return varName;
          }
        }, {
          key: "getTypeGuardExpressions",
          value: function getTypeGuardExpressions(ast) {
            var result = _toConsumableArray(this.guards);

            var _iterator24 = _createForOfIteratorHelper(ast.directives),
                _step24;

            try {
              for (_iterator24.s(); !(_step24 = _iterator24.n()).done;) {
                var directive = _step24.value;

                var _iterator25 = _createForOfIteratorHelper(directive.inputs),
                    _step25;

                try {
                  for (_iterator25.s(); !(_step25 = _iterator25.n()).done;) {
                    var input = _step25.value;
                    var guard = directive.directive.guards[input.directiveName];

                    if (guard) {
                      var useIf = guard === 'UseIf';
                      result.push({
                        guard: guard,
                        useIf: useIf,
                        expression: {
                          context: this.component,
                          value: input.value,
                          sourceSpan: input.sourceSpan
                        }
                      });
                    }
                  }
                } catch (err) {
                  _iterator25.e(err);
                } finally {
                  _iterator25.f();
                }
              }
            } catch (err) {
              _iterator24.e(err);
            } finally {
              _iterator24.f();
            }

            return result;
          }
        }, {
          key: "visitAll",
          value: function visitAll(variables, astNodes) {
            this.variables = variables;
            templateVisitAll(this, astNodes);
          }
        }, {
          key: "build",
          value: function build(componentId) {
            var _this238 = this;

            var targetStatements = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
            this.children.forEach(function (child) {
              return child.build(componentId, targetStatements);
            });
            var viewStmts = [variable(DYNAMIC_VAR_NAME).set(NULL_EXPR).toDeclStmt(DYNAMIC_TYPE)];
            var bindingCount = 0;
            this.updates.forEach(function (expression) {
              var _viewStmts;

              var _this238$preprocessUp = _this238.preprocessUpdateExpression(expression),
                  sourceSpan = _this238$preprocessUp.sourceSpan,
                  context = _this238$preprocessUp.context,
                  value = _this238$preprocessUp.value;

              var bindingId = "".concat(bindingCount++);
              var nameResolver = context === _this238.component ? _this238 : defaultResolver;

              var _convertPropertyBindi = _convertPropertyBinding(nameResolver, variable(_this238.getOutputVar(context)), value, bindingId, BindingForm.General),
                  stmts = _convertPropertyBindi.stmts,
                  currValExpr = _convertPropertyBindi.currValExpr;

              stmts.push(new ExpressionStatement(currValExpr));

              (_viewStmts = viewStmts).push.apply(_viewStmts, _toConsumableArray(stmts.map(function (stmt) {
                return applySourceSpanToStatementIfNeeded(stmt, sourceSpan);
              })));
            });
            this.actions.forEach(function (_ref37) {
              var _viewStmts2;

              var sourceSpan = _ref37.sourceSpan,
                  context = _ref37.context,
                  value = _ref37.value;
              var bindingId = "".concat(bindingCount++);
              var nameResolver = context === _this238.component ? _this238 : defaultResolver;

              var _convertActionBinding = convertActionBinding(nameResolver, variable(_this238.getOutputVar(context)), value, bindingId),
                  stmts = _convertActionBinding.stmts;

              (_viewStmts2 = viewStmts).push.apply(_viewStmts2, _toConsumableArray(stmts.map(function (stmt) {
                return applySourceSpanToStatementIfNeeded(stmt, sourceSpan);
              })));
            });

            if (this.guards.length) {
              var guardExpression = undefined;

              var _iterator26 = _createForOfIteratorHelper(this.guards),
                  _step26;

              try {
                for (_iterator26.s(); !(_step26 = _iterator26.n()).done;) {
                  var guard = _step26.value;

                  var _this$preprocessUpdat = this.preprocessUpdateExpression(guard.expression),
                      context = _this$preprocessUpdat.context,
                      value = _this$preprocessUpdat.value;

                  var bindingId = "".concat(bindingCount++);
                  var nameResolver = context === this.component ? this : defaultResolver; // We only support support simple expressions and ignore others as they
                  // are unlikely to affect type narrowing.

                  var _convertPropertyBindi2 = _convertPropertyBinding(nameResolver, variable(this.getOutputVar(context)), value, bindingId, BindingForm.TrySimple),
                      stmts = _convertPropertyBindi2.stmts,
                      currValExpr = _convertPropertyBindi2.currValExpr;

                  if (stmts.length == 0) {
                    var guardClause = guard.useIf ? currValExpr : this.ctx.importExpr(guard.guard).callFn([currValExpr]);
                    guardExpression = guardExpression ? guardExpression.and(guardClause) : guardClause;
                  }
                }
              } catch (err) {
                _iterator26.e(err);
              } finally {
                _iterator26.f();
              }

              if (guardExpression) {
                viewStmts = [new IfStmt(guardExpression, viewStmts)];
              }
            }

            var viewName = "_View_".concat(componentId, "_").concat(this.embeddedViewIndex);
            var viewFactory = new DeclareFunctionStmt(viewName, [], viewStmts);
            targetStatements.push(viewFactory);
            return targetStatements;
          }
        }, {
          key: "visitBoundText",
          value: function visitBoundText(ast, context) {
            var _this239 = this;

            var astWithSource = ast.value;
            var inter = astWithSource.ast;
            inter.expressions.forEach(function (expr) {
              return _this239.updates.push({
                context: _this239.component,
                value: expr,
                sourceSpan: ast.sourceSpan
              });
            });
          }
        }, {
          key: "visitEmbeddedTemplate",
          value: function visitEmbeddedTemplate(ast, context) {
            this.visitElementOrTemplate(ast); // Note: The old view compiler used to use an `any` type
            // for the context in any embedded view.
            // We keep this behaivor behind a flag for now.

            if (this.options.fullTemplateTypeCheck) {
              // Find any applicable type guards. For example, NgIf has a type guard on ngIf
              // (see NgIf.ngIfTypeGuard) that can be used to indicate that a template is only
              // stamped out if ngIf is truthy so any bindings in the template can assume that,
              // if a nullable type is used for ngIf, that expression is not null or undefined.
              var guards = this.getTypeGuardExpressions(ast);
              var childVisitor = this.viewBuilderFactory(this, guards);
              this.children.push(childVisitor);
              childVisitor.visitAll(ast.variables, ast.children);
            }
          }
        }, {
          key: "visitElement",
          value: function visitElement(ast, context) {
            var _this240 = this;

            this.visitElementOrTemplate(ast);
            var inputDefs = [];
            var updateRendererExpressions = [];
            var outputDefs = [];
            ast.inputs.forEach(function (inputAst) {
              _this240.updates.push({
                context: _this240.component,
                value: inputAst.value,
                sourceSpan: inputAst.sourceSpan
              });
            });
            templateVisitAll(this, ast.children);
          }
        }, {
          key: "visitElementOrTemplate",
          value: function visitElementOrTemplate(ast) {
            var _this241 = this;

            ast.directives.forEach(function (dirAst) {
              _this241.visitDirective(dirAst);
            });
            ast.references.forEach(function (ref) {
              var outputVarType = null; // Note: The old view compiler used to use an `any` type
              // for directives exposed via `exportAs`.
              // We keep this behaivor behind a flag for now.

              if (ref.value && ref.value.identifier && _this241.options.fullTemplateTypeCheck) {
                outputVarType = ref.value.identifier.reference;
              } else {
                outputVarType = BuiltinTypeName.Dynamic;
              }

              _this241.refOutputVars.set(ref.name, outputVarType);
            });
            ast.outputs.forEach(function (outputAst) {
              _this241.actions.push({
                context: _this241.component,
                value: outputAst.handler,
                sourceSpan: outputAst.sourceSpan
              });
            });
          }
        }, {
          key: "visitDirective",
          value: function visitDirective(dirAst) {
            var _this242 = this;

            var dirType = dirAst.directive.type.reference;
            dirAst.inputs.forEach(function (input) {
              return _this242.updates.push({
                context: _this242.component,
                value: input.value,
                sourceSpan: input.sourceSpan
              });
            }); // Note: The old view compiler used to use an `any` type
            // for expressions in host properties / events.
            // We keep this behaivor behind a flag for now.

            if (this.options.fullTemplateTypeCheck) {
              dirAst.hostProperties.forEach(function (inputAst) {
                return _this242.updates.push({
                  context: dirType,
                  value: inputAst.value,
                  sourceSpan: inputAst.sourceSpan
                });
              });
              dirAst.hostEvents.forEach(function (hostEventAst) {
                return _this242.actions.push({
                  context: dirType,
                  value: hostEventAst.handler,
                  sourceSpan: hostEventAst.sourceSpan
                });
              });
            }
          }
        }, {
          key: "notifyImplicitReceiverUse",
          value: function notifyImplicitReceiverUse() {}
        }, {
          key: "getLocal",
          value: function getLocal(name) {
            if (name == EventHandlerVars.event.name) {
              return variable(this.getOutputVar(BuiltinTypeName.Dynamic));
            }

            for (var currBuilder = this; currBuilder; currBuilder = currBuilder.parent) {
              var outputVarType = void 0; // check references

              outputVarType = currBuilder.refOutputVars.get(name);

              if (outputVarType == null) {
                // check variables
                var varAst = currBuilder.variables.find(function (varAst) {
                  return varAst.name === name;
                });

                if (varAst) {
                  outputVarType = BuiltinTypeName.Dynamic;
                }
              }

              if (outputVarType != null) {
                return variable(this.getOutputVar(outputVarType));
              }
            }

            return null;
          }
        }, {
          key: "pipeOutputVar",
          value: function pipeOutputVar(name) {
            var pipe = this.pipes.get(name);

            if (!pipe) {
              throw new Error("Illegal State: Could not find pipe ".concat(name, " in template of ").concat(this.component));
            }

            return this.getOutputVar(pipe);
          }
        }, {
          key: "preprocessUpdateExpression",
          value: function preprocessUpdateExpression(expression) {
            var _this243 = this;

            return {
              sourceSpan: expression.sourceSpan,
              context: expression.context,
              value: convertPropertyBindingBuiltins({
                createLiteralArrayConverter: function createLiteralArrayConverter(argCount) {
                  return function (args) {
                    var arr = literalArr(args); // Note: The old view compiler used to use an `any` type
                    // for arrays.

                    return _this243.options.fullTemplateTypeCheck ? arr : arr.cast(DYNAMIC_TYPE);
                  };
                },
                createLiteralMapConverter: function createLiteralMapConverter(keys) {
                  return function (values) {
                    var entries = keys.map(function (k, i) {
                      return {
                        key: k.key,
                        value: values[i],
                        quoted: k.quoted
                      };
                    });
                    var map = literalMap(entries); // Note: The old view compiler used to use an `any` type
                    // for maps.

                    return _this243.options.fullTemplateTypeCheck ? map : map.cast(DYNAMIC_TYPE);
                  };
                },
                createPipeConverter: function createPipeConverter(name, argCount) {
                  return function (args) {
                    // Note: The old view compiler used to use an `any` type
                    // for pipes.
                    var pipeExpr = _this243.options.fullTemplateTypeCheck ? variable(_this243.pipeOutputVar(name)) : variable(_this243.getOutputVar(BuiltinTypeName.Dynamic));
                    return pipeExpr.callMethod('transform', args);
                  };
                }
              }, expression.value)
            };
          }
        }, {
          key: "visitNgContent",
          value: function visitNgContent(ast, context) {}
        }, {
          key: "visitText",
          value: function visitText(ast, context) {}
        }, {
          key: "visitDirectiveProperty",
          value: function visitDirectiveProperty(ast, context) {}
        }, {
          key: "visitReference",
          value: function visitReference(ast, context) {}
        }, {
          key: "visitVariable",
          value: function visitVariable(ast, context) {}
        }, {
          key: "visitEvent",
          value: function visitEvent(ast, context) {}
        }, {
          key: "visitElementProperty",
          value: function visitElementProperty(ast, context) {}
        }, {
          key: "visitAttr",
          value: function visitAttr(ast, context) {}
        }]);

        return ViewBuilder;
      }();
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      var CLASS_ATTR$1 = 'class';
      var STYLE_ATTR = 'style';
      var IMPLICIT_TEMPLATE_VAR = '\$implicit';

      var ViewCompileResult = function ViewCompileResult(viewClassVar, rendererTypeVar) {
        _classCallCheck(this, ViewCompileResult);

        this.viewClassVar = viewClassVar;
        this.rendererTypeVar = rendererTypeVar;
      };

      var ViewCompiler = /*#__PURE__*/function () {
        function ViewCompiler(_reflector) {
          _classCallCheck(this, ViewCompiler);

          this._reflector = _reflector;
        }

        _createClass(ViewCompiler, [{
          key: "compileComponent",
          value: function compileComponent(outputCtx, component, template, styles, usedPipes) {
            var _this244 = this,
                _outputCtx$statements;

            var embeddedViewCount = 0;
            var renderComponentVarName = undefined;

            if (!component.isHost) {
              var _template = component.template;
              var customRenderData = [];

              if (_template.animations && _template.animations.length) {
                customRenderData.push(new LiteralMapEntry('animation', convertValueToOutputAst(outputCtx, _template.animations), true));
              }

              var renderComponentVar = variable(rendererTypeName(component.type.reference));
              renderComponentVarName = renderComponentVar.name;
              outputCtx.statements.push(renderComponentVar.set(importExpr(Identifiers.createRendererType2).callFn([new LiteralMapExpr([new LiteralMapEntry('encapsulation', literal(_template.encapsulation), false), new LiteralMapEntry('styles', styles, false), new LiteralMapEntry('data', new LiteralMapExpr(customRenderData), false)])])).toDeclStmt(importType(Identifiers.RendererType2), [StmtModifier.Final, StmtModifier.Exported]));
            }

            var viewBuilderFactory = function viewBuilderFactory(parent) {
              var embeddedViewIndex = embeddedViewCount++;
              return new ViewBuilder$1(_this244._reflector, outputCtx, parent, component, embeddedViewIndex, usedPipes, viewBuilderFactory);
            };

            var visitor = viewBuilderFactory(null);
            visitor.visitAll([], template);

            (_outputCtx$statements = outputCtx.statements).push.apply(_outputCtx$statements, _toConsumableArray(visitor.build()));

            return new ViewCompileResult(visitor.viewName, renderComponentVarName);
          }
        }]);

        return ViewCompiler;
      }();

      var LOG_VAR$1 = variable('_l');
      var VIEW_VAR = variable('_v');
      var CHECK_VAR = variable('_ck');
      var COMP_VAR = variable('_co');
      var EVENT_NAME_VAR = variable('en');
      var ALLOW_DEFAULT_VAR = variable("ad");

      var ViewBuilder$1 = /*#__PURE__*/function () {
        function ViewBuilder$1(reflector, outputCtx, parent, component, embeddedViewIndex, usedPipes, viewBuilderFactory) {
          _classCallCheck(this, ViewBuilder$1);

          this.reflector = reflector;
          this.outputCtx = outputCtx;
          this.parent = parent;
          this.component = component;
          this.embeddedViewIndex = embeddedViewIndex;
          this.usedPipes = usedPipes;
          this.viewBuilderFactory = viewBuilderFactory;
          this.nodes = [];
          this.purePipeNodeIndices = Object.create(null); // Need Object.create so that we don't have builtin values...

          this.refNodeIndices = Object.create(null);
          this.variables = [];
          this.children = []; // TODO(tbosch): The old view compiler used to use an `any` type
          // for the context in any embedded view. We keep this behaivor for now
          // to be able to introduce the new view compiler without too many errors.

          this.compType = this.embeddedViewIndex > 0 ? DYNAMIC_TYPE : expressionType(outputCtx.importExpr(this.component.type.reference));
          this.viewName = viewClassName(this.component.type.reference, this.embeddedViewIndex);
        }

        _createClass(ViewBuilder$1, [{
          key: "visitAll",
          value: function visitAll(variables, astNodes) {
            var _this245 = this;

            this.variables = variables; // create the pipes for the pure pipes immediately, so that we know their indices.

            if (!this.parent) {
              this.usedPipes.forEach(function (pipe) {
                if (pipe.pure) {
                  _this245.purePipeNodeIndices[pipe.name] = _this245._createPipe(null, pipe);
                }
              });
            }

            if (!this.parent) {
              this.component.viewQueries.forEach(function (query, queryIndex) {
                // Note: queries start with id 1 so we can use the number in a Bloom filter!
                var queryId = queryIndex + 1;
                var bindingType = query.first ? 0
                /* First */
                : 1
                /* All */
                ;
                var flags = 134217728
                /* TypeViewQuery */
                | calcQueryFlags(query);

                _this245.nodes.push(function () {
                  return {
                    sourceSpan: null,
                    nodeFlags: flags,
                    nodeDef: importExpr(Identifiers.queryDef).callFn([literal(flags), literal(queryId), new LiteralMapExpr([new LiteralMapEntry(query.propertyName, literal(bindingType), false)])])
                  };
                });
              });
            }

            templateVisitAll(this, astNodes);

            if (this.parent && (astNodes.length === 0 || needsAdditionalRootNode(astNodes))) {
              // if the view is an embedded view, then we need to add an additional root node in some cases
              this.nodes.push(function () {
                return {
                  sourceSpan: null,
                  nodeFlags: 1
                  /* TypeElement */
                  ,
                  nodeDef: importExpr(Identifiers.anchorDef).callFn([literal(0
                  /* None */
                  ), NULL_EXPR, NULL_EXPR, literal(0)])
                };
              });
            }
          }
        }, {
          key: "build",
          value: function build() {
            var targetStatements = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
            this.children.forEach(function (child) {
              return child.build(targetStatements);
            });

            var _this$_createNodeExpr = this._createNodeExpressions(),
                updateRendererStmts = _this$_createNodeExpr.updateRendererStmts,
                updateDirectivesStmts = _this$_createNodeExpr.updateDirectivesStmts,
                nodeDefExprs = _this$_createNodeExpr.nodeDefExprs;

            var updateRendererFn = this._createUpdateFn(updateRendererStmts);

            var updateDirectivesFn = this._createUpdateFn(updateDirectivesStmts);

            var viewFlags = 0
            /* None */
            ;

            if (!this.parent && this.component.changeDetection === ChangeDetectionStrategy.OnPush) {
              viewFlags |= 2
              /* OnPush */
              ;
            }

            var viewFactory = new DeclareFunctionStmt(this.viewName, [new FnParam(LOG_VAR$1.name)], [new ReturnStatement(importExpr(Identifiers.viewDef).callFn([literal(viewFlags), literalArr(nodeDefExprs), updateDirectivesFn, updateRendererFn]))], importType(Identifiers.ViewDefinition), this.embeddedViewIndex === 0 ? [StmtModifier.Exported] : []);
            targetStatements.push(viewFactory);
            return targetStatements;
          }
        }, {
          key: "_createUpdateFn",
          value: function _createUpdateFn(updateStmts) {
            var updateFn;

            if (updateStmts.length > 0) {
              var preStmts = [];

              if (!this.component.isHost && findReadVarNames(updateStmts).has(COMP_VAR.name)) {
                preStmts.push(COMP_VAR.set(VIEW_VAR.prop('component')).toDeclStmt(this.compType));
              }

              updateFn = fn([new FnParam(CHECK_VAR.name, INFERRED_TYPE), new FnParam(VIEW_VAR.name, INFERRED_TYPE)], [].concat(preStmts, _toConsumableArray(updateStmts)), INFERRED_TYPE);
            } else {
              updateFn = NULL_EXPR;
            }

            return updateFn;
          }
        }, {
          key: "visitNgContent",
          value: function visitNgContent(ast, context) {
            // ngContentDef(ngContentIndex: number, index: number): NodeDef;
            this.nodes.push(function () {
              return {
                sourceSpan: ast.sourceSpan,
                nodeFlags: 8
                /* TypeNgContent */
                ,
                nodeDef: importExpr(Identifiers.ngContentDef).callFn([literal(ast.ngContentIndex), literal(ast.index)])
              };
            });
          }
        }, {
          key: "visitText",
          value: function visitText(ast, context) {
            // Static text nodes have no check function
            var checkIndex = -1;
            this.nodes.push(function () {
              return {
                sourceSpan: ast.sourceSpan,
                nodeFlags: 2
                /* TypeText */
                ,
                nodeDef: importExpr(Identifiers.textDef).callFn([literal(checkIndex), literal(ast.ngContentIndex), literalArr([literal(ast.value)])])
              };
            });
          }
        }, {
          key: "visitBoundText",
          value: function visitBoundText(ast, context) {
            var _this246 = this;

            var nodeIndex = this.nodes.length; // reserve the space in the nodeDefs array

            this.nodes.push(null);
            var astWithSource = ast.value;
            var inter = astWithSource.ast;
            var updateRendererExpressions = inter.expressions.map(function (expr, bindingIndex) {
              return _this246._preprocessUpdateExpression({
                nodeIndex: nodeIndex,
                bindingIndex: bindingIndex,
                sourceSpan: ast.sourceSpan,
                context: COMP_VAR,
                value: expr
              });
            }); // Check index is the same as the node index during compilation
            // They might only differ at runtime

            var checkIndex = nodeIndex;

            this.nodes[nodeIndex] = function () {
              return {
                sourceSpan: ast.sourceSpan,
                nodeFlags: 2
                /* TypeText */
                ,
                nodeDef: importExpr(Identifiers.textDef).callFn([literal(checkIndex), literal(ast.ngContentIndex), literalArr(inter.strings.map(function (s) {
                  return literal(s);
                }))]),
                updateRenderer: updateRendererExpressions
              };
            };
          }
        }, {
          key: "visitEmbeddedTemplate",
          value: function visitEmbeddedTemplate(ast, context) {
            var _this247 = this;

            var nodeIndex = this.nodes.length; // reserve the space in the nodeDefs array

            this.nodes.push(null);

            var _this$_visitElementOr = this._visitElementOrTemplate(nodeIndex, ast),
                flags = _this$_visitElementOr.flags,
                queryMatchesExpr = _this$_visitElementOr.queryMatchesExpr,
                hostEvents = _this$_visitElementOr.hostEvents;

            var childVisitor = this.viewBuilderFactory(this);
            this.children.push(childVisitor);
            childVisitor.visitAll(ast.variables, ast.children);
            var childCount = this.nodes.length - nodeIndex - 1; // anchorDef(
            //   flags: NodeFlags, matchedQueries: [string, QueryValueType][], ngContentIndex: number,
            //   childCount: number, handleEventFn?: ElementHandleEventFn, templateFactory?:
            //   ViewDefinitionFactory): NodeDef;

            this.nodes[nodeIndex] = function () {
              return {
                sourceSpan: ast.sourceSpan,
                nodeFlags: 1
                /* TypeElement */
                | flags,
                nodeDef: importExpr(Identifiers.anchorDef).callFn([literal(flags), queryMatchesExpr, literal(ast.ngContentIndex), literal(childCount), _this247._createElementHandleEventFn(nodeIndex, hostEvents), variable(childVisitor.viewName)])
              };
            };
          }
        }, {
          key: "visitElement",
          value: function visitElement(ast, context) {
            var _this248 = this;

            var nodeIndex = this.nodes.length; // reserve the space in the nodeDefs array so we can add children

            this.nodes.push(null); // Using a null element name creates an anchor.

            var elName = isNgContainer(ast.name) ? null : ast.name;

            var _this$_visitElementOr2 = this._visitElementOrTemplate(nodeIndex, ast),
                flags = _this$_visitElementOr2.flags,
                usedEvents = _this$_visitElementOr2.usedEvents,
                queryMatchesExpr = _this$_visitElementOr2.queryMatchesExpr,
                dirHostBindings = _this$_visitElementOr2.hostBindings,
                hostEvents = _this$_visitElementOr2.hostEvents;

            var inputDefs = [];
            var updateRendererExpressions = [];
            var outputDefs = [];

            if (elName) {
              var hostBindings = ast.inputs.map(function (inputAst) {
                return {
                  context: COMP_VAR,
                  inputAst: inputAst,
                  dirAst: null
                };
              }).concat(dirHostBindings);

              if (hostBindings.length) {
                updateRendererExpressions = hostBindings.map(function (hostBinding, bindingIndex) {
                  return _this248._preprocessUpdateExpression({
                    context: hostBinding.context,
                    nodeIndex: nodeIndex,
                    bindingIndex: bindingIndex,
                    sourceSpan: hostBinding.inputAst.sourceSpan,
                    value: hostBinding.inputAst.value
                  });
                });
                inputDefs = hostBindings.map(function (hostBinding) {
                  return elementBindingDef(hostBinding.inputAst, hostBinding.dirAst);
                });
              }

              outputDefs = usedEvents.map(function (_ref38) {
                var _ref39 = _slicedToArray(_ref38, 2),
                    target = _ref39[0],
                    eventName = _ref39[1];

                return literalArr([literal(target), literal(eventName)]);
              });
            }

            templateVisitAll(this, ast.children);
            var childCount = this.nodes.length - nodeIndex - 1;
            var compAst = ast.directives.find(function (dirAst) {
              return dirAst.directive.isComponent;
            });
            var compRendererType = NULL_EXPR;
            var compView = NULL_EXPR;

            if (compAst) {
              compView = this.outputCtx.importExpr(compAst.directive.componentViewType);
              compRendererType = this.outputCtx.importExpr(compAst.directive.rendererType);
            } // Check index is the same as the node index during compilation
            // They might only differ at runtime


            var checkIndex = nodeIndex;

            this.nodes[nodeIndex] = function () {
              return {
                sourceSpan: ast.sourceSpan,
                nodeFlags: 1
                /* TypeElement */
                | flags,
                nodeDef: importExpr(Identifiers.elementDef).callFn([literal(checkIndex), literal(flags), queryMatchesExpr, literal(ast.ngContentIndex), literal(childCount), literal(elName), elName ? fixedAttrsDef(ast) : NULL_EXPR, inputDefs.length ? literalArr(inputDefs) : NULL_EXPR, outputDefs.length ? literalArr(outputDefs) : NULL_EXPR, _this248._createElementHandleEventFn(nodeIndex, hostEvents), compView, compRendererType]),
                updateRenderer: updateRendererExpressions
              };
            };
          }
        }, {
          key: "_visitElementOrTemplate",
          value: function _visitElementOrTemplate(nodeIndex, ast) {
            var _this249 = this;

            var flags = 0
            /* None */
            ;

            if (ast.hasViewContainer) {
              flags |= 16777216
              /* EmbeddedViews */
              ;
            }

            var usedEvents = new Map();
            ast.outputs.forEach(function (event) {
              var _elementEventNameAndT = elementEventNameAndTarget(event, null),
                  name = _elementEventNameAndT.name,
                  target = _elementEventNameAndT.target;

              usedEvents.set(elementEventFullName(target, name), [target, name]);
            });
            ast.directives.forEach(function (dirAst) {
              dirAst.hostEvents.forEach(function (event) {
                var _elementEventNameAndT2 = elementEventNameAndTarget(event, dirAst),
                    name = _elementEventNameAndT2.name,
                    target = _elementEventNameAndT2.target;

                usedEvents.set(elementEventFullName(target, name), [target, name]);
              });
            });
            var hostBindings = [];
            var hostEvents = [];

            this._visitComponentFactoryResolverProvider(ast.directives);

            ast.providers.forEach(function (providerAst) {
              var dirAst = undefined;
              ast.directives.forEach(function (localDirAst) {
                if (localDirAst.directive.type.reference === tokenReference(providerAst.token)) {
                  dirAst = localDirAst;
                }
              });

              if (dirAst) {
                var _this249$_visitDirect = _this249._visitDirective(providerAst, dirAst, ast.references, ast.queryMatches, usedEvents),
                    dirHostBindings = _this249$_visitDirect.hostBindings,
                    dirHostEvents = _this249$_visitDirect.hostEvents;

                hostBindings.push.apply(hostBindings, _toConsumableArray(dirHostBindings));
                hostEvents.push.apply(hostEvents, _toConsumableArray(dirHostEvents));
              } else {
                _this249._visitProvider(providerAst, ast.queryMatches);
              }
            });
            var queryMatchExprs = [];
            ast.queryMatches.forEach(function (match) {
              var valueType = undefined;

              if (tokenReference(match.value) === _this249.reflector.resolveExternalReference(Identifiers.ElementRef)) {
                valueType = 0
                /* ElementRef */
                ;
              } else if (tokenReference(match.value) === _this249.reflector.resolveExternalReference(Identifiers.ViewContainerRef)) {
                valueType = 3
                /* ViewContainerRef */
                ;
              } else if (tokenReference(match.value) === _this249.reflector.resolveExternalReference(Identifiers.TemplateRef)) {
                valueType = 2
                /* TemplateRef */
                ;
              }

              if (valueType != null) {
                queryMatchExprs.push(literalArr([literal(match.queryId), literal(valueType)]));
              }
            });
            ast.references.forEach(function (ref) {
              var valueType = undefined;

              if (!ref.value) {
                valueType = 1
                /* RenderElement */
                ;
              } else if (tokenReference(ref.value) === _this249.reflector.resolveExternalReference(Identifiers.TemplateRef)) {
                valueType = 2
                /* TemplateRef */
                ;
              }

              if (valueType != null) {
                _this249.refNodeIndices[ref.name] = nodeIndex;
                queryMatchExprs.push(literalArr([literal(ref.name), literal(valueType)]));
              }
            });
            ast.outputs.forEach(function (outputAst) {
              hostEvents.push({
                context: COMP_VAR,
                eventAst: outputAst,
                dirAst: null
              });
            });
            return {
              flags: flags,
              usedEvents: Array.from(usedEvents.values()),
              queryMatchesExpr: queryMatchExprs.length ? literalArr(queryMatchExprs) : NULL_EXPR,
              hostBindings: hostBindings,
              hostEvents: hostEvents
            };
          }
        }, {
          key: "_visitDirective",
          value: function _visitDirective(providerAst, dirAst, refs, queryMatches, usedEvents) {
            var _this250 = this;

            var nodeIndex = this.nodes.length; // reserve the space in the nodeDefs array so we can add children

            this.nodes.push(null);
            dirAst.directive.queries.forEach(function (query, queryIndex) {
              var queryId = dirAst.contentQueryStartId + queryIndex;
              var flags = 67108864
              /* TypeContentQuery */
              | calcQueryFlags(query);
              var bindingType = query.first ? 0
              /* First */
              : 1
              /* All */
              ;

              _this250.nodes.push(function () {
                return {
                  sourceSpan: dirAst.sourceSpan,
                  nodeFlags: flags,
                  nodeDef: importExpr(Identifiers.queryDef).callFn([literal(flags), literal(queryId), new LiteralMapExpr([new LiteralMapEntry(query.propertyName, literal(bindingType), false)])])
                };
              });
            }); // Note: the operation below might also create new nodeDefs,
            // but we don't want them to be a child of a directive,
            // as they might be a provider/pipe on their own.
            // I.e. we only allow queries as children of directives nodes.

            var childCount = this.nodes.length - nodeIndex - 1;

            var _this$_visitProviderO = this._visitProviderOrDirective(providerAst, queryMatches),
                flags = _this$_visitProviderO.flags,
                queryMatchExprs = _this$_visitProviderO.queryMatchExprs,
                providerExpr = _this$_visitProviderO.providerExpr,
                depsExpr = _this$_visitProviderO.depsExpr;

            refs.forEach(function (ref) {
              if (ref.value && tokenReference(ref.value) === tokenReference(providerAst.token)) {
                _this250.refNodeIndices[ref.name] = nodeIndex;
                queryMatchExprs.push(literalArr([literal(ref.name), literal(4
                /* Provider */
                )]));
              }
            });

            if (dirAst.directive.isComponent) {
              flags |= 32768
              /* Component */
              ;
            }

            var inputDefs = dirAst.inputs.map(function (inputAst, inputIndex) {
              var mapValue = literalArr([literal(inputIndex), literal(inputAst.directiveName)]); // Note: it's important to not quote the key so that we can capture renames by minifiers!

              return new LiteralMapEntry(inputAst.directiveName, mapValue, false);
            });
            var outputDefs = [];
            var dirMeta = dirAst.directive;
            Object.keys(dirMeta.outputs).forEach(function (propName) {
              var eventName = dirMeta.outputs[propName];

              if (usedEvents.has(eventName)) {
                // Note: it's important to not quote the key so that we can capture renames by minifiers!
                outputDefs.push(new LiteralMapEntry(propName, literal(eventName), false));
              }
            });
            var updateDirectiveExpressions = [];

            if (dirAst.inputs.length || (flags & (262144
            /* DoCheck */
            | 65536
            /* OnInit */
            )) > 0) {
              updateDirectiveExpressions = dirAst.inputs.map(function (input, bindingIndex) {
                return _this250._preprocessUpdateExpression({
                  nodeIndex: nodeIndex,
                  bindingIndex: bindingIndex,
                  sourceSpan: input.sourceSpan,
                  context: COMP_VAR,
                  value: input.value
                });
              });
            }

            var dirContextExpr = importExpr(Identifiers.nodeValue).callFn([VIEW_VAR, literal(nodeIndex)]);
            var hostBindings = dirAst.hostProperties.map(function (inputAst) {
              return {
                context: dirContextExpr,
                dirAst: dirAst,
                inputAst: inputAst
              };
            });
            var hostEvents = dirAst.hostEvents.map(function (hostEventAst) {
              return {
                context: dirContextExpr,
                eventAst: hostEventAst,
                dirAst: dirAst
              };
            }); // Check index is the same as the node index during compilation
            // They might only differ at runtime

            var checkIndex = nodeIndex;

            this.nodes[nodeIndex] = function () {
              return {
                sourceSpan: dirAst.sourceSpan,
                nodeFlags: 16384
                /* TypeDirective */
                | flags,
                nodeDef: importExpr(Identifiers.directiveDef).callFn([literal(checkIndex), literal(flags), queryMatchExprs.length ? literalArr(queryMatchExprs) : NULL_EXPR, literal(childCount), providerExpr, depsExpr, inputDefs.length ? new LiteralMapExpr(inputDefs) : NULL_EXPR, outputDefs.length ? new LiteralMapExpr(outputDefs) : NULL_EXPR]),
                updateDirectives: updateDirectiveExpressions,
                directive: dirAst.directive.type
              };
            };

            return {
              hostBindings: hostBindings,
              hostEvents: hostEvents
            };
          }
        }, {
          key: "_visitProvider",
          value: function _visitProvider(providerAst, queryMatches) {
            this._addProviderNode(this._visitProviderOrDirective(providerAst, queryMatches));
          }
        }, {
          key: "_visitComponentFactoryResolverProvider",
          value: function _visitComponentFactoryResolverProvider(directives) {
            var componentDirMeta = directives.find(function (dirAst) {
              return dirAst.directive.isComponent;
            });

            if (componentDirMeta && componentDirMeta.directive.entryComponents.length) {
              var _componentFactoryReso = componentFactoryResolverProviderDef(this.reflector, this.outputCtx, 8192
              /* PrivateProvider */
              , componentDirMeta.directive.entryComponents),
                  providerExpr = _componentFactoryReso.providerExpr,
                  depsExpr = _componentFactoryReso.depsExpr,
                  flags = _componentFactoryReso.flags,
                  _tokenExpr = _componentFactoryReso.tokenExpr;

              this._addProviderNode({
                providerExpr: providerExpr,
                depsExpr: depsExpr,
                flags: flags,
                tokenExpr: _tokenExpr,
                queryMatchExprs: [],
                sourceSpan: componentDirMeta.sourceSpan
              });
            }
          }
        }, {
          key: "_addProviderNode",
          value: function _addProviderNode(data) {
            // providerDef(
            //   flags: NodeFlags, matchedQueries: [string, QueryValueType][], token:any,
            //   value: any, deps: ([DepFlags, any] | any)[]): NodeDef;
            this.nodes.push(function () {
              return {
                sourceSpan: data.sourceSpan,
                nodeFlags: data.flags,
                nodeDef: importExpr(Identifiers.providerDef).callFn([literal(data.flags), data.queryMatchExprs.length ? literalArr(data.queryMatchExprs) : NULL_EXPR, data.tokenExpr, data.providerExpr, data.depsExpr])
              };
            });
          }
        }, {
          key: "_visitProviderOrDirective",
          value: function _visitProviderOrDirective(providerAst, queryMatches) {
            var flags = 0
            /* None */
            ;
            var queryMatchExprs = [];
            queryMatches.forEach(function (match) {
              if (tokenReference(match.value) === tokenReference(providerAst.token)) {
                queryMatchExprs.push(literalArr([literal(match.queryId), literal(4
                /* Provider */
                )]));
              }
            });

            var _providerDef = providerDef(this.outputCtx, providerAst),
                providerExpr = _providerDef.providerExpr,
                depsExpr = _providerDef.depsExpr,
                providerFlags = _providerDef.flags,
                tokenExpr = _providerDef.tokenExpr;

            return {
              flags: flags | providerFlags,
              queryMatchExprs: queryMatchExprs,
              providerExpr: providerExpr,
              depsExpr: depsExpr,
              tokenExpr: tokenExpr,
              sourceSpan: providerAst.sourceSpan
            };
          }
        }, {
          key: "getLocal",
          value: function getLocal(name) {
            if (name == EventHandlerVars.event.name) {
              return EventHandlerVars.event;
            }

            var currViewExpr = VIEW_VAR;

            for (var currBuilder = this; currBuilder; currBuilder = currBuilder.parent, currViewExpr = currViewExpr.prop('parent').cast(DYNAMIC_TYPE)) {
              // check references
              var refNodeIndex = currBuilder.refNodeIndices[name];

              if (refNodeIndex != null) {
                return importExpr(Identifiers.nodeValue).callFn([currViewExpr, literal(refNodeIndex)]);
              } // check variables


              var varAst = currBuilder.variables.find(function (varAst) {
                return varAst.name === name;
              });

              if (varAst) {
                var varValue = varAst.value || IMPLICIT_TEMPLATE_VAR;
                return currViewExpr.prop('context').prop(varValue);
              }
            }

            return null;
          }
        }, {
          key: "notifyImplicitReceiverUse",
          value: function notifyImplicitReceiverUse() {// Not needed in View Engine as View Engine walks through the generated
            // expressions to figure out if the implicit receiver is used and needs
            // to be generated as part of the pre-update statements.
          }
        }, {
          key: "_createLiteralArrayConverter",
          value: function _createLiteralArrayConverter(sourceSpan, argCount) {
            if (argCount === 0) {
              var valueExpr = importExpr(Identifiers.EMPTY_ARRAY);
              return function () {
                return valueExpr;
              };
            }

            var checkIndex = this.nodes.length;
            this.nodes.push(function () {
              return {
                sourceSpan: sourceSpan,
                nodeFlags: 32
                /* TypePureArray */
                ,
                nodeDef: importExpr(Identifiers.pureArrayDef).callFn([literal(checkIndex), literal(argCount)])
              };
            });
            return function (args) {
              return callCheckStmt(checkIndex, args);
            };
          }
        }, {
          key: "_createLiteralMapConverter",
          value: function _createLiteralMapConverter(sourceSpan, keys) {
            if (keys.length === 0) {
              var valueExpr = importExpr(Identifiers.EMPTY_MAP);
              return function () {
                return valueExpr;
              };
            }

            var map = literalMap(keys.map(function (e, i) {
              return Object.assign(Object.assign({}, e), {
                value: literal(i)
              });
            }));
            var checkIndex = this.nodes.length;
            this.nodes.push(function () {
              return {
                sourceSpan: sourceSpan,
                nodeFlags: 64
                /* TypePureObject */
                ,
                nodeDef: importExpr(Identifiers.pureObjectDef).callFn([literal(checkIndex), map])
              };
            });
            return function (args) {
              return callCheckStmt(checkIndex, args);
            };
          }
        }, {
          key: "_createPipeConverter",
          value: function _createPipeConverter(expression, name, argCount) {
            var pipe = this.usedPipes.find(function (pipeSummary) {
              return pipeSummary.name === name;
            });

            if (pipe.pure) {
              var checkIndex = this.nodes.length;
              this.nodes.push(function () {
                return {
                  sourceSpan: expression.sourceSpan,
                  nodeFlags: 128
                  /* TypePurePipe */
                  ,
                  nodeDef: importExpr(Identifiers.purePipeDef).callFn([literal(checkIndex), literal(argCount)])
                };
              }); // find underlying pipe in the component view

              var compViewExpr = VIEW_VAR;
              var compBuilder = this;

              while (compBuilder.parent) {
                compBuilder = compBuilder.parent;
                compViewExpr = compViewExpr.prop('parent').cast(DYNAMIC_TYPE);
              }

              var pipeNodeIndex = compBuilder.purePipeNodeIndices[name];
              var pipeValueExpr = importExpr(Identifiers.nodeValue).callFn([compViewExpr, literal(pipeNodeIndex)]);
              return function (args) {
                return callUnwrapValue(expression.nodeIndex, expression.bindingIndex, callCheckStmt(checkIndex, [pipeValueExpr].concat(args)));
              };
            } else {
              var nodeIndex = this._createPipe(expression.sourceSpan, pipe);

              var nodeValueExpr = importExpr(Identifiers.nodeValue).callFn([VIEW_VAR, literal(nodeIndex)]);
              return function (args) {
                return callUnwrapValue(expression.nodeIndex, expression.bindingIndex, nodeValueExpr.callMethod('transform', args));
              };
            }
          }
        }, {
          key: "_createPipe",
          value: function _createPipe(sourceSpan, pipe) {
            var _this251 = this;

            var nodeIndex = this.nodes.length;
            var flags = 0
            /* None */
            ;
            pipe.type.lifecycleHooks.forEach(function (lifecycleHook) {
              // for pipes, we only support ngOnDestroy
              if (lifecycleHook === LifecycleHooks.OnDestroy) {
                flags |= lifecycleHookToNodeFlag(lifecycleHook);
              }
            });
            var depExprs = pipe.type.diDeps.map(function (diDep) {
              return depDef(_this251.outputCtx, diDep);
            }); // function pipeDef(
            //   flags: NodeFlags, ctor: any, deps: ([DepFlags, any] | any)[]): NodeDef

            this.nodes.push(function () {
              return {
                sourceSpan: sourceSpan,
                nodeFlags: 16
                /* TypePipe */
                ,
                nodeDef: importExpr(Identifiers.pipeDef).callFn([literal(flags), _this251.outputCtx.importExpr(pipe.type.reference), literalArr(depExprs)])
              };
            });
            return nodeIndex;
          }
          /**
           * For the AST in `UpdateExpression.value`:
           * - create nodes for pipes, literal arrays and, literal maps,
           * - update the AST to replace pipes, literal arrays and, literal maps with calls to check fn.
           *
           * WARNING: This might create new nodeDefs (for pipes and literal arrays and literal maps)!
           */

        }, {
          key: "_preprocessUpdateExpression",
          value: function _preprocessUpdateExpression(expression) {
            var _this252 = this;

            return {
              nodeIndex: expression.nodeIndex,
              bindingIndex: expression.bindingIndex,
              sourceSpan: expression.sourceSpan,
              context: expression.context,
              value: convertPropertyBindingBuiltins({
                createLiteralArrayConverter: function createLiteralArrayConverter(argCount) {
                  return _this252._createLiteralArrayConverter(expression.sourceSpan, argCount);
                },
                createLiteralMapConverter: function createLiteralMapConverter(keys) {
                  return _this252._createLiteralMapConverter(expression.sourceSpan, keys);
                },
                createPipeConverter: function createPipeConverter(name, argCount) {
                  return _this252._createPipeConverter(expression, name, argCount);
                }
              }, expression.value)
            };
          }
        }, {
          key: "_createNodeExpressions",
          value: function _createNodeExpressions() {
            var self = this;
            var updateBindingCount = 0;
            var updateRendererStmts = [];
            var updateDirectivesStmts = [];
            var nodeDefExprs = this.nodes.map(function (factory, nodeIndex) {
              var _factory = factory(),
                  nodeDef = _factory.nodeDef,
                  nodeFlags = _factory.nodeFlags,
                  updateDirectives = _factory.updateDirectives,
                  updateRenderer = _factory.updateRenderer,
                  sourceSpan = _factory.sourceSpan;

              if (updateRenderer) {
                updateRendererStmts.push.apply(updateRendererStmts, _toConsumableArray(createUpdateStatements(nodeIndex, sourceSpan, updateRenderer, false)));
              }

              if (updateDirectives) {
                updateDirectivesStmts.push.apply(updateDirectivesStmts, _toConsumableArray(createUpdateStatements(nodeIndex, sourceSpan, updateDirectives, (nodeFlags & (262144
                /* DoCheck */
                | 65536
                /* OnInit */
                )) > 0)));
              } // We use a comma expression to call the log function before
              // the nodeDef function, but still use the result of the nodeDef function
              // as the value.
              // Note: We only add the logger to elements / text nodes,
              // so we don't generate too much code.


              var logWithNodeDef = nodeFlags & 3
              /* CatRenderNode */
              ? new CommaExpr([LOG_VAR$1.callFn([]).callFn([]), nodeDef]) : nodeDef;
              return applySourceSpanToExpressionIfNeeded(logWithNodeDef, sourceSpan);
            });
            return {
              updateRendererStmts: updateRendererStmts,
              updateDirectivesStmts: updateDirectivesStmts,
              nodeDefExprs: nodeDefExprs
            };

            function createUpdateStatements(nodeIndex, sourceSpan, expressions, allowEmptyExprs) {
              var updateStmts = [];
              var exprs = expressions.map(function (_ref40) {
                var sourceSpan = _ref40.sourceSpan,
                    context = _ref40.context,
                    value = _ref40.value;
                var bindingId = "".concat(updateBindingCount++);
                var nameResolver = context === COMP_VAR ? self : null;

                var _convertPropertyBindi3 = _convertPropertyBinding(nameResolver, context, value, bindingId, BindingForm.General),
                    stmts = _convertPropertyBindi3.stmts,
                    currValExpr = _convertPropertyBindi3.currValExpr;

                updateStmts.push.apply(updateStmts, _toConsumableArray(stmts.map(function (stmt) {
                  return applySourceSpanToStatementIfNeeded(stmt, sourceSpan);
                })));
                return applySourceSpanToExpressionIfNeeded(currValExpr, sourceSpan);
              });

              if (expressions.length || allowEmptyExprs) {
                updateStmts.push(applySourceSpanToStatementIfNeeded(callCheckStmt(nodeIndex, exprs).toStmt(), sourceSpan));
              }

              return updateStmts;
            }
          }
        }, {
          key: "_createElementHandleEventFn",
          value: function _createElementHandleEventFn(nodeIndex, handlers) {
            var _this253 = this;

            var handleEventStmts = [];
            var handleEventBindingCount = 0;
            handlers.forEach(function (_ref41) {
              var context = _ref41.context,
                  eventAst = _ref41.eventAst,
                  dirAst = _ref41.dirAst;
              var bindingId = "".concat(handleEventBindingCount++);
              var nameResolver = context === COMP_VAR ? _this253 : null;

              var _convertActionBinding2 = convertActionBinding(nameResolver, context, eventAst.handler, bindingId),
                  stmts = _convertActionBinding2.stmts,
                  allowDefault = _convertActionBinding2.allowDefault;

              var trueStmts = stmts;

              if (allowDefault) {
                trueStmts.push(ALLOW_DEFAULT_VAR.set(allowDefault.and(ALLOW_DEFAULT_VAR)).toStmt());
              }

              var _elementEventNameAndT3 = elementEventNameAndTarget(eventAst, dirAst),
                  eventTarget = _elementEventNameAndT3.target,
                  eventName = _elementEventNameAndT3.name;

              var fullEventName = elementEventFullName(eventTarget, eventName);
              handleEventStmts.push(applySourceSpanToStatementIfNeeded(new IfStmt(literal(fullEventName).identical(EVENT_NAME_VAR), trueStmts), eventAst.sourceSpan));
            });
            var handleEventFn;

            if (handleEventStmts.length > 0) {
              var preStmts = [ALLOW_DEFAULT_VAR.set(literal(true)).toDeclStmt(BOOL_TYPE)];

              if (!this.component.isHost && findReadVarNames(handleEventStmts).has(COMP_VAR.name)) {
                preStmts.push(COMP_VAR.set(VIEW_VAR.prop('component')).toDeclStmt(this.compType));
              }

              handleEventFn = fn([new FnParam(VIEW_VAR.name, INFERRED_TYPE), new FnParam(EVENT_NAME_VAR.name, INFERRED_TYPE), new FnParam(EventHandlerVars.event.name, INFERRED_TYPE)], [].concat(preStmts, handleEventStmts, [new ReturnStatement(ALLOW_DEFAULT_VAR)]), INFERRED_TYPE);
            } else {
              handleEventFn = NULL_EXPR;
            }

            return handleEventFn;
          }
        }, {
          key: "visitDirective",
          value: function visitDirective(ast, context) {}
        }, {
          key: "visitDirectiveProperty",
          value: function visitDirectiveProperty(ast, context) {}
        }, {
          key: "visitReference",
          value: function visitReference(ast, context) {}
        }, {
          key: "visitVariable",
          value: function visitVariable(ast, context) {}
        }, {
          key: "visitEvent",
          value: function visitEvent(ast, context) {}
        }, {
          key: "visitElementProperty",
          value: function visitElementProperty(ast, context) {}
        }, {
          key: "visitAttr",
          value: function visitAttr(ast, context) {}
        }]);

        return ViewBuilder$1;
      }();

      function needsAdditionalRootNode(astNodes) {
        var lastAstNode = astNodes[astNodes.length - 1];

        if (lastAstNode instanceof EmbeddedTemplateAst) {
          return lastAstNode.hasViewContainer;
        }

        if (lastAstNode instanceof ElementAst) {
          if (isNgContainer(lastAstNode.name) && lastAstNode.children.length) {
            return needsAdditionalRootNode(lastAstNode.children);
          }

          return lastAstNode.hasViewContainer;
        }

        return lastAstNode instanceof NgContentAst;
      }

      function elementBindingDef(inputAst, dirAst) {
        var inputType = inputAst.type;

        switch (inputType) {
          case 1
          /* Attribute */
          :
            return literalArr([literal(1
            /* TypeElementAttribute */
            ), literal(inputAst.name), literal(inputAst.securityContext)]);

          case 0
          /* Property */
          :
            return literalArr([literal(8
            /* TypeProperty */
            ), literal(inputAst.name), literal(inputAst.securityContext)]);

          case 4
          /* Animation */
          :
            var bindingType = 8
            /* TypeProperty */
            | (dirAst && dirAst.directive.isComponent ? 32
            /* SyntheticHostProperty */
            : 16
            /* SyntheticProperty */
            );
            return literalArr([literal(bindingType), literal('@' + inputAst.name), literal(inputAst.securityContext)]);

          case 2
          /* Class */
          :
            return literalArr([literal(2
            /* TypeElementClass */
            ), literal(inputAst.name), NULL_EXPR]);

          case 3
          /* Style */
          :
            return literalArr([literal(4
            /* TypeElementStyle */
            ), literal(inputAst.name), literal(inputAst.unit)]);

          default:
            // This default case is not needed by TypeScript compiler, as the switch is exhaustive.
            // However Closure Compiler does not understand that and reports an error in typed mode.
            // The `throw new Error` below works around the problem, and the unexpected: never variable
            // makes sure tsc still checks this code is unreachable.
            var unexpected = inputType;
            throw new Error("unexpected ".concat(unexpected));
        }
      }

      function fixedAttrsDef(elementAst) {
        var mapResult = Object.create(null);
        elementAst.attrs.forEach(function (attrAst) {
          mapResult[attrAst.name] = attrAst.value;
        });
        elementAst.directives.forEach(function (dirAst) {
          Object.keys(dirAst.directive.hostAttributes).forEach(function (name) {
            var value = dirAst.directive.hostAttributes[name];
            var prevValue = mapResult[name];
            mapResult[name] = prevValue != null ? mergeAttributeValue(name, prevValue, value) : value;
          });
        }); // Note: We need to sort to get a defined output order
        // for tests and for caching generated artifacts...

        return literalArr(Object.keys(mapResult).sort().map(function (attrName) {
          return literalArr([literal(attrName), literal(mapResult[attrName])]);
        }));
      }

      function mergeAttributeValue(attrName, attrValue1, attrValue2) {
        if (attrName == CLASS_ATTR$1 || attrName == STYLE_ATTR) {
          return "".concat(attrValue1, " ").concat(attrValue2);
        } else {
          return attrValue2;
        }
      }

      function callCheckStmt(nodeIndex, exprs) {
        if (exprs.length > 10) {
          return CHECK_VAR.callFn([VIEW_VAR, literal(nodeIndex), literal(1
          /* Dynamic */
          ), literalArr(exprs)]);
        } else {
          return CHECK_VAR.callFn([VIEW_VAR, literal(nodeIndex), literal(0
          /* Inline */
          )].concat(_toConsumableArray(exprs)));
        }
      }

      function callUnwrapValue(nodeIndex, bindingIdx, expr) {
        return importExpr(Identifiers.unwrapValue).callFn([VIEW_VAR, literal(nodeIndex), literal(bindingIdx), expr]);
      }

      function elementEventNameAndTarget(eventAst, dirAst) {
        if (eventAst.isAnimation) {
          return {
            name: "@".concat(eventAst.name, ".").concat(eventAst.phase),
            target: dirAst && dirAst.directive.isComponent ? 'component' : null
          };
        } else {
          return eventAst;
        }
      }

      function calcQueryFlags(query) {
        var flags = 0
        /* None */
        ; // Note: We only make queries static that query for a single item and the user specifically
        // set the to be static. This is because of backwards compatibility with the old view compiler...

        if (query.first && query["static"]) {
          flags |= 268435456
          /* StaticQuery */
          ;
        } else {
          flags |= 536870912
          /* DynamicQuery */
          ;
        }

        if (query.emitDistinctChangesOnly) {
          flags |= -2147483648
          /* EmitDistinctChangesOnly */
          ;
        }

        return flags;
      }

      function elementEventFullName(target, name) {
        return target ? "".concat(target, ":").concat(name) : name;
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * A container for message extracted from the templates.
       */


      var MessageBundle = /*#__PURE__*/function () {
        function MessageBundle(_htmlParser, _implicitTags, _implicitAttrs) {
          var _locale = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;

          _classCallCheck(this, MessageBundle);

          this._htmlParser = _htmlParser;
          this._implicitTags = _implicitTags;
          this._implicitAttrs = _implicitAttrs;
          this._locale = _locale;
          this._messages = [];
        }

        _createClass(MessageBundle, [{
          key: "updateFromTemplate",
          value: function updateFromTemplate(html, url, interpolationConfig) {
            var _this$_messages;

            var htmlParserResult = this._htmlParser.parse(html, url, {
              tokenizeExpansionForms: true,
              interpolationConfig: interpolationConfig
            });

            if (htmlParserResult.errors.length) {
              return htmlParserResult.errors;
            }

            var i18nParserResult = extractMessages(htmlParserResult.rootNodes, interpolationConfig, this._implicitTags, this._implicitAttrs);

            if (i18nParserResult.errors.length) {
              return i18nParserResult.errors;
            }

            (_this$_messages = this._messages).push.apply(_this$_messages, _toConsumableArray(i18nParserResult.messages));

            return [];
          } // Return the message in the internal format
          // The public (serialized) format might be different, see the `write` method.

        }, {
          key: "getMessages",
          value: function getMessages() {
            return this._messages;
          }
        }, {
          key: "write",
          value: function write(serializer, filterSources) {
            var messages = {};
            var mapperVisitor = new MapPlaceholderNames(); // Deduplicate messages based on their ID

            this._messages.forEach(function (message) {
              var id = serializer.digest(message);

              if (!messages.hasOwnProperty(id)) {
                messages[id] = message;
              } else {
                var _messages$id$sources;

                (_messages$id$sources = messages[id].sources).push.apply(_messages$id$sources, _toConsumableArray(message.sources));
              }
            }); // Transform placeholder names using the serializer mapping


            var msgList = Object.keys(messages).map(function (id) {
              var mapper = serializer.createNameMapper(messages[id]);
              var src = messages[id];
              var nodes = mapper ? mapperVisitor.convert(src.nodes, mapper) : src.nodes;
              var transformedMessage = new Message(nodes, {}, {}, src.meaning, src.description, id);
              transformedMessage.sources = src.sources;

              if (filterSources) {
                transformedMessage.sources.forEach(function (source) {
                  return source.filePath = filterSources(source.filePath);
                });
              }

              return transformedMessage;
            });
            return serializer.write(msgList, this._locale);
          }
        }]);

        return MessageBundle;
      }(); // Transform an i18n AST by renaming the placeholder nodes with the given mapper


      var MapPlaceholderNames = /*#__PURE__*/function (_CloneVisitor) {
        _inherits(MapPlaceholderNames, _CloneVisitor);

        var _super106 = _createSuper(MapPlaceholderNames);

        function MapPlaceholderNames() {
          _classCallCheck(this, MapPlaceholderNames);

          return _super106.apply(this, arguments);
        }

        _createClass(MapPlaceholderNames, [{
          key: "convert",
          value: function convert(nodes, mapper) {
            var _this254 = this;

            return mapper ? nodes.map(function (n) {
              return n.visit(_this254, mapper);
            }) : nodes;
          }
        }, {
          key: "visitTagPlaceholder",
          value: function visitTagPlaceholder(ph, mapper) {
            var _this255 = this;

            var startName = mapper.toPublicName(ph.startName);
            var closeName = ph.closeName ? mapper.toPublicName(ph.closeName) : ph.closeName;
            var children = ph.children.map(function (n) {
              return n.visit(_this255, mapper);
            });
            return new TagPlaceholder(ph.tag, ph.attrs, startName, closeName, children, ph.isVoid, ph.sourceSpan, ph.startSourceSpan, ph.endSourceSpan);
          }
        }, {
          key: "visitPlaceholder",
          value: function visitPlaceholder(ph, mapper) {
            return new Placeholder(ph.value, mapper.toPublicName(ph.name), ph.sourceSpan);
          }
        }, {
          key: "visitIcuPlaceholder",
          value: function visitIcuPlaceholder(ph, mapper) {
            return new IcuPlaceholder(ph.value, mapper.toPublicName(ph.name), ph.sourceSpan);
          }
        }]);

        return MapPlaceholderNames;
      }(CloneVisitor);
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      var GeneratedFile = /*#__PURE__*/function () {
        function GeneratedFile(srcFileUrl, genFileUrl, sourceOrStmts) {
          _classCallCheck(this, GeneratedFile);

          this.srcFileUrl = srcFileUrl;
          this.genFileUrl = genFileUrl;

          if (typeof sourceOrStmts === 'string') {
            this.source = sourceOrStmts;
            this.stmts = null;
          } else {
            this.source = null;
            this.stmts = sourceOrStmts;
          }
        }

        _createClass(GeneratedFile, [{
          key: "isEquivalent",
          value: function isEquivalent(other) {
            if (this.genFileUrl !== other.genFileUrl) {
              return false;
            }

            if (this.source) {
              return this.source === other.source;
            }

            if (other.stmts == null) {
              return false;
            } // Note: the constructor guarantees that if this.source is not filled,
            // then this.stmts is.


            return areAllEquivalent(this.stmts, other.stmts);
          }
        }]);

        return GeneratedFile;
      }();

      function toTypeScript(file) {
        var preamble = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';

        if (!file.stmts) {
          throw new Error("Illegal state: No stmts present on GeneratedFile ".concat(file.genFileUrl));
        }

        return new TypeScriptEmitter().emitStatements(file.genFileUrl, file.stmts, preamble);
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      function _listLazyRoutes(moduleMeta, reflector) {
        var allLazyRoutes = [];

        var _iterator27 = _createForOfIteratorHelper(moduleMeta.transitiveModule.providers),
            _step27;

        try {
          for (_iterator27.s(); !(_step27 = _iterator27.n()).done;) {
            var _step27$value = _step27.value,
                provider = _step27$value.provider,
                _module = _step27$value.module;

            if (tokenReference(provider.token) === reflector.ROUTES) {
              var loadChildren = _collectLoadChildren(provider.useValue);

              var _iterator28 = _createForOfIteratorHelper(loadChildren),
                  _step28;

              try {
                for (_iterator28.s(); !(_step28 = _iterator28.n()).done;) {
                  var route = _step28.value;
                  allLazyRoutes.push(parseLazyRoute(route, reflector, _module.reference));
                }
              } catch (err) {
                _iterator28.e(err);
              } finally {
                _iterator28.f();
              }
            }
          }
        } catch (err) {
          _iterator27.e(err);
        } finally {
          _iterator27.f();
        }

        return allLazyRoutes;
      }

      function _collectLoadChildren(routes) {
        var target = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];

        if (typeof routes === 'string') {
          target.push(routes);
        } else if (Array.isArray(routes)) {
          var _iterator29 = _createForOfIteratorHelper(routes),
              _step29;

          try {
            for (_iterator29.s(); !(_step29 = _iterator29.n()).done;) {
              var route = _step29.value;

              _collectLoadChildren(route, target);
            }
          } catch (err) {
            _iterator29.e(err);
          } finally {
            _iterator29.f();
          }
        } else if (routes.loadChildren) {
          _collectLoadChildren(routes.loadChildren, target);
        } else if (routes.children) {
          _collectLoadChildren(routes.children, target);
        }

        return target;
      }

      function parseLazyRoute(route, reflector, module) {
        var _route$split = route.split('#'),
            _route$split2 = _slicedToArray(_route$split, 2),
            routePath = _route$split2[0],
            routeName = _route$split2[1];

        var referencedModule = reflector.resolveExternalReference({
          moduleName: routePath,
          name: routeName
        }, module ? module.filePath : undefined);
        return {
          route: route,
          module: module || referencedModule,
          referencedModule: referencedModule
        };
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      var TS = /^(?!.*\.d\.ts$).*\.ts$/;

      var ResolvedStaticSymbol = function ResolvedStaticSymbol(symbol, metadata) {
        _classCallCheck(this, ResolvedStaticSymbol);

        this.symbol = symbol;
        this.metadata = metadata;
      };

      var SUPPORTED_SCHEMA_VERSION = 4;
      /**
       * This class is responsible for loading metadata per symbol,
       * and normalizing references between symbols.
       *
       * Internally, it only uses symbols without members,
       * and deduces the values for symbols with members based
       * on these symbols.
       */

      var StaticSymbolResolver = /*#__PURE__*/function () {
        function StaticSymbolResolver(host, staticSymbolCache, summaryResolver, errorRecorder) {
          _classCallCheck(this, StaticSymbolResolver);

          this.host = host;
          this.staticSymbolCache = staticSymbolCache;
          this.summaryResolver = summaryResolver;
          this.errorRecorder = errorRecorder;
          this.metadataCache = new Map(); // Note: this will only contain StaticSymbols without members!

          this.resolvedSymbols = new Map(); // Note: this will only contain StaticSymbols without members!

          this.importAs = new Map();
          this.symbolResourcePaths = new Map();
          this.symbolFromFile = new Map();
          this.knownFileNameToModuleNames = new Map();
        }

        _createClass(StaticSymbolResolver, [{
          key: "resolveSymbol",
          value: function resolveSymbol(staticSymbol) {
            if (staticSymbol.members.length > 0) {
              return this._resolveSymbolMembers(staticSymbol);
            } // Note: always ask for a summary first,
            // as we might have read shallow metadata via a .d.ts file
            // for the symbol.


            var resultFromSummary = this._resolveSymbolFromSummary(staticSymbol);

            if (resultFromSummary) {
              return resultFromSummary;
            }

            var resultFromCache = this.resolvedSymbols.get(staticSymbol);

            if (resultFromCache) {
              return resultFromCache;
            } // Note: Some users use libraries that were not compiled with ngc, i.e. they don't
            // have summaries, only .d.ts files. So we always need to check both, the summary
            // and metadata.


            this._createSymbolsOf(staticSymbol.filePath);

            return this.resolvedSymbols.get(staticSymbol);
          }
          /**
           * getImportAs produces a symbol that can be used to import the given symbol.
           * The import might be different than the symbol if the symbol is exported from
           * a library with a summary; in which case we want to import the symbol from the
           * ngfactory re-export instead of directly to avoid introducing a direct dependency
           * on an otherwise indirect dependency.
           *
           * @param staticSymbol the symbol for which to generate a import symbol
           */

        }, {
          key: "getImportAs",
          value: function getImportAs(staticSymbol) {
            var useSummaries = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

            if (staticSymbol.members.length) {
              var baseSymbol = this.getStaticSymbol(staticSymbol.filePath, staticSymbol.name);
              var baseImportAs = this.getImportAs(baseSymbol, useSummaries);
              return baseImportAs ? this.getStaticSymbol(baseImportAs.filePath, baseImportAs.name, staticSymbol.members) : null;
            }

            var summarizedFileName = stripSummaryForJitFileSuffix(staticSymbol.filePath);

            if (summarizedFileName !== staticSymbol.filePath) {
              var summarizedName = stripSummaryForJitNameSuffix(staticSymbol.name);

              var _baseSymbol = this.getStaticSymbol(summarizedFileName, summarizedName, staticSymbol.members);

              var _baseImportAs = this.getImportAs(_baseSymbol, useSummaries);

              return _baseImportAs ? this.getStaticSymbol(summaryForJitFileName(_baseImportAs.filePath), summaryForJitName(_baseImportAs.name), _baseSymbol.members) : null;
            }

            var result = useSummaries && this.summaryResolver.getImportAs(staticSymbol) || null;

            if (!result) {
              result = this.importAs.get(staticSymbol);
            }

            return result;
          }
          /**
           * getResourcePath produces the path to the original location of the symbol and should
           * be used to determine the relative location of resource references recorded in
           * symbol metadata.
           */

        }, {
          key: "getResourcePath",
          value: function getResourcePath(staticSymbol) {
            return this.symbolResourcePaths.get(staticSymbol) || staticSymbol.filePath;
          }
          /**
           * getTypeArity returns the number of generic type parameters the given symbol
           * has. If the symbol is not a type the result is null.
           */

        }, {
          key: "getTypeArity",
          value: function getTypeArity(staticSymbol) {
            // If the file is a factory/ngsummary file, don't resolve the symbol as doing so would
            // cause the metadata for an factory/ngsummary file to be loaded which doesn't exist.
            // All references to generated classes must include the correct arity whenever
            // generating code.
            if (isGeneratedFile(staticSymbol.filePath)) {
              return null;
            }

            var resolvedSymbol = unwrapResolvedMetadata(this.resolveSymbol(staticSymbol));

            while (resolvedSymbol && resolvedSymbol.metadata instanceof StaticSymbol) {
              resolvedSymbol = unwrapResolvedMetadata(this.resolveSymbol(resolvedSymbol.metadata));
            }

            return resolvedSymbol && resolvedSymbol.metadata && resolvedSymbol.metadata.arity || null;
          }
        }, {
          key: "getKnownModuleName",
          value: function getKnownModuleName(filePath) {
            return this.knownFileNameToModuleNames.get(filePath) || null;
          }
        }, {
          key: "recordImportAs",
          value: function recordImportAs(sourceSymbol, targetSymbol) {
            sourceSymbol.assertNoMembers();
            targetSymbol.assertNoMembers();
            this.importAs.set(sourceSymbol, targetSymbol);
          }
        }, {
          key: "recordModuleNameForFileName",
          value: function recordModuleNameForFileName(fileName, moduleName) {
            this.knownFileNameToModuleNames.set(fileName, moduleName);
          }
          /**
           * Invalidate all information derived from the given file and return the
           * static symbols contained in the file.
           *
           * @param fileName the file to invalidate
           */

        }, {
          key: "invalidateFile",
          value: function invalidateFile(fileName) {
            this.metadataCache["delete"](fileName);
            var symbols = this.symbolFromFile.get(fileName);

            if (!symbols) {
              return [];
            }

            this.symbolFromFile["delete"](fileName);

            var _iterator30 = _createForOfIteratorHelper(symbols),
                _step30;

            try {
              for (_iterator30.s(); !(_step30 = _iterator30.n()).done;) {
                var symbol = _step30.value;
                this.resolvedSymbols["delete"](symbol);
                this.importAs["delete"](symbol);
                this.symbolResourcePaths["delete"](symbol);
              }
            } catch (err) {
              _iterator30.e(err);
            } finally {
              _iterator30.f();
            }

            return symbols;
          }
          /** @internal */

        }, {
          key: "ignoreErrorsFor",
          value: function ignoreErrorsFor(cb) {
            var recorder = this.errorRecorder;

            this.errorRecorder = function () {};

            try {
              return cb();
            } finally {
              this.errorRecorder = recorder;
            }
          }
        }, {
          key: "_resolveSymbolMembers",
          value: function _resolveSymbolMembers(staticSymbol) {
            var members = staticSymbol.members;
            var baseResolvedSymbol = this.resolveSymbol(this.getStaticSymbol(staticSymbol.filePath, staticSymbol.name));

            if (!baseResolvedSymbol) {
              return null;
            }

            var baseMetadata = unwrapResolvedMetadata(baseResolvedSymbol.metadata);

            if (baseMetadata instanceof StaticSymbol) {
              return new ResolvedStaticSymbol(staticSymbol, this.getStaticSymbol(baseMetadata.filePath, baseMetadata.name, members));
            } else if (baseMetadata && baseMetadata.__symbolic === 'class') {
              if (baseMetadata.statics && members.length === 1) {
                return new ResolvedStaticSymbol(staticSymbol, baseMetadata.statics[members[0]]);
              }
            } else {
              var value = baseMetadata;

              for (var i = 0; i < members.length && value; i++) {
                value = value[members[i]];
              }

              return new ResolvedStaticSymbol(staticSymbol, value);
            }

            return null;
          }
        }, {
          key: "_resolveSymbolFromSummary",
          value: function _resolveSymbolFromSummary(staticSymbol) {
            var summary = this.summaryResolver.resolveSummary(staticSymbol);
            return summary ? new ResolvedStaticSymbol(staticSymbol, summary.metadata) : null;
          }
          /**
           * getStaticSymbol produces a Type whose metadata is known but whose implementation is not loaded.
           * All types passed to the StaticResolver should be pseudo-types returned by this method.
           *
           * @param declarationFile the absolute path of the file where the symbol is declared
           * @param name the name of the type.
           * @param members a symbol for a static member of the named type
           */

        }, {
          key: "getStaticSymbol",
          value: function getStaticSymbol(declarationFile, name, members) {
            return this.staticSymbolCache.get(declarationFile, name, members);
          }
          /**
           * hasDecorators checks a file's metadata for the presence of decorators without evaluating the
           * metadata.
           *
           * @param filePath the absolute path to examine for decorators.
           * @returns true if any class in the file has a decorator.
           */

        }, {
          key: "hasDecorators",
          value: function hasDecorators(filePath) {
            var metadata = this.getModuleMetadata(filePath);

            if (metadata['metadata']) {
              return Object.keys(metadata['metadata']).some(function (metadataKey) {
                var entry = metadata['metadata'][metadataKey];
                return entry && entry.__symbolic === 'class' && entry.decorators;
              });
            }

            return false;
          }
        }, {
          key: "getSymbolsOf",
          value: function getSymbolsOf(filePath) {
            var summarySymbols = this.summaryResolver.getSymbolsOf(filePath);

            if (summarySymbols) {
              return summarySymbols;
            } // Note: Some users use libraries that were not compiled with ngc, i.e. they don't
            // have summaries, only .d.ts files, but `summaryResolver.isLibraryFile` returns true.


            this._createSymbolsOf(filePath);

            return this.symbolFromFile.get(filePath) || [];
          }
        }, {
          key: "_createSymbolsOf",
          value: function _createSymbolsOf(filePath) {
            var _this256 = this;

            if (this.symbolFromFile.has(filePath)) {
              return;
            }

            var resolvedSymbols = [];
            var metadata = this.getModuleMetadata(filePath);

            if (metadata['importAs']) {
              // Index bundle indices should use the importAs module name defined
              // in the bundle.
              this.knownFileNameToModuleNames.set(filePath, metadata['importAs']);
            } // handle the symbols in one of the re-export location


            if (metadata['exports']) {
              var _iterator31 = _createForOfIteratorHelper(metadata['exports']),
                  _step31;

              try {
                var _loop3 = function _loop3() {
                  var moduleExport = _step31.value;

                  // handle the symbols in the list of explicitly re-exported symbols.
                  if (moduleExport["export"]) {
                    moduleExport["export"].forEach(function (exportSymbol) {
                      var symbolName;

                      if (typeof exportSymbol === 'string') {
                        symbolName = exportSymbol;
                      } else {
                        symbolName = exportSymbol.as;
                      }

                      symbolName = unescapeIdentifier(symbolName);
                      var symName = symbolName;

                      if (typeof exportSymbol !== 'string') {
                        symName = unescapeIdentifier(exportSymbol.name);
                      }

                      var resolvedModule = _this256.resolveModule(moduleExport.from, filePath);

                      if (resolvedModule) {
                        var targetSymbol = _this256.getStaticSymbol(resolvedModule, symName);

                        var sourceSymbol = _this256.getStaticSymbol(filePath, symbolName);

                        resolvedSymbols.push(_this256.createExport(sourceSymbol, targetSymbol));
                      }
                    });
                  } else {
                    // Handle the symbols loaded by 'export *' directives.
                    var resolvedModule = _this256.resolveModule(moduleExport.from, filePath);

                    if (resolvedModule && resolvedModule !== filePath) {
                      var nestedExports = _this256.getSymbolsOf(resolvedModule);

                      nestedExports.forEach(function (targetSymbol) {
                        var sourceSymbol = _this256.getStaticSymbol(filePath, targetSymbol.name);

                        resolvedSymbols.push(_this256.createExport(sourceSymbol, targetSymbol));
                      });
                    }
                  }
                };

                for (_iterator31.s(); !(_step31 = _iterator31.n()).done;) {
                  _loop3();
                }
              } catch (err) {
                _iterator31.e(err);
              } finally {
                _iterator31.f();
              }
            } // handle the actual metadata. Has to be after the exports
            // as there might be collisions in the names, and we want the symbols
            // of the current module to win ofter reexports.


            if (metadata['metadata']) {
              // handle direct declarations of the symbol
              var topLevelSymbolNames = new Set(Object.keys(metadata['metadata']).map(unescapeIdentifier));
              var origins = metadata['origins'] || {};
              Object.keys(metadata['metadata']).forEach(function (metadataKey) {
                var symbolMeta = metadata['metadata'][metadataKey];
                var name = unescapeIdentifier(metadataKey);

                var symbol = _this256.getStaticSymbol(filePath, name);

                var origin = origins.hasOwnProperty(metadataKey) && origins[metadataKey];

                if (origin) {
                  // If the symbol is from a bundled index, use the declaration location of the
                  // symbol so relative references (such as './my.html') will be calculated
                  // correctly.
                  var originFilePath = _this256.resolveModule(origin, filePath);

                  if (!originFilePath) {
                    _this256.reportError(new Error("Couldn't resolve original symbol for ".concat(origin, " from ").concat(_this256.host.getOutputName(filePath))));
                  } else {
                    _this256.symbolResourcePaths.set(symbol, originFilePath);
                  }
                }

                resolvedSymbols.push(_this256.createResolvedSymbol(symbol, filePath, topLevelSymbolNames, symbolMeta));
              });
            }

            var uniqueSymbols = new Set();

            for (var _i11 = 0, _resolvedSymbols = resolvedSymbols; _i11 < _resolvedSymbols.length; _i11++) {
              var resolvedSymbol = _resolvedSymbols[_i11];
              this.resolvedSymbols.set(resolvedSymbol.symbol, resolvedSymbol);
              uniqueSymbols.add(resolvedSymbol.symbol);
            }

            this.symbolFromFile.set(filePath, Array.from(uniqueSymbols));
          }
        }, {
          key: "createResolvedSymbol",
          value: function createResolvedSymbol(sourceSymbol, topLevelPath, topLevelSymbolNames, metadata) {
            var _this257 = this;

            // For classes that don't have Angular summaries / metadata,
            // we only keep their arity, but nothing else
            // (e.g. their constructor parameters).
            // We do this to prevent introducing deep imports
            // as we didn't generate .ngfactory.ts files with proper reexports.
            var isTsFile = TS.test(sourceSymbol.filePath);

            if (this.summaryResolver.isLibraryFile(sourceSymbol.filePath) && !isTsFile && metadata && metadata['__symbolic'] === 'class') {
              var _transformedMeta = {
                __symbolic: 'class',
                arity: metadata.arity
              };
              return new ResolvedStaticSymbol(sourceSymbol, _transformedMeta);
            }

            var _originalFileMemo;

            var getOriginalName = function getOriginalName() {
              if (!_originalFileMemo) {
                // Guess what the original file name is from the reference. If it has a `.d.ts` extension
                // replace it with `.ts`. If it already has `.ts` just leave it in place. If it doesn't have
                // .ts or .d.ts, append `.ts'. Also, if it is in `node_modules`, trim the `node_module`
                // location as it is not important to finding the file.
                _originalFileMemo = _this257.host.getOutputName(topLevelPath.replace(/((\.ts)|(\.d\.ts)|)$/, '.ts').replace(/^.*node_modules[/\\]/, ''));
              }

              return _originalFileMemo;
            };

            var self = this;

            var ReferenceTransformer = /*#__PURE__*/function (_ValueTransformer2) {
              _inherits(ReferenceTransformer, _ValueTransformer2);

              var _super107 = _createSuper(ReferenceTransformer);

              function ReferenceTransformer() {
                _classCallCheck(this, ReferenceTransformer);

                return _super107.apply(this, arguments);
              }

              _createClass(ReferenceTransformer, [{
                key: "visitStringMap",
                value: function visitStringMap(map, functionParams) {
                  var symbolic = map['__symbolic'];

                  if (symbolic === 'function') {
                    var oldLen = functionParams.length;
                    functionParams.push.apply(functionParams, _toConsumableArray(map['parameters'] || []));

                    var result = _get(_getPrototypeOf(ReferenceTransformer.prototype), "visitStringMap", this).call(this, map, functionParams);

                    functionParams.length = oldLen;
                    return result;
                  } else if (symbolic === 'reference') {
                    var _module2 = map['module'];
                    var name = map['name'] ? unescapeIdentifier(map['name']) : map['name'];

                    if (!name) {
                      return null;
                    }

                    var filePath;

                    if (_module2) {
                      filePath = self.resolveModule(_module2, sourceSymbol.filePath);

                      if (!filePath) {
                        return {
                          __symbolic: 'error',
                          message: "Could not resolve ".concat(_module2, " relative to ").concat(self.host.getMetadataFor(sourceSymbol.filePath), "."),
                          line: map['line'],
                          character: map['character'],
                          fileName: getOriginalName()
                        };
                      }

                      return {
                        __symbolic: 'resolved',
                        symbol: self.getStaticSymbol(filePath, name),
                        line: map['line'],
                        character: map['character'],
                        fileName: getOriginalName()
                      };
                    } else if (functionParams.indexOf(name) >= 0) {
                      // reference to a function parameter
                      return {
                        __symbolic: 'reference',
                        name: name
                      };
                    } else {
                      if (topLevelSymbolNames.has(name)) {
                        return self.getStaticSymbol(topLevelPath, name);
                      } // ambient value


                      null;
                    }
                  } else if (symbolic === 'error') {
                    return Object.assign(Object.assign({}, map), {
                      fileName: getOriginalName()
                    });
                  } else {
                    return _get(_getPrototypeOf(ReferenceTransformer.prototype), "visitStringMap", this).call(this, map, functionParams);
                  }
                }
              }]);

              return ReferenceTransformer;
            }(ValueTransformer);

            var transformedMeta = visitValue(metadata, new ReferenceTransformer(), []);
            var unwrappedTransformedMeta = unwrapResolvedMetadata(transformedMeta);

            if (unwrappedTransformedMeta instanceof StaticSymbol) {
              return this.createExport(sourceSymbol, unwrappedTransformedMeta);
            }

            return new ResolvedStaticSymbol(sourceSymbol, transformedMeta);
          }
        }, {
          key: "createExport",
          value: function createExport(sourceSymbol, targetSymbol) {
            sourceSymbol.assertNoMembers();
            targetSymbol.assertNoMembers();

            if (this.summaryResolver.isLibraryFile(sourceSymbol.filePath) && this.summaryResolver.isLibraryFile(targetSymbol.filePath)) {
              // This case is for an ng library importing symbols from a plain ts library
              // transitively.
              // Note: We rely on the fact that we discover symbols in the direction
              // from source files to library files
              this.importAs.set(targetSymbol, this.getImportAs(sourceSymbol) || sourceSymbol);
            }

            return new ResolvedStaticSymbol(sourceSymbol, targetSymbol);
          }
        }, {
          key: "reportError",
          value: function reportError(error, context, path) {
            if (this.errorRecorder) {
              this.errorRecorder(error, context && context.filePath || path);
            } else {
              throw error;
            }
          }
          /**
           * @param module an absolute path to a module file.
           */

        }, {
          key: "getModuleMetadata",
          value: function getModuleMetadata(module) {
            var moduleMetadata = this.metadataCache.get(module);

            if (!moduleMetadata) {
              var moduleMetadatas = this.host.getMetadataFor(module);

              if (moduleMetadatas) {
                var maxVersion = -1;
                moduleMetadatas.forEach(function (md) {
                  if (md && md['version'] > maxVersion) {
                    maxVersion = md['version'];
                    moduleMetadata = md;
                  }
                });
              }

              if (!moduleMetadata) {
                moduleMetadata = {
                  __symbolic: 'module',
                  version: SUPPORTED_SCHEMA_VERSION,
                  module: module,
                  metadata: {}
                };
              }

              if (moduleMetadata['version'] != SUPPORTED_SCHEMA_VERSION) {
                var errorMessage = moduleMetadata['version'] == 2 ? "Unsupported metadata version ".concat(moduleMetadata['version'], " for module ").concat(module, ". This module should be compiled with a newer version of ngc") : "Metadata version mismatch for module ".concat(this.host.getOutputName(module), ", found version ").concat(moduleMetadata['version'], ", expected ").concat(SUPPORTED_SCHEMA_VERSION);
                this.reportError(new Error(errorMessage));
              }

              this.metadataCache.set(module, moduleMetadata);
            }

            return moduleMetadata;
          }
        }, {
          key: "getSymbolByModule",
          value: function getSymbolByModule(module, symbolName, containingFile) {
            var filePath = this.resolveModule(module, containingFile);

            if (!filePath) {
              this.reportError(new Error("Could not resolve module ".concat(module).concat(containingFile ? ' relative to ' + this.host.getOutputName(containingFile) : '')));
              return this.getStaticSymbol("ERROR:".concat(module), symbolName);
            }

            return this.getStaticSymbol(filePath, symbolName);
          }
        }, {
          key: "resolveModule",
          value: function resolveModule(module, containingFile) {
            try {
              return this.host.moduleNameToFileName(module, containingFile);
            } catch (e) {
              console.error("Could not resolve module '".concat(module, "' relative to file ").concat(containingFile));
              this.reportError(e, undefined, containingFile);
            }

            return null;
          }
        }]);

        return StaticSymbolResolver;
      }(); // Remove extra underscore from escaped identifier.
      // See https://github.com/Microsoft/TypeScript/blob/master/src/compiler/utilities.ts


      function unescapeIdentifier(identifier) {
        return identifier.startsWith('___') ? identifier.substr(1) : identifier;
      }

      function unwrapResolvedMetadata(metadata) {
        if (metadata && metadata.__symbolic === 'resolved') {
          return metadata.symbol;
        }

        return metadata;
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      function serializeSummaries(srcFileName, forJitCtx, summaryResolver, symbolResolver, symbols, types) {
        var createExternalSymbolReexports = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : false;
        var toJsonSerializer = new ToJsonSerializer(symbolResolver, summaryResolver, srcFileName); // for symbols, we use everything except for the class metadata itself
        // (we keep the statics though), as the class metadata is contained in the
        // CompileTypeSummary.

        symbols.forEach(function (resolvedSymbol) {
          return toJsonSerializer.addSummary({
            symbol: resolvedSymbol.symbol,
            metadata: resolvedSymbol.metadata
          });
        }); // Add type summaries.

        types.forEach(function (_ref42) {
          var summary = _ref42.summary,
              metadata = _ref42.metadata;
          toJsonSerializer.addSummary({
            symbol: summary.type.reference,
            metadata: undefined,
            type: summary
          });
        });

        var _toJsonSerializer$ser = toJsonSerializer.serialize(createExternalSymbolReexports),
            json = _toJsonSerializer$ser.json,
            exportAs = _toJsonSerializer$ser.exportAs;

        if (forJitCtx) {
          var forJitSerializer = new ForJitSerializer(forJitCtx, symbolResolver, summaryResolver);
          types.forEach(function (_ref43) {
            var summary = _ref43.summary,
                metadata = _ref43.metadata;
            forJitSerializer.addSourceType(summary, metadata);
          });
          toJsonSerializer.unprocessedSymbolSummariesBySymbol.forEach(function (summary) {
            if (summaryResolver.isLibraryFile(summary.symbol.filePath) && summary.type) {
              forJitSerializer.addLibType(summary.type);
            }
          });
          forJitSerializer.serialize(exportAs);
        }

        return {
          json: json,
          exportAs: exportAs
        };
      }

      function deserializeSummaries(symbolCache, summaryResolver, libraryFileName, json) {
        var deserializer = new FromJsonDeserializer(symbolCache, summaryResolver);
        return deserializer.deserialize(libraryFileName, json);
      }

      function createForJitStub(outputCtx, reference) {
        return createSummaryForJitFunction(outputCtx, reference, NULL_EXPR);
      }

      function createSummaryForJitFunction(outputCtx, reference, value) {
        var fnName = summaryForJitName(reference.name);
        outputCtx.statements.push(fn([], [new ReturnStatement(value)], new ArrayType(DYNAMIC_TYPE)).toDeclStmt(fnName, [StmtModifier.Final, StmtModifier.Exported]));
      }

      var ToJsonSerializer = /*#__PURE__*/function (_ValueTransformer3) {
        _inherits(ToJsonSerializer, _ValueTransformer3);

        var _super108 = _createSuper(ToJsonSerializer);

        function ToJsonSerializer(symbolResolver, summaryResolver, srcFileName) {
          var _this258;

          _classCallCheck(this, ToJsonSerializer);

          _this258 = _super108.call(this);
          _this258.symbolResolver = symbolResolver;
          _this258.summaryResolver = summaryResolver;
          _this258.srcFileName = srcFileName; // Note: This only contains symbols without members.

          _this258.symbols = [];
          _this258.indexBySymbol = new Map();
          _this258.reexportedBy = new Map(); // This now contains a `__symbol: number` in the place of
          // StaticSymbols, but otherwise has the same shape as the original objects.

          _this258.processedSummaryBySymbol = new Map();
          _this258.processedSummaries = [];
          _this258.unprocessedSymbolSummariesBySymbol = new Map();
          _this258.moduleName = symbolResolver.getKnownModuleName(srcFileName);
          return _this258;
        }

        _createClass(ToJsonSerializer, [{
          key: "addSummary",
          value: function addSummary(summary) {
            var _this259 = this;

            var unprocessedSummary = this.unprocessedSymbolSummariesBySymbol.get(summary.symbol);
            var processedSummary = this.processedSummaryBySymbol.get(summary.symbol);

            if (!unprocessedSummary) {
              unprocessedSummary = {
                symbol: summary.symbol,
                metadata: undefined
              };
              this.unprocessedSymbolSummariesBySymbol.set(summary.symbol, unprocessedSummary);
              processedSummary = {
                symbol: this.processValue(summary.symbol, 0
                /* None */
                )
              };
              this.processedSummaries.push(processedSummary);
              this.processedSummaryBySymbol.set(summary.symbol, processedSummary);
            }

            if (!unprocessedSummary.metadata && summary.metadata) {
              var metadata = summary.metadata || {};

              if (metadata.__symbolic === 'class') {
                // For classes, we keep everything except their class decorators.
                // We need to keep e.g. the ctor args, method names, method decorators
                // so that the class can be extended in another compilation unit.
                // We don't keep the class decorators as
                // 1) they refer to data
                //   that should not cause a rebuild of downstream compilation units
                //   (e.g. inline templates of @Component, or @NgModule.declarations)
                // 2) their data is already captured in TypeSummaries, e.g. DirectiveSummary.
                var clone = {};
                Object.keys(metadata).forEach(function (propName) {
                  if (propName !== 'decorators') {
                    clone[propName] = metadata[propName];
                  }
                });
                metadata = clone;
              } else if (isCall(metadata)) {
                if (!isFunctionCall(metadata) && !isMethodCallOnVariable(metadata)) {
                  // Don't store complex calls as we won't be able to simplify them anyways later on.
                  metadata = {
                    __symbolic: 'error',
                    message: 'Complex function calls are not supported.'
                  };
                }
              } // Note: We need to keep storing ctor calls for e.g.
              // `export const x = new InjectionToken(...)`


              unprocessedSummary.metadata = metadata;
              processedSummary.metadata = this.processValue(metadata, 1
              /* ResolveValue */
              );

              if (metadata instanceof StaticSymbol && this.summaryResolver.isLibraryFile(metadata.filePath)) {
                var declarationSymbol = this.symbols[this.indexBySymbol.get(metadata)];

                if (!isLoweredSymbol(declarationSymbol.name)) {
                  // Note: symbols that were introduced during codegen in the user file can have a reexport
                  // if a user used `export *`. However, we can't rely on this as tsickle will change
                  // `export *` into named exports, using only the information from the typechecker.
                  // As we introduce the new symbols after typecheck, Tsickle does not know about them,
                  // and omits them when expanding `export *`.
                  // So we have to keep reexporting these symbols manually via .ngfactory files.
                  this.reexportedBy.set(declarationSymbol, summary.symbol);
                }
              }
            }

            if (!unprocessedSummary.type && summary.type) {
              unprocessedSummary.type = summary.type; // Note: We don't add the summaries of all referenced symbols as for the ResolvedSymbols,
              // as the type summaries already contain the transitive data that they require
              // (in a minimal way).

              processedSummary.type = this.processValue(summary.type, 0
              /* None */
              ); // except for reexported directives / pipes, so we need to store
              // their summaries explicitly.

              if (summary.type.summaryKind === CompileSummaryKind.NgModule) {
                var ngModuleSummary = summary.type;
                ngModuleSummary.exportedDirectives.concat(ngModuleSummary.exportedPipes).forEach(function (id) {
                  var symbol = id.reference;

                  if (_this259.summaryResolver.isLibraryFile(symbol.filePath) && !_this259.unprocessedSymbolSummariesBySymbol.has(symbol)) {
                    var _summary = _this259.summaryResolver.resolveSummary(symbol);

                    if (_summary) {
                      _this259.addSummary(_summary);
                    }
                  }
                });
              }
            }
          }
          /**
           * @param createExternalSymbolReexports Whether external static symbols should be re-exported.
           * This can be enabled if external symbols should be re-exported by the current module in
           * order to avoid dynamically generated module dependencies which can break strict dependency
           * enforcements (as in Google3). Read more here: https://github.com/angular/angular/issues/25644
           */

        }, {
          key: "serialize",
          value: function serialize(createExternalSymbolReexports) {
            var _this260 = this;

            var exportAs = [];
            var json = JSON.stringify({
              moduleName: this.moduleName,
              summaries: this.processedSummaries,
              symbols: this.symbols.map(function (symbol, index) {
                symbol.assertNoMembers();
                var importAs = undefined;

                if (_this260.summaryResolver.isLibraryFile(symbol.filePath)) {
                  var reexportSymbol = _this260.reexportedBy.get(symbol);

                  if (reexportSymbol) {
                    // In case the given external static symbol is already manually exported by the
                    // user, we just proxy the external static symbol reference to the manual export.
                    // This ensures that the AOT compiler imports the external symbol through the
                    // user export and does not introduce another dependency which is not needed.
                    importAs = _this260.indexBySymbol.get(reexportSymbol);
                  } else if (createExternalSymbolReexports) {
                    // In this case, the given external static symbol is *not* manually exported by
                    // the user, and we manually create a re-export in the factory file so that we
                    // don't introduce another module dependency. This is useful when running within
                    // Bazel so that the AOT compiler does not introduce any module dependencies
                    // which can break the strict dependency enforcement. (e.g. as in Google3)
                    // Read more about this here: https://github.com/angular/angular/issues/25644
                    var summary = _this260.unprocessedSymbolSummariesBySymbol.get(symbol);

                    if (!summary || !summary.metadata || summary.metadata.__symbolic !== 'interface') {
                      importAs = "".concat(symbol.name, "_").concat(index);
                      exportAs.push({
                        symbol: symbol,
                        exportAs: importAs
                      });
                    }
                  }
                }

                return {
                  __symbol: index,
                  name: symbol.name,
                  filePath: _this260.summaryResolver.toSummaryFileName(symbol.filePath, _this260.srcFileName),
                  importAs: importAs
                };
              })
            });
            return {
              json: json,
              exportAs: exportAs
            };
          }
        }, {
          key: "processValue",
          value: function processValue(value, flags) {
            return visitValue(value, this, flags);
          }
        }, {
          key: "visitOther",
          value: function visitOther(value, context) {
            if (value instanceof StaticSymbol) {
              var baseSymbol = this.symbolResolver.getStaticSymbol(value.filePath, value.name);
              var index = this.visitStaticSymbol(baseSymbol, context);
              return {
                __symbol: index,
                members: value.members
              };
            }
          }
          /**
           * Strip line and character numbers from ngsummaries.
           * Emitting them causes white spaces changes to retrigger upstream
           * recompilations in bazel.
           * TODO: find out a way to have line and character numbers in errors without
           * excessive recompilation in bazel.
           */

        }, {
          key: "visitStringMap",
          value: function visitStringMap(map, context) {
            if (map['__symbolic'] === 'resolved') {
              return visitValue(map['symbol'], this, context);
            }

            if (map['__symbolic'] === 'error') {
              delete map['line'];
              delete map['character'];
            }

            return _get(_getPrototypeOf(ToJsonSerializer.prototype), "visitStringMap", this).call(this, map, context);
          }
          /**
           * Returns null if the options.resolveValue is true, and the summary for the symbol
           * resolved to a type or could not be resolved.
           */

        }, {
          key: "visitStaticSymbol",
          value: function visitStaticSymbol(baseSymbol, flags) {
            var index = this.indexBySymbol.get(baseSymbol);
            var summary = null;

            if (flags & 1
            /* ResolveValue */
            && this.summaryResolver.isLibraryFile(baseSymbol.filePath)) {
              if (this.unprocessedSymbolSummariesBySymbol.has(baseSymbol)) {
                // the summary for this symbol was already added
                // -> nothing to do.
                return index;
              }

              summary = this.loadSummary(baseSymbol);

              if (summary && summary.metadata instanceof StaticSymbol) {
                // The summary is a reexport
                index = this.visitStaticSymbol(summary.metadata, flags); // reset the summary as it is just a reexport, so we don't want to store it.

                summary = null;
              }
            } else if (index != null) {
              // Note: == on purpose to compare with undefined!
              // No summary and the symbol is already added -> nothing to do.
              return index;
            } // Note: == on purpose to compare with undefined!


            if (index == null) {
              index = this.symbols.length;
              this.symbols.push(baseSymbol);
            }

            this.indexBySymbol.set(baseSymbol, index);

            if (summary) {
              this.addSummary(summary);
            }

            return index;
          }
        }, {
          key: "loadSummary",
          value: function loadSummary(symbol) {
            var summary = this.summaryResolver.resolveSummary(symbol);

            if (!summary) {
              // some symbols might originate from a plain typescript library
              // that just exported .d.ts and .metadata.json files, i.e. where no summary
              // files were created.
              var resolvedSymbol = this.symbolResolver.resolveSymbol(symbol);

              if (resolvedSymbol) {
                summary = {
                  symbol: resolvedSymbol.symbol,
                  metadata: resolvedSymbol.metadata
                };
              }
            }

            return summary;
          }
        }]);

        return ToJsonSerializer;
      }(ValueTransformer);

      var ForJitSerializer = /*#__PURE__*/function () {
        function ForJitSerializer(outputCtx, symbolResolver, summaryResolver) {
          _classCallCheck(this, ForJitSerializer);

          this.outputCtx = outputCtx;
          this.symbolResolver = symbolResolver;
          this.summaryResolver = summaryResolver;
          this.data = [];
        }

        _createClass(ForJitSerializer, [{
          key: "addSourceType",
          value: function addSourceType(summary, metadata) {
            this.data.push({
              summary: summary,
              metadata: metadata,
              isLibrary: false
            });
          }
        }, {
          key: "addLibType",
          value: function addLibType(summary) {
            this.data.push({
              summary: summary,
              metadata: null,
              isLibrary: true
            });
          }
        }, {
          key: "serialize",
          value: function serialize(exportAsArr) {
            var _this261 = this;

            var exportAsBySymbol = new Map();

            var _iterator32 = _createForOfIteratorHelper(exportAsArr),
                _step32;

            try {
              for (_iterator32.s(); !(_step32 = _iterator32.n()).done;) {
                var _step32$value = _step32.value,
                    symbol = _step32$value.symbol,
                    exportAs = _step32$value.exportAs;
                exportAsBySymbol.set(symbol, exportAs);
              }
            } catch (err) {
              _iterator32.e(err);
            } finally {
              _iterator32.f();
            }

            var ngModuleSymbols = new Set();

            var _iterator33 = _createForOfIteratorHelper(this.data),
                _step33;

            try {
              for (_iterator33.s(); !(_step33 = _iterator33.n()).done;) {
                var _step33$value = _step33.value,
                    summary = _step33$value.summary,
                    metadata = _step33$value.metadata,
                    isLibrary = _step33$value.isLibrary;

                if (summary.summaryKind === CompileSummaryKind.NgModule) {
                  // collect the symbols that refer to NgModule classes.
                  // Note: we can't just rely on `summary.type.summaryKind` to determine this as
                  // we don't add the summaries of all referenced symbols when we serialize type summaries.
                  // See serializeSummaries for details.
                  ngModuleSymbols.add(summary.type.reference);
                  var modSummary = summary;

                  var _iterator34 = _createForOfIteratorHelper(modSummary.modules),
                      _step34;

                  try {
                    for (_iterator34.s(); !(_step34 = _iterator34.n()).done;) {
                      var mod = _step34.value;
                      ngModuleSymbols.add(mod.reference);
                    }
                  } catch (err) {
                    _iterator34.e(err);
                  } finally {
                    _iterator34.f();
                  }
                }

                if (!isLibrary) {
                  var fnName = summaryForJitName(summary.type.reference.name);
                  createSummaryForJitFunction(this.outputCtx, summary.type.reference, this.serializeSummaryWithDeps(summary, metadata));
                }
              }
            } catch (err) {
              _iterator33.e(err);
            } finally {
              _iterator33.f();
            }

            ngModuleSymbols.forEach(function (ngModuleSymbol) {
              if (_this261.summaryResolver.isLibraryFile(ngModuleSymbol.filePath)) {
                var exportAs = exportAsBySymbol.get(ngModuleSymbol) || ngModuleSymbol.name;
                var jitExportAsName = summaryForJitName(exportAs);

                _this261.outputCtx.statements.push(variable(jitExportAsName).set(_this261.serializeSummaryRef(ngModuleSymbol)).toDeclStmt(null, [StmtModifier.Exported]));
              }
            });
          }
        }, {
          key: "serializeSummaryWithDeps",
          value: function serializeSummaryWithDeps(summary, metadata) {
            var _this262 = this;

            var expressions = [this.serializeSummary(summary)];
            var providers = [];

            if (metadata instanceof CompileNgModuleMetadata) {
              expressions.push.apply(expressions, _toConsumableArray( // For directives / pipes, we only add the declared ones,
              // and rely on transitively importing NgModules to get the transitive
              // summaries.
              metadata.declaredDirectives.concat(metadata.declaredPipes).map(function (type) {
                return type.reference;
              }) // For modules,
              // we also add the summaries for modules
              // from libraries.
              // This is ok as we produce reexports for all transitive modules.
              .concat(metadata.transitiveModule.modules.map(function (type) {
                return type.reference;
              }).filter(function (ref) {
                return ref !== metadata.type.reference;
              })).map(function (ref) {
                return _this262.serializeSummaryRef(ref);
              }))); // Note: We don't use `NgModuleSummary.providers`, as that one is transitive,
              // and we already have transitive modules.

              providers = metadata.providers;
            } else if (summary.summaryKind === CompileSummaryKind.Directive) {
              var dirSummary = summary;
              providers = dirSummary.providers.concat(dirSummary.viewProviders);
            } // Note: We can't just refer to the `ngsummary.ts` files for `useClass` providers (as we do for
            // declaredDirectives / declaredPipes), as we allow
            // providers without ctor arguments to skip the `@Injectable` decorator,
            // i.e. we didn't generate .ngsummary.ts files for these.


            expressions.push.apply(expressions, _toConsumableArray(providers.filter(function (provider) {
              return !!provider.useClass;
            }).map(function (provider) {
              return _this262.serializeSummary({
                summaryKind: CompileSummaryKind.Injectable,
                type: provider.useClass
              });
            })));
            return literalArr(expressions);
          }
        }, {
          key: "serializeSummaryRef",
          value: function serializeSummaryRef(typeSymbol) {
            var jitImportedSymbol = this.symbolResolver.getStaticSymbol(summaryForJitFileName(typeSymbol.filePath), summaryForJitName(typeSymbol.name));
            return this.outputCtx.importExpr(jitImportedSymbol);
          }
        }, {
          key: "serializeSummary",
          value: function serializeSummary(data) {
            var outputCtx = this.outputCtx;

            var Transformer = /*#__PURE__*/function () {
              function Transformer() {
                _classCallCheck(this, Transformer);
              }

              _createClass(Transformer, [{
                key: "visitArray",
                value: function visitArray(arr, context) {
                  var _this263 = this;

                  return literalArr(arr.map(function (entry) {
                    return visitValue(entry, _this263, context);
                  }));
                }
              }, {
                key: "visitStringMap",
                value: function visitStringMap(map, context) {
                  var _this264 = this;

                  return new LiteralMapExpr(Object.keys(map).map(function (key) {
                    return new LiteralMapEntry(key, visitValue(map[key], _this264, context), false);
                  }));
                }
              }, {
                key: "visitPrimitive",
                value: function visitPrimitive(value, context) {
                  return literal(value);
                }
              }, {
                key: "visitOther",
                value: function visitOther(value, context) {
                  if (value instanceof StaticSymbol) {
                    return outputCtx.importExpr(value);
                  } else {
                    throw new Error("Illegal State: Encountered value ".concat(value));
                  }
                }
              }]);

              return Transformer;
            }();

            return visitValue(data, new Transformer(), null);
          }
        }]);

        return ForJitSerializer;
      }();

      var FromJsonDeserializer = /*#__PURE__*/function (_ValueTransformer4) {
        _inherits(FromJsonDeserializer, _ValueTransformer4);

        var _super109 = _createSuper(FromJsonDeserializer);

        function FromJsonDeserializer(symbolCache, summaryResolver) {
          var _this265;

          _classCallCheck(this, FromJsonDeserializer);

          _this265 = _super109.call(this);
          _this265.symbolCache = symbolCache;
          _this265.summaryResolver = summaryResolver;
          return _this265;
        }

        _createClass(FromJsonDeserializer, [{
          key: "deserialize",
          value: function deserialize(libraryFileName, json) {
            var _this266 = this;

            var data = JSON.parse(json);
            var allImportAs = [];
            this.symbols = data.symbols.map(function (serializedSymbol) {
              return _this266.symbolCache.get(_this266.summaryResolver.fromSummaryFileName(serializedSymbol.filePath, libraryFileName), serializedSymbol.name);
            });
            data.symbols.forEach(function (serializedSymbol, index) {
              var symbol = _this266.symbols[index];
              var importAs = serializedSymbol.importAs;

              if (typeof importAs === 'number') {
                allImportAs.push({
                  symbol: symbol,
                  importAs: _this266.symbols[importAs]
                });
              } else if (typeof importAs === 'string') {
                allImportAs.push({
                  symbol: symbol,
                  importAs: _this266.symbolCache.get(ngfactoryFilePath(libraryFileName), importAs)
                });
              }
            });
            var summaries = visitValue(data.summaries, this, null);
            return {
              moduleName: data.moduleName,
              summaries: summaries,
              importAs: allImportAs
            };
          }
        }, {
          key: "visitStringMap",
          value: function visitStringMap(map, context) {
            if ('__symbol' in map) {
              var baseSymbol = this.symbols[map['__symbol']];
              var members = map['members'];
              return members.length ? this.symbolCache.get(baseSymbol.filePath, baseSymbol.name, members) : baseSymbol;
            } else {
              return _get(_getPrototypeOf(FromJsonDeserializer.prototype), "visitStringMap", this).call(this, map, context);
            }
          }
        }]);

        return FromJsonDeserializer;
      }(ValueTransformer);

      function isCall(metadata) {
        return metadata && metadata.__symbolic === 'call';
      }

      function isFunctionCall(metadata) {
        return isCall(metadata) && unwrapResolvedMetadata(metadata.expression) instanceof StaticSymbol;
      }

      function isMethodCallOnVariable(metadata) {
        return isCall(metadata) && metadata.expression && metadata.expression.__symbolic === 'select' && unwrapResolvedMetadata(metadata.expression.expression) instanceof StaticSymbol;
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      var AotCompiler = /*#__PURE__*/function () {
        function AotCompiler(_config, _options, _host, reflector, _metadataResolver, _templateParser, _styleCompiler, _viewCompiler, _typeCheckCompiler, _ngModuleCompiler, _injectableCompiler, _outputEmitter, _summaryResolver, _symbolResolver) {
          _classCallCheck(this, AotCompiler);

          this._config = _config;
          this._options = _options;
          this._host = _host;
          this.reflector = reflector;
          this._metadataResolver = _metadataResolver;
          this._templateParser = _templateParser;
          this._styleCompiler = _styleCompiler;
          this._viewCompiler = _viewCompiler;
          this._typeCheckCompiler = _typeCheckCompiler;
          this._ngModuleCompiler = _ngModuleCompiler;
          this._injectableCompiler = _injectableCompiler;
          this._outputEmitter = _outputEmitter;
          this._summaryResolver = _summaryResolver;
          this._symbolResolver = _symbolResolver;
          this._templateAstCache = new Map();
          this._analyzedFiles = new Map();
          this._analyzedFilesForInjectables = new Map();
        }

        _createClass(AotCompiler, [{
          key: "clearCache",
          value: function clearCache() {
            this._metadataResolver.clearCache();
          }
        }, {
          key: "analyzeModulesSync",
          value: function analyzeModulesSync(rootFiles) {
            var _this267 = this;

            var analyzeResult = analyzeAndValidateNgModules(rootFiles, this._host, this._symbolResolver, this._metadataResolver);
            analyzeResult.ngModules.forEach(function (ngModule) {
              return _this267._metadataResolver.loadNgModuleDirectiveAndPipeMetadata(ngModule.type.reference, true);
            });
            return analyzeResult;
          }
        }, {
          key: "analyzeModulesAsync",
          value: function analyzeModulesAsync(rootFiles) {
            var _this268 = this;

            var analyzeResult = analyzeAndValidateNgModules(rootFiles, this._host, this._symbolResolver, this._metadataResolver);
            return Promise.all(analyzeResult.ngModules.map(function (ngModule) {
              return _this268._metadataResolver.loadNgModuleDirectiveAndPipeMetadata(ngModule.type.reference, false);
            })).then(function () {
              return analyzeResult;
            });
          }
        }, {
          key: "_analyzeFile",
          value: function _analyzeFile(fileName) {
            var analyzedFile = this._analyzedFiles.get(fileName);

            if (!analyzedFile) {
              analyzedFile = analyzeFile(this._host, this._symbolResolver, this._metadataResolver, fileName);

              this._analyzedFiles.set(fileName, analyzedFile);
            }

            return analyzedFile;
          }
        }, {
          key: "_analyzeFileForInjectables",
          value: function _analyzeFileForInjectables(fileName) {
            var analyzedFile = this._analyzedFilesForInjectables.get(fileName);

            if (!analyzedFile) {
              analyzedFile = analyzeFileForInjectables(this._host, this._symbolResolver, this._metadataResolver, fileName);

              this._analyzedFilesForInjectables.set(fileName, analyzedFile);
            }

            return analyzedFile;
          }
        }, {
          key: "findGeneratedFileNames",
          value: function findGeneratedFileNames(fileName) {
            var _this269 = this;

            var genFileNames = [];

            var file = this._analyzeFile(fileName); // Make sure we create a .ngfactory if we have a injectable/directive/pipe/NgModule
            // or a reference to a non source file.
            // Note: This is overestimating the required .ngfactory files as the real calculation is harder.
            // Only do this for StubEmitFlags.Basic, as adding a type check block
            // does not change this file (as we generate type check blocks based on NgModules).


            if (this._options.allowEmptyCodegenFiles || file.directives.length || file.pipes.length || file.injectables.length || file.ngModules.length || file.exportsNonSourceFiles) {
              genFileNames.push(ngfactoryFilePath(file.fileName, true));

              if (this._options.enableSummariesForJit) {
                genFileNames.push(summaryForJitFileName(file.fileName, true));
              }
            }

            var fileSuffix = normalizeGenFileSuffix(splitTypescriptSuffix(file.fileName, true)[1]);
            file.directives.forEach(function (dirSymbol) {
              var compMeta = _this269._metadataResolver.getNonNormalizedDirectiveMetadata(dirSymbol).metadata;

              if (!compMeta.isComponent) {
                return;
              } // Note: compMeta is a component and therefore template is non null.


              compMeta.template.styleUrls.forEach(function (styleUrl) {
                var normalizedUrl = _this269._host.resourceNameToFileName(styleUrl, file.fileName);

                if (!normalizedUrl) {
                  throw syntaxError("Couldn't resolve resource ".concat(styleUrl, " relative to ").concat(file.fileName));
                }

                var needsShim = (compMeta.template.encapsulation || _this269._config.defaultEncapsulation) === ViewEncapsulation.Emulated;
                genFileNames.push(_stylesModuleUrl(normalizedUrl, needsShim, fileSuffix));

                if (_this269._options.allowEmptyCodegenFiles) {
                  genFileNames.push(_stylesModuleUrl(normalizedUrl, !needsShim, fileSuffix));
                }
              });
            });
            return genFileNames;
          }
        }, {
          key: "emitBasicStub",
          value: function emitBasicStub(genFileName, originalFileName) {
            var outputCtx = this._createOutputContext(genFileName);

            if (genFileName.endsWith('.ngfactory.ts')) {
              if (!originalFileName) {
                throw new Error("Assertion error: require the original file for .ngfactory.ts stubs. File: ".concat(genFileName));
              }

              var originalFile = this._analyzeFile(originalFileName);

              this._createNgFactoryStub(outputCtx, originalFile, 1
              /* Basic */
              );
            } else if (genFileName.endsWith('.ngsummary.ts')) {
              if (this._options.enableSummariesForJit) {
                if (!originalFileName) {
                  throw new Error("Assertion error: require the original file for .ngsummary.ts stubs. File: ".concat(genFileName));
                }

                var _originalFile = this._analyzeFile(originalFileName);

                _createEmptyStub(outputCtx);

                _originalFile.ngModules.forEach(function (ngModule) {
                  // create exports that user code can reference
                  createForJitStub(outputCtx, ngModule.type.reference);
                });
              }
            } else if (genFileName.endsWith('.ngstyle.ts')) {
              _createEmptyStub(outputCtx);
            } // Note: for the stubs, we don't need a property srcFileUrl,
            // as later on in emitAllImpls we will create the proper GeneratedFiles with the
            // correct srcFileUrl.
            // This is good as e.g. for .ngstyle.ts files we can't derive
            // the url of components based on the genFileUrl.


            return this._codegenSourceModule('unknown', outputCtx);
          }
        }, {
          key: "emitTypeCheckStub",
          value: function emitTypeCheckStub(genFileName, originalFileName) {
            var originalFile = this._analyzeFile(originalFileName);

            var outputCtx = this._createOutputContext(genFileName);

            if (genFileName.endsWith('.ngfactory.ts')) {
              this._createNgFactoryStub(outputCtx, originalFile, 2
              /* TypeCheck */
              );
            }

            return outputCtx.statements.length > 0 ? this._codegenSourceModule(originalFile.fileName, outputCtx) : null;
          }
        }, {
          key: "loadFilesAsync",
          value: function loadFilesAsync(fileNames, tsFiles) {
            var _this270 = this;

            var files = fileNames.map(function (fileName) {
              return _this270._analyzeFile(fileName);
            });
            var loadingPromises = [];
            files.forEach(function (file) {
              return file.ngModules.forEach(function (ngModule) {
                return loadingPromises.push(_this270._metadataResolver.loadNgModuleDirectiveAndPipeMetadata(ngModule.type.reference, false));
              });
            });
            var analyzedInjectables = tsFiles.map(function (tsFile) {
              return _this270._analyzeFileForInjectables(tsFile);
            });
            return Promise.all(loadingPromises).then(function (_) {
              return {
                analyzedModules: mergeAndValidateNgFiles(files),
                analyzedInjectables: analyzedInjectables
              };
            });
          }
        }, {
          key: "loadFilesSync",
          value: function loadFilesSync(fileNames, tsFiles) {
            var _this271 = this;

            var files = fileNames.map(function (fileName) {
              return _this271._analyzeFile(fileName);
            });
            files.forEach(function (file) {
              return file.ngModules.forEach(function (ngModule) {
                return _this271._metadataResolver.loadNgModuleDirectiveAndPipeMetadata(ngModule.type.reference, true);
              });
            });
            var analyzedInjectables = tsFiles.map(function (tsFile) {
              return _this271._analyzeFileForInjectables(tsFile);
            });
            return {
              analyzedModules: mergeAndValidateNgFiles(files),
              analyzedInjectables: analyzedInjectables
            };
          }
        }, {
          key: "_createNgFactoryStub",
          value: function _createNgFactoryStub(outputCtx, file, emitFlags) {
            var _this272 = this;

            var componentId = 0;
            file.ngModules.forEach(function (ngModuleMeta, ngModuleIndex) {
              // Note: the code below needs to executed for StubEmitFlags.Basic and StubEmitFlags.TypeCheck,
              // so we don't change the .ngfactory file too much when adding the type-check block.
              // create exports that user code can reference
              _this272._ngModuleCompiler.createStub(outputCtx, ngModuleMeta.type.reference); // add references to the symbols from the metadata.
              // These can be used by the type check block for components,
              // and they also cause TypeScript to include these files into the program too,
              // which will make them part of the analyzedFiles.


              var externalReferences = [].concat(_toConsumableArray(ngModuleMeta.transitiveModule.directives.map(function (d) {
                return d.reference;
              })), _toConsumableArray(ngModuleMeta.transitiveModule.pipes.map(function (d) {
                return d.reference;
              })), _toConsumableArray(ngModuleMeta.importedModules.map(function (m) {
                return m.type.reference;
              })), _toConsumableArray(ngModuleMeta.exportedModules.map(function (m) {
                return m.type.reference;
              })), _toConsumableArray(_this272._externalIdentifierReferences([Identifiers.TemplateRef, Identifiers.ElementRef])));
              var externalReferenceVars = new Map();
              externalReferences.forEach(function (ref, typeIndex) {
                externalReferenceVars.set(ref, "_decl".concat(ngModuleIndex, "_").concat(typeIndex));
              });
              externalReferenceVars.forEach(function (varName, reference) {
                outputCtx.statements.push(variable(varName).set(NULL_EXPR.cast(DYNAMIC_TYPE)).toDeclStmt(expressionType(outputCtx.importExpr(reference,
                /* typeParams */
                null,
                /* useSummaries */
                false))));
              });

              if (emitFlags & 2
              /* TypeCheck */
              ) {
                  // add the type-check block for all components of the NgModule
                  ngModuleMeta.declaredDirectives.forEach(function (dirId) {
                    var compMeta = _this272._metadataResolver.getDirectiveMetadata(dirId.reference);

                    if (!compMeta.isComponent) {
                      return;
                    }

                    componentId++;

                    _this272._createTypeCheckBlock(outputCtx, "".concat(compMeta.type.reference.name, "_Host_").concat(componentId), ngModuleMeta, _this272._metadataResolver.getHostComponentMetadata(compMeta), [compMeta.type], externalReferenceVars);

                    _this272._createTypeCheckBlock(outputCtx, "".concat(compMeta.type.reference.name, "_").concat(componentId), ngModuleMeta, compMeta, ngModuleMeta.transitiveModule.directives, externalReferenceVars);
                  });
                }
            });

            if (outputCtx.statements.length === 0) {
              _createEmptyStub(outputCtx);
            }
          }
        }, {
          key: "_externalIdentifierReferences",
          value: function _externalIdentifierReferences(references) {
            var result = [];

            var _iterator35 = _createForOfIteratorHelper(references),
                _step35;

            try {
              for (_iterator35.s(); !(_step35 = _iterator35.n()).done;) {
                var reference = _step35.value;
                var token = createTokenForExternalReference(this.reflector, reference);

                if (token.identifier) {
                  result.push(token.identifier.reference);
                }
              }
            } catch (err) {
              _iterator35.e(err);
            } finally {
              _iterator35.f();
            }

            return result;
          }
        }, {
          key: "_createTypeCheckBlock",
          value: function _createTypeCheckBlock(ctx, componentId, moduleMeta, compMeta, directives, externalReferenceVars) {
            var _ctx$statements;

            var _this$_parseTemplate = this._parseTemplate(compMeta, moduleMeta, directives),
                parsedTemplate = _this$_parseTemplate.template,
                usedPipes = _this$_parseTemplate.pipes;

            (_ctx$statements = ctx.statements).push.apply(_ctx$statements, _toConsumableArray(this._typeCheckCompiler.compileComponent(componentId, compMeta, parsedTemplate, usedPipes, externalReferenceVars, ctx)));
          }
        }, {
          key: "emitMessageBundle",
          value: function emitMessageBundle(analyzeResult, locale) {
            var _this273 = this;

            var errors = [];
            var htmlParser = new HtmlParser(); // TODO(vicb): implicit tags & attributes

            var messageBundle = new MessageBundle(htmlParser, [], {}, locale);
            analyzeResult.files.forEach(function (file) {
              var compMetas = [];
              file.directives.forEach(function (directiveType) {
                var dirMeta = _this273._metadataResolver.getDirectiveMetadata(directiveType);

                if (dirMeta && dirMeta.isComponent) {
                  compMetas.push(dirMeta);
                }
              });
              compMetas.forEach(function (compMeta) {
                var html = compMeta.template.template; // Template URL points to either an HTML or TS file depending on whether
                // the file is used with `templateUrl:` or `template:`, respectively.

                var templateUrl = compMeta.template.templateUrl;
                var interpolationConfig = InterpolationConfig.fromArray(compMeta.template.interpolation);
                errors.push.apply(errors, _toConsumableArray(messageBundle.updateFromTemplate(html, templateUrl, interpolationConfig)));
              });
            });

            if (errors.length) {
              throw new Error(errors.map(function (e) {
                return e.toString();
              }).join('\n'));
            }

            return messageBundle;
          }
        }, {
          key: "emitAllPartialModules",
          value: function emitAllPartialModules(_ref44, r3Files) {
            var _this274 = this;

            var ngModuleByPipeOrDirective = _ref44.ngModuleByPipeOrDirective,
                files = _ref44.files;
            var contextMap = new Map();

            var getContext = function getContext(fileName) {
              if (!contextMap.has(fileName)) {
                contextMap.set(fileName, _this274._createOutputContext(fileName));
              }

              return contextMap.get(fileName);
            };

            files.forEach(function (file) {
              return _this274._compilePartialModule(file.fileName, ngModuleByPipeOrDirective, file.directives, file.pipes, file.ngModules, file.injectables, getContext(file.fileName));
            });
            r3Files.forEach(function (file) {
              return _this274._compileShallowModules(file.fileName, file.shallowModules, getContext(file.fileName));
            });
            return Array.from(contextMap.values()).map(function (context) {
              return {
                fileName: context.genFilePath,
                statements: [].concat(_toConsumableArray(context.constantPool.statements), _toConsumableArray(context.statements))
              };
            });
          }
        }, {
          key: "_compileShallowModules",
          value: function _compileShallowModules(fileName, shallowModules, context) {
            var _this275 = this;

            shallowModules.forEach(function (module) {
              return compileNgModuleFromRender2(context, module, _this275._injectableCompiler);
            });
          }
        }, {
          key: "_compilePartialModule",
          value: function _compilePartialModule(fileName, ngModuleByPipeOrDirective, directives, pipes, ngModules, injectables, context) {
            var _this276 = this;

            var errors = [];
            var schemaRegistry = new DomElementSchemaRegistry();
            var hostBindingParser = new BindingParser(this._templateParser.expressionParser, DEFAULT_INTERPOLATION_CONFIG, schemaRegistry, [], errors); // Process all components and directives

            directives.forEach(function (directiveType) {
              var directiveMetadata = _this276._metadataResolver.getDirectiveMetadata(directiveType);

              if (directiveMetadata.isComponent) {
                var _module3 = ngModuleByPipeOrDirective.get(directiveType);

                _module3 || error("Cannot determine the module for component '".concat(identifierName(directiveMetadata.type), "'"));
                var htmlAst = directiveMetadata.template.htmlAst;
                var preserveWhitespaces = directiveMetadata.template.preserveWhitespaces;

                if (!preserveWhitespaces) {
                  htmlAst = removeWhitespaces(htmlAst);
                }

                var render3Ast = htmlAstToRender3Ast(htmlAst.rootNodes, hostBindingParser); // Map of StaticType by directive selectors

                var directiveTypeBySel = new Map();

                var _directives = _module3.transitiveModule.directives.map(function (dir) {
                  return _this276._metadataResolver.getDirectiveSummary(dir.reference);
                });

                _directives.forEach(function (directive) {
                  if (directive.selector) {
                    directiveTypeBySel.set(directive.selector, directive.type.reference);
                  }
                }); // Map of StaticType by pipe names


                var pipeTypeByName = new Map();

                var _pipes = _module3.transitiveModule.pipes.map(function (pipe) {
                  return _this276._metadataResolver.getPipeSummary(pipe.reference);
                });

                _pipes.forEach(function (pipe) {
                  pipeTypeByName.set(pipe.name, pipe.type.reference);
                });

                compileComponentFromRender2(context, directiveMetadata, render3Ast, _this276.reflector, hostBindingParser, directiveTypeBySel, pipeTypeByName);
              } else {
                compileDirectiveFromRender2(context, directiveMetadata, _this276.reflector, hostBindingParser);
              }
            });
            pipes.forEach(function (pipeType) {
              var pipeMetadata = _this276._metadataResolver.getPipeMetadata(pipeType);

              if (pipeMetadata) {
                compilePipeFromRender2(context, pipeMetadata, _this276.reflector);
              }
            });
            injectables.forEach(function (injectable) {
              return _this276._injectableCompiler.compile(injectable, context);
            });
          }
        }, {
          key: "emitAllPartialModules2",
          value: function emitAllPartialModules2(files) {
            var _this277 = this;

            // Using reduce like this is a select many pattern (where map is a select pattern)
            return files.reduce(function (r, file) {
              r.push.apply(r, _toConsumableArray(_this277._emitPartialModule2(file.fileName, file.injectables)));
              return r;
            }, []);
          }
        }, {
          key: "_emitPartialModule2",
          value: function _emitPartialModule2(fileName, injectables) {
            var _this278 = this;

            var context = this._createOutputContext(fileName);

            injectables.forEach(function (injectable) {
              return _this278._injectableCompiler.compile(injectable, context);
            });

            if (context.statements && context.statements.length > 0) {
              return [{
                fileName: fileName,
                statements: [].concat(_toConsumableArray(context.constantPool.statements), _toConsumableArray(context.statements))
              }];
            }

            return [];
          }
        }, {
          key: "emitAllImpls",
          value: function emitAllImpls(analyzeResult) {
            var _this279 = this;

            var ngModuleByPipeOrDirective = analyzeResult.ngModuleByPipeOrDirective,
                files = analyzeResult.files;
            var sourceModules = files.map(function (file) {
              return _this279._compileImplFile(file.fileName, ngModuleByPipeOrDirective, file.directives, file.pipes, file.ngModules, file.injectables);
            });
            return flatten(sourceModules);
          }
        }, {
          key: "_compileImplFile",
          value: function _compileImplFile(srcFileUrl, ngModuleByPipeOrDirective, directives, pipes, ngModules, injectables) {
            var _this280 = this;

            var fileSuffix = normalizeGenFileSuffix(splitTypescriptSuffix(srcFileUrl, true)[1]);
            var generatedFiles = [];

            var outputCtx = this._createOutputContext(ngfactoryFilePath(srcFileUrl, true));

            generatedFiles.push.apply(generatedFiles, _toConsumableArray(this._createSummary(srcFileUrl, directives, pipes, ngModules, injectables, outputCtx))); // compile all ng modules

            ngModules.forEach(function (ngModuleMeta) {
              return _this280._compileModule(outputCtx, ngModuleMeta);
            }); // compile components

            directives.forEach(function (dirType) {
              var compMeta = _this280._metadataResolver.getDirectiveMetadata(dirType);

              if (!compMeta.isComponent) {
                return;
              }

              var ngModule = ngModuleByPipeOrDirective.get(dirType);

              if (!ngModule) {
                throw new Error("Internal Error: cannot determine the module for component ".concat(identifierName(compMeta.type), "!"));
              } // compile styles


              var componentStylesheet = _this280._styleCompiler.compileComponent(outputCtx, compMeta); // Note: compMeta is a component and therefore template is non null.


              compMeta.template.externalStylesheets.forEach(function (stylesheetMeta) {
                // Note: fill non shim and shim style files as they might
                // be shared by component with and without ViewEncapsulation.
                var shim = _this280._styleCompiler.needsStyleShim(compMeta);

                generatedFiles.push(_this280._codegenStyles(srcFileUrl, compMeta, stylesheetMeta, shim, fileSuffix));

                if (_this280._options.allowEmptyCodegenFiles) {
                  generatedFiles.push(_this280._codegenStyles(srcFileUrl, compMeta, stylesheetMeta, !shim, fileSuffix));
                }
              }); // compile components

              var compViewVars = _this280._compileComponent(outputCtx, compMeta, ngModule, ngModule.transitiveModule.directives, componentStylesheet, fileSuffix);

              _this280._compileComponentFactory(outputCtx, compMeta, ngModule, fileSuffix);
            });

            if (outputCtx.statements.length > 0 || this._options.allowEmptyCodegenFiles) {
              var srcModule = this._codegenSourceModule(srcFileUrl, outputCtx);

              generatedFiles.unshift(srcModule);
            }

            return generatedFiles;
          }
        }, {
          key: "_createSummary",
          value: function _createSummary(srcFileName, directives, pipes, ngModules, injectables, ngFactoryCtx) {
            var _this281 = this;

            var symbolSummaries = this._symbolResolver.getSymbolsOf(srcFileName).map(function (symbol) {
              return _this281._symbolResolver.resolveSymbol(symbol);
            });

            var typeData = [].concat(_toConsumableArray(ngModules.map(function (meta) {
              return {
                summary: _this281._metadataResolver.getNgModuleSummary(meta.type.reference),
                metadata: _this281._metadataResolver.getNgModuleMetadata(meta.type.reference)
              };
            })), _toConsumableArray(directives.map(function (ref) {
              return {
                summary: _this281._metadataResolver.getDirectiveSummary(ref),
                metadata: _this281._metadataResolver.getDirectiveMetadata(ref)
              };
            })), _toConsumableArray(pipes.map(function (ref) {
              return {
                summary: _this281._metadataResolver.getPipeSummary(ref),
                metadata: _this281._metadataResolver.getPipeMetadata(ref)
              };
            })), _toConsumableArray(injectables.map(function (ref) {
              return {
                summary: _this281._metadataResolver.getInjectableSummary(ref.symbol),
                metadata: _this281._metadataResolver.getInjectableSummary(ref.symbol).type
              };
            })));
            var forJitOutputCtx = this._options.enableSummariesForJit ? this._createOutputContext(summaryForJitFileName(srcFileName, true)) : null;

            var _serializeSummaries = serializeSummaries(srcFileName, forJitOutputCtx, this._summaryResolver, this._symbolResolver, symbolSummaries, typeData, this._options.createExternalSymbolFactoryReexports),
                json = _serializeSummaries.json,
                exportAs = _serializeSummaries.exportAs;

            exportAs.forEach(function (entry) {
              ngFactoryCtx.statements.push(variable(entry.exportAs).set(ngFactoryCtx.importExpr(entry.symbol)).toDeclStmt(null, [StmtModifier.Exported]));
            });
            var summaryJson = new GeneratedFile(srcFileName, summaryFileName(srcFileName), json);
            var result = [summaryJson];

            if (forJitOutputCtx) {
              result.push(this._codegenSourceModule(srcFileName, forJitOutputCtx));
            }

            return result;
          }
        }, {
          key: "_compileModule",
          value: function _compileModule(outputCtx, ngModule) {
            var providers = [];

            if (this._options.locale) {
              var normalizedLocale = this._options.locale.replace(/_/g, '-');

              providers.push({
                token: createTokenForExternalReference(this.reflector, Identifiers.LOCALE_ID),
                useValue: normalizedLocale
              });
            }

            if (this._options.i18nFormat) {
              providers.push({
                token: createTokenForExternalReference(this.reflector, Identifiers.TRANSLATIONS_FORMAT),
                useValue: this._options.i18nFormat
              });
            }

            this._ngModuleCompiler.compile(outputCtx, ngModule, providers);
          }
        }, {
          key: "_compileComponentFactory",
          value: function _compileComponentFactory(outputCtx, compMeta, ngModule, fileSuffix) {
            var hostMeta = this._metadataResolver.getHostComponentMetadata(compMeta);

            var hostViewFactoryVar = this._compileComponent(outputCtx, hostMeta, ngModule, [compMeta.type], null, fileSuffix).viewClassVar;

            var compFactoryVar = componentFactoryName(compMeta.type.reference);
            var inputsExprs = [];

            for (var propName in compMeta.inputs) {
              var templateName = compMeta.inputs[propName]; // Don't quote so that the key gets minified...

              inputsExprs.push(new LiteralMapEntry(propName, literal(templateName), false));
            }

            var outputsExprs = [];

            for (var _propName in compMeta.outputs) {
              var _templateName = compMeta.outputs[_propName]; // Don't quote so that the key gets minified...

              outputsExprs.push(new LiteralMapEntry(_propName, literal(_templateName), false));
            }

            outputCtx.statements.push(variable(compFactoryVar).set(importExpr(Identifiers.createComponentFactory).callFn([literal(compMeta.selector), outputCtx.importExpr(compMeta.type.reference), variable(hostViewFactoryVar), new LiteralMapExpr(inputsExprs), new LiteralMapExpr(outputsExprs), literalArr(compMeta.template.ngContentSelectors.map(function (selector) {
              return literal(selector);
            }))])).toDeclStmt(importType(Identifiers.ComponentFactory, [expressionType(outputCtx.importExpr(compMeta.type.reference))], [TypeModifier.Const]), [StmtModifier.Final, StmtModifier.Exported]));
          }
        }, {
          key: "_compileComponent",
          value: function _compileComponent(outputCtx, compMeta, ngModule, directiveIdentifiers, componentStyles, fileSuffix) {
            var _this$_parseTemplate2 = this._parseTemplate(compMeta, ngModule, directiveIdentifiers),
                parsedTemplate = _this$_parseTemplate2.template,
                usedPipes = _this$_parseTemplate2.pipes;

            var stylesExpr = componentStyles ? variable(componentStyles.stylesVar) : literalArr([]);

            var viewResult = this._viewCompiler.compileComponent(outputCtx, compMeta, parsedTemplate, stylesExpr, usedPipes);

            if (componentStyles) {
              _resolveStyleStatements(this._symbolResolver, componentStyles, this._styleCompiler.needsStyleShim(compMeta), fileSuffix);
            }

            return viewResult;
          }
        }, {
          key: "_parseTemplate",
          value: function _parseTemplate(compMeta, ngModule, directiveIdentifiers) {
            var _this282 = this;

            if (this._templateAstCache.has(compMeta.type.reference)) {
              return this._templateAstCache.get(compMeta.type.reference);
            }

            var preserveWhitespaces = compMeta.template.preserveWhitespaces;
            var directives = directiveIdentifiers.map(function (dir) {
              return _this282._metadataResolver.getDirectiveSummary(dir.reference);
            });
            var pipes = ngModule.transitiveModule.pipes.map(function (pipe) {
              return _this282._metadataResolver.getPipeSummary(pipe.reference);
            });

            var result = this._templateParser.parse(compMeta, compMeta.template.htmlAst, directives, pipes, ngModule.schemas, templateSourceUrl(ngModule.type, compMeta, compMeta.template), preserveWhitespaces);

            this._templateAstCache.set(compMeta.type.reference, result);

            return result;
          }
        }, {
          key: "_createOutputContext",
          value: function _createOutputContext(genFilePath) {
            var _this283 = this;

            var importExpr$1 = function importExpr$1(symbol) {
              var typeParams = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
              var useSummaries = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;

              if (!(symbol instanceof StaticSymbol)) {
                throw new Error("Internal error: unknown identifier ".concat(JSON.stringify(symbol)));
              }

              var arity = _this283._symbolResolver.getTypeArity(symbol) || 0;

              var _ref45 = _this283._symbolResolver.getImportAs(symbol, useSummaries) || symbol,
                  filePath = _ref45.filePath,
                  name = _ref45.name,
                  members = _ref45.members;

              var importModule = _this283._fileNameToModuleName(filePath, genFilePath); // It should be good enough to compare filePath to genFilePath and if they are equal
              // there is a self reference. However, ngfactory files generate to .ts but their
              // symbols have .d.ts so a simple compare is insufficient. They should be canonical
              // and is tracked by #17705.


              var selfReference = _this283._fileNameToModuleName(genFilePath, genFilePath);

              var moduleName = importModule === selfReference ? null : importModule; // If we are in a type expression that refers to a generic type then supply
              // the required type parameters. If there were not enough type parameters
              // supplied, supply any as the type. Outside a type expression the reference
              // should not supply type parameters and be treated as a simple value reference
              // to the constructor function itself.

              var suppliedTypeParams = typeParams || [];
              var missingTypeParamsCount = arity - suppliedTypeParams.length;
              var allTypeParams = suppliedTypeParams.concat(newArray(missingTypeParamsCount, DYNAMIC_TYPE));
              return members.reduce(function (expr, memberName) {
                return expr.prop(memberName);
              }, importExpr(new ExternalReference(moduleName, name, null), allTypeParams));
            };

            return {
              statements: [],
              genFilePath: genFilePath,
              importExpr: importExpr$1,
              constantPool: new ConstantPool()
            };
          }
        }, {
          key: "_fileNameToModuleName",
          value: function _fileNameToModuleName(importedFilePath, containingFilePath) {
            return this._summaryResolver.getKnownModuleName(importedFilePath) || this._symbolResolver.getKnownModuleName(importedFilePath) || this._host.fileNameToModuleName(importedFilePath, containingFilePath);
          }
        }, {
          key: "_codegenStyles",
          value: function _codegenStyles(srcFileUrl, compMeta, stylesheetMetadata, isShimmed, fileSuffix) {
            var outputCtx = this._createOutputContext(_stylesModuleUrl(stylesheetMetadata.moduleUrl, isShimmed, fileSuffix));

            var compiledStylesheet = this._styleCompiler.compileStyles(outputCtx, compMeta, stylesheetMetadata, isShimmed);

            _resolveStyleStatements(this._symbolResolver, compiledStylesheet, isShimmed, fileSuffix);

            return this._codegenSourceModule(srcFileUrl, outputCtx);
          }
        }, {
          key: "_codegenSourceModule",
          value: function _codegenSourceModule(srcFileUrl, ctx) {
            return new GeneratedFile(srcFileUrl, ctx.genFilePath, ctx.statements);
          }
        }, {
          key: "listLazyRoutes",
          value: function listLazyRoutes(entryRoute, analyzedModules) {
            var self = this;

            if (entryRoute) {
              var symbol = parseLazyRoute(entryRoute, this.reflector).referencedModule;
              return visitLazyRoute(symbol);
            } else if (analyzedModules) {
              var allLazyRoutes = [];

              var _iterator36 = _createForOfIteratorHelper(analyzedModules.ngModules),
                  _step36;

              try {
                for (_iterator36.s(); !(_step36 = _iterator36.n()).done;) {
                  var ngModule = _step36.value;

                  var lazyRoutes = _listLazyRoutes(ngModule, this.reflector);

                  var _iterator37 = _createForOfIteratorHelper(lazyRoutes),
                      _step37;

                  try {
                    for (_iterator37.s(); !(_step37 = _iterator37.n()).done;) {
                      var lazyRoute = _step37.value;
                      allLazyRoutes.push(lazyRoute);
                    }
                  } catch (err) {
                    _iterator37.e(err);
                  } finally {
                    _iterator37.f();
                  }
                }
              } catch (err) {
                _iterator36.e(err);
              } finally {
                _iterator36.f();
              }

              return allLazyRoutes;
            } else {
              throw new Error("Either route or analyzedModules has to be specified!");
            }

            function visitLazyRoute(symbol) {
              var seenRoutes = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Set();
              var allLazyRoutes = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];

              // Support pointing to default exports, but stop recursing there,
              // as the StaticReflector does not yet support default exports.
              if (seenRoutes.has(symbol) || !symbol.name) {
                return allLazyRoutes;
              }

              seenRoutes.add(symbol);

              var lazyRoutes = _listLazyRoutes(self._metadataResolver.getNgModuleMetadata(symbol, true), self.reflector);

              var _iterator38 = _createForOfIteratorHelper(lazyRoutes),
                  _step38;

              try {
                for (_iterator38.s(); !(_step38 = _iterator38.n()).done;) {
                  var _lazyRoute = _step38.value;
                  allLazyRoutes.push(_lazyRoute);
                  visitLazyRoute(_lazyRoute.referencedModule, seenRoutes, allLazyRoutes);
                }
              } catch (err) {
                _iterator38.e(err);
              } finally {
                _iterator38.f();
              }

              return allLazyRoutes;
            }
          }
        }]);

        return AotCompiler;
      }();

      function _createEmptyStub(outputCtx) {
        // Note: We need to produce at least one import statement so that
        // TypeScript knows that the file is an es6 module. Otherwise our generated
        // exports / imports won't be emitted properly by TypeScript.
        outputCtx.statements.push(importExpr(Identifiers.ComponentFactory).toStmt());
      }

      function _resolveStyleStatements(symbolResolver, compileResult, needsShim, fileSuffix) {
        compileResult.dependencies.forEach(function (dep) {
          dep.setValue(symbolResolver.getStaticSymbol(_stylesModuleUrl(dep.moduleUrl, needsShim, fileSuffix), dep.name));
        });
      }

      function _stylesModuleUrl(stylesheetUrl, shim, suffix) {
        return "".concat(stylesheetUrl).concat(shim ? '.shim' : '', ".ngstyle").concat(suffix);
      }

      function analyzeNgModules(fileNames, host, staticSymbolResolver, metadataResolver) {
        var files = _analyzeFilesIncludingNonProgramFiles(fileNames, host, staticSymbolResolver, metadataResolver);

        return mergeAnalyzedFiles(files);
      }

      function analyzeAndValidateNgModules(fileNames, host, staticSymbolResolver, metadataResolver) {
        return validateAnalyzedModules(analyzeNgModules(fileNames, host, staticSymbolResolver, metadataResolver));
      }

      function validateAnalyzedModules(analyzedModules) {
        if (analyzedModules.symbolsMissingModule && analyzedModules.symbolsMissingModule.length) {
          var messages = analyzedModules.symbolsMissingModule.map(function (s) {
            return "Cannot determine the module for class ".concat(s.name, " in ").concat(s.filePath, "! Add ").concat(s.name, " to the NgModule to fix it.");
          });
          throw syntaxError(messages.join('\n'));
        }

        return analyzedModules;
      } // Analyzes all of the program files,
      // including files that are not part of the program
      // but are referenced by an NgModule.


      function _analyzeFilesIncludingNonProgramFiles(fileNames, host, staticSymbolResolver, metadataResolver) {
        var seenFiles = new Set();
        var files = [];

        var visitFile = function visitFile(fileName) {
          if (seenFiles.has(fileName) || !host.isSourceFile(fileName)) {
            return false;
          }

          seenFiles.add(fileName);
          var analyzedFile = analyzeFile(host, staticSymbolResolver, metadataResolver, fileName);
          files.push(analyzedFile);
          analyzedFile.ngModules.forEach(function (ngModule) {
            ngModule.transitiveModule.modules.forEach(function (modMeta) {
              return visitFile(modMeta.reference.filePath);
            });
          });
        };

        fileNames.forEach(function (fileName) {
          return visitFile(fileName);
        });
        return files;
      }

      function analyzeFile(host, staticSymbolResolver, metadataResolver, fileName) {
        var abstractDirectives = [];
        var directives = [];
        var pipes = [];
        var injectables = [];
        var ngModules = [];
        var hasDecorators = staticSymbolResolver.hasDecorators(fileName);
        var exportsNonSourceFiles = false;
        var isDeclarationFile = fileName.endsWith('.d.ts'); // Don't analyze .d.ts files that have no decorators as a shortcut
        // to speed up the analysis. This prevents us from
        // resolving the references in these files.
        // Note: exportsNonSourceFiles is only needed when compiling with summaries,
        // which is not the case when .d.ts files are treated as input files.

        if (!isDeclarationFile || hasDecorators) {
          staticSymbolResolver.getSymbolsOf(fileName).forEach(function (symbol) {
            var resolvedSymbol = staticSymbolResolver.resolveSymbol(symbol);
            var symbolMeta = resolvedSymbol.metadata;

            if (!symbolMeta || symbolMeta.__symbolic === 'error') {
              return;
            }

            var isNgSymbol = false;

            if (symbolMeta.__symbolic === 'class') {
              if (metadataResolver.isDirective(symbol)) {
                isNgSymbol = true; // This directive either has a selector or doesn't. Selector-less directives get tracked
                // in abstractDirectives, not directives. The compiler doesn't deal with selector-less
                // directives at all, really, other than to persist their metadata. This is done so that
                // apps will have an easier time migrating to Ivy, which requires the selector-less
                // annotations to be applied.

                if (!metadataResolver.isAbstractDirective(symbol)) {
                  // The directive is an ordinary directive.
                  directives.push(symbol);
                } else {
                  // The directive has no selector and is an "abstract" directive, so track it
                  // accordingly.
                  abstractDirectives.push(symbol);
                }
              } else if (metadataResolver.isPipe(symbol)) {
                isNgSymbol = true;
                pipes.push(symbol);
              } else if (metadataResolver.isNgModule(symbol)) {
                var ngModule = metadataResolver.getNgModuleMetadata(symbol, false);

                if (ngModule) {
                  isNgSymbol = true;
                  ngModules.push(ngModule);
                }
              } else if (metadataResolver.isInjectable(symbol)) {
                isNgSymbol = true;
                var injectable = metadataResolver.getInjectableMetadata(symbol, null, false);

                if (injectable) {
                  injectables.push(injectable);
                }
              }
            }

            if (!isNgSymbol) {
              exportsNonSourceFiles = exportsNonSourceFiles || isValueExportingNonSourceFile(host, symbolMeta);
            }
          });
        }

        return {
          fileName: fileName,
          directives: directives,
          abstractDirectives: abstractDirectives,
          pipes: pipes,
          ngModules: ngModules,
          injectables: injectables,
          exportsNonSourceFiles: exportsNonSourceFiles
        };
      }

      function analyzeFileForInjectables(host, staticSymbolResolver, metadataResolver, fileName) {
        var injectables = [];
        var shallowModules = [];

        if (staticSymbolResolver.hasDecorators(fileName)) {
          staticSymbolResolver.getSymbolsOf(fileName).forEach(function (symbol) {
            var resolvedSymbol = staticSymbolResolver.resolveSymbol(symbol);
            var symbolMeta = resolvedSymbol.metadata;

            if (!symbolMeta || symbolMeta.__symbolic === 'error') {
              return;
            }

            if (symbolMeta.__symbolic === 'class') {
              if (metadataResolver.isInjectable(symbol)) {
                var injectable = metadataResolver.getInjectableMetadata(symbol, null, false);

                if (injectable) {
                  injectables.push(injectable);
                }
              } else if (metadataResolver.isNgModule(symbol)) {
                var _module4 = metadataResolver.getShallowModuleMetadata(symbol);

                if (_module4) {
                  shallowModules.push(_module4);
                }
              }
            }
          });
        }

        return {
          fileName: fileName,
          injectables: injectables,
          shallowModules: shallowModules
        };
      }

      function isValueExportingNonSourceFile(host, metadata) {
        var exportsNonSourceFiles = false;

        var Visitor = /*#__PURE__*/function () {
          function Visitor() {
            _classCallCheck(this, Visitor);
          }

          _createClass(Visitor, [{
            key: "visitArray",
            value: function visitArray(arr, context) {
              var _this284 = this;

              arr.forEach(function (v) {
                return visitValue(v, _this284, context);
              });
            }
          }, {
            key: "visitStringMap",
            value: function visitStringMap(map, context) {
              var _this285 = this;

              Object.keys(map).forEach(function (key) {
                return visitValue(map[key], _this285, context);
              });
            }
          }, {
            key: "visitPrimitive",
            value: function visitPrimitive(value, context) {}
          }, {
            key: "visitOther",
            value: function visitOther(value, context) {
              if (value instanceof StaticSymbol && !host.isSourceFile(value.filePath)) {
                exportsNonSourceFiles = true;
              }
            }
          }]);

          return Visitor;
        }();

        visitValue(metadata, new Visitor(), null);
        return exportsNonSourceFiles;
      }

      function mergeAnalyzedFiles(analyzedFiles) {
        var allNgModules = [];
        var ngModuleByPipeOrDirective = new Map();
        var allPipesAndDirectives = new Set();
        analyzedFiles.forEach(function (af) {
          af.ngModules.forEach(function (ngModule) {
            allNgModules.push(ngModule);
            ngModule.declaredDirectives.forEach(function (d) {
              return ngModuleByPipeOrDirective.set(d.reference, ngModule);
            });
            ngModule.declaredPipes.forEach(function (p) {
              return ngModuleByPipeOrDirective.set(p.reference, ngModule);
            });
          });
          af.directives.forEach(function (d) {
            return allPipesAndDirectives.add(d);
          });
          af.pipes.forEach(function (p) {
            return allPipesAndDirectives.add(p);
          });
        });
        var symbolsMissingModule = [];
        allPipesAndDirectives.forEach(function (ref) {
          if (!ngModuleByPipeOrDirective.has(ref)) {
            symbolsMissingModule.push(ref);
          }
        });
        return {
          ngModules: allNgModules,
          ngModuleByPipeOrDirective: ngModuleByPipeOrDirective,
          symbolsMissingModule: symbolsMissingModule,
          files: analyzedFiles
        };
      }

      function mergeAndValidateNgFiles(files) {
        return validateAnalyzedModules(mergeAnalyzedFiles(files));
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      var FORMATTED_MESSAGE = 'ngFormattedMessage';

      function indentStr(level) {
        if (level <= 0) return '';
        if (level < 6) return ['', ' ', '  ', '   ', '    ', '     '][level];
        var half = indentStr(Math.floor(level / 2));
        return half + half + (level % 2 === 1 ? ' ' : '');
      }

      function formatChain(chain) {
        var indent = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
        if (!chain) return '';
        var position = chain.position ? "".concat(chain.position.fileName, "(").concat(chain.position.line + 1, ",").concat(chain.position.column + 1, ")") : '';
        var prefix = position && indent === 0 ? "".concat(position, ": ") : '';
        var postfix = position && indent !== 0 ? " at ".concat(position) : '';
        var message = "".concat(prefix).concat(chain.message).concat(postfix);

        if (chain.next) {
          var _iterator39 = _createForOfIteratorHelper(chain.next),
              _step39;

          try {
            for (_iterator39.s(); !(_step39 = _iterator39.n()).done;) {
              var kid = _step39.value;
              message += '\n' + formatChain(kid, indent + 2);
            }
          } catch (err) {
            _iterator39.e(err);
          } finally {
            _iterator39.f();
          }
        }

        return "".concat(indentStr(indent)).concat(message);
      }

      function formattedError(chain) {
        var message = formatChain(chain) + '.';
        var error = syntaxError(message);
        error[FORMATTED_MESSAGE] = true;
        error.chain = chain;
        error.position = chain.position;
        return error;
      }

      function isFormattedError(error) {
        return !!error[FORMATTED_MESSAGE];
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      var ANGULAR_CORE = '@angular/core';
      var ANGULAR_ROUTER = '@angular/router';
      var HIDDEN_KEY = /^\$.*\$$/;
      var IGNORE = {
        __symbolic: 'ignore'
      };
      var USE_VALUE$1 = 'useValue';
      var PROVIDE = 'provide';
      var REFERENCE_SET = new Set([USE_VALUE$1, 'useFactory', 'data', 'id', 'loadChildren']);
      var TYPEGUARD_POSTFIX = 'TypeGuard';
      var USE_IF = 'UseIf';

      function shouldIgnore(value) {
        return value && value.__symbolic == 'ignore';
      }
      /**
       * A static reflector implements enough of the Reflector API that is necessary to compile
       * templates statically.
       */


      var StaticReflector = /*#__PURE__*/function () {
        function StaticReflector(summaryResolver, symbolResolver) {
          var _this286 = this;

          var knownMetadataClasses = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];
          var knownMetadataFunctions = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];
          var errorRecorder = arguments.length > 4 ? arguments[4] : undefined;

          _classCallCheck(this, StaticReflector);

          this.summaryResolver = summaryResolver;
          this.symbolResolver = symbolResolver;
          this.errorRecorder = errorRecorder;
          this.annotationCache = new Map();
          this.shallowAnnotationCache = new Map();
          this.propertyCache = new Map();
          this.parameterCache = new Map();
          this.methodCache = new Map();
          this.staticCache = new Map();
          this.conversionMap = new Map();
          this.resolvedExternalReferences = new Map();
          this.annotationForParentClassWithSummaryKind = new Map();
          this.initializeConversionMap();
          knownMetadataClasses.forEach(function (kc) {
            return _this286._registerDecoratorOrConstructor(_this286.getStaticSymbol(kc.filePath, kc.name), kc.ctor);
          });
          knownMetadataFunctions.forEach(function (kf) {
            return _this286._registerFunction(_this286.getStaticSymbol(kf.filePath, kf.name), kf.fn);
          });
          this.annotationForParentClassWithSummaryKind.set(CompileSummaryKind.Directive, [createDirective, createComponent]);
          this.annotationForParentClassWithSummaryKind.set(CompileSummaryKind.Pipe, [createPipe]);
          this.annotationForParentClassWithSummaryKind.set(CompileSummaryKind.NgModule, [createNgModule]);
          this.annotationForParentClassWithSummaryKind.set(CompileSummaryKind.Injectable, [createInjectable, createPipe, createDirective, createComponent, createNgModule]);
        }

        _createClass(StaticReflector, [{
          key: "componentModuleUrl",
          value: function componentModuleUrl(typeOrFunc) {
            var staticSymbol = this.findSymbolDeclaration(typeOrFunc);
            return this.symbolResolver.getResourcePath(staticSymbol);
          }
          /**
           * Invalidate the specified `symbols` on program change.
           * @param symbols
           */

        }, {
          key: "invalidateSymbols",
          value: function invalidateSymbols(symbols) {
            var _iterator40 = _createForOfIteratorHelper(symbols),
                _step40;

            try {
              for (_iterator40.s(); !(_step40 = _iterator40.n()).done;) {
                var symbol = _step40.value;
                this.annotationCache["delete"](symbol);
                this.shallowAnnotationCache["delete"](symbol);
                this.propertyCache["delete"](symbol);
                this.parameterCache["delete"](symbol);
                this.methodCache["delete"](symbol);
                this.staticCache["delete"](symbol);
                this.conversionMap["delete"](symbol);
              }
            } catch (err) {
              _iterator40.e(err);
            } finally {
              _iterator40.f();
            }
          }
        }, {
          key: "resolveExternalReference",
          value: function resolveExternalReference(ref, containingFile) {
            var key = undefined;

            if (!containingFile) {
              key = "".concat(ref.moduleName, ":").concat(ref.name);

              var _declarationSymbol = this.resolvedExternalReferences.get(key);

              if (_declarationSymbol) return _declarationSymbol;
            }

            var refSymbol = this.symbolResolver.getSymbolByModule(ref.moduleName, ref.name, containingFile);
            var declarationSymbol = this.findSymbolDeclaration(refSymbol);

            if (!containingFile) {
              this.symbolResolver.recordModuleNameForFileName(refSymbol.filePath, ref.moduleName);
              this.symbolResolver.recordImportAs(declarationSymbol, refSymbol);
            }

            if (key) {
              this.resolvedExternalReferences.set(key, declarationSymbol);
            }

            return declarationSymbol;
          }
        }, {
          key: "findDeclaration",
          value: function findDeclaration(moduleUrl, name, containingFile) {
            return this.findSymbolDeclaration(this.symbolResolver.getSymbolByModule(moduleUrl, name, containingFile));
          }
        }, {
          key: "tryFindDeclaration",
          value: function tryFindDeclaration(moduleUrl, name, containingFile) {
            var _this287 = this;

            return this.symbolResolver.ignoreErrorsFor(function () {
              return _this287.findDeclaration(moduleUrl, name, containingFile);
            });
          }
        }, {
          key: "findSymbolDeclaration",
          value: function findSymbolDeclaration(symbol) {
            var resolvedSymbol = this.symbolResolver.resolveSymbol(symbol);

            if (resolvedSymbol) {
              var resolvedMetadata = resolvedSymbol.metadata;

              if (resolvedMetadata && resolvedMetadata.__symbolic === 'resolved') {
                resolvedMetadata = resolvedMetadata.symbol;
              }

              if (resolvedMetadata instanceof StaticSymbol) {
                return this.findSymbolDeclaration(resolvedSymbol.metadata);
              }
            }

            return symbol;
          }
        }, {
          key: "tryAnnotations",
          value: function tryAnnotations(type) {
            var originalRecorder = this.errorRecorder;

            this.errorRecorder = function (error, fileName) {};

            try {
              return this.annotations(type);
            } finally {
              this.errorRecorder = originalRecorder;
            }
          }
        }, {
          key: "annotations",
          value: function annotations(type) {
            var _this288 = this;

            return this._annotations(type, function (type, decorators) {
              return _this288.simplify(type, decorators);
            }, this.annotationCache);
          }
        }, {
          key: "shallowAnnotations",
          value: function shallowAnnotations(type) {
            var _this289 = this;

            return this._annotations(type, function (type, decorators) {
              return _this289.simplify(type, decorators, true);
            }, this.shallowAnnotationCache);
          }
        }, {
          key: "_annotations",
          value: function _annotations(type, simplify, annotationCache) {
            var annotations = annotationCache.get(type);

            if (!annotations) {
              annotations = [];
              var classMetadata = this.getTypeMetadata(type);
              var parentType = this.findParentType(type, classMetadata);

              if (parentType) {
                var _annotations2;

                var parentAnnotations = this.annotations(parentType);

                (_annotations2 = annotations).push.apply(_annotations2, _toConsumableArray(parentAnnotations));
              }

              var ownAnnotations = [];

              if (classMetadata['decorators']) {
                ownAnnotations = simplify(type, classMetadata['decorators']);

                if (ownAnnotations) {
                  var _annotations3;

                  (_annotations3 = annotations).push.apply(_annotations3, _toConsumableArray(ownAnnotations));
                }
              }

              if (parentType && !this.summaryResolver.isLibraryFile(type.filePath) && this.summaryResolver.isLibraryFile(parentType.filePath)) {
                var summary = this.summaryResolver.resolveSummary(parentType);

                if (summary && summary.type) {
                  var requiredAnnotationTypes = this.annotationForParentClassWithSummaryKind.get(summary.type.summaryKind);
                  var typeHasRequiredAnnotation = requiredAnnotationTypes.some(function (requiredType) {
                    return ownAnnotations.some(function (ann) {
                      return requiredType.isTypeOf(ann);
                    });
                  });

                  if (!typeHasRequiredAnnotation) {
                    this.reportError(formatMetadataError(metadataError("Class ".concat(type.name, " in ").concat(type.filePath, " extends from a ").concat(CompileSummaryKind[summary.type.summaryKind], " in another compilation unit without duplicating the decorator"),
                    /* summary */
                    undefined, "Please add a ".concat(requiredAnnotationTypes.map(function (type) {
                      return type.ngMetadataName;
                    }).join(' or '), " decorator to the class")), type), type);
                  }
                }
              }

              annotationCache.set(type, annotations.filter(function (ann) {
                return !!ann;
              }));
            }

            return annotations;
          }
        }, {
          key: "propMetadata",
          value: function propMetadata(type) {
            var _this290 = this;

            var propMetadata = this.propertyCache.get(type);

            if (!propMetadata) {
              var classMetadata = this.getTypeMetadata(type);
              propMetadata = {};
              var parentType = this.findParentType(type, classMetadata);

              if (parentType) {
                var parentPropMetadata = this.propMetadata(parentType);
                Object.keys(parentPropMetadata).forEach(function (parentProp) {
                  propMetadata[parentProp] = parentPropMetadata[parentProp];
                });
              }

              var members = classMetadata['members'] || {};
              Object.keys(members).forEach(function (propName) {
                var propData = members[propName];
                var prop = propData.find(function (a) {
                  return a['__symbolic'] == 'property' || a['__symbolic'] == 'method';
                });
                var decorators = []; // hasOwnProperty() is used here to make sure we do not look up methods
                // on `Object.prototype`.

                if (propMetadata === null || propMetadata === void 0 ? void 0 : propMetadata.hasOwnProperty(propName)) {
                  decorators.push.apply(decorators, _toConsumableArray(propMetadata[propName]));
                }

                propMetadata[propName] = decorators;

                if (prop && prop['decorators']) {
                  decorators.push.apply(decorators, _toConsumableArray(_this290.simplify(type, prop['decorators'])));
                }
              });
              this.propertyCache.set(type, propMetadata);
            }

            return propMetadata;
          }
        }, {
          key: "parameters",
          value: function parameters(type) {
            var _this291 = this;

            if (!(type instanceof StaticSymbol)) {
              this.reportError(new Error("parameters received ".concat(JSON.stringify(type), " which is not a StaticSymbol")), type);
              return [];
            }

            try {
              var parameters = this.parameterCache.get(type);

              if (!parameters) {
                var classMetadata = this.getTypeMetadata(type);
                var parentType = this.findParentType(type, classMetadata);
                var members = classMetadata ? classMetadata['members'] : null;
                var ctorData = members ? members['__ctor__'] : null;

                if (ctorData) {
                  var ctor = ctorData.find(function (a) {
                    return a['__symbolic'] == 'constructor';
                  });
                  var rawParameterTypes = ctor['parameters'] || [];
                  var parameterDecorators = this.simplify(type, ctor['parameterDecorators'] || []);
                  parameters = [];
                  rawParameterTypes.forEach(function (rawParamType, index) {
                    var nestedResult = [];

                    var paramType = _this291.trySimplify(type, rawParamType);

                    if (paramType) nestedResult.push(paramType);
                    var decorators = parameterDecorators ? parameterDecorators[index] : null;

                    if (decorators) {
                      nestedResult.push.apply(nestedResult, _toConsumableArray(decorators));
                    }

                    parameters.push(nestedResult);
                  });
                } else if (parentType) {
                  parameters = this.parameters(parentType);
                }

                if (!parameters) {
                  parameters = [];
                }

                this.parameterCache.set(type, parameters);
              }

              return parameters;
            } catch (e) {
              console.error("Failed on type ".concat(JSON.stringify(type), " with error ").concat(e));
              throw e;
            }
          }
        }, {
          key: "_methodNames",
          value: function _methodNames(type) {
            var methodNames = this.methodCache.get(type);

            if (!methodNames) {
              var classMetadata = this.getTypeMetadata(type);
              methodNames = {};
              var parentType = this.findParentType(type, classMetadata);

              if (parentType) {
                var parentMethodNames = this._methodNames(parentType);

                Object.keys(parentMethodNames).forEach(function (parentProp) {
                  methodNames[parentProp] = parentMethodNames[parentProp];
                });
              }

              var members = classMetadata['members'] || {};
              Object.keys(members).forEach(function (propName) {
                var propData = members[propName];
                var isMethod = propData.some(function (a) {
                  return a['__symbolic'] == 'method';
                });
                methodNames[propName] = methodNames[propName] || isMethod;
              });
              this.methodCache.set(type, methodNames);
            }

            return methodNames;
          }
        }, {
          key: "_staticMembers",
          value: function _staticMembers(type) {
            var staticMembers = this.staticCache.get(type);

            if (!staticMembers) {
              var classMetadata = this.getTypeMetadata(type);
              var staticMemberData = classMetadata['statics'] || {};
              staticMembers = Object.keys(staticMemberData);
              this.staticCache.set(type, staticMembers);
            }

            return staticMembers;
          }
        }, {
          key: "findParentType",
          value: function findParentType(type, classMetadata) {
            var parentType = this.trySimplify(type, classMetadata['extends']);

            if (parentType instanceof StaticSymbol) {
              return parentType;
            }
          }
        }, {
          key: "hasLifecycleHook",
          value: function hasLifecycleHook(type, lcProperty) {
            if (!(type instanceof StaticSymbol)) {
              this.reportError(new Error("hasLifecycleHook received ".concat(JSON.stringify(type), " which is not a StaticSymbol")), type);
            }

            try {
              return !!this._methodNames(type)[lcProperty];
            } catch (e) {
              console.error("Failed on type ".concat(JSON.stringify(type), " with error ").concat(e));
              throw e;
            }
          }
        }, {
          key: "guards",
          value: function guards(type) {
            if (!(type instanceof StaticSymbol)) {
              this.reportError(new Error("guards received ".concat(JSON.stringify(type), " which is not a StaticSymbol")), type);
              return {};
            }

            var staticMembers = this._staticMembers(type);

            var result = {};

            var _iterator41 = _createForOfIteratorHelper(staticMembers),
                _step41;

            try {
              for (_iterator41.s(); !(_step41 = _iterator41.n()).done;) {
                var name = _step41.value;

                if (name.endsWith(TYPEGUARD_POSTFIX)) {
                  var property = name.substr(0, name.length - TYPEGUARD_POSTFIX.length);
                  var value = void 0;

                  if (property.endsWith(USE_IF)) {
                    property = name.substr(0, property.length - USE_IF.length);
                    value = USE_IF;
                  } else {
                    value = this.getStaticSymbol(type.filePath, type.name, [name]);
                  }

                  result[property] = value;
                }
              }
            } catch (err) {
              _iterator41.e(err);
            } finally {
              _iterator41.f();
            }

            return result;
          }
        }, {
          key: "_registerDecoratorOrConstructor",
          value: function _registerDecoratorOrConstructor(type, ctor) {
            this.conversionMap.set(type, function (context, args) {
              return _construct(ctor, _toConsumableArray(args));
            });
          }
        }, {
          key: "_registerFunction",
          value: function _registerFunction(type, fn) {
            this.conversionMap.set(type, function (context, args) {
              return fn.apply(undefined, args);
            });
          }
        }, {
          key: "initializeConversionMap",
          value: function initializeConversionMap() {
            this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE, 'Injectable'), createInjectable);

            this.injectionToken = this.findDeclaration(ANGULAR_CORE, 'InjectionToken');
            this.opaqueToken = this.findDeclaration(ANGULAR_CORE, 'OpaqueToken');
            this.ROUTES = this.tryFindDeclaration(ANGULAR_ROUTER, 'ROUTES');
            this.ANALYZE_FOR_ENTRY_COMPONENTS = this.findDeclaration(ANGULAR_CORE, 'ANALYZE_FOR_ENTRY_COMPONENTS');

            this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE, 'Host'), createHost);

            this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE, 'Self'), createSelf);

            this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE, 'SkipSelf'), createSkipSelf);

            this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE, 'Inject'), createInject);

            this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE, 'Optional'), createOptional);

            this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE, 'Attribute'), createAttribute);

            this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE, 'ContentChild'), createContentChild);

            this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE, 'ContentChildren'), createContentChildren);

            this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE, 'ViewChild'), createViewChild);

            this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE, 'ViewChildren'), createViewChildren);

            this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE, 'Input'), createInput);

            this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE, 'Output'), createOutput);

            this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE, 'Pipe'), createPipe);

            this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE, 'HostBinding'), createHostBinding);

            this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE, 'HostListener'), createHostListener);

            this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE, 'Directive'), createDirective);

            this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE, 'Component'), createComponent);

            this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE, 'NgModule'), createNgModule); // Note: Some metadata classes can be used directly with Provider.deps.


            this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE, 'Host'), createHost);

            this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE, 'Self'), createSelf);

            this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE, 'SkipSelf'), createSkipSelf);

            this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE, 'Optional'), createOptional);
          }
          /**
           * getStaticSymbol produces a Type whose metadata is known but whose implementation is not loaded.
           * All types passed to the StaticResolver should be pseudo-types returned by this method.
           *
           * @param declarationFile the absolute path of the file where the symbol is declared
           * @param name the name of the type.
           */

        }, {
          key: "getStaticSymbol",
          value: function getStaticSymbol(declarationFile, name, members) {
            return this.symbolResolver.getStaticSymbol(declarationFile, name, members);
          }
          /**
           * Simplify but discard any errors
           */

        }, {
          key: "trySimplify",
          value: function trySimplify(context, value) {
            var originalRecorder = this.errorRecorder;

            this.errorRecorder = function (error, fileName) {};

            var result = this.simplify(context, value);
            this.errorRecorder = originalRecorder;
            return result;
          }
          /** @internal */

        }, {
          key: "simplify",
          value: function simplify(context, value) {
            var lazy = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
            var self = this;
            var scope = BindingScope$1.empty;
            var calling = new Map();
            var rootContext = context;

            function simplifyInContext(context, value, depth, references) {
              function resolveReferenceValue(staticSymbol) {
                var resolvedSymbol = self.symbolResolver.resolveSymbol(staticSymbol);
                return resolvedSymbol ? resolvedSymbol.metadata : null;
              }

              function simplifyEagerly(value) {
                return simplifyInContext(context, value, depth, 0);
              }

              function simplifyLazily(value) {
                return simplifyInContext(context, value, depth, references + 1);
              }

              function simplifyNested(nestedContext, value) {
                if (nestedContext === context) {
                  // If the context hasn't changed let the exception propagate unmodified.
                  return simplifyInContext(nestedContext, value, depth + 1, references);
                }

                try {
                  return simplifyInContext(nestedContext, value, depth + 1, references);
                } catch (e) {
                  if (isMetadataError(e)) {
                    // Propagate the message text up but add a message to the chain that explains how we got
                    // here.
                    // e.chain implies e.symbol
                    var summaryMsg = e.chain ? 'references \'' + e.symbol.name + '\'' : errorSummary(e);
                    var summary = "'".concat(nestedContext.name, "' ").concat(summaryMsg);
                    var chain = {
                      message: summary,
                      position: e.position,
                      next: e.chain
                    }; // TODO(chuckj): retrieve the position information indirectly from the collectors node
                    // map if the metadata is from a .ts file.

                    self.error({
                      message: e.message,
                      advise: e.advise,
                      context: e.context,
                      chain: chain,
                      symbol: nestedContext
                    }, context);
                  } else {
                    // It is probably an internal error.
                    throw e;
                  }
                }
              }

              function simplifyCall(functionSymbol, targetFunction, args, targetExpression) {
                if (targetFunction && targetFunction['__symbolic'] == 'function') {
                  if (calling.get(functionSymbol)) {
                    self.error({
                      message: 'Recursion is not supported',
                      summary: "called '".concat(functionSymbol.name, "' recursively"),
                      value: targetFunction
                    }, functionSymbol);
                  }

                  try {
                    var _value6 = targetFunction['value'];

                    if (_value6 && (depth != 0 || _value6.__symbolic != 'error')) {
                      var parameters = targetFunction['parameters'];
                      var defaults = targetFunction.defaults;
                      args = args.map(function (arg) {
                        return simplifyNested(context, arg);
                      }).map(function (arg) {
                        return shouldIgnore(arg) ? undefined : arg;
                      });

                      if (defaults && defaults.length > args.length) {
                        var _args3;

                        (_args3 = args).push.apply(_args3, _toConsumableArray(defaults.slice(args.length).map(function (value) {
                          return simplify(value);
                        })));
                      }

                      calling.set(functionSymbol, true);
                      var functionScope = BindingScope$1.build();

                      for (var i = 0; i < parameters.length; i++) {
                        functionScope.define(parameters[i], args[i]);
                      }

                      var oldScope = scope;

                      var _result;

                      try {
                        scope = functionScope.done();
                        _result = simplifyNested(functionSymbol, _value6);
                      } finally {
                        scope = oldScope;
                      }

                      return _result;
                    }
                  } finally {
                    calling["delete"](functionSymbol);
                  }
                }

                if (depth === 0) {
                  // If depth is 0 we are evaluating the top level expression that is describing element
                  // decorator. In this case, it is a decorator we don't understand, such as a custom
                  // non-angular decorator, and we should just ignore it.
                  return IGNORE;
                }

                var position = undefined;

                if (targetExpression && targetExpression.__symbolic == 'resolved') {
                  var line = targetExpression.line;
                  var character = targetExpression.character;
                  var fileName = targetExpression.fileName;

                  if (fileName != null && line != null && character != null) {
                    position = {
                      fileName: fileName,
                      line: line,
                      column: character
                    };
                  }
                }

                self.error({
                  message: FUNCTION_CALL_NOT_SUPPORTED,
                  context: functionSymbol,
                  value: targetFunction,
                  position: position
                }, context);
              }

              function simplify(expression) {
                if (isPrimitive(expression)) {
                  return expression;
                }

                if (Array.isArray(expression)) {
                  var _result2 = [];

                  var _iterator42 = _createForOfIteratorHelper(expression),
                      _step42;

                  try {
                    for (_iterator42.s(); !(_step42 = _iterator42.n()).done;) {
                      var item = _step42.value;

                      // Check for a spread expression
                      if (item && item.__symbolic === 'spread') {
                        // We call with references as 0 because we require the actual value and cannot
                        // tolerate a reference here.
                        var spreadArray = simplifyEagerly(item.expression);

                        if (Array.isArray(spreadArray)) {
                          var _iterator43 = _createForOfIteratorHelper(spreadArray),
                              _step43;

                          try {
                            for (_iterator43.s(); !(_step43 = _iterator43.n()).done;) {
                              var spreadItem = _step43.value;

                              _result2.push(spreadItem);
                            }
                          } catch (err) {
                            _iterator43.e(err);
                          } finally {
                            _iterator43.f();
                          }

                          continue;
                        }
                      }

                      var _value7 = simplify(item);

                      if (shouldIgnore(_value7)) {
                        continue;
                      }

                      _result2.push(_value7);
                    }
                  } catch (err) {
                    _iterator42.e(err);
                  } finally {
                    _iterator42.f();
                  }

                  return _result2;
                }

                if (expression instanceof StaticSymbol) {
                  // Stop simplification at builtin symbols or if we are in a reference context and
                  // the symbol doesn't have members.
                  if (expression === self.injectionToken || self.conversionMap.has(expression) || references > 0 && !expression.members.length) {
                    return expression;
                  } else {
                    var staticSymbol = expression;
                    var declarationValue = resolveReferenceValue(staticSymbol);

                    if (declarationValue != null) {
                      return simplifyNested(staticSymbol, declarationValue);
                    } else {
                      return staticSymbol;
                    }
                  }
                }

                if (expression) {
                  if (expression['__symbolic']) {
                    var _staticSymbol;

                    switch (expression['__symbolic']) {
                      case 'binop':
                        var left = simplify(expression['left']);
                        if (shouldIgnore(left)) return left;
                        var right = simplify(expression['right']);
                        if (shouldIgnore(right)) return right;

                        switch (expression['operator']) {
                          case '&&':
                            return left && right;

                          case '||':
                            return left || right;

                          case '|':
                            return left | right;

                          case '^':
                            return left ^ right;

                          case '&':
                            return left & right;

                          case '==':
                            return left == right;

                          case '!=':
                            return left != right;

                          case '===':
                            return left === right;

                          case '!==':
                            return left !== right;

                          case '<':
                            return left < right;

                          case '>':
                            return left > right;

                          case '<=':
                            return left <= right;

                          case '>=':
                            return left >= right;

                          case '<<':
                            return left << right;

                          case '>>':
                            return left >> right;

                          case '+':
                            return left + right;

                          case '-':
                            return left - right;

                          case '*':
                            return left * right;

                          case '/':
                            return left / right;

                          case '%':
                            return left % right;
                        }

                        return null;

                      case 'if':
                        var condition = simplify(expression['condition']);
                        return condition ? simplify(expression['thenExpression']) : simplify(expression['elseExpression']);

                      case 'pre':
                        var operand = simplify(expression['operand']);
                        if (shouldIgnore(operand)) return operand;

                        switch (expression['operator']) {
                          case '+':
                            return operand;

                          case '-':
                            return -operand;

                          case '!':
                            return !operand;

                          case '~':
                            return ~operand;
                        }

                        return null;

                      case 'index':
                        var indexTarget = simplifyEagerly(expression['expression']);
                        var index = simplifyEagerly(expression['index']);
                        if (indexTarget && isPrimitive(index)) return indexTarget[index];
                        return null;

                      case 'select':
                        var member = expression['member'];
                        var selectContext = context;
                        var selectTarget = simplify(expression['expression']);

                        if (selectTarget instanceof StaticSymbol) {
                          var members = selectTarget.members.concat(member);
                          selectContext = self.getStaticSymbol(selectTarget.filePath, selectTarget.name, members);

                          var _declarationValue = resolveReferenceValue(selectContext);

                          if (_declarationValue != null) {
                            return simplifyNested(selectContext, _declarationValue);
                          } else {
                            return selectContext;
                          }
                        }

                        if (selectTarget && isPrimitive(member)) return simplifyNested(selectContext, selectTarget[member]);
                        return null;

                      case 'reference':
                        // Note: This only has to deal with variable references, as symbol references have
                        // been converted into 'resolved'
                        // in the StaticSymbolResolver.
                        var name = expression['name'];
                        var localValue = scope.resolve(name);

                        if (localValue != BindingScope$1.missing) {
                          return localValue;
                        }

                        break;

                      case 'resolved':
                        try {
                          return simplify(expression.symbol);
                        } catch (e) {
                          // If an error is reported evaluating the symbol record the position of the
                          // reference in the error so it can
                          // be reported in the error message generated from the exception.
                          if (isMetadataError(e) && expression.fileName != null && expression.line != null && expression.character != null) {
                            e.position = {
                              fileName: expression.fileName,
                              line: expression.line,
                              column: expression.character
                            };
                          }

                          throw e;
                        }

                      case 'class':
                        return context;

                      case 'function':
                        return context;

                      case 'new':
                      case 'call':
                        // Determine if the function is a built-in conversion
                        _staticSymbol = simplifyInContext(context, expression['expression'], depth + 1,
                        /* references */
                        0);

                        if (_staticSymbol instanceof StaticSymbol) {
                          if (_staticSymbol === self.injectionToken || _staticSymbol === self.opaqueToken) {
                            // if somebody calls new InjectionToken, don't create an InjectionToken,
                            // but rather return the symbol to which the InjectionToken is assigned to.
                            // OpaqueToken is supported too as it is required by the language service to
                            // support v4 and prior versions of Angular.
                            return context;
                          }

                          var argExpressions = expression['arguments'] || [];
                          var converter = self.conversionMap.get(_staticSymbol);

                          if (converter) {
                            var args = argExpressions.map(function (arg) {
                              return simplifyNested(context, arg);
                            }).map(function (arg) {
                              return shouldIgnore(arg) ? undefined : arg;
                            });
                            return converter(context, args);
                          } else {
                            // Determine if the function is one we can simplify.
                            var targetFunction = resolveReferenceValue(_staticSymbol);
                            return simplifyCall(_staticSymbol, targetFunction, argExpressions, expression['expression']);
                          }
                        }

                        return IGNORE;

                      case 'error':
                        var message = expression.message;

                        if (expression['line'] != null) {
                          self.error({
                            message: message,
                            context: expression.context,
                            value: expression,
                            position: {
                              fileName: expression['fileName'],
                              line: expression['line'],
                              column: expression['character']
                            }
                          }, context);
                        } else {
                          self.error({
                            message: message,
                            context: expression.context
                          }, context);
                        }

                        return IGNORE;

                      case 'ignore':
                        return expression;
                    }

                    return null;
                  }

                  return mapStringMap(expression, function (value, name) {
                    if (REFERENCE_SET.has(name)) {
                      if (name === USE_VALUE$1 && PROVIDE in expression) {
                        // If this is a provider expression, check for special tokens that need the value
                        // during analysis.
                        var provide = simplify(expression.provide);

                        if (provide === self.ROUTES || provide == self.ANALYZE_FOR_ENTRY_COMPONENTS) {
                          return simplify(value);
                        }
                      }

                      return simplifyLazily(value);
                    }

                    return simplify(value);
                  });
                }

                return IGNORE;
              }

              return simplify(value);
            }

            var result;

            try {
              result = simplifyInContext(context, value, 0, lazy ? 1 : 0);
            } catch (e) {
              if (this.errorRecorder) {
                this.reportError(e, context);
              } else {
                throw formatMetadataError(e, context);
              }
            }

            if (shouldIgnore(result)) {
              return undefined;
            }

            return result;
          }
        }, {
          key: "getTypeMetadata",
          value: function getTypeMetadata(type) {
            var resolvedSymbol = this.symbolResolver.resolveSymbol(type);
            return resolvedSymbol && resolvedSymbol.metadata ? resolvedSymbol.metadata : {
              __symbolic: 'class'
            };
          }
        }, {
          key: "reportError",
          value: function reportError(error, context, path) {
            if (this.errorRecorder) {
              this.errorRecorder(formatMetadataError(error, context), context && context.filePath || path);
            } else {
              throw error;
            }
          }
        }, {
          key: "error",
          value: function error(_ref46, reportingContext) {
            var message = _ref46.message,
                summary = _ref46.summary,
                advise = _ref46.advise,
                position = _ref46.position,
                context = _ref46.context,
                value = _ref46.value,
                symbol = _ref46.symbol,
                chain = _ref46.chain;
            this.reportError(metadataError(message, summary, advise, position, symbol, context, chain), reportingContext);
          }
        }]);

        return StaticReflector;
      }();

      var METADATA_ERROR = 'ngMetadataError';

      function metadataError(message, summary, advise, position, symbol, context, chain) {
        var error = syntaxError(message);
        error[METADATA_ERROR] = true;
        if (advise) error.advise = advise;
        if (position) error.position = position;
        if (summary) error.summary = summary;
        if (context) error.context = context;
        if (chain) error.chain = chain;
        if (symbol) error.symbol = symbol;
        return error;
      }

      function isMetadataError(error) {
        return !!error[METADATA_ERROR];
      }

      var REFERENCE_TO_NONEXPORTED_CLASS = 'Reference to non-exported class';
      var VARIABLE_NOT_INITIALIZED = 'Variable not initialized';
      var DESTRUCTURE_NOT_SUPPORTED = 'Destructuring not supported';
      var COULD_NOT_RESOLVE_TYPE = 'Could not resolve type';
      var FUNCTION_CALL_NOT_SUPPORTED = 'Function call not supported';
      var REFERENCE_TO_LOCAL_SYMBOL = 'Reference to a local symbol';
      var LAMBDA_NOT_SUPPORTED = 'Lambda not supported';

      function expandedMessage(message, context) {
        switch (message) {
          case REFERENCE_TO_NONEXPORTED_CLASS:
            if (context && context.className) {
              return "References to a non-exported class are not supported in decorators but ".concat(context.className, " was referenced.");
            }

            break;

          case VARIABLE_NOT_INITIALIZED:
            return 'Only initialized variables and constants can be referenced in decorators because the value of this variable is needed by the template compiler';

          case DESTRUCTURE_NOT_SUPPORTED:
            return 'Referencing an exported destructured variable or constant is not supported in decorators and this value is needed by the template compiler';

          case COULD_NOT_RESOLVE_TYPE:
            if (context && context.typeName) {
              return "Could not resolve type ".concat(context.typeName);
            }

            break;

          case FUNCTION_CALL_NOT_SUPPORTED:
            if (context && context.name) {
              return "Function calls are not supported in decorators but '".concat(context.name, "' was called");
            }

            return 'Function calls are not supported in decorators';

          case REFERENCE_TO_LOCAL_SYMBOL:
            if (context && context.name) {
              return "Reference to a local (non-exported) symbols are not supported in decorators but '".concat(context.name, "' was referenced");
            }

            break;

          case LAMBDA_NOT_SUPPORTED:
            return "Function expressions are not supported in decorators";
        }

        return message;
      }

      function messageAdvise(message, context) {
        switch (message) {
          case REFERENCE_TO_NONEXPORTED_CLASS:
            if (context && context.className) {
              return "Consider exporting '".concat(context.className, "'");
            }

            break;

          case DESTRUCTURE_NOT_SUPPORTED:
            return 'Consider simplifying to avoid destructuring';

          case REFERENCE_TO_LOCAL_SYMBOL:
            if (context && context.name) {
              return "Consider exporting '".concat(context.name, "'");
            }

            break;

          case LAMBDA_NOT_SUPPORTED:
            return "Consider changing the function expression into an exported function";
        }

        return undefined;
      }

      function errorSummary(error) {
        if (error.summary) {
          return error.summary;
        }

        switch (error.message) {
          case REFERENCE_TO_NONEXPORTED_CLASS:
            if (error.context && error.context.className) {
              return "references non-exported class ".concat(error.context.className);
            }

            break;

          case VARIABLE_NOT_INITIALIZED:
            return 'is not initialized';

          case DESTRUCTURE_NOT_SUPPORTED:
            return 'is a destructured variable';

          case COULD_NOT_RESOLVE_TYPE:
            return 'could not be resolved';

          case FUNCTION_CALL_NOT_SUPPORTED:
            if (error.context && error.context.name) {
              return "calls '".concat(error.context.name, "'");
            }

            return "calls a function";

          case REFERENCE_TO_LOCAL_SYMBOL:
            if (error.context && error.context.name) {
              return "references local variable ".concat(error.context.name);
            }

            return "references a local variable";
        }

        return 'contains the error';
      }

      function mapStringMap(input, transform) {
        if (!input) return {};
        var result = {};
        Object.keys(input).forEach(function (key) {
          var value = transform(input[key], key);

          if (!shouldIgnore(value)) {
            if (HIDDEN_KEY.test(key)) {
              Object.defineProperty(result, key, {
                enumerable: false,
                configurable: true,
                value: value
              });
            } else {
              result[key] = value;
            }
          }
        });
        return result;
      }

      function isPrimitive(o) {
        return o === null || typeof o !== 'function' && typeof o !== 'object';
      }

      var BindingScope$1 = /*#__PURE__*/function () {
        function BindingScope$1() {
          _classCallCheck(this, BindingScope$1);
        }

        _createClass(BindingScope$1, null, [{
          key: "build",
          value: function build() {
            var current = new Map();
            return {
              define: function define(name, value) {
                current.set(name, value);
                return this;
              },
              done: function done() {
                return current.size > 0 ? new PopulatedScope(current) : BindingScope$1.empty;
              }
            };
          }
        }]);

        return BindingScope$1;
      }();

      BindingScope$1.missing = {};
      BindingScope$1.empty = {
        resolve: function resolve(name) {
          return BindingScope$1.missing;
        }
      };

      var PopulatedScope = /*#__PURE__*/function (_BindingScope$) {
        _inherits(PopulatedScope, _BindingScope$);

        var _super110 = _createSuper(PopulatedScope);

        function PopulatedScope(bindings) {
          var _this292;

          _classCallCheck(this, PopulatedScope);

          _this292 = _super110.call(this);
          _this292.bindings = bindings;
          return _this292;
        }

        _createClass(PopulatedScope, [{
          key: "resolve",
          value: function resolve(name) {
            return this.bindings.has(name) ? this.bindings.get(name) : BindingScope$1.missing;
          }
        }]);

        return PopulatedScope;
      }(BindingScope$1);

      function formatMetadataMessageChain(chain, advise) {
        var expanded = expandedMessage(chain.message, chain.context);
        var nesting = chain.symbol ? " in '".concat(chain.symbol.name, "'") : '';
        var message = "".concat(expanded).concat(nesting);
        var position = chain.position;
        var next = chain.next ? formatMetadataMessageChain(chain.next, advise) : advise ? {
          message: advise
        } : undefined;
        return {
          message: message,
          position: position,
          next: next ? [next] : undefined
        };
      }

      function formatMetadataError(e, context) {
        if (isMetadataError(e)) {
          // Produce a formatted version of the and leaving enough information in the original error
          // to recover the formatting information to eventually produce a diagnostic error message.
          var position = e.position;
          var chain = {
            message: "Error during template compile of '".concat(context.name, "'"),
            position: position,
            next: {
              message: e.message,
              next: e.chain,
              context: e.context,
              symbol: e.symbol
            }
          };
          var advise = e.advise || messageAdvise(e.message, e.context);
          return formattedError(formatMetadataMessageChain(chain, advise));
        }

        return e;
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      var AotSummaryResolver = /*#__PURE__*/function () {
        function AotSummaryResolver(host, staticSymbolCache) {
          _classCallCheck(this, AotSummaryResolver);

          this.host = host;
          this.staticSymbolCache = staticSymbolCache; // Note: this will only contain StaticSymbols without members!

          this.summaryCache = new Map();
          this.loadedFilePaths = new Map(); // Note: this will only contain StaticSymbols without members!

          this.importAs = new Map();
          this.knownFileNameToModuleNames = new Map();
        }

        _createClass(AotSummaryResolver, [{
          key: "isLibraryFile",
          value: function isLibraryFile(filePath) {
            // Note: We need to strip the .ngfactory. file path,
            // so this method also works for generated files
            // (for which host.isSourceFile will always return false).
            return !this.host.isSourceFile(stripGeneratedFileSuffix(filePath));
          }
        }, {
          key: "toSummaryFileName",
          value: function toSummaryFileName(filePath, referringSrcFileName) {
            return this.host.toSummaryFileName(filePath, referringSrcFileName);
          }
        }, {
          key: "fromSummaryFileName",
          value: function fromSummaryFileName(fileName, referringLibFileName) {
            return this.host.fromSummaryFileName(fileName, referringLibFileName);
          }
        }, {
          key: "resolveSummary",
          value: function resolveSummary(staticSymbol) {
            var rootSymbol = staticSymbol.members.length ? this.staticSymbolCache.get(staticSymbol.filePath, staticSymbol.name) : staticSymbol;
            var summary = this.summaryCache.get(rootSymbol);

            if (!summary) {
              this._loadSummaryFile(staticSymbol.filePath);

              summary = this.summaryCache.get(staticSymbol);
            }

            return rootSymbol === staticSymbol && summary || null;
          }
        }, {
          key: "getSymbolsOf",
          value: function getSymbolsOf(filePath) {
            if (this._loadSummaryFile(filePath)) {
              return Array.from(this.summaryCache.keys()).filter(function (symbol) {
                return symbol.filePath === filePath;
              });
            }

            return null;
          }
        }, {
          key: "getImportAs",
          value: function getImportAs(staticSymbol) {
            staticSymbol.assertNoMembers();
            return this.importAs.get(staticSymbol);
          }
          /**
           * Converts a file path to a module name that can be used as an `import`.
           */

        }, {
          key: "getKnownModuleName",
          value: function getKnownModuleName(importedFilePath) {
            return this.knownFileNameToModuleNames.get(importedFilePath) || null;
          }
        }, {
          key: "addSummary",
          value: function addSummary(summary) {
            this.summaryCache.set(summary.symbol, summary);
          }
        }, {
          key: "_loadSummaryFile",
          value: function _loadSummaryFile(filePath) {
            var _this293 = this;

            var hasSummary = this.loadedFilePaths.get(filePath);

            if (hasSummary != null) {
              return hasSummary;
            }

            var json = null;

            if (this.isLibraryFile(filePath)) {
              var summaryFilePath = summaryFileName(filePath);

              try {
                json = this.host.loadSummary(summaryFilePath);
              } catch (e) {
                console.error("Error loading summary file ".concat(summaryFilePath));
                throw e;
              }
            }

            hasSummary = json != null;
            this.loadedFilePaths.set(filePath, hasSummary);

            if (json) {
              var _deserializeSummaries = deserializeSummaries(this.staticSymbolCache, this, filePath, json),
                  moduleName = _deserializeSummaries.moduleName,
                  summaries = _deserializeSummaries.summaries,
                  importAs = _deserializeSummaries.importAs;

              summaries.forEach(function (summary) {
                return _this293.summaryCache.set(summary.symbol, summary);
              });

              if (moduleName) {
                this.knownFileNameToModuleNames.set(filePath, moduleName);
              }

              importAs.forEach(function (importAs) {
                _this293.importAs.set(importAs.symbol, importAs.importAs);
              });
            }

            return hasSummary;
          }
        }]);

        return AotSummaryResolver;
      }();
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      function createAotUrlResolver(host) {
        return {
          resolve: function resolve(basePath, url) {
            var filePath = host.resourceNameToFileName(url, basePath);

            if (!filePath) {
              throw syntaxError("Couldn't resolve resource ".concat(url, " from ").concat(basePath));
            }

            return filePath;
          }
        };
      }
      /**
       * Creates a new AotCompiler based on options and a host.
       */


      function createAotCompiler(compilerHost, options, errorCollector) {
        var translations = options.translations || '';
        var urlResolver = createAotUrlResolver(compilerHost);
        var symbolCache = new StaticSymbolCache();
        var summaryResolver = new AotSummaryResolver(compilerHost, symbolCache);
        var symbolResolver = new StaticSymbolResolver(compilerHost, symbolCache, summaryResolver);
        var staticReflector = new StaticReflector(summaryResolver, symbolResolver, [], [], errorCollector);
        var htmlParser;

        if (!!options.enableIvy) {
          // Ivy handles i18n at the compiler level so we must use a regular parser
          htmlParser = new HtmlParser();
        } else {
          htmlParser = new I18NHtmlParser(new HtmlParser(), translations, options.i18nFormat, options.missingTranslation, console);
        }

        var config = new CompilerConfig({
          defaultEncapsulation: ViewEncapsulation.Emulated,
          useJit: false,
          missingTranslation: options.missingTranslation,
          preserveWhitespaces: options.preserveWhitespaces,
          strictInjectionParameters: options.strictInjectionParameters
        });
        var normalizer = new DirectiveNormalizer({
          get: function get(url) {
            return compilerHost.loadResource(url);
          }
        }, urlResolver, htmlParser, config);
        var expressionParser = new Parser$1(new Lexer());
        var elementSchemaRegistry = new DomElementSchemaRegistry();
        var tmplParser = new TemplateParser(config, staticReflector, expressionParser, elementSchemaRegistry, htmlParser, console, []);
        var resolver = new CompileMetadataResolver(config, htmlParser, new NgModuleResolver(staticReflector), new DirectiveResolver(staticReflector), new PipeResolver(staticReflector), summaryResolver, elementSchemaRegistry, normalizer, console, symbolCache, staticReflector, errorCollector); // TODO(vicb): do not pass options.i18nFormat here

        var viewCompiler = new ViewCompiler(staticReflector);
        var typeCheckCompiler = new TypeCheckCompiler(options, staticReflector);
        var compiler = new AotCompiler(config, options, compilerHost, staticReflector, resolver, tmplParser, new StyleCompiler(urlResolver), viewCompiler, typeCheckCompiler, new NgModuleCompiler(staticReflector), new InjectableCompiler(staticReflector, !!options.enableIvy), new TypeScriptEmitter(), summaryResolver, symbolResolver);
        return {
          compiler: compiler,
          reflector: staticReflector
        };
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      var SummaryResolver = function SummaryResolver() {
        _classCallCheck(this, SummaryResolver);
      };

      var JitSummaryResolver = /*#__PURE__*/function () {
        function JitSummaryResolver() {
          _classCallCheck(this, JitSummaryResolver);

          this._summaries = new Map();
        }

        _createClass(JitSummaryResolver, [{
          key: "isLibraryFile",
          value: function isLibraryFile() {
            return false;
          }
        }, {
          key: "toSummaryFileName",
          value: function toSummaryFileName(fileName) {
            return fileName;
          }
        }, {
          key: "fromSummaryFileName",
          value: function fromSummaryFileName(fileName) {
            return fileName;
          }
        }, {
          key: "resolveSummary",
          value: function resolveSummary(reference) {
            return this._summaries.get(reference) || null;
          }
        }, {
          key: "getSymbolsOf",
          value: function getSymbolsOf() {
            return [];
          }
        }, {
          key: "getImportAs",
          value: function getImportAs(reference) {
            return reference;
          }
        }, {
          key: "getKnownModuleName",
          value: function getKnownModuleName(fileName) {
            return null;
          }
        }, {
          key: "addSummary",
          value: function addSummary(summary) {
            this._summaries.set(summary.symbol, summary);
          }
        }]);

        return JitSummaryResolver;
      }();

      function interpretStatements(statements, reflector) {
        var ctx = new _ExecutionContext(null, null, null, new Map());
        var visitor = new StatementInterpreter(reflector);
        visitor.visitAllStatements(statements, ctx);
        var result = {};
        ctx.exports.forEach(function (exportName) {
          result[exportName] = ctx.vars.get(exportName);
        });
        return result;
      }

      function _executeFunctionStatements(varNames, varValues, statements, ctx, visitor) {
        var childCtx = ctx.createChildWihtLocalVars();

        for (var i = 0; i < varNames.length; i++) {
          childCtx.vars.set(varNames[i], varValues[i]);
        }

        var result = visitor.visitAllStatements(statements, childCtx);
        return result ? result.value : null;
      }

      var _ExecutionContext = /*#__PURE__*/function () {
        function _ExecutionContext(parent, instance, className, vars) {
          _classCallCheck(this, _ExecutionContext);

          this.parent = parent;
          this.instance = instance;
          this.className = className;
          this.vars = vars;
          this.exports = [];
        }

        _createClass(_ExecutionContext, [{
          key: "createChildWihtLocalVars",
          value: function createChildWihtLocalVars() {
            return new _ExecutionContext(this, this.instance, this.className, new Map());
          }
        }]);

        return _ExecutionContext;
      }();

      var ReturnValue = function ReturnValue(value) {
        _classCallCheck(this, ReturnValue);

        this.value = value;
      };

      function createDynamicClass(_classStmt, _ctx, _visitor) {
        var propertyDescriptors = {};

        _classStmt.getters.forEach(function (getter) {
          // Note: use `function` instead of arrow function to capture `this`
          propertyDescriptors[getter.name] = {
            configurable: false,
            get: function get() {
              var instanceCtx = new _ExecutionContext(_ctx, this, _classStmt.name, _ctx.vars);
              return _executeFunctionStatements([], [], getter.body, instanceCtx, _visitor);
            }
          };
        });

        _classStmt.methods.forEach(function (method) {
          var paramNames = method.params.map(function (param) {
            return param.name;
          }); // Note: use `function` instead of arrow function to capture `this`

          propertyDescriptors[method.name] = {
            writable: false,
            configurable: false,
            value: function value() {
              var instanceCtx = new _ExecutionContext(_ctx, this, _classStmt.name, _ctx.vars);

              for (var _len5 = arguments.length, args = new Array(_len5), _key6 = 0; _key6 < _len5; _key6++) {
                args[_key6] = arguments[_key6];
              }

              return _executeFunctionStatements(paramNames, args, method.body, instanceCtx, _visitor);
            }
          };
        });

        var ctorParamNames = _classStmt.constructorMethod.params.map(function (param) {
          return param.name;
        }); // Note: use `function` instead of arrow function to capture `this`


        var ctor = function ctor() {
          var _this294 = this;

          var instanceCtx = new _ExecutionContext(_ctx, this, _classStmt.name, _ctx.vars);

          _classStmt.fields.forEach(function (field) {
            _this294[field.name] = undefined;
          });

          for (var _len6 = arguments.length, args = new Array(_len6), _key7 = 0; _key7 < _len6; _key7++) {
            args[_key7] = arguments[_key7];
          }

          _executeFunctionStatements(ctorParamNames, args, _classStmt.constructorMethod.body, instanceCtx, _visitor);
        };

        var superClass = _classStmt.parent ? _classStmt.parent.visitExpression(_visitor, _ctx) : Object;
        ctor.prototype = Object.create(superClass.prototype, propertyDescriptors);
        return ctor;
      }

      var StatementInterpreter = /*#__PURE__*/function () {
        function StatementInterpreter(reflector) {
          _classCallCheck(this, StatementInterpreter);

          this.reflector = reflector;
        }

        _createClass(StatementInterpreter, [{
          key: "debugAst",
          value: function debugAst(ast) {
            return debugOutputAstAsTypeScript(ast);
          }
        }, {
          key: "visitDeclareVarStmt",
          value: function visitDeclareVarStmt(stmt, ctx) {
            var initialValue = stmt.value ? stmt.value.visitExpression(this, ctx) : undefined;
            ctx.vars.set(stmt.name, initialValue);

            if (stmt.hasModifier(StmtModifier.Exported)) {
              ctx.exports.push(stmt.name);
            }

            return null;
          }
        }, {
          key: "visitWriteVarExpr",
          value: function visitWriteVarExpr(expr, ctx) {
            var value = expr.value.visitExpression(this, ctx);
            var currCtx = ctx;

            while (currCtx != null) {
              if (currCtx.vars.has(expr.name)) {
                currCtx.vars.set(expr.name, value);
                return value;
              }

              currCtx = currCtx.parent;
            }

            throw new Error("Not declared variable ".concat(expr.name));
          }
        }, {
          key: "visitWrappedNodeExpr",
          value: function visitWrappedNodeExpr(ast, ctx) {
            throw new Error('Cannot interpret a WrappedNodeExpr.');
          }
        }, {
          key: "visitTypeofExpr",
          value: function visitTypeofExpr(ast, ctx) {
            throw new Error('Cannot interpret a TypeofExpr');
          }
        }, {
          key: "visitReadVarExpr",
          value: function visitReadVarExpr(ast, ctx) {
            var varName = ast.name;

            if (ast.builtin != null) {
              switch (ast.builtin) {
                case BuiltinVar.Super:
                  return Object.getPrototypeOf(ctx.instance);

                case BuiltinVar.This:
                  return ctx.instance;

                case BuiltinVar.CatchError:
                  varName = CATCH_ERROR_VAR$2;
                  break;

                case BuiltinVar.CatchStack:
                  varName = CATCH_STACK_VAR$2;
                  break;

                default:
                  throw new Error("Unknown builtin variable ".concat(ast.builtin));
              }
            }

            var currCtx = ctx;

            while (currCtx != null) {
              if (currCtx.vars.has(varName)) {
                return currCtx.vars.get(varName);
              }

              currCtx = currCtx.parent;
            }

            throw new Error("Not declared variable ".concat(varName));
          }
        }, {
          key: "visitWriteKeyExpr",
          value: function visitWriteKeyExpr(expr, ctx) {
            var receiver = expr.receiver.visitExpression(this, ctx);
            var index = expr.index.visitExpression(this, ctx);
            var value = expr.value.visitExpression(this, ctx);
            receiver[index] = value;
            return value;
          }
        }, {
          key: "visitWritePropExpr",
          value: function visitWritePropExpr(expr, ctx) {
            var receiver = expr.receiver.visitExpression(this, ctx);
            var value = expr.value.visitExpression(this, ctx);
            receiver[expr.name] = value;
            return value;
          }
        }, {
          key: "visitInvokeMethodExpr",
          value: function visitInvokeMethodExpr(expr, ctx) {
            var receiver = expr.receiver.visitExpression(this, ctx);
            var args = this.visitAllExpressions(expr.args, ctx);
            var result;

            if (expr.builtin != null) {
              switch (expr.builtin) {
                case BuiltinMethod.ConcatArray:
                  result = receiver.concat.apply(receiver, _toConsumableArray(args));
                  break;

                case BuiltinMethod.SubscribeObservable:
                  result = receiver.subscribe({
                    next: args[0]
                  });
                  break;

                case BuiltinMethod.Bind:
                  result = receiver.bind.apply(receiver, _toConsumableArray(args));
                  break;

                default:
                  throw new Error("Unknown builtin method ".concat(expr.builtin));
              }
            } else {
              result = receiver[expr.name].apply(receiver, args);
            }

            return result;
          }
        }, {
          key: "visitInvokeFunctionExpr",
          value: function visitInvokeFunctionExpr(stmt, ctx) {
            var args = this.visitAllExpressions(stmt.args, ctx);
            var fnExpr = stmt.fn;

            if (fnExpr instanceof ReadVarExpr && fnExpr.builtin === BuiltinVar.Super) {
              ctx.instance.constructor.prototype.constructor.apply(ctx.instance, args);
              return null;
            } else {
              var _fn = stmt.fn.visitExpression(this, ctx);

              return _fn.apply(null, args);
            }
          }
        }, {
          key: "visitTaggedTemplateExpr",
          value: function visitTaggedTemplateExpr(expr, ctx) {
            var templateElements = expr.template.elements.map(function (e) {
              return e.text;
            });
            Object.defineProperty(templateElements, 'raw', {
              value: expr.template.elements.map(function (e) {
                return e.rawText;
              })
            });
            var args = this.visitAllExpressions(expr.template.expressions, ctx);
            args.unshift(templateElements);
            var tag = expr.tag.visitExpression(this, ctx);
            return tag.apply(null, args);
          }
        }, {
          key: "visitReturnStmt",
          value: function visitReturnStmt(stmt, ctx) {
            return new ReturnValue(stmt.value.visitExpression(this, ctx));
          }
        }, {
          key: "visitDeclareClassStmt",
          value: function visitDeclareClassStmt(stmt, ctx) {
            var clazz = createDynamicClass(stmt, ctx, this);
            ctx.vars.set(stmt.name, clazz);

            if (stmt.hasModifier(StmtModifier.Exported)) {
              ctx.exports.push(stmt.name);
            }

            return null;
          }
        }, {
          key: "visitExpressionStmt",
          value: function visitExpressionStmt(stmt, ctx) {
            return stmt.expr.visitExpression(this, ctx);
          }
        }, {
          key: "visitIfStmt",
          value: function visitIfStmt(stmt, ctx) {
            var condition = stmt.condition.visitExpression(this, ctx);

            if (condition) {
              return this.visitAllStatements(stmt.trueCase, ctx);
            } else if (stmt.falseCase != null) {
              return this.visitAllStatements(stmt.falseCase, ctx);
            }

            return null;
          }
        }, {
          key: "visitTryCatchStmt",
          value: function visitTryCatchStmt(stmt, ctx) {
            try {
              return this.visitAllStatements(stmt.bodyStmts, ctx);
            } catch (e) {
              var childCtx = ctx.createChildWihtLocalVars();
              childCtx.vars.set(CATCH_ERROR_VAR$2, e);
              childCtx.vars.set(CATCH_STACK_VAR$2, e.stack);
              return this.visitAllStatements(stmt.catchStmts, childCtx);
            }
          }
        }, {
          key: "visitThrowStmt",
          value: function visitThrowStmt(stmt, ctx) {
            throw stmt.error.visitExpression(this, ctx);
          }
        }, {
          key: "visitInstantiateExpr",
          value: function visitInstantiateExpr(ast, ctx) {
            var args = this.visitAllExpressions(ast.args, ctx);
            var clazz = ast.classExpr.visitExpression(this, ctx);
            return _construct(clazz, _toConsumableArray(args));
          }
        }, {
          key: "visitLiteralExpr",
          value: function visitLiteralExpr(ast, ctx) {
            return ast.value;
          }
        }, {
          key: "visitLocalizedString",
          value: function visitLocalizedString(ast, context) {
            return null;
          }
        }, {
          key: "visitExternalExpr",
          value: function visitExternalExpr(ast, ctx) {
            return this.reflector.resolveExternalReference(ast.value);
          }
        }, {
          key: "visitConditionalExpr",
          value: function visitConditionalExpr(ast, ctx) {
            if (ast.condition.visitExpression(this, ctx)) {
              return ast.trueCase.visitExpression(this, ctx);
            } else if (ast.falseCase != null) {
              return ast.falseCase.visitExpression(this, ctx);
            }

            return null;
          }
        }, {
          key: "visitNotExpr",
          value: function visitNotExpr(ast, ctx) {
            return !ast.condition.visitExpression(this, ctx);
          }
        }, {
          key: "visitAssertNotNullExpr",
          value: function visitAssertNotNullExpr(ast, ctx) {
            return ast.condition.visitExpression(this, ctx);
          }
        }, {
          key: "visitCastExpr",
          value: function visitCastExpr(ast, ctx) {
            return ast.value.visitExpression(this, ctx);
          }
        }, {
          key: "visitFunctionExpr",
          value: function visitFunctionExpr(ast, ctx) {
            var paramNames = ast.params.map(function (param) {
              return param.name;
            });
            return _declareFn(paramNames, ast.statements, ctx, this);
          }
        }, {
          key: "visitDeclareFunctionStmt",
          value: function visitDeclareFunctionStmt(stmt, ctx) {
            var paramNames = stmt.params.map(function (param) {
              return param.name;
            });
            ctx.vars.set(stmt.name, _declareFn(paramNames, stmt.statements, ctx, this));

            if (stmt.hasModifier(StmtModifier.Exported)) {
              ctx.exports.push(stmt.name);
            }

            return null;
          }
        }, {
          key: "visitUnaryOperatorExpr",
          value: function visitUnaryOperatorExpr(ast, ctx) {
            var _this295 = this;

            var rhs = function rhs() {
              return ast.expr.visitExpression(_this295, ctx);
            };

            switch (ast.operator) {
              case UnaryOperator.Plus:
                return +rhs();

              case UnaryOperator.Minus:
                return -rhs();

              default:
                throw new Error("Unknown operator ".concat(ast.operator));
            }
          }
        }, {
          key: "visitBinaryOperatorExpr",
          value: function visitBinaryOperatorExpr(ast, ctx) {
            var _this296 = this;

            var lhs = function lhs() {
              return ast.lhs.visitExpression(_this296, ctx);
            };

            var rhs = function rhs() {
              return ast.rhs.visitExpression(_this296, ctx);
            };

            switch (ast.operator) {
              case BinaryOperator.Equals:
                return lhs() == rhs();

              case BinaryOperator.Identical:
                return lhs() === rhs();

              case BinaryOperator.NotEquals:
                return lhs() != rhs();

              case BinaryOperator.NotIdentical:
                return lhs() !== rhs();

              case BinaryOperator.And:
                return lhs() && rhs();

              case BinaryOperator.Or:
                return lhs() || rhs();

              case BinaryOperator.Plus:
                return lhs() + rhs();

              case BinaryOperator.Minus:
                return lhs() - rhs();

              case BinaryOperator.Divide:
                return lhs() / rhs();

              case BinaryOperator.Multiply:
                return lhs() * rhs();

              case BinaryOperator.Modulo:
                return lhs() % rhs();

              case BinaryOperator.Lower:
                return lhs() < rhs();

              case BinaryOperator.LowerEquals:
                return lhs() <= rhs();

              case BinaryOperator.Bigger:
                return lhs() > rhs();

              case BinaryOperator.BiggerEquals:
                return lhs() >= rhs();

              default:
                throw new Error("Unknown operator ".concat(ast.operator));
            }
          }
        }, {
          key: "visitReadPropExpr",
          value: function visitReadPropExpr(ast, ctx) {
            var result;
            var receiver = ast.receiver.visitExpression(this, ctx);
            result = receiver[ast.name];
            return result;
          }
        }, {
          key: "visitReadKeyExpr",
          value: function visitReadKeyExpr(ast, ctx) {
            var receiver = ast.receiver.visitExpression(this, ctx);
            var prop = ast.index.visitExpression(this, ctx);
            return receiver[prop];
          }
        }, {
          key: "visitLiteralArrayExpr",
          value: function visitLiteralArrayExpr(ast, ctx) {
            return this.visitAllExpressions(ast.entries, ctx);
          }
        }, {
          key: "visitLiteralMapExpr",
          value: function visitLiteralMapExpr(ast, ctx) {
            var _this297 = this;

            var result = {};
            ast.entries.forEach(function (entry) {
              return result[entry.key] = entry.value.visitExpression(_this297, ctx);
            });
            return result;
          }
        }, {
          key: "visitCommaExpr",
          value: function visitCommaExpr(ast, context) {
            var values = this.visitAllExpressions(ast.parts, context);
            return values[values.length - 1];
          }
        }, {
          key: "visitAllExpressions",
          value: function visitAllExpressions(expressions, ctx) {
            var _this298 = this;

            return expressions.map(function (expr) {
              return expr.visitExpression(_this298, ctx);
            });
          }
        }, {
          key: "visitAllStatements",
          value: function visitAllStatements(statements, ctx) {
            for (var i = 0; i < statements.length; i++) {
              var stmt = statements[i];
              var val = stmt.visitStatement(this, ctx);

              if (val instanceof ReturnValue) {
                return val;
              }
            }

            return null;
          }
        }]);

        return StatementInterpreter;
      }();

      function _declareFn(varNames, statements, ctx, visitor) {
        return function () {
          for (var _len7 = arguments.length, args = new Array(_len7), _key8 = 0; _key8 < _len7; _key8++) {
            args[_key8] = arguments[_key8];
          }

          return _executeFunctionStatements(varNames, args, statements, ctx, visitor);
        };
      }

      var CATCH_ERROR_VAR$2 = 'error';
      var CATCH_STACK_VAR$2 = 'stack';
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * An internal module of the Angular compiler that begins with component types,
       * extracts templates, and eventually produces a compiled version of the component
       * ready for linking into an application.
       *
       * @security  When compiling templates at runtime, you must ensure that the entire template comes
       * from a trusted source. Attacker-controlled data introduced by a template could expose your
       * application to XSS risks.  For more detail, see the [Security Guide](https://g.co/ng/security).
       */

      var JitCompiler = /*#__PURE__*/function () {
        function JitCompiler(_metadataResolver, _templateParser, _styleCompiler, _viewCompiler, _ngModuleCompiler, _summaryResolver, _reflector, _jitEvaluator, _compilerConfig, _console, getExtraNgModuleProviders) {
          _classCallCheck(this, JitCompiler);

          this._metadataResolver = _metadataResolver;
          this._templateParser = _templateParser;
          this._styleCompiler = _styleCompiler;
          this._viewCompiler = _viewCompiler;
          this._ngModuleCompiler = _ngModuleCompiler;
          this._summaryResolver = _summaryResolver;
          this._reflector = _reflector;
          this._jitEvaluator = _jitEvaluator;
          this._compilerConfig = _compilerConfig;
          this._console = _console;
          this.getExtraNgModuleProviders = getExtraNgModuleProviders;
          this._compiledTemplateCache = new Map();
          this._compiledHostTemplateCache = new Map();
          this._compiledDirectiveWrapperCache = new Map();
          this._compiledNgModuleCache = new Map();
          this._sharedStylesheetCount = 0;
          this._addedAotSummaries = new Set();
        }

        _createClass(JitCompiler, [{
          key: "compileModuleSync",
          value: function compileModuleSync(moduleType) {
            return SyncAsync.assertSync(this._compileModuleAndComponents(moduleType, true));
          }
        }, {
          key: "compileModuleAsync",
          value: function compileModuleAsync(moduleType) {
            return Promise.resolve(this._compileModuleAndComponents(moduleType, false));
          }
        }, {
          key: "compileModuleAndAllComponentsSync",
          value: function compileModuleAndAllComponentsSync(moduleType) {
            return SyncAsync.assertSync(this._compileModuleAndAllComponents(moduleType, true));
          }
        }, {
          key: "compileModuleAndAllComponentsAsync",
          value: function compileModuleAndAllComponentsAsync(moduleType) {
            return Promise.resolve(this._compileModuleAndAllComponents(moduleType, false));
          }
        }, {
          key: "getComponentFactory",
          value: function getComponentFactory(component) {
            var summary = this._metadataResolver.getDirectiveSummary(component);

            return summary.componentFactory;
          }
        }, {
          key: "loadAotSummaries",
          value: function loadAotSummaries(summaries) {
            this.clearCache();

            this._addAotSummaries(summaries);
          }
        }, {
          key: "_addAotSummaries",
          value: function _addAotSummaries(fn) {
            if (this._addedAotSummaries.has(fn)) {
              return;
            }

            this._addedAotSummaries.add(fn);

            var summaries = fn();

            for (var i = 0; i < summaries.length; i++) {
              var entry = summaries[i];

              if (typeof entry === 'function') {
                this._addAotSummaries(entry);
              } else {
                var summary = entry;

                this._summaryResolver.addSummary({
                  symbol: summary.type.reference,
                  metadata: null,
                  type: summary
                });
              }
            }
          }
        }, {
          key: "hasAotSummary",
          value: function hasAotSummary(ref) {
            return !!this._summaryResolver.resolveSummary(ref);
          }
        }, {
          key: "_filterJitIdentifiers",
          value: function _filterJitIdentifiers(ids) {
            var _this299 = this;

            return ids.map(function (mod) {
              return mod.reference;
            }).filter(function (ref) {
              return !_this299.hasAotSummary(ref);
            });
          }
        }, {
          key: "_compileModuleAndComponents",
          value: function _compileModuleAndComponents(moduleType, isSync) {
            var _this300 = this;

            return SyncAsync.then(this._loadModules(moduleType, isSync), function () {
              _this300._compileComponents(moduleType, null);

              return _this300._compileModule(moduleType);
            });
          }
        }, {
          key: "_compileModuleAndAllComponents",
          value: function _compileModuleAndAllComponents(moduleType, isSync) {
            var _this301 = this;

            return SyncAsync.then(this._loadModules(moduleType, isSync), function () {
              var componentFactories = [];

              _this301._compileComponents(moduleType, componentFactories);

              return {
                ngModuleFactory: _this301._compileModule(moduleType),
                componentFactories: componentFactories
              };
            });
          }
        }, {
          key: "_loadModules",
          value: function _loadModules(mainModule, isSync) {
            var _this302 = this;

            var loading = [];

            var mainNgModule = this._metadataResolver.getNgModuleMetadata(mainModule); // Note: for runtime compilation, we want to transitively compile all modules,
            // so we also need to load the declared directives / pipes for all nested modules.


            this._filterJitIdentifiers(mainNgModule.transitiveModule.modules).forEach(function (nestedNgModule) {
              // getNgModuleMetadata only returns null if the value passed in is not an NgModule
              var moduleMeta = _this302._metadataResolver.getNgModuleMetadata(nestedNgModule);

              _this302._filterJitIdentifiers(moduleMeta.declaredDirectives).forEach(function (ref) {
                var promise = _this302._metadataResolver.loadDirectiveMetadata(moduleMeta.type.reference, ref, isSync);

                if (promise) {
                  loading.push(promise);
                }
              });

              _this302._filterJitIdentifiers(moduleMeta.declaredPipes).forEach(function (ref) {
                return _this302._metadataResolver.getOrLoadPipeMetadata(ref);
              });
            });

            return SyncAsync.all(loading);
          }
        }, {
          key: "_compileModule",
          value: function _compileModule(moduleType) {
            var ngModuleFactory = this._compiledNgModuleCache.get(moduleType);

            if (!ngModuleFactory) {
              var moduleMeta = this._metadataResolver.getNgModuleMetadata(moduleType); // Always provide a bound Compiler


              var extraProviders = this.getExtraNgModuleProviders(moduleMeta.type.reference);
              var outputCtx = createOutputContext();

              var compileResult = this._ngModuleCompiler.compile(outputCtx, moduleMeta, extraProviders);

              ngModuleFactory = this._interpretOrJit(ngModuleJitUrl(moduleMeta), outputCtx.statements)[compileResult.ngModuleFactoryVar];

              this._compiledNgModuleCache.set(moduleMeta.type.reference, ngModuleFactory);
            }

            return ngModuleFactory;
          }
          /**
           * @internal
           */

        }, {
          key: "_compileComponents",
          value: function _compileComponents(mainModule, allComponentFactories) {
            var _this303 = this;

            var ngModule = this._metadataResolver.getNgModuleMetadata(mainModule);

            var moduleByJitDirective = new Map();
            var templates = new Set();

            var transJitModules = this._filterJitIdentifiers(ngModule.transitiveModule.modules);

            transJitModules.forEach(function (localMod) {
              var localModuleMeta = _this303._metadataResolver.getNgModuleMetadata(localMod);

              _this303._filterJitIdentifiers(localModuleMeta.declaredDirectives).forEach(function (dirRef) {
                moduleByJitDirective.set(dirRef, localModuleMeta);

                var dirMeta = _this303._metadataResolver.getDirectiveMetadata(dirRef);

                if (dirMeta.isComponent) {
                  templates.add(_this303._createCompiledTemplate(dirMeta, localModuleMeta));

                  if (allComponentFactories) {
                    var template = _this303._createCompiledHostTemplate(dirMeta.type.reference, localModuleMeta);

                    templates.add(template);
                    allComponentFactories.push(dirMeta.componentFactory);
                  }
                }
              });
            });
            transJitModules.forEach(function (localMod) {
              var localModuleMeta = _this303._metadataResolver.getNgModuleMetadata(localMod);

              _this303._filterJitIdentifiers(localModuleMeta.declaredDirectives).forEach(function (dirRef) {
                var dirMeta = _this303._metadataResolver.getDirectiveMetadata(dirRef);

                if (dirMeta.isComponent) {
                  dirMeta.entryComponents.forEach(function (entryComponentType) {
                    var moduleMeta = moduleByJitDirective.get(entryComponentType.componentType);
                    templates.add(_this303._createCompiledHostTemplate(entryComponentType.componentType, moduleMeta));
                  });
                }
              });

              localModuleMeta.entryComponents.forEach(function (entryComponentType) {
                if (!_this303.hasAotSummary(entryComponentType.componentType)) {
                  var moduleMeta = moduleByJitDirective.get(entryComponentType.componentType);
                  templates.add(_this303._createCompiledHostTemplate(entryComponentType.componentType, moduleMeta));
                }
              });
            });
            templates.forEach(function (template) {
              return _this303._compileTemplate(template);
            });
          }
        }, {
          key: "clearCacheFor",
          value: function clearCacheFor(type) {
            this._compiledNgModuleCache["delete"](type);

            this._metadataResolver.clearCacheFor(type);

            this._compiledHostTemplateCache["delete"](type);

            var compiledTemplate = this._compiledTemplateCache.get(type);

            if (compiledTemplate) {
              this._compiledTemplateCache["delete"](type);
            }
          }
        }, {
          key: "clearCache",
          value: function clearCache() {
            // Note: don't clear the _addedAotSummaries, as they don't change!
            this._metadataResolver.clearCache();

            this._compiledTemplateCache.clear();

            this._compiledHostTemplateCache.clear();

            this._compiledNgModuleCache.clear();
          }
        }, {
          key: "_createCompiledHostTemplate",
          value: function _createCompiledHostTemplate(compType, ngModule) {
            if (!ngModule) {
              throw new Error("Component ".concat(stringify(compType), " is not part of any NgModule or the module has not been imported into your module."));
            }

            var compiledTemplate = this._compiledHostTemplateCache.get(compType);

            if (!compiledTemplate) {
              var compMeta = this._metadataResolver.getDirectiveMetadata(compType);

              assertComponent(compMeta);

              var hostMeta = this._metadataResolver.getHostComponentMetadata(compMeta, compMeta.componentFactory.viewDefFactory);

              compiledTemplate = new CompiledTemplate(true, compMeta.type, hostMeta, ngModule, [compMeta.type]);

              this._compiledHostTemplateCache.set(compType, compiledTemplate);
            }

            return compiledTemplate;
          }
        }, {
          key: "_createCompiledTemplate",
          value: function _createCompiledTemplate(compMeta, ngModule) {
            var compiledTemplate = this._compiledTemplateCache.get(compMeta.type.reference);

            if (!compiledTemplate) {
              assertComponent(compMeta);
              compiledTemplate = new CompiledTemplate(false, compMeta.type, compMeta, ngModule, ngModule.transitiveModule.directives);

              this._compiledTemplateCache.set(compMeta.type.reference, compiledTemplate);
            }

            return compiledTemplate;
          }
        }, {
          key: "_compileTemplate",
          value: function _compileTemplate(template) {
            var _this304 = this;

            if (template.isCompiled) {
              return;
            }

            var compMeta = template.compMeta;
            var externalStylesheetsByModuleUrl = new Map();
            var outputContext = createOutputContext();

            var componentStylesheet = this._styleCompiler.compileComponent(outputContext, compMeta);

            compMeta.template.externalStylesheets.forEach(function (stylesheetMeta) {
              var compiledStylesheet = _this304._styleCompiler.compileStyles(createOutputContext(), compMeta, stylesheetMeta);

              externalStylesheetsByModuleUrl.set(stylesheetMeta.moduleUrl, compiledStylesheet);
            });

            this._resolveStylesCompileResult(componentStylesheet, externalStylesheetsByModuleUrl);

            var pipes = template.ngModule.transitiveModule.pipes.map(function (pipe) {
              return _this304._metadataResolver.getPipeSummary(pipe.reference);
            });

            var _this$_parseTemplate3 = this._parseTemplate(compMeta, template.ngModule, template.directives),
                parsedTemplate = _this$_parseTemplate3.template,
                usedPipes = _this$_parseTemplate3.pipes;

            var compileResult = this._viewCompiler.compileComponent(outputContext, compMeta, parsedTemplate, variable(componentStylesheet.stylesVar), usedPipes);

            var evalResult = this._interpretOrJit(templateJitUrl(template.ngModule.type, template.compMeta), outputContext.statements);

            var viewClass = evalResult[compileResult.viewClassVar];
            var rendererType = evalResult[compileResult.rendererTypeVar];
            template.compiled(viewClass, rendererType);
          }
        }, {
          key: "_parseTemplate",
          value: function _parseTemplate(compMeta, ngModule, directiveIdentifiers) {
            var _this305 = this;

            // Note: ! is ok here as components always have a template.
            var preserveWhitespaces = compMeta.template.preserveWhitespaces;
            var directives = directiveIdentifiers.map(function (dir) {
              return _this305._metadataResolver.getDirectiveSummary(dir.reference);
            });
            var pipes = ngModule.transitiveModule.pipes.map(function (pipe) {
              return _this305._metadataResolver.getPipeSummary(pipe.reference);
            });
            return this._templateParser.parse(compMeta, compMeta.template.htmlAst, directives, pipes, ngModule.schemas, templateSourceUrl(ngModule.type, compMeta, compMeta.template), preserveWhitespaces);
          }
        }, {
          key: "_resolveStylesCompileResult",
          value: function _resolveStylesCompileResult(result, externalStylesheetsByModuleUrl) {
            var _this306 = this;

            result.dependencies.forEach(function (dep, i) {
              var nestedCompileResult = externalStylesheetsByModuleUrl.get(dep.moduleUrl);

              var nestedStylesArr = _this306._resolveAndEvalStylesCompileResult(nestedCompileResult, externalStylesheetsByModuleUrl);

              dep.setValue(nestedStylesArr);
            });
          }
        }, {
          key: "_resolveAndEvalStylesCompileResult",
          value: function _resolveAndEvalStylesCompileResult(result, externalStylesheetsByModuleUrl) {
            this._resolveStylesCompileResult(result, externalStylesheetsByModuleUrl);

            return this._interpretOrJit(sharedStylesheetJitUrl(result.meta, this._sharedStylesheetCount++), result.outputCtx.statements)[result.stylesVar];
          }
        }, {
          key: "_interpretOrJit",
          value: function _interpretOrJit(sourceUrl, statements) {
            if (!this._compilerConfig.useJit) {
              return interpretStatements(statements, this._reflector);
            } else {
              return this._jitEvaluator.evaluateStatements(sourceUrl, statements, this._reflector, this._compilerConfig.jitDevMode);
            }
          }
        }]);

        return JitCompiler;
      }();

      var CompiledTemplate = /*#__PURE__*/function () {
        function CompiledTemplate(isHost, compType, compMeta, ngModule, directives) {
          _classCallCheck(this, CompiledTemplate);

          this.isHost = isHost;
          this.compType = compType;
          this.compMeta = compMeta;
          this.ngModule = ngModule;
          this.directives = directives;
          this._viewClass = null;
          this.isCompiled = false;
        }

        _createClass(CompiledTemplate, [{
          key: "compiled",
          value: function compiled(viewClass, rendererType) {
            this._viewClass = viewClass;
            this.compMeta.componentViewType.setDelegate(viewClass);

            for (var prop in rendererType) {
              this.compMeta.rendererType[prop] = rendererType[prop];
            }

            this.isCompiled = true;
          }
        }]);

        return CompiledTemplate;
      }();

      function assertComponent(meta) {
        if (!meta.isComponent) {
          throw new Error("Could not compile '".concat(identifierName(meta.type), "' because it is not a component."));
        }
      }

      function createOutputContext() {
        var importExpr$1 = function importExpr$1(symbol) {
          return importExpr({
            name: identifierName(symbol),
            moduleName: null,
            runtime: symbol
          });
        };

        return {
          statements: [],
          genFilePath: '',
          importExpr: importExpr$1,
          constantPool: new ConstantPool()
        };
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * Provides access to reflection data about symbols that the compiler needs.
       */


      var CompileReflector = function CompileReflector() {
        _classCallCheck(this, CompileReflector);
      };
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * Create a {@link UrlResolver} with no package prefix.
       */


      function createUrlResolverWithoutPackagePrefix() {
        return new UrlResolver();
      }

      function createOfflineCompileUrlResolver() {
        return new UrlResolver('.');
      }

      var UrlResolver = /*#__PURE__*/function () {
        function UrlResolverImpl() {
          var _packagePrefix = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;

          _classCallCheck(this, UrlResolverImpl);

          this._packagePrefix = _packagePrefix;
        }
        /**
         * Resolves the `url` given the `baseUrl`:
         * - when the `url` is null, the `baseUrl` is returned,
         * - if `url` is relative ('path/to/here', './path/to/here'), the resolved url is a combination of
         * `baseUrl` and `url`,
         * - if `url` is absolute (it has a scheme: 'http://', 'https://' or start with '/'), the `url` is
         * returned as is (ignoring the `baseUrl`)
         */


        _createClass(UrlResolverImpl, [{
          key: "resolve",
          value: function resolve(baseUrl, url) {
            var resolvedUrl = url;

            if (baseUrl != null && baseUrl.length > 0) {
              resolvedUrl = _resolveUrl(baseUrl, resolvedUrl);
            }

            var resolvedParts = _split(resolvedUrl);

            var prefix = this._packagePrefix;

            if (prefix != null && resolvedParts != null && resolvedParts[_ComponentIndex.Scheme] == 'package') {
              var path = resolvedParts[_ComponentIndex.Path];
              prefix = prefix.replace(/\/+$/, '');
              path = path.replace(/^\/+/, '');
              return "".concat(prefix, "/").concat(path);
            }

            return resolvedUrl;
          }
        }]);

        return UrlResolverImpl;
      }();
      /**
       * Extract the scheme of a URL.
       */


      function getUrlScheme(url) {
        var match = _split(url);

        return match && match[_ComponentIndex.Scheme] || '';
      } // The code below is adapted from Traceur:
      // https://github.com/google/traceur-compiler/blob/9511c1dafa972bf0de1202a8a863bad02f0f95a8/src/runtime/url.js

      /**
       * Builds a URI string from already-encoded parts.
       *
       * No encoding is performed.  Any component may be omitted as either null or
       * undefined.
       *
       * @param opt_scheme The scheme such as 'http'.
       * @param opt_userInfo The user name before the '@'.
       * @param opt_domain The domain such as 'www.google.com', already
       *     URI-encoded.
       * @param opt_port The port number.
       * @param opt_path The path, already URI-encoded.  If it is not
       *     empty, it must begin with a slash.
       * @param opt_queryData The URI-encoded query data.
       * @param opt_fragment The URI-encoded fragment identifier.
       * @return The fully combined URI.
       */


      function _buildFromEncodedParts(opt_scheme, opt_userInfo, opt_domain, opt_port, opt_path, opt_queryData, opt_fragment) {
        var out = [];

        if (opt_scheme != null) {
          out.push(opt_scheme + ':');
        }

        if (opt_domain != null) {
          out.push('//');

          if (opt_userInfo != null) {
            out.push(opt_userInfo + '@');
          }

          out.push(opt_domain);

          if (opt_port != null) {
            out.push(':' + opt_port);
          }
        }

        if (opt_path != null) {
          out.push(opt_path);
        }

        if (opt_queryData != null) {
          out.push('?' + opt_queryData);
        }

        if (opt_fragment != null) {
          out.push('#' + opt_fragment);
        }

        return out.join('');
      }
      /**
       * A regular expression for breaking a URI into its component parts.
       *
       * {@link https://tools.ietf.org/html/rfc3986#appendix-B} says
       * As the "first-match-wins" algorithm is identical to the "greedy"
       * disambiguation method used by POSIX regular expressions, it is natural and
       * commonplace to use a regular expression for parsing the potential five
       * components of a URI reference.
       *
       * The following line is the regular expression for breaking-down a
       * well-formed URI reference into its components.
       *
       * <pre>
       * ^(([^:/?#]+):)?(//([^/?#]*))?([^?#]*)(\?([^#]*))?(#(.*))?
       *  12            3  4          5       6  7        8 9
       * </pre>
       *
       * The numbers in the second line above are only to assist readability; they
       * indicate the reference points for each subexpression (i.e., each paired
       * parenthesis). We refer to the value matched for subexpression <n> as $<n>.
       * For example, matching the above expression to
       * <pre>
       *     http://www.ics.uci.edu/pub/ietf/uri/#Related
       * </pre>
       * results in the following subexpression matches:
       * <pre>
       *    $1 = http:
       *    $2 = http
       *    $3 = //www.ics.uci.edu
       *    $4 = www.ics.uci.edu
       *    $5 = /pub/ietf/uri/
       *    $6 = <undefined>
       *    $7 = <undefined>
       *    $8 = #Related
       *    $9 = Related
       * </pre>
       * where <undefined> indicates that the component is not present, as is the
       * case for the query component in the above example. Therefore, we can
       * determine the value of the five components as
       * <pre>
       *    scheme    = $2
       *    authority = $4
       *    path      = $5
       *    query     = $7
       *    fragment  = $9
       * </pre>
       *
       * The regular expression has been modified slightly to expose the
       * userInfo, domain, and port separately from the authority.
       * The modified version yields
       * <pre>
       *    $1 = http              scheme
       *    $2 = <undefined>       userInfo -\
       *    $3 = www.ics.uci.edu   domain     | authority
       *    $4 = <undefined>       port     -/
       *    $5 = /pub/ietf/uri/    path
       *    $6 = <undefined>       query without ?
       *    $7 = Related           fragment without #
       * </pre>
       * @internal
       */


      var _splitRe = new RegExp('^' + '(?:' + '([^:/?#.]+)' + // scheme - ignore special characters
      // used by other URL parts such as :,
      // ?, /, #, and .
      ':)?' + '(?://' + '(?:([^/?#]*)@)?' + // userInfo
      "([\\w\\d\\-\\u0100-\\uffff.%]*)" + // domain - restrict to letters,
      // digits, dashes, dots, percent
      // escapes, and unicode characters.
      '(?::([0-9]+))?' + // port
      ')?' + '([^?#]+)?' + // path
      '(?:\\?([^#]*))?' + // query
      '(?:#(.*))?' + // fragment
      '$');
      /**
       * The index of each URI component in the return value of goog.uri.utils.split.
       * @enum {number}
       */


      var _ComponentIndex;

      (function (_ComponentIndex) {
        _ComponentIndex[_ComponentIndex["Scheme"] = 1] = "Scheme";
        _ComponentIndex[_ComponentIndex["UserInfo"] = 2] = "UserInfo";
        _ComponentIndex[_ComponentIndex["Domain"] = 3] = "Domain";
        _ComponentIndex[_ComponentIndex["Port"] = 4] = "Port";
        _ComponentIndex[_ComponentIndex["Path"] = 5] = "Path";
        _ComponentIndex[_ComponentIndex["QueryData"] = 6] = "QueryData";
        _ComponentIndex[_ComponentIndex["Fragment"] = 7] = "Fragment";
      })(_ComponentIndex || (_ComponentIndex = {}));
      /**
       * Splits a URI into its component parts.
       *
       * Each component can be accessed via the component indices; for example:
       * <pre>
       * goog.uri.utils.split(someStr)[goog.uri.utils.CompontentIndex.QUERY_DATA];
       * </pre>
       *
       * @param uri The URI string to examine.
       * @return Each component still URI-encoded.
       *     Each component that is present will contain the encoded value, whereas
       *     components that are not present will be undefined or empty, depending
       *     on the browser's regular expression implementation.  Never null, since
       *     arbitrary strings may still look like path names.
       */


      function _split(uri) {
        return uri.match(_splitRe);
      }
      /**
       * Removes dot segments in given path component, as described in
       * RFC 3986, section 5.2.4.
       *
       * @param path A non-empty path component.
       * @return Path component with removed dot segments.
       */


      function _removeDotSegments(path) {
        if (path == '/') return '/';
        var leadingSlash = path[0] == '/' ? '/' : '';
        var trailingSlash = path[path.length - 1] === '/' ? '/' : '';
        var segments = path.split('/');
        var out = [];
        var up = 0;

        for (var pos = 0; pos < segments.length; pos++) {
          var segment = segments[pos];

          switch (segment) {
            case '':
            case '.':
              break;

            case '..':
              if (out.length > 0) {
                out.pop();
              } else {
                up++;
              }

              break;

            default:
              out.push(segment);
          }
        }

        if (leadingSlash == '') {
          while (up-- > 0) {
            out.unshift('..');
          }

          if (out.length === 0) out.push('.');
        }

        return leadingSlash + out.join('/') + trailingSlash;
      }
      /**
       * Takes an array of the parts from split and canonicalizes the path part
       * and then joins all the parts.
       */


      function _joinAndCanonicalizePath(parts) {
        var path = parts[_ComponentIndex.Path];
        path = path == null ? '' : _removeDotSegments(path);
        parts[_ComponentIndex.Path] = path;
        return _buildFromEncodedParts(parts[_ComponentIndex.Scheme], parts[_ComponentIndex.UserInfo], parts[_ComponentIndex.Domain], parts[_ComponentIndex.Port], path, parts[_ComponentIndex.QueryData], parts[_ComponentIndex.Fragment]);
      }
      /**
       * Resolves a URL.
       * @param base The URL acting as the base URL.
       * @param to The URL to resolve.
       */


      function _resolveUrl(base, url) {
        var parts = _split(encodeURI(url));

        var baseParts = _split(base);

        if (parts[_ComponentIndex.Scheme] != null) {
          return _joinAndCanonicalizePath(parts);
        } else {
          parts[_ComponentIndex.Scheme] = baseParts[_ComponentIndex.Scheme];
        }

        for (var i = _ComponentIndex.Scheme; i <= _ComponentIndex.Port; i++) {
          if (parts[i] == null) {
            parts[i] = baseParts[i];
          }
        }

        if (parts[_ComponentIndex.Path][0] == '/') {
          return _joinAndCanonicalizePath(parts);
        }

        var path = baseParts[_ComponentIndex.Path];
        if (path == null) path = '/';
        var index = path.lastIndexOf('/');
        path = path.substring(0, index + 1) + parts[_ComponentIndex.Path];
        parts[_ComponentIndex.Path] = path;
        return _joinAndCanonicalizePath(parts);
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      var Extractor = /*#__PURE__*/function () {
        function Extractor(host, staticSymbolResolver, messageBundle, metadataResolver) {
          _classCallCheck(this, Extractor);

          this.host = host;
          this.staticSymbolResolver = staticSymbolResolver;
          this.messageBundle = messageBundle;
          this.metadataResolver = metadataResolver;
        }

        _createClass(Extractor, [{
          key: "extract",
          value: function extract(rootFiles) {
            var _this307 = this;

            var _analyzeAndValidateNg = analyzeAndValidateNgModules(rootFiles, this.host, this.staticSymbolResolver, this.metadataResolver),
                files = _analyzeAndValidateNg.files,
                ngModules = _analyzeAndValidateNg.ngModules;

            return Promise.all(ngModules.map(function (ngModule) {
              return _this307.metadataResolver.loadNgModuleDirectiveAndPipeMetadata(ngModule.type.reference, false);
            })).then(function () {
              var errors = [];
              files.forEach(function (file) {
                var compMetas = [];
                file.directives.forEach(function (directiveType) {
                  var dirMeta = _this307.metadataResolver.getDirectiveMetadata(directiveType);

                  if (dirMeta && dirMeta.isComponent) {
                    compMetas.push(dirMeta);
                  }
                });
                compMetas.forEach(function (compMeta) {
                  var html = compMeta.template.template; // Template URL points to either an HTML or TS file depending on
                  // whether the file is used with `templateUrl:` or `template:`,
                  // respectively.

                  var templateUrl = compMeta.template.templateUrl;
                  var interpolationConfig = InterpolationConfig.fromArray(compMeta.template.interpolation);
                  errors.push.apply(errors, _toConsumableArray(_this307.messageBundle.updateFromTemplate(html, templateUrl, interpolationConfig)));
                });
              });

              if (errors.length) {
                throw new Error(errors.map(function (e) {
                  return e.toString();
                }).join('\n'));
              }

              return _this307.messageBundle;
            });
          }
        }], [{
          key: "create",
          value: function create(host, locale) {
            var htmlParser = new HtmlParser();
            var urlResolver = createAotUrlResolver(host);
            var symbolCache = new StaticSymbolCache();
            var summaryResolver = new AotSummaryResolver(host, symbolCache);
            var staticSymbolResolver = new StaticSymbolResolver(host, symbolCache, summaryResolver);
            var staticReflector = new StaticReflector(summaryResolver, staticSymbolResolver);
            var config = new CompilerConfig({
              defaultEncapsulation: ViewEncapsulation.Emulated,
              useJit: false
            });
            var normalizer = new DirectiveNormalizer({
              get: function get(url) {
                return host.loadResource(url);
              }
            }, urlResolver, htmlParser, config);
            var elementSchemaRegistry = new DomElementSchemaRegistry();
            var resolver = new CompileMetadataResolver(config, htmlParser, new NgModuleResolver(staticReflector), new DirectiveResolver(staticReflector), new PipeResolver(staticReflector), summaryResolver, elementSchemaRegistry, normalizer, console, symbolCache, staticReflector); // TODO(vicb): implicit tags & attributes

            var messageBundle = new MessageBundle(htmlParser, [], {}, locale);
            var extractor = new Extractor(host, staticSymbolResolver, messageBundle, resolver);
            return {
              extractor: extractor,
              staticReflector: staticReflector
            };
          }
        }]);

        return Extractor;
      }();
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * Processes `Target`s with a given set of directives and performs a binding operation, which
       * returns an object similar to TypeScript's `ts.TypeChecker` that contains knowledge about the
       * target.
       */


      var R3TargetBinder = /*#__PURE__*/function () {
        function R3TargetBinder(directiveMatcher) {
          _classCallCheck(this, R3TargetBinder);

          this.directiveMatcher = directiveMatcher;
        }
        /**
         * Perform a binding operation on the given `Target` and return a `BoundTarget` which contains
         * metadata about the types referenced in the template.
         */


        _createClass(R3TargetBinder, [{
          key: "bind",
          value: function bind(target) {
            if (!target.template) {
              // TODO(alxhub): handle targets which contain things like HostBindings, etc.
              throw new Error('Binding without a template not yet supported');
            } // First, parse the template into a `Scope` structure. This operation captures the syntactic
            // scopes in the template and makes them available for later use.


            var scope = Scope.apply(target.template); // Use the `Scope` to extract the entities present at every level of the template.

            var templateEntities = extractTemplateEntities(scope); // Next, perform directive matching on the template using the `DirectiveBinder`. This returns:
            //   - directives: Map of nodes (elements & ng-templates) to the directives on them.
            //   - bindings: Map of inputs, outputs, and attributes to the directive/element that claims
            //     them. TODO(alxhub): handle multiple directives claiming an input/output/etc.
            //   - references: Map of #references to their targets.

            var _DirectiveBinder$appl = DirectiveBinder.apply(target.template, this.directiveMatcher),
                directives = _DirectiveBinder$appl.directives,
                bindings = _DirectiveBinder$appl.bindings,
                references = _DirectiveBinder$appl.references; // Finally, run the TemplateBinder to bind references, variables, and other entities within the
            // template. This extracts all the metadata that doesn't depend on directive matching.


            var _TemplateBinder$apply = TemplateBinder.apply(target.template, scope),
                expressions = _TemplateBinder$apply.expressions,
                symbols = _TemplateBinder$apply.symbols,
                nestingLevel = _TemplateBinder$apply.nestingLevel,
                usedPipes = _TemplateBinder$apply.usedPipes;

            return new R3BoundTarget(target, directives, bindings, references, expressions, symbols, nestingLevel, templateEntities, usedPipes);
          }
        }]);

        return R3TargetBinder;
      }();
      /**
       * Represents a binding scope within a template.
       *
       * Any variables, references, or other named entities declared within the template will
       * be captured and available by name in `namedEntities`. Additionally, child templates will
       * be analyzed and have their child `Scope`s available in `childScopes`.
       */


      var Scope = /*#__PURE__*/function () {
        function Scope(parentScope, template) {
          _classCallCheck(this, Scope);

          this.parentScope = parentScope;
          this.template = template;
          /**
           * Named members of the `Scope`, such as `Reference`s or `Variable`s.
           */

          this.namedEntities = new Map();
          /**
           * Child `Scope`s for immediately nested `Template`s.
           */

          this.childScopes = new Map();
        }

        _createClass(Scope, [{
          key: "ingest",
          value:
          /**
           * Internal method to process the template and populate the `Scope`.
           */
          function ingest(template) {
            var _this308 = this;

            if (template instanceof Template) {
              // Variables on an <ng-template> are defined in the inner scope.
              template.variables.forEach(function (node) {
                return _this308.visitVariable(node);
              }); // Process the nodes of the template.

              template.children.forEach(function (node) {
                return node.visit(_this308);
              });
            } else {
              // No overarching `Template` instance, so process the nodes directly.
              template.forEach(function (node) {
                return node.visit(_this308);
              });
            }
          }
        }, {
          key: "visitElement",
          value: function visitElement(element) {
            var _this309 = this;

            // `Element`s in the template may have `Reference`s which are captured in the scope.
            element.references.forEach(function (node) {
              return _this309.visitReference(node);
            }); // Recurse into the `Element`'s children.

            element.children.forEach(function (node) {
              return node.visit(_this309);
            });
          }
        }, {
          key: "visitTemplate",
          value: function visitTemplate(template) {
            var _this310 = this;

            // References on a <ng-template> are defined in the outer scope, so capture them before
            // processing the template's child scope.
            template.references.forEach(function (node) {
              return _this310.visitReference(node);
            }); // Next, create an inner scope and process the template within it.

            var scope = new Scope(this, template);
            scope.ingest(template);
            this.childScopes.set(template, scope);
          }
        }, {
          key: "visitVariable",
          value: function visitVariable(variable) {
            // Declare the variable if it's not already.
            this.maybeDeclare(variable);
          }
        }, {
          key: "visitReference",
          value: function visitReference(reference) {
            // Declare the variable if it's not already.
            this.maybeDeclare(reference);
          } // Unused visitors.

        }, {
          key: "visitContent",
          value: function visitContent(content) {}
        }, {
          key: "visitBoundAttribute",
          value: function visitBoundAttribute(attr) {}
        }, {
          key: "visitBoundEvent",
          value: function visitBoundEvent(event) {}
        }, {
          key: "visitBoundText",
          value: function visitBoundText(text) {}
        }, {
          key: "visitText",
          value: function visitText(text) {}
        }, {
          key: "visitTextAttribute",
          value: function visitTextAttribute(attr) {}
        }, {
          key: "visitIcu",
          value: function visitIcu(icu) {}
        }, {
          key: "maybeDeclare",
          value: function maybeDeclare(thing) {
            // Declare something with a name, as long as that name isn't taken.
            if (!this.namedEntities.has(thing.name)) {
              this.namedEntities.set(thing.name, thing);
            }
          }
          /**
           * Look up a variable within this `Scope`.
           *
           * This can recurse into a parent `Scope` if it's available.
           */

        }, {
          key: "lookup",
          value: function lookup(name) {
            if (this.namedEntities.has(name)) {
              // Found in the local scope.
              return this.namedEntities.get(name);
            } else if (this.parentScope !== null) {
              // Not in the local scope, but there's a parent scope so check there.
              return this.parentScope.lookup(name);
            } else {
              // At the top level and it wasn't found.
              return null;
            }
          }
          /**
           * Get the child scope for a `Template`.
           *
           * This should always be defined.
           */

        }, {
          key: "getChildScope",
          value: function getChildScope(template) {
            var res = this.childScopes.get(template);

            if (res === undefined) {
              throw new Error("Assertion error: child scope for ".concat(template, " not found"));
            }

            return res;
          }
        }], [{
          key: "newRootScope",
          value: function newRootScope() {
            return new Scope(null, null);
          }
          /**
           * Process a template (either as a `Template` sub-template with variables, or a plain array of
           * template `Node`s) and construct its `Scope`.
           */

        }, {
          key: "apply",
          value: function apply(template) {
            var scope = Scope.newRootScope();
            scope.ingest(template);
            return scope;
          }
        }]);

        return Scope;
      }();
      /**
       * Processes a template and matches directives on nodes (elements and templates).
       *
       * Usually used via the static `apply()` method.
       */


      var DirectiveBinder = /*#__PURE__*/function () {
        function DirectiveBinder(matcher, directives, bindings, references) {
          _classCallCheck(this, DirectiveBinder);

          this.matcher = matcher;
          this.directives = directives;
          this.bindings = bindings;
          this.references = references;
        }
        /**
         * Process a template (list of `Node`s) and perform directive matching against each node.
         *
         * @param template the list of template `Node`s to match (recursively).
         * @param selectorMatcher a `SelectorMatcher` containing the directives that are in scope for
         * this template.
         * @returns three maps which contain information about directives in the template: the
         * `directives` map which lists directives matched on each node, the `bindings` map which
         * indicates which directives claimed which bindings (inputs, outputs, etc), and the `references`
         * map which resolves #references (`Reference`s) within the template to the named directive or
         * template node.
         */


        _createClass(DirectiveBinder, [{
          key: "ingest",
          value: function ingest(template) {
            var _this311 = this;

            template.forEach(function (node) {
              return node.visit(_this311);
            });
          }
        }, {
          key: "visitElement",
          value: function visitElement(element) {
            this.visitElementOrTemplate(element.name, element);
          }
        }, {
          key: "visitTemplate",
          value: function visitTemplate(template) {
            this.visitElementOrTemplate('ng-template', template);
          }
        }, {
          key: "visitElementOrTemplate",
          value: function visitElementOrTemplate(elementName, node) {
            var _this312 = this;

            // First, determine the HTML shape of the node for the purpose of directive matching.
            // Do this by building up a `CssSelector` for the node.
            var cssSelector = createCssSelector(elementName, getAttrsForDirectiveMatching(node)); // Next, use the `SelectorMatcher` to get the list of directives on the node.

            var directives = [];
            this.matcher.match(cssSelector, function (_, directive) {
              return directives.push(directive);
            });

            if (directives.length > 0) {
              this.directives.set(node, directives);
            } // Resolve any references that are created on this node.


            node.references.forEach(function (ref) {
              var dirTarget = null; // If the reference expression is empty, then it matches the "primary" directive on the node
              // (if there is one). Otherwise it matches the host node itself (either an element or
              // <ng-template> node).

              if (ref.value.trim() === '') {
                // This could be a reference to a component if there is one.
                dirTarget = directives.find(function (dir) {
                  return dir.isComponent;
                }) || null;
              } else {
                // This should be a reference to a directive exported via exportAs.
                dirTarget = directives.find(function (dir) {
                  return dir.exportAs !== null && dir.exportAs.some(function (value) {
                    return value === ref.value;
                  });
                }) || null; // Check if a matching directive was found.

                if (dirTarget === null) {
                  // No matching directive was found - this reference points to an unknown target. Leave it
                  // unmapped.
                  return;
                }
              }

              if (dirTarget !== null) {
                // This reference points to a directive.
                _this312.references.set(ref, {
                  directive: dirTarget,
                  node: node
                });
              } else {
                // This reference points to the node itself.
                _this312.references.set(ref, node);
              }
            });

            var setAttributeBinding = function setAttributeBinding(attribute, ioType) {
              var dir = directives.find(function (dir) {
                return dir[ioType].hasBindingPropertyName(attribute.name);
              });
              var binding = dir !== undefined ? dir : node;

              _this312.bindings.set(attribute, binding);
            }; // Node inputs (bound attributes) and text attributes can be bound to an
            // input on a directive.


            node.inputs.forEach(function (input) {
              return setAttributeBinding(input, 'inputs');
            });
            node.attributes.forEach(function (attr) {
              return setAttributeBinding(attr, 'inputs');
            });

            if (node instanceof Template) {
              node.templateAttrs.forEach(function (attr) {
                return setAttributeBinding(attr, 'inputs');
              });
            } // Node outputs (bound events) can be bound to an output on a directive.


            node.outputs.forEach(function (output) {
              return setAttributeBinding(output, 'outputs');
            }); // Recurse into the node's children.

            node.children.forEach(function (child) {
              return child.visit(_this312);
            });
          } // Unused visitors.

        }, {
          key: "visitContent",
          value: function visitContent(content) {}
        }, {
          key: "visitVariable",
          value: function visitVariable(variable) {}
        }, {
          key: "visitReference",
          value: function visitReference(reference) {}
        }, {
          key: "visitTextAttribute",
          value: function visitTextAttribute(attribute) {}
        }, {
          key: "visitBoundAttribute",
          value: function visitBoundAttribute(attribute) {}
        }, {
          key: "visitBoundEvent",
          value: function visitBoundEvent(attribute) {}
        }, {
          key: "visitBoundAttributeOrEvent",
          value: function visitBoundAttributeOrEvent(node) {}
        }, {
          key: "visitText",
          value: function visitText(text) {}
        }, {
          key: "visitBoundText",
          value: function visitBoundText(text) {}
        }, {
          key: "visitIcu",
          value: function visitIcu(icu) {}
        }], [{
          key: "apply",
          value: function apply(template, selectorMatcher) {
            var directives = new Map();
            var bindings = new Map();
            var references = new Map();
            var matcher = new DirectiveBinder(selectorMatcher, directives, bindings, references);
            matcher.ingest(template);
            return {
              directives: directives,
              bindings: bindings,
              references: references
            };
          }
        }]);

        return DirectiveBinder;
      }();
      /**
       * Processes a template and extract metadata about expressions and symbols within.
       *
       * This is a companion to the `DirectiveBinder` that doesn't require knowledge of directives matched
       * within the template in order to operate.
       *
       * Expressions are visited by the superclass `RecursiveAstVisitor`, with custom logic provided
       * by overridden methods from that visitor.
       */


      var TemplateBinder = /*#__PURE__*/function (_RecursiveAstVisitor$3) {
        _inherits(TemplateBinder, _RecursiveAstVisitor$3);

        var _super111 = _createSuper(TemplateBinder);

        function TemplateBinder(bindings, symbols, usedPipes, nestingLevel, scope, template, level) {
          var _this313;

          _classCallCheck(this, TemplateBinder);

          _this313 = _super111.call(this);
          _this313.bindings = bindings;
          _this313.symbols = symbols;
          _this313.usedPipes = usedPipes;
          _this313.nestingLevel = nestingLevel;
          _this313.scope = scope;
          _this313.template = template;
          _this313.level = level;
          _this313.pipesUsed = []; // Save a bit of processing time by constructing this closure in advance.

          _this313.visitNode = function (node) {
            return node.visit(_assertThisInitialized(_this313));
          };

          return _this313;
        } // This method is defined to reconcile the type of TemplateBinder since both
        // RecursiveAstVisitor and Visitor define the visit() method in their
        // interfaces.


        _createClass(TemplateBinder, [{
          key: "visit",
          value: function visit(node, context) {
            if (node instanceof AST) {
              node.visit(this, context);
            } else {
              node.visit(this);
            }
          }
          /**
           * Process a template and extract metadata about expressions and symbols within.
           *
           * @param template the nodes of the template to process
           * @param scope the `Scope` of the template being processed.
           * @returns three maps which contain metadata about the template: `expressions` which interprets
           * special `AST` nodes in expressions as pointing to references or variables declared within the
           * template, `symbols` which maps those variables and references to the nested `Template` which
           * declares them, if any, and `nestingLevel` which associates each `Template` with a integer
           * nesting level (how many levels deep within the template structure the `Template` is), starting
           * at 1.
           */

        }, {
          key: "ingest",
          value: function ingest(template) {
            if (template instanceof Template) {
              // For <ng-template>s, process only variables and child nodes. Inputs, outputs, templateAttrs,
              // and references were all processed in the scope of the containing template.
              template.variables.forEach(this.visitNode);
              template.children.forEach(this.visitNode); // Set the nesting level.

              this.nestingLevel.set(template, this.level);
            } else {
              // Visit each node from the top-level template.
              template.forEach(this.visitNode);
            }
          }
        }, {
          key: "visitElement",
          value: function visitElement(element) {
            // Visit the inputs, outputs, and children of the element.
            element.inputs.forEach(this.visitNode);
            element.outputs.forEach(this.visitNode);
            element.children.forEach(this.visitNode);
          }
        }, {
          key: "visitTemplate",
          value: function visitTemplate(template) {
            // First, visit inputs, outputs and template attributes of the template node.
            template.inputs.forEach(this.visitNode);
            template.outputs.forEach(this.visitNode);
            template.templateAttrs.forEach(this.visitNode); // References are also evaluated in the outer context.

            template.references.forEach(this.visitNode); // Next, recurse into the template using its scope, and bumping the nesting level up by one.

            var childScope = this.scope.getChildScope(template);
            var binder = new TemplateBinder(this.bindings, this.symbols, this.usedPipes, this.nestingLevel, childScope, template, this.level + 1);
            binder.ingest(template);
          }
        }, {
          key: "visitVariable",
          value: function visitVariable(variable) {
            // Register the `Variable` as a symbol in the current `Template`.
            if (this.template !== null) {
              this.symbols.set(variable, this.template);
            }
          }
        }, {
          key: "visitReference",
          value: function visitReference(reference) {
            // Register the `Reference` as a symbol in the current `Template`.
            if (this.template !== null) {
              this.symbols.set(reference, this.template);
            }
          } // Unused template visitors

        }, {
          key: "visitText",
          value: function visitText(text) {}
        }, {
          key: "visitContent",
          value: function visitContent(content) {}
        }, {
          key: "visitTextAttribute",
          value: function visitTextAttribute(attribute) {}
        }, {
          key: "visitIcu",
          value: function visitIcu(icu) {
            var _this314 = this;

            Object.keys(icu.vars).forEach(function (key) {
              return icu.vars[key].visit(_this314);
            });
            Object.keys(icu.placeholders).forEach(function (key) {
              return icu.placeholders[key].visit(_this314);
            });
          } // The remaining visitors are concerned with processing AST expressions within template bindings

        }, {
          key: "visitBoundAttribute",
          value: function visitBoundAttribute(attribute) {
            attribute.value.visit(this);
          }
        }, {
          key: "visitBoundEvent",
          value: function visitBoundEvent(event) {
            event.handler.visit(this);
          }
        }, {
          key: "visitBoundText",
          value: function visitBoundText(text) {
            text.value.visit(this);
          }
        }, {
          key: "visitPipe",
          value: function visitPipe(ast, context) {
            this.usedPipes.add(ast.name);
            return _get(_getPrototypeOf(TemplateBinder.prototype), "visitPipe", this).call(this, ast, context);
          } // These five types of AST expressions can refer to expression roots, which could be variables
          // or references in the current scope.

        }, {
          key: "visitPropertyRead",
          value: function visitPropertyRead(ast, context) {
            this.maybeMap(context, ast, ast.name);
            return _get(_getPrototypeOf(TemplateBinder.prototype), "visitPropertyRead", this).call(this, ast, context);
          }
        }, {
          key: "visitSafePropertyRead",
          value: function visitSafePropertyRead(ast, context) {
            this.maybeMap(context, ast, ast.name);
            return _get(_getPrototypeOf(TemplateBinder.prototype), "visitSafePropertyRead", this).call(this, ast, context);
          }
        }, {
          key: "visitPropertyWrite",
          value: function visitPropertyWrite(ast, context) {
            this.maybeMap(context, ast, ast.name);
            return _get(_getPrototypeOf(TemplateBinder.prototype), "visitPropertyWrite", this).call(this, ast, context);
          }
        }, {
          key: "visitMethodCall",
          value: function visitMethodCall(ast, context) {
            this.maybeMap(context, ast, ast.name);
            return _get(_getPrototypeOf(TemplateBinder.prototype), "visitMethodCall", this).call(this, ast, context);
          }
        }, {
          key: "visitSafeMethodCall",
          value: function visitSafeMethodCall(ast, context) {
            this.maybeMap(context, ast, ast.name);
            return _get(_getPrototypeOf(TemplateBinder.prototype), "visitSafeMethodCall", this).call(this, ast, context);
          }
        }, {
          key: "maybeMap",
          value: function maybeMap(scope, ast, name) {
            // If the receiver of the expression isn't the `ImplicitReceiver`, this isn't the root of an
            // `AST` expression that maps to a `Variable` or `Reference`.
            if (!(ast.receiver instanceof ImplicitReceiver)) {
              return;
            } // Check whether the name exists in the current scope. If so, map it. Otherwise, the name is
            // probably a property on the top-level component context.


            var target = this.scope.lookup(name);

            if (target !== null) {
              this.bindings.set(ast, target);
            }
          }
        }], [{
          key: "apply",
          value: function apply(template, scope) {
            var expressions = new Map();
            var symbols = new Map();
            var nestingLevel = new Map();
            var usedPipes = new Set(); // The top-level template has nesting level 0.

            var binder = new TemplateBinder(expressions, symbols, usedPipes, nestingLevel, scope, template instanceof Template ? template : null, 0);
            binder.ingest(template);
            return {
              expressions: expressions,
              symbols: symbols,
              nestingLevel: nestingLevel,
              usedPipes: usedPipes
            };
          }
        }]);

        return TemplateBinder;
      }(RecursiveAstVisitor$1);
      /**
       * Metadata container for a `Target` that allows queries for specific bits of metadata.
       *
       * See `BoundTarget` for documentation on the individual methods.
       */


      var R3BoundTarget = /*#__PURE__*/function () {
        function R3BoundTarget(target, directives, bindings, references, exprTargets, symbols, nestingLevel, templateEntities, usedPipes) {
          _classCallCheck(this, R3BoundTarget);

          this.target = target;
          this.directives = directives;
          this.bindings = bindings;
          this.references = references;
          this.exprTargets = exprTargets;
          this.symbols = symbols;
          this.nestingLevel = nestingLevel;
          this.templateEntities = templateEntities;
          this.usedPipes = usedPipes;
        }

        _createClass(R3BoundTarget, [{
          key: "getEntitiesInTemplateScope",
          value: function getEntitiesInTemplateScope(template) {
            var _a;

            return (_a = this.templateEntities.get(template)) !== null && _a !== void 0 ? _a : new Set();
          }
        }, {
          key: "getDirectivesOfNode",
          value: function getDirectivesOfNode(node) {
            return this.directives.get(node) || null;
          }
        }, {
          key: "getReferenceTarget",
          value: function getReferenceTarget(ref) {
            return this.references.get(ref) || null;
          }
        }, {
          key: "getConsumerOfBinding",
          value: function getConsumerOfBinding(binding) {
            return this.bindings.get(binding) || null;
          }
        }, {
          key: "getExpressionTarget",
          value: function getExpressionTarget(expr) {
            return this.exprTargets.get(expr) || null;
          }
        }, {
          key: "getTemplateOfSymbol",
          value: function getTemplateOfSymbol(symbol) {
            return this.symbols.get(symbol) || null;
          }
        }, {
          key: "getNestingLevel",
          value: function getNestingLevel(template) {
            return this.nestingLevel.get(template) || 0;
          }
        }, {
          key: "getUsedDirectives",
          value: function getUsedDirectives() {
            var set = new Set();
            this.directives.forEach(function (dirs) {
              return dirs.forEach(function (dir) {
                return set.add(dir);
              });
            });
            return Array.from(set.values());
          }
        }, {
          key: "getUsedPipes",
          value: function getUsedPipes() {
            return Array.from(this.usedPipes);
          }
        }]);

        return R3BoundTarget;
      }();

      function extractTemplateEntities(rootScope) {
        var entityMap = new Map();

        function extractScopeEntities(scope) {
          if (entityMap.has(scope.template)) {
            return entityMap.get(scope.template);
          }

          var currentEntities = scope.namedEntities;
          var templateEntities;

          if (scope.parentScope !== null) {
            templateEntities = new Map([].concat(_toConsumableArray(extractScopeEntities(scope.parentScope)), _toConsumableArray(currentEntities)));
          } else {
            templateEntities = new Map(currentEntities);
          }

          entityMap.set(scope.template, templateEntities);
          return templateEntities;
        }

        var scopesToProcess = [rootScope];

        while (scopesToProcess.length > 0) {
          var scope = scopesToProcess.pop();

          var _iterator44 = _createForOfIteratorHelper(scope.childScopes.values()),
              _step44;

          try {
            for (_iterator44.s(); !(_step44 = _iterator44.n()).done;) {
              var childScope = _step44.value;
              scopesToProcess.push(childScope);
            }
          } catch (err) {
            _iterator44.e(err);
          } finally {
            _iterator44.f();
          }

          extractScopeEntities(scope);
        }

        var templateEntities = new Map();

        var _iterator45 = _createForOfIteratorHelper(entityMap),
            _step45;

        try {
          for (_iterator45.s(); !(_step45 = _iterator45.n()).done;) {
            var _step45$value = _slicedToArray(_step45.value, 2),
                template = _step45$value[0],
                entities = _step45$value[1];

            templateEntities.set(template, new Set(entities.values()));
          }
        } catch (err) {
          _iterator45.e(err);
        } finally {
          _iterator45.f();
        }

        return templateEntities;
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * Creates an array literal expression from the given array, mapping all values to an expression
       * using the provided mapping function. If the array is empty or null, then null is returned.
       *
       * @param values The array to transfer into literal array expression.
       * @param mapper The logic to use for creating an expression for the array's values.
       * @returns An array literal expression representing `values`, or null if `values` is empty or
       * is itself null.
       */


      function toOptionalLiteralArray(values, mapper) {
        if (values === null || values.length === 0) {
          return null;
        }

        return literalArr(values.map(function (value) {
          return mapper(value);
        }));
      }
      /**
       * Creates an object literal expression from the given object, mapping all values to an expression
       * using the provided mapping function. If the object has no keys, then null is returned.
       *
       * @param object The object to transfer into an object literal expression.
       * @param mapper The logic to use for creating an expression for the object's values.
       * @returns An object literal expression representing `object`, or null if `object` does not have
       * any keys.
       */


      function toOptionalLiteralMap(object, mapper) {
        var entries = Object.keys(object).map(function (key) {
          var value = object[key];
          return {
            key: key,
            value: mapper(value),
            quoted: true
          };
        });

        if (entries.length > 0) {
          return literalMap(entries);
        } else {
          return null;
        }
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * Compile a directive declaration defined by the `R3DirectiveMetadata`.
       */


      function compileDeclareDirectiveFromMetadata(meta) {
        var definitionMap = createDirectiveDefinitionMap(meta);
        var expression = importExpr(Identifiers$1.declareDirective).callFn([definitionMap.toLiteralMap()]);
        var type = createDirectiveType(meta);
        return {
          expression: expression,
          type: type
        };
      }
      /**
       * Gathers the declaration fields for a directive into a `DefinitionMap`. This allows for reusing
       * this logic for components, as they extend the directive metadata.
       */


      function createDirectiveDefinitionMap(meta) {
        var definitionMap = new DefinitionMap();
        definitionMap.set('version', literal('11.2.4')); // e.g. `type: MyDirective`

        definitionMap.set('type', meta.internalType); // e.g. `selector: 'some-dir'`

        if (meta.selector !== null) {
          definitionMap.set('selector', literal(meta.selector));
        }

        definitionMap.set('inputs', conditionallyCreateMapObjectLiteral(meta.inputs, true));
        definitionMap.set('outputs', conditionallyCreateMapObjectLiteral(meta.outputs));
        definitionMap.set('host', compileHostMetadata(meta.host));
        definitionMap.set('providers', meta.providers);

        if (meta.queries.length > 0) {
          definitionMap.set('queries', literalArr(meta.queries.map(compileQuery)));
        }

        if (meta.viewQueries.length > 0) {
          definitionMap.set('viewQueries', literalArr(meta.viewQueries.map(compileQuery)));
        }

        if (meta.exportAs !== null) {
          definitionMap.set('exportAs', asLiteral(meta.exportAs));
        }

        if (meta.usesInheritance) {
          definitionMap.set('usesInheritance', literal(true));
        }

        if (meta.lifecycle.usesOnChanges) {
          definitionMap.set('usesOnChanges', literal(true));
        }

        definitionMap.set('ngImport', importExpr(Identifiers$1.core));
        return definitionMap;
      }
      /**
       * Compiles the metadata of a single query into its partial declaration form as declared
       * by `R3DeclareQueryMetadata`.
       */


      function compileQuery(query) {
        var meta = new DefinitionMap();
        meta.set('propertyName', literal(query.propertyName));

        if (query.first) {
          meta.set('first', literal(true));
        }

        meta.set('predicate', Array.isArray(query.predicate) ? asLiteral(query.predicate) : query.predicate);

        if (!query.emitDistinctChangesOnly) {
          // `emitDistinctChangesOnly` is special because in future we expect it to be `true`. For this
          // reason the absence should be interpreted as `true`.
          meta.set('emitDistinctChangesOnly', literal(false));
        }

        if (query.descendants) {
          meta.set('descendants', literal(true));
        }

        meta.set('read', query.read);

        if (query["static"]) {
          meta.set('static', literal(true));
        }

        return meta.toLiteralMap();
      }
      /**
       * Compiles the host metadata into its partial declaration form as declared
       * in `R3DeclareDirectiveMetadata['host']`
       */


      function compileHostMetadata(meta) {
        var hostMetadata = new DefinitionMap();
        hostMetadata.set('attributes', toOptionalLiteralMap(meta.attributes, function (expression) {
          return expression;
        }));
        hostMetadata.set('listeners', toOptionalLiteralMap(meta.listeners, literal));
        hostMetadata.set('properties', toOptionalLiteralMap(meta.properties, literal));

        if (meta.specialAttributes.styleAttr) {
          hostMetadata.set('styleAttribute', literal(meta.specialAttributes.styleAttr));
        }

        if (meta.specialAttributes.classAttr) {
          hostMetadata.set('classAttribute', literal(meta.specialAttributes.classAttr));
        }

        if (hostMetadata.values.length > 0) {
          return hostMetadata.toLiteralMap();
        } else {
          return null;
        }
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * Compile a component declaration defined by the `R3ComponentMetadata`.
       */


      function compileDeclareComponentFromMetadata(meta, template) {
        var definitionMap = createComponentDefinitionMap(meta, template);
        var expression = importExpr(Identifiers$1.declareComponent).callFn([definitionMap.toLiteralMap()]);
        var type = createComponentType(meta);
        return {
          expression: expression,
          type: type
        };
      }
      /**
       * Gathers the declaration fields for a component into a `DefinitionMap`.
       */


      function createComponentDefinitionMap(meta, template) {
        var definitionMap = createDirectiveDefinitionMap(meta);
        definitionMap.set('template', getTemplateExpression(template));

        if (template.isInline) {
          definitionMap.set('isInline', literal(true));
        }

        definitionMap.set('styles', toOptionalLiteralArray(meta.styles, literal));
        definitionMap.set('directives', compileUsedDirectiveMetadata(meta));
        definitionMap.set('pipes', compileUsedPipeMetadata(meta));
        definitionMap.set('viewProviders', meta.viewProviders);
        definitionMap.set('animations', meta.animations);

        if (meta.changeDetection !== undefined) {
          definitionMap.set('changeDetection', importExpr(Identifiers$1.ChangeDetectionStrategy).prop(ChangeDetectionStrategy[meta.changeDetection]));
        }

        if (meta.encapsulation !== ViewEncapsulation.Emulated) {
          definitionMap.set('encapsulation', importExpr(Identifiers$1.ViewEncapsulation).prop(ViewEncapsulation[meta.encapsulation]));
        }

        if (meta.interpolation !== DEFAULT_INTERPOLATION_CONFIG) {
          definitionMap.set('interpolation', literalArr([literal(meta.interpolation.start), literal(meta.interpolation.end)]));
        }

        if (template.preserveWhitespaces === true) {
          definitionMap.set('preserveWhitespaces', literal(true));
        }

        return definitionMap;
      }

      function getTemplateExpression(template) {
        if (typeof template.template === 'string') {
          if (template.isInline) {
            // The template is inline but not a simple literal string, so give up with trying to
            // source-map it and just return a simple literal here.
            return literal(template.template);
          } else {
            // The template is external so we must synthesize an expression node with the appropriate
            // source-span.
            var contents = template.template;
            var file = new ParseSourceFile(contents, template.templateUrl);

            var _start6 = new ParseLocation(file, 0, 0, 0);

            var end = computeEndLocation(file, contents);
            var span = new ParseSourceSpan(_start6, end);
            return literal(contents, null, span);
          }
        } else {
          // The template is inline so we can just reuse the current expression node.
          return template.template;
        }
      }

      function computeEndLocation(file, contents) {
        var length = contents.length;
        var lineStart = 0;
        var lastLineStart = 0;
        var line = 0;

        do {
          lineStart = contents.indexOf('\n', lastLineStart);

          if (lineStart !== -1) {
            lastLineStart = lineStart + 1;
            line++;
          }
        } while (lineStart !== -1);

        return new ParseLocation(file, length, line, length - lastLineStart);
      }
      /**
       * Compiles the directives as registered in the component metadata into an array literal of the
       * individual directives. If the component does not use any directives, then null is returned.
       */


      function compileUsedDirectiveMetadata(meta) {
        var wrapType = meta.declarationListEmitMode !== 0
        /* Direct */
        ? generateForwardRef : function (expr) {
          return expr;
        };
        return toOptionalLiteralArray(meta.directives, function (directive) {
          var dirMeta = new DefinitionMap();
          dirMeta.set('type', wrapType(directive.type));
          dirMeta.set('selector', literal(directive.selector));
          dirMeta.set('inputs', toOptionalLiteralArray(directive.inputs, literal));
          dirMeta.set('outputs', toOptionalLiteralArray(directive.outputs, literal));
          dirMeta.set('exportAs', toOptionalLiteralArray(directive.exportAs, literal));
          return dirMeta.toLiteralMap();
        });
      }
      /**
       * Compiles the pipes as registered in the component metadata into an object literal, where the
       * pipe's name is used as key and a reference to its type as value. If the component does not use
       * any pipes, then null is returned.
       */


      function compileUsedPipeMetadata(meta) {
        if (meta.pipes.size === 0) {
          return null;
        }

        var wrapType = meta.declarationListEmitMode !== 0
        /* Direct */
        ? generateForwardRef : function (expr) {
          return expr;
        };
        var entries = [];

        var _iterator46 = _createForOfIteratorHelper(meta.pipes),
            _step46;

        try {
          for (_iterator46.s(); !(_step46 = _iterator46.n()).done;) {
            var _step46$value = _slicedToArray(_step46.value, 2),
                name = _step46$value[0],
                pipe = _step46$value[1];

            entries.push({
              key: name,
              value: wrapType(pipe),
              quoted: true
            });
          }
        } catch (err) {
          _iterator46.e(err);
        } finally {
          _iterator46.f();
        }

        return literalMap(entries);
      }

      function generateForwardRef(expr) {
        return importExpr(Identifiers$1.forwardRef).callFn([fn([], [new ReturnStatement(expr)])]);
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * Compile a Pipe declaration defined by the `R3PipeMetadata`.
       */


      function compileDeclarePipeFromMetadata(meta) {
        var definitionMap = createPipeDefinitionMap(meta);
        var expression = importExpr(Identifiers$1.declarePipe).callFn([definitionMap.toLiteralMap()]);
        var type = createPipeType(meta);
        return {
          expression: expression,
          type: type
        };
      }
      /**
       * Gathers the declaration fields for a Pipe into a `DefinitionMap`. This allows for reusing
       * this logic for components, as they extend the Pipe metadata.
       */


      function createPipeDefinitionMap(meta) {
        var definitionMap = new DefinitionMap();
        definitionMap.set('version', literal('11.2.4'));
        definitionMap.set('ngImport', importExpr(Identifiers$1.core)); // e.g. `type: MyPipe`

        definitionMap.set('type', meta.internalType); // e.g. `name: "myPipe"`

        definitionMap.set('name', literal(meta.pipeName));

        if (meta.pure === false) {
          // e.g. `pure: false`
          definitionMap.set('pure', literal(meta.pure));
        }

        return definitionMap;
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */
      // This file only reexports content of the `src` folder. Keep it that way.
      // This function call has a global side effects and publishes the compiler into global namespace for
      // the late binding of the Compiler to the @angular/core for jit compilation.


      publishFacade(_global);
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */
      // This file only reexports content of the `src` folder. Keep it that way.

      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */
      //# sourceMappingURL=compiler.js.map

      /***/
    },

    /***/
    "2MGJ":
    /*!***********************************************************************************************!*\
      !*** ./node_modules/@angular-devkit/build-angular/node_modules/core-js/internals/redefine.js ***!
      \***********************************************************************************************/

    /*! no static exports found */

    /***/
    function MGJ(module, exports, __webpack_require__) {
      var global = __webpack_require__(
      /*! ../internals/global */
      "ocAm");

      var createNonEnumerableProperty = __webpack_require__(
      /*! ../internals/create-non-enumerable-property */
      "aJMj");

      var has = __webpack_require__(
      /*! ../internals/has */
      "OG5q");

      var setGlobal = __webpack_require__(
      /*! ../internals/set-global */
      "Fqhe");

      var inspectSource = __webpack_require__(
      /*! ../internals/inspect-source */
      "6urC");

      var InternalStateModule = __webpack_require__(
      /*! ../internals/internal-state */
      "XH/I");

      var getInternalState = InternalStateModule.get;
      var enforceInternalState = InternalStateModule.enforce;
      var TEMPLATE = String(String).split('String');
      (module.exports = function (O, key, value, options) {
        var unsafe = options ? !!options.unsafe : false;
        var simple = options ? !!options.enumerable : false;
        var noTargetGet = options ? !!options.noTargetGet : false;
        var state;

        if (typeof value == 'function') {
          if (typeof key == 'string' && !has(value, 'name')) {
            createNonEnumerableProperty(value, 'name', key);
          }

          state = enforceInternalState(value);

          if (!state.source) {
            state.source = TEMPLATE.join(typeof key == 'string' ? key : '');
          }
        }

        if (O === global) {
          if (simple) O[key] = value;else setGlobal(key, value);
          return;
        } else if (!unsafe) {
          delete O[key];
        } else if (!noTargetGet && O[key]) {
          simple = true;
        }

        if (simple) O[key] = value;else createNonEnumerableProperty(O, key, value); // add fake Function#toString for correct work wrapped methods / constructors with methods like LoDash isNative
      })(Function.prototype, 'toString', function toString() {
        return typeof this == 'function' && getInternalState(this).source || inspectSource(this);
      });
      /***/
    },

    /***/
    "2OiF":
    /*!*****************************************************!*\
      !*** ./node_modules/core-js/modules/_a-function.js ***!
      \*****************************************************/

    /*! no static exports found */

    /***/
    function OiF(module, exports) {
      module.exports = function (it) {
        if (typeof it != 'function') throw TypeError(it + ' is not a function!');
        return it;
      };
      /***/

    },

    /***/
    "2RDa":
    /*!****************************************************************************************************!*\
      !*** ./node_modules/@angular-devkit/build-angular/node_modules/core-js/internals/object-create.js ***!
      \****************************************************************************************************/

    /*! no static exports found */

    /***/
    function RDa(module, exports, __webpack_require__) {
      var anObject = __webpack_require__(
      /*! ../internals/an-object */
      "F26l");

      var defineProperties = __webpack_require__(
      /*! ../internals/object-define-properties */
      "5y2d");

      var enumBugKeys = __webpack_require__(
      /*! ../internals/enum-bug-keys */
      "aAjO");

      var hiddenKeys = __webpack_require__(
      /*! ../internals/hidden-keys */
      "yQMY");

      var html = __webpack_require__(
      /*! ../internals/html */
      "149L");

      var documentCreateElement = __webpack_require__(
      /*! ../internals/document-create-element */
      "qx7X");

      var sharedKey = __webpack_require__(
      /*! ../internals/shared-key */
      "/AsP");

      var GT = '>';
      var LT = '<';
      var PROTOTYPE = 'prototype';
      var SCRIPT = 'script';
      var IE_PROTO = sharedKey('IE_PROTO');

      var EmptyConstructor = function EmptyConstructor() {
        /* empty */
      };

      var scriptTag = function scriptTag(content) {
        return LT + SCRIPT + GT + content + LT + '/' + SCRIPT + GT;
      }; // Create object with fake `null` prototype: use ActiveX Object with cleared prototype


      var NullProtoObjectViaActiveX = function NullProtoObjectViaActiveX(activeXDocument) {
        activeXDocument.write(scriptTag(''));
        activeXDocument.close();
        var temp = activeXDocument.parentWindow.Object;
        activeXDocument = null; // avoid memory leak

        return temp;
      }; // Create object with fake `null` prototype: use iframe Object with cleared prototype


      var NullProtoObjectViaIFrame = function NullProtoObjectViaIFrame() {
        // Thrash, waste and sodomy: IE GC bug
        var iframe = documentCreateElement('iframe');
        var JS = 'java' + SCRIPT + ':';
        var iframeDocument;
        iframe.style.display = 'none';
        html.appendChild(iframe); // https://github.com/zloirock/core-js/issues/475

        iframe.src = String(JS);
        iframeDocument = iframe.contentWindow.document;
        iframeDocument.open();
        iframeDocument.write(scriptTag('document.F=Object'));
        iframeDocument.close();
        return iframeDocument.F;
      }; // Check for document.domain and active x support
      // No need to use active x approach when document.domain is not set
      // see https://github.com/es-shims/es5-shim/issues/150
      // variation of https://github.com/kitcambridge/es5-shim/commit/4f738ac066346
      // avoid IE GC bug


      var activeXDocument;

      var _NullProtoObject = function NullProtoObject() {
        try {
          /* global ActiveXObject */
          activeXDocument = document.domain && new ActiveXObject('htmlfile');
        } catch (error) {
          /* ignore */
        }

        _NullProtoObject = activeXDocument ? NullProtoObjectViaActiveX(activeXDocument) : NullProtoObjectViaIFrame();
        var length = enumBugKeys.length;

        while (length--) {
          delete _NullProtoObject[PROTOTYPE][enumBugKeys[length]];
        }

        return _NullProtoObject();
      };

      hiddenKeys[IE_PROTO] = true; // `Object.create` method
      // https://tc39.es/ecma262/#sec-object.create

      module.exports = Object.create || function create(O, Properties) {
        var result;

        if (O !== null) {
          EmptyConstructor[PROTOTYPE] = anObject(O);
          result = new EmptyConstructor();
          EmptyConstructor[PROTOTYPE] = null; // add "__proto__" for Object.getPrototypeOf polyfill

          result[IE_PROTO] = O;
        } else result = _NullProtoObject();

        return Properties === undefined ? result : defineProperties(result, Properties);
      };
      /***/

    },

    /***/
    "3Lyj":
    /*!*******************************************************!*\
      !*** ./node_modules/core-js/modules/_redefine-all.js ***!
      \*******************************************************/

    /*! no static exports found */

    /***/
    function Lyj(module, exports, __webpack_require__) {
      var redefine = __webpack_require__(
      /*! ./_redefine */
      "KroJ");

      module.exports = function (target, src, safe) {
        for (var key in src) {
          redefine(target, key, src[key], safe);
        }

        return target;
      };
      /***/

    },

    /***/
    "3caY":
    /*!**************************************************************************************************!*\
      !*** ./node_modules/@angular-devkit/build-angular/node_modules/core-js/modules/es.math.asinh.js ***!
      \**************************************************************************************************/

    /*! no static exports found */

    /***/
    function caY(module, exports, __webpack_require__) {
      var $ = __webpack_require__(
      /*! ../internals/export */
      "wA6s");

      var nativeAsinh = Math.asinh;
      var log = Math.log;
      var sqrt = Math.sqrt;

      function asinh(x) {
        return !isFinite(x = +x) || x == 0 ? x : x < 0 ? -asinh(-x) : log(x + sqrt(x * x + 1));
      } // `Math.asinh` method
      // https://tc39.es/ecma262/#sec-math.asinh
      // Tor Browser bug: Math.asinh(0) -> -0


      $({
        target: 'Math',
        stat: true,
        forced: !(nativeAsinh && 1 / nativeAsinh(0) > 0)
      }, {
        asinh: asinh
      });
      /***/
    },

    /***/
    "3vMK":
    /*!*************************************************************************************************************!*\
      !*** ./node_modules/@angular-devkit/build-angular/node_modules/core-js/modules/es.function.has-instance.js ***!
      \*************************************************************************************************************/

    /*! no static exports found */

    /***/
    function vMK(module, exports, __webpack_require__) {
      "use strict";

      var isObject = __webpack_require__(
      /*! ../internals/is-object */
      "6XUM");

      var definePropertyModule = __webpack_require__(
      /*! ../internals/object-define-property */
      "/Ybd");

      var getPrototypeOf = __webpack_require__(
      /*! ../internals/object-get-prototype-of */
      "wIVT");

      var wellKnownSymbol = __webpack_require__(
      /*! ../internals/well-known-symbol */
      "m41k");

      var HAS_INSTANCE = wellKnownSymbol('hasInstance');
      var FunctionPrototype = Function.prototype; // `Function.prototype[@@hasInstance]` method
      // https://tc39.es/ecma262/#sec-function.prototype-@@hasinstance

      if (!(HAS_INSTANCE in FunctionPrototype)) {
        definePropertyModule.f(FunctionPrototype, HAS_INSTANCE, {
          value: function value(O) {
            if (typeof this != 'function' || !isObject(O)) return false;
            if (!isObject(this.prototype)) return O instanceof this; // for environment w/o native `@@hasInstance` logic enough `instanceof`, but add this:

            while (O = getPrototypeOf(O)) {
              if (this.prototype === O) return true;
            }

            return false;
          }
        });
      }
      /***/

    },

    /***/
    "3xQm":
    /*!************************************************************************************************!*\
      !*** ./node_modules/@angular-devkit/build-angular/node_modules/core-js/internals/microtask.js ***!
      \************************************************************************************************/

    /*! no static exports found */

    /***/
    function xQm(module, exports, __webpack_require__) {
      var global = __webpack_require__(
      /*! ../internals/global */
      "ocAm");

      var getOwnPropertyDescriptor = __webpack_require__(
      /*! ../internals/object-get-own-property-descriptor */
      "7gGY").f;

      var macrotask = __webpack_require__(
      /*! ../internals/task */
      "Ox9q").set;

      var IS_IOS = __webpack_require__(
      /*! ../internals/engine-is-ios */
      "tuHh");

      var IS_WEBOS_WEBKIT = __webpack_require__(
      /*! ../internals/engine-is-webos-webkit */
      "3xgG");

      var IS_NODE = __webpack_require__(
      /*! ../internals/engine-is-node */
      "B43K");

      var MutationObserver = global.MutationObserver || global.WebKitMutationObserver;
      var document = global.document;
      var process = global.process;
      var Promise = global.Promise; // Node.js 11 shows ExperimentalWarning on getting `queueMicrotask`

      var queueMicrotaskDescriptor = getOwnPropertyDescriptor(global, 'queueMicrotask');
      var queueMicrotask = queueMicrotaskDescriptor && queueMicrotaskDescriptor.value;
      var flush, head, last, notify, toggle, node, promise, then; // modern engines have queueMicrotask method

      if (!queueMicrotask) {
        flush = function flush() {
          var parent, fn;
          if (IS_NODE && (parent = process.domain)) parent.exit();

          while (head) {
            fn = head.fn;
            head = head.next;

            try {
              fn();
            } catch (error) {
              if (head) notify();else last = undefined;
              throw error;
            }
          }

          last = undefined;
          if (parent) parent.enter();
        }; // browsers with MutationObserver, except iOS - https://github.com/zloirock/core-js/issues/339
        // also except WebOS Webkit https://github.com/zloirock/core-js/issues/898


        if (!IS_IOS && !IS_NODE && !IS_WEBOS_WEBKIT && MutationObserver && document) {
          toggle = true;
          node = document.createTextNode('');
          new MutationObserver(flush).observe(node, {
            characterData: true
          });

          notify = function notify() {
            node.data = toggle = !toggle;
          }; // environments with maybe non-completely correct, but existent Promise

        } else if (Promise && Promise.resolve) {
          // Promise.resolve without an argument throws an error in LG WebOS 2
          promise = Promise.resolve(undefined);
          then = promise.then;

          notify = function notify() {
            then.call(promise, flush);
          }; // Node.js without promises

        } else if (IS_NODE) {
          notify = function notify() {
            process.nextTick(flush);
          }; // for other environments - macrotask based on:
          // - setImmediate
          // - MessageChannel
          // - window.postMessag
          // - onreadystatechange
          // - setTimeout

        } else {
          notify = function notify() {
            // strange IE + webpack dev server bug - use .call(global)
            macrotask.call(global, flush);
          };
        }
      }

      module.exports = queueMicrotask || function (fn) {
        var task = {
          fn: fn,
          next: undefined
        };
        if (last) last.next = task;

        if (!head) {
          head = task;
          notify();
        }

        last = task;
      };
      /***/

    },

    /***/
    "3xgG":
    /*!*************************************************************************************************************!*\
      !*** ./node_modules/@angular-devkit/build-angular/node_modules/core-js/internals/engine-is-webos-webkit.js ***!
      \*************************************************************************************************************/

    /*! no static exports found */

    /***/
    function xgG(module, exports, __webpack_require__) {
      var userAgent = __webpack_require__(
      /*! ../internals/engine-user-agent */
      "T/Kj");

      module.exports = /web0s(?!.*chrome)/i.test(userAgent);
      /***/
    },

    /***/
    "45Tv":
    /*!******************************************************************!*\
      !*** ./node_modules/core-js/modules/es7.reflect.get-metadata.js ***!
      \******************************************************************/

    /*! no static exports found */

    /***/
    function Tv(module, exports, __webpack_require__) {
      var metadata = __webpack_require__(
      /*! ./_metadata */
      "N6cJ");

      var anObject = __webpack_require__(
      /*! ./_an-object */
      "y3w9");

      var getPrototypeOf = __webpack_require__(
      /*! ./_object-gpo */
      "OP3Y");

      var ordinaryHasOwnMetadata = metadata.has;
      var ordinaryGetOwnMetadata = metadata.get;
      var toMetaKey = metadata.key;

      var ordinaryGetMetadata = function ordinaryGetMetadata(MetadataKey, O, P) {
        var hasOwn = ordinaryHasOwnMetadata(MetadataKey, O, P);
        if (hasOwn) return ordinaryGetOwnMetadata(MetadataKey, O, P);
        var parent = getPrototypeOf(O);
        return parent !== null ? ordinaryGetMetadata(MetadataKey, parent, P) : undefined;
      };

      metadata.exp({
        getMetadata: function getMetadata(metadataKey, target
        /* , targetKey */
        ) {
          return ordinaryGetMetadata(metadataKey, anObject(target), arguments.length < 3 ? undefined : toMetaKey(arguments[2]));
        }
      });
      /***/
    },

    /***/
    "48xZ":
    /*!**************************************************************************************************!*\
      !*** ./node_modules/@angular-devkit/build-angular/node_modules/core-js/internals/math-fround.js ***!
      \**************************************************************************************************/

    /*! no static exports found */

    /***/
    function xZ(module, exports, __webpack_require__) {
      var sign = __webpack_require__(
      /*! ../internals/math-sign */
      "n/2t");

      var abs = Math.abs;
      var pow = Math.pow;
      var EPSILON = pow(2, -52);
      var EPSILON32 = pow(2, -23);
      var MAX32 = pow(2, 127) * (2 - EPSILON32);
      var MIN32 = pow(2, -126);

      var roundTiesToEven = function roundTiesToEven(n) {
        return n + 1 / EPSILON - 1 / EPSILON;
      }; // `Math.fround` method implementation
      // https://tc39.es/ecma262/#sec-math.fround


      module.exports = Math.fround || function fround(x) {
        var $abs = abs(x);
        var $sign = sign(x);
        var a, result;
        if ($abs < MIN32) return $sign * roundTiesToEven($abs / MIN32 / EPSILON32) * MIN32 * EPSILON32;
        a = (1 + EPSILON32 / EPSILON) * $abs;
        result = a - (a - $abs); // eslint-disable-next-line no-self-compare

        if (result > MAX32 || result != result) return $sign * Infinity;
        return $sign * result;
      };
      /***/

    },

    /***/
    "49D4":
    /*!*********************************************************************!*\
      !*** ./node_modules/core-js/modules/es7.reflect.define-metadata.js ***!
      \*********************************************************************/

    /*! no static exports found */

    /***/
    function D4(module, exports, __webpack_require__) {
      var metadata = __webpack_require__(
      /*! ./_metadata */
      "N6cJ");

      var anObject = __webpack_require__(
      /*! ./_an-object */
      "y3w9");

      var toMetaKey = metadata.key;
      var ordinaryDefineOwnMetadata = metadata.set;
      metadata.exp({
        defineMetadata: function defineMetadata(metadataKey, metadataValue, target, targetKey) {
          ordinaryDefineOwnMetadata(metadataKey, metadataValue, anObject(target), toMetaKey(targetKey));
        }
      });
      /***/
    },

    /***/
    "4GtL":
    /*!********************************************************************************************************!*\
      !*** ./node_modules/@angular-devkit/build-angular/node_modules/core-js/internals/array-copy-within.js ***!
      \********************************************************************************************************/

    /*! no static exports found */

    /***/
    function GtL(module, exports, __webpack_require__) {
      "use strict";

      var toObject = __webpack_require__(
      /*! ../internals/to-object */
      "VCQ8");

      var toAbsoluteIndex = __webpack_require__(
      /*! ../internals/to-absolute-index */
      "7Oj1");

      var toLength = __webpack_require__(
      /*! ../internals/to-length */
      "xpLY");

      var min = Math.min; // `Array.prototype.copyWithin` method implementation
      // https://tc39.es/ecma262/#sec-array.prototype.copywithin

      module.exports = [].copyWithin || function copyWithin(target
      /* = 0 */
      , start
      /* = 0, end = @length */
      ) {
        var O = toObject(this);
        var len = toLength(O.length);
        var to = toAbsoluteIndex(target, len);
        var from = toAbsoluteIndex(start, len);
        var end = arguments.length > 2 ? arguments[2] : undefined;
        var count = min((end === undefined ? len : toAbsoluteIndex(end, len)) - from, len - to);
        var inc = 1;

        if (from < to && to < from + count) {
          inc = -1;
          from += count - 1;
          to += count - 1;
        }

        while (count-- > 0) {
          if (from in O) O[to] = O[from];else delete O[to];
          to += inc;
          from += inc;
        }

        return O;
      };
      /***/

    },

    /***/
    "4Kt7":
    /*!**************************************************************************************************!*\
      !*** ./node_modules/@angular-devkit/build-angular/node_modules/core-js/modules/es.string.sub.js ***!
      \**************************************************************************************************/

    /*! no static exports found */

    /***/
    function Kt7(module, exports, __webpack_require__) {
      "use strict";

      var $ = __webpack_require__(
      /*! ../internals/export */
      "wA6s");

      var createHTML = __webpack_require__(
      /*! ../internals/create-html */
      "uoca");

      var forcedStringHTMLMethod = __webpack_require__(
      /*! ../internals/string-html-forced */
      "d8Sw"); // `String.prototype.sub` method
      // https://tc39.es/ecma262/#sec-string.prototype.sub


      $({
        target: 'String',
        proto: true,
        forced: forcedStringHTMLMethod('sub')
      }, {
        sub: function sub() {
          return createHTML(this, 'sub', '', '');
        }
      });
      /***/
    },

    /***/
    "4LiD":
    /*!*****************************************************!*\
      !*** ./node_modules/core-js/modules/_collection.js ***!
      \*****************************************************/

    /*! no static exports found */

    /***/
    function LiD(module, exports, __webpack_require__) {
      "use strict";

      var global = __webpack_require__(
      /*! ./_global */
      "dyZX");

      var $export = __webpack_require__(
      /*! ./_export */
      "XKFU");

      var redefine = __webpack_require__(
      /*! ./_redefine */
      "KroJ");

      var redefineAll = __webpack_require__(
      /*! ./_redefine-all */
      "3Lyj");

      var meta = __webpack_require__(
      /*! ./_meta */
      "Z6vF");

      var forOf = __webpack_require__(
      /*! ./_for-of */
      "SlkY");

      var anInstance = __webpack_require__(
      /*! ./_an-instance */
      "9gX7");

      var isObject = __webpack_require__(
      /*! ./_is-object */
      "0/R4");

      var fails = __webpack_require__(
      /*! ./_fails */
      "eeVq");

      var $iterDetect = __webpack_require__(
      /*! ./_iter-detect */
      "XMVh");

      var setToStringTag = __webpack_require__(
      /*! ./_set-to-string-tag */
      "fyDq");

      var inheritIfRequired = __webpack_require__(
      /*! ./_inherit-if-required */
      "Xbzi");

      module.exports = function (NAME, wrapper, methods, common, IS_MAP, IS_WEAK) {
        var Base = global[NAME];
        var C = Base;
        var ADDER = IS_MAP ? 'set' : 'add';
        var proto = C && C.prototype;
        var O = {};

        var fixMethod = function fixMethod(KEY) {
          var fn = proto[KEY];
          redefine(proto, KEY, KEY == 'delete' ? function (a) {
            return IS_WEAK && !isObject(a) ? false : fn.call(this, a === 0 ? 0 : a);
          } : KEY == 'has' ? function has(a) {
            return IS_WEAK && !isObject(a) ? false : fn.call(this, a === 0 ? 0 : a);
          } : KEY == 'get' ? function get(a) {
            return IS_WEAK && !isObject(a) ? undefined : fn.call(this, a === 0 ? 0 : a);
          } : KEY == 'add' ? function add(a) {
            fn.call(this, a === 0 ? 0 : a);
            return this;
          } : function set(a, b) {
            fn.call(this, a === 0 ? 0 : a, b);
            return this;
          });
        };

        if (typeof C != 'function' || !(IS_WEAK || proto.forEach && !fails(function () {
          new C().entries().next();
        }))) {
          // create collection constructor
          C = common.getConstructor(wrapper, NAME, IS_MAP, ADDER);
          redefineAll(C.prototype, methods);
          meta.NEED = true;
        } else {
          var instance = new C(); // early implementations not supports chaining

          var HASNT_CHAINING = instance[ADDER](IS_WEAK ? {} : -0, 1) != instance; // V8 ~  Chromium 40- weak-collections throws on primitives, but should return false

          var THROWS_ON_PRIMITIVES = fails(function () {
            instance.has(1);
          }); // most early implementations doesn't supports iterables, most modern - not close it correctly

          var ACCEPT_ITERABLES = $iterDetect(function (iter) {
            new C(iter);
          }); // eslint-disable-line no-new
          // for early implementations -0 and +0 not the same

          var BUGGY_ZERO = !IS_WEAK && fails(function () {
            // V8 ~ Chromium 42- fails only with 5+ elements
            var $instance = new C();
            var index = 5;

            while (index--) {
              $instance[ADDER](index, index);
            }

            return !$instance.has(-0);
          });

          if (!ACCEPT_ITERABLES) {
            C = wrapper(function (target, iterable) {
              anInstance(target, C, NAME);
              var that = inheritIfRequired(new Base(), target, C);
              if (iterable != undefined) forOf(iterable, IS_MAP, that[ADDER], that);
              return that;
            });
            C.prototype = proto;
            proto.constructor = C;
          }

          if (THROWS_ON_PRIMITIVES || BUGGY_ZERO) {
            fixMethod('delete');
            fixMethod('has');
            IS_MAP && fixMethod('get');
          }

          if (BUGGY_ZERO || HASNT_CHAINING) fixMethod(ADDER); // weak collections should not contains .clear method

          if (IS_WEAK && proto.clear) delete proto.clear;
        }

        setToStringTag(C, NAME);
        O[NAME] = C;
        $export($export.G + $export.W + $export.F * (C != Base), O);
        if (!IS_WEAK) common.setStrong(C, NAME, IS_MAP);
        return C;
      };
      /***/

    },

    /***/
    "4NCC":
    /*!*******************************************************************************************************!*\
      !*** ./node_modules/@angular-devkit/build-angular/node_modules/core-js/internals/number-parse-int.js ***!
      \*******************************************************************************************************/

    /*! no static exports found */

    /***/
    function NCC(module, exports, __webpack_require__) {
      var global = __webpack_require__(
      /*! ../internals/global */
      "ocAm");

      var trim = __webpack_require__(
      /*! ../internals/string-trim */
      "jnLS").trim;

      var whitespaces = __webpack_require__(
      /*! ../internals/whitespaces */
      "xFZC");

      var $parseInt = global.parseInt;
      var hex = /^[+-]?0[Xx]/;
      var FORCED = $parseInt(whitespaces + '08') !== 8 || $parseInt(whitespaces + '0x16') !== 22; // `parseInt` method
      // https://tc39.es/ecma262/#sec-parseint-string-radix

      module.exports = FORCED ? function parseInt(string, radix) {
        var S = trim(String(string));
        return $parseInt(S, radix >>> 0 || (hex.test(S) ? 16 : 10));
      } : $parseInt;
      /***/
    },

    /***/
    "4PyY":
    /*!************************************************************************************************************!*\
      !*** ./node_modules/@angular-devkit/build-angular/node_modules/core-js/internals/to-string-tag-support.js ***!
      \************************************************************************************************************/

    /*! no static exports found */

    /***/
    function PyY(module, exports, __webpack_require__) {
      var wellKnownSymbol = __webpack_require__(
      /*! ../internals/well-known-symbol */
      "m41k");

      var TO_STRING_TAG = wellKnownSymbol('toStringTag');
      var test = {};
      test[TO_STRING_TAG] = 'z';
      module.exports = String(test) === '[object z]';
      /***/
    },

    /***/
    "4R4u":
    /*!********************************************************!*\
      !*** ./node_modules/core-js/modules/_enum-bug-keys.js ***!
      \********************************************************/

    /*! no static exports found */

    /***/
    function R4u(module, exports) {
      // IE 8- don't enum bug keys
      module.exports = 'constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf'.split(',');
      /***/
    },

    /***/
    "4Ym5":
    /*!******************************************************************************************************!*\
      !*** ./node_modules/@angular-devkit/build-angular/node_modules/core-js/internals/object-to-array.js ***!
      \******************************************************************************************************/

    /*! no static exports found */

    /***/
    function Ym5(module, exports, __webpack_require__) {
      var DESCRIPTORS = __webpack_require__(
      /*! ../internals/descriptors */
      "T69T");

      var objectKeys = __webpack_require__(
      /*! ../internals/object-keys */
      "ZRqE");

      var toIndexedObject = __webpack_require__(
      /*! ../internals/to-indexed-object */
      "EMtK");

      var propertyIsEnumerable = __webpack_require__(
      /*! ../internals/object-property-is-enumerable */
      "gn9T").f; // `Object.{ entries, values }` methods implementation


      var createMethod = function createMethod(TO_ENTRIES) {
        return function (it) {
          var O = toIndexedObject(it);
          var keys = objectKeys(O);
          var length = keys.length;
          var i = 0;
          var result = [];
          var key;

          while (length > i) {
            key = keys[i++];

            if (!DESCRIPTORS || propertyIsEnumerable.call(O, key)) {
              result.push(TO_ENTRIES ? [key, O[key]] : O[key]);
            }
          }

          return result;
        };
      };

      module.exports = {
        // `Object.entries` method
        // https://tc39.es/ecma262/#sec-object.entries
        entries: createMethod(true),
        // `Object.values` method
        // https://tc39.es/ecma262/#sec-object.values
        values: createMethod(false)
      };
      /***/
    },

    /***/
    "4axp":
    /*!****************************************************************************************************!*\
      !*** ./node_modules/@angular-devkit/build-angular/node_modules/core-js/modules/es.string.blink.js ***!
      \****************************************************************************************************/

    /*! no static exports found */

    /***/
    function axp(module, exports, __webpack_require__) {
      "use strict";

      var $ = __webpack_require__(
      /*! ../internals/export */
      "wA6s");

      var createHTML = __webpack_require__(
      /*! ../internals/create-html */
      "uoca");

      var forcedStringHTMLMethod = __webpack_require__(
      /*! ../internals/string-html-forced */
      "d8Sw"); // `String.prototype.blink` method
      // https://tc39.es/ecma262/#sec-string.prototype.blink


      $({
        target: 'String',
        proto: true,
        forced: forcedStringHTMLMethod('blink')
      }, {
        blink: function blink() {
          return createHTML(this, 'blink', '', '');
        }
      });
      /***/
    },

    /***/
    "54C3":
    /*!******************************************************************************************************!*\
      !*** ./node_modules/@angular-devkit/build-angular/node_modules/core-js/modules/es.array.flat-map.js ***!
      \******************************************************************************************************/

    /*! no static exports found */

    /***/
    function C3(module, exports, __webpack_require__) {
      "use strict";

      var $ = __webpack_require__(
      /*! ../internals/export */
      "wA6s");

      var flattenIntoArray = __webpack_require__(
      /*! ../internals/flatten-into-array */
      "IUBq");

      var toObject = __webpack_require__(
      /*! ../internals/to-object */
      "VCQ8");

      var toLength = __webpack_require__(
      /*! ../internals/to-length */
      "xpLY");

      var aFunction = __webpack_require__(
      /*! ../internals/a-function */
      "Neub");

      var arraySpeciesCreate = __webpack_require__(
      /*! ../internals/array-species-create */
      "JafA"); // `Array.prototype.flatMap` method
      // https://tc39.es/ecma262/#sec-array.prototype.flatmap


      $({
        target: 'Array',
        proto: true
      }, {
        flatMap: function flatMap(callbackfn
        /* , thisArg */
        ) {
          var O = toObject(this);
          var sourceLen = toLength(O.length);
          var A;
          aFunction(callbackfn);
          A = arraySpeciesCreate(O, 0);
          A.length = flattenIntoArray(A, O, O, sourceLen, 0, 1, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
          return A;
        }
      });
      /***/
    },

    /***/
    "5MmU":
    /*!***************************************************************************************************************!*\
      !*** ./node_modules/@angular-devkit/build-angular/node_modules/core-js/internals/is-array-iterator-method.js ***!
      \***************************************************************************************************************/

    /*! no static exports found */

    /***/
    function MmU(module, exports, __webpack_require__) {
      var wellKnownSymbol = __webpack_require__(
      /*! ../internals/well-known-symbol */
      "m41k");

      var Iterators = __webpack_require__(
      /*! ../internals/iterators */
      "pz+c");

      var ITERATOR = wellKnownSymbol('iterator');
      var ArrayPrototype = Array.prototype; // check on default Array iterator

      module.exports = function (it) {
        return it !== undefined && (Iterators.Array === it || ArrayPrototype[ITERATOR] === it);
      };
      /***/

    },

    /***/
    "5eAq":
    /*!**********************************************************************************************************!*\
      !*** ./node_modules/@angular-devkit/build-angular/node_modules/core-js/modules/es.number.parse-float.js ***!
      \**********************************************************************************************************/

    /*! no static exports found */

    /***/
    function eAq(module, exports, __webpack_require__) {
      var $ = __webpack_require__(
      /*! ../internals/export */
      "wA6s");

      var parseFloat = __webpack_require__(
      /*! ../internals/number-parse-float */
      "vZCr"); // `Number.parseFloat` method
      // https://tc39.es/ecma262/#sec-number.parseFloat


      $({
        target: 'Number',
        stat: true,
        forced: Number.parseFloat != parseFloat
      }, {
        parseFloat: parseFloat
      });
      /***/
    },

    /***/
    "5y2d":
    /*!***************************************************************************************************************!*\
      !*** ./node_modules/@angular-devkit/build-angular/node_modules/core-js/internals/object-define-properties.js ***!
      \***************************************************************************************************************/

    /*! no static exports found */

    /***/
    function y2d(module, exports, __webpack_require__) {
      var DESCRIPTORS = __webpack_require__(
      /*! ../internals/descriptors */
      "T69T");

      var definePropertyModule = __webpack_require__(
      /*! ../internals/object-define-property */
      "/Ybd");

      var anObject = __webpack_require__(
      /*! ../internals/an-object */
      "F26l");

      var objectKeys = __webpack_require__(
      /*! ../internals/object-keys */
      "ZRqE"); // `Object.defineProperties` method
      // https://tc39.es/ecma262/#sec-object.defineproperties


      module.exports = DESCRIPTORS ? Object.defineProperties : function defineProperties(O, Properties) {
        anObject(O);
        var keys = objectKeys(Properties);
        var length = keys.length;
        var index = 0;
        var key;

        while (length > index) {
          definePropertyModule.f(O, key = keys[index++], Properties[key]);
        }

        return O;
      };
      /***/
    },

    /***/
    "5zDw":
    /*!********************************************************************************************************!*\
      !*** ./node_modules/@angular-devkit/build-angular/node_modules/core-js/modules/es.number.parse-int.js ***!
      \********************************************************************************************************/

    /*! no static exports found */

    /***/
    function zDw(module, exports, __webpack_require__) {
      var $ = __webpack_require__(
      /*! ../internals/export */
      "wA6s");

      var parseInt = __webpack_require__(
      /*! ../internals/number-parse-int */
      "4NCC"); // `Number.parseInt` method
      // https://tc39.es/ecma262/#sec-number.parseint


      $({
        target: 'Number',
        stat: true,
        forced: Number.parseInt != parseInt
      }, {
        parseInt: parseInt
      });
      /***/
    },

    /***/
    "5zQ0":
    /*!*****************************************************************************************************!*\
      !*** ./node_modules/@angular-devkit/build-angular/node_modules/core-js/internals/iterator-close.js ***!
      \*****************************************************************************************************/

    /*! no static exports found */

    /***/
    function zQ0(module, exports, __webpack_require__) {
      var anObject = __webpack_require__(
      /*! ../internals/an-object */
      "F26l");

      module.exports = function (iterator) {
        var returnMethod = iterator['return'];

        if (returnMethod !== undefined) {
          return anObject(returnMethod.call(iterator)).value;
        }
      };
      /***/

    },

    /***/
    "68Yi":
    /*!**************************************************************************************************!*\
      !*** ./node_modules/@angular-devkit/build-angular/node_modules/core-js/modules/es.array.flat.js ***!
      \**************************************************************************************************/

    /*! no static exports found */

    /***/
    function Yi(module, exports, __webpack_require__) {
      "use strict";

      var $ = __webpack_require__(
      /*! ../internals/export */
      "wA6s");

      var flattenIntoArray = __webpack_require__(
      /*! ../internals/flatten-into-array */
      "IUBq");

      var toObject = __webpack_require__(
      /*! ../internals/to-object */
      "VCQ8");

      var toLength = __webpack_require__(
      /*! ../internals/to-length */
      "xpLY");

      var toInteger = __webpack_require__(
      /*! ../internals/to-integer */
      "vDBE");

      var arraySpeciesCreate = __webpack_require__(
      /*! ../internals/array-species-create */
      "JafA"); // `Array.prototype.flat` method
      // https://tc39.es/ecma262/#sec-array.prototype.flat


      $({
        target: 'Array',
        proto: true
      }, {
        flat: function flat()
        /* depthArg = 1 */
        {
          var depthArg = arguments.length ? arguments[0] : undefined;
          var O = toObject(this);
          var sourceLen = toLength(O.length);
          var A = arraySpeciesCreate(O, 0);
          A.length = flattenIntoArray(A, O, O, sourceLen, 0, depthArg === undefined ? 1 : toInteger(depthArg));
          return A;
        }
      });
      /***/
    },

    /***/
    "6CEi":
    /*!**************************************************************************************************!*\
      !*** ./node_modules/@angular-devkit/build-angular/node_modules/core-js/modules/es.array.find.js ***!
      \**************************************************************************************************/

    /*! no static exports found */

    /***/
    function CEi(module, exports, __webpack_require__) {
      "use strict";

      var $ = __webpack_require__(
      /*! ../internals/export */
      "wA6s");

      var $find = __webpack_require__(
      /*! ../internals/array-iteration */
      "kk6e").find;

      var addToUnscopables = __webpack_require__(
      /*! ../internals/add-to-unscopables */
      "A1Hp");

      var arrayMethodUsesToLength = __webpack_require__(
      /*! ../internals/array-method-uses-to-length */
      "w2hq");

      var FIND = 'find';
      var SKIPS_HOLES = true;
      var USES_TO_LENGTH = arrayMethodUsesToLength(FIND); // Shouldn't skip holes

      if (FIND in []) Array(1)[FIND](function () {
        SKIPS_HOLES = false;
      }); // `Array.prototype.find` method
      // https://tc39.es/ecma262/#sec-array.prototype.find

      $({
        target: 'Array',
        proto: true,
        forced: SKIPS_HOLES || !USES_TO_LENGTH
      }, {
        find: function find(callbackfn
        /* , that = undefined */
        ) {
          return $find(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
        }
      }); // https://tc39.es/ecma262/#sec-array.prototype-@@unscopables

      addToUnscopables(FIND);
      /***/
    },

    /***/
    "6CJb":
    /*!*************************************************************************************************************!*\
      !*** ./node_modules/@angular-devkit/build-angular/node_modules/core-js/internals/array-method-is-strict.js ***!
      \*************************************************************************************************************/

    /*! no static exports found */

    /***/
    function CJb(module, exports, __webpack_require__) {
      "use strict";

      var fails = __webpack_require__(
      /*! ../internals/fails */
      "rG8t");

      module.exports = function (METHOD_NAME, argument) {
        var method = [][METHOD_NAME];
        return !!method && fails(function () {
          // eslint-disable-next-line no-useless-call,no-throw-literal
          method.call(null, argument || function () {
            throw 1;
          }, 1);
        });
      };
      /***/

    },

    /***/
    "6FMO":
    /*!********************************************************************!*\
      !*** ./node_modules/core-js/modules/_array-species-constructor.js ***!
      \********************************************************************/

    /*! no static exports found */

    /***/
    function FMO(module, exports, __webpack_require__) {
      var isObject = __webpack_require__(
      /*! ./_is-object */
      "0/R4");

      var isArray = __webpack_require__(
      /*! ./_is-array */
      "EWmC");

      var SPECIES = __webpack_require__(
      /*! ./_wks */
      "K0xU")('species');

      module.exports = function (original) {
        var C;

        if (isArray(original)) {
          C = original.constructor; // cross-realm fallback

          if (typeof C == 'function' && (C === Array || isArray(C.prototype))) C = undefined;

          if (isObject(C)) {
            C = C[SPECIES];
            if (C === null) C = undefined;
          }
        }

        return C === undefined ? Array : C;
      };
      /***/

    },

    /***/
    "6XUM":
    /*!************************************************************************************************!*\
      !*** ./node_modules/@angular-devkit/build-angular/node_modules/core-js/internals/is-object.js ***!
      \************************************************************************************************/

    /*! no static exports found */

    /***/
    function XUM(module, exports) {
      module.exports = function (it) {
        return typeof it === 'object' ? it !== null : typeof it === 'function';
      };
      /***/

    },

    /***/
    "6fhQ":
    /*!**************************************************************************************************!*\
      !*** ./node_modules/@angular-devkit/build-angular/node_modules/core-js/modules/es.array.sort.js ***!
      \**************************************************************************************************/

    /*! no static exports found */

    /***/
    function fhQ(module, exports, __webpack_require__) {
      "use strict";

      var $ = __webpack_require__(
      /*! ../internals/export */
      "wA6s");

      var aFunction = __webpack_require__(
      /*! ../internals/a-function */
      "Neub");

      var toObject = __webpack_require__(
      /*! ../internals/to-object */
      "VCQ8");

      var fails = __webpack_require__(
      /*! ../internals/fails */
      "rG8t");

      var arrayMethodIsStrict = __webpack_require__(
      /*! ../internals/array-method-is-strict */
      "6CJb");

      var test = [];
      var nativeSort = test.sort; // IE8-

      var FAILS_ON_UNDEFINED = fails(function () {
        test.sort(undefined);
      }); // V8 bug

      var FAILS_ON_NULL = fails(function () {
        test.sort(null);
      }); // Old WebKit

      var STRICT_METHOD = arrayMethodIsStrict('sort');
      var FORCED = FAILS_ON_UNDEFINED || !FAILS_ON_NULL || !STRICT_METHOD; // `Array.prototype.sort` method
      // https://tc39.es/ecma262/#sec-array.prototype.sort

      $({
        target: 'Array',
        proto: true,
        forced: FORCED
      }, {
        sort: function sort(comparefn) {
          return comparefn === undefined ? nativeSort.call(toObject(this)) : nativeSort.call(toObject(this), aFunction(comparefn));
        }
      });
      /***/
    },

    /***/
    "6lQQ":
    /*!******************************************************************************************************!*\
      !*** ./node_modules/@angular-devkit/build-angular/node_modules/core-js/modules/es.array.index-of.js ***!
      \******************************************************************************************************/

    /*! no static exports found */

    /***/
    function lQQ(module, exports, __webpack_require__) {
      "use strict";

      var $ = __webpack_require__(
      /*! ../internals/export */
      "wA6s");

      var $indexOf = __webpack_require__(
      /*! ../internals/array-includes */
      "OXtp").indexOf;

      var arrayMethodIsStrict = __webpack_require__(
      /*! ../internals/array-method-is-strict */
      "6CJb");

      var arrayMethodUsesToLength = __webpack_require__(
      /*! ../internals/array-method-uses-to-length */
      "w2hq");

      var nativeIndexOf = [].indexOf;
      var NEGATIVE_ZERO = !!nativeIndexOf && 1 / [1].indexOf(1, -0) < 0;
      var STRICT_METHOD = arrayMethodIsStrict('indexOf');
      var USES_TO_LENGTH = arrayMethodUsesToLength('indexOf', {
        ACCESSORS: true,
        1: 0
      }); // `Array.prototype.indexOf` method
      // https://tc39.es/ecma262/#sec-array.prototype.indexof

      $({
        target: 'Array',
        proto: true,
        forced: NEGATIVE_ZERO || !STRICT_METHOD || !USES_TO_LENGTH
      }, {
        indexOf: function indexOf(searchElement
        /* , fromIndex = 0 */
        ) {
          return NEGATIVE_ZERO // convert -0 to +0
          ? nativeIndexOf.apply(this, arguments) || 0 : $indexOf(this, searchElement, arguments.length > 1 ? arguments[1] : undefined);
        }
      });
      /***/
    },

    /***/
    "6oxo":
    /*!*************************************************************************************************!*\
      !*** ./node_modules/@angular-devkit/build-angular/node_modules/core-js/modules/es.math.log2.js ***!
      \*************************************************************************************************/

    /*! no static exports found */

    /***/
    function oxo(module, exports, __webpack_require__) {
      var $ = __webpack_require__(
      /*! ../internals/export */
      "wA6s");

      var log = Math.log;
      var LN2 = Math.LN2; // `Math.log2` method
      // https://tc39.es/ecma262/#sec-math.log2

      $({
        target: 'Math',
        stat: true
      }, {
        log2: function log2(x) {
          return log(x) / LN2;
        }
      });
      /***/
    },

    /***/
    "6q6p":
    /*!***************************************************************************************************!*\
      !*** ./node_modules/@angular-devkit/build-angular/node_modules/core-js/modules/es.array.slice.js ***!
      \***************************************************************************************************/

    /*! no static exports found */

    /***/
    function q6p(module, exports, __webpack_require__) {
      "use strict";

      var $ = __webpack_require__(
      /*! ../internals/export */
      "wA6s");

      var isObject = __webpack_require__(
      /*! ../internals/is-object */
      "6XUM");

      var isArray = __webpack_require__(
      /*! ../internals/is-array */
      "erNl");

      var toAbsoluteIndex = __webpack_require__(
      /*! ../internals/to-absolute-index */
      "7Oj1");

      var toLength = __webpack_require__(
      /*! ../internals/to-length */
      "xpLY");

      var toIndexedObject = __webpack_require__(
      /*! ../internals/to-indexed-object */
      "EMtK");

      var createProperty = __webpack_require__(
      /*! ../internals/create-property */
      "DYg9");

      var wellKnownSymbol = __webpack_require__(
      /*! ../internals/well-known-symbol */
      "m41k");

      var arrayMethodHasSpeciesSupport = __webpack_require__(
      /*! ../internals/array-method-has-species-support */
      "lRyB");

      var arrayMethodUsesToLength = __webpack_require__(
      /*! ../internals/array-method-uses-to-length */
      "w2hq");

      var HAS_SPECIES_SUPPORT = arrayMethodHasSpeciesSupport('slice');
      var USES_TO_LENGTH = arrayMethodUsesToLength('slice', {
        ACCESSORS: true,
        0: 0,
        1: 2
      });
      var SPECIES = wellKnownSymbol('species');
      var nativeSlice = [].slice;
      var max = Math.max; // `Array.prototype.slice` method
      // https://tc39.es/ecma262/#sec-array.prototype.slice
      // fallback for not array-like ES3 strings and DOM objects

      $({
        target: 'Array',
        proto: true,
        forced: !HAS_SPECIES_SUPPORT || !USES_TO_LENGTH
      }, {
        slice: function slice(start, end) {
          var O = toIndexedObject(this);
          var length = toLength(O.length);
          var k = toAbsoluteIndex(start, length);
          var fin = toAbsoluteIndex(end === undefined ? length : end, length); // inline `ArraySpeciesCreate` for usage native `Array#slice` where it's possible

          var Constructor, result, n;

          if (isArray(O)) {
            Constructor = O.constructor; // cross-realm fallback

            if (typeof Constructor == 'function' && (Constructor === Array || isArray(Constructor.prototype))) {
              Constructor = undefined;
            } else if (isObject(Constructor)) {
              Constructor = Constructor[SPECIES];
              if (Constructor === null) Constructor = undefined;
            }

            if (Constructor === Array || Constructor === undefined) {
              return nativeSlice.call(O, k, fin);
            }
          }

          result = new (Constructor === undefined ? Array : Constructor)(max(fin - k, 0));

          for (n = 0; k < fin; k++, n++) {
            if (k in O) createProperty(result, n, O[k]);
          }

          result.length = n;
          return result;
        }
      });
      /***/
    },

    /***/
    "6urC":
    /*!*****************************************************************************************************!*\
      !*** ./node_modules/@angular-devkit/build-angular/node_modules/core-js/internals/inspect-source.js ***!
      \*****************************************************************************************************/

    /*! no static exports found */

    /***/
    function urC(module, exports, __webpack_require__) {
      var store = __webpack_require__(
      /*! ../internals/shared-store */
      "KBkW");

      var functionToString = Function.toString; // this helper broken in `3.4.1-3.4.4`, so we can't use `shared` helper

      if (typeof store.inspectSource != 'function') {
        store.inspectSource = function (it) {
          return functionToString.call(it);
        };
      }

      module.exports = store.inspectSource;
      /***/
    },

    /***/
    "7/lX":
    /*!**************************************************************************************************************!*\
      !*** ./node_modules/@angular-devkit/build-angular/node_modules/core-js/internals/object-set-prototype-of.js ***!
      \**************************************************************************************************************/

    /*! no static exports found */

    /***/
    function lX(module, exports, __webpack_require__) {
      var anObject = __webpack_require__(
      /*! ../internals/an-object */
      "F26l");

      var aPossiblePrototype = __webpack_require__(
      /*! ../internals/a-possible-prototype */
      "JI1L"); // `Object.setPrototypeOf` method
      // https://tc39.es/ecma262/#sec-object.setprototypeof
      // Works with __proto__ only. Old v8 can't work with null proto objects.

      /* eslint-disable no-proto */


      module.exports = Object.setPrototypeOf || ('__proto__' in {} ? function () {
        var CORRECT_SETTER = false;
        var test = {};
        var setter;

        try {
          setter = Object.getOwnPropertyDescriptor(Object.prototype, '__proto__').set;
          setter.call(test, []);
          CORRECT_SETTER = test instanceof Array;
        } catch (error) {
          /* empty */
        }

        return function setPrototypeOf(O, proto) {
          anObject(O);
          aPossiblePrototype(proto);
          if (CORRECT_SETTER) setter.call(O, proto);else O.__proto__ = proto;
          return O;
        };
      }() : undefined);
      /***/
    },

    /***/
    "76gj":
    /*!***********************************************************************************************!*\
      !*** ./node_modules/@angular-devkit/build-angular/node_modules/core-js/internals/own-keys.js ***!
      \***********************************************************************************************/

    /*! no static exports found */

    /***/
    function gj(module, exports, __webpack_require__) {
      var getBuiltIn = __webpack_require__(
      /*! ../internals/get-built-in */
      "Ew/G");

      var getOwnPropertyNamesModule = __webpack_require__(
      /*! ../internals/object-get-own-property-names */
      "KkqW");

      var getOwnPropertySymbolsModule = __webpack_require__(
      /*! ../internals/object-get-own-property-symbols */
      "busr");

      var anObject = __webpack_require__(
      /*! ../internals/an-object */
      "F26l"); // all object keys, includes non-enumerable and symbols


      module.exports = getBuiltIn('Reflect', 'ownKeys') || function ownKeys(it) {
        var keys = getOwnPropertyNamesModule.f(anObject(it));
        var getOwnPropertySymbols = getOwnPropertySymbolsModule.f;
        return getOwnPropertySymbols ? keys.concat(getOwnPropertySymbols(it)) : keys;
      };
      /***/

    },

    /***/
    "7Dlh":
    /*!**********************************************************************!*\
      !*** ./node_modules/core-js/modules/es7.reflect.has-own-metadata.js ***!
      \**********************************************************************/

    /*! no static exports found */

    /***/
    function Dlh(module, exports, __webpack_require__) {
      var metadata = __webpack_require__(
      /*! ./_metadata */
      "N6cJ");

      var anObject = __webpack_require__(
      /*! ./_an-object */
      "y3w9");

      var ordinaryHasOwnMetadata = metadata.has;
      var toMetaKey = metadata.key;
      metadata.exp({
        hasOwnMetadata: function hasOwnMetadata(metadataKey, target
        /* , targetKey */
        ) {
          return ordinaryHasOwnMetadata(metadataKey, anObject(target), arguments.length < 3 ? undefined : toMetaKey(arguments[2]));
        }
      });
      /***/
    },

    /***/
    "7Oj1":
    /*!********************************************************************************************************!*\
      !*** ./node_modules/@angular-devkit/build-angular/node_modules/core-js/internals/to-absolute-index.js ***!
      \********************************************************************************************************/

    /*! no static exports found */

    /***/
    function Oj1(module, exports, __webpack_require__) {
      var toInteger = __webpack_require__(
      /*! ../internals/to-integer */
      "vDBE");

      var max = Math.max;
      var min = Math.min; // Helper for a popular repeating case of the spec:
      // Let integer be ? ToInteger(index).
      // If integer < 0, let result be max((length + integer), 0); else let result be min(integer, length).

      module.exports = function (index, length) {
        var integer = toInteger(index);
        return integer < 0 ? max(integer + length, 0) : min(integer, length);
      };
      /***/

    },

    /***/
    "7aOP":
    /*!******************************************************************************************************!*\
      !*** ./node_modules/@angular-devkit/build-angular/node_modules/core-js/internals/promise-resolve.js ***!
      \******************************************************************************************************/

    /*! no static exports found */

    /***/
    function aOP(module, exports, __webpack_require__) {
      var anObject = __webpack_require__(
      /*! ../internals/an-object */
      "F26l");

      var isObject = __webpack_require__(
      /*! ../internals/is-object */
      "6XUM");

      var newPromiseCapability = __webpack_require__(
      /*! ../internals/new-promise-capability */
      "oB0/");

      module.exports = function (C, x) {
        anObject(C);
        if (isObject(x) && x.constructor === C) return x;
        var promiseCapability = newPromiseCapability.f(C);
        var resolve = promiseCapability.resolve;
        resolve(x);
        return promiseCapability.promise;
      };
      /***/

    },

    /***/
    "7gGY":
    /*!*************************************************************************************************************************!*\
      !*** ./node_modules/@angular-devkit/build-angular/node_modules/core-js/internals/object-get-own-property-descriptor.js ***!
      \*************************************************************************************************************************/

    /*! no static exports found */

    /***/
    function gGY(module, exports, __webpack_require__) {
      var DESCRIPTORS = __webpack_require__(
      /*! ../internals/descriptors */
      "T69T");

      var propertyIsEnumerableModule = __webpack_require__(
      /*! ../internals/object-property-is-enumerable */
      "gn9T");

      var createPropertyDescriptor = __webpack_require__(
      /*! ../internals/create-property-descriptor */
      "uSMZ");

      var toIndexedObject = __webpack_require__(
      /*! ../internals/to-indexed-object */
      "EMtK");

      var toPrimitive = __webpack_require__(
      /*! ../internals/to-primitive */
      "LdO1");

      var has = __webpack_require__(
      /*! ../internals/has */
      "OG5q");

      var IE8_DOM_DEFINE = __webpack_require__(
      /*! ../internals/ie8-dom-define */
      "XdSI");

      var nativeGetOwnPropertyDescriptor = Object.getOwnPropertyDescriptor; // `Object.getOwnPropertyDescriptor` method
      // https://tc39.es/ecma262/#sec-object.getownpropertydescriptor

      exports.f = DESCRIPTORS ? nativeGetOwnPropertyDescriptor : function getOwnPropertyDescriptor(O, P) {
        O = toIndexedObject(O);
        P = toPrimitive(P, true);
        if (IE8_DOM_DEFINE) try {
          return nativeGetOwnPropertyDescriptor(O, P);
        } catch (error) {
          /* empty */
        }
        if (has(O, P)) return createPropertyDescriptor(!propertyIsEnumerableModule.f.call(O, P), O[P]);
      };
      /***/
    },

    /***/
    "8+YH":
    /*!*****************************************************************************************************!*\
      !*** ./node_modules/@angular-devkit/build-angular/node_modules/core-js/modules/es.symbol.search.js ***!
      \*****************************************************************************************************/

    /*! no static exports found */

    /***/
    function YH(module, exports, __webpack_require__) {
      var defineWellKnownSymbol = __webpack_require__(
      /*! ../internals/define-well-known-symbol */
      "94Vg"); // `Symbol.search` well-known symbol
      // https://tc39.es/ecma262/#sec-symbol.search


      defineWellKnownSymbol('search');
      /***/
    },

    /***/
    "815a":
    /*!**********************************************************************************************************!*\
      !*** ./node_modules/@angular-devkit/build-angular/node_modules/core-js/modules/es.symbol.unscopables.js ***!
      \**********************************************************************************************************/

    /*! no static exports found */

    /***/
    function a(module, exports, __webpack_require__) {
      var defineWellKnownSymbol = __webpack_require__(
      /*! ../internals/define-well-known-symbol */
      "94Vg"); // `Symbol.unscopables` well-known symbol
      // https://tc39.es/ecma262/#sec-symbol.unscopables


      defineWellKnownSymbol('unscopables');
      /***/
    },

    /***/
    "8CeQ":
    /*!**********************************************************************************************************!*\
      !*** ./node_modules/@angular-devkit/build-angular/node_modules/core-js/modules/es.json.to-string-tag.js ***!
      \**********************************************************************************************************/

    /*! no static exports found */

    /***/
    function CeQ(module, exports, __webpack_require__) {
      var global = __webpack_require__(
      /*! ../internals/global */
      "ocAm");

      var setToStringTag = __webpack_require__(
      /*! ../internals/set-to-string-tag */
      "shqn"); // JSON[@@toStringTag] property
      // https://tc39.es/ecma262/#sec-json-@@tostringtag


      setToStringTag(global.JSON, 'JSON', true);
      /***/
    },

    /***/
    "8aNu":
    /*!***************************************************************************************************!*\
      !*** ./node_modules/@angular-devkit/build-angular/node_modules/core-js/internals/redefine-all.js ***!
      \***************************************************************************************************/

    /*! no static exports found */

    /***/
    function aNu(module, exports, __webpack_require__) {
      var redefine = __webpack_require__(
      /*! ../internals/redefine */
      "2MGJ");

      module.exports = function (target, src, options) {
        for (var key in src) {
          redefine(target, key, src[key], options);
        }

        return target;
      };
      /***/

    },

    /***/
    "8iOR":
    /*!**************************************************************************************************!*\
      !*** ./node_modules/@angular-devkit/build-angular/node_modules/core-js/modules/es.math.atanh.js ***!
      \**************************************************************************************************/

    /*! no static exports found */

    /***/
    function iOR(module, exports, __webpack_require__) {
      var $ = __webpack_require__(
      /*! ../internals/export */
      "wA6s");

      var nativeAtanh = Math.atanh;
      var log = Math.log; // `Math.atanh` method
      // https://tc39.es/ecma262/#sec-math.atanh
      // Tor Browser bug: Math.atanh(-0) -> 0

      $({
        target: 'Math',
        stat: true,
        forced: !(nativeAtanh && 1 / nativeAtanh(-0) < 0)
      }, {
        atanh: function atanh(x) {
          return (x = +x) == 0 ? x : log((1 + x) / (1 - x)) / 2;
        }
      });
      /***/
    },

    /***/
    "8xKV":
    /*!*******************************************************************************************************!*\
      !*** ./node_modules/@angular-devkit/build-angular/node_modules/core-js/modules/es.number.to-fixed.js ***!
      \*******************************************************************************************************/

    /*! no static exports found */

    /***/
    function xKV(module, exports, __webpack_require__) {
      "use strict";

      var $ = __webpack_require__(
      /*! ../internals/export */
      "wA6s");

      var toInteger = __webpack_require__(
      /*! ../internals/to-integer */
      "vDBE");

      var thisNumberValue = __webpack_require__(
      /*! ../internals/this-number-value */
      "hH+7");

      var repeat = __webpack_require__(
      /*! ../internals/string-repeat */
      "EMWV");

      var fails = __webpack_require__(
      /*! ../internals/fails */
      "rG8t");

      var nativeToFixed = 1.0.toFixed;
      var floor = Math.floor;

      var pow = function pow(x, n, acc) {
        return n === 0 ? acc : n % 2 === 1 ? pow(x, n - 1, acc * x) : pow(x * x, n / 2, acc);
      };

      var log = function log(x) {
        var n = 0;
        var x2 = x;

        while (x2 >= 4096) {
          n += 12;
          x2 /= 4096;
        }

        while (x2 >= 2) {
          n += 1;
          x2 /= 2;
        }

        return n;
      };

      var FORCED = nativeToFixed && (0.00008.toFixed(3) !== '0.000' || 0.9.toFixed(0) !== '1' || 1.255.toFixed(2) !== '1.25' || 1000000000000000128.0.toFixed(0) !== '1000000000000000128') || !fails(function () {
        // V8 ~ Android 4.3-
        nativeToFixed.call({});
      }); // `Number.prototype.toFixed` method
      // https://tc39.es/ecma262/#sec-number.prototype.tofixed

      $({
        target: 'Number',
        proto: true,
        forced: FORCED
      }, {
        // eslint-disable-next-line max-statements
        toFixed: function toFixed(fractionDigits) {
          var number = thisNumberValue(this);
          var fractDigits = toInteger(fractionDigits);
          var data = [0, 0, 0, 0, 0, 0];
          var sign = '';
          var result = '0';
          var e, z, j, k;

          var multiply = function multiply(n, c) {
            var index = -1;
            var c2 = c;

            while (++index < 6) {
              c2 += n * data[index];
              data[index] = c2 % 1e7;
              c2 = floor(c2 / 1e7);
            }
          };

          var divide = function divide(n) {
            var index = 6;
            var c = 0;

            while (--index >= 0) {
              c += data[index];
              data[index] = floor(c / n);
              c = c % n * 1e7;
            }
          };

          var dataToString = function dataToString() {
            var index = 6;
            var s = '';

            while (--index >= 0) {
              if (s !== '' || index === 0 || data[index] !== 0) {
                var t = String(data[index]);
                s = s === '' ? t : s + repeat.call('0', 7 - t.length) + t;
              }
            }

            return s;
          };

          if (fractDigits < 0 || fractDigits > 20) throw RangeError('Incorrect fraction digits'); // eslint-disable-next-line no-self-compare

          if (number != number) return 'NaN';
          if (number <= -1e21 || number >= 1e21) return String(number);

          if (number < 0) {
            sign = '-';
            number = -number;
          }

          if (number > 1e-21) {
            e = log(number * pow(2, 69, 1)) - 69;
            z = e < 0 ? number * pow(2, -e, 1) : number / pow(2, e, 1);
            z *= 0x10000000000000;
            e = 52 - e;

            if (e > 0) {
              multiply(0, z);
              j = fractDigits;

              while (j >= 7) {
                multiply(1e7, 0);
                j -= 7;
              }

              multiply(pow(10, j, 1), 0);
              j = e - 1;

              while (j >= 23) {
                divide(1 << 23);
                j -= 23;
              }

              divide(1 << j);
              multiply(1, 1);
              divide(2);
              result = dataToString();
            } else {
              multiply(0, z);
              multiply(1 << -e, 0);
              result = dataToString() + repeat.call('0', fractDigits);
            }
          }

          if (fractDigits > 0) {
            k = result.length;
            result = sign + (k <= fractDigits ? '0.' + repeat.call('0', fractDigits - k) + result : result.slice(0, k - fractDigits) + '.' + result.slice(k - fractDigits));
          } else {
            result = sign + result;
          }

          return result;
        }
      });
      /***/
    },

    /***/
    "8ydS":
    /*!************************************************************************************************!*\
      !*** ./node_modules/@angular-devkit/build-angular/node_modules/core-js/modules/es.date.now.js ***!
      \************************************************************************************************/

    /*! no static exports found */

    /***/
    function ydS(module, exports, __webpack_require__) {
      var $ = __webpack_require__(
      /*! ../internals/export */
      "wA6s"); // `Date.now` method
      // https://tc39.es/ecma262/#sec-date.now


      $({
        target: 'Date',
        stat: true
      }, {
        now: function now() {
          return new Date().getTime();
        }
      });
      /***/
    },

    /***/
    "94Vg":
    /*!***************************************************************************************************************!*\
      !*** ./node_modules/@angular-devkit/build-angular/node_modules/core-js/internals/define-well-known-symbol.js ***!
      \***************************************************************************************************************/

    /*! no static exports found */

    /***/
    function Vg(module, exports, __webpack_require__) {
      var path = __webpack_require__(
      /*! ../internals/path */
      "E7aN");

      var has = __webpack_require__(
      /*! ../internals/has */
      "OG5q");

      var wrappedWellKnownSymbolModule = __webpack_require__(
      /*! ../internals/well-known-symbol-wrapped */
      "aGCb");

      var defineProperty = __webpack_require__(
      /*! ../internals/object-define-property */
      "/Ybd").f;

      module.exports = function (NAME) {
        var Symbol = path.Symbol || (path.Symbol = {});
        if (!has(Symbol, NAME)) defineProperty(Symbol, NAME, {
          value: wrappedWellKnownSymbolModule.f(NAME)
        });
      };
      /***/

    },

    /***/
    "9AAn":
    /*!*************************************************!*\
      !*** ./node_modules/core-js/modules/es6.map.js ***!
      \*************************************************/

    /*! no static exports found */

    /***/
    function AAn(module, exports, __webpack_require__) {
      "use strict";

      var strong = __webpack_require__(
      /*! ./_collection-strong */
      "wmvG");

      var validate = __webpack_require__(
      /*! ./_validate-collection */
      "s5qY");

      var MAP = 'Map'; // 23.1 Map Objects

      module.exports = __webpack_require__(
      /*! ./_collection */
      "4LiD")(MAP, function (get) {
        return function Map() {
          return get(this, arguments.length > 0 ? arguments[0] : undefined);
        };
      }, {
        // 23.1.3.6 Map.prototype.get(key)
        get: function get(key) {
          var entry = strong.getEntry(validate(this, MAP), key);
          return entry && entry.v;
        },
        // 23.1.3.9 Map.prototype.set(key, value)
        set: function set(key, value) {
          return strong.def(validate(this, MAP), key === 0 ? 0 : key, value);
        }
      }, strong, true);
      /***/
    },

    /***/
    "9gX7":
    /*!******************************************************!*\
      !*** ./node_modules/core-js/modules/_an-instance.js ***!
      \******************************************************/

    /*! no static exports found */

    /***/
    function gX7(module, exports) {
      module.exports = function (it, Constructor, name, forbiddenField) {
        if (!(it instanceof Constructor) || forbiddenField !== undefined && forbiddenField in it) {
          throw TypeError(name + ': incorrect invocation!');
        }

        return it;
      };
      /***/

    },

    /***/
    "9kNm":
    /*!***********************************************************************************************************!*\
      !*** ./node_modules/@angular-devkit/build-angular/node_modules/core-js/modules/es.symbol.to-primitive.js ***!
      \***********************************************************************************************************/

    /*! no static exports found */

    /***/
    function kNm(module, exports, __webpack_require__) {
      var defineWellKnownSymbol = __webpack_require__(
      /*! ../internals/define-well-known-symbol */
      "94Vg"); // `Symbol.toPrimitive` well-known symbol
      // https://tc39.es/ecma262/#sec-symbol.toprimitive


      defineWellKnownSymbol('toPrimitive');
      /***/
    },

    /***/
    "A1Hp":
    /*!*********************************************************************************************************!*\
      !*** ./node_modules/@angular-devkit/build-angular/node_modules/core-js/internals/add-to-unscopables.js ***!
      \*********************************************************************************************************/

    /*! no static exports found */

    /***/
    function A1Hp(module, exports, __webpack_require__) {
      var wellKnownSymbol = __webpack_require__(
      /*! ../internals/well-known-symbol */
      "m41k");

      var create = __webpack_require__(
      /*! ../internals/object-create */
      "2RDa");

      var definePropertyModule = __webpack_require__(
      /*! ../internals/object-define-property */
      "/Ybd");

      var UNSCOPABLES = wellKnownSymbol('unscopables');
      var ArrayPrototype = Array.prototype; // Array.prototype[@@unscopables]
      // https://tc39.es/ecma262/#sec-array.prototype-@@unscopables

      if (ArrayPrototype[UNSCOPABLES] == undefined) {
        definePropertyModule.f(ArrayPrototype, UNSCOPABLES, {
          configurable: true,
          value: create(null)
        });
      } // add a key to Array.prototype[@@unscopables]


      module.exports = function (key) {
        ArrayPrototype[UNSCOPABLES][key] = true;
      };
      /***/

    },

    /***/
    "A7hN":
    /*!***************************************************************************************************************!*\
      !*** ./node_modules/@angular-devkit/build-angular/node_modules/core-js/modules/es.object.get-prototype-of.js ***!
      \***************************************************************************************************************/

    /*! no static exports found */

    /***/
    function A7hN(module, exports, __webpack_require__) {
      var $ = __webpack_require__(
      /*! ../internals/export */
      "wA6s");

      var fails = __webpack_require__(
      /*! ../internals/fails */
      "rG8t");

      var toObject = __webpack_require__(
      /*! ../internals/to-object */
      "VCQ8");

      var nativeGetPrototypeOf = __webpack_require__(
      /*! ../internals/object-get-prototype-of */
      "wIVT");

      var CORRECT_PROTOTYPE_GETTER = __webpack_require__(
      /*! ../internals/correct-prototype-getter */
      "cwa4");

      var FAILS_ON_PRIMITIVES = fails(function () {
        nativeGetPrototypeOf(1);
      }); // `Object.getPrototypeOf` method
      // https://tc39.es/ecma262/#sec-object.getprototypeof

      $({
        target: 'Object',
        stat: true,
        forced: FAILS_ON_PRIMITIVES,
        sham: !CORRECT_PROTOTYPE_GETTER
      }, {
        getPrototypeOf: function getPrototypeOf(it) {
          return nativeGetPrototypeOf(toObject(it));
        }
      });
      /***/
    },

    /***/
    "Afnz":
    /*!******************************************************!*\
      !*** ./node_modules/core-js/modules/_iter-define.js ***!
      \******************************************************/

    /*! no static exports found */

    /***/
    function Afnz(module, exports, __webpack_require__) {
      "use strict";

      var LIBRARY = __webpack_require__(
      /*! ./_library */
      "LQAc");

      var $export = __webpack_require__(
      /*! ./_export */
      "XKFU");

      var redefine = __webpack_require__(
      /*! ./_redefine */
      "KroJ");

      var hide = __webpack_require__(
      /*! ./_hide */
      "Mukb");

      var Iterators = __webpack_require__(
      /*! ./_iterators */
      "hPIQ");

      var $iterCreate = __webpack_require__(
      /*! ./_iter-create */
      "QaDb");

      var setToStringTag = __webpack_require__(
      /*! ./_set-to-string-tag */
      "fyDq");

      var getPrototypeOf = __webpack_require__(
      /*! ./_object-gpo */
      "OP3Y");

      var ITERATOR = __webpack_require__(
      /*! ./_wks */
      "K0xU")('iterator');

      var BUGGY = !([].keys && 'next' in [].keys()); // Safari has buggy iterators w/o `next`

      var FF_ITERATOR = '@@iterator';
      var KEYS = 'keys';
      var VALUES = 'values';

      var returnThis = function returnThis() {
        return this;
      };

      module.exports = function (Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCED) {
        $iterCreate(Constructor, NAME, next);

        var getMethod = function getMethod(kind) {
          if (!BUGGY && kind in proto) return proto[kind];

          switch (kind) {
            case KEYS:
              return function keys() {
                return new Constructor(this, kind);
              };

            case VALUES:
              return function values() {
                return new Constructor(this, kind);
              };
          }

          return function entries() {
            return new Constructor(this, kind);
          };
        };

        var TAG = NAME + ' Iterator';
        var DEF_VALUES = DEFAULT == VALUES;
        var VALUES_BUG = false;
        var proto = Base.prototype;
        var $native = proto[ITERATOR] || proto[FF_ITERATOR] || DEFAULT && proto[DEFAULT];
        var $default = $native || getMethod(DEFAULT);
        var $entries = DEFAULT ? !DEF_VALUES ? $default : getMethod('entries') : undefined;
        var $anyNative = NAME == 'Array' ? proto.entries || $native : $native;
        var methods, key, IteratorPrototype; // Fix native

        if ($anyNative) {
          IteratorPrototype = getPrototypeOf($anyNative.call(new Base()));

          if (IteratorPrototype !== Object.prototype && IteratorPrototype.next) {
            // Set @@toStringTag to native iterators
            setToStringTag(IteratorPrototype, TAG, true); // fix for some old engines

            if (!LIBRARY && typeof IteratorPrototype[ITERATOR] != 'function') hide(IteratorPrototype, ITERATOR, returnThis);
          }
        } // fix Array#{values, @@iterator}.name in V8 / FF


        if (DEF_VALUES && $native && $native.name !== VALUES) {
          VALUES_BUG = true;

          $default = function values() {
            return $native.call(this);
          };
        } // Define iterator


        if ((!LIBRARY || FORCED) && (BUGGY || VALUES_BUG || !proto[ITERATOR])) {
          hide(proto, ITERATOR, $default);
        } // Plug for library


        Iterators[NAME] = $default;
        Iterators[TAG] = returnThis;

        if (DEFAULT) {
          methods = {
            values: DEF_VALUES ? $default : getMethod(VALUES),
            keys: IS_SET ? $default : getMethod(KEYS),
            entries: $entries
          };
          if (FORCED) for (key in methods) {
            if (!(key in proto)) redefine(proto, key, methods[key]);
          } else $export($export.P + $export.F * (BUGGY || VALUES_BUG), NAME, methods);
        }

        return methods;
      };
      /***/

    },

    /***/
    "Ay+M":
    /*!***************************************************************************************************!*\
      !*** ./node_modules/@angular-devkit/build-angular/node_modules/core-js/modules/es.parse-float.js ***!
      \***************************************************************************************************/

    /*! no static exports found */

    /***/
    function AyM(module, exports, __webpack_require__) {
      var $ = __webpack_require__(
      /*! ../internals/export */
      "wA6s");

      var parseFloatImplementation = __webpack_require__(
      /*! ../internals/number-parse-float */
      "vZCr"); // `parseFloat` method
      // https://tc39.es/ecma262/#sec-parsefloat-string


      $({
        global: true,
        forced: parseFloat != parseFloatImplementation
      }, {
        parseFloat: parseFloatImplementation
      });
      /***/
    },

    /***/
    "B43K":
    /*!*****************************************************************************************************!*\
      !*** ./node_modules/@angular-devkit/build-angular/node_modules/core-js/internals/engine-is-node.js ***!
      \*****************************************************************************************************/

    /*! no static exports found */

    /***/
    function B43K(module, exports, __webpack_require__) {
      var classof = __webpack_require__(
      /*! ../internals/classof-raw */
      "ezU2");

      var global = __webpack_require__(
      /*! ../internals/global */
      "ocAm");

      module.exports = classof(global.process) == 'process';
      /***/
    },

    /***/
    "BaTD":
    /*!*****************************************************************************************************!*\
      !*** ./node_modules/@angular-devkit/build-angular/node_modules/core-js/modules/es.string.repeat.js ***!
      \*****************************************************************************************************/

    /*! no static exports found */

    /***/
    function BaTD(module, exports, __webpack_require__) {
      var $ = __webpack_require__(
      /*! ../internals/export */
      "wA6s");

      var repeat = __webpack_require__(
      /*! ../internals/string-repeat */
      "EMWV"); // `String.prototype.repeat` method
      // https://tc39.es/ecma262/#sec-string.prototype.repeat


      $({
        target: 'String',
        proto: true
      }, {
        repeat: repeat
      });
      /***/
    },

    /***/
    "BcWx":
    /*!************************************************************************************************!*\
      !*** ./node_modules/@angular-devkit/build-angular/node_modules/core-js/modules/es.array.of.js ***!
      \************************************************************************************************/

    /*! no static exports found */

    /***/
    function BcWx(module, exports, __webpack_require__) {
      "use strict";

      var $ = __webpack_require__(
      /*! ../internals/export */
      "wA6s");

      var fails = __webpack_require__(
      /*! ../internals/fails */
      "rG8t");

      var createProperty = __webpack_require__(
      /*! ../internals/create-property */
      "DYg9");

      var ISNT_GENERIC = fails(function () {
        function F() {
          /* empty */
        }

        return !(Array.of.call(F) instanceof F);
      }); // `Array.of` method
      // https://tc39.es/ecma262/#sec-array.of
      // WebKit Array.of isn't generic

      $({
        target: 'Array',
        stat: true,
        forced: ISNT_GENERIC
      }, {
        of: function of()
        /* ...args */
        {
          var index = 0;
          var argumentsLength = arguments.length;
          var result = new (typeof this == 'function' ? this : Array)(argumentsLength);

          while (argumentsLength > index) {
            createProperty(result, index, arguments[index++]);
          }

          result.length = argumentsLength;
          return result;
        }
      });
      /***/
    },

    /***/
    "BnCb":
    /*!*************************************************************************************************!*\
      !*** ./node_modules/@angular-devkit/build-angular/node_modules/core-js/modules/es.math.sign.js ***!
      \*************************************************************************************************/

    /*! no static exports found */

    /***/
    function BnCb(module, exports, __webpack_require__) {
      var $ = __webpack_require__(
      /*! ../internals/export */
      "wA6s");

      var sign = __webpack_require__(
      /*! ../internals/math-sign */
      "n/2t"); // `Math.sign` method
      // https://tc39.es/ecma262/#sec-math.sign


      $({
        target: 'Math',
        stat: true
      }, {
        sign: sign
      });
      /***/
    },

    /***/
    "BqfV":
    /*!**********************************************************************!*\
      !*** ./node_modules/core-js/modules/es7.reflect.get-own-metadata.js ***!
      \**********************************************************************/

    /*! no static exports found */

    /***/
    function BqfV(module, exports, __webpack_require__) {
      var metadata = __webpack_require__(
      /*! ./_metadata */
      "N6cJ");

      var anObject = __webpack_require__(
      /*! ./_an-object */
      "y3w9");

      var ordinaryGetOwnMetadata = metadata.get;
      var toMetaKey = metadata.key;
      metadata.exp({
        getOwnMetadata: function getOwnMetadata(metadataKey, target
        /* , targetKey */
        ) {
          return ordinaryGetOwnMetadata(metadataKey, anObject(target), arguments.length < 3 ? undefined : toMetaKey(arguments[2]));
        }
      });
      /***/
    },

    /***/
    "COcp":
    /*!*********************************************************************************************************!*\
      !*** ./node_modules/@angular-devkit/build-angular/node_modules/core-js/modules/es.number.is-integer.js ***!
      \*********************************************************************************************************/

    /*! no static exports found */

    /***/
    function COcp(module, exports, __webpack_require__) {
      var $ = __webpack_require__(
      /*! ../internals/export */
      "wA6s");

      var isInteger = __webpack_require__(
      /*! ../internals/is-integer */
      "Nvxz"); // `Number.isInteger` method
      // https://tc39.es/ecma262/#sec-number.isinteger


      $({
        target: 'Number',
        stat: true
      }, {
        isInteger: isInteger
      });
      /***/
    },

    /***/
    "CW9j":
    /*!********************************************************************************************************!*\
      !*** ./node_modules/@angular-devkit/build-angular/node_modules/core-js/internals/date-to-primitive.js ***!
      \********************************************************************************************************/

    /*! no static exports found */

    /***/
    function CW9j(module, exports, __webpack_require__) {
      "use strict";

      var anObject = __webpack_require__(
      /*! ../internals/an-object */
      "F26l");

      var toPrimitive = __webpack_require__(
      /*! ../internals/to-primitive */
      "LdO1");

      module.exports = function (hint) {
        if (hint !== 'string' && hint !== 'number' && hint !== 'default') {
          throw TypeError('Incorrect hint');
        }

        return toPrimitive(anObject(this), hint !== 'number');
      };
      /***/

    },

    /***/
    "CkkT":
    /*!********************************************************!*\
      !*** ./node_modules/core-js/modules/_array-methods.js ***!
      \********************************************************/

    /*! no static exports found */

    /***/
    function CkkT(module, exports, __webpack_require__) {
      // 0 -> Array#forEach
      // 1 -> Array#map
      // 2 -> Array#filter
      // 3 -> Array#some
      // 4 -> Array#every
      // 5 -> Array#find
      // 6 -> Array#findIndex
      var ctx = __webpack_require__(
      /*! ./_ctx */
      "m0Pp");

      var IObject = __webpack_require__(
      /*! ./_iobject */
      "Ymqv");

      var toObject = __webpack_require__(
      /*! ./_to-object */
      "S/j/");

      var toLength = __webpack_require__(
      /*! ./_to-length */
      "ne8i");

      var asc = __webpack_require__(
      /*! ./_array-species-create */
      "zRwo");

      module.exports = function (TYPE, $create) {
        var IS_MAP = TYPE == 1;
        var IS_FILTER = TYPE == 2;
        var IS_SOME = TYPE == 3;
        var IS_EVERY = TYPE == 4;
        var IS_FIND_INDEX = TYPE == 6;
        var NO_HOLES = TYPE == 5 || IS_FIND_INDEX;
        var create = $create || asc;
        return function ($this, callbackfn, that) {
          var O = toObject($this);
          var self = IObject(O);
          var f = ctx(callbackfn, that, 3);
          var length = toLength(self.length);
          var index = 0;
          var result = IS_MAP ? create($this, length) : IS_FILTER ? create($this, 0) : undefined;
          var val, res;

          for (; length > index; index++) {
            if (NO_HOLES || index in self) {
              val = self[index];
              res = f(val, index, O);

              if (TYPE) {
                if (IS_MAP) result[index] = res; // map
                else if (res) switch (TYPE) {
                    case 3:
                      return true;
                    // some

                    case 5:
                      return val;
                    // find

                    case 6:
                      return index;
                    // findIndex

                    case 2:
                      result.push(val);
                    // filter
                  } else if (IS_EVERY) return false; // every
              }
            }
          }

          return IS_FIND_INDEX ? -1 : IS_SOME || IS_EVERY ? IS_EVERY : result;
        };
      };
      /***/

    },

    /***/
    "CwIO":
    /*!**************************************************************************************************!*\
      !*** ./node_modules/@angular-devkit/build-angular/node_modules/core-js/modules/es.math.hypot.js ***!
      \**************************************************************************************************/

    /*! no static exports found */

    /***/
    function CwIO(module, exports, __webpack_require__) {
      var $ = __webpack_require__(
      /*! ../internals/export */
      "wA6s");

      var $hypot = Math.hypot;
      var abs = Math.abs;
      var sqrt = Math.sqrt; // Chrome 77 bug
      // https://bugs.chromium.org/p/v8/issues/detail?id=9546

      var BUGGY = !!$hypot && $hypot(Infinity, NaN) !== Infinity; // `Math.hypot` method
      // https://tc39.es/ecma262/#sec-math.hypot

      $({
        target: 'Math',
        stat: true,
        forced: BUGGY
      }, {
        hypot: function hypot(value1, value2) {
          // eslint-disable-line no-unused-vars
          var sum = 0;
          var i = 0;
          var aLen = arguments.length;
          var larg = 0;
          var arg, div;

          while (i < aLen) {
            arg = abs(arguments[i++]);

            if (larg < arg) {
              div = larg / arg;
              sum = sum * div * div + 1;
              larg = arg;
            } else if (arg > 0) {
              div = arg / larg;
              sum += div * div;
            } else sum += arg;
          }

          return larg === Infinity ? Infinity : larg * sqrt(sum);
        }
      });
      /***/
    },

    /***/
    "D+RQ":
    /*!**********************************************************************************************************!*\
      !*** ./node_modules/@angular-devkit/build-angular/node_modules/core-js/modules/es.number.constructor.js ***!
      \**********************************************************************************************************/

    /*! no static exports found */

    /***/
    function DRQ(module, exports, __webpack_require__) {
      "use strict";

      var DESCRIPTORS = __webpack_require__(
      /*! ../internals/descriptors */
      "T69T");

      var global = __webpack_require__(
      /*! ../internals/global */
      "ocAm");

      var isForced = __webpack_require__(
      /*! ../internals/is-forced */
      "MkZA");

      var redefine = __webpack_require__(
      /*! ../internals/redefine */
      "2MGJ");

      var has = __webpack_require__(
      /*! ../internals/has */
      "OG5q");

      var classof = __webpack_require__(
      /*! ../internals/classof-raw */
      "ezU2");

      var inheritIfRequired = __webpack_require__(
      /*! ../internals/inherit-if-required */
      "K6ZX");

      var toPrimitive = __webpack_require__(
      /*! ../internals/to-primitive */
      "LdO1");

      var fails = __webpack_require__(
      /*! ../internals/fails */
      "rG8t");

      var create = __webpack_require__(
      /*! ../internals/object-create */
      "2RDa");

      var getOwnPropertyNames = __webpack_require__(
      /*! ../internals/object-get-own-property-names */
      "KkqW").f;

      var getOwnPropertyDescriptor = __webpack_require__(
      /*! ../internals/object-get-own-property-descriptor */
      "7gGY").f;

      var defineProperty = __webpack_require__(
      /*! ../internals/object-define-property */
      "/Ybd").f;

      var trim = __webpack_require__(
      /*! ../internals/string-trim */
      "jnLS").trim;

      var NUMBER = 'Number';
      var NativeNumber = global[NUMBER];
      var NumberPrototype = NativeNumber.prototype; // Opera ~12 has broken Object#toString

      var BROKEN_CLASSOF = classof(create(NumberPrototype)) == NUMBER; // `ToNumber` abstract operation
      // https://tc39.es/ecma262/#sec-tonumber

      var toNumber = function toNumber(argument) {
        var it = toPrimitive(argument, false);
        var first, third, radix, maxCode, digits, length, index, code;

        if (typeof it == 'string' && it.length > 2) {
          it = trim(it);
          first = it.charCodeAt(0);

          if (first === 43 || first === 45) {
            third = it.charCodeAt(2);
            if (third === 88 || third === 120) return NaN; // Number('+0x1') should be NaN, old V8 fix
          } else if (first === 48) {
            switch (it.charCodeAt(1)) {
              case 66:
              case 98:
                radix = 2;
                maxCode = 49;
                break;
              // fast equal of /^0b[01]+$/i

              case 79:
              case 111:
                radix = 8;
                maxCode = 55;
                break;
              // fast equal of /^0o[0-7]+$/i

              default:
                return +it;
            }

            digits = it.slice(2);
            length = digits.length;

            for (index = 0; index < length; index++) {
              code = digits.charCodeAt(index); // parseInt parses a string to a first unavailable symbol
              // but ToNumber should return NaN if a string contains unavailable symbols

              if (code < 48 || code > maxCode) return NaN;
            }

            return parseInt(digits, radix);
          }
        }

        return +it;
      }; // `Number` constructor
      // https://tc39.es/ecma262/#sec-number-constructor


      if (isForced(NUMBER, !NativeNumber(' 0o1') || !NativeNumber('0b1') || NativeNumber('+0x1'))) {
        var NumberWrapper = function Number(value) {
          var it = arguments.length < 1 ? 0 : value;
          var dummy = this;
          return dummy instanceof NumberWrapper // check on 1..constructor(foo) case
          && (BROKEN_CLASSOF ? fails(function () {
            NumberPrototype.valueOf.call(dummy);
          }) : classof(dummy) != NUMBER) ? inheritIfRequired(new NativeNumber(toNumber(it)), dummy, NumberWrapper) : toNumber(it);
        };

        for (var keys = DESCRIPTORS ? getOwnPropertyNames(NativeNumber) : ( // ES3:
        'MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,' + // ES2015 (in case, if modules with ES2015 Number statics required before):
        'EPSILON,isFinite,isInteger,isNaN,isSafeInteger,MAX_SAFE_INTEGER,' + 'MIN_SAFE_INTEGER,parseFloat,parseInt,isInteger,' + // ESNext
        'fromString,range').split(','), j = 0, key; keys.length > j; j++) {
          if (has(NativeNumber, key = keys[j]) && !has(NumberWrapper, key)) {
            defineProperty(NumberWrapper, key, getOwnPropertyDescriptor(NativeNumber, key));
          }
        }

        NumberWrapper.prototype = NumberPrototype;
        NumberPrototype.constructor = NumberWrapper;
        redefine(global, NUMBER, NumberWrapper);
      }
      /***/

    },

    /***/
    "D3bo":
    /*!********************************************************************************************************!*\
      !*** ./node_modules/@angular-devkit/build-angular/node_modules/core-js/internals/engine-v8-version.js ***!
      \********************************************************************************************************/

    /*! no static exports found */

    /***/
    function D3bo(module, exports, __webpack_require__) {
      var global = __webpack_require__(
      /*! ../internals/global */
      "ocAm");

      var userAgent = __webpack_require__(
      /*! ../internals/engine-user-agent */
      "T/Kj");

      var process = global.process;
      var versions = process && process.versions;
      var v8 = versions && versions.v8;
      var match, version;

      if (v8) {
        match = v8.split('.');
        version = match[0] + match[1];
      } else if (userAgent) {
        match = userAgent.match(/Edge\/(\d+)/);

        if (!match || match[1] >= 74) {
          match = userAgent.match(/Chrome\/(\d+)/);
          if (match) version = match[1];
        }
      }

      module.exports = version && +version;
      /***/
    },

    /***/
    "D94X":
    /*!*************************************************************************************************!*\
      !*** ./node_modules/@angular-devkit/build-angular/node_modules/core-js/modules/es.math.cbrt.js ***!
      \*************************************************************************************************/

    /*! no static exports found */

    /***/
    function D94X(module, exports, __webpack_require__) {
      var $ = __webpack_require__(
      /*! ../internals/export */
      "wA6s");

      var sign = __webpack_require__(
      /*! ../internals/math-sign */
      "n/2t");

      var abs = Math.abs;
      var pow = Math.pow; // `Math.cbrt` method
      // https://tc39.es/ecma262/#sec-math.cbrt

      $({
        target: 'Math',
        stat: true
      }, {
        cbrt: function cbrt(x) {
          return sign(x = +x) * pow(abs(x), 1 / 3);
        }
      });
      /***/
    },

    /***/
    "DAme":
    /*!******************************************************************************************************!*\
      !*** ./node_modules/@angular-devkit/build-angular/node_modules/core-js/internals/collection-weak.js ***!
      \******************************************************************************************************/

    /*! no static exports found */

    /***/
    function DAme(module, exports, __webpack_require__) {
      "use strict";

      var redefineAll = __webpack_require__(
      /*! ../internals/redefine-all */
      "8aNu");

      var getWeakData = __webpack_require__(
      /*! ../internals/internal-metadata */
      "M7Xk").getWeakData;

      var anObject = __webpack_require__(
      /*! ../internals/an-object */
      "F26l");

      var isObject = __webpack_require__(
      /*! ../internals/is-object */
      "6XUM");

      var anInstance = __webpack_require__(
      /*! ../internals/an-instance */
      "SM6+");

      var iterate = __webpack_require__(
      /*! ../internals/iterate */
      "Rn6E");

      var ArrayIterationModule = __webpack_require__(
      /*! ../internals/array-iteration */
      "kk6e");

      var $has = __webpack_require__(
      /*! ../internals/has */
      "OG5q");

      var InternalStateModule = __webpack_require__(
      /*! ../internals/internal-state */
      "XH/I");

      var setInternalState = InternalStateModule.set;
      var internalStateGetterFor = InternalStateModule.getterFor;
      var find = ArrayIterationModule.find;
      var findIndex = ArrayIterationModule.findIndex;
      var id = 0; // fallback for uncaught frozen keys

      var uncaughtFrozenStore = function uncaughtFrozenStore(store) {
        return store.frozen || (store.frozen = new UncaughtFrozenStore());
      };

      var UncaughtFrozenStore = function UncaughtFrozenStore() {
        this.entries = [];
      };

      var findUncaughtFrozen = function findUncaughtFrozen(store, key) {
        return find(store.entries, function (it) {
          return it[0] === key;
        });
      };

      UncaughtFrozenStore.prototype = {
        get: function get(key) {
          var entry = findUncaughtFrozen(this, key);
          if (entry) return entry[1];
        },
        has: function has(key) {
          return !!findUncaughtFrozen(this, key);
        },
        set: function set(key, value) {
          var entry = findUncaughtFrozen(this, key);
          if (entry) entry[1] = value;else this.entries.push([key, value]);
        },
        'delete': function _delete(key) {
          var index = findIndex(this.entries, function (it) {
            return it[0] === key;
          });
          if (~index) this.entries.splice(index, 1);
          return !!~index;
        }
      };
      module.exports = {
        getConstructor: function getConstructor(wrapper, CONSTRUCTOR_NAME, IS_MAP, ADDER) {
          var C = wrapper(function (that, iterable) {
            anInstance(that, C, CONSTRUCTOR_NAME);
            setInternalState(that, {
              type: CONSTRUCTOR_NAME,
              id: id++,
              frozen: undefined
            });
            if (iterable != undefined) iterate(iterable, that[ADDER], {
              that: that,
              AS_ENTRIES: IS_MAP
            });
          });
          var getInternalState = internalStateGetterFor(CONSTRUCTOR_NAME);

          var define = function define(that, key, value) {
            var state = getInternalState(that);
            var data = getWeakData(anObject(key), true);
            if (data === true) uncaughtFrozenStore(state).set(key, value);else data[state.id] = value;
            return that;
          };

          redefineAll(C.prototype, {
            // 23.3.3.2 WeakMap.prototype.delete(key)
            // 23.4.3.3 WeakSet.prototype.delete(value)
            'delete': function _delete(key) {
              var state = getInternalState(this);
              if (!isObject(key)) return false;
              var data = getWeakData(key);
              if (data === true) return uncaughtFrozenStore(state)['delete'](key);
              return data && $has(data, state.id) && delete data[state.id];
            },
            // 23.3.3.4 WeakMap.prototype.has(key)
            // 23.4.3.4 WeakSet.prototype.has(value)
            has: function has(key) {
              var state = getInternalState(this);
              if (!isObject(key)) return false;
              var data = getWeakData(key);
              if (data === true) return uncaughtFrozenStore(state).has(key);
              return data && $has(data, state.id);
            }
          });
          redefineAll(C.prototype, IS_MAP ? {
            // 23.3.3.3 WeakMap.prototype.get(key)
            get: function get(key) {
              var state = getInternalState(this);

              if (isObject(key)) {
                var data = getWeakData(key);
                if (data === true) return uncaughtFrozenStore(state).get(key);
                return data ? data[state.id] : undefined;
              }
            },
            // 23.3.3.5 WeakMap.prototype.set(key, value)
            set: function set(key, value) {
              return define(this, key, value);
            }
          } : {
            // 23.4.3.1 WeakSet.prototype.add(value)
            add: function add(value) {
              return define(this, value, true);
            }
          });
          return C;
        }
      };
      /***/
    },

    /***/
    "DGHb":
    /*!****************************************************************************************************!*\
      !*** ./node_modules/@angular-devkit/build-angular/node_modules/core-js/modules/es.date.to-json.js ***!
      \****************************************************************************************************/

    /*! no static exports found */

    /***/
    function DGHb(module, exports, __webpack_require__) {
      "use strict";

      var $ = __webpack_require__(
      /*! ../internals/export */
      "wA6s");

      var fails = __webpack_require__(
      /*! ../internals/fails */
      "rG8t");

      var toObject = __webpack_require__(
      /*! ../internals/to-object */
      "VCQ8");

      var toPrimitive = __webpack_require__(
      /*! ../internals/to-primitive */
      "LdO1");

      var FORCED = fails(function () {
        return new Date(NaN).toJSON() !== null || Date.prototype.toJSON.call({
          toISOString: function toISOString() {
            return 1;
          }
        }) !== 1;
      }); // `Date.prototype.toJSON` method
      // https://tc39.es/ecma262/#sec-date.prototype.tojson

      $({
        target: 'Date',
        proto: true,
        forced: FORCED
      }, {
        // eslint-disable-next-line no-unused-vars
        toJSON: function toJSON(key) {
          var O = toObject(this);
          var pv = toPrimitive(O);
          return typeof pv == 'number' && !isFinite(pv) ? null : O.toISOString();
        }
      });
      /***/
    },

    /***/
    "DVgA":
    /*!******************************************************!*\
      !*** ./node_modules/core-js/modules/_object-keys.js ***!
      \******************************************************/

    /*! no static exports found */

    /***/
    function DVgA(module, exports, __webpack_require__) {
      // 19.1.2.14 / 15.2.3.14 Object.keys(O)
      var $keys = __webpack_require__(
      /*! ./_object-keys-internal */
      "zhAb");

      var enumBugKeys = __webpack_require__(
      /*! ./_enum-bug-keys */
      "4R4u");

      module.exports = Object.keys || function keys(O) {
        return $keys(O, enumBugKeys);
      };
      /***/

    },

    /***/
    "DYg9":
    /*!******************************************************************************************************!*\
      !*** ./node_modules/@angular-devkit/build-angular/node_modules/core-js/internals/create-property.js ***!
      \******************************************************************************************************/

    /*! no static exports found */

    /***/
    function DYg9(module, exports, __webpack_require__) {
      "use strict";

      var toPrimitive = __webpack_require__(
      /*! ../internals/to-primitive */
      "LdO1");

      var definePropertyModule = __webpack_require__(
      /*! ../internals/object-define-property */
      "/Ybd");

      var createPropertyDescriptor = __webpack_require__(
      /*! ../internals/create-property-descriptor */
      "uSMZ");

      module.exports = function (object, key, value) {
        var propertyKey = toPrimitive(key);
        if (propertyKey in object) definePropertyModule.f(object, propertyKey, createPropertyDescriptor(0, value));else object[propertyKey] = value;
      };
      /***/

    },

    /***/
    "Djps":
    /*!**************************************************************************************************!*\
      !*** ./node_modules/@angular-devkit/build-angular/node_modules/core-js/modules/es.math.log1p.js ***!
      \**************************************************************************************************/

    /*! no static exports found */

    /***/
    function Djps(module, exports, __webpack_require__) {
      var $ = __webpack_require__(
      /*! ../internals/export */
      "wA6s");

      var log1p = __webpack_require__(
      /*! ../internals/math-log1p */
      "O3xq"); // `Math.log1p` method
      // https://tc39.es/ecma262/#sec-math.log1p


      $({
        target: 'Math',
        stat: true
      }, {
        log1p: log1p
      });
      /***/
    },

    /***/
    "DscF":
    /*!**************************************************************************************************!*\
      !*** ./node_modules/@angular-devkit/build-angular/node_modules/core-js/modules/es.array.fill.js ***!
      \**************************************************************************************************/

    /*! no static exports found */

    /***/
    function DscF(module, exports, __webpack_require__) {
      var $ = __webpack_require__(
      /*! ../internals/export */
      "wA6s");

      var fill = __webpack_require__(
      /*! ../internals/array-fill */
      "w4Hq");

      var addToUnscopables = __webpack_require__(
      /*! ../internals/add-to-unscopables */
      "A1Hp"); // `Array.prototype.fill` method
      // https://tc39.es/ecma262/#sec-array.prototype.fill


      $({
        target: 'Array',
        proto: true
      }, {
        fill: fill
      }); // https://tc39.es/ecma262/#sec-array.prototype-@@unscopables

      addToUnscopables('fill');
      /***/
    },

    /***/
    "E7aN":
    /*!*******************************************************************************************!*\
      !*** ./node_modules/@angular-devkit/build-angular/node_modules/core-js/internals/path.js ***!
      \*******************************************************************************************/

    /*! no static exports found */

    /***/
    function E7aN(module, exports, __webpack_require__) {
      var global = __webpack_require__(
      /*! ../internals/global */
      "ocAm");

      module.exports = global;
      /***/
    },

    /***/
    "E8Ab":
    /*!****************************************************************************************************!*\
      !*** ./node_modules/@angular-devkit/build-angular/node_modules/core-js/internals/function-bind.js ***!
      \****************************************************************************************************/

    /*! no static exports found */

    /***/
    function E8Ab(module, exports, __webpack_require__) {
      "use strict";

      var aFunction = __webpack_require__(
      /*! ../internals/a-function */
      "Neub");

      var isObject = __webpack_require__(
      /*! ../internals/is-object */
      "6XUM");

      var slice = [].slice;
      var factories = {};

      var construct = function construct(C, argsLength, args) {
        if (!(argsLength in factories)) {
          for (var list = [], i = 0; i < argsLength; i++) {
            list[i] = 'a[' + i + ']';
          } // eslint-disable-next-line no-new-func


          factories[argsLength] = Function('C,a', 'return new C(' + list.join(',') + ')');
        }

        return factories[argsLength](C, args);
      }; // `Function.prototype.bind` method implementation
      // https://tc39.es/ecma262/#sec-function.prototype.bind


      module.exports = Function.bind || function bind(that
      /* , ...args */
      ) {
        var fn = aFunction(this);
        var partArgs = slice.call(arguments, 1);

        var boundFunction = function bound()
        /* args... */
        {
          var args = partArgs.concat(slice.call(arguments));
          return this instanceof boundFunction ? construct(fn, args.length, args) : fn.apply(that, args);
        };

        if (isObject(fn.prototype)) boundFunction.prototype = fn.prototype;
        return boundFunction;
      };
      /***/

    },

    /***/
    "EIBq":
    /*!*********************************************************************************************************************!*\
      !*** ./node_modules/@angular-devkit/build-angular/node_modules/core-js/internals/check-correctness-of-iteration.js ***!
      \*********************************************************************************************************************/

    /*! no static exports found */

    /***/
    function EIBq(module, exports, __webpack_require__) {
      var wellKnownSymbol = __webpack_require__(
      /*! ../internals/well-known-symbol */
      "m41k");

      var ITERATOR = wellKnownSymbol('iterator');
      var SAFE_CLOSING = false;

      try {
        var called = 0;
        var iteratorWithReturn = {
          next: function next() {
            return {
              done: !!called++
            };
          },
          'return': function _return() {
            SAFE_CLOSING = true;
          }
        };

        iteratorWithReturn[ITERATOR] = function () {
          return this;
        }; // eslint-disable-next-line no-throw-literal


        Array.from(iteratorWithReturn, function () {
          throw 2;
        });
      } catch (error) {
        /* empty */
      }

      module.exports = function (exec, SKIP_CLOSING) {
        if (!SKIP_CLOSING && !SAFE_CLOSING) return false;
        var ITERATION_SUPPORT = false;

        try {
          var object = {};

          object[ITERATOR] = function () {
            return {
              next: function next() {
                return {
                  done: ITERATION_SUPPORT = true
                };
              }
            };
          };

          exec(object);
        } catch (error) {
          /* empty */
        }

        return ITERATION_SUPPORT;
      };
      /***/

    },

    /***/
    "EK0E":
    /*!******************************************************!*\
      !*** ./node_modules/core-js/modules/es6.weak-map.js ***!
      \******************************************************/

    /*! no static exports found */

    /***/
    function EK0E(module, exports, __webpack_require__) {
      "use strict";

      var global = __webpack_require__(
      /*! ./_global */
      "dyZX");

      var each = __webpack_require__(
      /*! ./_array-methods */
      "CkkT")(0);

      var redefine = __webpack_require__(
      /*! ./_redefine */
      "KroJ");

      var meta = __webpack_require__(
      /*! ./_meta */
      "Z6vF");

      var assign = __webpack_require__(
      /*! ./_object-assign */
      "czNK");

      var weak = __webpack_require__(
      /*! ./_collection-weak */
      "ZD67");

      var isObject = __webpack_require__(
      /*! ./_is-object */
      "0/R4");

      var validate = __webpack_require__(
      /*! ./_validate-collection */
      "s5qY");

      var NATIVE_WEAK_MAP = __webpack_require__(
      /*! ./_validate-collection */
      "s5qY");

      var IS_IE11 = !global.ActiveXObject && 'ActiveXObject' in global;
      var WEAK_MAP = 'WeakMap';
      var getWeak = meta.getWeak;
      var isExtensible = Object.isExtensible;
      var uncaughtFrozenStore = weak.ufstore;
      var InternalMap;

      var wrapper = function wrapper(get) {
        return function WeakMap() {
          return get(this, arguments.length > 0 ? arguments[0] : undefined);
        };
      };

      var methods = {
        // 23.3.3.3 WeakMap.prototype.get(key)
        get: function get(key) {
          if (isObject(key)) {
            var data = getWeak(key);
            if (data === true) return uncaughtFrozenStore(validate(this, WEAK_MAP)).get(key);
            return data ? data[this._i] : undefined;
          }
        },
        // 23.3.3.5 WeakMap.prototype.set(key, value)
        set: function set(key, value) {
          return weak.def(validate(this, WEAK_MAP), key, value);
        }
      }; // 23.3 WeakMap Objects

      var $WeakMap = module.exports = __webpack_require__(
      /*! ./_collection */
      "4LiD")(WEAK_MAP, wrapper, methods, weak, true, true); // IE11 WeakMap frozen keys fix


      if (NATIVE_WEAK_MAP && IS_IE11) {
        InternalMap = weak.getConstructor(wrapper, WEAK_MAP);
        assign(InternalMap.prototype, methods);
        meta.NEED = true;
        each(['delete', 'has', 'get', 'set'], function (key) {
          var proto = $WeakMap.prototype;
          var method = proto[key];
          redefine(proto, key, function (a, b) {
            // store frozen objects on internal weakmap shim
            if (isObject(a) && !isExtensible(a)) {
              if (!this._f) this._f = new InternalMap();

              var result = this._f[key](a, b);

              return key == 'set' ? this : result; // store all the rest on native weakmap
            }

            return method.call(this, a, b);
          });
        });
      }
      /***/

    },

    /***/
    "EMWV":
    /*!****************************************************************************************************!*\
      !*** ./node_modules/@angular-devkit/build-angular/node_modules/core-js/internals/string-repeat.js ***!
      \****************************************************************************************************/

    /*! no static exports found */

    /***/
    function EMWV(module, exports, __webpack_require__) {
      "use strict";

      var toInteger = __webpack_require__(
      /*! ../internals/to-integer */
      "vDBE");

      var requireObjectCoercible = __webpack_require__(
      /*! ../internals/require-object-coercible */
      "hmpk"); // `String.prototype.repeat` method implementation
      // https://tc39.es/ecma262/#sec-string.prototype.repeat


      module.exports = ''.repeat || function repeat(count) {
        var str = String(requireObjectCoercible(this));
        var result = '';
        var n = toInteger(count);
        if (n < 0 || n == Infinity) throw RangeError('Wrong number of repetitions');

        for (; n > 0; (n >>>= 1) && (str += str)) {
          if (n & 1) result += str;
        }

        return result;
      };
      /***/

    },

    /***/
    "EMtK":
    /*!********************************************************************************************************!*\
      !*** ./node_modules/@angular-devkit/build-angular/node_modules/core-js/internals/to-indexed-object.js ***!
      \********************************************************************************************************/

    /*! no static exports found */

    /***/
    function EMtK(module, exports, __webpack_require__) {
      // toObject with fallback for non-array-like ES3 strings
      var IndexedObject = __webpack_require__(
      /*! ../internals/indexed-object */
      "tUdv");

      var requireObjectCoercible = __webpack_require__(
      /*! ../internals/require-object-coercible */
      "hmpk");

      module.exports = function (it) {
        return IndexedObject(requireObjectCoercible(it));
      };
      /***/

    },

    /***/
    "EQZg":
    /*!*************************************************************************************************!*\
      !*** ./node_modules/@angular-devkit/build-angular/node_modules/core-js/internals/same-value.js ***!
      \*************************************************************************************************/

    /*! no static exports found */

    /***/
    function EQZg(module, exports) {
      // `SameValue` abstract operation
      // https://tc39.es/ecma262/#sec-samevalue
      module.exports = Object.is || function is(x, y) {
        // eslint-disable-next-line no-self-compare
        return x === y ? x !== 0 || 1 / x === 1 / y : x != x && y != y;
      };
      /***/

    },

    /***/
    "ERXZ":
    /*!****************************************************************************************************!*\
      !*** ./node_modules/@angular-devkit/build-angular/node_modules/core-js/modules/es.symbol.match.js ***!
      \****************************************************************************************************/

    /*! no static exports found */

    /***/
    function ERXZ(module, exports, __webpack_require__) {
      var defineWellKnownSymbol = __webpack_require__(
      /*! ../internals/define-well-known-symbol */
      "94Vg"); // `Symbol.match` well-known symbol
      // https://tc39.es/ecma262/#sec-symbol.match


      defineWellKnownSymbol('match');
      /***/
    },

    /***/
    "EWmC":
    /*!***************************************************!*\
      !*** ./node_modules/core-js/modules/_is-array.js ***!
      \***************************************************/

    /*! no static exports found */

    /***/
    function EWmC(module, exports, __webpack_require__) {
      // 7.2.2 IsArray(argument)
      var cof = __webpack_require__(
      /*! ./_cof */
      "LZWt");

      module.exports = Array.isArray || function isArray(arg) {
        return cof(arg) == 'Array';
      };
      /***/

    },

    /***/
    "EemH":
    /*!******************************************************!*\
      !*** ./node_modules/core-js/modules/_object-gopd.js ***!
      \******************************************************/

    /*! no static exports found */

    /***/
    function EemH(module, exports, __webpack_require__) {
      var pIE = __webpack_require__(
      /*! ./_object-pie */
      "UqcF");

      var createDesc = __webpack_require__(
      /*! ./_property-desc */
      "RjD/");

      var toIObject = __webpack_require__(
      /*! ./_to-iobject */
      "aCFj");

      var toPrimitive = __webpack_require__(
      /*! ./_to-primitive */
      "apmT");

      var has = __webpack_require__(
      /*! ./_has */
      "aagx");

      var IE8_DOM_DEFINE = __webpack_require__(
      /*! ./_ie8-dom-define */
      "xpql");

      var gOPD = Object.getOwnPropertyDescriptor;
      exports.f = __webpack_require__(
      /*! ./_descriptors */
      "nh4g") ? gOPD : function getOwnPropertyDescriptor(O, P) {
        O = toIObject(O);
        P = toPrimitive(P, true);
        if (IE8_DOM_DEFINE) try {
          return gOPD(O, P);
        } catch (e) {
          /* empty */
        }
        if (has(O, P)) return createDesc(!pIE.f.call(O, P), O[P]);
      };
      /***/
    },

    /***/
    "EntM":
    /*!****************************************************************************************************************!*\
      !*** ./node_modules/@angular-devkit/build-angular/node_modules/core-js/modules/es.object.define-properties.js ***!
      \****************************************************************************************************************/

    /*! no static exports found */

    /***/
    function EntM(module, exports, __webpack_require__) {
      var $ = __webpack_require__(
      /*! ../internals/export */
      "wA6s");

      var DESCRIPTORS = __webpack_require__(
      /*! ../internals/descriptors */
      "T69T");

      var defineProperties = __webpack_require__(
      /*! ../internals/object-define-properties */
      "5y2d"); // `Object.defineProperties` method
      // https://tc39.es/ecma262/#sec-object.defineproperties


      $({
        target: 'Object',
        stat: true,
        forced: !DESCRIPTORS,
        sham: !DESCRIPTORS
      }, {
        defineProperties: defineProperties
      });
      /***/
    },

    /***/
    "Ew/G":
    /*!***************************************************************************************************!*\
      !*** ./node_modules/@angular-devkit/build-angular/node_modules/core-js/internals/get-built-in.js ***!
      \***************************************************************************************************/

    /*! no static exports found */

    /***/
    function EwG(module, exports, __webpack_require__) {
      var path = __webpack_require__(
      /*! ../internals/path */
      "E7aN");

      var global = __webpack_require__(
      /*! ../internals/global */
      "ocAm");

      var aFunction = function aFunction(variable) {
        return typeof variable == 'function' ? variable : undefined;
      };

      module.exports = function (namespace, method) {
        return arguments.length < 2 ? aFunction(path[namespace]) || aFunction(global[namespace]) : path[namespace] && path[namespace][method] || global[namespace] && global[namespace][method];
      };
      /***/

    },

    /***/
    "F/TS":
    /*!**********************************************************************************************************!*\
      !*** ./node_modules/@angular-devkit/build-angular/node_modules/core-js/internals/get-iterator-method.js ***!
      \**********************************************************************************************************/

    /*! no static exports found */

    /***/
    function FTS(module, exports, __webpack_require__) {
      var classof = __webpack_require__(
      /*! ../internals/classof */
      "mN5b");

      var Iterators = __webpack_require__(
      /*! ../internals/iterators */
      "pz+c");

      var wellKnownSymbol = __webpack_require__(
      /*! ../internals/well-known-symbol */
      "m41k");

      var ITERATOR = wellKnownSymbol('iterator');

      module.exports = function (it) {
        if (it != undefined) return it[ITERATOR] || it['@@iterator'] || Iterators[classof(it)];
      };
      /***/

    },

    /***/
    "F26l":
    /*!************************************************************************************************!*\
      !*** ./node_modules/@angular-devkit/build-angular/node_modules/core-js/internals/an-object.js ***!
      \************************************************************************************************/

    /*! no static exports found */

    /***/
    function F26l(module, exports, __webpack_require__) {
      var isObject = __webpack_require__(
      /*! ../internals/is-object */
      "6XUM");

      module.exports = function (it) {
        if (!isObject(it)) {
          throw TypeError(String(it) + ' is not an object');
        }

        return it;
      };
      /***/

    },

    /***/
    "F4rZ":
    /*!****************************************************************************************************!*\
      !*** ./node_modules/@angular-devkit/build-angular/node_modules/core-js/modules/es.array.concat.js ***!
      \****************************************************************************************************/

    /*! no static exports found */

    /***/
    function F4rZ(module, exports, __webpack_require__) {
      "use strict";

      var $ = __webpack_require__(
      /*! ../internals/export */
      "wA6s");

      var fails = __webpack_require__(
      /*! ../internals/fails */
      "rG8t");

      var isArray = __webpack_require__(
      /*! ../internals/is-array */
      "erNl");

      var isObject = __webpack_require__(
      /*! ../internals/is-object */
      "6XUM");

      var toObject = __webpack_require__(
      /*! ../internals/to-object */
      "VCQ8");

      var toLength = __webpack_require__(
      /*! ../internals/to-length */
      "xpLY");

      var createProperty = __webpack_require__(
      /*! ../internals/create-property */
      "DYg9");

      var arraySpeciesCreate = __webpack_require__(
      /*! ../internals/array-species-create */
      "JafA");

      var arrayMethodHasSpeciesSupport = __webpack_require__(
      /*! ../internals/array-method-has-species-support */
      "lRyB");

      var wellKnownSymbol = __webpack_require__(
      /*! ../internals/well-known-symbol */
      "m41k");

      var V8_VERSION = __webpack_require__(
      /*! ../internals/engine-v8-version */
      "D3bo");

      var IS_CONCAT_SPREADABLE = wellKnownSymbol('isConcatSpreadable');
      var MAX_SAFE_INTEGER = 0x1FFFFFFFFFFFFF;
      var MAXIMUM_ALLOWED_INDEX_EXCEEDED = 'Maximum allowed index exceeded'; // We can't use this feature detection in V8 since it causes
      // deoptimization and serious performance degradation
      // https://github.com/zloirock/core-js/issues/679

      var IS_CONCAT_SPREADABLE_SUPPORT = V8_VERSION >= 51 || !fails(function () {
        var array = [];
        array[IS_CONCAT_SPREADABLE] = false;
        return array.concat()[0] !== array;
      });
      var SPECIES_SUPPORT = arrayMethodHasSpeciesSupport('concat');

      var isConcatSpreadable = function isConcatSpreadable(O) {
        if (!isObject(O)) return false;
        var spreadable = O[IS_CONCAT_SPREADABLE];
        return spreadable !== undefined ? !!spreadable : isArray(O);
      };

      var FORCED = !IS_CONCAT_SPREADABLE_SUPPORT || !SPECIES_SUPPORT; // `Array.prototype.concat` method
      // https://tc39.es/ecma262/#sec-array.prototype.concat
      // with adding support of @@isConcatSpreadable and @@species

      $({
        target: 'Array',
        proto: true,
        forced: FORCED
      }, {
        concat: function concat(arg) {
          // eslint-disable-line no-unused-vars
          var O = toObject(this);
          var A = arraySpeciesCreate(O, 0);
          var n = 0;
          var i, k, length, len, E;

          for (i = -1, length = arguments.length; i < length; i++) {
            E = i === -1 ? O : arguments[i];

            if (isConcatSpreadable(E)) {
              len = toLength(E.length);
              if (n + len > MAX_SAFE_INTEGER) throw TypeError(MAXIMUM_ALLOWED_INDEX_EXCEEDED);

              for (k = 0; k < len; k++, n++) {
                if (k in E) createProperty(A, n, E[k]);
              }
            } else {
              if (n >= MAX_SAFE_INTEGER) throw TypeError(MAXIMUM_ALLOWED_INDEX_EXCEEDED);
              createProperty(A, n++, E);
            }
          }

          A.length = n;
          return A;
        }
      });
      /***/
    },

    /***/
    "FJW5":
    /*!*****************************************************!*\
      !*** ./node_modules/core-js/modules/_object-dps.js ***!
      \*****************************************************/

    /*! no static exports found */

    /***/
    function FJW5(module, exports, __webpack_require__) {
      var dP = __webpack_require__(
      /*! ./_object-dp */
      "hswa");

      var anObject = __webpack_require__(
      /*! ./_an-object */
      "y3w9");

      var getKeys = __webpack_require__(
      /*! ./_object-keys */
      "DVgA");

      module.exports = __webpack_require__(
      /*! ./_descriptors */
      "nh4g") ? Object.defineProperties : function defineProperties(O, Properties) {
        anObject(O);
        var keys = getKeys(Properties);
        var length = keys.length;
        var i = 0;
        var P;

        while (length > i) {
          dP.f(O, P = keys[i++], Properties[P]);
        }

        return O;
      };
      /***/
    },

    /***/
    "FU1i":
    /*!*************************************************************************************************!*\
      !*** ./node_modules/@angular-devkit/build-angular/node_modules/core-js/modules/es.array.map.js ***!
      \*************************************************************************************************/

    /*! no static exports found */

    /***/
    function FU1i(module, exports, __webpack_require__) {
      "use strict";

      var $ = __webpack_require__(
      /*! ../internals/export */
      "wA6s");

      var $map = __webpack_require__(
      /*! ../internals/array-iteration */
      "kk6e").map;

      var arrayMethodHasSpeciesSupport = __webpack_require__(
      /*! ../internals/array-method-has-species-support */
      "lRyB");

      var arrayMethodUsesToLength = __webpack_require__(
      /*! ../internals/array-method-uses-to-length */
      "w2hq");

      var HAS_SPECIES_SUPPORT = arrayMethodHasSpeciesSupport('map'); // FF49- issue

      var USES_TO_LENGTH = arrayMethodUsesToLength('map'); // `Array.prototype.map` method
      // https://tc39.es/ecma262/#sec-array.prototype.map
      // with adding support of @@species

      $({
        target: 'Array',
        proto: true,
        forced: !HAS_SPECIES_SUPPORT || !USES_TO_LENGTH
      }, {
        map: function map(callbackfn
        /* , thisArg */
        ) {
          return $map(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
        }
      });
      /***/
    },

    /***/
    "FZcq":
    /*!*********************************************!*\
      !*** ./node_modules/core-js/es7/reflect.js ***!
      \*********************************************/

    /*! no static exports found */

    /***/
    function FZcq(module, exports, __webpack_require__) {
      __webpack_require__(
      /*! ../modules/es7.reflect.define-metadata */
      "49D4");

      __webpack_require__(
      /*! ../modules/es7.reflect.delete-metadata */
      "zq+C");

      __webpack_require__(
      /*! ../modules/es7.reflect.get-metadata */
      "45Tv");

      __webpack_require__(
      /*! ../modules/es7.reflect.get-metadata-keys */
      "uAtd");

      __webpack_require__(
      /*! ../modules/es7.reflect.get-own-metadata */
      "BqfV");

      __webpack_require__(
      /*! ../modules/es7.reflect.get-own-metadata-keys */
      "fN/3");

      __webpack_require__(
      /*! ../modules/es7.reflect.has-metadata */
      "iW+S");

      __webpack_require__(
      /*! ../modules/es7.reflect.has-own-metadata */
      "7Dlh");

      __webpack_require__(
      /*! ../modules/es7.reflect.metadata */
      "Opxb");

      module.exports = __webpack_require__(
      /*! ../modules/_core */
      "g3g5").Reflect;
      /***/
    },

    /***/
    "FeI/":
    /*!***************************************************************************************************!*\
      !*** ./node_modules/@angular-devkit/build-angular/node_modules/core-js/modules/es.array.every.js ***!
      \***************************************************************************************************/

    /*! no static exports found */

    /***/
    function FeI(module, exports, __webpack_require__) {
      "use strict";

      var $ = __webpack_require__(
      /*! ../internals/export */
      "wA6s");

      var $every = __webpack_require__(
      /*! ../internals/array-iteration */
      "kk6e").every;

      var arrayMethodIsStrict = __webpack_require__(
      /*! ../internals/array-method-is-strict */
      "6CJb");

      var arrayMethodUsesToLength = __webpack_require__(
      /*! ../internals/array-method-uses-to-length */
      "w2hq");

      var STRICT_METHOD = arrayMethodIsStrict('every');
      var USES_TO_LENGTH = arrayMethodUsesToLength('every'); // `Array.prototype.every` method
      // https://tc39.es/ecma262/#sec-array.prototype.every

      $({
        target: 'Array',
        proto: true,
        forced: !STRICT_METHOD || !USES_TO_LENGTH
      }, {
        every: function every(callbackfn
        /* , thisArg */
        ) {
          return $every(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
        }
      });
      /***/
    },

    /***/
    "Fqhe":
    /*!*************************************************************************************************!*\
      !*** ./node_modules/@angular-devkit/build-angular/node_modules/core-js/internals/set-global.js ***!
      \*************************************************************************************************/

    /*! no static exports found */

    /***/
    function Fqhe(module, exports, __webpack_require__) {
      var global = __webpack_require__(
      /*! ../internals/global */
      "ocAm");

      var createNonEnumerableProperty = __webpack_require__(
      /*! ../internals/create-non-enumerable-property */
      "aJMj");

      module.exports = function (key, value) {
        try {
          createNonEnumerableProperty(global, key, value);
        } catch (error) {
          global[key] = value;
        }

        return value;
      };
      /***/

    },

    /***/
    "G1Vw":
    /*!*****************************************************************************************************!*\
      !*** ./node_modules/@angular-devkit/build-angular/node_modules/core-js/internals/iterators-core.js ***!
      \*****************************************************************************************************/

    /*! no static exports found */

    /***/
    function G1Vw(module, exports, __webpack_require__) {
      "use strict";

      var getPrototypeOf = __webpack_require__(
      /*! ../internals/object-get-prototype-of */
      "wIVT");

      var createNonEnumerableProperty = __webpack_require__(
      /*! ../internals/create-non-enumerable-property */
      "aJMj");

      var has = __webpack_require__(
      /*! ../internals/has */
      "OG5q");

      var wellKnownSymbol = __webpack_require__(
      /*! ../internals/well-known-symbol */
      "m41k");

      var IS_PURE = __webpack_require__(
      /*! ../internals/is-pure */
      "g9hI");

      var ITERATOR = wellKnownSymbol('iterator');
      var BUGGY_SAFARI_ITERATORS = false;

      var returnThis = function returnThis() {
        return this;
      }; // `%IteratorPrototype%` object
      // https://tc39.es/ecma262/#sec-%iteratorprototype%-object


      var IteratorPrototype, PrototypeOfArrayIteratorPrototype, arrayIterator;

      if ([].keys) {
        arrayIterator = [].keys(); // Safari 8 has buggy iterators w/o `next`

        if (!('next' in arrayIterator)) BUGGY_SAFARI_ITERATORS = true;else {
          PrototypeOfArrayIteratorPrototype = getPrototypeOf(getPrototypeOf(arrayIterator));
          if (PrototypeOfArrayIteratorPrototype !== Object.prototype) IteratorPrototype = PrototypeOfArrayIteratorPrototype;
        }
      }

      if (IteratorPrototype == undefined) IteratorPrototype = {}; // 25.1.2.1.1 %IteratorPrototype%[@@iterator]()

      if (!IS_PURE && !has(IteratorPrototype, ITERATOR)) {
        createNonEnumerableProperty(IteratorPrototype, ITERATOR, returnThis);
      }

      module.exports = {
        IteratorPrototype: IteratorPrototype,
        BUGGY_SAFARI_ITERATORS: BUGGY_SAFARI_ITERATORS
      };
      /***/
    },

    /***/
    "G7bs":
    /*!*******************************************************************************************************!*\
      !*** ./node_modules/@angular-devkit/build-angular/node_modules/core-js/internals/string-multibyte.js ***!
      \*******************************************************************************************************/

    /*! no static exports found */

    /***/
    function G7bs(module, exports, __webpack_require__) {
      var toInteger = __webpack_require__(
      /*! ../internals/to-integer */
      "vDBE");

      var requireObjectCoercible = __webpack_require__(
      /*! ../internals/require-object-coercible */
      "hmpk"); // `String.prototype.{ codePointAt, at }` methods implementation


      var createMethod = function createMethod(CONVERT_TO_STRING) {
        return function ($this, pos) {
          var S = String(requireObjectCoercible($this));
          var position = toInteger(pos);
          var size = S.length;
          var first, second;
          if (position < 0 || position >= size) return CONVERT_TO_STRING ? '' : undefined;
          first = S.charCodeAt(position);
          return first < 0xD800 || first > 0xDBFF || position + 1 === size || (second = S.charCodeAt(position + 1)) < 0xDC00 || second > 0xDFFF ? CONVERT_TO_STRING ? S.charAt(position) : first : CONVERT_TO_STRING ? S.slice(position, position + 2) : (first - 0xD800 << 10) + (second - 0xDC00) + 0x10000;
        };
      };

      module.exports = {
        // `String.prototype.codePointAt` method
        // https://tc39.es/ecma262/#sec-string.prototype.codepointat
        codeAt: createMethod(false),
        // `String.prototype.at` method
        // https://github.com/mathiasbynens/String.prototype.at
        charAt: createMethod(true)
      };
      /***/
    },

    /***/
    "H6hf":
    /*!****************************************************!*\
      !*** ./node_modules/core-js/modules/_iter-call.js ***!
      \****************************************************/

    /*! no static exports found */

    /***/
    function H6hf(module, exports, __webpack_require__) {
      // call something on iterator step with safe closing on error
      var anObject = __webpack_require__(
      /*! ./_an-object */
      "y3w9");

      module.exports = function (iterator, fn, value, entries) {
        try {
          return entries ? fn(anObject(value)[0], value[1]) : fn(value); // 7.4.6 IteratorClose(iterator, completion)
        } catch (e) {
          var ret = iterator['return'];
          if (ret !== undefined) anObject(ret.call(iterator));
          throw e;
        }
      };
      /***/

    },

    /***/
    "HSQg":
    /*!*************************************************************************************************************************!*\
      !*** ./node_modules/@angular-devkit/build-angular/node_modules/core-js/internals/fix-regexp-well-known-symbol-logic.js ***!
      \*************************************************************************************************************************/

    /*! no static exports found */

    /***/
    function HSQg(module, exports, __webpack_require__) {
      "use strict"; // TODO: Remove from `core-js@4` since it's moved to entry points

      __webpack_require__(
      /*! ../modules/es.regexp.exec */
      "SC6u");

      var redefine = __webpack_require__(
      /*! ../internals/redefine */
      "2MGJ");

      var fails = __webpack_require__(
      /*! ../internals/fails */
      "rG8t");

      var wellKnownSymbol = __webpack_require__(
      /*! ../internals/well-known-symbol */
      "m41k");

      var regexpExec = __webpack_require__(
      /*! ../internals/regexp-exec */
      "qjkP");

      var createNonEnumerableProperty = __webpack_require__(
      /*! ../internals/create-non-enumerable-property */
      "aJMj");

      var SPECIES = wellKnownSymbol('species');
      var REPLACE_SUPPORTS_NAMED_GROUPS = !fails(function () {
        // #replace needs built-in support for named groups.
        // #match works fine because it just return the exec results, even if it has
        // a "grops" property.
        var re = /./;

        re.exec = function () {
          var result = [];
          result.groups = {
            a: '7'
          };
          return result;
        };

        return ''.replace(re, '$<a>') !== '7';
      }); // IE <= 11 replaces $0 with the whole match, as if it was $&
      // https://stackoverflow.com/questions/6024666/getting-ie-to-replace-a-regex-with-the-literal-string-0

      var REPLACE_KEEPS_$0 = function () {
        return 'a'.replace(/./, '$0') === '$0';
      }();

      var REPLACE = wellKnownSymbol('replace'); // Safari <= 13.0.3(?) substitutes nth capture where n>m with an empty string

      var REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE = function () {
        if (/./[REPLACE]) {
          return /./[REPLACE]('a', '$0') === '';
        }

        return false;
      }(); // Chrome 51 has a buggy "split" implementation when RegExp#exec !== nativeExec
      // Weex JS has frozen built-in prototypes, so use try / catch wrapper


      var SPLIT_WORKS_WITH_OVERWRITTEN_EXEC = !fails(function () {
        var re = /(?:)/;
        var originalExec = re.exec;

        re.exec = function () {
          return originalExec.apply(this, arguments);
        };

        var result = 'ab'.split(re);
        return result.length !== 2 || result[0] !== 'a' || result[1] !== 'b';
      });

      module.exports = function (KEY, length, exec, sham) {
        var SYMBOL = wellKnownSymbol(KEY);
        var DELEGATES_TO_SYMBOL = !fails(function () {
          // String methods call symbol-named RegEp methods
          var O = {};

          O[SYMBOL] = function () {
            return 7;
          };

          return ''[KEY](O) != 7;
        });
        var DELEGATES_TO_EXEC = DELEGATES_TO_SYMBOL && !fails(function () {
          // Symbol-named RegExp methods call .exec
          var execCalled = false;
          var re = /a/;

          if (KEY === 'split') {
            // We can't use real regex here since it causes deoptimization
            // and serious performance degradation in V8
            // https://github.com/zloirock/core-js/issues/306
            re = {}; // RegExp[@@split] doesn't call the regex's exec method, but first creates
            // a new one. We need to return the patched regex when creating the new one.

            re.constructor = {};

            re.constructor[SPECIES] = function () {
              return re;
            };

            re.flags = '';
            re[SYMBOL] = /./[SYMBOL];
          }

          re.exec = function () {
            execCalled = true;
            return null;
          };

          re[SYMBOL]('');
          return !execCalled;
        });

        if (!DELEGATES_TO_SYMBOL || !DELEGATES_TO_EXEC || KEY === 'replace' && !(REPLACE_SUPPORTS_NAMED_GROUPS && REPLACE_KEEPS_$0 && !REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE) || KEY === 'split' && !SPLIT_WORKS_WITH_OVERWRITTEN_EXEC) {
          var nativeRegExpMethod = /./[SYMBOL];
          var methods = exec(SYMBOL, ''[KEY], function (nativeMethod, regexp, str, arg2, forceStringMethod) {
            if (regexp.exec === regexpExec) {
              if (DELEGATES_TO_SYMBOL && !forceStringMethod) {
                // The native String method already delegates to @@method (this
                // polyfilled function), leasing to infinite recursion.
                // We avoid it by directly calling the native @@method method.
                return {
                  done: true,
                  value: nativeRegExpMethod.call(regexp, str, arg2)
                };
              }

              return {
                done: true,
                value: nativeMethod.call(str, regexp, arg2)
              };
            }

            return {
              done: false
            };
          }, {
            REPLACE_KEEPS_$0: REPLACE_KEEPS_$0,
            REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE: REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE
          });
          var stringMethod = methods[0];
          var regexMethod = methods[1];
          redefine(String.prototype, KEY, stringMethod);
          redefine(RegExp.prototype, SYMBOL, length == 2 // 21.2.5.8 RegExp.prototype[@@replace](string, replaceValue)
          // 21.2.5.11 RegExp.prototype[@@split](string, limit)
          ? function (string, arg) {
            return regexMethod.call(string, this, arg);
          } // 21.2.5.6 RegExp.prototype[@@match](string)
          // 21.2.5.9 RegExp.prototype[@@search](string)
          : function (string) {
            return regexMethod.call(string, this);
          });
        }

        if (sham) createNonEnumerableProperty(RegExp.prototype[SYMBOL], 'sham', true);
      };
      /***/

    },

    /***/
    "I8a+":
    /*!**************************************************!*\
      !*** ./node_modules/core-js/modules/_classof.js ***!
      \**************************************************/

    /*! no static exports found */

    /***/
    function I8a(module, exports, __webpack_require__) {
      // getting tag from 19.1.3.6 Object.prototype.toString()
      var cof = __webpack_require__(
      /*! ./_cof */
      "LZWt");

      var TAG = __webpack_require__(
      /*! ./_wks */
      "K0xU")('toStringTag'); // ES3 wrong here


      var ARG = cof(function () {
        return arguments;
      }()) == 'Arguments'; // fallback for IE11 Script Access Denied error

      var tryGet = function tryGet(it, key) {
        try {
          return it[key];
        } catch (e) {
          /* empty */
        }
      };

      module.exports = function (it) {
        var O, T, B;
        return it === undefined ? 'Undefined' : it === null ? 'Null' // @@toStringTag case
        : typeof (T = tryGet(O = Object(it), TAG)) == 'string' ? T // builtinTag case
        : ARG ? cof(O) // ES3 arguments fallback
        : (B = cof(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : B;
      };
      /***/

    },

    /***/
    "IBH3":
    /*!*************************************************************************************************!*\
      !*** ./node_modules/@angular-devkit/build-angular/node_modules/core-js/internals/array-from.js ***!
      \*************************************************************************************************/

    /*! no static exports found */

    /***/
    function IBH3(module, exports, __webpack_require__) {
      "use strict";

      var bind = __webpack_require__(
      /*! ../internals/function-bind-context */
      "tcQx");

      var toObject = __webpack_require__(
      /*! ../internals/to-object */
      "VCQ8");

      var callWithSafeIterationClosing = __webpack_require__(
      /*! ../internals/call-with-safe-iteration-closing */
      "ipMl");

      var isArrayIteratorMethod = __webpack_require__(
      /*! ../internals/is-array-iterator-method */
      "5MmU");

      var toLength = __webpack_require__(
      /*! ../internals/to-length */
      "xpLY");

      var createProperty = __webpack_require__(
      /*! ../internals/create-property */
      "DYg9");

      var getIteratorMethod = __webpack_require__(
      /*! ../internals/get-iterator-method */
      "F/TS"); // `Array.from` method implementation
      // https://tc39.es/ecma262/#sec-array.from


      module.exports = function from(arrayLike
      /* , mapfn = undefined, thisArg = undefined */
      ) {
        var O = toObject(arrayLike);
        var C = typeof this == 'function' ? this : Array;
        var argumentsLength = arguments.length;
        var mapfn = argumentsLength > 1 ? arguments[1] : undefined;
        var mapping = mapfn !== undefined;
        var iteratorMethod = getIteratorMethod(O);
        var index = 0;
        var length, result, step, iterator, next, value;
        if (mapping) mapfn = bind(mapfn, argumentsLength > 2 ? arguments[2] : undefined, 2); // if the target is not iterable or it's an array with the default iterator - use a simple case

        if (iteratorMethod != undefined && !(C == Array && isArrayIteratorMethod(iteratorMethod))) {
          iterator = iteratorMethod.call(O);
          next = iterator.next;
          result = new C();

          for (; !(step = next.call(iterator)).done; index++) {
            value = mapping ? callWithSafeIterationClosing(iterator, mapfn, [step.value, index], true) : step.value;
            createProperty(result, index, value);
          }
        } else {
          length = toLength(O.length);
          result = new C(length);

          for (; length > index; index++) {
            value = mapping ? mapfn(O[index], index) : O[index];
            createProperty(result, index, value);
          }
        }

        result.length = index;
        return result;
      };
      /***/

    },

    /***/
    "IPby":
    /*!**************************************************************************************************!*\
      !*** ./node_modules/@angular-devkit/build-angular/node_modules/core-js/modules/es.string.raw.js ***!
      \**************************************************************************************************/

    /*! no static exports found */

    /***/
    function IPby(module, exports, __webpack_require__) {
      var $ = __webpack_require__(
      /*! ../internals/export */
      "wA6s");

      var toIndexedObject = __webpack_require__(
      /*! ../internals/to-indexed-object */
      "EMtK");

      var toLength = __webpack_require__(
      /*! ../internals/to-length */
      "xpLY"); // `String.raw` method
      // https://tc39.es/ecma262/#sec-string.raw


      $({
        target: 'String',
        stat: true
      }, {
        raw: function raw(template) {
          var rawTemplate = toIndexedObject(template.raw);
          var literalSegments = toLength(rawTemplate.length);
          var argumentsLength = arguments.length;
          var elements = [];
          var i = 0;

          while (literalSegments > i) {
            elements.push(String(rawTemplate[i++]));
            if (i < argumentsLength) elements.push(String(arguments[i]));
          }

          return elements.join('');
        }
      });
      /***/
    },

    /***/
    "IQbc":
    /*!**********************************************************************************************************!*\
      !*** ./node_modules/@angular-devkit/build-angular/node_modules/core-js/modules/es.array.reduce-right.js ***!
      \**********************************************************************************************************/

    /*! no static exports found */

    /***/
    function IQbc(module, exports, __webpack_require__) {
      "use strict";

      var $ = __webpack_require__(
      /*! ../internals/export */
      "wA6s");

      var $reduceRight = __webpack_require__(
      /*! ../internals/array-reduce */
      "vyNX").right;

      var arrayMethodIsStrict = __webpack_require__(
      /*! ../internals/array-method-is-strict */
      "6CJb");

      var arrayMethodUsesToLength = __webpack_require__(
      /*! ../internals/array-method-uses-to-length */
      "w2hq");

      var CHROME_VERSION = __webpack_require__(
      /*! ../internals/engine-v8-version */
      "D3bo");

      var IS_NODE = __webpack_require__(
      /*! ../internals/engine-is-node */
      "B43K");

      var STRICT_METHOD = arrayMethodIsStrict('reduceRight'); // For preventing possible almost infinite loop in non-standard implementations, test the forward version of the method

      var USES_TO_LENGTH = arrayMethodUsesToLength('reduce', {
        1: 0
      }); // Chrome 80-82 has a critical bug
      // https://bugs.chromium.org/p/chromium/issues/detail?id=1049982

      var CHROME_BUG = !IS_NODE && CHROME_VERSION > 79 && CHROME_VERSION < 83; // `Array.prototype.reduceRight` method
      // https://tc39.es/ecma262/#sec-array.prototype.reduceright

      $({
        target: 'Array',
        proto: true,
        forced: !STRICT_METHOD || !USES_TO_LENGTH || CHROME_BUG
      }, {
        reduceRight: function reduceRight(callbackfn
        /* , initialValue */
        ) {
          return $reduceRight(this, callbackfn, arguments.length, arguments.length > 1 ? arguments[1] : undefined);
        }
      });
      /***/
    },

    /***/
    "IUBq":
    /*!*********************************************************************************************************!*\
      !*** ./node_modules/@angular-devkit/build-angular/node_modules/core-js/internals/flatten-into-array.js ***!
      \*********************************************************************************************************/

    /*! no static exports found */

    /***/
    function IUBq(module, exports, __webpack_require__) {
      "use strict";

      var isArray = __webpack_require__(
      /*! ../internals/is-array */
      "erNl");

      var toLength = __webpack_require__(
      /*! ../internals/to-length */
      "xpLY");

      var bind = __webpack_require__(
      /*! ../internals/function-bind-context */
      "tcQx"); // `FlattenIntoArray` abstract operation
      // https://tc39.github.io/proposal-flatMap/#sec-FlattenIntoArray


      var flattenIntoArray = function flattenIntoArray(target, original, source, sourceLen, start, depth, mapper, thisArg) {
        var targetIndex = start;
        var sourceIndex = 0;
        var mapFn = mapper ? bind(mapper, thisArg, 3) : false;
        var element;

        while (sourceIndex < sourceLen) {
          if (sourceIndex in source) {
            element = mapFn ? mapFn(source[sourceIndex], sourceIndex, original) : source[sourceIndex];

            if (depth > 0 && isArray(element)) {
              targetIndex = flattenIntoArray(target, original, element, toLength(element.length), targetIndex, depth - 1) - 1;
            } else {
              if (targetIndex >= 0x1FFFFFFFFFFFFF) throw TypeError('Exceed the acceptable array length');
              target[targetIndex] = element;
            }

            targetIndex++;
          }

          sourceIndex++;
        }

        return targetIndex;
      };

      module.exports = flattenIntoArray;
      /***/
    },

    /***/
    "IXlp":
    /*!**************************************************************************************************!*\
      !*** ./node_modules/@angular-devkit/build-angular/node_modules/core-js/modules/es.math.acosh.js ***!
      \**************************************************************************************************/

    /*! no static exports found */

    /***/
    function IXlp(module, exports, __webpack_require__) {
      var $ = __webpack_require__(
      /*! ../internals/export */
      "wA6s");

      var log1p = __webpack_require__(
      /*! ../internals/math-log1p */
      "O3xq");

      var nativeAcosh = Math.acosh;
      var log = Math.log;
      var sqrt = Math.sqrt;
      var LN2 = Math.LN2;
      var FORCED = !nativeAcosh // V8 bug: https://code.google.com/p/v8/issues/detail?id=3509
      || Math.floor(nativeAcosh(Number.MAX_VALUE)) != 710 // Tor Browser bug: Math.acosh(Infinity) -> NaN
      || nativeAcosh(Infinity) != Infinity; // `Math.acosh` method
      // https://tc39.es/ecma262/#sec-math.acosh

      $({
        target: 'Math',
        stat: true,
        forced: FORCED
      }, {
        acosh: function acosh(x) {
          return (x = +x) < 1 ? NaN : x > 94906265.62425156 ? log(x) + LN2 : log1p(x - 1 + sqrt(x - 1) * sqrt(x + 1));
        }
      });
      /***/
    },

    /***/
    "Iw71":
    /*!*****************************************************!*\
      !*** ./node_modules/core-js/modules/_dom-create.js ***!
      \*****************************************************/

    /*! no static exports found */

    /***/
    function Iw71(module, exports, __webpack_require__) {
      var isObject = __webpack_require__(
      /*! ./_is-object */
      "0/R4");

      var document = __webpack_require__(
      /*! ./_global */
      "dyZX").document; // typeof document.createElement is 'object' in old IE


      var is = isObject(document) && isObject(document.createElement);

      module.exports = function (it) {
        return is ? document.createElement(it) : {};
      };
      /***/

    },

    /***/
    "IzYO":
    /*!*****************************************************************************************************!*\
      !*** ./node_modules/@angular-devkit/build-angular/node_modules/core-js/modules/es.object.freeze.js ***!
      \*****************************************************************************************************/

    /*! no static exports found */

    /***/
    function IzYO(module, exports, __webpack_require__) {
      var $ = __webpack_require__(
      /*! ../internals/export */
      "wA6s");

      var FREEZING = __webpack_require__(
      /*! ../internals/freezing */
      "cZY6");

      var fails = __webpack_require__(
      /*! ../internals/fails */
      "rG8t");

      var isObject = __webpack_require__(
      /*! ../internals/is-object */
      "6XUM");

      var onFreeze = __webpack_require__(
      /*! ../internals/internal-metadata */
      "M7Xk").onFreeze;

      var nativeFreeze = Object.freeze;
      var FAILS_ON_PRIMITIVES = fails(function () {
        nativeFreeze(1);
      }); // `Object.freeze` method
      // https://tc39.es/ecma262/#sec-object.freeze

      $({
        target: 'Object',
        stat: true,
        forced: FAILS_ON_PRIMITIVES,
        sham: !FREEZING
      }, {
        freeze: function freeze(it) {
          return nativeFreeze && isObject(it) ? nativeFreeze(onFreeze(it)) : it;
        }
      });
      /***/
    },

    /***/
    "J+6e":
    /*!******************************************************************!*\
      !*** ./node_modules/core-js/modules/core.get-iterator-method.js ***!
      \******************************************************************/

    /*! no static exports found */

    /***/
    function J6e(module, exports, __webpack_require__) {
      var classof = __webpack_require__(
      /*! ./_classof */
      "I8a+");

      var ITERATOR = __webpack_require__(
      /*! ./_wks */
      "K0xU")('iterator');

      var Iterators = __webpack_require__(
      /*! ./_iterators */
      "hPIQ");

      module.exports = __webpack_require__(
      /*! ./_core */
      "g3g5").getIteratorMethod = function (it) {
        if (it != undefined) return it[ITERATOR] || it['@@iterator'] || Iterators[classof(it)];
      };
      /***/

    },

    /***/
    "J4zY":
    /*!****************************************************************************************************!*\
      !*** ./node_modules/@angular-devkit/build-angular/node_modules/core-js/modules/es.string.fixed.js ***!
      \****************************************************************************************************/

    /*! no static exports found */

    /***/
    function J4zY(module, exports, __webpack_require__) {
      "use strict";

      var $ = __webpack_require__(
      /*! ../internals/export */
      "wA6s");

      var createHTML = __webpack_require__(
      /*! ../internals/create-html */
      "uoca");

      var forcedStringHTMLMethod = __webpack_require__(
      /*! ../internals/string-html-forced */
      "d8Sw"); // `String.prototype.fixed` method
      // https://tc39.es/ecma262/#sec-string.prototype.fixed


      $({
        target: 'String',
        proto: true,
        forced: forcedStringHTMLMethod('fixed')
      }, {
        fixed: function fixed() {
          return createHTML(this, 'tt', '', '');
        }
      });
      /***/
    },

    /***/
    "JHhb":
    /*!**************************************************************************************************!*\
      !*** ./node_modules/@angular-devkit/build-angular/node_modules/core-js/internals/set-species.js ***!
      \**************************************************************************************************/

    /*! no static exports found */

    /***/
    function JHhb(module, exports, __webpack_require__) {
      "use strict";

      var getBuiltIn = __webpack_require__(
      /*! ../internals/get-built-in */
      "Ew/G");

      var definePropertyModule = __webpack_require__(
      /*! ../internals/object-define-property */
      "/Ybd");

      var wellKnownSymbol = __webpack_require__(
      /*! ../internals/well-known-symbol */
      "m41k");

      var DESCRIPTORS = __webpack_require__(
      /*! ../internals/descriptors */
      "T69T");

      var SPECIES = wellKnownSymbol('species');

      module.exports = function (CONSTRUCTOR_NAME) {
        var Constructor = getBuiltIn(CONSTRUCTOR_NAME);
        var defineProperty = definePropertyModule.f;

        if (DESCRIPTORS && Constructor && !Constructor[SPECIES]) {
          defineProperty(Constructor, SPECIES, {
            configurable: true,
            get: function get() {
              return this;
            }
          });
        }
      };
      /***/

    },

    /***/
    "JI1L":
    /*!***********************************************************************************************************!*\
      !*** ./node_modules/@angular-devkit/build-angular/node_modules/core-js/internals/a-possible-prototype.js ***!
      \***********************************************************************************************************/

    /*! no static exports found */

    /***/
    function JI1L(module, exports, __webpack_require__) {
      var isObject = __webpack_require__(
      /*! ../internals/is-object */
      "6XUM");

      module.exports = function (it) {
        if (!isObject(it) && it !== null) {
          throw TypeError("Can't set " + String(it) + ' as a prototype');
        }

        return it;
      };
      /***/

    },

    /***/
    "JafA":
    /*!***********************************************************************************************************!*\
      !*** ./node_modules/@angular-devkit/build-angular/node_modules/core-js/internals/array-species-create.js ***!
      \***********************************************************************************************************/

    /*! no static exports found */

    /***/
    function JafA(module, exports, __webpack_require__) {
      var isObject = __webpack_require__(
      /*! ../internals/is-object */
      "6XUM");

      var isArray = __webpack_require__(
      /*! ../internals/is-array */
      "erNl");

      var wellKnownSymbol = __webpack_require__(
      /*! ../internals/well-known-symbol */
      "m41k");

      var SPECIES = wellKnownSymbol('species'); // `ArraySpeciesCreate` abstract operation
      // https://tc39.es/ecma262/#sec-arrayspeciescreate

      module.exports = function (originalArray, length) {
        var C;

        if (isArray(originalArray)) {
          C = originalArray.constructor; // cross-realm fallback

          if (typeof C == 'function' && (C === Array || isArray(C.prototype))) C = undefined;else if (isObject(C)) {
            C = C[SPECIES];
            if (C === null) C = undefined;
          }
        }

        return new (C === undefined ? Array : C)(length === 0 ? 0 : length);
      };
      /***/

    },

    /***/
    "JhPs":
    /*!**************************************************************************************************!*\
      !*** ./node_modules/@angular-devkit/build-angular/node_modules/core-js/modules/es.math.expm1.js ***!
      \**************************************************************************************************/

    /*! no static exports found */

    /***/
    function JhPs(module, exports, __webpack_require__) {
      var $ = __webpack_require__(
      /*! ../internals/export */
      "wA6s");

      var expm1 = __webpack_require__(
      /*! ../internals/math-expm1 */
      "pn4C"); // `Math.expm1` method
      // https://tc39.es/ecma262/#sec-math.expm1


      $({
        target: 'Math',
        stat: true,
        forced: expm1 != Math.expm1
      }, {
        expm1: expm1
      });
      /***/
    },

    /***/
    "JiEa":
    /*!******************************************************!*\
      !*** ./node_modules/core-js/modules/_object-gops.js ***!
      \******************************************************/

    /*! no static exports found */

    /***/
    function JiEa(module, exports) {
      exports.f = Object.getOwnPropertySymbols;
      /***/
    },

    /***/
    "JkSk":
    /*!************************************************************************************************************!*\
      !*** ./node_modules/@angular-devkit/build-angular/node_modules/core-js/internals/regexp-sticky-helpers.js ***!
      \************************************************************************************************************/

    /*! no static exports found */

    /***/
    function JkSk(module, exports, __webpack_require__) {
      "use strict";

      var fails = __webpack_require__(
      /*! ./fails */
      "rG8t"); // babel-minify transpiles RegExp('a', 'y') -> /a/y and it causes SyntaxError,
      // so we use an intermediate function.


      function RE(s, f) {
        return RegExp(s, f);
      }

      exports.UNSUPPORTED_Y = fails(function () {
        // babel-minify transpiles RegExp('a', 'y') -> /a/y and it causes SyntaxError
        var re = RE('a', 'y');
        re.lastIndex = 2;
        return re.exec('abcd') != null;
      });
      exports.BROKEN_CARET = fails(function () {
        // https://bugzilla.mozilla.org/show_bug.cgi?id=773687
        var re = RE('^r', 'gy');
        re.lastIndex = 2;
        return re.exec('str') != null;
      });
      /***/
    },

    /***/
    "Jt/z":
    /*!********************************************************************************************************!*\
      !*** ./node_modules/@angular-devkit/build-angular/node_modules/core-js/modules/es.array.find-index.js ***!
      \********************************************************************************************************/

    /*! no static exports found */

    /***/
    function JtZ(module, exports, __webpack_require__) {
      "use strict";

      var $ = __webpack_require__(
      /*! ../internals/export */
      "wA6s");

      var $findIndex = __webpack_require__(
      /*! ../internals/array-iteration */
      "kk6e").findIndex;

      var addToUnscopables = __webpack_require__(
      /*! ../internals/add-to-unscopables */
      "A1Hp");

      var arrayMethodUsesToLength = __webpack_require__(
      /*! ../internals/array-method-uses-to-length */
      "w2hq");

      var FIND_INDEX = 'findIndex';
      var SKIPS_HOLES = true;
      var USES_TO_LENGTH = arrayMethodUsesToLength(FIND_INDEX); // Shouldn't skip holes

      if (FIND_INDEX in []) Array(1)[FIND_INDEX](function () {
        SKIPS_HOLES = false;
      }); // `Array.prototype.findIndex` method
      // https://tc39.es/ecma262/#sec-array.prototype.findindex

      $({
        target: 'Array',
        proto: true,
        forced: SKIPS_HOLES || !USES_TO_LENGTH
      }, {
        findIndex: function findIndex(callbackfn
        /* , that = undefined */
        ) {
          return $findIndex(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
        }
      }); // https://tc39.es/ecma262/#sec-array.prototype-@@unscopables

      addToUnscopables(FIND_INDEX);
      /***/
    },

    /***/
    "K0xU":
    /*!**********************************************!*\
      !*** ./node_modules/core-js/modules/_wks.js ***!
      \**********************************************/

    /*! no static exports found */

    /***/
    function K0xU(module, exports, __webpack_require__) {
      var store = __webpack_require__(
      /*! ./_shared */
      "VTer")('wks');

      var uid = __webpack_require__(
      /*! ./_uid */
      "ylqs");

      var Symbol = __webpack_require__(
      /*! ./_global */
      "dyZX").Symbol;

      var USE_SYMBOL = typeof Symbol == 'function';

      var $exports = module.exports = function (name) {
        return store[name] || (store[name] = USE_SYMBOL && Symbol[name] || (USE_SYMBOL ? Symbol : uid)('Symbol.' + name));
      };

      $exports.store = store;
      /***/
    },

    /***/
    "K1Z7":
    /*!****************************************************************************************************!*\
      !*** ./node_modules/@angular-devkit/build-angular/node_modules/core-js/modules/es.string.match.js ***!
      \****************************************************************************************************/

    /*! no static exports found */

    /***/
    function K1Z7(module, exports, __webpack_require__) {
      "use strict";

      var fixRegExpWellKnownSymbolLogic = __webpack_require__(
      /*! ../internals/fix-regexp-well-known-symbol-logic */
      "HSQg");

      var anObject = __webpack_require__(
      /*! ../internals/an-object */
      "F26l");

      var toLength = __webpack_require__(
      /*! ../internals/to-length */
      "xpLY");

      var requireObjectCoercible = __webpack_require__(
      /*! ../internals/require-object-coercible */
      "hmpk");

      var advanceStringIndex = __webpack_require__(
      /*! ../internals/advance-string-index */
      "dPn5");

      var regExpExec = __webpack_require__(
      /*! ../internals/regexp-exec-abstract */
      "unYP"); // @@match logic


      fixRegExpWellKnownSymbolLogic('match', 1, function (MATCH, nativeMatch, maybeCallNative) {
        return [// `String.prototype.match` method
        // https://tc39.es/ecma262/#sec-string.prototype.match
        function match(regexp) {
          var O = requireObjectCoercible(this);
          var matcher = regexp == undefined ? undefined : regexp[MATCH];
          return matcher !== undefined ? matcher.call(regexp, O) : new RegExp(regexp)[MATCH](String(O));
        }, // `RegExp.prototype[@@match]` method
        // https://tc39.es/ecma262/#sec-regexp.prototype-@@match
        function (regexp) {
          var res = maybeCallNative(nativeMatch, regexp, this);
          if (res.done) return res.value;
          var rx = anObject(regexp);
          var S = String(this);
          if (!rx.global) return regExpExec(rx, S);
          var fullUnicode = rx.unicode;
          rx.lastIndex = 0;
          var A = [];
          var n = 0;
          var result;

          while ((result = regExpExec(rx, S)) !== null) {
            var matchStr = String(result[0]);
            A[n] = matchStr;
            if (matchStr === '') rx.lastIndex = advanceStringIndex(S, toLength(rx.lastIndex), fullUnicode);
            n++;
          }

          return n === 0 ? null : A;
        }];
      });
      /***/
    },

    /***/
    "K1dl":
    /*!*****************************************************************************************************************!*\
      !*** ./node_modules/@angular-devkit/build-angular/node_modules/core-js/internals/native-promise-constructor.js ***!
      \*****************************************************************************************************************/

    /*! no static exports found */

    /***/
    function K1dl(module, exports, __webpack_require__) {
      var global = __webpack_require__(
      /*! ../internals/global */
      "ocAm");

      module.exports = global.Promise;
      /***/
    },

    /***/
    "K6ZX":
    /*!**********************************************************************************************************!*\
      !*** ./node_modules/@angular-devkit/build-angular/node_modules/core-js/internals/inherit-if-required.js ***!
      \**********************************************************************************************************/

    /*! no static exports found */

    /***/
    function K6ZX(module, exports, __webpack_require__) {
      var isObject = __webpack_require__(
      /*! ../internals/is-object */
      "6XUM");

      var setPrototypeOf = __webpack_require__(
      /*! ../internals/object-set-prototype-of */
      "7/lX"); // makes subclassing work correct for wrapped built-ins


      module.exports = function ($this, dummy, Wrapper) {
        var NewTarget, NewTargetPrototype;
        if ( // it can work only with native `setPrototypeOf`
        setPrototypeOf && // we haven't completely correct pre-ES6 way for getting `new.target`, so use this
        typeof (NewTarget = dummy.constructor) == 'function' && NewTarget !== Wrapper && isObject(NewTargetPrototype = NewTarget.prototype) && NewTargetPrototype !== Wrapper.prototype) setPrototypeOf($this, NewTargetPrototype);
        return $this;
      };
      /***/

    },

    /***/
    "KBkW":
    /*!***************************************************************************************************!*\
      !*** ./node_modules/@angular-devkit/build-angular/node_modules/core-js/internals/shared-store.js ***!
      \***************************************************************************************************/

    /*! no static exports found */

    /***/
    function KBkW(module, exports, __webpack_require__) {
      var global = __webpack_require__(
      /*! ../internals/global */
      "ocAm");

      var setGlobal = __webpack_require__(
      /*! ../internals/set-global */
      "Fqhe");

      var SHARED = '__core-js_shared__';
      var store = global[SHARED] || setGlobal(SHARED, {});
      module.exports = store;
      /***/
    },

    /***/
    "KMug":
    /*!********************************************************************************************************!*\
      !*** ./node_modules/@angular-devkit/build-angular/node_modules/core-js/modules/es.object.is-frozen.js ***!
      \********************************************************************************************************/

    /*! no static exports found */

    /***/
    function KMug(module, exports, __webpack_require__) {
      var $ = __webpack_require__(
      /*! ../internals/export */
      "wA6s");

      var fails = __webpack_require__(
      /*! ../internals/fails */
      "rG8t");

      var isObject = __webpack_require__(
      /*! ../internals/is-object */
      "6XUM");

      var nativeIsFrozen = Object.isFrozen;
      var FAILS_ON_PRIMITIVES = fails(function () {
        nativeIsFrozen(1);
      }); // `Object.isFrozen` method
      // https://tc39.es/ecma262/#sec-object.isfrozen

      $({
        target: 'Object',
        stat: true,
        forced: FAILS_ON_PRIMITIVES
      }, {
        isFrozen: function isFrozen(it) {
          return isObject(it) ? nativeIsFrozen ? nativeIsFrozen(it) : false : true;
        }
      });
      /***/
    },

    /***/
    "KkqW":
    /*!********************************************************************************************************************!*\
      !*** ./node_modules/@angular-devkit/build-angular/node_modules/core-js/internals/object-get-own-property-names.js ***!
      \********************************************************************************************************************/

    /*! no static exports found */

    /***/
    function KkqW(module, exports, __webpack_require__) {
      var internalObjectKeys = __webpack_require__(
      /*! ../internals/object-keys-internal */
      "vVmn");

      var enumBugKeys = __webpack_require__(
      /*! ../internals/enum-bug-keys */
      "aAjO");

      var hiddenKeys = enumBugKeys.concat('length', 'prototype'); // `Object.getOwnPropertyNames` method
      // https://tc39.es/ecma262/#sec-object.getownpropertynames

      exports.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O) {
        return internalObjectKeys(O, hiddenKeys);
      };
      /***/

    },

    /***/
    "KlhL":
    /*!****************************************************************************************************!*\
      !*** ./node_modules/@angular-devkit/build-angular/node_modules/core-js/internals/object-assign.js ***!
      \****************************************************************************************************/

    /*! no static exports found */

    /***/
    function KlhL(module, exports, __webpack_require__) {
      "use strict";

      var DESCRIPTORS = __webpack_require__(
      /*! ../internals/descriptors */
      "T69T");

      var fails = __webpack_require__(
      /*! ../internals/fails */
      "rG8t");

      var objectKeys = __webpack_require__(
      /*! ../internals/object-keys */
      "ZRqE");

      var getOwnPropertySymbolsModule = __webpack_require__(
      /*! ../internals/object-get-own-property-symbols */
      "busr");

      var propertyIsEnumerableModule = __webpack_require__(
      /*! ../internals/object-property-is-enumerable */
      "gn9T");

      var toObject = __webpack_require__(
      /*! ../internals/to-object */
      "VCQ8");

      var IndexedObject = __webpack_require__(
      /*! ../internals/indexed-object */
      "tUdv");

      var nativeAssign = Object.assign;
      var defineProperty = Object.defineProperty; // `Object.assign` method
      // https://tc39.es/ecma262/#sec-object.assign

      module.exports = !nativeAssign || fails(function () {
        // should have correct order of operations (Edge bug)
        if (DESCRIPTORS && nativeAssign({
          b: 1
        }, nativeAssign(defineProperty({}, 'a', {
          enumerable: true,
          get: function get() {
            defineProperty(this, 'b', {
              value: 3,
              enumerable: false
            });
          }
        }), {
          b: 2
        })).b !== 1) return true; // should work with symbols and should have deterministic property order (V8 bug)

        var A = {};
        var B = {}; // eslint-disable-next-line no-undef

        var symbol = Symbol();
        var alphabet = 'abcdefghijklmnopqrst';
        A[symbol] = 7;
        alphabet.split('').forEach(function (chr) {
          B[chr] = chr;
        });
        return nativeAssign({}, A)[symbol] != 7 || objectKeys(nativeAssign({}, B)).join('') != alphabet;
      }) ? function assign(target, source) {
        // eslint-disable-line no-unused-vars
        var T = toObject(target);
        var argumentsLength = arguments.length;
        var index = 1;
        var getOwnPropertySymbols = getOwnPropertySymbolsModule.f;
        var propertyIsEnumerable = propertyIsEnumerableModule.f;

        while (argumentsLength > index) {
          var S = IndexedObject(arguments[index++]);
          var keys = getOwnPropertySymbols ? objectKeys(S).concat(getOwnPropertySymbols(S)) : objectKeys(S);
          var length = keys.length;
          var j = 0;
          var key;

          while (length > j) {
            key = keys[j++];
            if (!DESCRIPTORS || propertyIsEnumerable.call(S, key)) T[key] = S[key];
          }
        }

        return T;
      } : nativeAssign;
      /***/
    },

    /***/
    "KroJ":
    /*!***************************************************!*\
      !*** ./node_modules/core-js/modules/_redefine.js ***!
      \***************************************************/

    /*! no static exports found */

    /***/
    function KroJ(module, exports, __webpack_require__) {
      var global = __webpack_require__(
      /*! ./_global */
      "dyZX");

      var hide = __webpack_require__(
      /*! ./_hide */
      "Mukb");

      var has = __webpack_require__(
      /*! ./_has */
      "aagx");

      var SRC = __webpack_require__(
      /*! ./_uid */
      "ylqs")('src');

      var $toString = __webpack_require__(
      /*! ./_function-to-string */
      "+lvF");

      var TO_STRING = 'toString';
      var TPL = ('' + $toString).split(TO_STRING);

      __webpack_require__(
      /*! ./_core */
      "g3g5").inspectSource = function (it) {
        return $toString.call(it);
      };

      (module.exports = function (O, key, val, safe) {
        var isFunction = typeof val == 'function';
        if (isFunction) has(val, 'name') || hide(val, 'name', key);
        if (O[key] === val) return;
        if (isFunction) has(val, SRC) || hide(val, SRC, O[key] ? '' + O[key] : TPL.join(String(key)));

        if (O === global) {
          O[key] = val;
        } else if (!safe) {
          delete O[key];
          hide(O, key, val);
        } else if (O[key]) {
          O[key] = val;
        } else {
          hide(O, key, val);
        } // add fake Function#toString for correct work wrapped methods / constructors with methods like LoDash isNative

      })(Function.prototype, TO_STRING, function toString() {
        return typeof this == 'function' && this[SRC] || $toString.call(this);
      });
      /***/
    },

    /***/
    "KsdI":
    /*!*******************************************************************************************************!*\
      !*** ./node_modules/@angular-devkit/build-angular/node_modules/core-js/modules/es.symbol.iterator.js ***!
      \*******************************************************************************************************/

    /*! no static exports found */

    /***/
    function KsdI(module, exports, __webpack_require__) {
      var defineWellKnownSymbol = __webpack_require__(
      /*! ../internals/define-well-known-symbol */
      "94Vg"); // `Symbol.iterator` well-known symbol
      // https://tc39.es/ecma262/#sec-symbol.iterator


      defineWellKnownSymbol('iterator');
      /***/
    },

    /***/
    "Kuth":
    /*!********************************************************!*\
      !*** ./node_modules/core-js/modules/_object-create.js ***!
      \********************************************************/

    /*! no static exports found */

    /***/
    function Kuth(module, exports, __webpack_require__) {
      // 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])
      var anObject = __webpack_require__(
      /*! ./_an-object */
      "y3w9");

      var dPs = __webpack_require__(
      /*! ./_object-dps */
      "FJW5");

      var enumBugKeys = __webpack_require__(
      /*! ./_enum-bug-keys */
      "4R4u");

      var IE_PROTO = __webpack_require__(
      /*! ./_shared-key */
      "YTvA")('IE_PROTO');

      var Empty = function Empty() {
        /* empty */
      };

      var PROTOTYPE = 'prototype'; // Create object with fake `null` prototype: use iframe Object with cleared prototype

      var _createDict = function createDict() {
        // Thrash, waste and sodomy: IE GC bug
        var iframe = __webpack_require__(
        /*! ./_dom-create */
        "Iw71")('iframe');

        var i = enumBugKeys.length;
        var lt = '<';
        var gt = '>';
        var iframeDocument;
        iframe.style.display = 'none';

        __webpack_require__(
        /*! ./_html */
        "+rLv").appendChild(iframe);

        iframe.src = 'javascript:'; // eslint-disable-line no-script-url
        // createDict = iframe.contentWindow.Object;
        // html.removeChild(iframe);

        iframeDocument = iframe.contentWindow.document;
        iframeDocument.open();
        iframeDocument.write(lt + 'script' + gt + 'document.F=Object' + lt + '/script' + gt);
        iframeDocument.close();
        _createDict = iframeDocument.F;

        while (i--) {
          delete _createDict[PROTOTYPE][enumBugKeys[i]];
        }

        return _createDict();
      };

      module.exports = Object.create || function create(O, Properties) {
        var result;

        if (O !== null) {
          Empty[PROTOTYPE] = anObject(O);
          result = new Empty();
          Empty[PROTOTYPE] = null; // add "__proto__" for Object.getPrototypeOf polyfill

          result[IE_PROTO] = O;
        } else result = _createDict();

        return Properties === undefined ? result : dPs(result, Properties);
      };
      /***/

    },

    /***/
    "L4l2":
    /*!*******************************************************************************************************!*\
      !*** ./node_modules/@angular-devkit/build-angular/node_modules/core-js/modules/es.string.includes.js ***!
      \*******************************************************************************************************/

    /*! no static exports found */

    /***/
    function L4l2(module, exports, __webpack_require__) {
      "use strict";

      var $ = __webpack_require__(
      /*! ../internals/export */
      "wA6s");

      var notARegExp = __webpack_require__(
      /*! ../internals/not-a-regexp */
      "s8qp");

      var requireObjectCoercible = __webpack_require__(
      /*! ../internals/require-object-coercible */
      "hmpk");

      var correctIsRegExpLogic = __webpack_require__(
      /*! ../internals/correct-is-regexp-logic */
      "0Ds2"); // `String.prototype.includes` method
      // https://tc39.es/ecma262/#sec-string.prototype.includes


      $({
        target: 'String',
        proto: true,
        forced: !correctIsRegExpLogic('includes')
      }, {
        includes: function includes(searchString
        /* , position = 0 */
        ) {
          return !!~String(requireObjectCoercible(this)).indexOf(notARegExp(searchString), arguments.length > 1 ? arguments[1] : undefined);
        }
      });
      /***/
    },

    /***/
    "LQAc":
    /*!**************************************************!*\
      !*** ./node_modules/core-js/modules/_library.js ***!
      \**************************************************/

    /*! no static exports found */

    /***/
    function LQAc(module, exports) {
      module.exports = false;
      /***/
    },

    /***/
    "LRWt":
    /*!********************************************************************************************!*\
      !*** ./node_modules/@angular-devkit/build-angular/node_modules/core-js/es/symbol/index.js ***!
      \********************************************************************************************/

    /*! no static exports found */

    /***/
    function LRWt(module, exports, __webpack_require__) {
      __webpack_require__(
      /*! ../../modules/es.array.concat */
      "F4rZ");

      __webpack_require__(
      /*! ../../modules/es.object.to-string */
      "NX+v");

      __webpack_require__(
      /*! ../../modules/es.symbol */
      "SNUk");

      __webpack_require__(
      /*! ../../modules/es.symbol.async-iterator */
      "c/8x");

      __webpack_require__(
      /*! ../../modules/es.symbol.description */
      "0luR");

      __webpack_require__(
      /*! ../../modules/es.symbol.has-instance */
      "Pfbg");

      __webpack_require__(
      /*! ../../modules/es.symbol.is-concat-spreadable */
      "V+F/");

      __webpack_require__(
      /*! ../../modules/es.symbol.iterator */
      "KsdI");

      __webpack_require__(
      /*! ../../modules/es.symbol.match */
      "ERXZ");

      __webpack_require__(
      /*! ../../modules/es.symbol.match-all */
      "YOJ4");

      __webpack_require__(
      /*! ../../modules/es.symbol.replace */
      "S3W2");

      __webpack_require__(
      /*! ../../modules/es.symbol.search */
      "8+YH");

      __webpack_require__(
      /*! ../../modules/es.symbol.species */
      "uKyN");

      __webpack_require__(
      /*! ../../modules/es.symbol.split */
      "Vi1R");

      __webpack_require__(
      /*! ../../modules/es.symbol.to-primitive */
      "9kNm");

      __webpack_require__(
      /*! ../../modules/es.symbol.to-string-tag */
      "ZQqA");

      __webpack_require__(
      /*! ../../modules/es.symbol.unscopables */
      "815a");

      __webpack_require__(
      /*! ../../modules/es.json.to-string-tag */
      "8CeQ");

      __webpack_require__(
      /*! ../../modules/es.math.to-string-tag */
      "OVXS");

      __webpack_require__(
      /*! ../../modules/es.reflect.to-string-tag */
      "zglh");

      var path = __webpack_require__(
      /*! ../../internals/path */
      "E7aN");

      module.exports = path.Symbol;
      /***/
    },

    /***/
    "LZWt":
    /*!**********************************************!*\
      !*** ./node_modules/core-js/modules/_cof.js ***!
      \**********************************************/

    /*! no static exports found */

    /***/
    function LZWt(module, exports) {
      var toString = {}.toString;

      module.exports = function (it) {
        return toString.call(it).slice(8, -1);
      };
      /***/

    },

    /***/
    "LdO1":
    /*!***************************************************************************************************!*\
      !*** ./node_modules/@angular-devkit/build-angular/node_modules/core-js/internals/to-primitive.js ***!
      \***************************************************************************************************/

    /*! no static exports found */

    /***/
    function LdO1(module, exports, __webpack_require__) {
      var isObject = __webpack_require__(
      /*! ../internals/is-object */
      "6XUM"); // `ToPrimitive` abstract operation
      // https://tc39.es/ecma262/#sec-toprimitive
      // instead of the ES6 spec version, we didn't implement @@toPrimitive case
      // and the second argument - flag - preferred type is a string


      module.exports = function (input, PREFERRED_STRING) {
        if (!isObject(input)) return input;
        var fn, val;
        if (PREFERRED_STRING && typeof (fn = input.toString) == 'function' && !isObject(val = fn.call(input))) return val;
        if (typeof (fn = input.valueOf) == 'function' && !isObject(val = fn.call(input))) return val;
        if (!PREFERRED_STRING && typeof (fn = input.toString) == 'function' && !isObject(val = fn.call(input))) return val;
        throw TypeError("Can't convert object to primitive value");
      };
      /***/

    },

    /***/
    "M1AK":
    /*!**************************************************************************************************!*\
      !*** ./node_modules/@angular-devkit/build-angular/node_modules/core-js/modules/es.math.clz32.js ***!
      \**************************************************************************************************/

    /*! no static exports found */

    /***/
    function M1AK(module, exports, __webpack_require__) {
      var $ = __webpack_require__(
      /*! ../internals/export */
      "wA6s");

      var floor = Math.floor;
      var log = Math.log;
      var LOG2E = Math.LOG2E; // `Math.clz32` method
      // https://tc39.es/ecma262/#sec-math.clz32

      $({
        target: 'Math',
        stat: true
      }, {
        clz32: function clz32(x) {
          return (x >>>= 0) ? 31 - floor(log(x + 0.5) * LOG2E) : 32;
        }
      });
      /***/
    },

    /***/
    "M6Qj":
    /*!********************************************************!*\
      !*** ./node_modules/core-js/modules/_is-array-iter.js ***!
      \********************************************************/

    /*! no static exports found */

    /***/
    function M6Qj(module, exports, __webpack_require__) {
      // check on default Array iterator
      var Iterators = __webpack_require__(
      /*! ./_iterators */
      "hPIQ");

      var ITERATOR = __webpack_require__(
      /*! ./_wks */
      "K0xU")('iterator');

      var ArrayProto = Array.prototype;

      module.exports = function (it) {
        return it !== undefined && (Iterators.Array === it || ArrayProto[ITERATOR] === it);
      };
      /***/

    },

    /***/
    "M7Xk":
    /*!********************************************************************************************************!*\
      !*** ./node_modules/@angular-devkit/build-angular/node_modules/core-js/internals/internal-metadata.js ***!
      \********************************************************************************************************/

    /*! no static exports found */

    /***/
    function M7Xk(module, exports, __webpack_require__) {
      var hiddenKeys = __webpack_require__(
      /*! ../internals/hidden-keys */
      "yQMY");

      var isObject = __webpack_require__(
      /*! ../internals/is-object */
      "6XUM");

      var has = __webpack_require__(
      /*! ../internals/has */
      "OG5q");

      var defineProperty = __webpack_require__(
      /*! ../internals/object-define-property */
      "/Ybd").f;

      var uid = __webpack_require__(
      /*! ../internals/uid */
      "SDMg");

      var FREEZING = __webpack_require__(
      /*! ../internals/freezing */
      "cZY6");

      var METADATA = uid('meta');
      var id = 0;

      var isExtensible = Object.isExtensible || function () {
        return true;
      };

      var setMetadata = function setMetadata(it) {
        defineProperty(it, METADATA, {
          value: {
            objectID: 'O' + ++id,
            // object ID
            weakData: {} // weak collections IDs

          }
        });
      };

      var fastKey = function fastKey(it, create) {
        // return a primitive with prefix
        if (!isObject(it)) return typeof it == 'symbol' ? it : (typeof it == 'string' ? 'S' : 'P') + it;

        if (!has(it, METADATA)) {
          // can't set metadata to uncaught frozen object
          if (!isExtensible(it)) return 'F'; // not necessary to add metadata

          if (!create) return 'E'; // add missing metadata

          setMetadata(it); // return object ID
        }

        return it[METADATA].objectID;
      };

      var getWeakData = function getWeakData(it, create) {
        if (!has(it, METADATA)) {
          // can't set metadata to uncaught frozen object
          if (!isExtensible(it)) return true; // not necessary to add metadata

          if (!create) return false; // add missing metadata

          setMetadata(it); // return the store of weak collections IDs
        }

        return it[METADATA].weakData;
      }; // add metadata on freeze-family methods calling


      var onFreeze = function onFreeze(it) {
        if (FREEZING && meta.REQUIRED && isExtensible(it) && !has(it, METADATA)) setMetadata(it);
        return it;
      };

      var meta = module.exports = {
        REQUIRED: false,
        fastKey: fastKey,
        getWeakData: getWeakData,
        onFreeze: onFreeze
      };
      hiddenKeys[METADATA] = true;
      /***/
    },

    /***/
    "MjoC":
    /*!*****************************************************************************************************!*\
      !*** ./node_modules/@angular-devkit/build-angular/node_modules/core-js/modules/es.function.name.js ***!
      \*****************************************************************************************************/

    /*! no static exports found */

    /***/
    function MjoC(module, exports, __webpack_require__) {
      var DESCRIPTORS = __webpack_require__(
      /*! ../internals/descriptors */
      "T69T");

      var defineProperty = __webpack_require__(
      /*! ../internals/object-define-property */
      "/Ybd").f;

      var FunctionPrototype = Function.prototype;
      var FunctionPrototypeToString = FunctionPrototype.toString;
      var nameRE = /^\s*function ([^ (]*)/;
      var NAME = 'name'; // Function instances `.name` property
      // https://tc39.es/ecma262/#sec-function-instances-name

      if (DESCRIPTORS && !(NAME in FunctionPrototype)) {
        defineProperty(FunctionPrototype, NAME, {
          configurable: true,
          get: function get() {
            try {
              return FunctionPrototypeToString.call(this).match(nameRE)[1];
            } catch (error) {
              return '';
            }
          }
        });
      }
      /***/

    },

    /***/
    "MkZA":
    /*!************************************************************************************************!*\
      !*** ./node_modules/@angular-devkit/build-angular/node_modules/core-js/internals/is-forced.js ***!
      \************************************************************************************************/

    /*! no static exports found */

    /***/
    function MkZA(module, exports, __webpack_require__) {
      var fails = __webpack_require__(
      /*! ../internals/fails */
      "rG8t");

      var replacement = /#|\.prototype\./;

      var isForced = function isForced(feature, detection) {
        var value = data[normalize(feature)];
        return value == POLYFILL ? true : value == NATIVE ? false : typeof detection == 'function' ? fails(detection) : !!detection;
      };

      var normalize = isForced.normalize = function (string) {
        return String(string).replace(replacement, '.').toLowerCase();
      };

      var data = isForced.data = {};
      var NATIVE = isForced.NATIVE = 'N';
      var POLYFILL = isForced.POLYFILL = 'P';
      module.exports = isForced;
      /***/
    },

    /***/
    "Mukb":
    /*!***********************************************!*\
      !*** ./node_modules/core-js/modules/_hide.js ***!
      \***********************************************/

    /*! no static exports found */

    /***/
    function Mukb(module, exports, __webpack_require__) {
      var dP = __webpack_require__(
      /*! ./_object-dp */
      "hswa");

      var createDesc = __webpack_require__(
      /*! ./_property-desc */
      "RjD/");

      module.exports = __webpack_require__(
      /*! ./_descriptors */
      "nh4g") ? function (object, key, value) {
        return dP.f(object, key, createDesc(1, value));
      } : function (object, key, value) {
        object[key] = value;
        return object;
      };
      /***/
    },

    /***/
    "N/DB":
    /*!*********************************************************!*\
      !*** ./node_modules/@angular/localize/fesm2015/init.js ***!
      \*********************************************************/

    /*! no static exports found */

    /***/
    function NDB(module, exports) {
      /**
       * @license Angular v11.2.4
       * (c) 2010-2021 Google LLC. https://angular.io/
       * License: MIT
       */

      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */
      var __globalThis = typeof globalThis !== 'undefined' && globalThis;

      var __window = typeof window !== 'undefined' && window;

      var __self = typeof self !== 'undefined' && typeof WorkerGlobalScope !== 'undefined' && self instanceof WorkerGlobalScope && self;

      var __global = typeof global !== 'undefined' && global; // Always use __globalThis if available; this is the spec-defined global variable across all
      // environments.
      // Then fallback to __global first; in Node tests both __global and __window may be defined.


      var _global = __globalThis || __global || __window || __self;
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * Tag a template literal string for localization.
       *
       * For example:
       *
       * ```ts
       * $localize `some string to localize`
       * ```
       *
       * **Providing meaning, description and id**
       *
       * You can optionally specify one or more of `meaning`, `description` and `id` for a localized
       * string by pre-pending it with a colon delimited block of the form:
       *
       * ```ts
       * $localize`:meaning|description@@id:source message text`;
       *
       * $localize`:meaning|:source message text`;
       * $localize`:description:source message text`;
       * $localize`:@@id:source message text`;
       * ```
       *
       * This format is the same as that used for `i18n` markers in Angular templates. See the
       * [Angular 18n guide](guide/i18n#template-translations).
       *
       * **Naming placeholders**
       *
       * If the template literal string contains expressions, then the expressions will be automatically
       * associated with placeholder names for you.
       *
       * For example:
       *
       * ```ts
       * $localize `Hi ${name}! There are ${items.length} items.`;
       * ```
       *
       * will generate a message-source of `Hi {$PH}! There are {$PH_1} items`.
       *
       * The recommended practice is to name the placeholder associated with each expression though.
       *
       * Do this by providing the placeholder name wrapped in `:` characters directly after the
       * expression. These placeholder names are stripped out of the rendered localized string.
       *
       * For example, to name the `items.length` expression placeholder `itemCount` you write:
       *
       * ```ts
       * $localize `There are ${items.length}:itemCount: items`;
       * ```
       *
       * **Escaping colon markers**
       *
       * If you need to use a `:` character directly at the start of a tagged string that has no
       * metadata block, or directly after a substitution expression that has no name you must escape
       * the `:` by preceding it with a backslash:
       *
       * For example:
       *
       * ```ts
       * // message has a metadata block so no need to escape colon
       * $localize `:some description::this message starts with a colon (:)`;
       * // no metadata block so the colon must be escaped
       * $localize `\:this message starts with a colon (:)`;
       * ```
       *
       * ```ts
       * // named substitution so no need to escape colon
       * $localize `${label}:label:: ${}`
       * // anonymous substitution so colon must be escaped
       * $localize `${label}\: ${}`
       * ```
       *
       * **Processing localized strings:**
       *
       * There are three scenarios:
       *
       * * **compile-time inlining**: the `$localize` tag is transformed at compile time by a
       * transpiler, removing the tag and replacing the template literal string with a translated
       * literal string from a collection of translations provided to the transpilation tool.
       *
       * * **run-time evaluation**: the `$localize` tag is a run-time function that replaces and
       * reorders the parts (static strings and expressions) of the template literal string with strings
       * from a collection of translations loaded at run-time.
       *
       * * **pass-through evaluation**: the `$localize` tag is a run-time function that simply evaluates
       * the original template literal string without applying any translations to the parts. This
       * version is used during development or where there is no need to translate the localized
       * template literals.
       * @param messageParts a collection of the static parts of the template string.
       * @param expressions a collection of the values of each placeholder in the template string.
       * @returns the translated string, with the `messageParts` and `expressions` interleaved together.
       */


      var $localize = function $localize(messageParts) {
        for (var _len8 = arguments.length, expressions = new Array(_len8 > 1 ? _len8 - 1 : 0), _key9 = 1; _key9 < _len8; _key9++) {
          expressions[_key9 - 1] = arguments[_key9];
        }

        if ($localize.translate) {
          // Don't use array expansion here to avoid the compiler adding `__read()` helper unnecessarily.
          var translation = $localize.translate(messageParts, expressions);
          messageParts = translation[0];
          expressions = translation[1];
        }

        var message = stripBlock(messageParts[0], messageParts.raw[0]);

        for (var i = 1; i < messageParts.length; i++) {
          message += expressions[i - 1] + stripBlock(messageParts[i], messageParts.raw[i]);
        }

        return message;
      };

      var BLOCK_MARKER = ':';
      /**
       * Strip a delimited "block" from the start of the `messagePart`, if it is found.
       *
       * If a marker character (:) actually appears in the content at the start of a tagged string or
       * after a substitution expression, where a block has not been provided the character must be
       * escaped with a backslash, `\:`. This function checks for this by looking at the `raw`
       * messagePart, which should still contain the backslash.
       *
       * @param messagePart The cooked message part to process.
       * @param rawMessagePart The raw message part to check.
       * @returns the message part with the placeholder name stripped, if found.
       * @throws an error if the block is unterminated
       */

      function stripBlock(messagePart, rawMessagePart) {
        return rawMessagePart.charAt(0) === BLOCK_MARKER ? messagePart.substring(findEndOfBlock(messagePart, rawMessagePart) + 1) : messagePart;
      }
      /**
       * Find the end of a "marked block" indicated by the first non-escaped colon.
       *
       * @param cooked The cooked string (where escaped chars have been processed)
       * @param raw The raw string (where escape sequences are still in place)
       *
       * @returns the index of the end of block marker
       * @throws an error if the block is unterminated
       */


      function findEndOfBlock(cooked, raw) {
        /***********************************************************************************************
         * This function is repeated in `src/utils/messages.ts` and the two should be kept in sync.
         * The reason is that this file is marked as having side-effects, and if we import `messages.ts`
         * into it, the whole of `src/utils` will be included in this bundle and none of the functions
         * will be tree shaken.
         ***********************************************************************************************/
        for (var cookedIndex = 1, rawIndex = 1; cookedIndex < cooked.length; cookedIndex++, rawIndex++) {
          if (raw[rawIndex] === '\\') {
            rawIndex++;
          } else if (cooked[cookedIndex] === BLOCK_MARKER) {
            return cookedIndex;
          }
        }

        throw new Error("Unterminated $localize metadata block in \"".concat(raw, "\"."));
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */
      // Attach $localize to the global context, as a side-effect of this module.


      _global.$localize = $localize; //# sourceMappingURL=init.js.map

      /***/
    },

    /***/
    "N6cJ":
    /*!***************************************************!*\
      !*** ./node_modules/core-js/modules/_metadata.js ***!
      \***************************************************/

    /*! no static exports found */

    /***/
    function N6cJ(module, exports, __webpack_require__) {
      var Map = __webpack_require__(
      /*! ./es6.map */
      "9AAn");

      var $export = __webpack_require__(
      /*! ./_export */
      "XKFU");

      var shared = __webpack_require__(
      /*! ./_shared */
      "VTer")('metadata');

      var store = shared.store || (shared.store = new (__webpack_require__(
      /*! ./es6.weak-map */
      "EK0E"))());

      var getOrCreateMetadataMap = function getOrCreateMetadataMap(target, targetKey, create) {
        var targetMetadata = store.get(target);

        if (!targetMetadata) {
          if (!create) return undefined;
          store.set(target, targetMetadata = new Map());
        }

        var keyMetadata = targetMetadata.get(targetKey);

        if (!keyMetadata) {
          if (!create) return undefined;
          targetMetadata.set(targetKey, keyMetadata = new Map());
        }

        return keyMetadata;
      };

      var ordinaryHasOwnMetadata = function ordinaryHasOwnMetadata(MetadataKey, O, P) {
        var metadataMap = getOrCreateMetadataMap(O, P, false);
        return metadataMap === undefined ? false : metadataMap.has(MetadataKey);
      };

      var ordinaryGetOwnMetadata = function ordinaryGetOwnMetadata(MetadataKey, O, P) {
        var metadataMap = getOrCreateMetadataMap(O, P, false);
        return metadataMap === undefined ? undefined : metadataMap.get(MetadataKey);
      };

      var ordinaryDefineOwnMetadata = function ordinaryDefineOwnMetadata(MetadataKey, MetadataValue, O, P) {
        getOrCreateMetadataMap(O, P, true).set(MetadataKey, MetadataValue);
      };

      var ordinaryOwnMetadataKeys = function ordinaryOwnMetadataKeys(target, targetKey) {
        var metadataMap = getOrCreateMetadataMap(target, targetKey, false);
        var keys = [];
        if (metadataMap) metadataMap.forEach(function (_, key) {
          keys.push(key);
        });
        return keys;
      };

      var toMetaKey = function toMetaKey(it) {
        return it === undefined || typeof it == 'symbol' ? it : String(it);
      };

      var exp = function exp(O) {
        $export($export.S, 'Reflect', O);
      };

      module.exports = {
        store: store,
        map: getOrCreateMetadataMap,
        has: ordinaryHasOwnMetadata,
        get: ordinaryGetOwnMetadata,
        set: ordinaryDefineOwnMetadata,
        keys: ordinaryOwnMetadataKeys,
        key: toMetaKey,
        exp: exp
      };
      /***/
    },

    /***/
    "NIlc":
    /*!******************************************************************************************************************!*\
      !*** ./node_modules/@angular-devkit/build-angular/node_modules/core-js/internals/copy-constructor-properties.js ***!
      \******************************************************************************************************************/

    /*! no static exports found */

    /***/
    function NIlc(module, exports, __webpack_require__) {
      var has = __webpack_require__(
      /*! ../internals/has */
      "OG5q");

      var ownKeys = __webpack_require__(
      /*! ../internals/own-keys */
      "76gj");

      var getOwnPropertyDescriptorModule = __webpack_require__(
      /*! ../internals/object-get-own-property-descriptor */
      "7gGY");

      var definePropertyModule = __webpack_require__(
      /*! ../internals/object-define-property */
      "/Ybd");

      module.exports = function (target, source) {
        var keys = ownKeys(source);
        var defineProperty = definePropertyModule.f;
        var getOwnPropertyDescriptor = getOwnPropertyDescriptorModule.f;

        for (var i = 0; i < keys.length; i++) {
          var key = keys[i];
          if (!has(target, key)) defineProperty(target, key, getOwnPropertyDescriptor(source, key));
        }
      };
      /***/

    },

    /***/
    "NX+v":
    /*!********************************************************************************************************!*\
      !*** ./node_modules/@angular-devkit/build-angular/node_modules/core-js/modules/es.object.to-string.js ***!
      \********************************************************************************************************/

    /*! no static exports found */

    /***/
    function NXV(module, exports, __webpack_require__) {
      var TO_STRING_TAG_SUPPORT = __webpack_require__(
      /*! ../internals/to-string-tag-support */
      "4PyY");

      var redefine = __webpack_require__(
      /*! ../internals/redefine */
      "2MGJ");

      var toString = __webpack_require__(
      /*! ../internals/object-to-string */
      "azxr"); // `Object.prototype.toString` method
      // https://tc39.es/ecma262/#sec-object.prototype.tostring


      if (!TO_STRING_TAG_SUPPORT) {
        redefine(Object.prototype, 'toString', toString, {
          unsafe: true
        });
      }
      /***/

    },

    /***/
    "Neub":
    /*!*************************************************************************************************!*\
      !*** ./node_modules/@angular-devkit/build-angular/node_modules/core-js/internals/a-function.js ***!
      \*************************************************************************************************/

    /*! no static exports found */

    /***/
    function Neub(module, exports) {
      module.exports = function (it) {
        if (typeof it != 'function') {
          throw TypeError(String(it) + ' is not a function');
        }

        return it;
      };
      /***/

    },

    /***/
    "Nvxz":
    /*!*************************************************************************************************!*\
      !*** ./node_modules/@angular-devkit/build-angular/node_modules/core-js/internals/is-integer.js ***!
      \*************************************************************************************************/

    /*! no static exports found */

    /***/
    function Nvxz(module, exports, __webpack_require__) {
      var isObject = __webpack_require__(
      /*! ../internals/is-object */
      "6XUM");

      var floor = Math.floor; // `Number.isInteger` method implementation
      // https://tc39.es/ecma262/#sec-number.isinteger

      module.exports = function isInteger(it) {
        return !isObject(it) && isFinite(it) && floor(it) === it;
      };
      /***/

    },

    /***/
    "O3xq":
    /*!*************************************************************************************************!*\
      !*** ./node_modules/@angular-devkit/build-angular/node_modules/core-js/internals/math-log1p.js ***!
      \*************************************************************************************************/

    /*! no static exports found */

    /***/
    function O3xq(module, exports) {
      var log = Math.log; // `Math.log1p` method implementation
      // https://tc39.es/ecma262/#sec-math.log1p

      module.exports = Math.log1p || function log1p(x) {
        return (x = +x) > -1e-8 && x < 1e-8 ? x - x * x / 2 : log(1 + x);
      };
      /***/

    },

    /***/
    "OG5q":
    /*!******************************************************************************************!*\
      !*** ./node_modules/@angular-devkit/build-angular/node_modules/core-js/internals/has.js ***!
      \******************************************************************************************/

    /*! no static exports found */

    /***/
    function OG5q(module, exports) {
      var hasOwnProperty = {}.hasOwnProperty;

      module.exports = function (it, key) {
        return hasOwnProperty.call(it, key);
      };
      /***/

    },

    /***/
    "OOEz":
    /*!***********************************************************************************************************!*\
      !*** ./node_modules/@angular-devkit/build-angular/node_modules/core-js/modules/es.object.from-entries.js ***!
      \***********************************************************************************************************/

    /*! no static exports found */

    /***/
    function OOEz(module, exports, __webpack_require__) {
      var $ = __webpack_require__(
      /*! ../internals/export */
      "wA6s");

      var iterate = __webpack_require__(
      /*! ../internals/iterate */
      "Rn6E");

      var createProperty = __webpack_require__(
      /*! ../internals/create-property */
      "DYg9"); // `Object.fromEntries` method
      // https://github.com/tc39/proposal-object-from-entries


      $({
        target: 'Object',
        stat: true
      }, {
        fromEntries: function fromEntries(iterable) {
          var obj = {};
          iterate(iterable, function (k, v) {
            createProperty(obj, k, v);
          }, {
            AS_ENTRIES: true
          });
          return obj;
        }
      });
      /***/
    },

    /***/
    "OP3Y":
    /*!*****************************************************!*\
      !*** ./node_modules/core-js/modules/_object-gpo.js ***!
      \*****************************************************/

    /*! no static exports found */

    /***/
    function OP3Y(module, exports, __webpack_require__) {
      // 19.1.2.9 / 15.2.3.2 Object.getPrototypeOf(O)
      var has = __webpack_require__(
      /*! ./_has */
      "aagx");

      var toObject = __webpack_require__(
      /*! ./_to-object */
      "S/j/");

      var IE_PROTO = __webpack_require__(
      /*! ./_shared-key */
      "YTvA")('IE_PROTO');

      var ObjectProto = Object.prototype;

      module.exports = Object.getPrototypeOf || function (O) {
        O = toObject(O);
        if (has(O, IE_PROTO)) return O[IE_PROTO];

        if (typeof O.constructor == 'function' && O instanceof O.constructor) {
          return O.constructor.prototype;
        }

        return O instanceof Object ? ObjectProto : null;
      };
      /***/

    },

    /***/
    "OVXS":
    /*!**********************************************************************************************************!*\
      !*** ./node_modules/@angular-devkit/build-angular/node_modules/core-js/modules/es.math.to-string-tag.js ***!
      \**********************************************************************************************************/

    /*! no static exports found */

    /***/
    function OVXS(module, exports, __webpack_require__) {
      var setToStringTag = __webpack_require__(
      /*! ../internals/set-to-string-tag */
      "shqn"); // Math[@@toStringTag] property
      // https://tc39.es/ecma262/#sec-math-@@tostringtag


      setToStringTag(Math, 'Math', true);
      /***/
    },

    /***/
    "OXtp":
    /*!*****************************************************************************************************!*\
      !*** ./node_modules/@angular-devkit/build-angular/node_modules/core-js/internals/array-includes.js ***!
      \*****************************************************************************************************/

    /*! no static exports found */

    /***/
    function OXtp(module, exports, __webpack_require__) {
      var toIndexedObject = __webpack_require__(
      /*! ../internals/to-indexed-object */
      "EMtK");

      var toLength = __webpack_require__(
      /*! ../internals/to-length */
      "xpLY");

      var toAbsoluteIndex = __webpack_require__(
      /*! ../internals/to-absolute-index */
      "7Oj1"); // `Array.prototype.{ indexOf, includes }` methods implementation


      var createMethod = function createMethod(IS_INCLUDES) {
        return function ($this, el, fromIndex) {
          var O = toIndexedObject($this);
          var length = toLength(O.length);
          var index = toAbsoluteIndex(fromIndex, length);
          var value; // Array#includes uses SameValueZero equality algorithm
          // eslint-disable-next-line no-self-compare

          if (IS_INCLUDES && el != el) while (length > index) {
            value = O[index++]; // eslint-disable-next-line no-self-compare

            if (value != value) return true; // Array#indexOf ignores holes, Array#includes - not
          } else for (; length > index; index++) {
            if ((IS_INCLUDES || index in O) && O[index] === el) return IS_INCLUDES || index || 0;
          }
          return !IS_INCLUDES && -1;
        };
      };

      module.exports = {
        // `Array.prototype.includes` method
        // https://tc39.es/ecma262/#sec-array.prototype.includes
        includes: createMethod(true),
        // `Array.prototype.indexOf` method
        // https://tc39.es/ecma262/#sec-array.prototype.indexof
        indexOf: createMethod(false)
      };
      /***/
    },

    /***/
    "OjQg":
    /*!****************************************************************************************************!*\
      !*** ./node_modules/@angular-devkit/build-angular/node_modules/core-js/internals/dom-iterables.js ***!
      \****************************************************************************************************/

    /*! no static exports found */

    /***/
    function OjQg(module, exports) {
      // iterable DOM collections
      // flag - `iterable` interface - 'entries', 'keys', 'values', 'forEach' methods
      module.exports = {
        CSSRuleList: 0,
        CSSStyleDeclaration: 0,
        CSSValueList: 0,
        ClientRectList: 0,
        DOMRectList: 0,
        DOMStringList: 0,
        DOMTokenList: 1,
        DataTransferItemList: 0,
        FileList: 0,
        HTMLAllCollection: 0,
        HTMLCollection: 0,
        HTMLFormElement: 0,
        HTMLSelectElement: 0,
        MediaList: 0,
        MimeTypeArray: 0,
        NamedNodeMap: 0,
        NodeList: 1,
        PaintRequestList: 0,
        Plugin: 0,
        PluginArray: 0,
        SVGLengthList: 0,
        SVGNumberList: 0,
        SVGPathSegList: 0,
        SVGPointList: 0,
        SVGStringList: 0,
        SVGTransformList: 0,
        SourceBufferList: 0,
        StyleSheetList: 0,
        TextTrackCueList: 0,
        TextTrackList: 0,
        TouchList: 0
      };
      /***/
    },

    /***/
    "Opxb":
    /*!**************************************************************!*\
      !*** ./node_modules/core-js/modules/es7.reflect.metadata.js ***!
      \**************************************************************/

    /*! no static exports found */

    /***/
    function Opxb(module, exports, __webpack_require__) {
      var $metadata = __webpack_require__(
      /*! ./_metadata */
      "N6cJ");

      var anObject = __webpack_require__(
      /*! ./_an-object */
      "y3w9");

      var aFunction = __webpack_require__(
      /*! ./_a-function */
      "2OiF");

      var toMetaKey = $metadata.key;
      var ordinaryDefineOwnMetadata = $metadata.set;
      $metadata.exp({
        metadata: function metadata(metadataKey, metadataValue) {
          return function decorator(target, targetKey) {
            ordinaryDefineOwnMetadata(metadataKey, metadataValue, (targetKey !== undefined ? anObject : aFunction)(target), toMetaKey(targetKey));
          };
        }
      });
      /***/
    },

    /***/
    "Ox9q":
    /*!*******************************************************************************************!*\
      !*** ./node_modules/@angular-devkit/build-angular/node_modules/core-js/internals/task.js ***!
      \*******************************************************************************************/

    /*! no static exports found */

    /***/
    function Ox9q(module, exports, __webpack_require__) {
      var global = __webpack_require__(
      /*! ../internals/global */
      "ocAm");

      var fails = __webpack_require__(
      /*! ../internals/fails */
      "rG8t");

      var bind = __webpack_require__(
      /*! ../internals/function-bind-context */
      "tcQx");

      var html = __webpack_require__(
      /*! ../internals/html */
      "149L");

      var createElement = __webpack_require__(
      /*! ../internals/document-create-element */
      "qx7X");

      var IS_IOS = __webpack_require__(
      /*! ../internals/engine-is-ios */
      "tuHh");

      var IS_NODE = __webpack_require__(
      /*! ../internals/engine-is-node */
      "B43K");

      var location = global.location;
      var set = global.setImmediate;
      var clear = global.clearImmediate;
      var process = global.process;
      var MessageChannel = global.MessageChannel;
      var Dispatch = global.Dispatch;
      var counter = 0;
      var queue = {};
      var ONREADYSTATECHANGE = 'onreadystatechange';
      var defer, channel, port;

      var run = function run(id) {
        // eslint-disable-next-line no-prototype-builtins
        if (queue.hasOwnProperty(id)) {
          var fn = queue[id];
          delete queue[id];
          fn();
        }
      };

      var runner = function runner(id) {
        return function () {
          run(id);
        };
      };

      var listener = function listener(event) {
        run(event.data);
      };

      var post = function post(id) {
        // old engines have not location.origin
        global.postMessage(id + '', location.protocol + '//' + location.host);
      }; // Node.js 0.9+ & IE10+ has setImmediate, otherwise:


      if (!set || !clear) {
        set = function setImmediate(fn) {
          var args = [];
          var i = 1;

          while (arguments.length > i) {
            args.push(arguments[i++]);
          }

          queue[++counter] = function () {
            // eslint-disable-next-line no-new-func
            (typeof fn == 'function' ? fn : Function(fn)).apply(undefined, args);
          };

          defer(counter);
          return counter;
        };

        clear = function clearImmediate(id) {
          delete queue[id];
        }; // Node.js 0.8-


        if (IS_NODE) {
          defer = function defer(id) {
            process.nextTick(runner(id));
          }; // Sphere (JS game engine) Dispatch API

        } else if (Dispatch && Dispatch.now) {
          defer = function defer(id) {
            Dispatch.now(runner(id));
          }; // Browsers with MessageChannel, includes WebWorkers
          // except iOS - https://github.com/zloirock/core-js/issues/624

        } else if (MessageChannel && !IS_IOS) {
          channel = new MessageChannel();
          port = channel.port2;
          channel.port1.onmessage = listener;
          defer = bind(port.postMessage, port, 1); // Browsers with postMessage, skip WebWorkers
          // IE8 has postMessage, but it's sync & typeof its postMessage is 'object'
        } else if (global.addEventListener && typeof postMessage == 'function' && !global.importScripts && location && location.protocol !== 'file:' && !fails(post)) {
          defer = post;
          global.addEventListener('message', listener, false); // IE8-
        } else if (ONREADYSTATECHANGE in createElement('script')) {
          defer = function defer(id) {
            html.appendChild(createElement('script'))[ONREADYSTATECHANGE] = function () {
              html.removeChild(this);
              run(id);
            };
          }; // Rest old browsers

        } else {
          defer = function defer(id) {
            setTimeout(runner(id), 0);
          };
        }
      }

      module.exports = {
        set: set,
        clear: clear
      };
      /***/
    },

    /***/
    "PbJR":
    /*!*************************************************************************************************!*\
      !*** ./node_modules/@angular-devkit/build-angular/node_modules/core-js/modules/es.parse-int.js ***!
      \*************************************************************************************************/

    /*! no static exports found */

    /***/
    function PbJR(module, exports, __webpack_require__) {
      var $ = __webpack_require__(
      /*! ../internals/export */
      "wA6s");

      var parseIntImplementation = __webpack_require__(
      /*! ../internals/number-parse-int */
      "4NCC"); // `parseInt` method
      // https://tc39.es/ecma262/#sec-parseint-string-radix


      $({
        global: true,
        forced: parseInt != parseIntImplementation
      }, {
        parseInt: parseIntImplementation
      });
      /***/
    },

    /***/
    "Pf6x":
    /*!***************************************************************************************************!*\
      !*** ./node_modules/@angular-devkit/build-angular/node_modules/core-js/modules/es.math.fround.js ***!
      \***************************************************************************************************/

    /*! no static exports found */

    /***/
    function Pf6x(module, exports, __webpack_require__) {
      var $ = __webpack_require__(
      /*! ../internals/export */
      "wA6s");

      var fround = __webpack_require__(
      /*! ../internals/math-fround */
      "48xZ"); // `Math.fround` method
      // https://tc39.es/ecma262/#sec-math.fround


      $({
        target: 'Math',
        stat: true
      }, {
        fround: fround
      });
      /***/
    },

    /***/
    "Pfbg":
    /*!***********************************************************************************************************!*\
      !*** ./node_modules/@angular-devkit/build-angular/node_modules/core-js/modules/es.symbol.has-instance.js ***!
      \***********************************************************************************************************/

    /*! no static exports found */

    /***/
    function Pfbg(module, exports, __webpack_require__) {
      var defineWellKnownSymbol = __webpack_require__(
      /*! ../internals/define-well-known-symbol */
      "94Vg"); // `Symbol.hasInstance` well-known symbol
      // https://tc39.es/ecma262/#sec-symbol.hasinstance


      defineWellKnownSymbol('hasInstance');
      /***/
    },

    /***/
    "PmIt":
    /*!****************************************************************************************************!*\
      !*** ./node_modules/@angular-devkit/build-angular/node_modules/core-js/modules/es.string.split.js ***!
      \****************************************************************************************************/

    /*! no static exports found */

    /***/
    function PmIt(module, exports, __webpack_require__) {
      "use strict";

      var fixRegExpWellKnownSymbolLogic = __webpack_require__(
      /*! ../internals/fix-regexp-well-known-symbol-logic */
      "HSQg");

      var isRegExp = __webpack_require__(
      /*! ../internals/is-regexp */
      "1p6F");

      var anObject = __webpack_require__(
      /*! ../internals/an-object */
      "F26l");

      var requireObjectCoercible = __webpack_require__(
      /*! ../internals/require-object-coercible */
      "hmpk");

      var speciesConstructor = __webpack_require__(
      /*! ../internals/species-constructor */
      "p82S");

      var advanceStringIndex = __webpack_require__(
      /*! ../internals/advance-string-index */
      "dPn5");

      var toLength = __webpack_require__(
      /*! ../internals/to-length */
      "xpLY");

      var callRegExpExec = __webpack_require__(
      /*! ../internals/regexp-exec-abstract */
      "unYP");

      var regexpExec = __webpack_require__(
      /*! ../internals/regexp-exec */
      "qjkP");

      var fails = __webpack_require__(
      /*! ../internals/fails */
      "rG8t");

      var arrayPush = [].push;
      var min = Math.min;
      var MAX_UINT32 = 0xFFFFFFFF; // babel-minify transpiles RegExp('x', 'y') -> /x/y and it causes SyntaxError

      var SUPPORTS_Y = !fails(function () {
        return !RegExp(MAX_UINT32, 'y');
      }); // @@split logic

      fixRegExpWellKnownSymbolLogic('split', 2, function (SPLIT, nativeSplit, maybeCallNative) {
        var internalSplit;

        if ('abbc'.split(/(b)*/)[1] == 'c' || 'test'.split(/(?:)/, -1).length != 4 || 'ab'.split(/(?:ab)*/).length != 2 || '.'.split(/(.?)(.?)/).length != 4 || '.'.split(/()()/).length > 1 || ''.split(/.?/).length) {
          // based on es5-shim implementation, need to rework it
          internalSplit = function internalSplit(separator, limit) {
            var string = String(requireObjectCoercible(this));
            var lim = limit === undefined ? MAX_UINT32 : limit >>> 0;
            if (lim === 0) return [];
            if (separator === undefined) return [string]; // If `separator` is not a regex, use native split

            if (!isRegExp(separator)) {
              return nativeSplit.call(string, separator, lim);
            }

            var output = [];
            var flags = (separator.ignoreCase ? 'i' : '') + (separator.multiline ? 'm' : '') + (separator.unicode ? 'u' : '') + (separator.sticky ? 'y' : '');
            var lastLastIndex = 0; // Make `global` and avoid `lastIndex` issues by working with a copy

            var separatorCopy = new RegExp(separator.source, flags + 'g');
            var match, lastIndex, lastLength;

            while (match = regexpExec.call(separatorCopy, string)) {
              lastIndex = separatorCopy.lastIndex;

              if (lastIndex > lastLastIndex) {
                output.push(string.slice(lastLastIndex, match.index));
                if (match.length > 1 && match.index < string.length) arrayPush.apply(output, match.slice(1));
                lastLength = match[0].length;
                lastLastIndex = lastIndex;
                if (output.length >= lim) break;
              }

              if (separatorCopy.lastIndex === match.index) separatorCopy.lastIndex++; // Avoid an infinite loop
            }

            if (lastLastIndex === string.length) {
              if (lastLength || !separatorCopy.test('')) output.push('');
            } else output.push(string.slice(lastLastIndex));

            return output.length > lim ? output.slice(0, lim) : output;
          }; // Chakra, V8

        } else if ('0'.split(undefined, 0).length) {
          internalSplit = function internalSplit(separator, limit) {
            return separator === undefined && limit === 0 ? [] : nativeSplit.call(this, separator, limit);
          };
        } else internalSplit = nativeSplit;

        return [// `String.prototype.split` method
        // https://tc39.es/ecma262/#sec-string.prototype.split
        function split(separator, limit) {
          var O = requireObjectCoercible(this);
          var splitter = separator == undefined ? undefined : separator[SPLIT];
          return splitter !== undefined ? splitter.call(separator, O, limit) : internalSplit.call(String(O), separator, limit);
        }, // `RegExp.prototype[@@split]` method
        // https://tc39.es/ecma262/#sec-regexp.prototype-@@split
        //
        // NOTE: This cannot be properly polyfilled in engines that don't support
        // the 'y' flag.
        function (regexp, limit) {
          var res = maybeCallNative(internalSplit, regexp, this, limit, internalSplit !== nativeSplit);
          if (res.done) return res.value;
          var rx = anObject(regexp);
          var S = String(this);
          var C = speciesConstructor(rx, RegExp);
          var unicodeMatching = rx.unicode;
          var flags = (rx.ignoreCase ? 'i' : '') + (rx.multiline ? 'm' : '') + (rx.unicode ? 'u' : '') + (SUPPORTS_Y ? 'y' : 'g'); // ^(? + rx + ) is needed, in combination with some S slicing, to
          // simulate the 'y' flag.

          var splitter = new C(SUPPORTS_Y ? rx : '^(?:' + rx.source + ')', flags);
          var lim = limit === undefined ? MAX_UINT32 : limit >>> 0;
          if (lim === 0) return [];
          if (S.length === 0) return callRegExpExec(splitter, S) === null ? [S] : [];
          var p = 0;
          var q = 0;
          var A = [];

          while (q < S.length) {
            splitter.lastIndex = SUPPORTS_Y ? q : 0;
            var z = callRegExpExec(splitter, SUPPORTS_Y ? S : S.slice(q));
            var e;

            if (z === null || (e = min(toLength(splitter.lastIndex + (SUPPORTS_Y ? 0 : q)), S.length)) === p) {
              q = advanceStringIndex(S, q, unicodeMatching);
            } else {
              A.push(S.slice(p, q));
              if (A.length === lim) return A;

              for (var i = 1; i <= z.length - 1; i++) {
                A.push(z[i]);
                if (A.length === lim) return A;
              }

              q = p = e;
            }
          }

          A.push(S.slice(p));
          return A;
        }];
      }, !SUPPORTS_Y);
      /***/
    },

    /***/
    "Q3ne":
    /*!**************************************************************!*\
      !*** ./node_modules/core-js/modules/_array-from-iterable.js ***!
      \**************************************************************/

    /*! no static exports found */

    /***/
    function Q3ne(module, exports, __webpack_require__) {
      var forOf = __webpack_require__(
      /*! ./_for-of */
      "SlkY");

      module.exports = function (iter, ITERATOR) {
        var result = [];
        forOf(iter, false, result.push, result, ITERATOR);
        return result;
      };
      /***/

    },

    /***/
    "Q4jj":
    /*!****************************************************************************************************!*\
      !*** ./node_modules/@angular-devkit/build-angular/node_modules/core-js/modules/es.array.reduce.js ***!
      \****************************************************************************************************/

    /*! no static exports found */

    /***/
    function Q4jj(module, exports, __webpack_require__) {
      "use strict";

      var $ = __webpack_require__(
      /*! ../internals/export */
      "wA6s");

      var $reduce = __webpack_require__(
      /*! ../internals/array-reduce */
      "vyNX").left;

      var arrayMethodIsStrict = __webpack_require__(
      /*! ../internals/array-method-is-strict */
      "6CJb");

      var arrayMethodUsesToLength = __webpack_require__(
      /*! ../internals/array-method-uses-to-length */
      "w2hq");

      var CHROME_VERSION = __webpack_require__(
      /*! ../internals/engine-v8-version */
      "D3bo");

      var IS_NODE = __webpack_require__(
      /*! ../internals/engine-is-node */
      "B43K");

      var STRICT_METHOD = arrayMethodIsStrict('reduce');
      var USES_TO_LENGTH = arrayMethodUsesToLength('reduce', {
        1: 0
      }); // Chrome 80-82 has a critical bug
      // https://bugs.chromium.org/p/chromium/issues/detail?id=1049982

      var CHROME_BUG = !IS_NODE && CHROME_VERSION > 79 && CHROME_VERSION < 83; // `Array.prototype.reduce` method
      // https://tc39.es/ecma262/#sec-array.prototype.reduce

      $({
        target: 'Array',
        proto: true,
        forced: !STRICT_METHOD || !USES_TO_LENGTH || CHROME_BUG
      }, {
        reduce: function reduce(callbackfn
        /* , initialValue */
        ) {
          return $reduce(this, callbackfn, arguments.length, arguments.length > 1 ? arguments[1] : undefined);
        }
      });
      /***/
    },

    /***/
    "QFgE":
    /*!*************************************************************************************************!*\
      !*** ./node_modules/@angular-devkit/build-angular/node_modules/core-js/modules/es.math.imul.js ***!
      \*************************************************************************************************/

    /*! no static exports found */

    /***/
    function QFgE(module, exports, __webpack_require__) {
      var $ = __webpack_require__(
      /*! ../internals/export */
      "wA6s");

      var fails = __webpack_require__(
      /*! ../internals/fails */
      "rG8t");

      var nativeImul = Math.imul;
      var FORCED = fails(function () {
        return nativeImul(0xFFFFFFFF, 5) != -5 || nativeImul.length != 2;
      }); // `Math.imul` method
      // https://tc39.es/ecma262/#sec-math.imul
      // some WebKit versions fails with big numbers, some has wrong arity

      $({
        target: 'Math',
        stat: true,
        forced: FORCED
      }, {
        imul: function imul(x, y) {
          var UINT16 = 0xFFFF;
          var xn = +x;
          var yn = +y;
          var xl = UINT16 & xn;
          var yl = UINT16 & yn;
          return 0 | xl * yl + ((UINT16 & xn >>> 16) * yl + xl * (UINT16 & yn >>> 16) << 16 >>> 0);
        }
      });
      /***/
    },

    /***/
    "QUoj":
    /*!*****************************************************************************************************!*\
      !*** ./node_modules/@angular-devkit/build-angular/node_modules/core-js/modules/es.string.anchor.js ***!
      \*****************************************************************************************************/

    /*! no static exports found */

    /***/
    function QUoj(module, exports, __webpack_require__) {
      "use strict";

      var $ = __webpack_require__(
      /*! ../internals/export */
      "wA6s");

      var createHTML = __webpack_require__(
      /*! ../internals/create-html */
      "uoca");

      var forcedStringHTMLMethod = __webpack_require__(
      /*! ../internals/string-html-forced */
      "d8Sw"); // `String.prototype.anchor` method
      // https://tc39.es/ecma262/#sec-string.prototype.anchor


      $({
        target: 'String',
        proto: true,
        forced: forcedStringHTMLMethod('anchor')
      }, {
        anchor: function anchor(name) {
          return createHTML(this, 'a', 'name', name);
        }
      });
      /***/
    },

    /***/
    "QVG+":
    /*!********************************************************************************************************!*\
      !*** ./node_modules/@angular-devkit/build-angular/node_modules/core-js/modules/es.object.is-sealed.js ***!
      \********************************************************************************************************/

    /*! no static exports found */

    /***/
    function QVG(module, exports, __webpack_require__) {
      var $ = __webpack_require__(
      /*! ../internals/export */
      "wA6s");

      var fails = __webpack_require__(
      /*! ../internals/fails */
      "rG8t");

      var isObject = __webpack_require__(
      /*! ../internals/is-object */
      "6XUM");

      var nativeIsSealed = Object.isSealed;
      var FAILS_ON_PRIMITIVES = fails(function () {
        nativeIsSealed(1);
      }); // `Object.isSealed` method
      // https://tc39.es/ecma262/#sec-object.issealed

      $({
        target: 'Object',
        stat: true,
        forced: FAILS_ON_PRIMITIVES
      }, {
        isSealed: function isSealed(it) {
          return isObject(it) ? nativeIsSealed ? nativeIsSealed(it) : false : true;
        }
      });
      /***/
    },

    /***/
    "QaDb":
    /*!******************************************************!*\
      !*** ./node_modules/core-js/modules/_iter-create.js ***!
      \******************************************************/

    /*! no static exports found */

    /***/
    function QaDb(module, exports, __webpack_require__) {
      "use strict";

      var create = __webpack_require__(
      /*! ./_object-create */
      "Kuth");

      var descriptor = __webpack_require__(
      /*! ./_property-desc */
      "RjD/");

      var setToStringTag = __webpack_require__(
      /*! ./_set-to-string-tag */
      "fyDq");

      var IteratorPrototype = {}; // 25.1.2.1.1 %IteratorPrototype%[@@iterator]()

      __webpack_require__(
      /*! ./_hide */
      "Mukb")(IteratorPrototype, __webpack_require__(
      /*! ./_wks */
      "K0xU")('iterator'), function () {
        return this;
      });

      module.exports = function (Constructor, NAME, next) {
        Constructor.prototype = create(IteratorPrototype, {
          next: descriptor(1, next)
        });
        setToStringTag(Constructor, NAME + ' Iterator');
      };
      /***/

    },

    /***/
    "QcXc":
    /*!*************************************************************************************************!*\
      !*** ./node_modules/@angular-devkit/build-angular/node_modules/core-js/internals/string-pad.js ***!
      \*************************************************************************************************/

    /*! no static exports found */

    /***/
    function QcXc(module, exports, __webpack_require__) {
      // https://github.com/tc39/proposal-string-pad-start-end
      var toLength = __webpack_require__(
      /*! ../internals/to-length */
      "xpLY");

      var repeat = __webpack_require__(
      /*! ../internals/string-repeat */
      "EMWV");

      var requireObjectCoercible = __webpack_require__(
      /*! ../internals/require-object-coercible */
      "hmpk");

      var ceil = Math.ceil; // `String.prototype.{ padStart, padEnd }` methods implementation

      var createMethod = function createMethod(IS_END) {
        return function ($this, maxLength, fillString) {
          var S = String(requireObjectCoercible($this));
          var stringLength = S.length;
          var fillStr = fillString === undefined ? ' ' : String(fillString);
          var intMaxLength = toLength(maxLength);
          var fillLen, stringFiller;
          if (intMaxLength <= stringLength || fillStr == '') return S;
          fillLen = intMaxLength - stringLength;
          stringFiller = repeat.call(fillStr, ceil(fillLen / fillStr.length));
          if (stringFiller.length > fillLen) stringFiller = stringFiller.slice(0, fillLen);
          return IS_END ? S + stringFiller : stringFiller + S;
        };
      };

      module.exports = {
        // `String.prototype.padStart` method
        // https://tc39.es/ecma262/#sec-string.prototype.padstart
        start: createMethod(false),
        // `String.prototype.padEnd` method
        // https://tc39.es/ecma262/#sec-string.prototype.padend
        end: createMethod(true)
      };
      /***/
    },

    /***/
    "R0gw":
    /*!**************************************************!*\
      !*** ./node_modules/zone.js/dist/zone-legacy.js ***!
      \**************************************************/

    /*! no static exports found */

    /***/
    function R0gw(module, exports, __webpack_require__) {
      "use strict";

      var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;
      /**
       * @license Angular v12.0.0-next.0
       * (c) 2010-2020 Google LLC. https://angular.io/
       * License: MIT
       */


      (function (factory) {
        true ? !(__WEBPACK_AMD_DEFINE_FACTORY__ = factory, __WEBPACK_AMD_DEFINE_RESULT__ = typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? __WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module) : __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : undefined;
      })(function () {
        'use strict';
        /**
         * @license
         * Copyright Google LLC All Rights Reserved.
         *
         * Use of this source code is governed by an MIT-style license that can be
         * found in the LICENSE file at https://angular.io/license
         */

        /*
         * This is necessary for Chrome and Chrome mobile, to enable
         * things like redefining `createdCallback` on an element.
         */

        var zoneSymbol;

        var _defineProperty;

        var _getOwnPropertyDescriptor;

        var _create;

        var unconfigurablesKey;

        function propertyPatch() {
          zoneSymbol = Zone.__symbol__;
          _defineProperty = Object[zoneSymbol('defineProperty')] = Object.defineProperty;
          _getOwnPropertyDescriptor = Object[zoneSymbol('getOwnPropertyDescriptor')] = Object.getOwnPropertyDescriptor;
          _create = Object.create;
          unconfigurablesKey = zoneSymbol('unconfigurables');

          Object.defineProperty = function (obj, prop, desc) {
            if (isUnconfigurable(obj, prop)) {
              throw new TypeError('Cannot assign to read only property \'' + prop + '\' of ' + obj);
            }

            var originalConfigurableFlag = desc.configurable;

            if (prop !== 'prototype') {
              desc = rewriteDescriptor(obj, prop, desc);
            }

            return _tryDefineProperty(obj, prop, desc, originalConfigurableFlag);
          };

          Object.defineProperties = function (obj, props) {
            Object.keys(props).forEach(function (prop) {
              Object.defineProperty(obj, prop, props[prop]);
            });
            return obj;
          };

          Object.create = function (obj, proto) {
            if (typeof proto === 'object' && !Object.isFrozen(proto)) {
              Object.keys(proto).forEach(function (prop) {
                proto[prop] = rewriteDescriptor(obj, prop, proto[prop]);
              });
            }

            return _create(obj, proto);
          };

          Object.getOwnPropertyDescriptor = function (obj, prop) {
            var desc = _getOwnPropertyDescriptor(obj, prop);

            if (desc && isUnconfigurable(obj, prop)) {
              desc.configurable = false;
            }

            return desc;
          };
        }

        function _redefineProperty(obj, prop, desc) {
          var originalConfigurableFlag = desc.configurable;
          desc = rewriteDescriptor(obj, prop, desc);
          return _tryDefineProperty(obj, prop, desc, originalConfigurableFlag);
        }

        function isUnconfigurable(obj, prop) {
          return obj && obj[unconfigurablesKey] && obj[unconfigurablesKey][prop];
        }

        function rewriteDescriptor(obj, prop, desc) {
          // issue-927, if the desc is frozen, don't try to change the desc
          if (!Object.isFrozen(desc)) {
            desc.configurable = true;
          }

          if (!desc.configurable) {
            // issue-927, if the obj is frozen, don't try to set the desc to obj
            if (!obj[unconfigurablesKey] && !Object.isFrozen(obj)) {
              _defineProperty(obj, unconfigurablesKey, {
                writable: true,
                value: {}
              });
            }

            if (obj[unconfigurablesKey]) {
              obj[unconfigurablesKey][prop] = true;
            }
          }

          return desc;
        }

        function _tryDefineProperty(obj, prop, desc, originalConfigurableFlag) {
          try {
            return _defineProperty(obj, prop, desc);
          } catch (error) {
            if (desc.configurable) {
              // In case of errors, when the configurable flag was likely set by rewriteDescriptor(), let's
              // retry with the original flag value
              if (typeof originalConfigurableFlag == 'undefined') {
                delete desc.configurable;
              } else {
                desc.configurable = originalConfigurableFlag;
              }

              try {
                return _defineProperty(obj, prop, desc);
              } catch (error) {
                var swallowError = false;

                if (prop === 'createdCallback' || prop === 'attachedCallback' || prop === 'detachedCallback' || prop === 'attributeChangedCallback') {
                  // We only swallow the error in registerElement patch
                  // this is the work around since some applications
                  // fail if we throw the error
                  swallowError = true;
                }

                if (!swallowError) {
                  throw error;
                } // TODO: @JiaLiPassion, Some application such as `registerElement` patch
                // still need to swallow the error, in the future after these applications
                // are updated, the following logic can be removed.


                var descJson = null;

                try {
                  descJson = JSON.stringify(desc);
                } catch (error) {
                  descJson = desc.toString();
                }

                console.log("Attempting to configure '" + prop + "' with descriptor '" + descJson + "' on object '" + obj + "' and got error, giving up: " + error);
              }
            } else {
              throw error;
            }
          }
        }
        /**
         * @license
         * Copyright Google LLC All Rights Reserved.
         *
         * Use of this source code is governed by an MIT-style license that can be
         * found in the LICENSE file at https://angular.io/license
         */


        function eventTargetLegacyPatch(_global, api) {
          var _a = api.getGlobalObjects(),
              eventNames = _a.eventNames,
              globalSources = _a.globalSources,
              zoneSymbolEventNames = _a.zoneSymbolEventNames,
              TRUE_STR = _a.TRUE_STR,
              FALSE_STR = _a.FALSE_STR,
              ZONE_SYMBOL_PREFIX = _a.ZONE_SYMBOL_PREFIX;

          var WTF_ISSUE_555 = 'Anchor,Area,Audio,BR,Base,BaseFont,Body,Button,Canvas,Content,DList,Directory,Div,Embed,FieldSet,Font,Form,Frame,FrameSet,HR,Head,Heading,Html,IFrame,Image,Input,Keygen,LI,Label,Legend,Link,Map,Marquee,Media,Menu,Meta,Meter,Mod,OList,Object,OptGroup,Option,Output,Paragraph,Pre,Progress,Quote,Script,Select,Source,Span,Style,TableCaption,TableCell,TableCol,Table,TableRow,TableSection,TextArea,Title,Track,UList,Unknown,Video';
          var NO_EVENT_TARGET = 'ApplicationCache,EventSource,FileReader,InputMethodContext,MediaController,MessagePort,Node,Performance,SVGElementInstance,SharedWorker,TextTrack,TextTrackCue,TextTrackList,WebKitNamedFlow,Window,Worker,WorkerGlobalScope,XMLHttpRequest,XMLHttpRequestEventTarget,XMLHttpRequestUpload,IDBRequest,IDBOpenDBRequest,IDBDatabase,IDBTransaction,IDBCursor,DBIndex,WebSocket'.split(',');
          var EVENT_TARGET = 'EventTarget';
          var apis = [];
          var isWtf = _global['wtf'];
          var WTF_ISSUE_555_ARRAY = WTF_ISSUE_555.split(',');

          if (isWtf) {
            // Workaround for: https://github.com/google/tracing-framework/issues/555
            apis = WTF_ISSUE_555_ARRAY.map(function (v) {
              return 'HTML' + v + 'Element';
            }).concat(NO_EVENT_TARGET);
          } else if (_global[EVENT_TARGET]) {
            apis.push(EVENT_TARGET);
          } else {
            // Note: EventTarget is not available in all browsers,
            // if it's not available, we instead patch the APIs in the IDL that inherit from EventTarget
            apis = NO_EVENT_TARGET;
          }

          var isDisableIECheck = _global['__Zone_disable_IE_check'] || false;
          var isEnableCrossContextCheck = _global['__Zone_enable_cross_context_check'] || false;
          var ieOrEdge = api.isIEOrEdge();
          var ADD_EVENT_LISTENER_SOURCE = '.addEventListener:';
          var FUNCTION_WRAPPER = '[object FunctionWrapper]';
          var BROWSER_TOOLS = 'function __BROWSERTOOLS_CONSOLE_SAFEFUNC() { [native code] }';
          var pointerEventsMap = {
            'MSPointerCancel': 'pointercancel',
            'MSPointerDown': 'pointerdown',
            'MSPointerEnter': 'pointerenter',
            'MSPointerHover': 'pointerhover',
            'MSPointerLeave': 'pointerleave',
            'MSPointerMove': 'pointermove',
            'MSPointerOut': 'pointerout',
            'MSPointerOver': 'pointerover',
            'MSPointerUp': 'pointerup'
          }; //  predefine all __zone_symbol__ + eventName + true/false string

          for (var i = 0; i < eventNames.length; i++) {
            var eventName = eventNames[i];
            var falseEventName = eventName + FALSE_STR;
            var trueEventName = eventName + TRUE_STR;
            var symbol = ZONE_SYMBOL_PREFIX + falseEventName;
            var symbolCapture = ZONE_SYMBOL_PREFIX + trueEventName;
            zoneSymbolEventNames[eventName] = {};
            zoneSymbolEventNames[eventName][FALSE_STR] = symbol;
            zoneSymbolEventNames[eventName][TRUE_STR] = symbolCapture;
          } //  predefine all task.source string


          for (var i = 0; i < WTF_ISSUE_555_ARRAY.length; i++) {
            var target = WTF_ISSUE_555_ARRAY[i];
            var targets = globalSources[target] = {};

            for (var j = 0; j < eventNames.length; j++) {
              var eventName = eventNames[j];
              targets[eventName] = target + ADD_EVENT_LISTENER_SOURCE + eventName;
            }
          }

          var checkIEAndCrossContext = function checkIEAndCrossContext(nativeDelegate, delegate, target, args) {
            if (!isDisableIECheck && ieOrEdge) {
              if (isEnableCrossContextCheck) {
                try {
                  var testString = delegate.toString();

                  if (testString === FUNCTION_WRAPPER || testString == BROWSER_TOOLS) {
                    nativeDelegate.apply(target, args);
                    return false;
                  }
                } catch (error) {
                  nativeDelegate.apply(target, args);
                  return false;
                }
              } else {
                var testString = delegate.toString();

                if (testString === FUNCTION_WRAPPER || testString == BROWSER_TOOLS) {
                  nativeDelegate.apply(target, args);
                  return false;
                }
              }
            } else if (isEnableCrossContextCheck) {
              try {
                delegate.toString();
              } catch (error) {
                nativeDelegate.apply(target, args);
                return false;
              }
            }

            return true;
          };

          var apiTypes = [];

          for (var i = 0; i < apis.length; i++) {
            var type = _global[apis[i]];
            apiTypes.push(type && type.prototype);
          } // vh is validateHandler to check event handler
          // is valid or not(for security check)


          api.patchEventTarget(_global, apiTypes, {
            vh: checkIEAndCrossContext,
            transferEventName: function transferEventName(eventName) {
              var pointerEventName = pointerEventsMap[eventName];
              return pointerEventName || eventName;
            }
          });
          Zone[api.symbol('patchEventTarget')] = !!_global[EVENT_TARGET];
          return true;
        }
        /**
         * @license
         * Copyright Google LLC All Rights Reserved.
         *
         * Use of this source code is governed by an MIT-style license that can be
         * found in the LICENSE file at https://angular.io/license
         */
        // we have to patch the instance since the proto is non-configurable


        function apply(api, _global) {
          var _a = api.getGlobalObjects(),
              ADD_EVENT_LISTENER_STR = _a.ADD_EVENT_LISTENER_STR,
              REMOVE_EVENT_LISTENER_STR = _a.REMOVE_EVENT_LISTENER_STR;

          var WS = _global.WebSocket; // On Safari window.EventTarget doesn't exist so need to patch WS add/removeEventListener
          // On older Chrome, no need since EventTarget was already patched

          if (!_global.EventTarget) {
            api.patchEventTarget(_global, [WS.prototype]);
          }

          _global.WebSocket = function (x, y) {
            var socket = arguments.length > 1 ? new WS(x, y) : new WS(x);
            var proxySocket;
            var proxySocketProto; // Safari 7.0 has non-configurable own 'onmessage' and friends properties on the socket instance

            var onmessageDesc = api.ObjectGetOwnPropertyDescriptor(socket, 'onmessage');

            if (onmessageDesc && onmessageDesc.configurable === false) {
              proxySocket = api.ObjectCreate(socket); // socket have own property descriptor 'onopen', 'onmessage', 'onclose', 'onerror'
              // but proxySocket not, so we will keep socket as prototype and pass it to
              // patchOnProperties method

              proxySocketProto = socket;
              [ADD_EVENT_LISTENER_STR, REMOVE_EVENT_LISTENER_STR, 'send', 'close'].forEach(function (propName) {
                proxySocket[propName] = function () {
                  var args = api.ArraySlice.call(arguments);

                  if (propName === ADD_EVENT_LISTENER_STR || propName === REMOVE_EVENT_LISTENER_STR) {
                    var eventName = args.length > 0 ? args[0] : undefined;

                    if (eventName) {
                      var propertySymbol = Zone.__symbol__('ON_PROPERTY' + eventName);

                      socket[propertySymbol] = proxySocket[propertySymbol];
                    }
                  }

                  return socket[propName].apply(socket, args);
                };
              });
            } else {
              // we can patch the real socket
              proxySocket = socket;
            }

            api.patchOnProperties(proxySocket, ['close', 'error', 'message', 'open'], proxySocketProto);
            return proxySocket;
          };

          var globalWebSocket = _global['WebSocket'];

          for (var prop in WS) {
            globalWebSocket[prop] = WS[prop];
          }
        }
        /**
         * @license
         * Copyright Google LLC All Rights Reserved.
         *
         * Use of this source code is governed by an MIT-style license that can be
         * found in the LICENSE file at https://angular.io/license
         */


        function propertyDescriptorLegacyPatch(api, _global) {
          var _a = api.getGlobalObjects(),
              isNode = _a.isNode,
              isMix = _a.isMix;

          if (isNode && !isMix) {
            return;
          }

          if (!canPatchViaPropertyDescriptor(api, _global)) {
            var supportsWebSocket = typeof WebSocket !== 'undefined'; // Safari, Android browsers (Jelly Bean)

            patchViaCapturingAllTheEvents(api);
            api.patchClass('XMLHttpRequest');

            if (supportsWebSocket) {
              apply(api, _global);
            }

            Zone[api.symbol('patchEvents')] = true;
          }
        }

        function canPatchViaPropertyDescriptor(api, _global) {
          var _a = api.getGlobalObjects(),
              isBrowser = _a.isBrowser,
              isMix = _a.isMix;

          if ((isBrowser || isMix) && !api.ObjectGetOwnPropertyDescriptor(HTMLElement.prototype, 'onclick') && typeof Element !== 'undefined') {
            // WebKit https://bugs.webkit.org/show_bug.cgi?id=134364
            // IDL interface attributes are not configurable
            var desc = api.ObjectGetOwnPropertyDescriptor(Element.prototype, 'onclick');
            if (desc && !desc.configurable) return false; // try to use onclick to detect whether we can patch via propertyDescriptor
            // because XMLHttpRequest is not available in service worker

            if (desc) {
              api.ObjectDefineProperty(Element.prototype, 'onclick', {
                enumerable: true,
                configurable: true,
                get: function get() {
                  return true;
                }
              });
              var div = document.createElement('div');
              var result = !!div.onclick;
              api.ObjectDefineProperty(Element.prototype, 'onclick', desc);
              return result;
            }
          }

          var XMLHttpRequest = _global['XMLHttpRequest'];

          if (!XMLHttpRequest) {
            // XMLHttpRequest is not available in service worker
            return false;
          }

          var ON_READY_STATE_CHANGE = 'onreadystatechange';
          var XMLHttpRequestPrototype = XMLHttpRequest.prototype;
          var xhrDesc = api.ObjectGetOwnPropertyDescriptor(XMLHttpRequestPrototype, ON_READY_STATE_CHANGE); // add enumerable and configurable here because in opera
          // by default XMLHttpRequest.prototype.onreadystatechange is undefined
          // without adding enumerable and configurable will cause onreadystatechange
          // non-configurable
          // and if XMLHttpRequest.prototype.onreadystatechange is undefined,
          // we should set a real desc instead a fake one

          if (xhrDesc) {
            api.ObjectDefineProperty(XMLHttpRequestPrototype, ON_READY_STATE_CHANGE, {
              enumerable: true,
              configurable: true,
              get: function get() {
                return true;
              }
            });
            var req = new XMLHttpRequest();
            var result = !!req.onreadystatechange; // restore original desc

            api.ObjectDefineProperty(XMLHttpRequestPrototype, ON_READY_STATE_CHANGE, xhrDesc || {});
            return result;
          } else {
            var SYMBOL_FAKE_ONREADYSTATECHANGE_1 = api.symbol('fake');
            api.ObjectDefineProperty(XMLHttpRequestPrototype, ON_READY_STATE_CHANGE, {
              enumerable: true,
              configurable: true,
              get: function get() {
                return this[SYMBOL_FAKE_ONREADYSTATECHANGE_1];
              },
              set: function set(value) {
                this[SYMBOL_FAKE_ONREADYSTATECHANGE_1] = value;
              }
            });
            var req = new XMLHttpRequest();

            var detectFunc = function detectFunc() {};

            req.onreadystatechange = detectFunc;
            var result = req[SYMBOL_FAKE_ONREADYSTATECHANGE_1] === detectFunc;
            req.onreadystatechange = null;
            return result;
          }
        } // Whenever any eventListener fires, we check the eventListener target and all parents
        // for `onwhatever` properties and replace them with zone-bound functions
        // - Chrome (for now)


        function patchViaCapturingAllTheEvents(api) {
          var eventNames = api.getGlobalObjects().eventNames;
          var unboundKey = api.symbol('unbound');

          var _loop_1 = function _loop_1(i) {
            var property = eventNames[i];
            var onproperty = 'on' + property;
            self.addEventListener(property, function (event) {
              var elt = event.target,
                  bound,
                  source;

              if (elt) {
                source = elt.constructor['name'] + '.' + onproperty;
              } else {
                source = 'unknown.' + onproperty;
              }

              while (elt) {
                if (elt[onproperty] && !elt[onproperty][unboundKey]) {
                  bound = api.wrapWithCurrentZone(elt[onproperty], source);
                  bound[unboundKey] = elt[onproperty];
                  elt[onproperty] = bound;
                }

                elt = elt.parentElement;
              }
            }, true);
          };

          for (var i = 0; i < eventNames.length; i++) {
            _loop_1(i);
          }
        }
        /**
         * @license
         * Copyright Google LLC All Rights Reserved.
         *
         * Use of this source code is governed by an MIT-style license that can be
         * found in the LICENSE file at https://angular.io/license
         */


        function registerElementPatch(_global, api) {
          var _a = api.getGlobalObjects(),
              isBrowser = _a.isBrowser,
              isMix = _a.isMix;

          if (!isBrowser && !isMix || !('registerElement' in _global.document)) {
            return;
          }

          var callbacks = ['createdCallback', 'attachedCallback', 'detachedCallback', 'attributeChangedCallback'];
          api.patchCallbacks(api, document, 'Document', 'registerElement', callbacks);
        }
        /**
         * @license
         * Copyright Google LLC All Rights Reserved.
         *
         * Use of this source code is governed by an MIT-style license that can be
         * found in the LICENSE file at https://angular.io/license
         */


        (function (_global) {
          var symbolPrefix = _global['__Zone_symbol_prefix'] || '__zone_symbol__';

          function __symbol__(name) {
            return symbolPrefix + name;
          }

          _global[__symbol__('legacyPatch')] = function () {
            var Zone = _global['Zone'];

            Zone.__load_patch('defineProperty', function (global, Zone, api) {
              api._redefineProperty = _redefineProperty;
              propertyPatch();
            });

            Zone.__load_patch('registerElement', function (global, Zone, api) {
              registerElementPatch(global, api);
            });

            Zone.__load_patch('EventTargetLegacy', function (global, Zone, api) {
              eventTargetLegacyPatch(global, api);
              propertyDescriptorLegacyPatch(api, global);
            });
          };
        })(typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {});
      });
      /***/

    },

    /***/
    "RCvO":
    /*!*****************************************************************************************************!*\
      !*** ./node_modules/@angular-devkit/build-angular/node_modules/core-js/modules/es.object.create.js ***!
      \*****************************************************************************************************/

    /*! no static exports found */

    /***/
    function RCvO(module, exports, __webpack_require__) {
      var $ = __webpack_require__(
      /*! ../internals/export */
      "wA6s");

      var DESCRIPTORS = __webpack_require__(
      /*! ../internals/descriptors */
      "T69T");

      var create = __webpack_require__(
      /*! ../internals/object-create */
      "2RDa"); // `Object.create` method
      // https://tc39.es/ecma262/#sec-object.create


      $({
        target: 'Object',
        stat: true,
        sham: !DESCRIPTORS
      }, {
        create: create
      });
      /***/
    },

    /***/
    "RYi7":
    /*!*****************************************************!*\
      !*** ./node_modules/core-js/modules/_to-integer.js ***!
      \*****************************************************/

    /*! no static exports found */

    /***/
    function RYi7(module, exports) {
      // 7.1.4 ToInteger
      var ceil = Math.ceil;
      var floor = Math.floor;

      module.exports = function (it) {
        return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);
      };
      /***/

    },

    /***/
    "Rj+b":
    /*!********************************************************************************************************!*\
      !*** ./node_modules/@angular-devkit/build-angular/node_modules/core-js/modules/es.regexp.to-string.js ***!
      \********************************************************************************************************/

    /*! no static exports found */

    /***/
    function RjB(module, exports, __webpack_require__) {
      "use strict";

      var redefine = __webpack_require__(
      /*! ../internals/redefine */
      "2MGJ");

      var anObject = __webpack_require__(
      /*! ../internals/an-object */
      "F26l");

      var fails = __webpack_require__(
      /*! ../internals/fails */
      "rG8t");

      var flags = __webpack_require__(
      /*! ../internals/regexp-flags */
      "x0kV");

      var TO_STRING = 'toString';
      var RegExpPrototype = RegExp.prototype;
      var nativeToString = RegExpPrototype[TO_STRING];
      var NOT_GENERIC = fails(function () {
        return nativeToString.call({
          source: 'a',
          flags: 'b'
        }) != '/a/b';
      }); // FF44- RegExp#toString has a wrong name

      var INCORRECT_NAME = nativeToString.name != TO_STRING; // `RegExp.prototype.toString` method
      // https://tc39.es/ecma262/#sec-regexp.prototype.tostring

      if (NOT_GENERIC || INCORRECT_NAME) {
        redefine(RegExp.prototype, TO_STRING, function toString() {
          var R = anObject(this);
          var p = String(R.source);
          var rf = R.flags;
          var f = String(rf === undefined && R instanceof RegExp && !('flags' in RegExpPrototype) ? flags.call(R) : rf);
          return '/' + p + '/' + f;
        }, {
          unsafe: true
        });
      }
      /***/

    },

    /***/
    "RjD/":
    /*!********************************************************!*\
      !*** ./node_modules/core-js/modules/_property-desc.js ***!
      \********************************************************/

    /*! no static exports found */

    /***/
    function RjD(module, exports) {
      module.exports = function (bitmap, value) {
        return {
          enumerable: !(bitmap & 1),
          configurable: !(bitmap & 2),
          writable: !(bitmap & 4),
          value: value
        };
      };
      /***/

    },

    /***/
    "Rn6E":
    /*!**********************************************************************************************!*\
      !*** ./node_modules/@angular-devkit/build-angular/node_modules/core-js/internals/iterate.js ***!
      \**********************************************************************************************/

    /*! no static exports found */

    /***/
    function Rn6E(module, exports, __webpack_require__) {
      var anObject = __webpack_require__(
      /*! ../internals/an-object */
      "F26l");

      var isArrayIteratorMethod = __webpack_require__(
      /*! ../internals/is-array-iterator-method */
      "5MmU");

      var toLength = __webpack_require__(
      /*! ../internals/to-length */
      "xpLY");

      var bind = __webpack_require__(
      /*! ../internals/function-bind-context */
      "tcQx");

      var getIteratorMethod = __webpack_require__(
      /*! ../internals/get-iterator-method */
      "F/TS");

      var iteratorClose = __webpack_require__(
      /*! ../internals/iterator-close */
      "5zQ0");

      var Result = function Result(stopped, result) {
        this.stopped = stopped;
        this.result = result;
      };

      module.exports = function (iterable, unboundFunction, options) {
        var that = options && options.that;
        var AS_ENTRIES = !!(options && options.AS_ENTRIES);
        var IS_ITERATOR = !!(options && options.IS_ITERATOR);
        var INTERRUPTED = !!(options && options.INTERRUPTED);
        var fn = bind(unboundFunction, that, 1 + AS_ENTRIES + INTERRUPTED);
        var iterator, iterFn, index, length, result, next, step;

        var stop = function stop(condition) {
          if (iterator) iteratorClose(iterator);
          return new Result(true, condition);
        };

        var callFn = function callFn(value) {
          if (AS_ENTRIES) {
            anObject(value);
            return INTERRUPTED ? fn(value[0], value[1], stop) : fn(value[0], value[1]);
          }

          return INTERRUPTED ? fn(value, stop) : fn(value);
        };

        if (IS_ITERATOR) {
          iterator = iterable;
        } else {
          iterFn = getIteratorMethod(iterable);
          if (typeof iterFn != 'function') throw TypeError('Target is not iterable'); // optimisation for array iterators

          if (isArrayIteratorMethod(iterFn)) {
            for (index = 0, length = toLength(iterable.length); length > index; index++) {
              result = callFn(iterable[index]);
              if (result && result instanceof Result) return result;
            }

            return new Result(false);
          }

          iterator = iterFn.call(iterable);
        }

        next = iterator.next;

        while (!(step = next.call(iterator)).done) {
          try {
            result = callFn(step.value);
          } catch (error) {
            iteratorClose(iterator);
            throw error;
          }

          if (typeof result == 'object' && result && result instanceof Result) return result;
        }

        return new Result(false);
      };
      /***/

    },

    /***/
    "S/j/":
    /*!****************************************************!*\
      !*** ./node_modules/core-js/modules/_to-object.js ***!
      \****************************************************/

    /*! no static exports found */

    /***/
    function SJ(module, exports, __webpack_require__) {
      // 7.1.13 ToObject(argument)
      var defined = __webpack_require__(
      /*! ./_defined */
      "vhPU");

      module.exports = function (it) {
        return Object(defined(it));
      };
      /***/

    },

    /***/
    "S3W2":
    /*!******************************************************************************************************!*\
      !*** ./node_modules/@angular-devkit/build-angular/node_modules/core-js/modules/es.symbol.replace.js ***!
      \******************************************************************************************************/

    /*! no static exports found */

    /***/
    function S3W2(module, exports, __webpack_require__) {
      var defineWellKnownSymbol = __webpack_require__(
      /*! ../internals/define-well-known-symbol */
      "94Vg"); // `Symbol.replace` well-known symbol
      // https://tc39.es/ecma262/#sec-symbol.replace


      defineWellKnownSymbol('replace');
      /***/
    },

    /***/
    "S3Yw":
    /*!******************************************************************************************************!*\
      !*** ./node_modules/@angular-devkit/build-angular/node_modules/core-js/modules/es.string.replace.js ***!
      \******************************************************************************************************/

    /*! no static exports found */

    /***/
    function S3Yw(module, exports, __webpack_require__) {
      "use strict";

      var fixRegExpWellKnownSymbolLogic = __webpack_require__(
      /*! ../internals/fix-regexp-well-known-symbol-logic */
      "HSQg");

      var anObject = __webpack_require__(
      /*! ../internals/an-object */
      "F26l");

      var toLength = __webpack_require__(
      /*! ../internals/to-length */
      "xpLY");

      var toInteger = __webpack_require__(
      /*! ../internals/to-integer */
      "vDBE");

      var requireObjectCoercible = __webpack_require__(
      /*! ../internals/require-object-coercible */
      "hmpk");

      var advanceStringIndex = __webpack_require__(
      /*! ../internals/advance-string-index */
      "dPn5");

      var getSubstitution = __webpack_require__(
      /*! ../internals/get-substitution */
      "x+GC");

      var regExpExec = __webpack_require__(
      /*! ../internals/regexp-exec-abstract */
      "unYP");

      var max = Math.max;
      var min = Math.min;

      var maybeToString = function maybeToString(it) {
        return it === undefined ? it : String(it);
      }; // @@replace logic


      fixRegExpWellKnownSymbolLogic('replace', 2, function (REPLACE, nativeReplace, maybeCallNative, reason) {
        var REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE = reason.REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE;
        var REPLACE_KEEPS_$0 = reason.REPLACE_KEEPS_$0;
        var UNSAFE_SUBSTITUTE = REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE ? '$' : '$0';
        return [// `String.prototype.replace` method
        // https://tc39.es/ecma262/#sec-string.prototype.replace
        function replace(searchValue, replaceValue) {
          var O = requireObjectCoercible(this);
          var replacer = searchValue == undefined ? undefined : searchValue[REPLACE];
          return replacer !== undefined ? replacer.call(searchValue, O, replaceValue) : nativeReplace.call(String(O), searchValue, replaceValue);
        }, // `RegExp.prototype[@@replace]` method
        // https://tc39.es/ecma262/#sec-regexp.prototype-@@replace
        function (regexp, replaceValue) {
          if (!REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE && REPLACE_KEEPS_$0 || typeof replaceValue === 'string' && replaceValue.indexOf(UNSAFE_SUBSTITUTE) === -1) {
            var res = maybeCallNative(nativeReplace, regexp, this, replaceValue);
            if (res.done) return res.value;
          }

          var rx = anObject(regexp);
          var S = String(this);
          var functionalReplace = typeof replaceValue === 'function';
          if (!functionalReplace) replaceValue = String(replaceValue);
          var global = rx.global;

          if (global) {
            var fullUnicode = rx.unicode;
            rx.lastIndex = 0;
          }

          var results = [];

          while (true) {
            var result = regExpExec(rx, S);
            if (result === null) break;
            results.push(result);
            if (!global) break;
            var matchStr = String(result[0]);
            if (matchStr === '') rx.lastIndex = advanceStringIndex(S, toLength(rx.lastIndex), fullUnicode);
          }

          var accumulatedResult = '';
          var nextSourcePosition = 0;

          for (var i = 0; i < results.length; i++) {
            result = results[i];
            var matched = String(result[0]);
            var position = max(min(toInteger(result.index), S.length), 0);
            var captures = []; // NOTE: This is equivalent to
            //   captures = result.slice(1).map(maybeToString)
            // but for some reason `nativeSlice.call(result, 1, result.length)` (called in
            // the slice polyfill when slicing native arrays) "doesn't work" in safari 9 and
            // causes a crash (https://pastebin.com/N21QzeQA) when trying to debug it.

            for (var j = 1; j < result.length; j++) {
              captures.push(maybeToString(result[j]));
            }

            var namedCaptures = result.groups;

            if (functionalReplace) {
              var replacerArgs = [matched].concat(captures, position, S);
              if (namedCaptures !== undefined) replacerArgs.push(namedCaptures);
              var replacement = String(replaceValue.apply(undefined, replacerArgs));
            } else {
              replacement = getSubstitution(matched, S, position, captures, namedCaptures, replaceValue);
            }

            if (position >= nextSourcePosition) {
              accumulatedResult += S.slice(nextSourcePosition, position) + replacement;
              nextSourcePosition = position + matched.length;
            }
          }

          return accumulatedResult + S.slice(nextSourcePosition);
        }];
      });
      /***/
    },

    /***/
    "S58s":
    /*!*************************************************************************************************!*\
      !*** ./node_modules/@angular-devkit/build-angular/node_modules/core-js/modules/es.math.cosh.js ***!
      \*************************************************************************************************/

    /*! no static exports found */

    /***/
    function S58s(module, exports, __webpack_require__) {
      var $ = __webpack_require__(
      /*! ../internals/export */
      "wA6s");

      var expm1 = __webpack_require__(
      /*! ../internals/math-expm1 */
      "pn4C");

      var nativeCosh = Math.cosh;
      var abs = Math.abs;
      var E = Math.E; // `Math.cosh` method
      // https://tc39.es/ecma262/#sec-math.cosh

      $({
        target: 'Math',
        stat: true,
        forced: !nativeCosh || nativeCosh(710) === Infinity
      }, {
        cosh: function cosh(x) {
          var t = expm1(abs(x) - 1) + 1;
          return (t + 1 / (t * E * E)) * (E / 2);
        }
      });
      /***/
    },

    /***/
    "SC6u":
    /*!***************************************************************************************************!*\
      !*** ./node_modules/@angular-devkit/build-angular/node_modules/core-js/modules/es.regexp.exec.js ***!
      \***************************************************************************************************/

    /*! no static exports found */

    /***/
    function SC6u(module, exports, __webpack_require__) {
      "use strict";

      var $ = __webpack_require__(
      /*! ../internals/export */
      "wA6s");

      var exec = __webpack_require__(
      /*! ../internals/regexp-exec */
      "qjkP"); // `RegExp.prototype.exec` method
      // https://tc39.es/ecma262/#sec-regexp.prototype.exec


      $({
        target: 'RegExp',
        proto: true,
        forced: /./.exec !== exec
      }, {
        exec: exec
      });
      /***/
    },

    /***/
    "SDMg":
    /*!******************************************************************************************!*\
      !*** ./node_modules/@angular-devkit/build-angular/node_modules/core-js/internals/uid.js ***!
      \******************************************************************************************/

    /*! no static exports found */

    /***/
    function SDMg(module, exports) {
      var id = 0;
      var postfix = Math.random();

      module.exports = function (key) {
        return 'Symbol(' + String(key === undefined ? '' : key) + ')_' + (++id + postfix).toString(36);
      };
      /***/

    },

    /***/
    "SM6+":
    /*!**************************************************************************************************!*\
      !*** ./node_modules/@angular-devkit/build-angular/node_modules/core-js/internals/an-instance.js ***!
      \**************************************************************************************************/

    /*! no static exports found */

    /***/
    function SM6(module, exports) {
      module.exports = function (it, Constructor, name) {
        if (!(it instanceof Constructor)) {
          throw TypeError('Incorrect ' + (name ? name + ' ' : '') + 'invocation');
        }

        return it;
      };
      /***/

    },

    /***/
    "SNUk":
    /*!**********************************************************************************************!*\
      !*** ./node_modules/@angular-devkit/build-angular/node_modules/core-js/modules/es.symbol.js ***!
      \**********************************************************************************************/

    /*! no static exports found */

    /***/
    function SNUk(module, exports, __webpack_require__) {
      "use strict";

      var $ = __webpack_require__(
      /*! ../internals/export */
      "wA6s");

      var global = __webpack_require__(
      /*! ../internals/global */
      "ocAm");

      var getBuiltIn = __webpack_require__(
      /*! ../internals/get-built-in */
      "Ew/G");

      var IS_PURE = __webpack_require__(
      /*! ../internals/is-pure */
      "g9hI");

      var DESCRIPTORS = __webpack_require__(
      /*! ../internals/descriptors */
      "T69T");

      var NATIVE_SYMBOL = __webpack_require__(
      /*! ../internals/native-symbol */
      "U+kB");

      var USE_SYMBOL_AS_UID = __webpack_require__(
      /*! ../internals/use-symbol-as-uid */
      "i85Z");

      var fails = __webpack_require__(
      /*! ../internals/fails */
      "rG8t");

      var has = __webpack_require__(
      /*! ../internals/has */
      "OG5q");

      var isArray = __webpack_require__(
      /*! ../internals/is-array */
      "erNl");

      var isObject = __webpack_require__(
      /*! ../internals/is-object */
      "6XUM");

      var anObject = __webpack_require__(
      /*! ../internals/an-object */
      "F26l");

      var toObject = __webpack_require__(
      /*! ../internals/to-object */
      "VCQ8");

      var toIndexedObject = __webpack_require__(
      /*! ../internals/to-indexed-object */
      "EMtK");

      var toPrimitive = __webpack_require__(
      /*! ../internals/to-primitive */
      "LdO1");

      var createPropertyDescriptor = __webpack_require__(
      /*! ../internals/create-property-descriptor */
      "uSMZ");

      var nativeObjectCreate = __webpack_require__(
      /*! ../internals/object-create */
      "2RDa");

      var objectKeys = __webpack_require__(
      /*! ../internals/object-keys */
      "ZRqE");

      var getOwnPropertyNamesModule = __webpack_require__(
      /*! ../internals/object-get-own-property-names */
      "KkqW");

      var getOwnPropertyNamesExternal = __webpack_require__(
      /*! ../internals/object-get-own-property-names-external */
      "TzEA");

      var getOwnPropertySymbolsModule = __webpack_require__(
      /*! ../internals/object-get-own-property-symbols */
      "busr");

      var getOwnPropertyDescriptorModule = __webpack_require__(
      /*! ../internals/object-get-own-property-descriptor */
      "7gGY");

      var definePropertyModule = __webpack_require__(
      /*! ../internals/object-define-property */
      "/Ybd");

      var propertyIsEnumerableModule = __webpack_require__(
      /*! ../internals/object-property-is-enumerable */
      "gn9T");

      var createNonEnumerableProperty = __webpack_require__(
      /*! ../internals/create-non-enumerable-property */
      "aJMj");

      var redefine = __webpack_require__(
      /*! ../internals/redefine */
      "2MGJ");

      var shared = __webpack_require__(
      /*! ../internals/shared */
      "yIiL");

      var sharedKey = __webpack_require__(
      /*! ../internals/shared-key */
      "/AsP");

      var hiddenKeys = __webpack_require__(
      /*! ../internals/hidden-keys */
      "yQMY");

      var uid = __webpack_require__(
      /*! ../internals/uid */
      "SDMg");

      var wellKnownSymbol = __webpack_require__(
      /*! ../internals/well-known-symbol */
      "m41k");

      var wrappedWellKnownSymbolModule = __webpack_require__(
      /*! ../internals/well-known-symbol-wrapped */
      "aGCb");

      var defineWellKnownSymbol = __webpack_require__(
      /*! ../internals/define-well-known-symbol */
      "94Vg");

      var setToStringTag = __webpack_require__(
      /*! ../internals/set-to-string-tag */
      "shqn");

      var InternalStateModule = __webpack_require__(
      /*! ../internals/internal-state */
      "XH/I");

      var $forEach = __webpack_require__(
      /*! ../internals/array-iteration */
      "kk6e").forEach;

      var HIDDEN = sharedKey('hidden');
      var SYMBOL = 'Symbol';
      var PROTOTYPE = 'prototype';
      var TO_PRIMITIVE = wellKnownSymbol('toPrimitive');
      var setInternalState = InternalStateModule.set;
      var getInternalState = InternalStateModule.getterFor(SYMBOL);
      var ObjectPrototype = Object[PROTOTYPE];
      var $Symbol = global.Symbol;
      var $stringify = getBuiltIn('JSON', 'stringify');
      var nativeGetOwnPropertyDescriptor = getOwnPropertyDescriptorModule.f;
      var nativeDefineProperty = definePropertyModule.f;
      var nativeGetOwnPropertyNames = getOwnPropertyNamesExternal.f;
      var nativePropertyIsEnumerable = propertyIsEnumerableModule.f;
      var AllSymbols = shared('symbols');
      var ObjectPrototypeSymbols = shared('op-symbols');
      var StringToSymbolRegistry = shared('string-to-symbol-registry');
      var SymbolToStringRegistry = shared('symbol-to-string-registry');
      var WellKnownSymbolsStore = shared('wks');
      var QObject = global.QObject; // Don't use setters in Qt Script, https://github.com/zloirock/core-js/issues/173

      var USE_SETTER = !QObject || !QObject[PROTOTYPE] || !QObject[PROTOTYPE].findChild; // fallback for old Android, https://code.google.com/p/v8/issues/detail?id=687

      var setSymbolDescriptor = DESCRIPTORS && fails(function () {
        return nativeObjectCreate(nativeDefineProperty({}, 'a', {
          get: function get() {
            return nativeDefineProperty(this, 'a', {
              value: 7
            }).a;
          }
        })).a != 7;
      }) ? function (O, P, Attributes) {
        var ObjectPrototypeDescriptor = nativeGetOwnPropertyDescriptor(ObjectPrototype, P);
        if (ObjectPrototypeDescriptor) delete ObjectPrototype[P];
        nativeDefineProperty(O, P, Attributes);

        if (ObjectPrototypeDescriptor && O !== ObjectPrototype) {
          nativeDefineProperty(ObjectPrototype, P, ObjectPrototypeDescriptor);
        }
      } : nativeDefineProperty;

      var wrap = function wrap(tag, description) {
        var symbol = AllSymbols[tag] = nativeObjectCreate($Symbol[PROTOTYPE]);
        setInternalState(symbol, {
          type: SYMBOL,
          tag: tag,
          description: description
        });
        if (!DESCRIPTORS) symbol.description = description;
        return symbol;
      };

      var isSymbol = USE_SYMBOL_AS_UID ? function (it) {
        return typeof it == 'symbol';
      } : function (it) {
        return Object(it) instanceof $Symbol;
      };

      var $defineProperty = function defineProperty(O, P, Attributes) {
        if (O === ObjectPrototype) $defineProperty(ObjectPrototypeSymbols, P, Attributes);
        anObject(O);
        var key = toPrimitive(P, true);
        anObject(Attributes);

        if (has(AllSymbols, key)) {
          if (!Attributes.enumerable) {
            if (!has(O, HIDDEN)) nativeDefineProperty(O, HIDDEN, createPropertyDescriptor(1, {}));
            O[HIDDEN][key] = true;
          } else {
            if (has(O, HIDDEN) && O[HIDDEN][key]) O[HIDDEN][key] = false;
            Attributes = nativeObjectCreate(Attributes, {
              enumerable: createPropertyDescriptor(0, false)
            });
          }

          return setSymbolDescriptor(O, key, Attributes);
        }

        return nativeDefineProperty(O, key, Attributes);
      };

      var $defineProperties = function defineProperties(O, Properties) {
        anObject(O);
        var properties = toIndexedObject(Properties);
        var keys = objectKeys(properties).concat($getOwnPropertySymbols(properties));
        $forEach(keys, function (key) {
          if (!DESCRIPTORS || $propertyIsEnumerable.call(properties, key)) $defineProperty(O, key, properties[key]);
        });
        return O;
      };

      var $create = function create(O, Properties) {
        return Properties === undefined ? nativeObjectCreate(O) : $defineProperties(nativeObjectCreate(O), Properties);
      };

      var $propertyIsEnumerable = function propertyIsEnumerable(V) {
        var P = toPrimitive(V, true);
        var enumerable = nativePropertyIsEnumerable.call(this, P);
        if (this === ObjectPrototype && has(AllSymbols, P) && !has(ObjectPrototypeSymbols, P)) return false;
        return enumerable || !has(this, P) || !has(AllSymbols, P) || has(this, HIDDEN) && this[HIDDEN][P] ? enumerable : true;
      };

      var $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(O, P) {
        var it = toIndexedObject(O);
        var key = toPrimitive(P, true);
        if (it === ObjectPrototype && has(AllSymbols, key) && !has(ObjectPrototypeSymbols, key)) return;
        var descriptor = nativeGetOwnPropertyDescriptor(it, key);

        if (descriptor && has(AllSymbols, key) && !(has(it, HIDDEN) && it[HIDDEN][key])) {
          descriptor.enumerable = true;
        }

        return descriptor;
      };

      var $getOwnPropertyNames = function getOwnPropertyNames(O) {
        var names = nativeGetOwnPropertyNames(toIndexedObject(O));
        var result = [];
        $forEach(names, function (key) {
          if (!has(AllSymbols, key) && !has(hiddenKeys, key)) result.push(key);
        });
        return result;
      };

      var $getOwnPropertySymbols = function getOwnPropertySymbols(O) {
        var IS_OBJECT_PROTOTYPE = O === ObjectPrototype;
        var names = nativeGetOwnPropertyNames(IS_OBJECT_PROTOTYPE ? ObjectPrototypeSymbols : toIndexedObject(O));
        var result = [];
        $forEach(names, function (key) {
          if (has(AllSymbols, key) && (!IS_OBJECT_PROTOTYPE || has(ObjectPrototype, key))) {
            result.push(AllSymbols[key]);
          }
        });
        return result;
      }; // `Symbol` constructor
      // https://tc39.es/ecma262/#sec-symbol-constructor


      if (!NATIVE_SYMBOL) {
        $Symbol = function Symbol() {
          if (this instanceof $Symbol) throw TypeError('Symbol is not a constructor');
          var description = !arguments.length || arguments[0] === undefined ? undefined : String(arguments[0]);
          var tag = uid(description);

          var setter = function setter(value) {
            if (this === ObjectPrototype) setter.call(ObjectPrototypeSymbols, value);
            if (has(this, HIDDEN) && has(this[HIDDEN], tag)) this[HIDDEN][tag] = false;
            setSymbolDescriptor(this, tag, createPropertyDescriptor(1, value));
          };

          if (DESCRIPTORS && USE_SETTER) setSymbolDescriptor(ObjectPrototype, tag, {
            configurable: true,
            set: setter
          });
          return wrap(tag, description);
        };

        redefine($Symbol[PROTOTYPE], 'toString', function toString() {
          return getInternalState(this).tag;
        });
        redefine($Symbol, 'withoutSetter', function (description) {
          return wrap(uid(description), description);
        });
        propertyIsEnumerableModule.f = $propertyIsEnumerable;
        definePropertyModule.f = $defineProperty;
        getOwnPropertyDescriptorModule.f = $getOwnPropertyDescriptor;
        getOwnPropertyNamesModule.f = getOwnPropertyNamesExternal.f = $getOwnPropertyNames;
        getOwnPropertySymbolsModule.f = $getOwnPropertySymbols;

        wrappedWellKnownSymbolModule.f = function (name) {
          return wrap(wellKnownSymbol(name), name);
        };

        if (DESCRIPTORS) {
          // https://github.com/tc39/proposal-Symbol-description
          nativeDefineProperty($Symbol[PROTOTYPE], 'description', {
            configurable: true,
            get: function description() {
              return getInternalState(this).description;
            }
          });

          if (!IS_PURE) {
            redefine(ObjectPrototype, 'propertyIsEnumerable', $propertyIsEnumerable, {
              unsafe: true
            });
          }
        }
      }

      $({
        global: true,
        wrap: true,
        forced: !NATIVE_SYMBOL,
        sham: !NATIVE_SYMBOL
      }, {
        Symbol: $Symbol
      });
      $forEach(objectKeys(WellKnownSymbolsStore), function (name) {
        defineWellKnownSymbol(name);
      });
      $({
        target: SYMBOL,
        stat: true,
        forced: !NATIVE_SYMBOL
      }, {
        // `Symbol.for` method
        // https://tc39.es/ecma262/#sec-symbol.for
        'for': function _for(key) {
          var string = String(key);
          if (has(StringToSymbolRegistry, string)) return StringToSymbolRegistry[string];
          var symbol = $Symbol(string);
          StringToSymbolRegistry[string] = symbol;
          SymbolToStringRegistry[symbol] = string;
          return symbol;
        },
        // `Symbol.keyFor` method
        // https://tc39.es/ecma262/#sec-symbol.keyfor
        keyFor: function keyFor(sym) {
          if (!isSymbol(sym)) throw TypeError(sym + ' is not a symbol');
          if (has(SymbolToStringRegistry, sym)) return SymbolToStringRegistry[sym];
        },
        useSetter: function useSetter() {
          USE_SETTER = true;
        },
        useSimple: function useSimple() {
          USE_SETTER = false;
        }
      });
      $({
        target: 'Object',
        stat: true,
        forced: !NATIVE_SYMBOL,
        sham: !DESCRIPTORS
      }, {
        // `Object.create` method
        // https://tc39.es/ecma262/#sec-object.create
        create: $create,
        // `Object.defineProperty` method
        // https://tc39.es/ecma262/#sec-object.defineproperty
        defineProperty: $defineProperty,
        // `Object.defineProperties` method
        // https://tc39.es/ecma262/#sec-object.defineproperties
        defineProperties: $defineProperties,
        // `Object.getOwnPropertyDescriptor` method
        // https://tc39.es/ecma262/#sec-object.getownpropertydescriptors
        getOwnPropertyDescriptor: $getOwnPropertyDescriptor
      });
      $({
        target: 'Object',
        stat: true,
        forced: !NATIVE_SYMBOL
      }, {
        // `Object.getOwnPropertyNames` method
        // https://tc39.es/ecma262/#sec-object.getownpropertynames
        getOwnPropertyNames: $getOwnPropertyNames,
        // `Object.getOwnPropertySymbols` method
        // https://tc39.es/ecma262/#sec-object.getownpropertysymbols
        getOwnPropertySymbols: $getOwnPropertySymbols
      }); // Chrome 38 and 39 `Object.getOwnPropertySymbols` fails on primitives
      // https://bugs.chromium.org/p/v8/issues/detail?id=3443

      $({
        target: 'Object',
        stat: true,
        forced: fails(function () {
          getOwnPropertySymbolsModule.f(1);
        })
      }, {
        getOwnPropertySymbols: function getOwnPropertySymbols(it) {
          return getOwnPropertySymbolsModule.f(toObject(it));
        }
      }); // `JSON.stringify` method behavior with symbols
      // https://tc39.es/ecma262/#sec-json.stringify

      if ($stringify) {
        var FORCED_JSON_STRINGIFY = !NATIVE_SYMBOL || fails(function () {
          var symbol = $Symbol(); // MS Edge converts symbol values to JSON as {}

          return $stringify([symbol]) != '[null]' // WebKit converts symbol values to JSON as null
          || $stringify({
            a: symbol
          }) != '{}' // V8 throws on boxed symbols
          || $stringify(Object(symbol)) != '{}';
        });
        $({
          target: 'JSON',
          stat: true,
          forced: FORCED_JSON_STRINGIFY
        }, {
          // eslint-disable-next-line no-unused-vars
          stringify: function stringify(it, replacer, space) {
            var args = [it];
            var index = 1;
            var $replacer;

            while (arguments.length > index) {
              args.push(arguments[index++]);
            }

            $replacer = replacer;
            if (!isObject(replacer) && it === undefined || isSymbol(it)) return; // IE8 returns string on undefined

            if (!isArray(replacer)) replacer = function replacer(key, value) {
              if (typeof $replacer == 'function') value = $replacer.call(this, key, value);
              if (!isSymbol(value)) return value;
            };
            args[1] = replacer;
            return $stringify.apply(null, args);
          }
        });
      } // `Symbol.prototype[@@toPrimitive]` method
      // https://tc39.es/ecma262/#sec-symbol.prototype-@@toprimitive


      if (!$Symbol[PROTOTYPE][TO_PRIMITIVE]) {
        createNonEnumerableProperty($Symbol[PROTOTYPE], TO_PRIMITIVE, $Symbol[PROTOTYPE].valueOf);
      } // `Symbol.prototype[@@toStringTag]` property
      // https://tc39.es/ecma262/#sec-symbol.prototype-@@tostringtag


      setToStringTag($Symbol, SYMBOL);
      hiddenKeys[HIDDEN] = true;
      /***/
    },

    /***/
    "SdaC":
    /*!**************************************************************************************************!*\
      !*** ./node_modules/@angular-devkit/build-angular/node_modules/core-js/modules/es.math.trunc.js ***!
      \**************************************************************************************************/

    /*! no static exports found */

    /***/
    function SdaC(module, exports, __webpack_require__) {
      var $ = __webpack_require__(
      /*! ../internals/export */
      "wA6s");

      var ceil = Math.ceil;
      var floor = Math.floor; // `Math.trunc` method
      // https://tc39.es/ecma262/#sec-math.trunc

      $({
        target: 'Math',
        stat: true
      }, {
        trunc: function trunc(it) {
          return (it > 0 ? floor : ceil)(it);
        }
      });
      /***/
    },

    /***/
    "SlkY":
    /*!*************************************************!*\
      !*** ./node_modules/core-js/modules/_for-of.js ***!
      \*************************************************/

    /*! no static exports found */

    /***/
    function SlkY(module, exports, __webpack_require__) {
      var ctx = __webpack_require__(
      /*! ./_ctx */
      "m0Pp");

      var call = __webpack_require__(
      /*! ./_iter-call */
      "H6hf");

      var isArrayIter = __webpack_require__(
      /*! ./_is-array-iter */
      "M6Qj");

      var anObject = __webpack_require__(
      /*! ./_an-object */
      "y3w9");

      var toLength = __webpack_require__(
      /*! ./_to-length */
      "ne8i");

      var getIterFn = __webpack_require__(
      /*! ./core.get-iterator-method */
      "J+6e");

      var BREAK = {};
      var RETURN = {};

      var exports = module.exports = function (iterable, entries, fn, that, ITERATOR) {
        var iterFn = ITERATOR ? function () {
          return iterable;
        } : getIterFn(iterable);
        var f = ctx(fn, that, entries ? 2 : 1);
        var index = 0;
        var length, step, iterator, result;
        if (typeof iterFn != 'function') throw TypeError(iterable + ' is not iterable!'); // fast case for arrays with default iterator

        if (isArrayIter(iterFn)) for (length = toLength(iterable.length); length > index; index++) {
          result = entries ? f(anObject(step = iterable[index])[0], step[1]) : f(iterable[index]);
          if (result === BREAK || result === RETURN) return result;
        } else for (iterator = iterFn.call(iterable); !(step = iterator.next()).done;) {
          result = call(iterator, f, step.value, entries);
          if (result === BREAK || result === RETURN) return result;
        }
      };

      exports.BREAK = BREAK;
      exports.RETURN = RETURN;
      /***/
    },

    /***/
    "T/Kj":
    /*!********************************************************************************************************!*\
      !*** ./node_modules/@angular-devkit/build-angular/node_modules/core-js/internals/engine-user-agent.js ***!
      \********************************************************************************************************/

    /*! no static exports found */

    /***/
    function TKj(module, exports, __webpack_require__) {
      var getBuiltIn = __webpack_require__(
      /*! ../internals/get-built-in */
      "Ew/G");

      module.exports = getBuiltIn('navigator', 'userAgent') || '';
      /***/
    },

    /***/
    "T39b":
    /*!*************************************************!*\
      !*** ./node_modules/core-js/modules/es6.set.js ***!
      \*************************************************/

    /*! no static exports found */

    /***/
    function T39b(module, exports, __webpack_require__) {
      "use strict";

      var strong = __webpack_require__(
      /*! ./_collection-strong */
      "wmvG");

      var validate = __webpack_require__(
      /*! ./_validate-collection */
      "s5qY");

      var SET = 'Set'; // 23.2 Set Objects

      module.exports = __webpack_require__(
      /*! ./_collection */
      "4LiD")(SET, function (get) {
        return function Set() {
          return get(this, arguments.length > 0 ? arguments[0] : undefined);
        };
      }, {
        // 23.2.3.1 Set.prototype.add(value)
        add: function add(value) {
          return strong.def(validate(this, SET), value = value === 0 ? 0 : value, value);
        }
      }, strong);
      /***/
    },

    /***/
    "T4tC":
    /*!**********************************************************************************************************!*\
      !*** ./node_modules/@angular-devkit/build-angular/node_modules/core-js/modules/es.regexp.constructor.js ***!
      \**********************************************************************************************************/

    /*! no static exports found */

    /***/
    function T4tC(module, exports, __webpack_require__) {
      var DESCRIPTORS = __webpack_require__(
      /*! ../internals/descriptors */
      "T69T");

      var global = __webpack_require__(
      /*! ../internals/global */
      "ocAm");

      var isForced = __webpack_require__(
      /*! ../internals/is-forced */
      "MkZA");

      var inheritIfRequired = __webpack_require__(
      /*! ../internals/inherit-if-required */
      "K6ZX");

      var defineProperty = __webpack_require__(
      /*! ../internals/object-define-property */
      "/Ybd").f;

      var getOwnPropertyNames = __webpack_require__(
      /*! ../internals/object-get-own-property-names */
      "KkqW").f;

      var isRegExp = __webpack_require__(
      /*! ../internals/is-regexp */
      "1p6F");

      var getFlags = __webpack_require__(
      /*! ../internals/regexp-flags */
      "x0kV");

      var stickyHelpers = __webpack_require__(
      /*! ../internals/regexp-sticky-helpers */
      "JkSk");

      var redefine = __webpack_require__(
      /*! ../internals/redefine */
      "2MGJ");

      var fails = __webpack_require__(
      /*! ../internals/fails */
      "rG8t");

      var setInternalState = __webpack_require__(
      /*! ../internals/internal-state */
      "XH/I").set;

      var setSpecies = __webpack_require__(
      /*! ../internals/set-species */
      "JHhb");

      var wellKnownSymbol = __webpack_require__(
      /*! ../internals/well-known-symbol */
      "m41k");

      var MATCH = wellKnownSymbol('match');
      var NativeRegExp = global.RegExp;
      var RegExpPrototype = NativeRegExp.prototype;
      var re1 = /a/g;
      var re2 = /a/g; // "new" should create a new object, old webkit bug

      var CORRECT_NEW = new NativeRegExp(re1) !== re1;
      var UNSUPPORTED_Y = stickyHelpers.UNSUPPORTED_Y;
      var FORCED = DESCRIPTORS && isForced('RegExp', !CORRECT_NEW || UNSUPPORTED_Y || fails(function () {
        re2[MATCH] = false; // RegExp constructor can alter flags and IsRegExp works correct with @@match

        return NativeRegExp(re1) != re1 || NativeRegExp(re2) == re2 || NativeRegExp(re1, 'i') != '/a/i';
      })); // `RegExp` constructor
      // https://tc39.es/ecma262/#sec-regexp-constructor

      if (FORCED) {
        var RegExpWrapper = function RegExp(pattern, flags) {
          var thisIsRegExp = this instanceof RegExpWrapper;
          var patternIsRegExp = isRegExp(pattern);
          var flagsAreUndefined = flags === undefined;
          var sticky;

          if (!thisIsRegExp && patternIsRegExp && pattern.constructor === RegExpWrapper && flagsAreUndefined) {
            return pattern;
          }

          if (CORRECT_NEW) {
            if (patternIsRegExp && !flagsAreUndefined) pattern = pattern.source;
          } else if (pattern instanceof RegExpWrapper) {
            if (flagsAreUndefined) flags = getFlags.call(pattern);
            pattern = pattern.source;
          }

          if (UNSUPPORTED_Y) {
            sticky = !!flags && flags.indexOf('y') > -1;
            if (sticky) flags = flags.replace(/y/g, '');
          }

          var result = inheritIfRequired(CORRECT_NEW ? new NativeRegExp(pattern, flags) : NativeRegExp(pattern, flags), thisIsRegExp ? this : RegExpPrototype, RegExpWrapper);
          if (UNSUPPORTED_Y && sticky) setInternalState(result, {
            sticky: sticky
          });
          return result;
        };

        var proxy = function proxy(key) {
          key in RegExpWrapper || defineProperty(RegExpWrapper, key, {
            configurable: true,
            get: function get() {
              return NativeRegExp[key];
            },
            set: function set(it) {
              NativeRegExp[key] = it;
            }
          });
        };

        var keys = getOwnPropertyNames(NativeRegExp);
        var index = 0;

        while (keys.length > index) {
          proxy(keys[index++]);
        }

        RegExpPrototype.constructor = RegExpWrapper;
        RegExpWrapper.prototype = RegExpPrototype;
        redefine(global, 'RegExp', RegExpWrapper);
      } // https://tc39.es/ecma262/#sec-get-regexp-@@species


      setSpecies('RegExp');
      /***/
    },

    /***/
    "T69T":
    /*!**************************************************************************************************!*\
      !*** ./node_modules/@angular-devkit/build-angular/node_modules/core-js/internals/descriptors.js ***!
      \**************************************************************************************************/

    /*! no static exports found */

    /***/
    function T69T(module, exports, __webpack_require__) {
      var fails = __webpack_require__(
      /*! ../internals/fails */
      "rG8t"); // Detect IE8's incomplete defineProperty implementation


      module.exports = !fails(function () {
        return Object.defineProperty({}, 1, {
          get: function get() {
            return 7;
          }
        })[1] != 7;
      });
      /***/
    },

    /***/
    "TzEA":
    /*!*****************************************************************************************************************************!*\
      !*** ./node_modules/@angular-devkit/build-angular/node_modules/core-js/internals/object-get-own-property-names-external.js ***!
      \*****************************************************************************************************************************/

    /*! no static exports found */

    /***/
    function TzEA(module, exports, __webpack_require__) {
      var toIndexedObject = __webpack_require__(
      /*! ../internals/to-indexed-object */
      "EMtK");

      var nativeGetOwnPropertyNames = __webpack_require__(
      /*! ../internals/object-get-own-property-names */
      "KkqW").f;

      var toString = {}.toString;
      var windowNames = typeof window == 'object' && window && Object.getOwnPropertyNames ? Object.getOwnPropertyNames(window) : [];

      var getWindowNames = function getWindowNames(it) {
        try {
          return nativeGetOwnPropertyNames(it);
        } catch (error) {
          return windowNames.slice();
        }
      }; // fallback for IE11 buggy Object.getOwnPropertyNames with iframe and window


      module.exports.f = function getOwnPropertyNames(it) {
        return windowNames && toString.call(it) == '[object Window]' ? getWindowNames(it) : nativeGetOwnPropertyNames(toIndexedObject(it));
      };
      /***/

    },

    /***/
    "U+kB":
    /*!****************************************************************************************************!*\
      !*** ./node_modules/@angular-devkit/build-angular/node_modules/core-js/internals/native-symbol.js ***!
      \****************************************************************************************************/

    /*! no static exports found */

    /***/
    function UKB(module, exports, __webpack_require__) {
      var fails = __webpack_require__(
      /*! ../internals/fails */
      "rG8t");

      module.exports = !!Object.getOwnPropertySymbols && !fails(function () {
        // Chrome 38 Symbol has incorrect toString conversion
        // eslint-disable-next-line no-undef
        return !String(Symbol());
      });
      /***/
    },

    /***/
    "UqcF":
    /*!*****************************************************!*\
      !*** ./node_modules/core-js/modules/_object-pie.js ***!
      \*****************************************************/

    /*! no static exports found */

    /***/
    function UqcF(module, exports) {
      exports.f = {}.propertyIsEnumerable;
      /***/
    },

    /***/
    "V+F/":
    /*!*******************************************************************************************************************!*\
      !*** ./node_modules/@angular-devkit/build-angular/node_modules/core-js/modules/es.symbol.is-concat-spreadable.js ***!
      \*******************************************************************************************************************/

    /*! no static exports found */

    /***/
    function VF(module, exports, __webpack_require__) {
      var defineWellKnownSymbol = __webpack_require__(
      /*! ../internals/define-well-known-symbol */
      "94Vg"); // `Symbol.isConcatSpreadable` well-known symbol
      // https://tc39.es/ecma262/#sec-symbol.isconcatspreadable


      defineWellKnownSymbol('isConcatSpreadable');
      /***/
    },

    /***/
    "VCQ8":
    /*!************************************************************************************************!*\
      !*** ./node_modules/@angular-devkit/build-angular/node_modules/core-js/internals/to-object.js ***!
      \************************************************************************************************/

    /*! no static exports found */

    /***/
    function VCQ8(module, exports, __webpack_require__) {
      var requireObjectCoercible = __webpack_require__(
      /*! ../internals/require-object-coercible */
      "hmpk"); // `ToObject` abstract operation
      // https://tc39.es/ecma262/#sec-toobject


      module.exports = function (argument) {
        return Object(requireObjectCoercible(argument));
      };
      /***/

    },

    /***/
    "VTer":
    /*!*************************************************!*\
      !*** ./node_modules/core-js/modules/_shared.js ***!
      \*************************************************/

    /*! no static exports found */

    /***/
    function VTer(module, exports, __webpack_require__) {
      var core = __webpack_require__(
      /*! ./_core */
      "g3g5");

      var global = __webpack_require__(
      /*! ./_global */
      "dyZX");

      var SHARED = '__core-js_shared__';
      var store = global[SHARED] || (global[SHARED] = {});
      (module.exports = function (key, value) {
        return store[key] || (store[key] = value !== undefined ? value : {});
      })('versions', []).push({
        version: core.version,
        mode: __webpack_require__(
        /*! ./_library */
        "LQAc") ? 'pure' : 'global',
        copyright: '© 2020 Denis Pushkarev (zloirock.ru)'
      });
      /***/
    },

    /***/
    "Vi1R":
    /*!****************************************************************************************************!*\
      !*** ./node_modules/@angular-devkit/build-angular/node_modules/core-js/modules/es.symbol.split.js ***!
      \****************************************************************************************************/

    /*! no static exports found */

    /***/
    function Vi1R(module, exports, __webpack_require__) {
      var defineWellKnownSymbol = __webpack_require__(
      /*! ../internals/define-well-known-symbol */
      "94Vg"); // `Symbol.split` well-known symbol
      // https://tc39.es/ecma262/#sec-symbol.split


      defineWellKnownSymbol('split');
      /***/
    },

    /***/
    "ViWx":
    /*!*******************************************************************************************!*\
      !*** ./node_modules/@angular-devkit/build-angular/node_modules/core-js/modules/es.set.js ***!
      \*******************************************************************************************/

    /*! no static exports found */

    /***/
    function ViWx(module, exports, __webpack_require__) {
      "use strict";

      var collection = __webpack_require__(
      /*! ../internals/collection */
      "wdMf");

      var collectionStrong = __webpack_require__(
      /*! ../internals/collection-strong */
      "nIH4"); // `Set` constructor
      // https://tc39.es/ecma262/#sec-set-objects


      module.exports = collection('Set', function (init) {
        return function Set() {
          return init(this, arguments.length ? arguments[0] : undefined);
        };
      }, collectionStrong);
      /***/
    },

    /***/
    "VmbE":
    /*!*****************************************************************************************************!*\
      !*** ./node_modules/@angular-devkit/build-angular/node_modules/core-js/modules/es.string.strike.js ***!
      \*****************************************************************************************************/

    /*! no static exports found */

    /***/
    function VmbE(module, exports, __webpack_require__) {
      "use strict";

      var $ = __webpack_require__(
      /*! ../internals/export */
      "wA6s");

      var createHTML = __webpack_require__(
      /*! ../internals/create-html */
      "uoca");

      var forcedStringHTMLMethod = __webpack_require__(
      /*! ../internals/string-html-forced */
      "d8Sw"); // `String.prototype.strike` method
      // https://tc39.es/ecma262/#sec-string.prototype.strike


      $({
        target: 'String',
        proto: true,
        forced: forcedStringHTMLMethod('strike')
      }, {
        strike: function strike() {
          return createHTML(this, 'strike', '', '');
        }
      });
      /***/
    },

    /***/
    "W0ke":
    /*!*******************************************************************************************************!*\
      !*** ./node_modules/@angular-devkit/build-angular/node_modules/core-js/modules/es.string.fontsize.js ***!
      \*******************************************************************************************************/

    /*! no static exports found */

    /***/
    function W0ke(module, exports, __webpack_require__) {
      "use strict";

      var $ = __webpack_require__(
      /*! ../internals/export */
      "wA6s");

      var createHTML = __webpack_require__(
      /*! ../internals/create-html */
      "uoca");

      var forcedStringHTMLMethod = __webpack_require__(
      /*! ../internals/string-html-forced */
      "d8Sw"); // `String.prototype.fontsize` method
      // https://tc39.es/ecma262/#sec-string.prototype.fontsize


      $({
        target: 'String',
        proto: true,
        forced: forcedStringHTMLMethod('fontsize')
      }, {
        fontsize: function fontsize(size) {
          return createHTML(this, 'font', 'size', size);
        }
      });
      /***/
    },

    /***/
    "WEX0":
    /*!***************************************************************************************************!*\
      !*** ./node_modules/@angular-devkit/build-angular/node_modules/core-js/modules/es.string.link.js ***!
      \***************************************************************************************************/

    /*! no static exports found */

    /***/
    function WEX0(module, exports, __webpack_require__) {
      "use strict";

      var $ = __webpack_require__(
      /*! ../internals/export */
      "wA6s");

      var createHTML = __webpack_require__(
      /*! ../internals/create-html */
      "uoca");

      var forcedStringHTMLMethod = __webpack_require__(
      /*! ../internals/string-html-forced */
      "d8Sw"); // `String.prototype.link` method
      // https://tc39.es/ecma262/#sec-string.prototype.link


      $({
        target: 'String',
        proto: true,
        forced: forcedStringHTMLMethod('link')
      }, {
        link: function link(url) {
          return createHTML(this, 'a', 'href', url);
        }
      });
      /***/
    },

    /***/
    "WEpO":
    /*!**************************************************************************************************!*\
      !*** ./node_modules/@angular-devkit/build-angular/node_modules/core-js/modules/es.math.log10.js ***!
      \**************************************************************************************************/

    /*! no static exports found */

    /***/
    function WEpO(module, exports, __webpack_require__) {
      var $ = __webpack_require__(
      /*! ../internals/export */
      "wA6s");

      var log = Math.log;
      var LOG10E = Math.LOG10E; // `Math.log10` method
      // https://tc39.es/ecma262/#sec-math.log10

      $({
        target: 'Math',
        stat: true
      }, {
        log10: function log10(x) {
          return log(x) * LOG10E;
        }
      });
      /***/
    },

    /***/
    "WKvG":
    /*!********************************************************************************************************!*\
      !*** ./node_modules/@angular-devkit/build-angular/node_modules/core-js/modules/es.string.fontcolor.js ***!
      \********************************************************************************************************/

    /*! no static exports found */

    /***/
    function WKvG(module, exports, __webpack_require__) {
      "use strict";

      var $ = __webpack_require__(
      /*! ../internals/export */
      "wA6s");

      var createHTML = __webpack_require__(
      /*! ../internals/create-html */
      "uoca");

      var forcedStringHTMLMethod = __webpack_require__(
      /*! ../internals/string-html-forced */
      "d8Sw"); // `String.prototype.fontcolor` method
      // https://tc39.es/ecma262/#sec-string.prototype.fontcolor


      $({
        target: 'String',
        proto: true,
        forced: forcedStringHTMLMethod('fontcolor')
      }, {
        fontcolor: function fontcolor(color) {
          return createHTML(this, 'font', 'color', color);
        }
      });
      /***/
    },

    /***/
    "WLa2":
    /*!*****************************************************************************************************************!*\
      !*** ./node_modules/@angular-devkit/build-angular/node_modules/core-js/modules/es.object.prevent-extensions.js ***!
      \*****************************************************************************************************************/

    /*! no static exports found */

    /***/
    function WLa2(module, exports, __webpack_require__) {
      var $ = __webpack_require__(
      /*! ../internals/export */
      "wA6s");

      var isObject = __webpack_require__(
      /*! ../internals/is-object */
      "6XUM");

      var onFreeze = __webpack_require__(
      /*! ../internals/internal-metadata */
      "M7Xk").onFreeze;

      var FREEZING = __webpack_require__(
      /*! ../internals/freezing */
      "cZY6");

      var fails = __webpack_require__(
      /*! ../internals/fails */
      "rG8t");

      var nativePreventExtensions = Object.preventExtensions;
      var FAILS_ON_PRIMITIVES = fails(function () {
        nativePreventExtensions(1);
      }); // `Object.preventExtensions` method
      // https://tc39.es/ecma262/#sec-object.preventextensions

      $({
        target: 'Object',
        stat: true,
        forced: FAILS_ON_PRIMITIVES,
        sham: !FREEZING
      }, {
        preventExtensions: function preventExtensions(it) {
          return nativePreventExtensions && isObject(it) ? nativePreventExtensions(onFreeze(it)) : it;
        }
      });
      /***/
    },

    /***/
    "WijE":
    /*!******************************************************************************************************!*\
      !*** ./node_modules/@angular-devkit/build-angular/node_modules/core-js/internals/define-iterator.js ***!
      \******************************************************************************************************/

    /*! no static exports found */

    /***/
    function WijE(module, exports, __webpack_require__) {
      "use strict";

      var $ = __webpack_require__(
      /*! ../internals/export */
      "wA6s");

      var createIteratorConstructor = __webpack_require__(
      /*! ../internals/create-iterator-constructor */
      "ZJLg");

      var getPrototypeOf = __webpack_require__(
      /*! ../internals/object-get-prototype-of */
      "wIVT");

      var setPrototypeOf = __webpack_require__(
      /*! ../internals/object-set-prototype-of */
      "7/lX");

      var setToStringTag = __webpack_require__(
      /*! ../internals/set-to-string-tag */
      "shqn");

      var createNonEnumerableProperty = __webpack_require__(
      /*! ../internals/create-non-enumerable-property */
      "aJMj");

      var redefine = __webpack_require__(
      /*! ../internals/redefine */
      "2MGJ");

      var wellKnownSymbol = __webpack_require__(
      /*! ../internals/well-known-symbol */
      "m41k");

      var IS_PURE = __webpack_require__(
      /*! ../internals/is-pure */
      "g9hI");

      var Iterators = __webpack_require__(
      /*! ../internals/iterators */
      "pz+c");

      var IteratorsCore = __webpack_require__(
      /*! ../internals/iterators-core */
      "G1Vw");

      var IteratorPrototype = IteratorsCore.IteratorPrototype;
      var BUGGY_SAFARI_ITERATORS = IteratorsCore.BUGGY_SAFARI_ITERATORS;
      var ITERATOR = wellKnownSymbol('iterator');
      var KEYS = 'keys';
      var VALUES = 'values';
      var ENTRIES = 'entries';

      var returnThis = function returnThis() {
        return this;
      };

      module.exports = function (Iterable, NAME, IteratorConstructor, next, DEFAULT, IS_SET, FORCED) {
        createIteratorConstructor(IteratorConstructor, NAME, next);

        var getIterationMethod = function getIterationMethod(KIND) {
          if (KIND === DEFAULT && defaultIterator) return defaultIterator;
          if (!BUGGY_SAFARI_ITERATORS && KIND in IterablePrototype) return IterablePrototype[KIND];

          switch (KIND) {
            case KEYS:
              return function keys() {
                return new IteratorConstructor(this, KIND);
              };

            case VALUES:
              return function values() {
                return new IteratorConstructor(this, KIND);
              };

            case ENTRIES:
              return function entries() {
                return new IteratorConstructor(this, KIND);
              };
          }

          return function () {
            return new IteratorConstructor(this);
          };
        };

        var TO_STRING_TAG = NAME + ' Iterator';
        var INCORRECT_VALUES_NAME = false;
        var IterablePrototype = Iterable.prototype;
        var nativeIterator = IterablePrototype[ITERATOR] || IterablePrototype['@@iterator'] || DEFAULT && IterablePrototype[DEFAULT];
        var defaultIterator = !BUGGY_SAFARI_ITERATORS && nativeIterator || getIterationMethod(DEFAULT);
        var anyNativeIterator = NAME == 'Array' ? IterablePrototype.entries || nativeIterator : nativeIterator;
        var CurrentIteratorPrototype, methods, KEY; // fix native

        if (anyNativeIterator) {
          CurrentIteratorPrototype = getPrototypeOf(anyNativeIterator.call(new Iterable()));

          if (IteratorPrototype !== Object.prototype && CurrentIteratorPrototype.next) {
            if (!IS_PURE && getPrototypeOf(CurrentIteratorPrototype) !== IteratorPrototype) {
              if (setPrototypeOf) {
                setPrototypeOf(CurrentIteratorPrototype, IteratorPrototype);
              } else if (typeof CurrentIteratorPrototype[ITERATOR] != 'function') {
                createNonEnumerableProperty(CurrentIteratorPrototype, ITERATOR, returnThis);
              }
            } // Set @@toStringTag to native iterators


            setToStringTag(CurrentIteratorPrototype, TO_STRING_TAG, true, true);
            if (IS_PURE) Iterators[TO_STRING_TAG] = returnThis;
          }
        } // fix Array#{values, @@iterator}.name in V8 / FF


        if (DEFAULT == VALUES && nativeIterator && nativeIterator.name !== VALUES) {
          INCORRECT_VALUES_NAME = true;

          defaultIterator = function values() {
            return nativeIterator.call(this);
          };
        } // define iterator


        if ((!IS_PURE || FORCED) && IterablePrototype[ITERATOR] !== defaultIterator) {
          createNonEnumerableProperty(IterablePrototype, ITERATOR, defaultIterator);
        }

        Iterators[NAME] = defaultIterator; // export additional methods

        if (DEFAULT) {
          methods = {
            values: getIterationMethod(VALUES),
            keys: IS_SET ? defaultIterator : getIterationMethod(KEYS),
            entries: getIterationMethod(ENTRIES)
          };
          if (FORCED) for (KEY in methods) {
            if (BUGGY_SAFARI_ITERATORS || INCORRECT_VALUES_NAME || !(KEY in IterablePrototype)) {
              redefine(IterablePrototype, KEY, methods[KEY]);
            }
          } else $({
            target: NAME,
            proto: true,
            forced: BUGGY_SAFARI_ITERATORS || INCORRECT_VALUES_NAME
          }, methods);
        }

        return methods;
      };
      /***/

    },

    /***/
    "WnNu":
    /*!***************************************************************************************************************!*\
      !*** ./node_modules/@angular-devkit/build-angular/node_modules/core-js/modules/es.object.set-prototype-of.js ***!
      \***************************************************************************************************************/

    /*! no static exports found */

    /***/
    function WnNu(module, exports, __webpack_require__) {
      var $ = __webpack_require__(
      /*! ../internals/export */
      "wA6s");

      var setPrototypeOf = __webpack_require__(
      /*! ../internals/object-set-prototype-of */
      "7/lX"); // `Object.setPrototypeOf` method
      // https://tc39.es/ecma262/#sec-object.setprototypeof


      $({
        target: 'Object',
        stat: true
      }, {
        setPrototypeOf: setPrototypeOf
      });
      /***/
    },

    /***/
    "XEin":
    /*!**************************************************************************************************!*\
      !*** ./node_modules/@angular-devkit/build-angular/node_modules/core-js/modules/es.array.some.js ***!
      \**************************************************************************************************/

    /*! no static exports found */

    /***/
    function XEin(module, exports, __webpack_require__) {
      "use strict";

      var $ = __webpack_require__(
      /*! ../internals/export */
      "wA6s");

      var $some = __webpack_require__(
      /*! ../internals/array-iteration */
      "kk6e").some;

      var arrayMethodIsStrict = __webpack_require__(
      /*! ../internals/array-method-is-strict */
      "6CJb");

      var arrayMethodUsesToLength = __webpack_require__(
      /*! ../internals/array-method-uses-to-length */
      "w2hq");

      var STRICT_METHOD = arrayMethodIsStrict('some');
      var USES_TO_LENGTH = arrayMethodUsesToLength('some'); // `Array.prototype.some` method
      // https://tc39.es/ecma262/#sec-array.prototype.some

      $({
        target: 'Array',
        proto: true,
        forced: !STRICT_METHOD || !USES_TO_LENGTH
      }, {
        some: function some(callbackfn
        /* , thisArg */
        ) {
          return $some(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
        }
      });
      /***/
    },

    /***/
    "XH/I":
    /*!*****************************************************************************************************!*\
      !*** ./node_modules/@angular-devkit/build-angular/node_modules/core-js/internals/internal-state.js ***!
      \*****************************************************************************************************/

    /*! no static exports found */

    /***/
    function XHI(module, exports, __webpack_require__) {
      var NATIVE_WEAK_MAP = __webpack_require__(
      /*! ../internals/native-weak-map */
      "yaK9");

      var global = __webpack_require__(
      /*! ../internals/global */
      "ocAm");

      var isObject = __webpack_require__(
      /*! ../internals/is-object */
      "6XUM");

      var createNonEnumerableProperty = __webpack_require__(
      /*! ../internals/create-non-enumerable-property */
      "aJMj");

      var objectHas = __webpack_require__(
      /*! ../internals/has */
      "OG5q");

      var shared = __webpack_require__(
      /*! ../internals/shared-store */
      "KBkW");

      var sharedKey = __webpack_require__(
      /*! ../internals/shared-key */
      "/AsP");

      var hiddenKeys = __webpack_require__(
      /*! ../internals/hidden-keys */
      "yQMY");

      var WeakMap = global.WeakMap;
      var set, get, has;

      var enforce = function enforce(it) {
        return has(it) ? get(it) : set(it, {});
      };

      var getterFor = function getterFor(TYPE) {
        return function (it) {
          var state;

          if (!isObject(it) || (state = get(it)).type !== TYPE) {
            throw TypeError('Incompatible receiver, ' + TYPE + ' required');
          }

          return state;
        };
      };

      if (NATIVE_WEAK_MAP) {
        var store = shared.state || (shared.state = new WeakMap());
        var wmget = store.get;
        var wmhas = store.has;
        var wmset = store.set;

        set = function set(it, metadata) {
          metadata.facade = it;
          wmset.call(store, it, metadata);
          return metadata;
        };

        get = function get(it) {
          return wmget.call(store, it) || {};
        };

        has = function has(it) {
          return wmhas.call(store, it);
        };
      } else {
        var STATE = sharedKey('state');
        hiddenKeys[STATE] = true;

        set = function set(it, metadata) {
          metadata.facade = it;
          createNonEnumerableProperty(it, STATE, metadata);
          return metadata;
        };

        get = function get(it) {
          return objectHas(it, STATE) ? it[STATE] : {};
        };

        has = function has(it) {
          return objectHas(it, STATE);
        };
      }

      module.exports = {
        set: set,
        get: get,
        has: has,
        enforce: enforce,
        getterFor: getterFor
      };
      /***/
    },

    /***/
    "XKFU":
    /*!*************************************************!*\
      !*** ./node_modules/core-js/modules/_export.js ***!
      \*************************************************/

    /*! no static exports found */

    /***/
    function XKFU(module, exports, __webpack_require__) {
      var global = __webpack_require__(
      /*! ./_global */
      "dyZX");

      var core = __webpack_require__(
      /*! ./_core */
      "g3g5");

      var hide = __webpack_require__(
      /*! ./_hide */
      "Mukb");

      var redefine = __webpack_require__(
      /*! ./_redefine */
      "KroJ");

      var ctx = __webpack_require__(
      /*! ./_ctx */
      "m0Pp");

      var PROTOTYPE = 'prototype';

      var $export = function $export(type, name, source) {
        var IS_FORCED = type & $export.F;
        var IS_GLOBAL = type & $export.G;
        var IS_STATIC = type & $export.S;
        var IS_PROTO = type & $export.P;
        var IS_BIND = type & $export.B;
        var target = IS_GLOBAL ? global : IS_STATIC ? global[name] || (global[name] = {}) : (global[name] || {})[PROTOTYPE];
        var exports = IS_GLOBAL ? core : core[name] || (core[name] = {});
        var expProto = exports[PROTOTYPE] || (exports[PROTOTYPE] = {});
        var key, own, out, exp;
        if (IS_GLOBAL) source = name;

        for (key in source) {
          // contains in native
          own = !IS_FORCED && target && target[key] !== undefined; // export native or passed

          out = (own ? target : source)[key]; // bind timers to global for call from export context

          exp = IS_BIND && own ? ctx(out, global) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out; // extend global

          if (target) redefine(target, key, out, type & $export.U); // export

          if (exports[key] != out) hide(exports, key, exp);
          if (IS_PROTO && expProto[key] != out) expProto[key] = out;
        }
      };

      global.core = core; // type bitmap

      $export.F = 1; // forced

      $export.G = 2; // global

      $export.S = 4; // static

      $export.P = 8; // proto

      $export.B = 16; // bind

      $export.W = 32; // wrap

      $export.U = 64; // safe

      $export.R = 128; // real proto method for `library`

      module.exports = $export;
      /***/
    },

    /***/
    "XMVh":
    /*!******************************************************!*\
      !*** ./node_modules/core-js/modules/_iter-detect.js ***!
      \******************************************************/

    /*! no static exports found */

    /***/
    function XMVh(module, exports, __webpack_require__) {
      var ITERATOR = __webpack_require__(
      /*! ./_wks */
      "K0xU")('iterator');

      var SAFE_CLOSING = false;

      try {
        var riter = [7][ITERATOR]();

        riter['return'] = function () {
          SAFE_CLOSING = true;
        }; // eslint-disable-next-line no-throw-literal


        Array.from(riter, function () {
          throw 2;
        });
      } catch (e) {
        /* empty */
      }

      module.exports = function (exec, skipClosing) {
        if (!skipClosing && !SAFE_CLOSING) return false;
        var safe = false;

        try {
          var arr = [7];
          var iter = arr[ITERATOR]();

          iter.next = function () {
            return {
              done: safe = true
            };
          };

          arr[ITERATOR] = function () {
            return iter;
          };

          exec(arr);
        } catch (e) {
          /* empty */
        }

        return safe;
      };
      /***/

    },

    /***/
    "Xbzi":
    /*!**************************************************************!*\
      !*** ./node_modules/core-js/modules/_inherit-if-required.js ***!
      \**************************************************************/

    /*! no static exports found */

    /***/
    function Xbzi(module, exports, __webpack_require__) {
      var isObject = __webpack_require__(
      /*! ./_is-object */
      "0/R4");

      var setPrototypeOf = __webpack_require__(
      /*! ./_set-proto */
      "i5dc").set;

      module.exports = function (that, target, C) {
        var S = target.constructor;
        var P;

        if (S !== C && typeof S == 'function' && (P = S.prototype) !== C.prototype && isObject(P) && setPrototypeOf) {
          setPrototypeOf(that, P);
        }

        return that;
      };
      /***/

    },

    /***/
    "XdSI":
    /*!*****************************************************************************************************!*\
      !*** ./node_modules/@angular-devkit/build-angular/node_modules/core-js/internals/ie8-dom-define.js ***!
      \*****************************************************************************************************/

    /*! no static exports found */

    /***/
    function XdSI(module, exports, __webpack_require__) {
      var DESCRIPTORS = __webpack_require__(
      /*! ../internals/descriptors */
      "T69T");

      var fails = __webpack_require__(
      /*! ../internals/fails */
      "rG8t");

      var createElement = __webpack_require__(
      /*! ../internals/document-create-element */
      "qx7X"); // Thank's IE8 for his funny defineProperty


      module.exports = !DESCRIPTORS && !fails(function () {
        return Object.defineProperty(createElement('div'), 'a', {
          get: function get() {
            return 7;
          }
        }).a != 7;
      });
      /***/
    },

    /***/
    "Xm88":
    /*!***********************************************************************************************************!*\
      !*** ./node_modules/@angular-devkit/build-angular/node_modules/core-js/modules/es.array.last-index-of.js ***!
      \***********************************************************************************************************/

    /*! no static exports found */

    /***/
    function Xm88(module, exports, __webpack_require__) {
      var $ = __webpack_require__(
      /*! ../internals/export */
      "wA6s");

      var lastIndexOf = __webpack_require__(
      /*! ../internals/array-last-index-of */
      "rCRE"); // `Array.prototype.lastIndexOf` method
      // https://tc39.es/ecma262/#sec-array.prototype.lastindexof


      $({
        target: 'Array',
        proto: true,
        forced: lastIndexOf !== [].lastIndexOf
      }, {
        lastIndexOf: lastIndexOf
      });
      /***/
    },

    /***/
    "Y5OV":
    /*!*********************************************************************************************************!*\
      !*** ./node_modules/@angular-devkit/build-angular/node_modules/core-js/modules/es.date.to-primitive.js ***!
      \*********************************************************************************************************/

    /*! no static exports found */

    /***/
    function Y5OV(module, exports, __webpack_require__) {
      var createNonEnumerableProperty = __webpack_require__(
      /*! ../internals/create-non-enumerable-property */
      "aJMj");

      var dateToPrimitive = __webpack_require__(
      /*! ../internals/date-to-primitive */
      "CW9j");

      var wellKnownSymbol = __webpack_require__(
      /*! ../internals/well-known-symbol */
      "m41k");

      var TO_PRIMITIVE = wellKnownSymbol('toPrimitive');
      var DatePrototype = Date.prototype; // `Date.prototype[@@toPrimitive]` method
      // https://tc39.es/ecma262/#sec-date.prototype-@@toprimitive

      if (!(TO_PRIMITIVE in DatePrototype)) {
        createNonEnumerableProperty(DatePrototype, TO_PRIMITIVE, dateToPrimitive);
      }
      /***/

    },

    /***/
    "YOJ4":
    /*!********************************************************************************************************!*\
      !*** ./node_modules/@angular-devkit/build-angular/node_modules/core-js/modules/es.symbol.match-all.js ***!
      \********************************************************************************************************/

    /*! no static exports found */

    /***/
    function YOJ4(module, exports, __webpack_require__) {
      var defineWellKnownSymbol = __webpack_require__(
      /*! ../internals/define-well-known-symbol */
      "94Vg"); // `Symbol.matchAll` well-known symbol
      // https://tc39.es/ecma262/#sec-symbol.matchall


      defineWellKnownSymbol('matchAll');
      /***/
    },

    /***/
    "YTvA":
    /*!*****************************************************!*\
      !*** ./node_modules/core-js/modules/_shared-key.js ***!
      \*****************************************************/

    /*! no static exports found */

    /***/
    function YTvA(module, exports, __webpack_require__) {
      var shared = __webpack_require__(
      /*! ./_shared */
      "VTer")('keys');

      var uid = __webpack_require__(
      /*! ./_uid */
      "ylqs");

      module.exports = function (key) {
        return shared[key] || (shared[key] = uid(key));
      };
      /***/

    },

    /***/
    "Yg8j":
    /*!*******************************************************************************************************!*\
      !*** ./node_modules/@angular-devkit/build-angular/node_modules/core-js/internals/number-is-finite.js ***!
      \*******************************************************************************************************/

    /*! no static exports found */

    /***/
    function Yg8j(module, exports, __webpack_require__) {
      var global = __webpack_require__(
      /*! ../internals/global */
      "ocAm");

      var globalIsFinite = global.isFinite; // `Number.isFinite` method
      // https://tc39.es/ecma262/#sec-number.isfinite

      module.exports = Number.isFinite || function isFinite(it) {
        return typeof it == 'number' && globalIsFinite(it);
      };
      /***/

    },

    /***/
    "Ymqv":
    /*!**************************************************!*\
      !*** ./node_modules/core-js/modules/_iobject.js ***!
      \**************************************************/

    /*! no static exports found */

    /***/
    function Ymqv(module, exports, __webpack_require__) {
      // fallback for non-array-like ES3 and non-enumerable old V8 strings
      var cof = __webpack_require__(
      /*! ./_cof */
      "LZWt"); // eslint-disable-next-line no-prototype-builtins


      module.exports = Object('z').propertyIsEnumerable(0) ? Object : function (it) {
        return cof(it) == 'String' ? it.split('') : Object(it);
      };
      /***/
    },

    /***/
    "Yu3F":
    /*!***************************************************************************************************!*\
      !*** ./node_modules/@angular-devkit/build-angular/node_modules/core-js/modules/es.string.bold.js ***!
      \***************************************************************************************************/

    /*! no static exports found */

    /***/
    function Yu3F(module, exports, __webpack_require__) {
      "use strict";

      var $ = __webpack_require__(
      /*! ../internals/export */
      "wA6s");

      var createHTML = __webpack_require__(
      /*! ../internals/create-html */
      "uoca");

      var forcedStringHTMLMethod = __webpack_require__(
      /*! ../internals/string-html-forced */
      "d8Sw"); // `String.prototype.bold` method
      // https://tc39.es/ecma262/#sec-string.prototype.bold


      $({
        target: 'String',
        proto: true,
        forced: forcedStringHTMLMethod('bold')
      }, {
        bold: function bold() {
          return createHTML(this, 'b', '', '');
        }
      });
      /***/
    },

    /***/
    "Z6vF":
    /*!***********************************************!*\
      !*** ./node_modules/core-js/modules/_meta.js ***!
      \***********************************************/

    /*! no static exports found */

    /***/
    function Z6vF(module, exports, __webpack_require__) {
      var META = __webpack_require__(
      /*! ./_uid */
      "ylqs")('meta');

      var isObject = __webpack_require__(
      /*! ./_is-object */
      "0/R4");

      var has = __webpack_require__(
      /*! ./_has */
      "aagx");

      var setDesc = __webpack_require__(
      /*! ./_object-dp */
      "hswa").f;

      var id = 0;

      var isExtensible = Object.isExtensible || function () {
        return true;
      };

      var FREEZE = !__webpack_require__(
      /*! ./_fails */
      "eeVq")(function () {
        return isExtensible(Object.preventExtensions({}));
      });

      var setMeta = function setMeta(it) {
        setDesc(it, META, {
          value: {
            i: 'O' + ++id,
            // object ID
            w: {} // weak collections IDs

          }
        });
      };

      var fastKey = function fastKey(it, create) {
        // return primitive with prefix
        if (!isObject(it)) return typeof it == 'symbol' ? it : (typeof it == 'string' ? 'S' : 'P') + it;

        if (!has(it, META)) {
          // can't set metadata to uncaught frozen object
          if (!isExtensible(it)) return 'F'; // not necessary to add metadata

          if (!create) return 'E'; // add missing metadata

          setMeta(it); // return object ID
        }

        return it[META].i;
      };

      var getWeak = function getWeak(it, create) {
        if (!has(it, META)) {
          // can't set metadata to uncaught frozen object
          if (!isExtensible(it)) return true; // not necessary to add metadata

          if (!create) return false; // add missing metadata

          setMeta(it); // return hash weak collections IDs
        }

        return it[META].w;
      }; // add metadata on freeze-family methods calling


      var onFreeze = function onFreeze(it) {
        if (FREEZE && meta.NEED && isExtensible(it) && !has(it, META)) setMeta(it);
        return it;
      };

      var meta = module.exports = {
        KEY: META,
        NEED: false,
        fastKey: fastKey,
        getWeak: getWeak,
        onFreeze: onFreeze
      };
      /***/
    },

    /***/
    "ZBUp":
    /*!******************************************************************************************************!*\
      !*** ./node_modules/@angular-devkit/build-angular/node_modules/core-js/modules/es.number.epsilon.js ***!
      \******************************************************************************************************/

    /*! no static exports found */

    /***/
    function ZBUp(module, exports, __webpack_require__) {
      var $ = __webpack_require__(
      /*! ../internals/export */
      "wA6s"); // `Number.EPSILON` constant
      // https://tc39.es/ecma262/#sec-number.epsilon


      $({
        target: 'Number',
        stat: true
      }, {
        EPSILON: Math.pow(2, -52)
      });
      /***/
    },

    /***/
    "ZD67":
    /*!**********************************************************!*\
      !*** ./node_modules/core-js/modules/_collection-weak.js ***!
      \**********************************************************/

    /*! no static exports found */

    /***/
    function ZD67(module, exports, __webpack_require__) {
      "use strict";

      var redefineAll = __webpack_require__(
      /*! ./_redefine-all */
      "3Lyj");

      var getWeak = __webpack_require__(
      /*! ./_meta */
      "Z6vF").getWeak;

      var anObject = __webpack_require__(
      /*! ./_an-object */
      "y3w9");

      var isObject = __webpack_require__(
      /*! ./_is-object */
      "0/R4");

      var anInstance = __webpack_require__(
      /*! ./_an-instance */
      "9gX7");

      var forOf = __webpack_require__(
      /*! ./_for-of */
      "SlkY");

      var createArrayMethod = __webpack_require__(
      /*! ./_array-methods */
      "CkkT");

      var $has = __webpack_require__(
      /*! ./_has */
      "aagx");

      var validate = __webpack_require__(
      /*! ./_validate-collection */
      "s5qY");

      var arrayFind = createArrayMethod(5);
      var arrayFindIndex = createArrayMethod(6);
      var id = 0; // fallback for uncaught frozen keys

      var uncaughtFrozenStore = function uncaughtFrozenStore(that) {
        return that._l || (that._l = new UncaughtFrozenStore());
      };

      var UncaughtFrozenStore = function UncaughtFrozenStore() {
        this.a = [];
      };

      var findUncaughtFrozen = function findUncaughtFrozen(store, key) {
        return arrayFind(store.a, function (it) {
          return it[0] === key;
        });
      };

      UncaughtFrozenStore.prototype = {
        get: function get(key) {
          var entry = findUncaughtFrozen(this, key);
          if (entry) return entry[1];
        },
        has: function has(key) {
          return !!findUncaughtFrozen(this, key);
        },
        set: function set(key, value) {
          var entry = findUncaughtFrozen(this, key);
          if (entry) entry[1] = value;else this.a.push([key, value]);
        },
        'delete': function _delete(key) {
          var index = arrayFindIndex(this.a, function (it) {
            return it[0] === key;
          });
          if (~index) this.a.splice(index, 1);
          return !!~index;
        }
      };
      module.exports = {
        getConstructor: function getConstructor(wrapper, NAME, IS_MAP, ADDER) {
          var C = wrapper(function (that, iterable) {
            anInstance(that, C, NAME, '_i');
            that._t = NAME; // collection type

            that._i = id++; // collection id

            that._l = undefined; // leak store for uncaught frozen objects

            if (iterable != undefined) forOf(iterable, IS_MAP, that[ADDER], that);
          });
          redefineAll(C.prototype, {
            // 23.3.3.2 WeakMap.prototype.delete(key)
            // 23.4.3.3 WeakSet.prototype.delete(value)
            'delete': function _delete(key) {
              if (!isObject(key)) return false;
              var data = getWeak(key);
              if (data === true) return uncaughtFrozenStore(validate(this, NAME))['delete'](key);
              return data && $has(data, this._i) && delete data[this._i];
            },
            // 23.3.3.4 WeakMap.prototype.has(key)
            // 23.4.3.4 WeakSet.prototype.has(value)
            has: function has(key) {
              if (!isObject(key)) return false;
              var data = getWeak(key);
              if (data === true) return uncaughtFrozenStore(validate(this, NAME)).has(key);
              return data && $has(data, this._i);
            }
          });
          return C;
        },
        def: function def(that, key, value) {
          var data = getWeak(anObject(key), true);
          if (data === true) uncaughtFrozenStore(that).set(key, value);else data[that._i] = value;
          return that;
        },
        ufstore: uncaughtFrozenStore
      };
      /***/
    },

    /***/
    "ZJLg":
    /*!******************************************************************************************************************!*\
      !*** ./node_modules/@angular-devkit/build-angular/node_modules/core-js/internals/create-iterator-constructor.js ***!
      \******************************************************************************************************************/

    /*! no static exports found */

    /***/
    function ZJLg(module, exports, __webpack_require__) {
      "use strict";

      var IteratorPrototype = __webpack_require__(
      /*! ../internals/iterators-core */
      "G1Vw").IteratorPrototype;

      var create = __webpack_require__(
      /*! ../internals/object-create */
      "2RDa");

      var createPropertyDescriptor = __webpack_require__(
      /*! ../internals/create-property-descriptor */
      "uSMZ");

      var setToStringTag = __webpack_require__(
      /*! ../internals/set-to-string-tag */
      "shqn");

      var Iterators = __webpack_require__(
      /*! ../internals/iterators */
      "pz+c");

      var returnThis = function returnThis() {
        return this;
      };

      module.exports = function (IteratorConstructor, NAME, next) {
        var TO_STRING_TAG = NAME + ' Iterator';
        IteratorConstructor.prototype = create(IteratorPrototype, {
          next: createPropertyDescriptor(1, next)
        });
        setToStringTag(IteratorConstructor, TO_STRING_TAG, false, true);
        Iterators[TO_STRING_TAG] = returnThis;
        return IteratorConstructor;
      };
      /***/

    },

    /***/
    "ZQqA":
    /*!************************************************************************************************************!*\
      !*** ./node_modules/@angular-devkit/build-angular/node_modules/core-js/modules/es.symbol.to-string-tag.js ***!
      \************************************************************************************************************/

    /*! no static exports found */

    /***/
    function ZQqA(module, exports, __webpack_require__) {
      var defineWellKnownSymbol = __webpack_require__(
      /*! ../internals/define-well-known-symbol */
      "94Vg"); // `Symbol.toStringTag` well-known symbol
      // https://tc39.es/ecma262/#sec-symbol.tostringtag


      defineWellKnownSymbol('toStringTag');
      /***/
    },

    /***/
    "ZRqE":
    /*!**************************************************************************************************!*\
      !*** ./node_modules/@angular-devkit/build-angular/node_modules/core-js/internals/object-keys.js ***!
      \**************************************************************************************************/

    /*! no static exports found */

    /***/
    function ZRqE(module, exports, __webpack_require__) {
      var internalObjectKeys = __webpack_require__(
      /*! ../internals/object-keys-internal */
      "vVmn");

      var enumBugKeys = __webpack_require__(
      /*! ../internals/enum-bug-keys */
      "aAjO"); // `Object.keys` method
      // https://tc39.es/ecma262/#sec-object.keys


      module.exports = Object.keys || function keys(O) {
        return internalObjectKeys(O, enumBugKeys);
      };
      /***/

    },

    /***/
    "aAjO":
    /*!****************************************************************************************************!*\
      !*** ./node_modules/@angular-devkit/build-angular/node_modules/core-js/internals/enum-bug-keys.js ***!
      \****************************************************************************************************/

    /*! no static exports found */

    /***/
    function aAjO(module, exports) {
      // IE8- don't enum bug keys
      module.exports = ['constructor', 'hasOwnProperty', 'isPrototypeOf', 'propertyIsEnumerable', 'toLocaleString', 'toString', 'valueOf'];
      /***/
    },

    /***/
    "aCFj":
    /*!*****************************************************!*\
      !*** ./node_modules/core-js/modules/_to-iobject.js ***!
      \*****************************************************/

    /*! no static exports found */

    /***/
    function aCFj(module, exports, __webpack_require__) {
      // to indexed object, toObject with fallback for non-array-like ES3 strings
      var IObject = __webpack_require__(
      /*! ./_iobject */
      "Ymqv");

      var defined = __webpack_require__(
      /*! ./_defined */
      "vhPU");

      module.exports = function (it) {
        return IObject(defined(it));
      };
      /***/

    },

    /***/
    "aGCb":
    /*!****************************************************************************************************************!*\
      !*** ./node_modules/@angular-devkit/build-angular/node_modules/core-js/internals/well-known-symbol-wrapped.js ***!
      \****************************************************************************************************************/

    /*! no static exports found */

    /***/
    function aGCb(module, exports, __webpack_require__) {
      var wellKnownSymbol = __webpack_require__(
      /*! ../internals/well-known-symbol */
      "m41k");

      exports.f = wellKnownSymbol;
      /***/
    },

    /***/
    "aJMj":
    /*!*********************************************************************************************************************!*\
      !*** ./node_modules/@angular-devkit/build-angular/node_modules/core-js/internals/create-non-enumerable-property.js ***!
      \*********************************************************************************************************************/

    /*! no static exports found */

    /***/
    function aJMj(module, exports, __webpack_require__) {
      var DESCRIPTORS = __webpack_require__(
      /*! ../internals/descriptors */
      "T69T");

      var definePropertyModule = __webpack_require__(
      /*! ../internals/object-define-property */
      "/Ybd");

      var createPropertyDescriptor = __webpack_require__(
      /*! ../internals/create-property-descriptor */
      "uSMZ");

      module.exports = DESCRIPTORS ? function (object, key, value) {
        return definePropertyModule.f(object, key, createPropertyDescriptor(1, value));
      } : function (object, key, value) {
        object[key] = value;
        return object;
      };
      /***/
    },

    /***/
    "aTTg":
    /*!*************************************************************************************************!*\
      !*** ./node_modules/@angular-devkit/build-angular/node_modules/core-js/modules/es.math.tanh.js ***!
      \*************************************************************************************************/

    /*! no static exports found */

    /***/
    function aTTg(module, exports, __webpack_require__) {
      var $ = __webpack_require__(
      /*! ../internals/export */
      "wA6s");

      var expm1 = __webpack_require__(
      /*! ../internals/math-expm1 */
      "pn4C");

      var exp = Math.exp; // `Math.tanh` method
      // https://tc39.es/ecma262/#sec-math.tanh

      $({
        target: 'Math',
        stat: true
      }, {
        tanh: function tanh(x) {
          var a = expm1(x = +x);
          var b = expm1(-x);
          return a == Infinity ? 1 : b == Infinity ? -1 : (a - b) / (exp(x) + exp(-x));
        }
      });
      /***/
    },

    /***/
    "aagx":
    /*!**********************************************!*\
      !*** ./node_modules/core-js/modules/_has.js ***!
      \**********************************************/

    /*! no static exports found */

    /***/
    function aagx(module, exports) {
      var hasOwnProperty = {}.hasOwnProperty;

      module.exports = function (it, key) {
        return hasOwnProperty.call(it, key);
      };
      /***/

    },

    /***/
    "ane6":
    /*!***********************************************************************************************************!*\
      !*** ./node_modules/@angular-devkit/build-angular/node_modules/core-js/modules/es.number.to-precision.js ***!
      \***********************************************************************************************************/

    /*! no static exports found */

    /***/
    function ane6(module, exports, __webpack_require__) {
      "use strict";

      var $ = __webpack_require__(
      /*! ../internals/export */
      "wA6s");

      var fails = __webpack_require__(
      /*! ../internals/fails */
      "rG8t");

      var thisNumberValue = __webpack_require__(
      /*! ../internals/this-number-value */
      "hH+7");

      var nativeToPrecision = 1.0.toPrecision;
      var FORCED = fails(function () {
        // IE7-
        return nativeToPrecision.call(1, undefined) !== '1';
      }) || !fails(function () {
        // V8 ~ Android 4.3-
        nativeToPrecision.call({});
      }); // `Number.prototype.toPrecision` method
      // https://tc39.es/ecma262/#sec-number.prototype.toprecision

      $({
        target: 'Number',
        proto: true,
        forced: FORCED
      }, {
        toPrecision: function toPrecision(precision) {
          return precision === undefined ? nativeToPrecision.call(thisNumberValue(this)) : nativeToPrecision.call(thisNumberValue(this), precision);
        }
      });
      /***/
    },

    /***/
    "apmT":
    /*!*******************************************************!*\
      !*** ./node_modules/core-js/modules/_to-primitive.js ***!
      \*******************************************************/

    /*! no static exports found */

    /***/
    function apmT(module, exports, __webpack_require__) {
      // 7.1.1 ToPrimitive(input [, PreferredType])
      var isObject = __webpack_require__(
      /*! ./_is-object */
      "0/R4"); // instead of the ES6 spec version, we didn't implement @@toPrimitive case
      // and the second argument - flag - preferred type is a string


      module.exports = function (it, S) {
        if (!isObject(it)) return it;
        var fn, val;
        if (S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;
        if (typeof (fn = it.valueOf) == 'function' && !isObject(val = fn.call(it))) return val;
        if (!S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;
        throw TypeError("Can't convert object to primitive value");
      };
      /***/

    },

    /***/
    "azxr":
    /*!*******************************************************************************************************!*\
      !*** ./node_modules/@angular-devkit/build-angular/node_modules/core-js/internals/object-to-string.js ***!
      \*******************************************************************************************************/

    /*! no static exports found */

    /***/
    function azxr(module, exports, __webpack_require__) {
      "use strict";

      var TO_STRING_TAG_SUPPORT = __webpack_require__(
      /*! ../internals/to-string-tag-support */
      "4PyY");

      var classof = __webpack_require__(
      /*! ../internals/classof */
      "mN5b"); // `Object.prototype.toString` method implementation
      // https://tc39.es/ecma262/#sec-object.prototype.tostring


      module.exports = TO_STRING_TAG_SUPPORT ? {}.toString : function toString() {
        return '[object ' + classof(this) + ']';
      };
      /***/
    },

    /***/
    "bHwr":
    /*!***********************************************************************************************!*\
      !*** ./node_modules/@angular-devkit/build-angular/node_modules/core-js/modules/es.promise.js ***!
      \***********************************************************************************************/

    /*! no static exports found */

    /***/
    function bHwr(module, exports, __webpack_require__) {
      "use strict";

      var $ = __webpack_require__(
      /*! ../internals/export */
      "wA6s");

      var IS_PURE = __webpack_require__(
      /*! ../internals/is-pure */
      "g9hI");

      var global = __webpack_require__(
      /*! ../internals/global */
      "ocAm");

      var getBuiltIn = __webpack_require__(
      /*! ../internals/get-built-in */
      "Ew/G");

      var NativePromise = __webpack_require__(
      /*! ../internals/native-promise-constructor */
      "K1dl");

      var redefine = __webpack_require__(
      /*! ../internals/redefine */
      "2MGJ");

      var redefineAll = __webpack_require__(
      /*! ../internals/redefine-all */
      "8aNu");

      var setToStringTag = __webpack_require__(
      /*! ../internals/set-to-string-tag */
      "shqn");

      var setSpecies = __webpack_require__(
      /*! ../internals/set-species */
      "JHhb");

      var isObject = __webpack_require__(
      /*! ../internals/is-object */
      "6XUM");

      var aFunction = __webpack_require__(
      /*! ../internals/a-function */
      "Neub");

      var anInstance = __webpack_require__(
      /*! ../internals/an-instance */
      "SM6+");

      var inspectSource = __webpack_require__(
      /*! ../internals/inspect-source */
      "6urC");

      var iterate = __webpack_require__(
      /*! ../internals/iterate */
      "Rn6E");

      var checkCorrectnessOfIteration = __webpack_require__(
      /*! ../internals/check-correctness-of-iteration */
      "EIBq");

      var speciesConstructor = __webpack_require__(
      /*! ../internals/species-constructor */
      "p82S");

      var task = __webpack_require__(
      /*! ../internals/task */
      "Ox9q").set;

      var microtask = __webpack_require__(
      /*! ../internals/microtask */
      "3xQm");

      var promiseResolve = __webpack_require__(
      /*! ../internals/promise-resolve */
      "7aOP");

      var hostReportErrors = __webpack_require__(
      /*! ../internals/host-report-errors */
      "ktmr");

      var newPromiseCapabilityModule = __webpack_require__(
      /*! ../internals/new-promise-capability */
      "oB0/");

      var perform = __webpack_require__(
      /*! ../internals/perform */
      "pd8B");

      var InternalStateModule = __webpack_require__(
      /*! ../internals/internal-state */
      "XH/I");

      var isForced = __webpack_require__(
      /*! ../internals/is-forced */
      "MkZA");

      var wellKnownSymbol = __webpack_require__(
      /*! ../internals/well-known-symbol */
      "m41k");

      var IS_NODE = __webpack_require__(
      /*! ../internals/engine-is-node */
      "B43K");

      var V8_VERSION = __webpack_require__(
      /*! ../internals/engine-v8-version */
      "D3bo");

      var SPECIES = wellKnownSymbol('species');
      var PROMISE = 'Promise';
      var getInternalState = InternalStateModule.get;
      var setInternalState = InternalStateModule.set;
      var getInternalPromiseState = InternalStateModule.getterFor(PROMISE);
      var PromiseConstructor = NativePromise;
      var TypeError = global.TypeError;
      var document = global.document;
      var process = global.process;
      var $fetch = getBuiltIn('fetch');
      var newPromiseCapability = newPromiseCapabilityModule.f;
      var newGenericPromiseCapability = newPromiseCapability;
      var DISPATCH_EVENT = !!(document && document.createEvent && global.dispatchEvent);
      var NATIVE_REJECTION_EVENT = typeof PromiseRejectionEvent == 'function';
      var UNHANDLED_REJECTION = 'unhandledrejection';
      var REJECTION_HANDLED = 'rejectionhandled';
      var PENDING = 0;
      var FULFILLED = 1;
      var REJECTED = 2;
      var HANDLED = 1;
      var UNHANDLED = 2;
      var Internal, OwnPromiseCapability, PromiseWrapper, nativeThen;
      var FORCED = isForced(PROMISE, function () {
        var GLOBAL_CORE_JS_PROMISE = inspectSource(PromiseConstructor) !== String(PromiseConstructor);

        if (!GLOBAL_CORE_JS_PROMISE) {
          // V8 6.6 (Node 10 and Chrome 66) have a bug with resolving custom thenables
          // https://bugs.chromium.org/p/chromium/issues/detail?id=830565
          // We can't detect it synchronously, so just check versions
          if (V8_VERSION === 66) return true; // Unhandled rejections tracking support, NodeJS Promise without it fails @@species test

          if (!IS_NODE && !NATIVE_REJECTION_EVENT) return true;
        } // We need Promise#finally in the pure version for preventing prototype pollution


        if (IS_PURE && !PromiseConstructor.prototype['finally']) return true; // We can't use @@species feature detection in V8 since it causes
        // deoptimization and performance degradation
        // https://github.com/zloirock/core-js/issues/679

        if (V8_VERSION >= 51 && /native code/.test(PromiseConstructor)) return false; // Detect correctness of subclassing with @@species support

        var promise = PromiseConstructor.resolve(1);

        var FakePromise = function FakePromise(exec) {
          exec(function () {
            /* empty */
          }, function () {
            /* empty */
          });
        };

        var constructor = promise.constructor = {};
        constructor[SPECIES] = FakePromise;
        return !(promise.then(function () {
          /* empty */
        }) instanceof FakePromise);
      });
      var INCORRECT_ITERATION = FORCED || !checkCorrectnessOfIteration(function (iterable) {
        PromiseConstructor.all(iterable)['catch'](function () {
          /* empty */
        });
      }); // helpers

      var isThenable = function isThenable(it) {
        var then;
        return isObject(it) && typeof (then = it.then) == 'function' ? then : false;
      };

      var notify = function notify(state, isReject) {
        if (state.notified) return;
        state.notified = true;
        var chain = state.reactions;
        microtask(function () {
          var value = state.value;
          var ok = state.state == FULFILLED;
          var index = 0; // variable length - can't use forEach

          while (chain.length > index) {
            var reaction = chain[index++];
            var handler = ok ? reaction.ok : reaction.fail;
            var resolve = reaction.resolve;
            var reject = reaction.reject;
            var domain = reaction.domain;
            var result, then, exited;

            try {
              if (handler) {
                if (!ok) {
                  if (state.rejection === UNHANDLED) onHandleUnhandled(state);
                  state.rejection = HANDLED;
                }

                if (handler === true) result = value;else {
                  if (domain) domain.enter();
                  result = handler(value); // can throw

                  if (domain) {
                    domain.exit();
                    exited = true;
                  }
                }

                if (result === reaction.promise) {
                  reject(TypeError('Promise-chain cycle'));
                } else if (then = isThenable(result)) {
                  then.call(result, resolve, reject);
                } else resolve(result);
              } else reject(value);
            } catch (error) {
              if (domain && !exited) domain.exit();
              reject(error);
            }
          }

          state.reactions = [];
          state.notified = false;
          if (isReject && !state.rejection) onUnhandled(state);
        });
      };

      var dispatchEvent = function dispatchEvent(name, promise, reason) {
        var event, handler;

        if (DISPATCH_EVENT) {
          event = document.createEvent('Event');
          event.promise = promise;
          event.reason = reason;
          event.initEvent(name, false, true);
          global.dispatchEvent(event);
        } else event = {
          promise: promise,
          reason: reason
        };

        if (!NATIVE_REJECTION_EVENT && (handler = global['on' + name])) handler(event);else if (name === UNHANDLED_REJECTION) hostReportErrors('Unhandled promise rejection', reason);
      };

      var onUnhandled = function onUnhandled(state) {
        task.call(global, function () {
          var promise = state.facade;
          var value = state.value;
          var IS_UNHANDLED = isUnhandled(state);
          var result;

          if (IS_UNHANDLED) {
            result = perform(function () {
              if (IS_NODE) {
                process.emit('unhandledRejection', value, promise);
              } else dispatchEvent(UNHANDLED_REJECTION, promise, value);
            }); // Browsers should not trigger `rejectionHandled` event if it was handled here, NodeJS - should

            state.rejection = IS_NODE || isUnhandled(state) ? UNHANDLED : HANDLED;
            if (result.error) throw result.value;
          }
        });
      };

      var isUnhandled = function isUnhandled(state) {
        return state.rejection !== HANDLED && !state.parent;
      };

      var onHandleUnhandled = function onHandleUnhandled(state) {
        task.call(global, function () {
          var promise = state.facade;

          if (IS_NODE) {
            process.emit('rejectionHandled', promise);
          } else dispatchEvent(REJECTION_HANDLED, promise, state.value);
        });
      };

      var bind = function bind(fn, state, unwrap) {
        return function (value) {
          fn(state, value, unwrap);
        };
      };

      var internalReject = function internalReject(state, value, unwrap) {
        if (state.done) return;
        state.done = true;
        if (unwrap) state = unwrap;
        state.value = value;
        state.state = REJECTED;
        notify(state, true);
      };

      var internalResolve = function internalResolve(state, value, unwrap) {
        if (state.done) return;
        state.done = true;
        if (unwrap) state = unwrap;

        try {
          if (state.facade === value) throw TypeError("Promise can't be resolved itself");
          var then = isThenable(value);

          if (then) {
            microtask(function () {
              var wrapper = {
                done: false
              };

              try {
                then.call(value, bind(internalResolve, wrapper, state), bind(internalReject, wrapper, state));
              } catch (error) {
                internalReject(wrapper, error, state);
              }
            });
          } else {
            state.value = value;
            state.state = FULFILLED;
            notify(state, false);
          }
        } catch (error) {
          internalReject({
            done: false
          }, error, state);
        }
      }; // constructor polyfill


      if (FORCED) {
        // 25.4.3.1 Promise(executor)
        PromiseConstructor = function Promise(executor) {
          anInstance(this, PromiseConstructor, PROMISE);
          aFunction(executor);
          Internal.call(this);
          var state = getInternalState(this);

          try {
            executor(bind(internalResolve, state), bind(internalReject, state));
          } catch (error) {
            internalReject(state, error);
          }
        }; // eslint-disable-next-line no-unused-vars


        Internal = function Promise(executor) {
          setInternalState(this, {
            type: PROMISE,
            done: false,
            notified: false,
            parent: false,
            reactions: [],
            rejection: false,
            state: PENDING,
            value: undefined
          });
        };

        Internal.prototype = redefineAll(PromiseConstructor.prototype, {
          // `Promise.prototype.then` method
          // https://tc39.es/ecma262/#sec-promise.prototype.then
          then: function then(onFulfilled, onRejected) {
            var state = getInternalPromiseState(this);
            var reaction = newPromiseCapability(speciesConstructor(this, PromiseConstructor));
            reaction.ok = typeof onFulfilled == 'function' ? onFulfilled : true;
            reaction.fail = typeof onRejected == 'function' && onRejected;
            reaction.domain = IS_NODE ? process.domain : undefined;
            state.parent = true;
            state.reactions.push(reaction);
            if (state.state != PENDING) notify(state, false);
            return reaction.promise;
          },
          // `Promise.prototype.catch` method
          // https://tc39.es/ecma262/#sec-promise.prototype.catch
          'catch': function _catch(onRejected) {
            return this.then(undefined, onRejected);
          }
        });

        OwnPromiseCapability = function OwnPromiseCapability() {
          var promise = new Internal();
          var state = getInternalState(promise);
          this.promise = promise;
          this.resolve = bind(internalResolve, state);
          this.reject = bind(internalReject, state);
        };

        newPromiseCapabilityModule.f = newPromiseCapability = function newPromiseCapability(C) {
          return C === PromiseConstructor || C === PromiseWrapper ? new OwnPromiseCapability(C) : newGenericPromiseCapability(C);
        };

        if (!IS_PURE && typeof NativePromise == 'function') {
          nativeThen = NativePromise.prototype.then; // wrap native Promise#then for native async functions

          redefine(NativePromise.prototype, 'then', function then(onFulfilled, onRejected) {
            var that = this;
            return new PromiseConstructor(function (resolve, reject) {
              nativeThen.call(that, resolve, reject);
            }).then(onFulfilled, onRejected); // https://github.com/zloirock/core-js/issues/640
          }, {
            unsafe: true
          }); // wrap fetch result

          if (typeof $fetch == 'function') $({
            global: true,
            enumerable: true,
            forced: true
          }, {
            // eslint-disable-next-line no-unused-vars
            fetch: function fetch(input
            /* , init */
            ) {
              return promiseResolve(PromiseConstructor, $fetch.apply(global, arguments));
            }
          });
        }
      }

      $({
        global: true,
        wrap: true,
        forced: FORCED
      }, {
        Promise: PromiseConstructor
      });
      setToStringTag(PromiseConstructor, PROMISE, false, true);
      setSpecies(PROMISE);
      PromiseWrapper = getBuiltIn(PROMISE); // statics

      $({
        target: PROMISE,
        stat: true,
        forced: FORCED
      }, {
        // `Promise.reject` method
        // https://tc39.es/ecma262/#sec-promise.reject
        reject: function reject(r) {
          var capability = newPromiseCapability(this);
          capability.reject.call(undefined, r);
          return capability.promise;
        }
      });
      $({
        target: PROMISE,
        stat: true,
        forced: IS_PURE || FORCED
      }, {
        // `Promise.resolve` method
        // https://tc39.es/ecma262/#sec-promise.resolve
        resolve: function resolve(x) {
          return promiseResolve(IS_PURE && this === PromiseWrapper ? PromiseConstructor : this, x);
        }
      });
      $({
        target: PROMISE,
        stat: true,
        forced: INCORRECT_ITERATION
      }, {
        // `Promise.all` method
        // https://tc39.es/ecma262/#sec-promise.all
        all: function all(iterable) {
          var C = this;
          var capability = newPromiseCapability(C);
          var resolve = capability.resolve;
          var reject = capability.reject;
          var result = perform(function () {
            var $promiseResolve = aFunction(C.resolve);
            var values = [];
            var counter = 0;
            var remaining = 1;
            iterate(iterable, function (promise) {
              var index = counter++;
              var alreadyCalled = false;
              values.push(undefined);
              remaining++;
              $promiseResolve.call(C, promise).then(function (value) {
                if (alreadyCalled) return;
                alreadyCalled = true;
                values[index] = value;
                --remaining || resolve(values);
              }, reject);
            });
            --remaining || resolve(values);
          });
          if (result.error) reject(result.value);
          return capability.promise;
        },
        // `Promise.race` method
        // https://tc39.es/ecma262/#sec-promise.race
        race: function race(iterable) {
          var C = this;
          var capability = newPromiseCapability(C);
          var reject = capability.reject;
          var result = perform(function () {
            var $promiseResolve = aFunction(C.resolve);
            iterate(iterable, function (promise) {
              $promiseResolve.call(C, promise).then(capability.resolve, reject);
            });
          });
          if (result.error) reject(result.value);
          return capability.promise;
        }
      });
      /***/
    },

    /***/
    "busr":
    /*!**********************************************************************************************************************!*\
      !*** ./node_modules/@angular-devkit/build-angular/node_modules/core-js/internals/object-get-own-property-symbols.js ***!
      \**********************************************************************************************************************/

    /*! no static exports found */

    /***/
    function busr(module, exports) {
      exports.f = Object.getOwnPropertySymbols;
      /***/
    },

    /***/
    "c/8x":
    /*!*************************************************************************************************************!*\
      !*** ./node_modules/@angular-devkit/build-angular/node_modules/core-js/modules/es.symbol.async-iterator.js ***!
      \*************************************************************************************************************/

    /*! no static exports found */

    /***/
    function c8x(module, exports, __webpack_require__) {
      var defineWellKnownSymbol = __webpack_require__(
      /*! ../internals/define-well-known-symbol */
      "94Vg"); // `Symbol.asyncIterator` well-known symbol
      // https://tc39.es/ecma262/#sec-symbol.asynciterator


      defineWellKnownSymbol('asyncIterator');
      /***/
    },

    /***/
    "cJLW":
    /*!**************************************************************************************************************!*\
      !*** ./node_modules/@angular-devkit/build-angular/node_modules/core-js/modules/es.object.define-property.js ***!
      \**************************************************************************************************************/

    /*! no static exports found */

    /***/
    function cJLW(module, exports, __webpack_require__) {
      var $ = __webpack_require__(
      /*! ../internals/export */
      "wA6s");

      var DESCRIPTORS = __webpack_require__(
      /*! ../internals/descriptors */
      "T69T");

      var objectDefinePropertyModile = __webpack_require__(
      /*! ../internals/object-define-property */
      "/Ybd"); // `Object.defineProperty` method
      // https://tc39.es/ecma262/#sec-object.defineproperty


      $({
        target: 'Object',
        stat: true,
        forced: !DESCRIPTORS,
        sham: !DESCRIPTORS
      }, {
        defineProperty: objectDefinePropertyModile.f
      });
      /***/
    },

    /***/
    "cZY6":
    /*!***********************************************************************************************!*\
      !*** ./node_modules/@angular-devkit/build-angular/node_modules/core-js/internals/freezing.js ***!
      \***********************************************************************************************/

    /*! no static exports found */

    /***/
    function cZY6(module, exports, __webpack_require__) {
      var fails = __webpack_require__(
      /*! ../internals/fails */
      "rG8t");

      module.exports = !fails(function () {
        return Object.isExtensible(Object.preventExtensions({}));
      });
      /***/
    },

    /***/
    "cwa4":
    /*!***************************************************************************************************************!*\
      !*** ./node_modules/@angular-devkit/build-angular/node_modules/core-js/internals/correct-prototype-getter.js ***!
      \***************************************************************************************************************/

    /*! no static exports found */

    /***/
    function cwa4(module, exports, __webpack_require__) {
      var fails = __webpack_require__(
      /*! ../internals/fails */
      "rG8t");

      module.exports = !fails(function () {
        function F() {
          /* empty */
        }

        F.prototype.constructor = null;
        return Object.getPrototypeOf(new F()) !== F.prototype;
      });
      /***/
    },

    /***/
    "czNK":
    /*!********************************************************!*\
      !*** ./node_modules/core-js/modules/_object-assign.js ***!
      \********************************************************/

    /*! no static exports found */

    /***/
    function czNK(module, exports, __webpack_require__) {
      "use strict"; // 19.1.2.1 Object.assign(target, source, ...)

      var DESCRIPTORS = __webpack_require__(
      /*! ./_descriptors */
      "nh4g");

      var getKeys = __webpack_require__(
      /*! ./_object-keys */
      "DVgA");

      var gOPS = __webpack_require__(
      /*! ./_object-gops */
      "JiEa");

      var pIE = __webpack_require__(
      /*! ./_object-pie */
      "UqcF");

      var toObject = __webpack_require__(
      /*! ./_to-object */
      "S/j/");

      var IObject = __webpack_require__(
      /*! ./_iobject */
      "Ymqv");

      var $assign = Object.assign; // should work with symbols and should have deterministic property order (V8 bug)

      module.exports = !$assign || __webpack_require__(
      /*! ./_fails */
      "eeVq")(function () {
        var A = {};
        var B = {}; // eslint-disable-next-line no-undef

        var S = Symbol();
        var K = 'abcdefghijklmnopqrst';
        A[S] = 7;
        K.split('').forEach(function (k) {
          B[k] = k;
        });
        return $assign({}, A)[S] != 7 || Object.keys($assign({}, B)).join('') != K;
      }) ? function assign(target, source) {
        // eslint-disable-line no-unused-vars
        var T = toObject(target);
        var aLen = arguments.length;
        var index = 1;
        var getSymbols = gOPS.f;
        var isEnum = pIE.f;

        while (aLen > index) {
          var S = IObject(arguments[index++]);
          var keys = getSymbols ? getKeys(S).concat(getSymbols(S)) : getKeys(S);
          var length = keys.length;
          var j = 0;
          var key;

          while (length > j) {
            key = keys[j++];
            if (!DESCRIPTORS || isEnum.call(S, key)) T[key] = S[key];
          }
        }

        return T;
      } : $assign;
      /***/
    },

    /***/
    "d/Gc":
    /*!************************************************************!*\
      !*** ./node_modules/core-js/modules/_to-absolute-index.js ***!
      \************************************************************/

    /*! no static exports found */

    /***/
    function dGc(module, exports, __webpack_require__) {
      var toInteger = __webpack_require__(
      /*! ./_to-integer */
      "RYi7");

      var max = Math.max;
      var min = Math.min;

      module.exports = function (index, length) {
        index = toInteger(index);
        return index < 0 ? max(index + length, 0) : min(index, length);
      };
      /***/

    },

    /***/
    "d8Sw":
    /*!*********************************************************************************************************!*\
      !*** ./node_modules/@angular-devkit/build-angular/node_modules/core-js/internals/string-html-forced.js ***!
      \*********************************************************************************************************/

    /*! no static exports found */

    /***/
    function d8Sw(module, exports, __webpack_require__) {
      var fails = __webpack_require__(
      /*! ../internals/fails */
      "rG8t"); // check the existence of a method, lowercase
      // of a tag and escaping quotes in arguments


      module.exports = function (METHOD_NAME) {
        return fails(function () {
          var test = ''[METHOD_NAME]('"');
          return test !== test.toLowerCase() || test.split('"').length > 3;
        });
      };
      /***/

    },

    /***/
    "dI74":
    /*!**************************************************************************************************!*\
      !*** ./node_modules/@angular-devkit/build-angular/node_modules/core-js/modules/es.string.sup.js ***!
      \**************************************************************************************************/

    /*! no static exports found */

    /***/
    function dI74(module, exports, __webpack_require__) {
      "use strict";

      var $ = __webpack_require__(
      /*! ../internals/export */
      "wA6s");

      var createHTML = __webpack_require__(
      /*! ../internals/create-html */
      "uoca");

      var forcedStringHTMLMethod = __webpack_require__(
      /*! ../internals/string-html-forced */
      "d8Sw"); // `String.prototype.sup` method
      // https://tc39.es/ecma262/#sec-string.prototype.sup


      $({
        target: 'String',
        proto: true,
        forced: forcedStringHTMLMethod('sup')
      }, {
        sup: function sup() {
          return createHTML(this, 'sup', '', '');
        }
      });
      /***/
    },

    /***/
    "dPn5":
    /*!***********************************************************************************************************!*\
      !*** ./node_modules/@angular-devkit/build-angular/node_modules/core-js/internals/advance-string-index.js ***!
      \***********************************************************************************************************/

    /*! no static exports found */

    /***/
    function dPn5(module, exports, __webpack_require__) {
      "use strict";

      var charAt = __webpack_require__(
      /*! ../internals/string-multibyte */
      "G7bs").charAt; // `AdvanceStringIndex` abstract operation
      // https://tc39.es/ecma262/#sec-advancestringindex


      module.exports = function (S, index, unicode) {
        return index + (unicode ? charAt(S, index).length : 1);
      };
      /***/

    },

    /***/
    "dyZX":
    /*!*************************************************!*\
      !*** ./node_modules/core-js/modules/_global.js ***!
      \*************************************************/

    /*! no static exports found */

    /***/
    function dyZX(module, exports) {
      // https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
      var global = module.exports = typeof window != 'undefined' && window.Math == Math ? window : typeof self != 'undefined' && self.Math == Math ? self // eslint-disable-next-line no-new-func
      : Function('return this')();
      if (typeof __g == 'number') __g = global; // eslint-disable-line no-undef

      /***/
    },

    /***/
    "e271":
    /*!***************************************************************************************************************************!*\
      !*** ./node_modules/@angular-devkit/build-angular/node_modules/core-js/modules/es.object.get-own-property-descriptors.js ***!
      \***************************************************************************************************************************/

    /*! no static exports found */

    /***/
    function e271(module, exports, __webpack_require__) {
      var $ = __webpack_require__(
      /*! ../internals/export */
      "wA6s");

      var DESCRIPTORS = __webpack_require__(
      /*! ../internals/descriptors */
      "T69T");

      var ownKeys = __webpack_require__(
      /*! ../internals/own-keys */
      "76gj");

      var toIndexedObject = __webpack_require__(
      /*! ../internals/to-indexed-object */
      "EMtK");

      var getOwnPropertyDescriptorModule = __webpack_require__(
      /*! ../internals/object-get-own-property-descriptor */
      "7gGY");

      var createProperty = __webpack_require__(
      /*! ../internals/create-property */
      "DYg9"); // `Object.getOwnPropertyDescriptors` method
      // https://tc39.es/ecma262/#sec-object.getownpropertydescriptors


      $({
        target: 'Object',
        stat: true,
        sham: !DESCRIPTORS
      }, {
        getOwnPropertyDescriptors: function getOwnPropertyDescriptors(object) {
          var O = toIndexedObject(object);
          var getOwnPropertyDescriptor = getOwnPropertyDescriptorModule.f;
          var keys = ownKeys(O);
          var result = {};
          var index = 0;
          var key, descriptor;

          while (keys.length > index) {
            descriptor = getOwnPropertyDescriptor(O, key = keys[index++]);
            if (descriptor !== undefined) createProperty(result, key, descriptor);
          }

          return result;
        }
      });
      /***/
    },

    /***/
    "eC89":
    /*!******************************************************************************************************!*\
      !*** ./node_modules/@angular-devkit/build-angular/node_modules/core-js/modules/es.array.includes.js ***!
      \******************************************************************************************************/

    /*! no static exports found */

    /***/
    function eC89(module, exports, __webpack_require__) {
      "use strict";

      var $ = __webpack_require__(
      /*! ../internals/export */
      "wA6s");

      var $includes = __webpack_require__(
      /*! ../internals/array-includes */
      "OXtp").includes;

      var addToUnscopables = __webpack_require__(
      /*! ../internals/add-to-unscopables */
      "A1Hp");

      var arrayMethodUsesToLength = __webpack_require__(
      /*! ../internals/array-method-uses-to-length */
      "w2hq");

      var USES_TO_LENGTH = arrayMethodUsesToLength('indexOf', {
        ACCESSORS: true,
        1: 0
      }); // `Array.prototype.includes` method
      // https://tc39.es/ecma262/#sec-array.prototype.includes

      $({
        target: 'Array',
        proto: true,
        forced: !USES_TO_LENGTH
      }, {
        includes: function includes(el
        /* , fromIndex = 0 */
        ) {
          return $includes(this, el, arguments.length > 1 ? arguments[1] : undefined);
        }
      }); // https://tc39.es/ecma262/#sec-array.prototype-@@unscopables

      addToUnscopables('includes');
      /***/
    },

    /***/
    "eeVq":
    /*!************************************************!*\
      !*** ./node_modules/core-js/modules/_fails.js ***!
      \************************************************/

    /*! no static exports found */

    /***/
    function eeVq(module, exports) {
      module.exports = function (exec) {
        try {
          return !!exec();
        } catch (e) {
          return true;
        }
      };
      /***/

    },

    /***/
    "elZq":
    /*!******************************************************!*\
      !*** ./node_modules/core-js/modules/_set-species.js ***!
      \******************************************************/

    /*! no static exports found */

    /***/
    function elZq(module, exports, __webpack_require__) {
      "use strict";

      var global = __webpack_require__(
      /*! ./_global */
      "dyZX");

      var dP = __webpack_require__(
      /*! ./_object-dp */
      "hswa");

      var DESCRIPTORS = __webpack_require__(
      /*! ./_descriptors */
      "nh4g");

      var SPECIES = __webpack_require__(
      /*! ./_wks */
      "K0xU")('species');

      module.exports = function (KEY) {
        var C = global[KEY];
        if (DESCRIPTORS && C && !C[SPECIES]) dP.f(C, SPECIES, {
          configurable: true,
          get: function get() {
            return this;
          }
        });
      };
      /***/

    },

    /***/
    "erNl":
    /*!***********************************************************************************************!*\
      !*** ./node_modules/@angular-devkit/build-angular/node_modules/core-js/internals/is-array.js ***!
      \***********************************************************************************************/

    /*! no static exports found */

    /***/
    function erNl(module, exports, __webpack_require__) {
      var classof = __webpack_require__(
      /*! ../internals/classof-raw */
      "ezU2"); // `IsArray` abstract operation
      // https://tc39.es/ecma262/#sec-isarray


      module.exports = Array.isArray || function isArray(arg) {
        return classof(arg) == 'Array';
      };
      /***/

    },

    /***/
    "ezU2":
    /*!**************************************************************************************************!*\
      !*** ./node_modules/@angular-devkit/build-angular/node_modules/core-js/internals/classof-raw.js ***!
      \**************************************************************************************************/

    /*! no static exports found */

    /***/
    function ezU2(module, exports) {
      var toString = {}.toString;

      module.exports = function (it) {
        return toString.call(it).slice(8, -1);
      };
      /***/

    },

    /***/
    "fMvl":
    /*!*****************************************************************************************************!*\
      !*** ./node_modules/@angular-devkit/build-angular/node_modules/core-js/modules/es.string.search.js ***!
      \*****************************************************************************************************/

    /*! no static exports found */

    /***/
    function fMvl(module, exports, __webpack_require__) {
      "use strict";

      var fixRegExpWellKnownSymbolLogic = __webpack_require__(
      /*! ../internals/fix-regexp-well-known-symbol-logic */
      "HSQg");

      var anObject = __webpack_require__(
      /*! ../internals/an-object */
      "F26l");

      var requireObjectCoercible = __webpack_require__(
      /*! ../internals/require-object-coercible */
      "hmpk");

      var sameValue = __webpack_require__(
      /*! ../internals/same-value */
      "EQZg");

      var regExpExec = __webpack_require__(
      /*! ../internals/regexp-exec-abstract */
      "unYP"); // @@search logic


      fixRegExpWellKnownSymbolLogic('search', 1, function (SEARCH, nativeSearch, maybeCallNative) {
        return [// `String.prototype.search` method
        // https://tc39.es/ecma262/#sec-string.prototype.search
        function search(regexp) {
          var O = requireObjectCoercible(this);
          var searcher = regexp == undefined ? undefined : regexp[SEARCH];
          return searcher !== undefined ? searcher.call(regexp, O) : new RegExp(regexp)[SEARCH](String(O));
        }, // `RegExp.prototype[@@search]` method
        // https://tc39.es/ecma262/#sec-regexp.prototype-@@search
        function (regexp) {
          var res = maybeCallNative(nativeSearch, regexp, this);
          if (res.done) return res.value;
          var rx = anObject(regexp);
          var S = String(this);
          var previousLastIndex = rx.lastIndex;
          if (!sameValue(previousLastIndex, 0)) rx.lastIndex = 0;
          var result = regExpExec(rx, S);
          if (!sameValue(rx.lastIndex, previousLastIndex)) rx.lastIndex = previousLastIndex;
          return result === null ? -1 : result.index;
        }];
      });
      /***/
    },

    /***/
    "fN/3":
    /*!***************************************************************************!*\
      !*** ./node_modules/core-js/modules/es7.reflect.get-own-metadata-keys.js ***!
      \***************************************************************************/

    /*! no static exports found */

    /***/
    function fN3(module, exports, __webpack_require__) {
      var metadata = __webpack_require__(
      /*! ./_metadata */
      "N6cJ");

      var anObject = __webpack_require__(
      /*! ./_an-object */
      "y3w9");

      var ordinaryOwnMetadataKeys = metadata.keys;
      var toMetaKey = metadata.key;
      metadata.exp({
        getOwnMetadataKeys: function getOwnMetadataKeys(target
        /* , targetKey */
        ) {
          return ordinaryOwnMetadataKeys(anObject(target), arguments.length < 2 ? undefined : toMetaKey(arguments[1]));
        }
      });
      /***/
    },

    /***/
    "fyDq":
    /*!************************************************************!*\
      !*** ./node_modules/core-js/modules/_set-to-string-tag.js ***!
      \************************************************************/

    /*! no static exports found */

    /***/
    function fyDq(module, exports, __webpack_require__) {
      var def = __webpack_require__(
      /*! ./_object-dp */
      "hswa").f;

      var has = __webpack_require__(
      /*! ./_has */
      "aagx");

      var TAG = __webpack_require__(
      /*! ./_wks */
      "K0xU")('toStringTag');

      module.exports = function (it, tag, stat) {
        if (it && !has(it = stat ? it : it.prototype, TAG)) def(it, TAG, {
          configurable: true,
          value: tag
        });
      };
      /***/

    },

    /***/
    "g3g5":
    /*!***********************************************!*\
      !*** ./node_modules/core-js/modules/_core.js ***!
      \***********************************************/

    /*! no static exports found */

    /***/
    function g3g5(module, exports) {
      var core = module.exports = {
        version: '2.6.12'
      };
      if (typeof __e == 'number') __e = core; // eslint-disable-line no-undef

      /***/
    },

    /***/
    "g69M":
    /*!*********************************************************************************************************************!*\
      !*** ./node_modules/@angular-devkit/build-angular/node_modules/core-js/modules/es.object.get-own-property-names.js ***!
      \*********************************************************************************************************************/

    /*! no static exports found */

    /***/
    function g69M(module, exports, __webpack_require__) {
      var $ = __webpack_require__(
      /*! ../internals/export */
      "wA6s");

      var fails = __webpack_require__(
      /*! ../internals/fails */
      "rG8t");

      var nativeGetOwnPropertyNames = __webpack_require__(
      /*! ../internals/object-get-own-property-names-external */
      "TzEA").f;

      var FAILS_ON_PRIMITIVES = fails(function () {
        return !Object.getOwnPropertyNames(1);
      }); // `Object.getOwnPropertyNames` method
      // https://tc39.es/ecma262/#sec-object.getownpropertynames

      $({
        target: 'Object',
        stat: true,
        forced: FAILS_ON_PRIMITIVES
      }, {
        getOwnPropertyNames: nativeGetOwnPropertyNames
      });
      /***/
    },

    /***/
    "g9hI":
    /*!**********************************************************************************************!*\
      !*** ./node_modules/@angular-devkit/build-angular/node_modules/core-js/internals/is-pure.js ***!
      \**********************************************************************************************/

    /*! no static exports found */

    /***/
    function g9hI(module, exports) {
      module.exports = false;
      /***/
    },

    /***/
    "gQgS":
    /*!*****************************************************************************************************!*\
      !*** ./node_modules/@angular-devkit/build-angular/node_modules/core-js/modules/es.object.values.js ***!
      \*****************************************************************************************************/

    /*! no static exports found */

    /***/
    function gQgS(module, exports, __webpack_require__) {
      var $ = __webpack_require__(
      /*! ../internals/export */
      "wA6s");

      var $values = __webpack_require__(
      /*! ../internals/object-to-array */
      "4Ym5").values; // `Object.values` method
      // https://tc39.es/ecma262/#sec-object.values


      $({
        target: 'Object',
        stat: true
      }, {
        values: function values(O) {
          return $values(O);
        }
      });
      /***/
    },

    /***/
    "gXAK":
    /*!**************************************************************************************************!*\
      !*** ./node_modules/@angular-devkit/build-angular/node_modules/core-js/modules/es.string.big.js ***!
      \**************************************************************************************************/

    /*! no static exports found */

    /***/
    function gXAK(module, exports, __webpack_require__) {
      "use strict";

      var $ = __webpack_require__(
      /*! ../internals/export */
      "wA6s");

      var createHTML = __webpack_require__(
      /*! ../internals/create-html */
      "uoca");

      var forcedStringHTMLMethod = __webpack_require__(
      /*! ../internals/string-html-forced */
      "d8Sw"); // `String.prototype.big` method
      // https://tc39.es/ecma262/#sec-string.prototype.big


      $({
        target: 'String',
        proto: true,
        forced: forcedStringHTMLMethod('big')
      }, {
        big: function big() {
          return createHTML(this, 'big', '', '');
        }
      });
      /***/
    },

    /***/
    "gke3":
    /*!****************************************************************************************************!*\
      !*** ./node_modules/@angular-devkit/build-angular/node_modules/core-js/modules/es.array.filter.js ***!
      \****************************************************************************************************/

    /*! no static exports found */

    /***/
    function gke3(module, exports, __webpack_require__) {
      "use strict";

      var $ = __webpack_require__(
      /*! ../internals/export */
      "wA6s");

      var $filter = __webpack_require__(
      /*! ../internals/array-iteration */
      "kk6e").filter;

      var arrayMethodHasSpeciesSupport = __webpack_require__(
      /*! ../internals/array-method-has-species-support */
      "lRyB");

      var arrayMethodUsesToLength = __webpack_require__(
      /*! ../internals/array-method-uses-to-length */
      "w2hq");

      var HAS_SPECIES_SUPPORT = arrayMethodHasSpeciesSupport('filter'); // Edge 14- issue

      var USES_TO_LENGTH = arrayMethodUsesToLength('filter'); // `Array.prototype.filter` method
      // https://tc39.es/ecma262/#sec-array.prototype.filter
      // with adding support of @@species

      $({
        target: 'Array',
        proto: true,
        forced: !HAS_SPECIES_SUPPORT || !USES_TO_LENGTH
      }, {
        filter: function filter(callbackfn
        /* , thisArg */
        ) {
          return $filter(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
        }
      });
      /***/
    },

    /***/
    "gn9T":
    /*!********************************************************************************************************************!*\
      !*** ./node_modules/@angular-devkit/build-angular/node_modules/core-js/internals/object-property-is-enumerable.js ***!
      \********************************************************************************************************************/

    /*! no static exports found */

    /***/
    function gn9T(module, exports, __webpack_require__) {
      "use strict";

      var nativePropertyIsEnumerable = {}.propertyIsEnumerable;
      var getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor; // Nashorn ~ JDK8 bug

      var NASHORN_BUG = getOwnPropertyDescriptor && !nativePropertyIsEnumerable.call({
        1: 2
      }, 1); // `Object.prototype.propertyIsEnumerable` method implementation
      // https://tc39.es/ecma262/#sec-object.prototype.propertyisenumerable

      exports.f = NASHORN_BUG ? function propertyIsEnumerable(V) {
        var descriptor = getOwnPropertyDescriptor(this, V);
        return !!descriptor && descriptor.enumerable;
      } : nativePropertyIsEnumerable;
      /***/
    },

    /***/
    "hH+7":
    /*!********************************************************************************************************!*\
      !*** ./node_modules/@angular-devkit/build-angular/node_modules/core-js/internals/this-number-value.js ***!
      \********************************************************************************************************/

    /*! no static exports found */

    /***/
    function hH7(module, exports, __webpack_require__) {
      var classof = __webpack_require__(
      /*! ../internals/classof-raw */
      "ezU2"); // `thisNumberValue` abstract operation
      // https://tc39.es/ecma262/#sec-thisnumbervalue


      module.exports = function (value) {
        if (typeof value != 'number' && classof(value) != 'Number') {
          throw TypeError('Incorrect invocation');
        }

        return +value;
      };
      /***/

    },

    /***/
    "hPIQ":
    /*!****************************************************!*\
      !*** ./node_modules/core-js/modules/_iterators.js ***!
      \****************************************************/

    /*! no static exports found */

    /***/
    function hPIQ(module, exports) {
      module.exports = {};
      /***/
    },

    /***/
    "hdsk":
    /*!************************************************************************************************!*\
      !*** ./node_modules/@angular-devkit/build-angular/node_modules/core-js/modules/es.weak-map.js ***!
      \************************************************************************************************/

    /*! no static exports found */

    /***/
    function hdsk(module, exports, __webpack_require__) {
      "use strict";

      var global = __webpack_require__(
      /*! ../internals/global */
      "ocAm");

      var redefineAll = __webpack_require__(
      /*! ../internals/redefine-all */
      "8aNu");

      var InternalMetadataModule = __webpack_require__(
      /*! ../internals/internal-metadata */
      "M7Xk");

      var collection = __webpack_require__(
      /*! ../internals/collection */
      "wdMf");

      var collectionWeak = __webpack_require__(
      /*! ../internals/collection-weak */
      "DAme");

      var isObject = __webpack_require__(
      /*! ../internals/is-object */
      "6XUM");

      var enforceIternalState = __webpack_require__(
      /*! ../internals/internal-state */
      "XH/I").enforce;

      var NATIVE_WEAK_MAP = __webpack_require__(
      /*! ../internals/native-weak-map */
      "yaK9");

      var IS_IE11 = !global.ActiveXObject && 'ActiveXObject' in global;
      var isExtensible = Object.isExtensible;
      var InternalWeakMap;

      var wrapper = function wrapper(init) {
        return function WeakMap() {
          return init(this, arguments.length ? arguments[0] : undefined);
        };
      }; // `WeakMap` constructor
      // https://tc39.es/ecma262/#sec-weakmap-constructor


      var $WeakMap = module.exports = collection('WeakMap', wrapper, collectionWeak); // IE11 WeakMap frozen keys fix
      // We can't use feature detection because it crash some old IE builds
      // https://github.com/zloirock/core-js/issues/485

      if (NATIVE_WEAK_MAP && IS_IE11) {
        InternalWeakMap = collectionWeak.getConstructor(wrapper, 'WeakMap', true);
        InternalMetadataModule.REQUIRED = true;
        var WeakMapPrototype = $WeakMap.prototype;
        var nativeDelete = WeakMapPrototype['delete'];
        var nativeHas = WeakMapPrototype.has;
        var nativeGet = WeakMapPrototype.get;
        var nativeSet = WeakMapPrototype.set;
        redefineAll(WeakMapPrototype, {
          'delete': function _delete(key) {
            if (isObject(key) && !isExtensible(key)) {
              var state = enforceIternalState(this);
              if (!state.frozen) state.frozen = new InternalWeakMap();
              return nativeDelete.call(this, key) || state.frozen['delete'](key);
            }

            return nativeDelete.call(this, key);
          },
          has: function has(key) {
            if (isObject(key) && !isExtensible(key)) {
              var state = enforceIternalState(this);
              if (!state.frozen) state.frozen = new InternalWeakMap();
              return nativeHas.call(this, key) || state.frozen.has(key);
            }

            return nativeHas.call(this, key);
          },
          get: function get(key) {
            if (isObject(key) && !isExtensible(key)) {
              var state = enforceIternalState(this);
              if (!state.frozen) state.frozen = new InternalWeakMap();
              return nativeHas.call(this, key) ? nativeGet.call(this, key) : state.frozen.get(key);
            }

            return nativeGet.call(this, key);
          },
          set: function set(key, value) {
            if (isObject(key) && !isExtensible(key)) {
              var state = enforceIternalState(this);
              if (!state.frozen) state.frozen = new InternalWeakMap();
              nativeHas.call(this, key) ? nativeSet.call(this, key, value) : state.frozen.set(key, value);
            } else nativeSet.call(this, key, value);

            return this;
          }
        });
      }
      /***/

    },

    /***/
    "hmpk":
    /*!***************************************************************************************************************!*\
      !*** ./node_modules/@angular-devkit/build-angular/node_modules/core-js/internals/require-object-coercible.js ***!
      \***************************************************************************************************************/

    /*! no static exports found */

    /***/
    function hmpk(module, exports) {
      // `RequireObjectCoercible` abstract operation
      // https://tc39.es/ecma262/#sec-requireobjectcoercible
      module.exports = function (it) {
        if (it == undefined) throw TypeError("Can't call method on " + it);
        return it;
      };
      /***/

    },

    /***/
    "hswa":
    /*!****************************************************!*\
      !*** ./node_modules/core-js/modules/_object-dp.js ***!
      \****************************************************/

    /*! no static exports found */

    /***/
    function hswa(module, exports, __webpack_require__) {
      var anObject = __webpack_require__(
      /*! ./_an-object */
      "y3w9");

      var IE8_DOM_DEFINE = __webpack_require__(
      /*! ./_ie8-dom-define */
      "xpql");

      var toPrimitive = __webpack_require__(
      /*! ./_to-primitive */
      "apmT");

      var dP = Object.defineProperty;
      exports.f = __webpack_require__(
      /*! ./_descriptors */
      "nh4g") ? Object.defineProperty : function defineProperty(O, P, Attributes) {
        anObject(O);
        P = toPrimitive(P, true);
        anObject(Attributes);
        if (IE8_DOM_DEFINE) try {
          return dP(O, P, Attributes);
        } catch (e) {
          /* empty */
        }
        if ('get' in Attributes || 'set' in Attributes) throw TypeError('Accessors not supported!');
        if ('value' in Attributes) O[P] = Attributes.value;
        return O;
      };
      /***/
    },

    /***/
    "i5dc":
    /*!****************************************************!*\
      !*** ./node_modules/core-js/modules/_set-proto.js ***!
      \****************************************************/

    /*! no static exports found */

    /***/
    function i5dc(module, exports, __webpack_require__) {
      // Works with __proto__ only. Old v8 can't work with null proto objects.

      /* eslint-disable no-proto */
      var isObject = __webpack_require__(
      /*! ./_is-object */
      "0/R4");

      var anObject = __webpack_require__(
      /*! ./_an-object */
      "y3w9");

      var check = function check(O, proto) {
        anObject(O);
        if (!isObject(proto) && proto !== null) throw TypeError(proto + ": can't set as prototype!");
      };

      module.exports = {
        set: Object.setPrototypeOf || ('__proto__' in {} ? // eslint-disable-line
        function (test, buggy, set) {
          try {
            set = __webpack_require__(
            /*! ./_ctx */
            "m0Pp")(Function.call, __webpack_require__(
            /*! ./_object-gopd */
            "EemH").f(Object.prototype, '__proto__').set, 2);
            set(test, []);
            buggy = !(test instanceof Array);
          } catch (e) {
            buggy = true;
          }

          return function setPrototypeOf(O, proto) {
            check(O, proto);
            if (buggy) O.__proto__ = proto;else set(O, proto);
            return O;
          };
        }({}, false) : undefined),
        check: check
      };
      /***/
    },

    /***/
    "i85Z":
    /*!********************************************************************************************************!*\
      !*** ./node_modules/@angular-devkit/build-angular/node_modules/core-js/internals/use-symbol-as-uid.js ***!
      \********************************************************************************************************/

    /*! no static exports found */

    /***/
    function i85Z(module, exports, __webpack_require__) {
      var NATIVE_SYMBOL = __webpack_require__(
      /*! ../internals/native-symbol */
      "U+kB");

      module.exports = NATIVE_SYMBOL // eslint-disable-next-line no-undef
      && !Symbol.sham // eslint-disable-next-line no-undef
      && typeof Symbol.iterator == 'symbol';
      /***/
    },

    /***/
    "iW+S":
    /*!******************************************************************!*\
      !*** ./node_modules/core-js/modules/es7.reflect.has-metadata.js ***!
      \******************************************************************/

    /*! no static exports found */

    /***/
    function iWS(module, exports, __webpack_require__) {
      var metadata = __webpack_require__(
      /*! ./_metadata */
      "N6cJ");

      var anObject = __webpack_require__(
      /*! ./_an-object */
      "y3w9");

      var getPrototypeOf = __webpack_require__(
      /*! ./_object-gpo */
      "OP3Y");

      var ordinaryHasOwnMetadata = metadata.has;
      var toMetaKey = metadata.key;

      var ordinaryHasMetadata = function ordinaryHasMetadata(MetadataKey, O, P) {
        var hasOwn = ordinaryHasOwnMetadata(MetadataKey, O, P);
        if (hasOwn) return true;
        var parent = getPrototypeOf(O);
        return parent !== null ? ordinaryHasMetadata(MetadataKey, parent, P) : false;
      };

      metadata.exp({
        hasMetadata: function hasMetadata(metadataKey, target
        /* , targetKey */
        ) {
          return ordinaryHasMetadata(metadataKey, anObject(target), arguments.length < 3 ? undefined : toMetaKey(arguments[2]));
        }
      });
      /***/
    },

    /***/
    "ipMl":
    /*!***********************************************************************************************************************!*\
      !*** ./node_modules/@angular-devkit/build-angular/node_modules/core-js/internals/call-with-safe-iteration-closing.js ***!
      \***********************************************************************************************************************/

    /*! no static exports found */

    /***/
    function ipMl(module, exports, __webpack_require__) {
      var anObject = __webpack_require__(
      /*! ../internals/an-object */
      "F26l");

      var iteratorClose = __webpack_require__(
      /*! ../internals/iterator-close */
      "5zQ0"); // call something on iterator step with safe closing on error


      module.exports = function (iterator, fn, value, ENTRIES) {
        try {
          return ENTRIES ? fn(anObject(value)[0], value[1]) : fn(value); // 7.4.6 IteratorClose(iterator, completion)
        } catch (error) {
          iteratorClose(iterator);
          throw error;
        }
      };
      /***/

    },

    /***/
    "jnLS":
    /*!**************************************************************************************************!*\
      !*** ./node_modules/@angular-devkit/build-angular/node_modules/core-js/internals/string-trim.js ***!
      \**************************************************************************************************/

    /*! no static exports found */

    /***/
    function jnLS(module, exports, __webpack_require__) {
      var requireObjectCoercible = __webpack_require__(
      /*! ../internals/require-object-coercible */
      "hmpk");

      var whitespaces = __webpack_require__(
      /*! ../internals/whitespaces */
      "xFZC");

      var whitespace = '[' + whitespaces + ']';
      var ltrim = RegExp('^' + whitespace + whitespace + '*');
      var rtrim = RegExp(whitespace + whitespace + '*$'); // `String.prototype.{ trim, trimStart, trimEnd, trimLeft, trimRight }` methods implementation

      var createMethod = function createMethod(TYPE) {
        return function ($this) {
          var string = String(requireObjectCoercible($this));
          if (TYPE & 1) string = string.replace(ltrim, '');
          if (TYPE & 2) string = string.replace(rtrim, '');
          return string;
        };
      };

      module.exports = {
        // `String.prototype.{ trimLeft, trimStart }` methods
        // https://tc39.es/ecma262/#sec-string.prototype.trimstart
        start: createMethod(1),
        // `String.prototype.{ trimRight, trimEnd }` methods
        // https://tc39.es/ecma262/#sec-string.prototype.trimend
        end: createMethod(2),
        // `String.prototype.trim` method
        // https://tc39.es/ecma262/#sec-string.prototype.trim
        trim: createMethod(3)
      };
      /***/
    },

    /***/
    "kIOX":
    /*!*****************************************************************************************************************!*\
      !*** ./node_modules/@angular-devkit/build-angular/node_modules/core-js/modules/web.dom-collections.for-each.js ***!
      \*****************************************************************************************************************/

    /*! no static exports found */

    /***/
    function kIOX(module, exports, __webpack_require__) {
      var global = __webpack_require__(
      /*! ../internals/global */
      "ocAm");

      var DOMIterables = __webpack_require__(
      /*! ../internals/dom-iterables */
      "OjQg");

      var forEach = __webpack_require__(
      /*! ../internals/array-for-each */
      "nP0K");

      var createNonEnumerableProperty = __webpack_require__(
      /*! ../internals/create-non-enumerable-property */
      "aJMj");

      for (var COLLECTION_NAME in DOMIterables) {
        var Collection = global[COLLECTION_NAME];
        var CollectionPrototype = Collection && Collection.prototype; // some Chrome versions have non-configurable methods on DOMTokenList

        if (CollectionPrototype && CollectionPrototype.forEach !== forEach) try {
          createNonEnumerableProperty(CollectionPrototype, 'forEach', forEach);
        } catch (error) {
          CollectionPrototype.forEach = forEach;
        }
      }
      /***/

    },

    /***/
    "kP9Y":
    /*!*********************************************************************************************************!*\
      !*** ./node_modules/@angular-devkit/build-angular/node_modules/core-js/modules/es.array.copy-within.js ***!
      \*********************************************************************************************************/

    /*! no static exports found */

    /***/
    function kP9Y(module, exports, __webpack_require__) {
      var $ = __webpack_require__(
      /*! ../internals/export */
      "wA6s");

      var copyWithin = __webpack_require__(
      /*! ../internals/array-copy-within */
      "4GtL");

      var addToUnscopables = __webpack_require__(
      /*! ../internals/add-to-unscopables */
      "A1Hp"); // `Array.prototype.copyWithin` method
      // https://tc39.es/ecma262/#sec-array.prototype.copywithin


      $({
        target: 'Array',
        proto: true
      }, {
        copyWithin: copyWithin
      }); // https://tc39.es/ecma262/#sec-array.prototype-@@unscopables

      addToUnscopables('copyWithin');
      /***/
    },

    /***/
    "kcGo":
    /*!**********************************************************************************************************!*\
      !*** ./node_modules/@angular-devkit/build-angular/node_modules/core-js/modules/es.date.to-iso-string.js ***!
      \**********************************************************************************************************/

    /*! no static exports found */

    /***/
    function kcGo(module, exports, __webpack_require__) {
      var $ = __webpack_require__(
      /*! ../internals/export */
      "wA6s");

      var toISOString = __webpack_require__(
      /*! ../internals/date-to-iso-string */
      "qc/G"); // `Date.prototype.toISOString` method
      // https://tc39.es/ecma262/#sec-date.prototype.toisostring
      // PhantomJS / old WebKit has a broken implementations


      $({
        target: 'Date',
        proto: true,
        forced: Date.prototype.toISOString !== toISOString
      }, {
        toISOString: toISOString
      });
      /***/
    },

    /***/
    "kk6e":
    /*!******************************************************************************************************!*\
      !*** ./node_modules/@angular-devkit/build-angular/node_modules/core-js/internals/array-iteration.js ***!
      \******************************************************************************************************/

    /*! no static exports found */

    /***/
    function kk6e(module, exports, __webpack_require__) {
      var bind = __webpack_require__(
      /*! ../internals/function-bind-context */
      "tcQx");

      var IndexedObject = __webpack_require__(
      /*! ../internals/indexed-object */
      "tUdv");

      var toObject = __webpack_require__(
      /*! ../internals/to-object */
      "VCQ8");

      var toLength = __webpack_require__(
      /*! ../internals/to-length */
      "xpLY");

      var arraySpeciesCreate = __webpack_require__(
      /*! ../internals/array-species-create */
      "JafA");

      var push = [].push; // `Array.prototype.{ forEach, map, filter, some, every, find, findIndex, filterOut }` methods implementation

      var createMethod = function createMethod(TYPE) {
        var IS_MAP = TYPE == 1;
        var IS_FILTER = TYPE == 2;
        var IS_SOME = TYPE == 3;
        var IS_EVERY = TYPE == 4;
        var IS_FIND_INDEX = TYPE == 6;
        var IS_FILTER_OUT = TYPE == 7;
        var NO_HOLES = TYPE == 5 || IS_FIND_INDEX;
        return function ($this, callbackfn, that, specificCreate) {
          var O = toObject($this);
          var self = IndexedObject(O);
          var boundFunction = bind(callbackfn, that, 3);
          var length = toLength(self.length);
          var index = 0;
          var create = specificCreate || arraySpeciesCreate;
          var target = IS_MAP ? create($this, length) : IS_FILTER || IS_FILTER_OUT ? create($this, 0) : undefined;
          var value, result;

          for (; length > index; index++) {
            if (NO_HOLES || index in self) {
              value = self[index];
              result = boundFunction(value, index, O);

              if (TYPE) {
                if (IS_MAP) target[index] = result; // map
                else if (result) switch (TYPE) {
                    case 3:
                      return true;
                    // some

                    case 5:
                      return value;
                    // find

                    case 6:
                      return index;
                    // findIndex

                    case 2:
                      push.call(target, value);
                    // filter
                  } else switch (TYPE) {
                    case 4:
                      return false;
                    // every

                    case 7:
                      push.call(target, value);
                    // filterOut
                  }
              }
            }
          }

          return IS_FIND_INDEX ? -1 : IS_SOME || IS_EVERY ? IS_EVERY : target;
        };
      };

      module.exports = {
        // `Array.prototype.forEach` method
        // https://tc39.es/ecma262/#sec-array.prototype.foreach
        forEach: createMethod(0),
        // `Array.prototype.map` method
        // https://tc39.es/ecma262/#sec-array.prototype.map
        map: createMethod(1),
        // `Array.prototype.filter` method
        // https://tc39.es/ecma262/#sec-array.prototype.filter
        filter: createMethod(2),
        // `Array.prototype.some` method
        // https://tc39.es/ecma262/#sec-array.prototype.some
        some: createMethod(3),
        // `Array.prototype.every` method
        // https://tc39.es/ecma262/#sec-array.prototype.every
        every: createMethod(4),
        // `Array.prototype.find` method
        // https://tc39.es/ecma262/#sec-array.prototype.find
        find: createMethod(5),
        // `Array.prototype.findIndex` method
        // https://tc39.es/ecma262/#sec-array.prototype.findIndex
        findIndex: createMethod(6),
        // `Array.prototype.filterOut` method
        // https://github.com/tc39/proposal-array-filtering
        filterOut: createMethod(7)
      };
      /***/
    },

    /***/
    "kpca":
    /*!**************************************************************************************************************!*\
      !*** ./node_modules/@angular-devkit/build-angular/node_modules/core-js/modules/es.number.is-safe-integer.js ***!
      \**************************************************************************************************************/

    /*! no static exports found */

    /***/
    function kpca(module, exports, __webpack_require__) {
      var $ = __webpack_require__(
      /*! ../internals/export */
      "wA6s");

      var isInteger = __webpack_require__(
      /*! ../internals/is-integer */
      "Nvxz");

      var abs = Math.abs; // `Number.isSafeInteger` method
      // https://tc39.es/ecma262/#sec-number.issafeinteger

      $({
        target: 'Number',
        stat: true
      }, {
        isSafeInteger: function isSafeInteger(number) {
          return isInteger(number) && abs(number) <= 0x1FFFFFFFFFFFFF;
        }
      });
      /***/
    },

    /***/
    "ktmr":
    /*!*********************************************************************************************************!*\
      !*** ./node_modules/@angular-devkit/build-angular/node_modules/core-js/internals/host-report-errors.js ***!
      \*********************************************************************************************************/

    /*! no static exports found */

    /***/
    function ktmr(module, exports, __webpack_require__) {
      var global = __webpack_require__(
      /*! ../internals/global */
      "ocAm");

      module.exports = function (a, b) {
        var console = global.console;

        if (console && console.error) {
          arguments.length === 1 ? console.error(a) : console.error(a, b);
        }
      };
      /***/

    },

    /***/
    "lPAZ":
    /*!******************************************************************************************!*\
      !*** ./node_modules/@angular-devkit/build-angular/node_modules/core-js/es/date/index.js ***!
      \******************************************************************************************/

    /*! no static exports found */

    /***/
    function lPAZ(module, exports, __webpack_require__) {
      __webpack_require__(
      /*! ../../modules/es.date.now */
      "8ydS");

      __webpack_require__(
      /*! ../../modules/es.date.to-json */
      "DGHb");

      __webpack_require__(
      /*! ../../modules/es.date.to-iso-string */
      "kcGo");

      __webpack_require__(
      /*! ../../modules/es.date.to-string */
      "n43T");

      __webpack_require__(
      /*! ../../modules/es.date.to-primitive */
      "Y5OV");

      var path = __webpack_require__(
      /*! ../../internals/path */
      "E7aN");

      module.exports = path.Date;
      /***/
    },

    /***/
    "lRyB":
    /*!***********************************************************************************************************************!*\
      !*** ./node_modules/@angular-devkit/build-angular/node_modules/core-js/internals/array-method-has-species-support.js ***!
      \***********************************************************************************************************************/

    /*! no static exports found */

    /***/
    function lRyB(module, exports, __webpack_require__) {
      var fails = __webpack_require__(
      /*! ../internals/fails */
      "rG8t");

      var wellKnownSymbol = __webpack_require__(
      /*! ../internals/well-known-symbol */
      "m41k");

      var V8_VERSION = __webpack_require__(
      /*! ../internals/engine-v8-version */
      "D3bo");

      var SPECIES = wellKnownSymbol('species');

      module.exports = function (METHOD_NAME) {
        // We can't use this feature detection in V8 since it causes
        // deoptimization and serious performance degradation
        // https://github.com/zloirock/core-js/issues/677
        return V8_VERSION >= 51 || !fails(function () {
          var array = [];
          var constructor = array.constructor = {};

          constructor[SPECIES] = function () {
            return {
              foo: 1
            };
          };

          return array[METHOD_NAME](Boolean).foo !== 1;
        });
      };
      /***/

    },

    /***/
    "ls82":
    /*!*****************************************************!*\
      !*** ./node_modules/regenerator-runtime/runtime.js ***!
      \*****************************************************/

    /*! no static exports found */

    /***/
    function ls82(module, exports, __webpack_require__) {
      /**
       * Copyright (c) 2014-present, Facebook, Inc.
       *
       * This source code is licensed under the MIT license found in the
       * LICENSE file in the root directory of this source tree.
       */
      var runtime = function (exports) {
        "use strict";

        var Op = Object.prototype;
        var hasOwn = Op.hasOwnProperty;
        var undefined; // More compressible than void 0.

        var $Symbol = typeof Symbol === "function" ? Symbol : {};
        var iteratorSymbol = $Symbol.iterator || "@@iterator";
        var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
        var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

        function define(obj, key, value) {
          Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
          });
          return obj[key];
        }

        try {
          // IE 8 has a broken Object.defineProperty that only works on DOM objects.
          define({}, "");
        } catch (err) {
          define = function define(obj, key, value) {
            return obj[key] = value;
          };
        }

        function wrap(innerFn, outerFn, self, tryLocsList) {
          // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.
          var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
          var generator = Object.create(protoGenerator.prototype);
          var context = new Context(tryLocsList || []); // The ._invoke method unifies the implementations of the .next,
          // .throw, and .return methods.

          generator._invoke = makeInvokeMethod(innerFn, self, context);
          return generator;
        }

        exports.wrap = wrap; // Try/catch helper to minimize deoptimizations. Returns a completion
        // record like context.tryEntries[i].completion. This interface could
        // have been (and was previously) designed to take a closure to be
        // invoked without arguments, but in all the cases we care about we
        // already have an existing method we want to call, so there's no need
        // to create a new function object. We can even get away with assuming
        // the method takes exactly one argument, since that happens to be true
        // in every case, so we don't have to touch the arguments object. The
        // only additional allocation required is the completion record, which
        // has a stable shape and so hopefully should be cheap to allocate.

        function tryCatch(fn, obj, arg) {
          try {
            return {
              type: "normal",
              arg: fn.call(obj, arg)
            };
          } catch (err) {
            return {
              type: "throw",
              arg: err
            };
          }
        }

        var GenStateSuspendedStart = "suspendedStart";
        var GenStateSuspendedYield = "suspendedYield";
        var GenStateExecuting = "executing";
        var GenStateCompleted = "completed"; // Returning this object from the innerFn has the same effect as
        // breaking out of the dispatch switch statement.

        var ContinueSentinel = {}; // Dummy constructor functions that we use as the .constructor and
        // .constructor.prototype properties for functions that return Generator
        // objects. For full spec compliance, you may wish to configure your
        // minifier not to mangle the names of these two functions.

        function Generator() {}

        function GeneratorFunction() {}

        function GeneratorFunctionPrototype() {} // This is a polyfill for %IteratorPrototype% for environments that
        // don't natively support it.


        var IteratorPrototype = {};

        IteratorPrototype[iteratorSymbol] = function () {
          return this;
        };

        var getProto = Object.getPrototypeOf;
        var NativeIteratorPrototype = getProto && getProto(getProto(values([])));

        if (NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
          // This environment has a native %IteratorPrototype%; use it instead
          // of the polyfill.
          IteratorPrototype = NativeIteratorPrototype;
        }

        var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype);
        GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;
        GeneratorFunctionPrototype.constructor = GeneratorFunction;
        GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"); // Helper for defining the .next, .throw, and .return methods of the
        // Iterator interface in terms of a single ._invoke method.

        function defineIteratorMethods(prototype) {
          ["next", "throw", "return"].forEach(function (method) {
            define(prototype, method, function (arg) {
              return this._invoke(method, arg);
            });
          });
        }

        exports.isGeneratorFunction = function (genFun) {
          var ctor = typeof genFun === "function" && genFun.constructor;
          return ctor ? ctor === GeneratorFunction || // For the native GeneratorFunction constructor, the best we can
          // do is to check its .name property.
          (ctor.displayName || ctor.name) === "GeneratorFunction" : false;
        };

        exports.mark = function (genFun) {
          if (Object.setPrototypeOf) {
            Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
          } else {
            genFun.__proto__ = GeneratorFunctionPrototype;
            define(genFun, toStringTagSymbol, "GeneratorFunction");
          }

          genFun.prototype = Object.create(Gp);
          return genFun;
        }; // Within the body of any async function, `await x` is transformed to
        // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
        // `hasOwn.call(value, "__await")` to determine if the yielded value is
        // meant to be awaited.


        exports.awrap = function (arg) {
          return {
            __await: arg
          };
        };

        function AsyncIterator(generator, PromiseImpl) {
          function invoke(method, arg, resolve, reject) {
            var record = tryCatch(generator[method], generator, arg);

            if (record.type === "throw") {
              reject(record.arg);
            } else {
              var result = record.arg;
              var value = result.value;

              if (value && typeof value === "object" && hasOwn.call(value, "__await")) {
                return PromiseImpl.resolve(value.__await).then(function (value) {
                  invoke("next", value, resolve, reject);
                }, function (err) {
                  invoke("throw", err, resolve, reject);
                });
              }

              return PromiseImpl.resolve(value).then(function (unwrapped) {
                // When a yielded Promise is resolved, its final value becomes
                // the .value of the Promise<{value,done}> result for the
                // current iteration.
                result.value = unwrapped;
                resolve(result);
              }, function (error) {
                // If a rejected Promise was yielded, throw the rejection back
                // into the async generator function so it can be handled there.
                return invoke("throw", error, resolve, reject);
              });
            }
          }

          var previousPromise;

          function enqueue(method, arg) {
            function callInvokeWithMethodAndArg() {
              return new PromiseImpl(function (resolve, reject) {
                invoke(method, arg, resolve, reject);
              });
            }

            return previousPromise = // If enqueue has been called before, then we want to wait until
            // all previous Promises have been resolved before calling invoke,
            // so that results are always delivered in the correct order. If
            // enqueue has not been called before, then it is important to
            // call invoke immediately, without waiting on a callback to fire,
            // so that the async generator function has the opportunity to do
            // any necessary setup in a predictable way. This predictability
            // is why the Promise constructor synchronously invokes its
            // executor callback, and why async functions synchronously
            // execute code before the first await. Since we implement simple
            // async functions in terms of async generators, it is especially
            // important to get this right, even though it requires care.
            previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, // Avoid propagating failures to Promises returned by later
            // invocations of the iterator.
            callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();
          } // Define the unified helper method that is used to implement .next,
          // .throw, and .return (see defineIteratorMethods).


          this._invoke = enqueue;
        }

        defineIteratorMethods(AsyncIterator.prototype);

        AsyncIterator.prototype[asyncIteratorSymbol] = function () {
          return this;
        };

        exports.AsyncIterator = AsyncIterator; // Note that simple async functions are implemented on top of
        // AsyncIterator objects; they just return a Promise for the value of
        // the final result produced by the iterator.

        exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) {
          if (PromiseImpl === void 0) PromiseImpl = Promise;
          var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl);
          return exports.isGeneratorFunction(outerFn) ? iter // If outerFn is a generator, return the full iterator.
          : iter.next().then(function (result) {
            return result.done ? result.value : iter.next();
          });
        };

        function makeInvokeMethod(innerFn, self, context) {
          var state = GenStateSuspendedStart;
          return function invoke(method, arg) {
            if (state === GenStateExecuting) {
              throw new Error("Generator is already running");
            }

            if (state === GenStateCompleted) {
              if (method === "throw") {
                throw arg;
              } // Be forgiving, per 25.3.3.3.3 of the spec:
              // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume


              return doneResult();
            }

            context.method = method;
            context.arg = arg;

            while (true) {
              var delegate = context.delegate;

              if (delegate) {
                var delegateResult = maybeInvokeDelegate(delegate, context);

                if (delegateResult) {
                  if (delegateResult === ContinueSentinel) continue;
                  return delegateResult;
                }
              }

              if (context.method === "next") {
                // Setting context._sent for legacy support of Babel's
                // function.sent implementation.
                context.sent = context._sent = context.arg;
              } else if (context.method === "throw") {
                if (state === GenStateSuspendedStart) {
                  state = GenStateCompleted;
                  throw context.arg;
                }

                context.dispatchException(context.arg);
              } else if (context.method === "return") {
                context.abrupt("return", context.arg);
              }

              state = GenStateExecuting;
              var record = tryCatch(innerFn, self, context);

              if (record.type === "normal") {
                // If an exception is thrown from innerFn, we leave state ===
                // GenStateExecuting and loop back for another invocation.
                state = context.done ? GenStateCompleted : GenStateSuspendedYield;

                if (record.arg === ContinueSentinel) {
                  continue;
                }

                return {
                  value: record.arg,
                  done: context.done
                };
              } else if (record.type === "throw") {
                state = GenStateCompleted; // Dispatch the exception by looping back around to the
                // context.dispatchException(context.arg) call above.

                context.method = "throw";
                context.arg = record.arg;
              }
            }
          };
        } // Call delegate.iterator[context.method](context.arg) and handle the
        // result, either by returning a { value, done } result from the
        // delegate iterator, or by modifying context.method and context.arg,
        // setting context.delegate to null, and returning the ContinueSentinel.


        function maybeInvokeDelegate(delegate, context) {
          var method = delegate.iterator[context.method];

          if (method === undefined) {
            // A .throw or .return when the delegate iterator has no .throw
            // method always terminates the yield* loop.
            context.delegate = null;

            if (context.method === "throw") {
              // Note: ["return"] must be used for ES3 parsing compatibility.
              if (delegate.iterator["return"]) {
                // If the delegate iterator has a return method, give it a
                // chance to clean up.
                context.method = "return";
                context.arg = undefined;
                maybeInvokeDelegate(delegate, context);

                if (context.method === "throw") {
                  // If maybeInvokeDelegate(context) changed context.method from
                  // "return" to "throw", let that override the TypeError below.
                  return ContinueSentinel;
                }
              }

              context.method = "throw";
              context.arg = new TypeError("The iterator does not provide a 'throw' method");
            }

            return ContinueSentinel;
          }

          var record = tryCatch(method, delegate.iterator, context.arg);

          if (record.type === "throw") {
            context.method = "throw";
            context.arg = record.arg;
            context.delegate = null;
            return ContinueSentinel;
          }

          var info = record.arg;

          if (!info) {
            context.method = "throw";
            context.arg = new TypeError("iterator result is not an object");
            context.delegate = null;
            return ContinueSentinel;
          }

          if (info.done) {
            // Assign the result of the finished delegate to the temporary
            // variable specified by delegate.resultName (see delegateYield).
            context[delegate.resultName] = info.value; // Resume execution at the desired location (see delegateYield).

            context.next = delegate.nextLoc; // If context.method was "throw" but the delegate handled the
            // exception, let the outer generator proceed normally. If
            // context.method was "next", forget context.arg since it has been
            // "consumed" by the delegate iterator. If context.method was
            // "return", allow the original .return call to continue in the
            // outer generator.

            if (context.method !== "return") {
              context.method = "next";
              context.arg = undefined;
            }
          } else {
            // Re-yield the result returned by the delegate method.
            return info;
          } // The delegate iterator is finished, so forget it and continue with
          // the outer generator.


          context.delegate = null;
          return ContinueSentinel;
        } // Define Generator.prototype.{next,throw,return} in terms of the
        // unified ._invoke helper method.


        defineIteratorMethods(Gp);
        define(Gp, toStringTagSymbol, "Generator"); // A Generator should always return itself as the iterator object when the
        // @@iterator function is called on it. Some browsers' implementations of the
        // iterator prototype chain incorrectly implement this, causing the Generator
        // object to not be returned from this call. This ensures that doesn't happen.
        // See https://github.com/facebook/regenerator/issues/274 for more details.

        Gp[iteratorSymbol] = function () {
          return this;
        };

        Gp.toString = function () {
          return "[object Generator]";
        };

        function pushTryEntry(locs) {
          var entry = {
            tryLoc: locs[0]
          };

          if (1 in locs) {
            entry.catchLoc = locs[1];
          }

          if (2 in locs) {
            entry.finallyLoc = locs[2];
            entry.afterLoc = locs[3];
          }

          this.tryEntries.push(entry);
        }

        function resetTryEntry(entry) {
          var record = entry.completion || {};
          record.type = "normal";
          delete record.arg;
          entry.completion = record;
        }

        function Context(tryLocsList) {
          // The root entry object (effectively a try statement without a catch
          // or a finally block) gives us a place to store values thrown from
          // locations where there is no enclosing try statement.
          this.tryEntries = [{
            tryLoc: "root"
          }];
          tryLocsList.forEach(pushTryEntry, this);
          this.reset(true);
        }

        exports.keys = function (object) {
          var keys = [];

          for (var key in object) {
            keys.push(key);
          }

          keys.reverse(); // Rather than returning an object with a next method, we keep
          // things simple and return the next function itself.

          return function next() {
            while (keys.length) {
              var key = keys.pop();

              if (key in object) {
                next.value = key;
                next.done = false;
                return next;
              }
            } // To avoid creating an additional object, we just hang the .value
            // and .done properties off the next function object itself. This
            // also ensures that the minifier will not anonymize the function.


            next.done = true;
            return next;
          };
        };

        function values(iterable) {
          if (iterable) {
            var iteratorMethod = iterable[iteratorSymbol];

            if (iteratorMethod) {
              return iteratorMethod.call(iterable);
            }

            if (typeof iterable.next === "function") {
              return iterable;
            }

            if (!isNaN(iterable.length)) {
              var i = -1,
                  next = function next() {
                while (++i < iterable.length) {
                  if (hasOwn.call(iterable, i)) {
                    next.value = iterable[i];
                    next.done = false;
                    return next;
                  }
                }

                next.value = undefined;
                next.done = true;
                return next;
              };

              return next.next = next;
            }
          } // Return an iterator with no values.


          return {
            next: doneResult
          };
        }

        exports.values = values;

        function doneResult() {
          return {
            value: undefined,
            done: true
          };
        }

        Context.prototype = {
          constructor: Context,
          reset: function reset(skipTempReset) {
            this.prev = 0;
            this.next = 0; // Resetting context._sent for legacy support of Babel's
            // function.sent implementation.

            this.sent = this._sent = undefined;
            this.done = false;
            this.delegate = null;
            this.method = "next";
            this.arg = undefined;
            this.tryEntries.forEach(resetTryEntry);

            if (!skipTempReset) {
              for (var name in this) {
                // Not sure about the optimal order of these conditions:
                if (name.charAt(0) === "t" && hasOwn.call(this, name) && !isNaN(+name.slice(1))) {
                  this[name] = undefined;
                }
              }
            }
          },
          stop: function stop() {
            this.done = true;
            var rootEntry = this.tryEntries[0];
            var rootRecord = rootEntry.completion;

            if (rootRecord.type === "throw") {
              throw rootRecord.arg;
            }

            return this.rval;
          },
          dispatchException: function dispatchException(exception) {
            if (this.done) {
              throw exception;
            }

            var context = this;

            function handle(loc, caught) {
              record.type = "throw";
              record.arg = exception;
              context.next = loc;

              if (caught) {
                // If the dispatched exception was caught by a catch block,
                // then let that catch block handle the exception normally.
                context.method = "next";
                context.arg = undefined;
              }

              return !!caught;
            }

            for (var i = this.tryEntries.length - 1; i >= 0; --i) {
              var entry = this.tryEntries[i];
              var record = entry.completion;

              if (entry.tryLoc === "root") {
                // Exception thrown outside of any try block that could handle
                // it, so set the completion value of the entire function to
                // throw the exception.
                return handle("end");
              }

              if (entry.tryLoc <= this.prev) {
                var hasCatch = hasOwn.call(entry, "catchLoc");
                var hasFinally = hasOwn.call(entry, "finallyLoc");

                if (hasCatch && hasFinally) {
                  if (this.prev < entry.catchLoc) {
                    return handle(entry.catchLoc, true);
                  } else if (this.prev < entry.finallyLoc) {
                    return handle(entry.finallyLoc);
                  }
                } else if (hasCatch) {
                  if (this.prev < entry.catchLoc) {
                    return handle(entry.catchLoc, true);
                  }
                } else if (hasFinally) {
                  if (this.prev < entry.finallyLoc) {
                    return handle(entry.finallyLoc);
                  }
                } else {
                  throw new Error("try statement without catch or finally");
                }
              }
            }
          },
          abrupt: function abrupt(type, arg) {
            for (var i = this.tryEntries.length - 1; i >= 0; --i) {
              var entry = this.tryEntries[i];

              if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) {
                var finallyEntry = entry;
                break;
              }
            }

            if (finallyEntry && (type === "break" || type === "continue") && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc) {
              // Ignore the finally entry if control is not jumping to a
              // location outside the try/catch block.
              finallyEntry = null;
            }

            var record = finallyEntry ? finallyEntry.completion : {};
            record.type = type;
            record.arg = arg;

            if (finallyEntry) {
              this.method = "next";
              this.next = finallyEntry.finallyLoc;
              return ContinueSentinel;
            }

            return this.complete(record);
          },
          complete: function complete(record, afterLoc) {
            if (record.type === "throw") {
              throw record.arg;
            }

            if (record.type === "break" || record.type === "continue") {
              this.next = record.arg;
            } else if (record.type === "return") {
              this.rval = this.arg = record.arg;
              this.method = "return";
              this.next = "end";
            } else if (record.type === "normal" && afterLoc) {
              this.next = afterLoc;
            }

            return ContinueSentinel;
          },
          finish: function finish(finallyLoc) {
            for (var i = this.tryEntries.length - 1; i >= 0; --i) {
              var entry = this.tryEntries[i];

              if (entry.finallyLoc === finallyLoc) {
                this.complete(entry.completion, entry.afterLoc);
                resetTryEntry(entry);
                return ContinueSentinel;
              }
            }
          },
          "catch": function _catch(tryLoc) {
            for (var i = this.tryEntries.length - 1; i >= 0; --i) {
              var entry = this.tryEntries[i];

              if (entry.tryLoc === tryLoc) {
                var record = entry.completion;

                if (record.type === "throw") {
                  var thrown = record.arg;
                  resetTryEntry(entry);
                }

                return thrown;
              }
            } // The context.catch method must only be called with a location
            // argument that corresponds to a known catch block.


            throw new Error("illegal catch attempt");
          },
          delegateYield: function delegateYield(iterable, resultName, nextLoc) {
            this.delegate = {
              iterator: values(iterable),
              resultName: resultName,
              nextLoc: nextLoc
            };

            if (this.method === "next") {
              // Deliberately forget the last sent value so that we don't
              // accidentally pass it on to the delegate.
              this.arg = undefined;
            }

            return ContinueSentinel;
          }
        }; // Regardless of whether this script is executing as a CommonJS module
        // or not, return the runtime object so that we can declare the variable
        // regeneratorRuntime in the outer scope, which allows this module to be
        // injected easily by `bin/regenerator --include-runtime script.js`.

        return exports;
      }( // If this script is executing as a CommonJS module, use module.exports
      // as the regeneratorRuntime namespace. Otherwise create a new empty
      // object. Either way, the resulting object will be used to initialize
      // the regeneratorRuntime variable at the top of this file.
      true ? module.exports : undefined);

      try {
        regeneratorRuntime = runtime;
      } catch (accidentalStrictMode) {
        // This module should not be running in strict mode, so the above
        // assignment should always work unless something is misconfigured. Just
        // in case runtime.js accidentally runs in strict mode, we can escape
        // strict mode using a global Function call. This could conceivably fail
        // if a Content Security Policy forbids using Function, but in that case
        // the proper solution is to fix the accidental strict mode problem. If
        // you've misconfigured your bundler to force strict mode and applied a
        // CSP to forbid Function, and you're not willing to fix either of those
        // problems, please detail your unique predicament in a GitHub issue.
        Function("r", "regeneratorRuntime = r")(runtime);
      }
      /***/

    },

    /***/
    "ltqb":
    /*!*******************************!*\
      !*** ./demo/src/polyfills.ts ***!
      \*******************************/

    /*! no exports provided */

    /***/
    function ltqb(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony import */


      var _angular_localize_init__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! @angular/localize/init */
      "N/DB");
      /* harmony import */


      var _angular_localize_init__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_angular_localize_init__WEBPACK_IMPORTED_MODULE_0__);
      /* harmony import */


      var core_js_es7_reflect__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! core-js/es7/reflect */
      "FZcq");
      /* harmony import */


      var core_js_es7_reflect__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(core_js_es7_reflect__WEBPACK_IMPORTED_MODULE_1__);
      /* harmony import */


      var zone_js_dist_zone__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! zone.js/dist/zone */
      "pDpN");
      /* harmony import */


      var zone_js_dist_zone__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(zone_js_dist_zone__WEBPACK_IMPORTED_MODULE_2__);
      /* harmony import */


      var _angular_localize__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
      /*! @angular/localize */
      "zJ5J");
      /**
       * This file includes polyfills needed by Angular and is loaded before the app.
       * You can add your own extra polyfills to this file.
       *
       * This file is divided into 2 sections:
       *   1. Browser polyfills. These are applied before loading ZoneJS and are sorted by browsers.
       *   2. Application imports. Files imported after ZoneJS that should be loaded before your main
       *      file.
       *
       * The current setup is for so-called "evergreen" browsers; the last versions of browsers that
       * automatically update themselves. This includes Safari >= 10, Chrome >= 55 (including Opera),
       * Edge >= 13 on the desktop, and iOS 10 and Chrome on mobile.
       *
       * Learn more in https://angular.io/docs/ts/latest/guide/browser-support.html
       */

      /***************************************************************************************************
       * BROWSER POLYFILLS
       */

      /**
       * $localize angular polyfill
       */

      /** Evergreen browsers require these. **/
      // Used for reflect-metadata in JIT. If you use AOT (and only Angular decorators), you can remove.
      // eslint-disable-next-line

      /**
       * Required to support Web Animations `@angular/platform-browser/animations`.
       * Needed for: All but Chrome, Firefox and Opera. http://caniuse.com/#feat=web-animation
       **/
      // import 'web-animations-js';  // Run `npm install --save web-animations-js`.

      /**
       * By default, zone.js will patch all possible macroTask and DomEvents
       * user can disable parts of macroTask/DomEvents patch by setting following flags
       */
      // (window as any).__Zone_disable_requestAnimationFrame = true; // disable patch requestAnimationFrame
      // (window as any).__Zone_disable_on_property = true; // disable patch onProperty such as onclick
      // (window as any).__zone_symbol__BLACK_LISTED_EVENTS = ['scroll', 'mousemove']; // disable patch specified eventNames

      /***************************************************************************************************
       * Zone JS is required by default for Angular itself.
       */
      // tslint:disable-next-line:ordered-imports
      // Included with Angular CLI.

      /***************************************************************************************************
       * APPLICATION IMPORTS
       */


      var locales = {
        "fr": {
          "8885234477142162752": "Salutations!",
          "5181440621801685681": "Il s'agit d'un texte aléatoire écrit pour montrer que les traductions d'exécution fonctionnent réellement. Chaque ligne de cet exemple sera traduite à l'aide de Google Translator.",
          "6028371114637047813": "Prénom",
          "3967269098753656610": "Adresse électronique",
          "935187492052582731": "Soumettre",
          "665199437400610045": "Entrez votre prénom s'il vous plait",
          "7484692620446298558": "Nom de famille",
          "1733240001129506538": "Veuillez entrer votre deuxième nom",
          "8114342674308277164": "S'il vous plaît, mettez une adresse email valide",
          "5878305334612867800": "(optionnel)"
        },
        "es": {
          "8885234477142162752": "Saludos!",
          "5181440621801685681": "Es un texto aleatorio escrito para mostrar que las traducciones en tiempo de ejecución realmente funcionan. Cada línea en este ejemplo será traducida usando Google Translator.",
          "6028371114637047813": "Primer nombre",
          "3967269098753656610": "Dirección de correo electrónico",
          "935187492052582731": "Enviar",
          "665199437400610045": "Ingrese su nombre por favor",
          "7484692620446298558": "Apellido",
          "1733240001129506538": "Por favor ingrese su segundo nombre",
          "8114342674308277164": "Por favor ponga una dirección de correo electrónico válida",
          "5878305334612867800": "(opcional)"
        },
        "de": {
          "8885234477142162752": "Schöne Grüße!",
          "5181440621801685681": "Dies ist ein zufälliger Text, der zeigt, dass Laufzeitübersetzungen tatsächlich funktionieren. In diesem Beispiel wird jede einzelne Zeile mit Google Translator übersetzt.",
          "6028371114637047813": "Vorname",
          "3967269098753656610": "E-Mail-Addresse",
          "935187492052582731": "Einreichen",
          "665199437400610045": "Bitte geben Sie Ihren Vornamen ein",
          "7484692620446298558": "Zweitname",
          "1733240001129506538": "Bitte geben Sie Ihren zweiten Namen ein",
          "8114342674308277164": "Bitte geben Sie eine gültige E-Mail-Adresse ein",
          "5878305334612867800": "(freiwillig)"
        }
      };
      var locale = localStorage.getItem("locale");

      if (localStorage.length && locale) {
        Object(_angular_localize__WEBPACK_IMPORTED_MODULE_3__["loadTranslations"])(locales[locale]);
      }
      /***/

    },

    /***/
    "m0Pp":
    /*!**********************************************!*\
      !*** ./node_modules/core-js/modules/_ctx.js ***!
      \**********************************************/

    /*! no static exports found */

    /***/
    function m0Pp(module, exports, __webpack_require__) {
      // optional / simple context binding
      var aFunction = __webpack_require__(
      /*! ./_a-function */
      "2OiF");

      module.exports = function (fn, that, length) {
        aFunction(fn);
        if (that === undefined) return fn;

        switch (length) {
          case 1:
            return function (a) {
              return fn.call(that, a);
            };

          case 2:
            return function (a, b) {
              return fn.call(that, a, b);
            };

          case 3:
            return function (a, b, c) {
              return fn.call(that, a, b, c);
            };
        }

        return function ()
        /* ...args */
        {
          return fn.apply(that, arguments);
        };
      };
      /***/

    },

    /***/
    "m2tE":
    /*!**************************************************************************************************!*\
      !*** ./node_modules/@angular-devkit/build-angular/node_modules/core-js/modules/es.array.from.js ***!
      \**************************************************************************************************/

    /*! no static exports found */

    /***/
    function m2tE(module, exports, __webpack_require__) {
      var $ = __webpack_require__(
      /*! ../internals/export */
      "wA6s");

      var from = __webpack_require__(
      /*! ../internals/array-from */
      "IBH3");

      var checkCorrectnessOfIteration = __webpack_require__(
      /*! ../internals/check-correctness-of-iteration */
      "EIBq");

      var INCORRECT_ITERATION = !checkCorrectnessOfIteration(function (iterable) {
        Array.from(iterable);
      }); // `Array.from` method
      // https://tc39.es/ecma262/#sec-array.from

      $({
        target: 'Array',
        stat: true,
        forced: INCORRECT_ITERATION
      }, {
        from: from
      });
      /***/
    },

    /***/
    "m41k":
    /*!********************************************************************************************************!*\
      !*** ./node_modules/@angular-devkit/build-angular/node_modules/core-js/internals/well-known-symbol.js ***!
      \********************************************************************************************************/

    /*! no static exports found */

    /***/
    function m41k(module, exports, __webpack_require__) {
      var global = __webpack_require__(
      /*! ../internals/global */
      "ocAm");

      var shared = __webpack_require__(
      /*! ../internals/shared */
      "yIiL");

      var has = __webpack_require__(
      /*! ../internals/has */
      "OG5q");

      var uid = __webpack_require__(
      /*! ../internals/uid */
      "SDMg");

      var NATIVE_SYMBOL = __webpack_require__(
      /*! ../internals/native-symbol */
      "U+kB");

      var USE_SYMBOL_AS_UID = __webpack_require__(
      /*! ../internals/use-symbol-as-uid */
      "i85Z");

      var WellKnownSymbolsStore = shared('wks');
      var Symbol = global.Symbol;
      var createWellKnownSymbol = USE_SYMBOL_AS_UID ? Symbol : Symbol && Symbol.withoutSetter || uid;

      module.exports = function (name) {
        if (!has(WellKnownSymbolsStore, name)) {
          if (NATIVE_SYMBOL && has(Symbol, name)) WellKnownSymbolsStore[name] = Symbol[name];else WellKnownSymbolsStore[name] = createWellKnownSymbol('Symbol.' + name);
        }

        return WellKnownSymbolsStore[name];
      };
      /***/

    },

    /***/
    "mA9f":
    /*!*****************************************************************************************************!*\
      !*** ./node_modules/@angular-devkit/build-angular/node_modules/core-js/modules/es.function.bind.js ***!
      \*****************************************************************************************************/

    /*! no static exports found */

    /***/
    function mA9f(module, exports, __webpack_require__) {
      var $ = __webpack_require__(
      /*! ../internals/export */
      "wA6s");

      var bind = __webpack_require__(
      /*! ../internals/function-bind */
      "E8Ab"); // `Function.prototype.bind` method
      // https://tc39.es/ecma262/#sec-function.prototype.bind


      $({
        target: 'Function',
        proto: true
      }, {
        bind: bind
      });
      /***/
    },

    /***/
    "mN5b":
    /*!**********************************************************************************************!*\
      !*** ./node_modules/@angular-devkit/build-angular/node_modules/core-js/internals/classof.js ***!
      \**********************************************************************************************/

    /*! no static exports found */

    /***/
    function mN5b(module, exports, __webpack_require__) {
      var TO_STRING_TAG_SUPPORT = __webpack_require__(
      /*! ../internals/to-string-tag-support */
      "4PyY");

      var classofRaw = __webpack_require__(
      /*! ../internals/classof-raw */
      "ezU2");

      var wellKnownSymbol = __webpack_require__(
      /*! ../internals/well-known-symbol */
      "m41k");

      var TO_STRING_TAG = wellKnownSymbol('toStringTag'); // ES3 wrong here

      var CORRECT_ARGUMENTS = classofRaw(function () {
        return arguments;
      }()) == 'Arguments'; // fallback for IE11 Script Access Denied error

      var tryGet = function tryGet(it, key) {
        try {
          return it[key];
        } catch (error) {
          /* empty */
        }
      }; // getting tag from ES6+ `Object.prototype.toString`


      module.exports = TO_STRING_TAG_SUPPORT ? classofRaw : function (it) {
        var O, tag, result;
        return it === undefined ? 'Undefined' : it === null ? 'Null' // @@toStringTag case
        : typeof (tag = tryGet(O = Object(it), TO_STRING_TAG)) == 'string' ? tag // builtinTag case
        : CORRECT_ARGUMENTS ? classofRaw(O) // ES3 arguments fallback
        : (result = classofRaw(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : result;
      };
      /***/
    },

    /***/
    "n/2t":
    /*!************************************************************************************************!*\
      !*** ./node_modules/@angular-devkit/build-angular/node_modules/core-js/internals/math-sign.js ***!
      \************************************************************************************************/

    /*! no static exports found */

    /***/
    function n2t(module, exports) {
      // `Math.sign` method implementation
      // https://tc39.es/ecma262/#sec-math.sign
      module.exports = Math.sign || function sign(x) {
        // eslint-disable-next-line no-self-compare
        return (x = +x) == 0 || x != x ? x : x < 0 ? -1 : 1;
      };
      /***/

    },

    /***/
    "n1Kw":
    /*!*************************************************************************************************!*\
      !*** ./node_modules/@angular-devkit/build-angular/node_modules/core-js/modules/es.math.sinh.js ***!
      \*************************************************************************************************/

    /*! no static exports found */

    /***/
    function n1Kw(module, exports, __webpack_require__) {
      var $ = __webpack_require__(
      /*! ../internals/export */
      "wA6s");

      var fails = __webpack_require__(
      /*! ../internals/fails */
      "rG8t");

      var expm1 = __webpack_require__(
      /*! ../internals/math-expm1 */
      "pn4C");

      var abs = Math.abs;
      var exp = Math.exp;
      var E = Math.E;
      var FORCED = fails(function () {
        return Math.sinh(-2e-17) != -2e-17;
      }); // `Math.sinh` method
      // https://tc39.es/ecma262/#sec-math.sinh
      // V8 near Chromium 38 has a problem with very small numbers

      $({
        target: 'Math',
        stat: true,
        forced: FORCED
      }, {
        sinh: function sinh(x) {
          return abs(x = +x) < 1 ? (expm1(x) - expm1(-x)) / 2 : (exp(x - 1) - exp(-x - 1)) * (E / 2);
        }
      });
      /***/
    },

    /***/
    "n43T":
    /*!******************************************************************************************************!*\
      !*** ./node_modules/@angular-devkit/build-angular/node_modules/core-js/modules/es.date.to-string.js ***!
      \******************************************************************************************************/

    /*! no static exports found */

    /***/
    function n43T(module, exports, __webpack_require__) {
      var redefine = __webpack_require__(
      /*! ../internals/redefine */
      "2MGJ");

      var DatePrototype = Date.prototype;
      var INVALID_DATE = 'Invalid Date';
      var TO_STRING = 'toString';
      var nativeDateToString = DatePrototype[TO_STRING];
      var getTime = DatePrototype.getTime; // `Date.prototype.toString` method
      // https://tc39.es/ecma262/#sec-date.prototype.tostring

      if (new Date(NaN) + '' != INVALID_DATE) {
        redefine(DatePrototype, TO_STRING, function toString() {
          var value = getTime.call(this); // eslint-disable-next-line no-self-compare

          return value === value ? nativeDateToString.call(this) : INVALID_DATE;
        });
      }
      /***/

    },

    /***/
    "n9Wl":
    /*!******************************************************************************************************!*\
      !*** ./node_modules/@angular-devkit/build-angular/node_modules/core-js/modules/es.object.entries.js ***!
      \******************************************************************************************************/

    /*! no static exports found */

    /***/
    function n9Wl(module, exports, __webpack_require__) {
      var $ = __webpack_require__(
      /*! ../internals/export */
      "wA6s");

      var $entries = __webpack_require__(
      /*! ../internals/object-to-array */
      "4Ym5").entries; // `Object.entries` method
      // https://tc39.es/ecma262/#sec-object.entries


      $({
        target: 'Object',
        stat: true
      }, {
        entries: function entries(O) {
          return $entries(O);
        }
      });
      /***/
    },

    /***/
    "nIH4":
    /*!********************************************************************************************************!*\
      !*** ./node_modules/@angular-devkit/build-angular/node_modules/core-js/internals/collection-strong.js ***!
      \********************************************************************************************************/

    /*! no static exports found */

    /***/
    function nIH4(module, exports, __webpack_require__) {
      "use strict";

      var defineProperty = __webpack_require__(
      /*! ../internals/object-define-property */
      "/Ybd").f;

      var create = __webpack_require__(
      /*! ../internals/object-create */
      "2RDa");

      var redefineAll = __webpack_require__(
      /*! ../internals/redefine-all */
      "8aNu");

      var bind = __webpack_require__(
      /*! ../internals/function-bind-context */
      "tcQx");

      var anInstance = __webpack_require__(
      /*! ../internals/an-instance */
      "SM6+");

      var iterate = __webpack_require__(
      /*! ../internals/iterate */
      "Rn6E");

      var defineIterator = __webpack_require__(
      /*! ../internals/define-iterator */
      "WijE");

      var setSpecies = __webpack_require__(
      /*! ../internals/set-species */
      "JHhb");

      var DESCRIPTORS = __webpack_require__(
      /*! ../internals/descriptors */
      "T69T");

      var fastKey = __webpack_require__(
      /*! ../internals/internal-metadata */
      "M7Xk").fastKey;

      var InternalStateModule = __webpack_require__(
      /*! ../internals/internal-state */
      "XH/I");

      var setInternalState = InternalStateModule.set;
      var internalStateGetterFor = InternalStateModule.getterFor;
      module.exports = {
        getConstructor: function getConstructor(wrapper, CONSTRUCTOR_NAME, IS_MAP, ADDER) {
          var C = wrapper(function (that, iterable) {
            anInstance(that, C, CONSTRUCTOR_NAME);
            setInternalState(that, {
              type: CONSTRUCTOR_NAME,
              index: create(null),
              first: undefined,
              last: undefined,
              size: 0
            });
            if (!DESCRIPTORS) that.size = 0;
            if (iterable != undefined) iterate(iterable, that[ADDER], {
              that: that,
              AS_ENTRIES: IS_MAP
            });
          });
          var getInternalState = internalStateGetterFor(CONSTRUCTOR_NAME);

          var define = function define(that, key, value) {
            var state = getInternalState(that);
            var entry = getEntry(that, key);
            var previous, index; // change existing entry

            if (entry) {
              entry.value = value; // create new entry
            } else {
              state.last = entry = {
                index: index = fastKey(key, true),
                key: key,
                value: value,
                previous: previous = state.last,
                next: undefined,
                removed: false
              };
              if (!state.first) state.first = entry;
              if (previous) previous.next = entry;
              if (DESCRIPTORS) state.size++;else that.size++; // add to index

              if (index !== 'F') state.index[index] = entry;
            }

            return that;
          };

          var getEntry = function getEntry(that, key) {
            var state = getInternalState(that); // fast case

            var index = fastKey(key);
            var entry;
            if (index !== 'F') return state.index[index]; // frozen object case

            for (entry = state.first; entry; entry = entry.next) {
              if (entry.key == key) return entry;
            }
          };

          redefineAll(C.prototype, {
            // 23.1.3.1 Map.prototype.clear()
            // 23.2.3.2 Set.prototype.clear()
            clear: function clear() {
              var that = this;
              var state = getInternalState(that);
              var data = state.index;
              var entry = state.first;

              while (entry) {
                entry.removed = true;
                if (entry.previous) entry.previous = entry.previous.next = undefined;
                delete data[entry.index];
                entry = entry.next;
              }

              state.first = state.last = undefined;
              if (DESCRIPTORS) state.size = 0;else that.size = 0;
            },
            // 23.1.3.3 Map.prototype.delete(key)
            // 23.2.3.4 Set.prototype.delete(value)
            'delete': function _delete(key) {
              var that = this;
              var state = getInternalState(that);
              var entry = getEntry(that, key);

              if (entry) {
                var next = entry.next;
                var prev = entry.previous;
                delete state.index[entry.index];
                entry.removed = true;
                if (prev) prev.next = next;
                if (next) next.previous = prev;
                if (state.first == entry) state.first = next;
                if (state.last == entry) state.last = prev;
                if (DESCRIPTORS) state.size--;else that.size--;
              }

              return !!entry;
            },
            // 23.2.3.6 Set.prototype.forEach(callbackfn, thisArg = undefined)
            // 23.1.3.5 Map.prototype.forEach(callbackfn, thisArg = undefined)
            forEach: function forEach(callbackfn
            /* , that = undefined */
            ) {
              var state = getInternalState(this);
              var boundFunction = bind(callbackfn, arguments.length > 1 ? arguments[1] : undefined, 3);
              var entry;

              while (entry = entry ? entry.next : state.first) {
                boundFunction(entry.value, entry.key, this); // revert to the last existing entry

                while (entry && entry.removed) {
                  entry = entry.previous;
                }
              }
            },
            // 23.1.3.7 Map.prototype.has(key)
            // 23.2.3.7 Set.prototype.has(value)
            has: function has(key) {
              return !!getEntry(this, key);
            }
          });
          redefineAll(C.prototype, IS_MAP ? {
            // 23.1.3.6 Map.prototype.get(key)
            get: function get(key) {
              var entry = getEntry(this, key);
              return entry && entry.value;
            },
            // 23.1.3.9 Map.prototype.set(key, value)
            set: function set(key, value) {
              return define(this, key === 0 ? 0 : key, value);
            }
          } : {
            // 23.2.3.1 Set.prototype.add(value)
            add: function add(value) {
              return define(this, value = value === 0 ? 0 : value, value);
            }
          });
          if (DESCRIPTORS) defineProperty(C.prototype, 'size', {
            get: function get() {
              return getInternalState(this).size;
            }
          });
          return C;
        },
        setStrong: function setStrong(C, CONSTRUCTOR_NAME, IS_MAP) {
          var ITERATOR_NAME = CONSTRUCTOR_NAME + ' Iterator';
          var getInternalCollectionState = internalStateGetterFor(CONSTRUCTOR_NAME);
          var getInternalIteratorState = internalStateGetterFor(ITERATOR_NAME); // add .keys, .values, .entries, [@@iterator]
          // 23.1.3.4, 23.1.3.8, 23.1.3.11, 23.1.3.12, 23.2.3.5, 23.2.3.8, 23.2.3.10, 23.2.3.11

          defineIterator(C, CONSTRUCTOR_NAME, function (iterated, kind) {
            setInternalState(this, {
              type: ITERATOR_NAME,
              target: iterated,
              state: getInternalCollectionState(iterated),
              kind: kind,
              last: undefined
            });
          }, function () {
            var state = getInternalIteratorState(this);
            var kind = state.kind;
            var entry = state.last; // revert to the last existing entry

            while (entry && entry.removed) {
              entry = entry.previous;
            } // get next entry


            if (!state.target || !(state.last = entry = entry ? entry.next : state.state.first)) {
              // or finish the iteration
              state.target = undefined;
              return {
                value: undefined,
                done: true
              };
            } // return step by kind


            if (kind == 'keys') return {
              value: entry.key,
              done: false
            };
            if (kind == 'values') return {
              value: entry.value,
              done: false
            };
            return {
              value: [entry.key, entry.value],
              done: false
            };
          }, IS_MAP ? 'entries' : 'values', !IS_MAP, true); // add [@@species], 23.1.2.2, 23.2.2.2

          setSpecies(CONSTRUCTOR_NAME);
        }
      };
      /***/
    },

    /***/
    "nP0K":
    /*!*****************************************************************************************************!*\
      !*** ./node_modules/@angular-devkit/build-angular/node_modules/core-js/internals/array-for-each.js ***!
      \*****************************************************************************************************/

    /*! no static exports found */

    /***/
    function nP0K(module, exports, __webpack_require__) {
      "use strict";

      var $forEach = __webpack_require__(
      /*! ../internals/array-iteration */
      "kk6e").forEach;

      var arrayMethodIsStrict = __webpack_require__(
      /*! ../internals/array-method-is-strict */
      "6CJb");

      var arrayMethodUsesToLength = __webpack_require__(
      /*! ../internals/array-method-uses-to-length */
      "w2hq");

      var STRICT_METHOD = arrayMethodIsStrict('forEach');
      var USES_TO_LENGTH = arrayMethodUsesToLength('forEach'); // `Array.prototype.forEach` method implementation
      // https://tc39.es/ecma262/#sec-array.prototype.foreach

      module.exports = !STRICT_METHOD || !USES_TO_LENGTH ? function forEach(callbackfn
      /* , thisArg */
      ) {
        return $forEach(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
      } : [].forEach;
      /***/
    },

    /***/
    "ne8i":
    /*!****************************************************!*\
      !*** ./node_modules/core-js/modules/_to-length.js ***!
      \****************************************************/

    /*! no static exports found */

    /***/
    function ne8i(module, exports, __webpack_require__) {
      // 7.1.15 ToLength
      var toInteger = __webpack_require__(
      /*! ./_to-integer */
      "RYi7");

      var min = Math.min;

      module.exports = function (it) {
        return it > 0 ? min(toInteger(it), 0x1fffffffffffff) : 0; // pow(2, 53) - 1 == 9007199254740991
      };
      /***/

    },

    /***/
    "nh4g":
    /*!******************************************************!*\
      !*** ./node_modules/core-js/modules/_descriptors.js ***!
      \******************************************************/

    /*! no static exports found */

    /***/
    function nh4g(module, exports, __webpack_require__) {
      // Thank's IE8 for his funny defineProperty
      module.exports = !__webpack_require__(
      /*! ./_fails */
      "eeVq")(function () {
        return Object.defineProperty({}, 'a', {
          get: function get() {
            return 7;
          }
        }).a != 7;
      });
      /***/
    },

    /***/
    "ntzx":
    /*!**************************************************************************************************!*\
      !*** ./node_modules/@angular-devkit/build-angular/node_modules/core-js/modules/es.array.join.js ***!
      \**************************************************************************************************/

    /*! no static exports found */

    /***/
    function ntzx(module, exports, __webpack_require__) {
      "use strict";

      var $ = __webpack_require__(
      /*! ../internals/export */
      "wA6s");

      var IndexedObject = __webpack_require__(
      /*! ../internals/indexed-object */
      "tUdv");

      var toIndexedObject = __webpack_require__(
      /*! ../internals/to-indexed-object */
      "EMtK");

      var arrayMethodIsStrict = __webpack_require__(
      /*! ../internals/array-method-is-strict */
      "6CJb");

      var nativeJoin = [].join;
      var ES3_STRINGS = IndexedObject != Object;
      var STRICT_METHOD = arrayMethodIsStrict('join', ','); // `Array.prototype.join` method
      // https://tc39.es/ecma262/#sec-array.prototype.join

      $({
        target: 'Array',
        proto: true,
        forced: ES3_STRINGS || !STRICT_METHOD
      }, {
        join: function join(separator) {
          return nativeJoin.call(toIndexedObject(this), separator === undefined ? ',' : separator);
        }
      });
      /***/
    },

    /***/
    "nuqZ":
    /*!*****************************************************************************************************!*\
      !*** ./node_modules/@angular-devkit/build-angular/node_modules/core-js/modules/es.object.assign.js ***!
      \*****************************************************************************************************/

    /*! no static exports found */

    /***/
    function nuqZ(module, exports, __webpack_require__) {
      var $ = __webpack_require__(
      /*! ../internals/export */
      "wA6s");

      var assign = __webpack_require__(
      /*! ../internals/object-assign */
      "KlhL"); // `Object.assign` method
      // https://tc39.es/ecma262/#sec-object.assign


      $({
        target: 'Object',
        stat: true,
        forced: Object.assign !== assign
      }, {
        assign: assign
      });
      /***/
    },

    /***/
    "oB0/":
    /*!*************************************************************************************************************!*\
      !*** ./node_modules/@angular-devkit/build-angular/node_modules/core-js/internals/new-promise-capability.js ***!
      \*************************************************************************************************************/

    /*! no static exports found */

    /***/
    function oB0(module, exports, __webpack_require__) {
      "use strict";

      var aFunction = __webpack_require__(
      /*! ../internals/a-function */
      "Neub");

      var PromiseCapability = function PromiseCapability(C) {
        var resolve, reject;
        this.promise = new C(function ($$resolve, $$reject) {
          if (resolve !== undefined || reject !== undefined) throw TypeError('Bad Promise constructor');
          resolve = $$resolve;
          reject = $$reject;
        });
        this.resolve = aFunction(resolve);
        this.reject = aFunction(reject);
      }; // 25.4.1.5 NewPromiseCapability(C)


      module.exports.f = function (C) {
        return new PromiseCapability(C);
      };
      /***/

    },

    /***/
    "oatR":
    /*!**********************************************************************************************************!*\
      !*** ./node_modules/@angular-devkit/build-angular/node_modules/core-js/modules/es.string.starts-with.js ***!
      \**********************************************************************************************************/

    /*! no static exports found */

    /***/
    function oatR(module, exports, __webpack_require__) {
      "use strict";

      var $ = __webpack_require__(
      /*! ../internals/export */
      "wA6s");

      var getOwnPropertyDescriptor = __webpack_require__(
      /*! ../internals/object-get-own-property-descriptor */
      "7gGY").f;

      var toLength = __webpack_require__(
      /*! ../internals/to-length */
      "xpLY");

      var notARegExp = __webpack_require__(
      /*! ../internals/not-a-regexp */
      "s8qp");

      var requireObjectCoercible = __webpack_require__(
      /*! ../internals/require-object-coercible */
      "hmpk");

      var correctIsRegExpLogic = __webpack_require__(
      /*! ../internals/correct-is-regexp-logic */
      "0Ds2");

      var IS_PURE = __webpack_require__(
      /*! ../internals/is-pure */
      "g9hI");

      var nativeStartsWith = ''.startsWith;
      var min = Math.min;
      var CORRECT_IS_REGEXP_LOGIC = correctIsRegExpLogic('startsWith'); // https://github.com/zloirock/core-js/pull/702

      var MDN_POLYFILL_BUG = !IS_PURE && !CORRECT_IS_REGEXP_LOGIC && !!function () {
        var descriptor = getOwnPropertyDescriptor(String.prototype, 'startsWith');
        return descriptor && !descriptor.writable;
      }(); // `String.prototype.startsWith` method
      // https://tc39.es/ecma262/#sec-string.prototype.startswith

      $({
        target: 'String',
        proto: true,
        forced: !MDN_POLYFILL_BUG && !CORRECT_IS_REGEXP_LOGIC
      }, {
        startsWith: function startsWith(searchString
        /* , position = 0 */
        ) {
          var that = String(requireObjectCoercible(this));
          notARegExp(searchString);
          var index = toLength(min(arguments.length > 1 ? arguments[1] : undefined, that.length));
          var search = String(searchString);
          return nativeStartsWith ? nativeStartsWith.call(that, search, index) : that.slice(index, index + search.length) === search;
        }
      });
      /***/
    },

    /***/
    "ocAm":
    /*!*********************************************************************************************!*\
      !*** ./node_modules/@angular-devkit/build-angular/node_modules/core-js/internals/global.js ***!
      \*********************************************************************************************/

    /*! no static exports found */

    /***/
    function ocAm(module, exports) {
      var check = function check(it) {
        return it && it.Math == Math && it;
      }; // https://github.com/zloirock/core-js/issues/86#issuecomment-115759028


      module.exports = // eslint-disable-next-line no-undef
      check(typeof globalThis == 'object' && globalThis) || check(typeof window == 'object' && window) || check(typeof self == 'object' && self) || check(typeof global == 'object' && global) || // eslint-disable-next-line no-new-func
      function () {
        return this;
      }() || Function('return this')();
      /***/

    },

    /***/
    "ow8b":
    /*!***************************************************************************************************************!*\
      !*** ./node_modules/@angular-devkit/build-angular/node_modules/core-js/modules/es.number.min-safe-integer.js ***!
      \***************************************************************************************************************/

    /*! no static exports found */

    /***/
    function ow8b(module, exports, __webpack_require__) {
      var $ = __webpack_require__(
      /*! ../internals/export */
      "wA6s"); // `Number.MIN_SAFE_INTEGER` constant
      // https://tc39.es/ecma262/#sec-number.min_safe_integer


      $({
        target: 'Number',
        stat: true
      }, {
        MIN_SAFE_INTEGER: -0x1FFFFFFFFFFFFF
      });
      /***/
    },

    /***/
    "p82S":
    /*!**********************************************************************************************************!*\
      !*** ./node_modules/@angular-devkit/build-angular/node_modules/core-js/internals/species-constructor.js ***!
      \**********************************************************************************************************/

    /*! no static exports found */

    /***/
    function p82S(module, exports, __webpack_require__) {
      var anObject = __webpack_require__(
      /*! ../internals/an-object */
      "F26l");

      var aFunction = __webpack_require__(
      /*! ../internals/a-function */
      "Neub");

      var wellKnownSymbol = __webpack_require__(
      /*! ../internals/well-known-symbol */
      "m41k");

      var SPECIES = wellKnownSymbol('species'); // `SpeciesConstructor` abstract operation
      // https://tc39.es/ecma262/#sec-speciesconstructor

      module.exports = function (O, defaultConstructor) {
        var C = anObject(O).constructor;
        var S;
        return C === undefined || (S = anObject(C)[SPECIES]) == undefined ? defaultConstructor : aFunction(S);
      };
      /***/

    },

    /***/
    "pDpN":
    /*!*****************************************************!*\
      !*** ./node_modules/zone.js/dist/zone-evergreen.js ***!
      \*****************************************************/

    /*! no static exports found */

    /***/
    function pDpN(module, exports, __webpack_require__) {
      "use strict";
      /**
       * @license Angular v12.0.0-next.0
       * (c) 2010-2020 Google LLC. https://angular.io/
       * License: MIT
       */

      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      var Zone$1 = function (global) {
        var performance = global['performance'];

        function mark(name) {
          performance && performance['mark'] && performance['mark'](name);
        }

        function performanceMeasure(name, label) {
          performance && performance['measure'] && performance['measure'](name, label);
        }

        mark('Zone'); // Initialize before it's accessed below.
        // __Zone_symbol_prefix global can be used to override the default zone
        // symbol prefix with a custom one if needed.

        var symbolPrefix = global['__Zone_symbol_prefix'] || '__zone_symbol__';

        function __symbol__(name) {
          return symbolPrefix + name;
        }

        var checkDuplicate = global[__symbol__('forceDuplicateZoneCheck')] === true;

        if (global['Zone']) {
          // if global['Zone'] already exists (maybe zone.js was already loaded or
          // some other lib also registered a global object named Zone), we may need
          // to throw an error, but sometimes user may not want this error.
          // For example,
          // we have two web pages, page1 includes zone.js, page2 doesn't.
          // and the 1st time user load page1 and page2, everything work fine,
          // but when user load page2 again, error occurs because global['Zone'] already exists.
          // so we add a flag to let user choose whether to throw this error or not.
          // By default, if existing Zone is from zone.js, we will not throw the error.
          if (checkDuplicate || typeof global['Zone'].__symbol__ !== 'function') {
            throw new Error('Zone already loaded.');
          } else {
            return global['Zone'];
          }
        }

        var Zone = /*#__PURE__*/function () {
          function Zone(parent, zoneSpec) {
            _classCallCheck(this, Zone);

            this._parent = parent;
            this._name = zoneSpec ? zoneSpec.name || 'unnamed' : '<root>';
            this._properties = zoneSpec && zoneSpec.properties || {};
            this._zoneDelegate = new ZoneDelegate(this, this._parent && this._parent._zoneDelegate, zoneSpec);
          }

          _createClass(Zone, [{
            key: "parent",
            get: function get() {
              return this._parent;
            }
          }, {
            key: "name",
            get: function get() {
              return this._name;
            }
          }, {
            key: "get",
            value: function get(key) {
              var zone = this.getZoneWith(key);
              if (zone) return zone._properties[key];
            }
          }, {
            key: "getZoneWith",
            value: function getZoneWith(key) {
              var current = this;

              while (current) {
                if (current._properties.hasOwnProperty(key)) {
                  return current;
                }

                current = current._parent;
              }

              return null;
            }
          }, {
            key: "fork",
            value: function fork(zoneSpec) {
              if (!zoneSpec) throw new Error('ZoneSpec required!');
              return this._zoneDelegate.fork(this, zoneSpec);
            }
          }, {
            key: "wrap",
            value: function wrap(callback, source) {
              if (typeof callback !== 'function') {
                throw new Error('Expecting function got: ' + callback);
              }

              var _callback = this._zoneDelegate.intercept(this, callback, source);

              var zone = this;
              return function () {
                return zone.runGuarded(_callback, this, arguments, source);
              };
            }
          }, {
            key: "run",
            value: function run(callback, applyThis, applyArgs, source) {
              _currentZoneFrame = {
                parent: _currentZoneFrame,
                zone: this
              };

              try {
                return this._zoneDelegate.invoke(this, callback, applyThis, applyArgs, source);
              } finally {
                _currentZoneFrame = _currentZoneFrame.parent;
              }
            }
          }, {
            key: "runGuarded",
            value: function runGuarded(callback) {
              var applyThis = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
              var applyArgs = arguments.length > 2 ? arguments[2] : undefined;
              var source = arguments.length > 3 ? arguments[3] : undefined;
              _currentZoneFrame = {
                parent: _currentZoneFrame,
                zone: this
              };

              try {
                try {
                  return this._zoneDelegate.invoke(this, callback, applyThis, applyArgs, source);
                } catch (error) {
                  if (this._zoneDelegate.handleError(this, error)) {
                    throw error;
                  }
                }
              } finally {
                _currentZoneFrame = _currentZoneFrame.parent;
              }
            }
          }, {
            key: "runTask",
            value: function runTask(task, applyThis, applyArgs) {
              if (task.zone != this) {
                throw new Error('A task can only be run in the zone of creation! (Creation: ' + (task.zone || NO_ZONE).name + '; Execution: ' + this.name + ')');
              } // https://github.com/angular/zone.js/issues/778, sometimes eventTask
              // will run in notScheduled(canceled) state, we should not try to
              // run such kind of task but just return


              if (task.state === notScheduled && (task.type === eventTask || task.type === macroTask)) {
                return;
              }

              var reEntryGuard = task.state != running;
              reEntryGuard && task._transitionTo(running, scheduled);
              task.runCount++;
              var previousTask = _currentTask;
              _currentTask = task;
              _currentZoneFrame = {
                parent: _currentZoneFrame,
                zone: this
              };

              try {
                if (task.type == macroTask && task.data && !task.data.isPeriodic) {
                  task.cancelFn = undefined;
                }

                try {
                  return this._zoneDelegate.invokeTask(this, task, applyThis, applyArgs);
                } catch (error) {
                  if (this._zoneDelegate.handleError(this, error)) {
                    throw error;
                  }
                }
              } finally {
                // if the task's state is notScheduled or unknown, then it has already been cancelled
                // we should not reset the state to scheduled
                if (task.state !== notScheduled && task.state !== unknown) {
                  if (task.type == eventTask || task.data && task.data.isPeriodic) {
                    reEntryGuard && task._transitionTo(scheduled, running);
                  } else {
                    task.runCount = 0;

                    this._updateTaskCount(task, -1);

                    reEntryGuard && task._transitionTo(notScheduled, running, notScheduled);
                  }
                }

                _currentZoneFrame = _currentZoneFrame.parent;
                _currentTask = previousTask;
              }
            }
          }, {
            key: "scheduleTask",
            value: function scheduleTask(task) {
              if (task.zone && task.zone !== this) {
                // check if the task was rescheduled, the newZone
                // should not be the children of the original zone
                var newZone = this;

                while (newZone) {
                  if (newZone === task.zone) {
                    throw Error("can not reschedule task to ".concat(this.name, " which is descendants of the original zone ").concat(task.zone.name));
                  }

                  newZone = newZone.parent;
                }
              }

              task._transitionTo(scheduling, notScheduled);

              var zoneDelegates = [];
              task._zoneDelegates = zoneDelegates;
              task._zone = this;

              try {
                task = this._zoneDelegate.scheduleTask(this, task);
              } catch (err) {
                // should set task's state to unknown when scheduleTask throw error
                // because the err may from reschedule, so the fromState maybe notScheduled
                task._transitionTo(unknown, scheduling, notScheduled); // TODO: @JiaLiPassion, should we check the result from handleError?


                this._zoneDelegate.handleError(this, err);

                throw err;
              }

              if (task._zoneDelegates === zoneDelegates) {
                // we have to check because internally the delegate can reschedule the task.
                this._updateTaskCount(task, 1);
              }

              if (task.state == scheduling) {
                task._transitionTo(scheduled, scheduling);
              }

              return task;
            }
          }, {
            key: "scheduleMicroTask",
            value: function scheduleMicroTask(source, callback, data, customSchedule) {
              return this.scheduleTask(new ZoneTask(microTask, source, callback, data, customSchedule, undefined));
            }
          }, {
            key: "scheduleMacroTask",
            value: function scheduleMacroTask(source, callback, data, customSchedule, customCancel) {
              return this.scheduleTask(new ZoneTask(macroTask, source, callback, data, customSchedule, customCancel));
            }
          }, {
            key: "scheduleEventTask",
            value: function scheduleEventTask(source, callback, data, customSchedule, customCancel) {
              return this.scheduleTask(new ZoneTask(eventTask, source, callback, data, customSchedule, customCancel));
            }
          }, {
            key: "cancelTask",
            value: function cancelTask(task) {
              if (task.zone != this) throw new Error('A task can only be cancelled in the zone of creation! (Creation: ' + (task.zone || NO_ZONE).name + '; Execution: ' + this.name + ')');

              task._transitionTo(canceling, scheduled, running);

              try {
                this._zoneDelegate.cancelTask(this, task);
              } catch (err) {
                // if error occurs when cancelTask, transit the state to unknown
                task._transitionTo(unknown, canceling);

                this._zoneDelegate.handleError(this, err);

                throw err;
              }

              this._updateTaskCount(task, -1);

              task._transitionTo(notScheduled, canceling);

              task.runCount = 0;
              return task;
            }
          }, {
            key: "_updateTaskCount",
            value: function _updateTaskCount(task, count) {
              var zoneDelegates = task._zoneDelegates;

              if (count == -1) {
                task._zoneDelegates = null;
              }

              for (var i = 0; i < zoneDelegates.length; i++) {
                zoneDelegates[i]._updateTaskCount(task.type, count);
              }
            }
          }], [{
            key: "assertZonePatched",
            value: function assertZonePatched() {
              if (global['Promise'] !== patches['ZoneAwarePromise']) {
                throw new Error('Zone.js has detected that ZoneAwarePromise `(window|global).Promise` ' + 'has been overwritten.\n' + 'Most likely cause is that a Promise polyfill has been loaded ' + 'after Zone.js (Polyfilling Promise api is not necessary when zone.js is loaded. ' + 'If you must load one, do so before loading zone.js.)');
              }
            }
          }, {
            key: "root",
            get: function get() {
              var zone = Zone.current;

              while (zone.parent) {
                zone = zone.parent;
              }

              return zone;
            }
          }, {
            key: "current",
            get: function get() {
              return _currentZoneFrame.zone;
            }
          }, {
            key: "currentTask",
            get: function get() {
              return _currentTask;
            } // tslint:disable-next-line:require-internal-with-underscore

          }, {
            key: "__load_patch",
            value: function __load_patch(name, fn) {
              var ignoreDuplicate = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

              if (patches.hasOwnProperty(name)) {
                // `checkDuplicate` option is defined from global variable
                // so it works for all modules.
                // `ignoreDuplicate` can work for the specified module
                if (!ignoreDuplicate && checkDuplicate) {
                  throw Error('Already loaded patch: ' + name);
                }
              } else if (!global['__Zone_disable_' + name]) {
                var perfName = 'Zone:' + name;
                mark(perfName);
                patches[name] = fn(global, Zone, _api);
                performanceMeasure(perfName, perfName);
              }
            }
          }]);

          return Zone;
        }(); // tslint:disable-next-line:require-internal-with-underscore


        Zone.__symbol__ = __symbol__;
        var DELEGATE_ZS = {
          name: '',
          onHasTask: function onHasTask(delegate, _, target, hasTaskState) {
            return delegate.hasTask(target, hasTaskState);
          },
          onScheduleTask: function onScheduleTask(delegate, _, target, task) {
            return delegate.scheduleTask(target, task);
          },
          onInvokeTask: function onInvokeTask(delegate, _, target, task, applyThis, applyArgs) {
            return delegate.invokeTask(target, task, applyThis, applyArgs);
          },
          onCancelTask: function onCancelTask(delegate, _, target, task) {
            return delegate.cancelTask(target, task);
          }
        };

        var ZoneDelegate = /*#__PURE__*/function () {
          function ZoneDelegate(zone, parentDelegate, zoneSpec) {
            _classCallCheck(this, ZoneDelegate);

            this._taskCounts = {
              'microTask': 0,
              'macroTask': 0,
              'eventTask': 0
            };
            this.zone = zone;
            this._parentDelegate = parentDelegate;
            this._forkZS = zoneSpec && (zoneSpec && zoneSpec.onFork ? zoneSpec : parentDelegate._forkZS);
            this._forkDlgt = zoneSpec && (zoneSpec.onFork ? parentDelegate : parentDelegate._forkDlgt);
            this._forkCurrZone = zoneSpec && (zoneSpec.onFork ? this.zone : parentDelegate._forkCurrZone);
            this._interceptZS = zoneSpec && (zoneSpec.onIntercept ? zoneSpec : parentDelegate._interceptZS);
            this._interceptDlgt = zoneSpec && (zoneSpec.onIntercept ? parentDelegate : parentDelegate._interceptDlgt);
            this._interceptCurrZone = zoneSpec && (zoneSpec.onIntercept ? this.zone : parentDelegate._interceptCurrZone);
            this._invokeZS = zoneSpec && (zoneSpec.onInvoke ? zoneSpec : parentDelegate._invokeZS);
            this._invokeDlgt = zoneSpec && (zoneSpec.onInvoke ? parentDelegate : parentDelegate._invokeDlgt);
            this._invokeCurrZone = zoneSpec && (zoneSpec.onInvoke ? this.zone : parentDelegate._invokeCurrZone);
            this._handleErrorZS = zoneSpec && (zoneSpec.onHandleError ? zoneSpec : parentDelegate._handleErrorZS);
            this._handleErrorDlgt = zoneSpec && (zoneSpec.onHandleError ? parentDelegate : parentDelegate._handleErrorDlgt);
            this._handleErrorCurrZone = zoneSpec && (zoneSpec.onHandleError ? this.zone : parentDelegate._handleErrorCurrZone);
            this._scheduleTaskZS = zoneSpec && (zoneSpec.onScheduleTask ? zoneSpec : parentDelegate._scheduleTaskZS);
            this._scheduleTaskDlgt = zoneSpec && (zoneSpec.onScheduleTask ? parentDelegate : parentDelegate._scheduleTaskDlgt);
            this._scheduleTaskCurrZone = zoneSpec && (zoneSpec.onScheduleTask ? this.zone : parentDelegate._scheduleTaskCurrZone);
            this._invokeTaskZS = zoneSpec && (zoneSpec.onInvokeTask ? zoneSpec : parentDelegate._invokeTaskZS);
            this._invokeTaskDlgt = zoneSpec && (zoneSpec.onInvokeTask ? parentDelegate : parentDelegate._invokeTaskDlgt);
            this._invokeTaskCurrZone = zoneSpec && (zoneSpec.onInvokeTask ? this.zone : parentDelegate._invokeTaskCurrZone);
            this._cancelTaskZS = zoneSpec && (zoneSpec.onCancelTask ? zoneSpec : parentDelegate._cancelTaskZS);
            this._cancelTaskDlgt = zoneSpec && (zoneSpec.onCancelTask ? parentDelegate : parentDelegate._cancelTaskDlgt);
            this._cancelTaskCurrZone = zoneSpec && (zoneSpec.onCancelTask ? this.zone : parentDelegate._cancelTaskCurrZone);
            this._hasTaskZS = null;
            this._hasTaskDlgt = null;
            this._hasTaskDlgtOwner = null;
            this._hasTaskCurrZone = null;
            var zoneSpecHasTask = zoneSpec && zoneSpec.onHasTask;
            var parentHasTask = parentDelegate && parentDelegate._hasTaskZS;

            if (zoneSpecHasTask || parentHasTask) {
              // If we need to report hasTask, than this ZS needs to do ref counting on tasks. In such
              // a case all task related interceptors must go through this ZD. We can't short circuit it.
              this._hasTaskZS = zoneSpecHasTask ? zoneSpec : DELEGATE_ZS;
              this._hasTaskDlgt = parentDelegate;
              this._hasTaskDlgtOwner = this;
              this._hasTaskCurrZone = zone;

              if (!zoneSpec.onScheduleTask) {
                this._scheduleTaskZS = DELEGATE_ZS;
                this._scheduleTaskDlgt = parentDelegate;
                this._scheduleTaskCurrZone = this.zone;
              }

              if (!zoneSpec.onInvokeTask) {
                this._invokeTaskZS = DELEGATE_ZS;
                this._invokeTaskDlgt = parentDelegate;
                this._invokeTaskCurrZone = this.zone;
              }

              if (!zoneSpec.onCancelTask) {
                this._cancelTaskZS = DELEGATE_ZS;
                this._cancelTaskDlgt = parentDelegate;
                this._cancelTaskCurrZone = this.zone;
              }
            }
          }

          _createClass(ZoneDelegate, [{
            key: "fork",
            value: function fork(targetZone, zoneSpec) {
              return this._forkZS ? this._forkZS.onFork(this._forkDlgt, this.zone, targetZone, zoneSpec) : new Zone(targetZone, zoneSpec);
            }
          }, {
            key: "intercept",
            value: function intercept(targetZone, callback, source) {
              return this._interceptZS ? this._interceptZS.onIntercept(this._interceptDlgt, this._interceptCurrZone, targetZone, callback, source) : callback;
            }
          }, {
            key: "invoke",
            value: function invoke(targetZone, callback, applyThis, applyArgs, source) {
              return this._invokeZS ? this._invokeZS.onInvoke(this._invokeDlgt, this._invokeCurrZone, targetZone, callback, applyThis, applyArgs, source) : callback.apply(applyThis, applyArgs);
            }
          }, {
            key: "handleError",
            value: function handleError(targetZone, error) {
              return this._handleErrorZS ? this._handleErrorZS.onHandleError(this._handleErrorDlgt, this._handleErrorCurrZone, targetZone, error) : true;
            }
          }, {
            key: "scheduleTask",
            value: function scheduleTask(targetZone, task) {
              var returnTask = task;

              if (this._scheduleTaskZS) {
                if (this._hasTaskZS) {
                  returnTask._zoneDelegates.push(this._hasTaskDlgtOwner);
                } // clang-format off


                returnTask = this._scheduleTaskZS.onScheduleTask(this._scheduleTaskDlgt, this._scheduleTaskCurrZone, targetZone, task); // clang-format on

                if (!returnTask) returnTask = task;
              } else {
                if (task.scheduleFn) {
                  task.scheduleFn(task);
                } else if (task.type == microTask) {
                  scheduleMicroTask(task);
                } else {
                  throw new Error('Task is missing scheduleFn.');
                }
              }

              return returnTask;
            }
          }, {
            key: "invokeTask",
            value: function invokeTask(targetZone, task, applyThis, applyArgs) {
              return this._invokeTaskZS ? this._invokeTaskZS.onInvokeTask(this._invokeTaskDlgt, this._invokeTaskCurrZone, targetZone, task, applyThis, applyArgs) : task.callback.apply(applyThis, applyArgs);
            }
          }, {
            key: "cancelTask",
            value: function cancelTask(targetZone, task) {
              var value;

              if (this._cancelTaskZS) {
                value = this._cancelTaskZS.onCancelTask(this._cancelTaskDlgt, this._cancelTaskCurrZone, targetZone, task);
              } else {
                if (!task.cancelFn) {
                  throw Error('Task is not cancelable');
                }

                value = task.cancelFn(task);
              }

              return value;
            }
          }, {
            key: "hasTask",
            value: function hasTask(targetZone, isEmpty) {
              // hasTask should not throw error so other ZoneDelegate
              // can still trigger hasTask callback
              try {
                this._hasTaskZS && this._hasTaskZS.onHasTask(this._hasTaskDlgt, this._hasTaskCurrZone, targetZone, isEmpty);
              } catch (err) {
                this.handleError(targetZone, err);
              }
            } // tslint:disable-next-line:require-internal-with-underscore

          }, {
            key: "_updateTaskCount",
            value: function _updateTaskCount(type, count) {
              var counts = this._taskCounts;
              var prev = counts[type];
              var next = counts[type] = prev + count;

              if (next < 0) {
                throw new Error('More tasks executed then were scheduled.');
              }

              if (prev == 0 || next == 0) {
                var isEmpty = {
                  microTask: counts['microTask'] > 0,
                  macroTask: counts['macroTask'] > 0,
                  eventTask: counts['eventTask'] > 0,
                  change: type
                };
                this.hasTask(this.zone, isEmpty);
              }
            }
          }]);

          return ZoneDelegate;
        }();

        var ZoneTask = /*#__PURE__*/function () {
          function ZoneTask(type, source, callback, options, scheduleFn, cancelFn) {
            _classCallCheck(this, ZoneTask);

            // tslint:disable-next-line:require-internal-with-underscore
            this._zone = null;
            this.runCount = 0; // tslint:disable-next-line:require-internal-with-underscore

            this._zoneDelegates = null; // tslint:disable-next-line:require-internal-with-underscore

            this._state = 'notScheduled';
            this.type = type;
            this.source = source;
            this.data = options;
            this.scheduleFn = scheduleFn;
            this.cancelFn = cancelFn;

            if (!callback) {
              throw new Error('callback is not defined');
            }

            this.callback = callback;
            var self = this; // TODO: @JiaLiPassion options should have interface

            if (type === eventTask && options && options.useG) {
              this.invoke = ZoneTask.invokeTask;
            } else {
              this.invoke = function () {
                return ZoneTask.invokeTask.call(global, self, this, arguments);
              };
            }
          }

          _createClass(ZoneTask, [{
            key: "zone",
            get: function get() {
              return this._zone;
            }
          }, {
            key: "state",
            get: function get() {
              return this._state;
            }
          }, {
            key: "cancelScheduleRequest",
            value: function cancelScheduleRequest() {
              this._transitionTo(notScheduled, scheduling);
            } // tslint:disable-next-line:require-internal-with-underscore

          }, {
            key: "_transitionTo",
            value: function _transitionTo(toState, fromState1, fromState2) {
              if (this._state === fromState1 || this._state === fromState2) {
                this._state = toState;

                if (toState == notScheduled) {
                  this._zoneDelegates = null;
                }
              } else {
                throw new Error("".concat(this.type, " '").concat(this.source, "': can not transition to '").concat(toState, "', expecting state '").concat(fromState1, "'").concat(fromState2 ? ' or \'' + fromState2 + '\'' : '', ", was '").concat(this._state, "'."));
              }
            }
          }, {
            key: "toString",
            value: function toString() {
              if (this.data && typeof this.data.handleId !== 'undefined') {
                return this.data.handleId.toString();
              } else {
                return Object.prototype.toString.call(this);
              }
            } // add toJSON method to prevent cyclic error when
            // call JSON.stringify(zoneTask)

          }, {
            key: "toJSON",
            value: function toJSON() {
              return {
                type: this.type,
                state: this.state,
                source: this.source,
                zone: this.zone.name,
                runCount: this.runCount
              };
            }
          }], [{
            key: "invokeTask",
            value: function invokeTask(task, target, args) {
              if (!task) {
                task = this;
              }

              _numberOfNestedTaskFrames++;

              try {
                task.runCount++;
                return task.zone.runTask(task, target, args);
              } finally {
                if (_numberOfNestedTaskFrames == 1) {
                  drainMicroTaskQueue();
                }

                _numberOfNestedTaskFrames--;
              }
            }
          }]);

          return ZoneTask;
        }(); //////////////////////////////////////////////////////
        //////////////////////////////////////////////////////
        ///  MICROTASK QUEUE
        //////////////////////////////////////////////////////
        //////////////////////////////////////////////////////


        var symbolSetTimeout = __symbol__('setTimeout');

        var symbolPromise = __symbol__('Promise');

        var symbolThen = __symbol__('then');

        var _microTaskQueue = [];
        var _isDrainingMicrotaskQueue = false;
        var nativeMicroTaskQueuePromise;

        function scheduleMicroTask(task) {
          // if we are not running in any task, and there has not been anything scheduled
          // we must bootstrap the initial task creation by manually scheduling the drain
          if (_numberOfNestedTaskFrames === 0 && _microTaskQueue.length === 0) {
            // We are not running in Task, so we need to kickstart the microtask queue.
            if (!nativeMicroTaskQueuePromise) {
              if (global[symbolPromise]) {
                nativeMicroTaskQueuePromise = global[symbolPromise].resolve(0);
              }
            }

            if (nativeMicroTaskQueuePromise) {
              var nativeThen = nativeMicroTaskQueuePromise[symbolThen];

              if (!nativeThen) {
                // native Promise is not patchable, we need to use `then` directly
                // issue 1078
                nativeThen = nativeMicroTaskQueuePromise['then'];
              }

              nativeThen.call(nativeMicroTaskQueuePromise, drainMicroTaskQueue);
            } else {
              global[symbolSetTimeout](drainMicroTaskQueue, 0);
            }
          }

          task && _microTaskQueue.push(task);
        }

        function drainMicroTaskQueue() {
          if (!_isDrainingMicrotaskQueue) {
            _isDrainingMicrotaskQueue = true;

            while (_microTaskQueue.length) {
              var queue = _microTaskQueue;
              _microTaskQueue = [];

              for (var i = 0; i < queue.length; i++) {
                var task = queue[i];

                try {
                  task.zone.runTask(task, null, null);
                } catch (error) {
                  _api.onUnhandledError(error);
                }
              }
            }

            _api.microtaskDrainDone();

            _isDrainingMicrotaskQueue = false;
          }
        } //////////////////////////////////////////////////////
        //////////////////////////////////////////////////////
        ///  BOOTSTRAP
        //////////////////////////////////////////////////////
        //////////////////////////////////////////////////////


        var NO_ZONE = {
          name: 'NO ZONE'
        };
        var notScheduled = 'notScheduled',
            scheduling = 'scheduling',
            scheduled = 'scheduled',
            running = 'running',
            canceling = 'canceling',
            unknown = 'unknown';
        var microTask = 'microTask',
            macroTask = 'macroTask',
            eventTask = 'eventTask';
        var patches = {};
        var _api = {
          symbol: __symbol__,
          currentZoneFrame: function currentZoneFrame() {
            return _currentZoneFrame;
          },
          onUnhandledError: noop,
          microtaskDrainDone: noop,
          scheduleMicroTask: scheduleMicroTask,
          showUncaughtError: function showUncaughtError() {
            return !Zone[__symbol__('ignoreConsoleErrorUncaughtError')];
          },
          patchEventTarget: function patchEventTarget() {
            return [];
          },
          patchOnProperties: noop,
          patchMethod: function patchMethod() {
            return noop;
          },
          bindArguments: function bindArguments() {
            return [];
          },
          patchThen: function patchThen() {
            return noop;
          },
          patchMacroTask: function patchMacroTask() {
            return noop;
          },
          patchEventPrototype: function patchEventPrototype() {
            return noop;
          },
          isIEOrEdge: function isIEOrEdge() {
            return false;
          },
          getGlobalObjects: function getGlobalObjects() {
            return undefined;
          },
          ObjectDefineProperty: function ObjectDefineProperty() {
            return noop;
          },
          ObjectGetOwnPropertyDescriptor: function ObjectGetOwnPropertyDescriptor() {
            return undefined;
          },
          ObjectCreate: function ObjectCreate() {
            return undefined;
          },
          ArraySlice: function ArraySlice() {
            return [];
          },
          patchClass: function patchClass() {
            return noop;
          },
          wrapWithCurrentZone: function wrapWithCurrentZone() {
            return noop;
          },
          filterProperties: function filterProperties() {
            return [];
          },
          attachOriginToPatched: function attachOriginToPatched() {
            return noop;
          },
          _redefineProperty: function _redefineProperty() {
            return noop;
          },
          patchCallbacks: function patchCallbacks() {
            return noop;
          }
        };
        var _currentZoneFrame = {
          parent: null,
          zone: new Zone(null, null)
        };
        var _currentTask = null;
        var _numberOfNestedTaskFrames = 0;

        function noop() {}

        performanceMeasure('Zone', 'Zone');
        return global['Zone'] = Zone;
      }(typeof window !== 'undefined' && window || typeof self !== 'undefined' && self || global);
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * Suppress closure compiler errors about unknown 'Zone' variable
       * @fileoverview
       * @suppress {undefinedVars,globalThis,missingRequire}
       */
      /// <reference types="node"/>
      // issue #989, to reduce bundle size, use short name

      /** Object.getOwnPropertyDescriptor */


      var ObjectGetOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
      /** Object.defineProperty */

      var ObjectDefineProperty = Object.defineProperty;
      /** Object.getPrototypeOf */

      var ObjectGetPrototypeOf = Object.getPrototypeOf;
      /** Object.create */

      var ObjectCreate = Object.create;
      /** Array.prototype.slice */

      var ArraySlice = Array.prototype.slice;
      /** addEventListener string const */

      var ADD_EVENT_LISTENER_STR = 'addEventListener';
      /** removeEventListener string const */

      var REMOVE_EVENT_LISTENER_STR = 'removeEventListener';
      /** zoneSymbol addEventListener */

      var ZONE_SYMBOL_ADD_EVENT_LISTENER = Zone.__symbol__(ADD_EVENT_LISTENER_STR);
      /** zoneSymbol removeEventListener */


      var ZONE_SYMBOL_REMOVE_EVENT_LISTENER = Zone.__symbol__(REMOVE_EVENT_LISTENER_STR);
      /** true string const */


      var TRUE_STR = 'true';
      /** false string const */

      var FALSE_STR = 'false';
      /** Zone symbol prefix string const. */

      var ZONE_SYMBOL_PREFIX = Zone.__symbol__('');

      function wrapWithCurrentZone(callback, source) {
        return Zone.current.wrap(callback, source);
      }

      function scheduleMacroTaskWithCurrentZone(source, callback, data, customSchedule, customCancel) {
        return Zone.current.scheduleMacroTask(source, callback, data, customSchedule, customCancel);
      }

      var zoneSymbol = Zone.__symbol__;
      var isWindowExists = typeof window !== 'undefined';
      var internalWindow = isWindowExists ? window : undefined;

      var _global = isWindowExists && internalWindow || typeof self === 'object' && self || global;

      var REMOVE_ATTRIBUTE = 'removeAttribute';
      var NULL_ON_PROP_VALUE = [null];

      function bindArguments(args, source) {
        for (var i = args.length - 1; i >= 0; i--) {
          if (typeof args[i] === 'function') {
            args[i] = wrapWithCurrentZone(args[i], source + '_' + i);
          }
        }

        return args;
      }

      function patchPrototype(prototype, fnNames) {
        var source = prototype.constructor['name'];

        var _loop4 = function _loop4(i) {
          var name = fnNames[i];
          var delegate = prototype[name];

          if (delegate) {
            var prototypeDesc = ObjectGetOwnPropertyDescriptor(prototype, name);

            if (!isPropertyWritable(prototypeDesc)) {
              return "continue";
            }

            prototype[name] = function (delegate) {
              var patched = function patched() {
                return delegate.apply(this, bindArguments(arguments, source + '.' + name));
              };

              attachOriginToPatched(patched, delegate);
              return patched;
            }(delegate);
          }
        };

        for (var i = 0; i < fnNames.length; i++) {
          var _ret = _loop4(i);

          if (_ret === "continue") continue;
        }
      }

      function isPropertyWritable(propertyDesc) {
        if (!propertyDesc) {
          return true;
        }

        if (propertyDesc.writable === false) {
          return false;
        }

        return !(typeof propertyDesc.get === 'function' && typeof propertyDesc.set === 'undefined');
      }

      var isWebWorker = typeof WorkerGlobalScope !== 'undefined' && self instanceof WorkerGlobalScope; // Make sure to access `process` through `_global` so that WebPack does not accidentally browserify
      // this code.

      var isNode = !('nw' in _global) && typeof _global.process !== 'undefined' && {}.toString.call(_global.process) === '[object process]';
      var isBrowser = !isNode && !isWebWorker && !!(isWindowExists && internalWindow['HTMLElement']); // we are in electron of nw, so we are both browser and nodejs
      // Make sure to access `process` through `_global` so that WebPack does not accidentally browserify
      // this code.

      var isMix = typeof _global.process !== 'undefined' && {}.toString.call(_global.process) === '[object process]' && !isWebWorker && !!(isWindowExists && internalWindow['HTMLElement']);
      var zoneSymbolEventNames = {};

      var wrapFn = function wrapFn(event) {
        // https://github.com/angular/zone.js/issues/911, in IE, sometimes
        // event will be undefined, so we need to use window.event
        event = event || _global.event;

        if (!event) {
          return;
        }

        var eventNameSymbol = zoneSymbolEventNames[event.type];

        if (!eventNameSymbol) {
          eventNameSymbol = zoneSymbolEventNames[event.type] = zoneSymbol('ON_PROPERTY' + event.type);
        }

        var target = this || event.target || _global;
        var listener = target[eventNameSymbol];
        var result;

        if (isBrowser && target === internalWindow && event.type === 'error') {
          // window.onerror have different signiture
          // https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onerror#window.onerror
          // and onerror callback will prevent default when callback return true
          var errorEvent = event;
          result = listener && listener.call(this, errorEvent.message, errorEvent.filename, errorEvent.lineno, errorEvent.colno, errorEvent.error);

          if (result === true) {
            event.preventDefault();
          }
        } else {
          result = listener && listener.apply(this, arguments);

          if (result != undefined && !result) {
            event.preventDefault();
          }
        }

        return result;
      };

      function patchProperty(obj, prop, prototype) {
        var desc = ObjectGetOwnPropertyDescriptor(obj, prop);

        if (!desc && prototype) {
          // when patch window object, use prototype to check prop exist or not
          var prototypeDesc = ObjectGetOwnPropertyDescriptor(prototype, prop);

          if (prototypeDesc) {
            desc = {
              enumerable: true,
              configurable: true
            };
          }
        } // if the descriptor not exists or is not configurable
        // just return


        if (!desc || !desc.configurable) {
          return;
        }

        var onPropPatchedSymbol = zoneSymbol('on' + prop + 'patched');

        if (obj.hasOwnProperty(onPropPatchedSymbol) && obj[onPropPatchedSymbol]) {
          return;
        } // A property descriptor cannot have getter/setter and be writable
        // deleting the writable and value properties avoids this error:
        //
        // TypeError: property descriptors must not specify a value or be writable when a
        // getter or setter has been specified


        delete desc.writable;
        delete desc.value;
        var originalDescGet = desc.get;
        var originalDescSet = desc.set; // substr(2) cuz 'onclick' -> 'click', etc

        var eventName = prop.substr(2);
        var eventNameSymbol = zoneSymbolEventNames[eventName];

        if (!eventNameSymbol) {
          eventNameSymbol = zoneSymbolEventNames[eventName] = zoneSymbol('ON_PROPERTY' + eventName);
        }

        desc.set = function (newValue) {
          // in some of windows's onproperty callback, this is undefined
          // so we need to check it
          var target = this;

          if (!target && obj === _global) {
            target = _global;
          }

          if (!target) {
            return;
          }

          var previousValue = target[eventNameSymbol];

          if (previousValue) {
            target.removeEventListener(eventName, wrapFn);
          } // issue #978, when onload handler was added before loading zone.js
          // we should remove it with originalDescSet


          if (originalDescSet) {
            originalDescSet.apply(target, NULL_ON_PROP_VALUE);
          }

          if (typeof newValue === 'function') {
            target[eventNameSymbol] = newValue;
            target.addEventListener(eventName, wrapFn, false);
          } else {
            target[eventNameSymbol] = null;
          }
        }; // The getter would return undefined for unassigned properties but the default value of an
        // unassigned property is null


        desc.get = function () {
          // in some of windows's onproperty callback, this is undefined
          // so we need to check it
          var target = this;

          if (!target && obj === _global) {
            target = _global;
          }

          if (!target) {
            return null;
          }

          var listener = target[eventNameSymbol];

          if (listener) {
            return listener;
          } else if (originalDescGet) {
            // result will be null when use inline event attribute,
            // such as <button onclick="func();">OK</button>
            // because the onclick function is internal raw uncompiled handler
            // the onclick will be evaluated when first time event was triggered or
            // the property is accessed, https://github.com/angular/zone.js/issues/525
            // so we should use original native get to retrieve the handler
            var value = originalDescGet && originalDescGet.call(this);

            if (value) {
              desc.set.call(this, value);

              if (typeof target[REMOVE_ATTRIBUTE] === 'function') {
                target.removeAttribute(prop);
              }

              return value;
            }
          }

          return null;
        };

        ObjectDefineProperty(obj, prop, desc);
        obj[onPropPatchedSymbol] = true;
      }

      function patchOnProperties(obj, properties, prototype) {
        if (properties) {
          for (var i = 0; i < properties.length; i++) {
            patchProperty(obj, 'on' + properties[i], prototype);
          }
        } else {
          var onProperties = [];

          for (var prop in obj) {
            if (prop.substr(0, 2) == 'on') {
              onProperties.push(prop);
            }
          }

          for (var j = 0; j < onProperties.length; j++) {
            patchProperty(obj, onProperties[j], prototype);
          }
        }
      }

      var originalInstanceKey = zoneSymbol('originalInstance'); // wrap some native API on `window`

      function patchClass(className) {
        var OriginalClass = _global[className];
        if (!OriginalClass) return; // keep original class in global

        _global[zoneSymbol(className)] = OriginalClass;

        _global[className] = function () {
          var a = bindArguments(arguments, className);

          switch (a.length) {
            case 0:
              this[originalInstanceKey] = new OriginalClass();
              break;

            case 1:
              this[originalInstanceKey] = new OriginalClass(a[0]);
              break;

            case 2:
              this[originalInstanceKey] = new OriginalClass(a[0], a[1]);
              break;

            case 3:
              this[originalInstanceKey] = new OriginalClass(a[0], a[1], a[2]);
              break;

            case 4:
              this[originalInstanceKey] = new OriginalClass(a[0], a[1], a[2], a[3]);
              break;

            default:
              throw new Error('Arg list too long.');
          }
        }; // attach original delegate to patched function


        attachOriginToPatched(_global[className], OriginalClass);
        var instance = new OriginalClass(function () {});
        var prop;

        for (prop in instance) {
          // https://bugs.webkit.org/show_bug.cgi?id=44721
          if (className === 'XMLHttpRequest' && prop === 'responseBlob') continue;

          (function (prop) {
            if (typeof instance[prop] === 'function') {
              _global[className].prototype[prop] = function () {
                return this[originalInstanceKey][prop].apply(this[originalInstanceKey], arguments);
              };
            } else {
              ObjectDefineProperty(_global[className].prototype, prop, {
                set: function set(fn) {
                  if (typeof fn === 'function') {
                    this[originalInstanceKey][prop] = wrapWithCurrentZone(fn, className + '.' + prop); // keep callback in wrapped function so we can
                    // use it in Function.prototype.toString to return
                    // the native one.

                    attachOriginToPatched(this[originalInstanceKey][prop], fn);
                  } else {
                    this[originalInstanceKey][prop] = fn;
                  }
                },
                get: function get() {
                  return this[originalInstanceKey][prop];
                }
              });
            }
          })(prop);
        }

        for (prop in OriginalClass) {
          if (prop !== 'prototype' && OriginalClass.hasOwnProperty(prop)) {
            _global[className][prop] = OriginalClass[prop];
          }
        }
      }

      function patchMethod(target, name, patchFn) {
        var proto = target;

        while (proto && !proto.hasOwnProperty(name)) {
          proto = ObjectGetPrototypeOf(proto);
        }

        if (!proto && target[name]) {
          // somehow we did not find it, but we can see it. This happens on IE for Window properties.
          proto = target;
        }

        var delegateName = zoneSymbol(name);
        var delegate = null;

        if (proto && (!(delegate = proto[delegateName]) || !proto.hasOwnProperty(delegateName))) {
          delegate = proto[delegateName] = proto[name]; // check whether proto[name] is writable
          // some property is readonly in safari, such as HtmlCanvasElement.prototype.toBlob

          var desc = proto && ObjectGetOwnPropertyDescriptor(proto, name);

          if (isPropertyWritable(desc)) {
            var patchDelegate = patchFn(delegate, delegateName, name);

            proto[name] = function () {
              return patchDelegate(this, arguments);
            };

            attachOriginToPatched(proto[name], delegate);
          }
        }

        return delegate;
      } // TODO: @JiaLiPassion, support cancel task later if necessary


      function patchMacroTask(obj, funcName, metaCreator) {
        var setNative = null;

        function scheduleTask(task) {
          var data = task.data;

          data.args[data.cbIdx] = function () {
            task.invoke.apply(this, arguments);
          };

          setNative.apply(data.target, data.args);
          return task;
        }

        setNative = patchMethod(obj, funcName, function (delegate) {
          return function (self, args) {
            var meta = metaCreator(self, args);

            if (meta.cbIdx >= 0 && typeof args[meta.cbIdx] === 'function') {
              return scheduleMacroTaskWithCurrentZone(meta.name, args[meta.cbIdx], meta, scheduleTask);
            } else {
              // cause an error by calling it directly.
              return delegate.apply(self, args);
            }
          };
        });
      }

      function attachOriginToPatched(patched, original) {
        patched[zoneSymbol('OriginalDelegate')] = original;
      }

      var isDetectedIEOrEdge = false;
      var ieOrEdge = false;

      function isIE() {
        try {
          var ua = internalWindow.navigator.userAgent;

          if (ua.indexOf('MSIE ') !== -1 || ua.indexOf('Trident/') !== -1) {
            return true;
          }
        } catch (error) {}

        return false;
      }

      function isIEOrEdge() {
        if (isDetectedIEOrEdge) {
          return ieOrEdge;
        }

        isDetectedIEOrEdge = true;

        try {
          var ua = internalWindow.navigator.userAgent;

          if (ua.indexOf('MSIE ') !== -1 || ua.indexOf('Trident/') !== -1 || ua.indexOf('Edge/') !== -1) {
            ieOrEdge = true;
          }
        } catch (error) {}

        return ieOrEdge;
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      Zone.__load_patch('ZoneAwarePromise', function (global, Zone, api) {
        var ObjectGetOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
        var ObjectDefineProperty = Object.defineProperty;

        function readableObjectToString(obj) {
          if (obj && obj.toString === Object.prototype.toString) {
            var className = obj.constructor && obj.constructor.name;
            return (className ? className : '') + ': ' + JSON.stringify(obj);
          }

          return obj ? obj.toString() : Object.prototype.toString.call(obj);
        }

        var __symbol__ = api.symbol;
        var _uncaughtPromiseErrors = [];
        var isDisableWrappingUncaughtPromiseRejection = global[__symbol__('DISABLE_WRAPPING_UNCAUGHT_PROMISE_REJECTION')] === true;

        var symbolPromise = __symbol__('Promise');

        var symbolThen = __symbol__('then');

        var creationTrace = '__creationTrace__';

        api.onUnhandledError = function (e) {
          if (api.showUncaughtError()) {
            var rejection = e && e.rejection;

            if (rejection) {
              console.error('Unhandled Promise rejection:', rejection instanceof Error ? rejection.message : rejection, '; Zone:', e.zone.name, '; Task:', e.task && e.task.source, '; Value:', rejection, rejection instanceof Error ? rejection.stack : undefined);
            } else {
              console.error(e);
            }
          }
        };

        api.microtaskDrainDone = function () {
          var _loop5 = function _loop5() {
            var uncaughtPromiseError = _uncaughtPromiseErrors.shift();

            try {
              uncaughtPromiseError.zone.runGuarded(function () {
                if (uncaughtPromiseError.throwOriginal) {
                  throw uncaughtPromiseError.rejection;
                }

                throw uncaughtPromiseError;
              });
            } catch (error) {
              handleUnhandledRejection(error);
            }
          };

          while (_uncaughtPromiseErrors.length) {
            _loop5();
          }
        };

        var UNHANDLED_PROMISE_REJECTION_HANDLER_SYMBOL = __symbol__('unhandledPromiseRejectionHandler');

        function handleUnhandledRejection(e) {
          api.onUnhandledError(e);

          try {
            var handler = Zone[UNHANDLED_PROMISE_REJECTION_HANDLER_SYMBOL];

            if (typeof handler === 'function') {
              handler.call(this, e);
            }
          } catch (err) {}
        }

        function isThenable(value) {
          return value && value.then;
        }

        function forwardResolution(value) {
          return value;
        }

        function forwardRejection(rejection) {
          return ZoneAwarePromise.reject(rejection);
        }

        var symbolState = __symbol__('state');

        var symbolValue = __symbol__('value');

        var symbolFinally = __symbol__('finally');

        var symbolParentPromiseValue = __symbol__('parentPromiseValue');

        var symbolParentPromiseState = __symbol__('parentPromiseState');

        var source = 'Promise.then';
        var UNRESOLVED = null;
        var RESOLVED = true;
        var REJECTED = false;
        var REJECTED_NO_CATCH = 0;

        function makeResolver(promise, state) {
          return function (v) {
            try {
              resolvePromise(promise, state, v);
            } catch (err) {
              resolvePromise(promise, false, err);
            } // Do not return value or you will break the Promise spec.

          };
        }

        var once = function once() {
          var wasCalled = false;
          return function wrapper(wrappedFunction) {
            return function () {
              if (wasCalled) {
                return;
              }

              wasCalled = true;
              wrappedFunction.apply(null, arguments);
            };
          };
        };

        var TYPE_ERROR = 'Promise resolved with itself';

        var CURRENT_TASK_TRACE_SYMBOL = __symbol__('currentTaskTrace'); // Promise Resolution


        function resolvePromise(promise, state, value) {
          var onceWrapper = once();

          if (promise === value) {
            throw new TypeError(TYPE_ERROR);
          }

          if (promise[symbolState] === UNRESOLVED) {
            // should only get value.then once based on promise spec.
            var then = null;

            try {
              if (typeof value === 'object' || typeof value === 'function') {
                then = value && value.then;
              }
            } catch (err) {
              onceWrapper(function () {
                resolvePromise(promise, false, err);
              })();
              return promise;
            } // if (value instanceof ZoneAwarePromise) {


            if (state !== REJECTED && value instanceof ZoneAwarePromise && value.hasOwnProperty(symbolState) && value.hasOwnProperty(symbolValue) && value[symbolState] !== UNRESOLVED) {
              clearRejectedNoCatch(value);
              resolvePromise(promise, value[symbolState], value[symbolValue]);
            } else if (state !== REJECTED && typeof then === 'function') {
              try {
                then.call(value, onceWrapper(makeResolver(promise, state)), onceWrapper(makeResolver(promise, false)));
              } catch (err) {
                onceWrapper(function () {
                  resolvePromise(promise, false, err);
                })();
              }
            } else {
              promise[symbolState] = state;
              var queue = promise[symbolValue];
              promise[symbolValue] = value;

              if (promise[symbolFinally] === symbolFinally) {
                // the promise is generated by Promise.prototype.finally
                if (state === RESOLVED) {
                  // the state is resolved, should ignore the value
                  // and use parent promise value
                  promise[symbolState] = promise[symbolParentPromiseState];
                  promise[symbolValue] = promise[symbolParentPromiseValue];
                }
              } // record task information in value when error occurs, so we can
              // do some additional work such as render longStackTrace


              if (state === REJECTED && value instanceof Error) {
                // check if longStackTraceZone is here
                var trace = Zone.currentTask && Zone.currentTask.data && Zone.currentTask.data[creationTrace];

                if (trace) {
                  // only keep the long stack trace into error when in longStackTraceZone
                  ObjectDefineProperty(value, CURRENT_TASK_TRACE_SYMBOL, {
                    configurable: true,
                    enumerable: false,
                    writable: true,
                    value: trace
                  });
                }
              }

              for (var i = 0; i < queue.length;) {
                scheduleResolveOrReject(promise, queue[i++], queue[i++], queue[i++], queue[i++]);
              }

              if (queue.length == 0 && state == REJECTED) {
                promise[symbolState] = REJECTED_NO_CATCH;
                var uncaughtPromiseError = value;

                try {
                  // Here we throws a new Error to print more readable error log
                  // and if the value is not an error, zone.js builds an `Error`
                  // Object here to attach the stack information.
                  throw new Error('Uncaught (in promise): ' + readableObjectToString(value) + (value && value.stack ? '\n' + value.stack : ''));
                } catch (err) {
                  uncaughtPromiseError = err;
                }

                if (isDisableWrappingUncaughtPromiseRejection) {
                  // If disable wrapping uncaught promise reject
                  // use the value instead of wrapping it.
                  uncaughtPromiseError.throwOriginal = true;
                }

                uncaughtPromiseError.rejection = value;
                uncaughtPromiseError.promise = promise;
                uncaughtPromiseError.zone = Zone.current;
                uncaughtPromiseError.task = Zone.currentTask;

                _uncaughtPromiseErrors.push(uncaughtPromiseError);

                api.scheduleMicroTask(); // to make sure that it is running
              }
            }
          } // Resolving an already resolved promise is a noop.


          return promise;
        }

        var REJECTION_HANDLED_HANDLER = __symbol__('rejectionHandledHandler');

        function clearRejectedNoCatch(promise) {
          if (promise[symbolState] === REJECTED_NO_CATCH) {
            // if the promise is rejected no catch status
            // and queue.length > 0, means there is a error handler
            // here to handle the rejected promise, we should trigger
            // windows.rejectionhandled eventHandler or nodejs rejectionHandled
            // eventHandler
            try {
              var handler = Zone[REJECTION_HANDLED_HANDLER];

              if (handler && typeof handler === 'function') {
                handler.call(this, {
                  rejection: promise[symbolValue],
                  promise: promise
                });
              }
            } catch (err) {}

            promise[symbolState] = REJECTED;

            for (var i = 0; i < _uncaughtPromiseErrors.length; i++) {
              if (promise === _uncaughtPromiseErrors[i].promise) {
                _uncaughtPromiseErrors.splice(i, 1);
              }
            }
          }
        }

        function scheduleResolveOrReject(promise, zone, chainPromise, onFulfilled, onRejected) {
          clearRejectedNoCatch(promise);
          var promiseState = promise[symbolState];
          var delegate = promiseState ? typeof onFulfilled === 'function' ? onFulfilled : forwardResolution : typeof onRejected === 'function' ? onRejected : forwardRejection;
          zone.scheduleMicroTask(source, function () {
            try {
              var parentPromiseValue = promise[symbolValue];
              var isFinallyPromise = !!chainPromise && symbolFinally === chainPromise[symbolFinally];

              if (isFinallyPromise) {
                // if the promise is generated from finally call, keep parent promise's state and value
                chainPromise[symbolParentPromiseValue] = parentPromiseValue;
                chainPromise[symbolParentPromiseState] = promiseState;
              } // should not pass value to finally callback


              var value = zone.run(delegate, undefined, isFinallyPromise && delegate !== forwardRejection && delegate !== forwardResolution ? [] : [parentPromiseValue]);
              resolvePromise(chainPromise, true, value);
            } catch (error) {
              // if error occurs, should always return this error
              resolvePromise(chainPromise, false, error);
            }
          }, chainPromise);
        }

        var ZONE_AWARE_PROMISE_TO_STRING = 'function ZoneAwarePromise() { [native code] }';

        var noop = function noop() {};

        var ZoneAwarePromise = /*#__PURE__*/function () {
          function ZoneAwarePromise(executor) {
            _classCallCheck(this, ZoneAwarePromise);

            var promise = this;

            if (!(promise instanceof ZoneAwarePromise)) {
              throw new Error('Must be an instanceof Promise.');
            }

            promise[symbolState] = UNRESOLVED;
            promise[symbolValue] = []; // queue;

            try {
              executor && executor(makeResolver(promise, RESOLVED), makeResolver(promise, REJECTED));
            } catch (error) {
              resolvePromise(promise, false, error);
            }
          }

          _createClass(ZoneAwarePromise, [{
            key: Symbol.toStringTag,
            get: function get() {
              return 'Promise';
            }
          }, {
            key: Symbol.species,
            get: function get() {
              return ZoneAwarePromise;
            }
          }, {
            key: "then",
            value: function then(onFulfilled, onRejected) {
              var C = this.constructor[Symbol.species];

              if (!C || typeof C !== 'function') {
                C = this.constructor || ZoneAwarePromise;
              }

              var chainPromise = new C(noop);
              var zone = Zone.current;

              if (this[symbolState] == UNRESOLVED) {
                this[symbolValue].push(zone, chainPromise, onFulfilled, onRejected);
              } else {
                scheduleResolveOrReject(this, zone, chainPromise, onFulfilled, onRejected);
              }

              return chainPromise;
            }
          }, {
            key: "catch",
            value: function _catch(onRejected) {
              return this.then(null, onRejected);
            }
          }, {
            key: "finally",
            value: function _finally(onFinally) {
              var C = this.constructor[Symbol.species];

              if (!C || typeof C !== 'function') {
                C = ZoneAwarePromise;
              }

              var chainPromise = new C(noop);
              chainPromise[symbolFinally] = symbolFinally;
              var zone = Zone.current;

              if (this[symbolState] == UNRESOLVED) {
                this[symbolValue].push(zone, chainPromise, onFinally, onFinally);
              } else {
                scheduleResolveOrReject(this, zone, chainPromise, onFinally, onFinally);
              }

              return chainPromise;
            }
          }], [{
            key: "toString",
            value: function toString() {
              return ZONE_AWARE_PROMISE_TO_STRING;
            }
          }, {
            key: "resolve",
            value: function resolve(value) {
              return resolvePromise(new this(null), RESOLVED, value);
            }
          }, {
            key: "reject",
            value: function reject(error) {
              return resolvePromise(new this(null), REJECTED, error);
            }
          }, {
            key: "race",
            value: function race(values) {
              var resolve;
              var reject;
              var promise = new this(function (res, rej) {
                resolve = res;
                reject = rej;
              });

              function onResolve(value) {
                resolve(value);
              }

              function onReject(error) {
                reject(error);
              }

              var _iterator47 = _createForOfIteratorHelper(values),
                  _step47;

              try {
                for (_iterator47.s(); !(_step47 = _iterator47.n()).done;) {
                  var value = _step47.value;

                  if (!isThenable(value)) {
                    value = this.resolve(value);
                  }

                  value.then(onResolve, onReject);
                }
              } catch (err) {
                _iterator47.e(err);
              } finally {
                _iterator47.f();
              }

              return promise;
            }
          }, {
            key: "all",
            value: function all(values) {
              return ZoneAwarePromise.allWithCallback(values);
            }
          }, {
            key: "allSettled",
            value: function allSettled(values) {
              var P = this && this.prototype instanceof ZoneAwarePromise ? this : ZoneAwarePromise;
              return P.allWithCallback(values, {
                thenCallback: function thenCallback(value) {
                  return {
                    status: 'fulfilled',
                    value: value
                  };
                },
                errorCallback: function errorCallback(err) {
                  return {
                    status: 'rejected',
                    reason: err
                  };
                }
              });
            }
          }, {
            key: "allWithCallback",
            value: function allWithCallback(values, callback) {
              var _this315 = this;

              var resolve;
              var reject;
              var promise = new this(function (res, rej) {
                resolve = res;
                reject = rej;
              }); // Start at 2 to prevent prematurely resolving if .then is called immediately.

              var unresolvedCount = 2;
              var valueIndex = 0;
              var resolvedValues = [];

              var _iterator48 = _createForOfIteratorHelper(values),
                  _step48;

              try {
                var _loop6 = function _loop6() {
                  var value = _step48.value;

                  if (!isThenable(value)) {
                    value = _this315.resolve(value);
                  }

                  var curValueIndex = valueIndex;

                  try {
                    value.then(function (value) {
                      resolvedValues[curValueIndex] = callback ? callback.thenCallback(value) : value;
                      unresolvedCount--;

                      if (unresolvedCount === 0) {
                        resolve(resolvedValues);
                      }
                    }, function (err) {
                      if (!callback) {
                        reject(err);
                      } else {
                        resolvedValues[curValueIndex] = callback.errorCallback(err);
                        unresolvedCount--;

                        if (unresolvedCount === 0) {
                          resolve(resolvedValues);
                        }
                      }
                    });
                  } catch (thenErr) {
                    reject(thenErr);
                  }

                  unresolvedCount++;
                  valueIndex++;
                };

                for (_iterator48.s(); !(_step48 = _iterator48.n()).done;) {
                  _loop6();
                } // Make the unresolvedCount zero-based again.

              } catch (err) {
                _iterator48.e(err);
              } finally {
                _iterator48.f();
              }

              unresolvedCount -= 2;

              if (unresolvedCount === 0) {
                resolve(resolvedValues);
              }

              return promise;
            }
          }]);

          return ZoneAwarePromise;
        }(); // Protect against aggressive optimizers dropping seemingly unused properties.
        // E.g. Closure Compiler in advanced mode.


        ZoneAwarePromise['resolve'] = ZoneAwarePromise.resolve;
        ZoneAwarePromise['reject'] = ZoneAwarePromise.reject;
        ZoneAwarePromise['race'] = ZoneAwarePromise.race;
        ZoneAwarePromise['all'] = ZoneAwarePromise.all;
        var NativePromise = global[symbolPromise] = global['Promise'];
        global['Promise'] = ZoneAwarePromise;

        var symbolThenPatched = __symbol__('thenPatched');

        function patchThen(Ctor) {
          var proto = Ctor.prototype;
          var prop = ObjectGetOwnPropertyDescriptor(proto, 'then');

          if (prop && (prop.writable === false || !prop.configurable)) {
            // check Ctor.prototype.then propertyDescriptor is writable or not
            // in meteor env, writable is false, we should ignore such case
            return;
          }

          var originalThen = proto.then; // Keep a reference to the original method.

          proto[symbolThen] = originalThen;

          Ctor.prototype.then = function (onResolve, onReject) {
            var _this316 = this;

            var wrapped = new ZoneAwarePromise(function (resolve, reject) {
              originalThen.call(_this316, resolve, reject);
            });
            return wrapped.then(onResolve, onReject);
          };

          Ctor[symbolThenPatched] = true;
        }

        api.patchThen = patchThen;

        function zoneify(fn) {
          return function (self, args) {
            var resultPromise = fn.apply(self, args);

            if (resultPromise instanceof ZoneAwarePromise) {
              return resultPromise;
            }

            var ctor = resultPromise.constructor;

            if (!ctor[symbolThenPatched]) {
              patchThen(ctor);
            }

            return resultPromise;
          };
        }

        if (NativePromise) {
          patchThen(NativePromise);
          patchMethod(global, 'fetch', function (delegate) {
            return zoneify(delegate);
          });
        } // This is not part of public API, but it is useful for tests, so we expose it.


        Promise[Zone.__symbol__('uncaughtPromiseErrors')] = _uncaughtPromiseErrors;
        return ZoneAwarePromise;
      });
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */
      // override Function.prototype.toString to make zone.js patched function
      // look like native function


      Zone.__load_patch('toString', function (global) {
        // patch Func.prototype.toString to let them look like native
        var originalFunctionToString = Function.prototype.toString;
        var ORIGINAL_DELEGATE_SYMBOL = zoneSymbol('OriginalDelegate');
        var PROMISE_SYMBOL = zoneSymbol('Promise');
        var ERROR_SYMBOL = zoneSymbol('Error');

        var newFunctionToString = function toString() {
          if (typeof this === 'function') {
            var originalDelegate = this[ORIGINAL_DELEGATE_SYMBOL];

            if (originalDelegate) {
              if (typeof originalDelegate === 'function') {
                return originalFunctionToString.call(originalDelegate);
              } else {
                return Object.prototype.toString.call(originalDelegate);
              }
            }

            if (this === Promise) {
              var nativePromise = global[PROMISE_SYMBOL];

              if (nativePromise) {
                return originalFunctionToString.call(nativePromise);
              }
            }

            if (this === Error) {
              var nativeError = global[ERROR_SYMBOL];

              if (nativeError) {
                return originalFunctionToString.call(nativeError);
              }
            }
          }

          return originalFunctionToString.call(this);
        };

        newFunctionToString[ORIGINAL_DELEGATE_SYMBOL] = originalFunctionToString;
        Function.prototype.toString = newFunctionToString; // patch Object.prototype.toString to let them look like native

        var originalObjectToString = Object.prototype.toString;
        var PROMISE_OBJECT_TO_STRING = '[object Promise]';

        Object.prototype.toString = function () {
          if (typeof Promise === 'function' && this instanceof Promise) {
            return PROMISE_OBJECT_TO_STRING;
          }

          return originalObjectToString.call(this);
        };
      });
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      var passiveSupported = false;

      if (typeof window !== 'undefined') {
        try {
          var options = Object.defineProperty({}, 'passive', {
            get: function get() {
              passiveSupported = true;
            }
          });
          window.addEventListener('test', options, options);
          window.removeEventListener('test', options, options);
        } catch (err) {
          passiveSupported = false;
        }
      } // an identifier to tell ZoneTask do not create a new invoke closure


      var OPTIMIZED_ZONE_EVENT_TASK_DATA = {
        useG: true
      };
      var zoneSymbolEventNames$1 = {};
      var globalSources = {};
      var EVENT_NAME_SYMBOL_REGX = new RegExp('^' + ZONE_SYMBOL_PREFIX + '(\\w+)(true|false)$');
      var IMMEDIATE_PROPAGATION_SYMBOL = zoneSymbol('propagationStopped');

      function prepareEventNames(eventName, eventNameToString) {
        var falseEventName = (eventNameToString ? eventNameToString(eventName) : eventName) + FALSE_STR;
        var trueEventName = (eventNameToString ? eventNameToString(eventName) : eventName) + TRUE_STR;
        var symbol = ZONE_SYMBOL_PREFIX + falseEventName;
        var symbolCapture = ZONE_SYMBOL_PREFIX + trueEventName;
        zoneSymbolEventNames$1[eventName] = {};
        zoneSymbolEventNames$1[eventName][FALSE_STR] = symbol;
        zoneSymbolEventNames$1[eventName][TRUE_STR] = symbolCapture;
      }

      function patchEventTarget(_global, apis, patchOptions) {
        var ADD_EVENT_LISTENER = patchOptions && patchOptions.add || ADD_EVENT_LISTENER_STR;
        var REMOVE_EVENT_LISTENER = patchOptions && patchOptions.rm || REMOVE_EVENT_LISTENER_STR;
        var LISTENERS_EVENT_LISTENER = patchOptions && patchOptions.listeners || 'eventListeners';
        var REMOVE_ALL_LISTENERS_EVENT_LISTENER = patchOptions && patchOptions.rmAll || 'removeAllListeners';
        var zoneSymbolAddEventListener = zoneSymbol(ADD_EVENT_LISTENER);
        var ADD_EVENT_LISTENER_SOURCE = '.' + ADD_EVENT_LISTENER + ':';
        var PREPEND_EVENT_LISTENER = 'prependListener';
        var PREPEND_EVENT_LISTENER_SOURCE = '.' + PREPEND_EVENT_LISTENER + ':';

        var invokeTask = function invokeTask(task, target, event) {
          // for better performance, check isRemoved which is set
          // by removeEventListener
          if (task.isRemoved) {
            return;
          }

          var delegate = task.callback;

          if (typeof delegate === 'object' && delegate.handleEvent) {
            // create the bind version of handleEvent when invoke
            task.callback = function (event) {
              return delegate.handleEvent(event);
            };

            task.originalDelegate = delegate;
          } // invoke static task.invoke


          task.invoke(task, target, [event]);
          var options = task.options;

          if (options && typeof options === 'object' && options.once) {
            // if options.once is true, after invoke once remove listener here
            // only browser need to do this, nodejs eventEmitter will cal removeListener
            // inside EventEmitter.once
            var _delegate = task.originalDelegate ? task.originalDelegate : task.callback;

            target[REMOVE_EVENT_LISTENER].call(target, event.type, _delegate, options);
          }
        }; // global shared zoneAwareCallback to handle all event callback with capture = false


        var globalZoneAwareCallback = function globalZoneAwareCallback(event) {
          // https://github.com/angular/zone.js/issues/911, in IE, sometimes
          // event will be undefined, so we need to use window.event
          event = event || _global.event;

          if (!event) {
            return;
          } // event.target is needed for Samsung TV and SourceBuffer
          // || global is needed https://github.com/angular/zone.js/issues/190


          var target = this || event.target || _global;
          var tasks = target[zoneSymbolEventNames$1[event.type][FALSE_STR]];

          if (tasks) {
            // invoke all tasks which attached to current target with given event.type and capture = false
            // for performance concern, if task.length === 1, just invoke
            if (tasks.length === 1) {
              invokeTask(tasks[0], target, event);
            } else {
              // https://github.com/angular/zone.js/issues/836
              // copy the tasks array before invoke, to avoid
              // the callback will remove itself or other listener
              var copyTasks = tasks.slice();

              for (var i = 0; i < copyTasks.length; i++) {
                if (event && event[IMMEDIATE_PROPAGATION_SYMBOL] === true) {
                  break;
                }

                invokeTask(copyTasks[i], target, event);
              }
            }
          }
        }; // global shared zoneAwareCallback to handle all event callback with capture = true


        var globalZoneAwareCaptureCallback = function globalZoneAwareCaptureCallback(event) {
          // https://github.com/angular/zone.js/issues/911, in IE, sometimes
          // event will be undefined, so we need to use window.event
          event = event || _global.event;

          if (!event) {
            return;
          } // event.target is needed for Samsung TV and SourceBuffer
          // || global is needed https://github.com/angular/zone.js/issues/190


          var target = this || event.target || _global;
          var tasks = target[zoneSymbolEventNames$1[event.type][TRUE_STR]];

          if (tasks) {
            // invoke all tasks which attached to current target with given event.type and capture = false
            // for performance concern, if task.length === 1, just invoke
            if (tasks.length === 1) {
              invokeTask(tasks[0], target, event);
            } else {
              // https://github.com/angular/zone.js/issues/836
              // copy the tasks array before invoke, to avoid
              // the callback will remove itself or other listener
              var copyTasks = tasks.slice();

              for (var i = 0; i < copyTasks.length; i++) {
                if (event && event[IMMEDIATE_PROPAGATION_SYMBOL] === true) {
                  break;
                }

                invokeTask(copyTasks[i], target, event);
              }
            }
          }
        };

        function patchEventTargetMethods(obj, patchOptions) {
          if (!obj) {
            return false;
          }

          var useGlobalCallback = true;

          if (patchOptions && patchOptions.useG !== undefined) {
            useGlobalCallback = patchOptions.useG;
          }

          var validateHandler = patchOptions && patchOptions.vh;
          var checkDuplicate = true;

          if (patchOptions && patchOptions.chkDup !== undefined) {
            checkDuplicate = patchOptions.chkDup;
          }

          var returnTarget = false;

          if (patchOptions && patchOptions.rt !== undefined) {
            returnTarget = patchOptions.rt;
          }

          var proto = obj;

          while (proto && !proto.hasOwnProperty(ADD_EVENT_LISTENER)) {
            proto = ObjectGetPrototypeOf(proto);
          }

          if (!proto && obj[ADD_EVENT_LISTENER]) {
            // somehow we did not find it, but we can see it. This happens on IE for Window properties.
            proto = obj;
          }

          if (!proto) {
            return false;
          }

          if (proto[zoneSymbolAddEventListener]) {
            return false;
          }

          var eventNameToString = patchOptions && patchOptions.eventNameToString; // a shared global taskData to pass data for scheduleEventTask
          // so we do not need to create a new object just for pass some data

          var taskData = {};
          var nativeAddEventListener = proto[zoneSymbolAddEventListener] = proto[ADD_EVENT_LISTENER];
          var nativeRemoveEventListener = proto[zoneSymbol(REMOVE_EVENT_LISTENER)] = proto[REMOVE_EVENT_LISTENER];
          var nativeListeners = proto[zoneSymbol(LISTENERS_EVENT_LISTENER)] = proto[LISTENERS_EVENT_LISTENER];
          var nativeRemoveAllListeners = proto[zoneSymbol(REMOVE_ALL_LISTENERS_EVENT_LISTENER)] = proto[REMOVE_ALL_LISTENERS_EVENT_LISTENER];
          var nativePrependEventListener;

          if (patchOptions && patchOptions.prepend) {
            nativePrependEventListener = proto[zoneSymbol(patchOptions.prepend)] = proto[patchOptions.prepend];
          }
          /**
           * This util function will build an option object with passive option
           * to handle all possible input from the user.
           */


          function buildEventListenerOptions(options, passive) {
            if (!passiveSupported && typeof options === 'object' && options) {
              // doesn't support passive but user want to pass an object as options.
              // this will not work on some old browser, so we just pass a boolean
              // as useCapture parameter
              return !!options.capture;
            }

            if (!passiveSupported || !passive) {
              return options;
            }

            if (typeof options === 'boolean') {
              return {
                capture: options,
                passive: true
              };
            }

            if (!options) {
              return {
                passive: true
              };
            }

            if (typeof options === 'object' && options.passive !== false) {
              return Object.assign(Object.assign({}, options), {
                passive: true
              });
            }

            return options;
          }

          var customScheduleGlobal = function customScheduleGlobal(task) {
            // if there is already a task for the eventName + capture,
            // just return, because we use the shared globalZoneAwareCallback here.
            if (taskData.isExisting) {
              return;
            }

            return nativeAddEventListener.call(taskData.target, taskData.eventName, taskData.capture ? globalZoneAwareCaptureCallback : globalZoneAwareCallback, taskData.options);
          };

          var customCancelGlobal = function customCancelGlobal(task) {
            // if task is not marked as isRemoved, this call is directly
            // from Zone.prototype.cancelTask, we should remove the task
            // from tasksList of target first
            if (!task.isRemoved) {
              var symbolEventNames = zoneSymbolEventNames$1[task.eventName];
              var symbolEventName;

              if (symbolEventNames) {
                symbolEventName = symbolEventNames[task.capture ? TRUE_STR : FALSE_STR];
              }

              var existingTasks = symbolEventName && task.target[symbolEventName];

              if (existingTasks) {
                for (var i = 0; i < existingTasks.length; i++) {
                  var existingTask = existingTasks[i];

                  if (existingTask === task) {
                    existingTasks.splice(i, 1); // set isRemoved to data for faster invokeTask check

                    task.isRemoved = true;

                    if (existingTasks.length === 0) {
                      // all tasks for the eventName + capture have gone,
                      // remove globalZoneAwareCallback and remove the task cache from target
                      task.allRemoved = true;
                      task.target[symbolEventName] = null;
                    }

                    break;
                  }
                }
              }
            } // if all tasks for the eventName + capture have gone,
            // we will really remove the global event callback,
            // if not, return


            if (!task.allRemoved) {
              return;
            }

            return nativeRemoveEventListener.call(task.target, task.eventName, task.capture ? globalZoneAwareCaptureCallback : globalZoneAwareCallback, task.options);
          };

          var customScheduleNonGlobal = function customScheduleNonGlobal(task) {
            return nativeAddEventListener.call(taskData.target, taskData.eventName, task.invoke, taskData.options);
          };

          var customSchedulePrepend = function customSchedulePrepend(task) {
            return nativePrependEventListener.call(taskData.target, taskData.eventName, task.invoke, taskData.options);
          };

          var customCancelNonGlobal = function customCancelNonGlobal(task) {
            return nativeRemoveEventListener.call(task.target, task.eventName, task.invoke, task.options);
          };

          var customSchedule = useGlobalCallback ? customScheduleGlobal : customScheduleNonGlobal;
          var customCancel = useGlobalCallback ? customCancelGlobal : customCancelNonGlobal;

          var compareTaskCallbackVsDelegate = function compareTaskCallbackVsDelegate(task, delegate) {
            var typeOfDelegate = typeof delegate;
            return typeOfDelegate === 'function' && task.callback === delegate || typeOfDelegate === 'object' && task.originalDelegate === delegate;
          };

          var compare = patchOptions && patchOptions.diff ? patchOptions.diff : compareTaskCallbackVsDelegate;
          var unpatchedEvents = Zone[zoneSymbol('UNPATCHED_EVENTS')];

          var passiveEvents = _global[zoneSymbol('PASSIVE_EVENTS')];

          var makeAddListener = function makeAddListener(nativeListener, addSource, customScheduleFn, customCancelFn) {
            var returnTarget = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;
            var prepend = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : false;
            return function () {
              var target = this || _global;
              var eventName = arguments[0];

              if (patchOptions && patchOptions.transferEventName) {
                eventName = patchOptions.transferEventName(eventName);
              }

              var delegate = arguments[1];

              if (!delegate) {
                return nativeListener.apply(this, arguments);
              }

              if (isNode && eventName === 'uncaughtException') {
                // don't patch uncaughtException of nodejs to prevent endless loop
                return nativeListener.apply(this, arguments);
              } // don't create the bind delegate function for handleEvent
              // case here to improve addEventListener performance
              // we will create the bind delegate when invoke


              var isHandleEvent = false;

              if (typeof delegate !== 'function') {
                if (!delegate.handleEvent) {
                  return nativeListener.apply(this, arguments);
                }

                isHandleEvent = true;
              }

              if (validateHandler && !validateHandler(nativeListener, delegate, target, arguments)) {
                return;
              }

              var passive = passiveSupported && !!passiveEvents && passiveEvents.indexOf(eventName) !== -1;
              var options = buildEventListenerOptions(arguments[2], passive);

              if (unpatchedEvents) {
                // check upatched list
                for (var i = 0; i < unpatchedEvents.length; i++) {
                  if (eventName === unpatchedEvents[i]) {
                    if (passive) {
                      return nativeListener.call(target, eventName, delegate, options);
                    } else {
                      return nativeListener.apply(this, arguments);
                    }
                  }
                }
              }

              var capture = !options ? false : typeof options === 'boolean' ? true : options.capture;
              var once = options && typeof options === 'object' ? options.once : false;
              var zone = Zone.current;
              var symbolEventNames = zoneSymbolEventNames$1[eventName];

              if (!symbolEventNames) {
                prepareEventNames(eventName, eventNameToString);
                symbolEventNames = zoneSymbolEventNames$1[eventName];
              }

              var symbolEventName = symbolEventNames[capture ? TRUE_STR : FALSE_STR];
              var existingTasks = target[symbolEventName];
              var isExisting = false;

              if (existingTasks) {
                // already have task registered
                isExisting = true;

                if (checkDuplicate) {
                  for (var _i12 = 0; _i12 < existingTasks.length; _i12++) {
                    if (compare(existingTasks[_i12], delegate)) {
                      // same callback, same capture, same event name, just return
                      return;
                    }
                  }
                }
              } else {
                existingTasks = target[symbolEventName] = [];
              }

              var source;
              var constructorName = target.constructor['name'];
              var targetSource = globalSources[constructorName];

              if (targetSource) {
                source = targetSource[eventName];
              }

              if (!source) {
                source = constructorName + addSource + (eventNameToString ? eventNameToString(eventName) : eventName);
              } // do not create a new object as task.data to pass those things
              // just use the global shared one


              taskData.options = options;

              if (once) {
                // if addEventListener with once options, we don't pass it to
                // native addEventListener, instead we keep the once setting
                // and handle ourselves.
                taskData.options.once = false;
              }

              taskData.target = target;
              taskData.capture = capture;
              taskData.eventName = eventName;
              taskData.isExisting = isExisting;
              var data = useGlobalCallback ? OPTIMIZED_ZONE_EVENT_TASK_DATA : undefined; // keep taskData into data to allow onScheduleEventTask to access the task information

              if (data) {
                data.taskData = taskData;
              }

              var task = zone.scheduleEventTask(source, delegate, data, customScheduleFn, customCancelFn); // should clear taskData.target to avoid memory leak
              // issue, https://github.com/angular/angular/issues/20442

              taskData.target = null; // need to clear up taskData because it is a global object

              if (data) {
                data.taskData = null;
              } // have to save those information to task in case
              // application may call task.zone.cancelTask() directly


              if (once) {
                options.once = true;
              }

              if (!(!passiveSupported && typeof task.options === 'boolean')) {
                // if not support passive, and we pass an option object
                // to addEventListener, we should save the options to task
                task.options = options;
              }

              task.target = target;
              task.capture = capture;
              task.eventName = eventName;

              if (isHandleEvent) {
                // save original delegate for compare to check duplicate
                task.originalDelegate = delegate;
              }

              if (!prepend) {
                existingTasks.push(task);
              } else {
                existingTasks.unshift(task);
              }

              if (returnTarget) {
                return target;
              }
            };
          };

          proto[ADD_EVENT_LISTENER] = makeAddListener(nativeAddEventListener, ADD_EVENT_LISTENER_SOURCE, customSchedule, customCancel, returnTarget);

          if (nativePrependEventListener) {
            proto[PREPEND_EVENT_LISTENER] = makeAddListener(nativePrependEventListener, PREPEND_EVENT_LISTENER_SOURCE, customSchedulePrepend, customCancel, returnTarget, true);
          }

          proto[REMOVE_EVENT_LISTENER] = function () {
            var target = this || _global;
            var eventName = arguments[0];

            if (patchOptions && patchOptions.transferEventName) {
              eventName = patchOptions.transferEventName(eventName);
            }

            var options = arguments[2];
            var capture = !options ? false : typeof options === 'boolean' ? true : options.capture;
            var delegate = arguments[1];

            if (!delegate) {
              return nativeRemoveEventListener.apply(this, arguments);
            }

            if (validateHandler && !validateHandler(nativeRemoveEventListener, delegate, target, arguments)) {
              return;
            }

            var symbolEventNames = zoneSymbolEventNames$1[eventName];
            var symbolEventName;

            if (symbolEventNames) {
              symbolEventName = symbolEventNames[capture ? TRUE_STR : FALSE_STR];
            }

            var existingTasks = symbolEventName && target[symbolEventName];

            if (existingTasks) {
              for (var i = 0; i < existingTasks.length; i++) {
                var existingTask = existingTasks[i];

                if (compare(existingTask, delegate)) {
                  existingTasks.splice(i, 1); // set isRemoved to data for faster invokeTask check

                  existingTask.isRemoved = true;

                  if (existingTasks.length === 0) {
                    // all tasks for the eventName + capture have gone,
                    // remove globalZoneAwareCallback and remove the task cache from target
                    existingTask.allRemoved = true;
                    target[symbolEventName] = null; // in the target, we have an event listener which is added by on_property
                    // such as target.onclick = function() {}, so we need to clear this internal
                    // property too if all delegates all removed

                    if (typeof eventName === 'string') {
                      var onPropertySymbol = ZONE_SYMBOL_PREFIX + 'ON_PROPERTY' + eventName;
                      target[onPropertySymbol] = null;
                    }
                  }

                  existingTask.zone.cancelTask(existingTask);

                  if (returnTarget) {
                    return target;
                  }

                  return;
                }
              }
            } // issue 930, didn't find the event name or callback
            // from zone kept existingTasks, the callback maybe
            // added outside of zone, we need to call native removeEventListener
            // to try to remove it.


            return nativeRemoveEventListener.apply(this, arguments);
          };

          proto[LISTENERS_EVENT_LISTENER] = function () {
            var target = this || _global;
            var eventName = arguments[0];

            if (patchOptions && patchOptions.transferEventName) {
              eventName = patchOptions.transferEventName(eventName);
            }

            var listeners = [];
            var tasks = findEventTasks(target, eventNameToString ? eventNameToString(eventName) : eventName);

            for (var i = 0; i < tasks.length; i++) {
              var task = tasks[i];
              var delegate = task.originalDelegate ? task.originalDelegate : task.callback;
              listeners.push(delegate);
            }

            return listeners;
          };

          proto[REMOVE_ALL_LISTENERS_EVENT_LISTENER] = function () {
            var target = this || _global;
            var eventName = arguments[0];

            if (!eventName) {
              var keys = Object.keys(target);

              for (var i = 0; i < keys.length; i++) {
                var prop = keys[i];
                var match = EVENT_NAME_SYMBOL_REGX.exec(prop);
                var evtName = match && match[1]; // in nodejs EventEmitter, removeListener event is
                // used for monitoring the removeListener call,
                // so just keep removeListener eventListener until
                // all other eventListeners are removed

                if (evtName && evtName !== 'removeListener') {
                  this[REMOVE_ALL_LISTENERS_EVENT_LISTENER].call(this, evtName);
                }
              } // remove removeListener listener finally


              this[REMOVE_ALL_LISTENERS_EVENT_LISTENER].call(this, 'removeListener');
            } else {
              if (patchOptions && patchOptions.transferEventName) {
                eventName = patchOptions.transferEventName(eventName);
              }

              var symbolEventNames = zoneSymbolEventNames$1[eventName];

              if (symbolEventNames) {
                var symbolEventName = symbolEventNames[FALSE_STR];
                var symbolCaptureEventName = symbolEventNames[TRUE_STR];
                var tasks = target[symbolEventName];
                var captureTasks = target[symbolCaptureEventName];

                if (tasks) {
                  var removeTasks = tasks.slice();

                  for (var _i13 = 0; _i13 < removeTasks.length; _i13++) {
                    var task = removeTasks[_i13];
                    var delegate = task.originalDelegate ? task.originalDelegate : task.callback;
                    this[REMOVE_EVENT_LISTENER].call(this, eventName, delegate, task.options);
                  }
                }

                if (captureTasks) {
                  var _removeTasks = captureTasks.slice();

                  for (var _i14 = 0; _i14 < _removeTasks.length; _i14++) {
                    var _task = _removeTasks[_i14];

                    var _delegate2 = _task.originalDelegate ? _task.originalDelegate : _task.callback;

                    this[REMOVE_EVENT_LISTENER].call(this, eventName, _delegate2, _task.options);
                  }
                }
              }
            }

            if (returnTarget) {
              return this;
            }
          }; // for native toString patch


          attachOriginToPatched(proto[ADD_EVENT_LISTENER], nativeAddEventListener);
          attachOriginToPatched(proto[REMOVE_EVENT_LISTENER], nativeRemoveEventListener);

          if (nativeRemoveAllListeners) {
            attachOriginToPatched(proto[REMOVE_ALL_LISTENERS_EVENT_LISTENER], nativeRemoveAllListeners);
          }

          if (nativeListeners) {
            attachOriginToPatched(proto[LISTENERS_EVENT_LISTENER], nativeListeners);
          }

          return true;
        }

        var results = [];

        for (var i = 0; i < apis.length; i++) {
          results[i] = patchEventTargetMethods(apis[i], patchOptions);
        }

        return results;
      }

      function findEventTasks(target, eventName) {
        if (!eventName) {
          var foundTasks = [];

          for (var prop in target) {
            var match = EVENT_NAME_SYMBOL_REGX.exec(prop);
            var evtName = match && match[1];

            if (evtName && (!eventName || evtName === eventName)) {
              var tasks = target[prop];

              if (tasks) {
                for (var i = 0; i < tasks.length; i++) {
                  foundTasks.push(tasks[i]);
                }
              }
            }
          }

          return foundTasks;
        }

        var symbolEventName = zoneSymbolEventNames$1[eventName];

        if (!symbolEventName) {
          prepareEventNames(eventName);
          symbolEventName = zoneSymbolEventNames$1[eventName];
        }

        var captureFalseTasks = target[symbolEventName[FALSE_STR]];
        var captureTrueTasks = target[symbolEventName[TRUE_STR]];

        if (!captureFalseTasks) {
          return captureTrueTasks ? captureTrueTasks.slice() : [];
        } else {
          return captureTrueTasks ? captureFalseTasks.concat(captureTrueTasks) : captureFalseTasks.slice();
        }
      }

      function patchEventPrototype(global, api) {
        var Event = global['Event'];

        if (Event && Event.prototype) {
          api.patchMethod(Event.prototype, 'stopImmediatePropagation', function (delegate) {
            return function (self, args) {
              self[IMMEDIATE_PROPAGATION_SYMBOL] = true; // we need to call the native stopImmediatePropagation
              // in case in some hybrid application, some part of
              // application will be controlled by zone, some are not

              delegate && delegate.apply(self, args);
            };
          });
        }
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      function patchCallbacks(api, target, targetName, method, callbacks) {
        var symbol = Zone.__symbol__(method);

        if (target[symbol]) {
          return;
        }

        var nativeDelegate = target[symbol] = target[method];

        target[method] = function (name, opts, options) {
          if (opts && opts.prototype) {
            callbacks.forEach(function (callback) {
              var source = "".concat(targetName, ".").concat(method, "::") + callback;
              var prototype = opts.prototype;

              if (prototype.hasOwnProperty(callback)) {
                var descriptor = api.ObjectGetOwnPropertyDescriptor(prototype, callback);

                if (descriptor && descriptor.value) {
                  descriptor.value = api.wrapWithCurrentZone(descriptor.value, source);

                  api._redefineProperty(opts.prototype, callback, descriptor);
                } else if (prototype[callback]) {
                  prototype[callback] = api.wrapWithCurrentZone(prototype[callback], source);
                }
              } else if (prototype[callback]) {
                prototype[callback] = api.wrapWithCurrentZone(prototype[callback], source);
              }
            });
          }

          return nativeDelegate.call(target, name, opts, options);
        };

        api.attachOriginToPatched(target[method], nativeDelegate);
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      var globalEventHandlersEventNames = ['abort', 'animationcancel', 'animationend', 'animationiteration', 'auxclick', 'beforeinput', 'blur', 'cancel', 'canplay', 'canplaythrough', 'change', 'compositionstart', 'compositionupdate', 'compositionend', 'cuechange', 'click', 'close', 'contextmenu', 'curechange', 'dblclick', 'drag', 'dragend', 'dragenter', 'dragexit', 'dragleave', 'dragover', 'drop', 'durationchange', 'emptied', 'ended', 'error', 'focus', 'focusin', 'focusout', 'gotpointercapture', 'input', 'invalid', 'keydown', 'keypress', 'keyup', 'load', 'loadstart', 'loadeddata', 'loadedmetadata', 'lostpointercapture', 'mousedown', 'mouseenter', 'mouseleave', 'mousemove', 'mouseout', 'mouseover', 'mouseup', 'mousewheel', 'orientationchange', 'pause', 'play', 'playing', 'pointercancel', 'pointerdown', 'pointerenter', 'pointerleave', 'pointerlockchange', 'mozpointerlockchange', 'webkitpointerlockerchange', 'pointerlockerror', 'mozpointerlockerror', 'webkitpointerlockerror', 'pointermove', 'pointout', 'pointerover', 'pointerup', 'progress', 'ratechange', 'reset', 'resize', 'scroll', 'seeked', 'seeking', 'select', 'selectionchange', 'selectstart', 'show', 'sort', 'stalled', 'submit', 'suspend', 'timeupdate', 'volumechange', 'touchcancel', 'touchmove', 'touchstart', 'touchend', 'transitioncancel', 'transitionend', 'waiting', 'wheel'];
      var documentEventNames = ['afterscriptexecute', 'beforescriptexecute', 'DOMContentLoaded', 'freeze', 'fullscreenchange', 'mozfullscreenchange', 'webkitfullscreenchange', 'msfullscreenchange', 'fullscreenerror', 'mozfullscreenerror', 'webkitfullscreenerror', 'msfullscreenerror', 'readystatechange', 'visibilitychange', 'resume'];
      var windowEventNames = ['absolutedeviceorientation', 'afterinput', 'afterprint', 'appinstalled', 'beforeinstallprompt', 'beforeprint', 'beforeunload', 'devicelight', 'devicemotion', 'deviceorientation', 'deviceorientationabsolute', 'deviceproximity', 'hashchange', 'languagechange', 'message', 'mozbeforepaint', 'offline', 'online', 'paint', 'pageshow', 'pagehide', 'popstate', 'rejectionhandled', 'storage', 'unhandledrejection', 'unload', 'userproximity', 'vrdisplayconnected', 'vrdisplaydisconnected', 'vrdisplaypresentchange'];
      var htmlElementEventNames = ['beforecopy', 'beforecut', 'beforepaste', 'copy', 'cut', 'paste', 'dragstart', 'loadend', 'animationstart', 'search', 'transitionrun', 'transitionstart', 'webkitanimationend', 'webkitanimationiteration', 'webkitanimationstart', 'webkittransitionend'];
      var mediaElementEventNames = ['encrypted', 'waitingforkey', 'msneedkey', 'mozinterruptbegin', 'mozinterruptend'];
      var ieElementEventNames = ['activate', 'afterupdate', 'ariarequest', 'beforeactivate', 'beforedeactivate', 'beforeeditfocus', 'beforeupdate', 'cellchange', 'controlselect', 'dataavailable', 'datasetchanged', 'datasetcomplete', 'errorupdate', 'filterchange', 'layoutcomplete', 'losecapture', 'move', 'moveend', 'movestart', 'propertychange', 'resizeend', 'resizestart', 'rowenter', 'rowexit', 'rowsdelete', 'rowsinserted', 'command', 'compassneedscalibration', 'deactivate', 'help', 'mscontentzoom', 'msmanipulationstatechanged', 'msgesturechange', 'msgesturedoubletap', 'msgestureend', 'msgesturehold', 'msgesturestart', 'msgesturetap', 'msgotpointercapture', 'msinertiastart', 'mslostpointercapture', 'mspointercancel', 'mspointerdown', 'mspointerenter', 'mspointerhover', 'mspointerleave', 'mspointermove', 'mspointerout', 'mspointerover', 'mspointerup', 'pointerout', 'mssitemodejumplistitemremoved', 'msthumbnailclick', 'stop', 'storagecommit'];
      var webglEventNames = ['webglcontextrestored', 'webglcontextlost', 'webglcontextcreationerror'];
      var formEventNames = ['autocomplete', 'autocompleteerror'];
      var detailEventNames = ['toggle'];
      var frameEventNames = ['load'];
      var frameSetEventNames = ['blur', 'error', 'focus', 'load', 'resize', 'scroll', 'messageerror'];
      var marqueeEventNames = ['bounce', 'finish', 'start'];
      var XMLHttpRequestEventNames = ['loadstart', 'progress', 'abort', 'error', 'load', 'progress', 'timeout', 'loadend', 'readystatechange'];
      var IDBIndexEventNames = ['upgradeneeded', 'complete', 'abort', 'success', 'error', 'blocked', 'versionchange', 'close'];
      var websocketEventNames = ['close', 'error', 'open', 'message'];
      var workerEventNames = ['error', 'message'];
      var eventNames = globalEventHandlersEventNames.concat(webglEventNames, formEventNames, detailEventNames, documentEventNames, windowEventNames, htmlElementEventNames, ieElementEventNames);

      function filterProperties(target, onProperties, ignoreProperties) {
        if (!ignoreProperties || ignoreProperties.length === 0) {
          return onProperties;
        }

        var tip = ignoreProperties.filter(function (ip) {
          return ip.target === target;
        });

        if (!tip || tip.length === 0) {
          return onProperties;
        }

        var targetIgnoreProperties = tip[0].ignoreProperties;
        return onProperties.filter(function (op) {
          return targetIgnoreProperties.indexOf(op) === -1;
        });
      }

      function patchFilteredProperties(target, onProperties, ignoreProperties, prototype) {
        // check whether target is available, sometimes target will be undefined
        // because different browser or some 3rd party plugin.
        if (!target) {
          return;
        }

        var filteredProperties = filterProperties(target, onProperties, ignoreProperties);
        patchOnProperties(target, filteredProperties, prototype);
      }

      function propertyDescriptorPatch(api, _global) {
        if (isNode && !isMix) {
          return;
        }

        if (Zone[api.symbol('patchEvents')]) {
          // events are already been patched by legacy patch.
          return;
        }

        var supportsWebSocket = typeof WebSocket !== 'undefined';
        var ignoreProperties = _global['__Zone_ignore_on_properties']; // for browsers that we can patch the descriptor:  Chrome & Firefox

        if (isBrowser) {
          var _internalWindow = window;
          var ignoreErrorProperties = isIE() ? [{
            target: _internalWindow,
            ignoreProperties: ['error']
          }] : []; // in IE/Edge, onProp not exist in window object, but in WindowPrototype
          // so we need to pass WindowPrototype to check onProp exist or not

          patchFilteredProperties(_internalWindow, eventNames.concat(['messageerror']), ignoreProperties ? ignoreProperties.concat(ignoreErrorProperties) : ignoreProperties, ObjectGetPrototypeOf(_internalWindow));
          patchFilteredProperties(Document.prototype, eventNames, ignoreProperties);

          if (typeof _internalWindow['SVGElement'] !== 'undefined') {
            patchFilteredProperties(_internalWindow['SVGElement'].prototype, eventNames, ignoreProperties);
          }

          patchFilteredProperties(Element.prototype, eventNames, ignoreProperties);
          patchFilteredProperties(HTMLElement.prototype, eventNames, ignoreProperties);
          patchFilteredProperties(HTMLMediaElement.prototype, mediaElementEventNames, ignoreProperties);
          patchFilteredProperties(HTMLFrameSetElement.prototype, windowEventNames.concat(frameSetEventNames), ignoreProperties);
          patchFilteredProperties(HTMLBodyElement.prototype, windowEventNames.concat(frameSetEventNames), ignoreProperties);
          patchFilteredProperties(HTMLFrameElement.prototype, frameEventNames, ignoreProperties);
          patchFilteredProperties(HTMLIFrameElement.prototype, frameEventNames, ignoreProperties);
          var HTMLMarqueeElement = _internalWindow['HTMLMarqueeElement'];

          if (HTMLMarqueeElement) {
            patchFilteredProperties(HTMLMarqueeElement.prototype, marqueeEventNames, ignoreProperties);
          }

          var Worker = _internalWindow['Worker'];

          if (Worker) {
            patchFilteredProperties(Worker.prototype, workerEventNames, ignoreProperties);
          }
        }

        var XMLHttpRequest = _global['XMLHttpRequest'];

        if (XMLHttpRequest) {
          // XMLHttpRequest is not available in ServiceWorker, so we need to check here
          patchFilteredProperties(XMLHttpRequest.prototype, XMLHttpRequestEventNames, ignoreProperties);
        }

        var XMLHttpRequestEventTarget = _global['XMLHttpRequestEventTarget'];

        if (XMLHttpRequestEventTarget) {
          patchFilteredProperties(XMLHttpRequestEventTarget && XMLHttpRequestEventTarget.prototype, XMLHttpRequestEventNames, ignoreProperties);
        }

        if (typeof IDBIndex !== 'undefined') {
          patchFilteredProperties(IDBIndex.prototype, IDBIndexEventNames, ignoreProperties);
          patchFilteredProperties(IDBRequest.prototype, IDBIndexEventNames, ignoreProperties);
          patchFilteredProperties(IDBOpenDBRequest.prototype, IDBIndexEventNames, ignoreProperties);
          patchFilteredProperties(IDBDatabase.prototype, IDBIndexEventNames, ignoreProperties);
          patchFilteredProperties(IDBTransaction.prototype, IDBIndexEventNames, ignoreProperties);
          patchFilteredProperties(IDBCursor.prototype, IDBIndexEventNames, ignoreProperties);
        }

        if (supportsWebSocket) {
          patchFilteredProperties(WebSocket.prototype, websocketEventNames, ignoreProperties);
        }
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      Zone.__load_patch('util', function (global, Zone, api) {
        api.patchOnProperties = patchOnProperties;
        api.patchMethod = patchMethod;
        api.bindArguments = bindArguments;
        api.patchMacroTask = patchMacroTask; // In earlier version of zone.js (<0.9.0), we use env name `__zone_symbol__BLACK_LISTED_EVENTS` to
        // define which events will not be patched by `Zone.js`.
        // In newer version (>=0.9.0), we change the env name to `__zone_symbol__UNPATCHED_EVENTS` to keep
        // the name consistent with angular repo.
        // The  `__zone_symbol__BLACK_LISTED_EVENTS` is deprecated, but it is still be supported for
        // backwards compatibility.

        var SYMBOL_BLACK_LISTED_EVENTS = Zone.__symbol__('BLACK_LISTED_EVENTS');

        var SYMBOL_UNPATCHED_EVENTS = Zone.__symbol__('UNPATCHED_EVENTS');

        if (global[SYMBOL_UNPATCHED_EVENTS]) {
          global[SYMBOL_BLACK_LISTED_EVENTS] = global[SYMBOL_UNPATCHED_EVENTS];
        }

        if (global[SYMBOL_BLACK_LISTED_EVENTS]) {
          Zone[SYMBOL_BLACK_LISTED_EVENTS] = Zone[SYMBOL_UNPATCHED_EVENTS] = global[SYMBOL_BLACK_LISTED_EVENTS];
        }

        api.patchEventPrototype = patchEventPrototype;
        api.patchEventTarget = patchEventTarget;
        api.isIEOrEdge = isIEOrEdge;
        api.ObjectDefineProperty = ObjectDefineProperty;
        api.ObjectGetOwnPropertyDescriptor = ObjectGetOwnPropertyDescriptor;
        api.ObjectCreate = ObjectCreate;
        api.ArraySlice = ArraySlice;
        api.patchClass = patchClass;
        api.wrapWithCurrentZone = wrapWithCurrentZone;
        api.filterProperties = filterProperties;
        api.attachOriginToPatched = attachOriginToPatched;
        api._redefineProperty = Object.defineProperty;
        api.patchCallbacks = patchCallbacks;

        api.getGlobalObjects = function () {
          return {
            globalSources: globalSources,
            zoneSymbolEventNames: zoneSymbolEventNames$1,
            eventNames: eventNames,
            isBrowser: isBrowser,
            isMix: isMix,
            isNode: isNode,
            TRUE_STR: TRUE_STR,
            FALSE_STR: FALSE_STR,
            ZONE_SYMBOL_PREFIX: ZONE_SYMBOL_PREFIX,
            ADD_EVENT_LISTENER_STR: ADD_EVENT_LISTENER_STR,
            REMOVE_EVENT_LISTENER_STR: REMOVE_EVENT_LISTENER_STR
          };
        };
      });
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      var taskSymbol = zoneSymbol('zoneTask');

      function patchTimer(window, setName, cancelName, nameSuffix) {
        var setNative = null;
        var clearNative = null;
        setName += nameSuffix;
        cancelName += nameSuffix;
        var tasksByHandleId = {};

        function scheduleTask(task) {
          var data = task.data;

          data.args[0] = function () {
            return task.invoke.apply(this, arguments);
          };

          data.handleId = setNative.apply(window, data.args);
          return task;
        }

        function clearTask(task) {
          return clearNative.call(window, task.data.handleId);
        }

        setNative = patchMethod(window, setName, function (delegate) {
          return function (self, args) {
            if (typeof args[0] === 'function') {
              var _options2 = {
                isPeriodic: nameSuffix === 'Interval',
                delay: nameSuffix === 'Timeout' || nameSuffix === 'Interval' ? args[1] || 0 : undefined,
                args: args
              };
              var callback = args[0];

              args[0] = function timer() {
                try {
                  return callback.apply(this, arguments);
                } finally {
                  // issue-934, task will be cancelled
                  // even it is a periodic task such as
                  // setInterval
                  // https://github.com/angular/angular/issues/40387
                  // Cleanup tasksByHandleId should be handled before scheduleTask
                  // Since some zoneSpec may intercept and doesn't trigger
                  // scheduleFn(scheduleTask) provided here.
                  if (!_options2.isPeriodic) {
                    if (typeof _options2.handleId === 'number') {
                      // in non-nodejs env, we remove timerId
                      // from local cache
                      delete tasksByHandleId[_options2.handleId];
                    } else if (_options2.handleId) {
                      // Node returns complex objects as handleIds
                      // we remove task reference from timer object
                      _options2.handleId[taskSymbol] = null;
                    }
                  }
                }
              };

              var task = scheduleMacroTaskWithCurrentZone(setName, args[0], _options2, scheduleTask, clearTask);

              if (!task) {
                return task;
              } // Node.js must additionally support the ref and unref functions.


              var handle = task.data.handleId;

              if (typeof handle === 'number') {
                // for non nodejs env, we save handleId: task
                // mapping in local cache for clearTimeout
                tasksByHandleId[handle] = task;
              } else if (handle) {
                // for nodejs env, we save task
                // reference in timerId Object for clearTimeout
                handle[taskSymbol] = task;
              } // check whether handle is null, because some polyfill or browser
              // may return undefined from setTimeout/setInterval/setImmediate/requestAnimationFrame


              if (handle && handle.ref && handle.unref && typeof handle.ref === 'function' && typeof handle.unref === 'function') {
                task.ref = handle.ref.bind(handle);
                task.unref = handle.unref.bind(handle);
              }

              if (typeof handle === 'number' || handle) {
                return handle;
              }

              return task;
            } else {
              // cause an error by calling it directly.
              return delegate.apply(window, args);
            }
          };
        });
        clearNative = patchMethod(window, cancelName, function (delegate) {
          return function (self, args) {
            var id = args[0];
            var task;

            if (typeof id === 'number') {
              // non nodejs env.
              task = tasksByHandleId[id];
            } else {
              // nodejs env.
              task = id && id[taskSymbol]; // other environments.

              if (!task) {
                task = id;
              }
            }

            if (task && typeof task.type === 'string') {
              if (task.state !== 'notScheduled' && (task.cancelFn && task.data.isPeriodic || task.runCount === 0)) {
                if (typeof id === 'number') {
                  delete tasksByHandleId[id];
                } else if (id) {
                  id[taskSymbol] = null;
                } // Do not cancel already canceled functions


                task.zone.cancelTask(task);
              }
            } else {
              // cause an error by calling it directly.
              delegate.apply(window, args);
            }
          };
        });
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      function patchCustomElements(_global, api) {
        var _api$getGlobalObjects = api.getGlobalObjects(),
            isBrowser = _api$getGlobalObjects.isBrowser,
            isMix = _api$getGlobalObjects.isMix;

        if (!isBrowser && !isMix || !_global['customElements'] || !('customElements' in _global)) {
          return;
        }

        var callbacks = ['connectedCallback', 'disconnectedCallback', 'adoptedCallback', 'attributeChangedCallback'];
        api.patchCallbacks(api, _global.customElements, 'customElements', 'define', callbacks);
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      function eventTargetPatch(_global, api) {
        if (Zone[api.symbol('patchEventTarget')]) {
          // EventTarget is already patched.
          return;
        }

        var _api$getGlobalObjects2 = api.getGlobalObjects(),
            eventNames = _api$getGlobalObjects2.eventNames,
            zoneSymbolEventNames = _api$getGlobalObjects2.zoneSymbolEventNames,
            TRUE_STR = _api$getGlobalObjects2.TRUE_STR,
            FALSE_STR = _api$getGlobalObjects2.FALSE_STR,
            ZONE_SYMBOL_PREFIX = _api$getGlobalObjects2.ZONE_SYMBOL_PREFIX; //  predefine all __zone_symbol__ + eventName + true/false string


        for (var i = 0; i < eventNames.length; i++) {
          var eventName = eventNames[i];
          var falseEventName = eventName + FALSE_STR;
          var trueEventName = eventName + TRUE_STR;
          var symbol = ZONE_SYMBOL_PREFIX + falseEventName;
          var symbolCapture = ZONE_SYMBOL_PREFIX + trueEventName;
          zoneSymbolEventNames[eventName] = {};
          zoneSymbolEventNames[eventName][FALSE_STR] = symbol;
          zoneSymbolEventNames[eventName][TRUE_STR] = symbolCapture;
        }

        var EVENT_TARGET = _global['EventTarget'];

        if (!EVENT_TARGET || !EVENT_TARGET.prototype) {
          return;
        }

        api.patchEventTarget(_global, [EVENT_TARGET && EVENT_TARGET.prototype]);
        return true;
      }

      function patchEvent(global, api) {
        api.patchEventPrototype(global, api);
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      Zone.__load_patch('legacy', function (global) {
        var legacyPatch = global[Zone.__symbol__('legacyPatch')];

        if (legacyPatch) {
          legacyPatch();
        }
      });

      Zone.__load_patch('queueMicrotask', function (global, Zone, api) {
        api.patchMethod(global, 'queueMicrotask', function (delegate) {
          return function (self, args) {
            Zone.current.scheduleMicroTask('queueMicrotask', args[0]);
          };
        });
      });

      Zone.__load_patch('timers', function (global) {
        var set = 'set';
        var clear = 'clear';
        patchTimer(global, set, clear, 'Timeout');
        patchTimer(global, set, clear, 'Interval');
        patchTimer(global, set, clear, 'Immediate');
      });

      Zone.__load_patch('requestAnimationFrame', function (global) {
        patchTimer(global, 'request', 'cancel', 'AnimationFrame');
        patchTimer(global, 'mozRequest', 'mozCancel', 'AnimationFrame');
        patchTimer(global, 'webkitRequest', 'webkitCancel', 'AnimationFrame');
      });

      Zone.__load_patch('blocking', function (global, Zone) {
        var blockingMethods = ['alert', 'prompt', 'confirm'];

        for (var i = 0; i < blockingMethods.length; i++) {
          var name = blockingMethods[i];
          patchMethod(global, name, function (delegate, symbol, name) {
            return function (s, args) {
              return Zone.current.run(delegate, global, args, name);
            };
          });
        }
      });

      Zone.__load_patch('EventTarget', function (global, Zone, api) {
        patchEvent(global, api);
        eventTargetPatch(global, api); // patch XMLHttpRequestEventTarget's addEventListener/removeEventListener

        var XMLHttpRequestEventTarget = global['XMLHttpRequestEventTarget'];

        if (XMLHttpRequestEventTarget && XMLHttpRequestEventTarget.prototype) {
          api.patchEventTarget(global, [XMLHttpRequestEventTarget.prototype]);
        }
      });

      Zone.__load_patch('MutationObserver', function (global, Zone, api) {
        patchClass('MutationObserver');
        patchClass('WebKitMutationObserver');
      });

      Zone.__load_patch('IntersectionObserver', function (global, Zone, api) {
        patchClass('IntersectionObserver');
      });

      Zone.__load_patch('FileReader', function (global, Zone, api) {
        patchClass('FileReader');
      });

      Zone.__load_patch('on_property', function (global, Zone, api) {
        propertyDescriptorPatch(api, global);
      });

      Zone.__load_patch('customElements', function (global, Zone, api) {
        patchCustomElements(global, api);
      });

      Zone.__load_patch('XHR', function (global, Zone) {
        // Treat XMLHttpRequest as a macrotask.
        patchXHR(global);
        var XHR_TASK = zoneSymbol('xhrTask');
        var XHR_SYNC = zoneSymbol('xhrSync');
        var XHR_LISTENER = zoneSymbol('xhrListener');
        var XHR_SCHEDULED = zoneSymbol('xhrScheduled');
        var XHR_URL = zoneSymbol('xhrURL');
        var XHR_ERROR_BEFORE_SCHEDULED = zoneSymbol('xhrErrorBeforeScheduled');

        function patchXHR(window) {
          var XMLHttpRequest = window['XMLHttpRequest'];

          if (!XMLHttpRequest) {
            // XMLHttpRequest is not available in service worker
            return;
          }

          var XMLHttpRequestPrototype = XMLHttpRequest.prototype;

          function findPendingTask(target) {
            return target[XHR_TASK];
          }

          var oriAddListener = XMLHttpRequestPrototype[ZONE_SYMBOL_ADD_EVENT_LISTENER];
          var oriRemoveListener = XMLHttpRequestPrototype[ZONE_SYMBOL_REMOVE_EVENT_LISTENER];

          if (!oriAddListener) {
            var XMLHttpRequestEventTarget = window['XMLHttpRequestEventTarget'];

            if (XMLHttpRequestEventTarget) {
              var XMLHttpRequestEventTargetPrototype = XMLHttpRequestEventTarget.prototype;
              oriAddListener = XMLHttpRequestEventTargetPrototype[ZONE_SYMBOL_ADD_EVENT_LISTENER];
              oriRemoveListener = XMLHttpRequestEventTargetPrototype[ZONE_SYMBOL_REMOVE_EVENT_LISTENER];
            }
          }

          var READY_STATE_CHANGE = 'readystatechange';
          var SCHEDULED = 'scheduled';

          function scheduleTask(task) {
            var data = task.data;
            var target = data.target;
            target[XHR_SCHEDULED] = false;
            target[XHR_ERROR_BEFORE_SCHEDULED] = false; // remove existing event listener

            var listener = target[XHR_LISTENER];

            if (!oriAddListener) {
              oriAddListener = target[ZONE_SYMBOL_ADD_EVENT_LISTENER];
              oriRemoveListener = target[ZONE_SYMBOL_REMOVE_EVENT_LISTENER];
            }

            if (listener) {
              oriRemoveListener.call(target, READY_STATE_CHANGE, listener);
            }

            var newListener = target[XHR_LISTENER] = function () {
              if (target.readyState === target.DONE) {
                // sometimes on some browsers XMLHttpRequest will fire onreadystatechange with
                // readyState=4 multiple times, so we need to check task state here
                if (!data.aborted && target[XHR_SCHEDULED] && task.state === SCHEDULED) {
                  // check whether the xhr has registered onload listener
                  // if that is the case, the task should invoke after all
                  // onload listeners finish.
                  // Also if the request failed without response (status = 0), the load event handler
                  // will not be triggered, in that case, we should also invoke the placeholder callback
                  // to close the XMLHttpRequest::send macroTask.
                  // https://github.com/angular/angular/issues/38795
                  var loadTasks = target[Zone.__symbol__('loadfalse')];

                  if (target.status !== 0 && loadTasks && loadTasks.length > 0) {
                    var oriInvoke = task.invoke;

                    task.invoke = function () {
                      // need to load the tasks again, because in other
                      // load listener, they may remove themselves
                      var loadTasks = target[Zone.__symbol__('loadfalse')];

                      for (var i = 0; i < loadTasks.length; i++) {
                        if (loadTasks[i] === task) {
                          loadTasks.splice(i, 1);
                        }
                      }

                      if (!data.aborted && task.state === SCHEDULED) {
                        oriInvoke.call(task);
                      }
                    };

                    loadTasks.push(task);
                  } else {
                    task.invoke();
                  }
                } else if (!data.aborted && target[XHR_SCHEDULED] === false) {
                  // error occurs when xhr.send()
                  target[XHR_ERROR_BEFORE_SCHEDULED] = true;
                }
              }
            };

            oriAddListener.call(target, READY_STATE_CHANGE, newListener);
            var storedTask = target[XHR_TASK];

            if (!storedTask) {
              target[XHR_TASK] = task;
            }

            sendNative.apply(target, data.args);
            target[XHR_SCHEDULED] = true;
            return task;
          }

          function placeholderCallback() {}

          function clearTask(task) {
            var data = task.data; // Note - ideally, we would call data.target.removeEventListener here, but it's too late
            // to prevent it from firing. So instead, we store info for the event listener.

            data.aborted = true;
            return abortNative.apply(data.target, data.args);
          }

          var openNative = patchMethod(XMLHttpRequestPrototype, 'open', function () {
            return function (self, args) {
              self[XHR_SYNC] = args[2] == false;
              self[XHR_URL] = args[1];
              return openNative.apply(self, args);
            };
          });
          var XMLHTTPREQUEST_SOURCE = 'XMLHttpRequest.send';
          var fetchTaskAborting = zoneSymbol('fetchTaskAborting');
          var fetchTaskScheduling = zoneSymbol('fetchTaskScheduling');
          var sendNative = patchMethod(XMLHttpRequestPrototype, 'send', function () {
            return function (self, args) {
              if (Zone.current[fetchTaskScheduling] === true) {
                // a fetch is scheduling, so we are using xhr to polyfill fetch
                // and because we already schedule macroTask for fetch, we should
                // not schedule a macroTask for xhr again
                return sendNative.apply(self, args);
              }

              if (self[XHR_SYNC]) {
                // if the XHR is sync there is no task to schedule, just execute the code.
                return sendNative.apply(self, args);
              } else {
                var _options3 = {
                  target: self,
                  url: self[XHR_URL],
                  isPeriodic: false,
                  args: args,
                  aborted: false
                };
                var task = scheduleMacroTaskWithCurrentZone(XMLHTTPREQUEST_SOURCE, placeholderCallback, _options3, scheduleTask, clearTask);

                if (self && self[XHR_ERROR_BEFORE_SCHEDULED] === true && !_options3.aborted && task.state === SCHEDULED) {
                  // xhr request throw error when send
                  // we should invoke task instead of leaving a scheduled
                  // pending macroTask
                  task.invoke();
                }
              }
            };
          });
          var abortNative = patchMethod(XMLHttpRequestPrototype, 'abort', function () {
            return function (self, args) {
              var task = findPendingTask(self);

              if (task && typeof task.type == 'string') {
                // If the XHR has already completed, do nothing.
                // If the XHR has already been aborted, do nothing.
                // Fix #569, call abort multiple times before done will cause
                // macroTask task count be negative number
                if (task.cancelFn == null || task.data && task.data.aborted) {
                  return;
                }

                task.zone.cancelTask(task);
              } else if (Zone.current[fetchTaskAborting] === true) {
                // the abort is called from fetch polyfill, we need to call native abort of XHR.
                return abortNative.apply(self, args);
              } // Otherwise, we are trying to abort an XHR which has not yet been sent, so there is no
              // task
              // to cancel. Do nothing.

            };
          });
        }
      });

      Zone.__load_patch('geolocation', function (global) {
        /// GEO_LOCATION
        if (global['navigator'] && global['navigator'].geolocation) {
          patchPrototype(global['navigator'].geolocation, ['getCurrentPosition', 'watchPosition']);
        }
      });

      Zone.__load_patch('PromiseRejectionEvent', function (global, Zone) {
        // handle unhandled promise rejection
        function findPromiseRejectionHandler(evtName) {
          return function (e) {
            var eventTasks = findEventTasks(global, evtName);
            eventTasks.forEach(function (eventTask) {
              // windows has added unhandledrejection event listener
              // trigger the event listener
              var PromiseRejectionEvent = global['PromiseRejectionEvent'];

              if (PromiseRejectionEvent) {
                var evt = new PromiseRejectionEvent(evtName, {
                  promise: e.promise,
                  reason: e.rejection
                });
                eventTask.invoke(evt);
              }
            });
          };
        }

        if (global['PromiseRejectionEvent']) {
          Zone[zoneSymbol('unhandledPromiseRejectionHandler')] = findPromiseRejectionHandler('unhandledrejection');
          Zone[zoneSymbol('rejectionHandledHandler')] = findPromiseRejectionHandler('rejectionhandled');
        }
      });
      /***/

    },

    /***/
    "pWza":
    /*!****************************************************************************************************!*\
      !*** ./node_modules/@angular-devkit/build-angular/node_modules/core-js/modules/es.regexp.flags.js ***!
      \****************************************************************************************************/

    /*! no static exports found */

    /***/
    function pWza(module, exports, __webpack_require__) {
      var DESCRIPTORS = __webpack_require__(
      /*! ../internals/descriptors */
      "T69T");

      var objectDefinePropertyModule = __webpack_require__(
      /*! ../internals/object-define-property */
      "/Ybd");

      var regExpFlags = __webpack_require__(
      /*! ../internals/regexp-flags */
      "x0kV");

      var UNSUPPORTED_Y = __webpack_require__(
      /*! ../internals/regexp-sticky-helpers */
      "JkSk").UNSUPPORTED_Y; // `RegExp.prototype.flags` getter
      // https://tc39.es/ecma262/#sec-get-regexp.prototype.flags


      if (DESCRIPTORS && (/./g.flags != 'g' || UNSUPPORTED_Y)) {
        objectDefinePropertyModule.f(RegExp.prototype, 'flags', {
          configurable: true,
          get: regExpFlags
        });
      }
      /***/

    },

    /***/
    "pd8B":
    /*!**********************************************************************************************!*\
      !*** ./node_modules/@angular-devkit/build-angular/node_modules/core-js/internals/perform.js ***!
      \**********************************************************************************************/

    /*! no static exports found */

    /***/
    function pd8B(module, exports) {
      module.exports = function (exec) {
        try {
          return {
            error: false,
            value: exec()
          };
        } catch (error) {
          return {
            error: true,
            value: error
          };
        }
      };
      /***/

    },

    /***/
    "pn4C":
    /*!*************************************************************************************************!*\
      !*** ./node_modules/@angular-devkit/build-angular/node_modules/core-js/internals/math-expm1.js ***!
      \*************************************************************************************************/

    /*! no static exports found */

    /***/
    function pn4C(module, exports) {
      var nativeExpm1 = Math.expm1;
      var exp = Math.exp; // `Math.expm1` method implementation
      // https://tc39.es/ecma262/#sec-math.expm1

      module.exports = !nativeExpm1 // Old FF bug
      || nativeExpm1(10) > 22025.465794806719 || nativeExpm1(10) < 22025.4657948067165168 // Tor Browser bug
      || nativeExpm1(-2e-17) != -2e-17 ? function expm1(x) {
        return (x = +x) == 0 ? x : x > -1e-6 && x < 1e-6 ? x + x * x / 2 : exp(x) - 1;
      } : nativeExpm1;
      /***/
    },

    /***/
    "pz+c":
    /*!************************************************************************************************!*\
      !*** ./node_modules/@angular-devkit/build-angular/node_modules/core-js/internals/iterators.js ***!
      \************************************************************************************************/

    /*! no static exports found */

    /***/
    function pzC(module, exports) {
      module.exports = {};
      /***/
    },

    /***/
    "qaQR":
    /*!********************************************************************************************!*\
      !*** ./node_modules/@angular-devkit/build-angular/node_modules/core-js/es/number/index.js ***!
      \********************************************************************************************/

    /*! no static exports found */

    /***/
    function qaQR(module, exports, __webpack_require__) {
      __webpack_require__(
      /*! ../../modules/es.number.constructor */
      "D+RQ");

      __webpack_require__(
      /*! ../../modules/es.number.epsilon */
      "ZBUp");

      __webpack_require__(
      /*! ../../modules/es.number.is-finite */
      "s5r0");

      __webpack_require__(
      /*! ../../modules/es.number.is-integer */
      "COcp");

      __webpack_require__(
      /*! ../../modules/es.number.is-nan */
      "+IJR");

      __webpack_require__(
      /*! ../../modules/es.number.is-safe-integer */
      "kpca");

      __webpack_require__(
      /*! ../../modules/es.number.max-safe-integer */
      "yI8t");

      __webpack_require__(
      /*! ../../modules/es.number.min-safe-integer */
      "ow8b");

      __webpack_require__(
      /*! ../../modules/es.number.parse-float */
      "5eAq");

      __webpack_require__(
      /*! ../../modules/es.number.parse-int */
      "5zDw");

      __webpack_require__(
      /*! ../../modules/es.number.to-fixed */
      "8xKV");

      __webpack_require__(
      /*! ../../modules/es.number.to-precision */
      "ane6");

      var path = __webpack_require__(
      /*! ../../internals/path */
      "E7aN");

      module.exports = path.Number;
      /***/
    },

    /***/
    "qc/G":
    /*!*********************************************************************************************************!*\
      !*** ./node_modules/@angular-devkit/build-angular/node_modules/core-js/internals/date-to-iso-string.js ***!
      \*********************************************************************************************************/

    /*! no static exports found */

    /***/
    function qcG(module, exports, __webpack_require__) {
      "use strict";

      var fails = __webpack_require__(
      /*! ../internals/fails */
      "rG8t");

      var padStart = __webpack_require__(
      /*! ../internals/string-pad */
      "QcXc").start;

      var abs = Math.abs;
      var DatePrototype = Date.prototype;
      var getTime = DatePrototype.getTime;
      var nativeDateToISOString = DatePrototype.toISOString; // `Date.prototype.toISOString` method implementation
      // https://tc39.es/ecma262/#sec-date.prototype.toisostring
      // PhantomJS / old WebKit fails here:

      module.exports = fails(function () {
        return nativeDateToISOString.call(new Date(-5e13 - 1)) != '0385-07-25T07:06:39.999Z';
      }) || !fails(function () {
        nativeDateToISOString.call(new Date(NaN));
      }) ? function toISOString() {
        if (!isFinite(getTime.call(this))) throw RangeError('Invalid time value');
        var date = this;
        var year = date.getUTCFullYear();
        var milliseconds = date.getUTCMilliseconds();
        var sign = year < 0 ? '-' : year > 9999 ? '+' : '';
        return sign + padStart(abs(year), sign ? 6 : 4, 0) + '-' + padStart(date.getUTCMonth() + 1, 2, 0) + '-' + padStart(date.getUTCDate(), 2, 0) + 'T' + padStart(date.getUTCHours(), 2, 0) + ':' + padStart(date.getUTCMinutes(), 2, 0) + ':' + padStart(date.getUTCSeconds(), 2, 0) + '.' + padStart(milliseconds, 3, 0) + 'Z';
      } : nativeDateToISOString;
      /***/
    },

    /***/
    "qjkP":
    /*!**************************************************************************************************!*\
      !*** ./node_modules/@angular-devkit/build-angular/node_modules/core-js/internals/regexp-exec.js ***!
      \**************************************************************************************************/

    /*! no static exports found */

    /***/
    function qjkP(module, exports, __webpack_require__) {
      "use strict";

      var regexpFlags = __webpack_require__(
      /*! ./regexp-flags */
      "x0kV");

      var stickyHelpers = __webpack_require__(
      /*! ./regexp-sticky-helpers */
      "JkSk");

      var nativeExec = RegExp.prototype.exec; // This always refers to the native implementation, because the
      // String#replace polyfill uses ./fix-regexp-well-known-symbol-logic.js,
      // which loads this file before patching the method.

      var nativeReplace = String.prototype.replace;
      var patchedExec = nativeExec;

      var UPDATES_LAST_INDEX_WRONG = function () {
        var re1 = /a/;
        var re2 = /b*/g;
        nativeExec.call(re1, 'a');
        nativeExec.call(re2, 'a');
        return re1.lastIndex !== 0 || re2.lastIndex !== 0;
      }();

      var UNSUPPORTED_Y = stickyHelpers.UNSUPPORTED_Y || stickyHelpers.BROKEN_CARET; // nonparticipating capturing group, copied from es5-shim's String#split patch.

      var NPCG_INCLUDED = /()??/.exec('')[1] !== undefined;
      var PATCH = UPDATES_LAST_INDEX_WRONG || NPCG_INCLUDED || UNSUPPORTED_Y;

      if (PATCH) {
        patchedExec = function exec(str) {
          var re = this;
          var lastIndex, reCopy, match, i;
          var sticky = UNSUPPORTED_Y && re.sticky;
          var flags = regexpFlags.call(re);
          var source = re.source;
          var charsAdded = 0;
          var strCopy = str;

          if (sticky) {
            flags = flags.replace('y', '');

            if (flags.indexOf('g') === -1) {
              flags += 'g';
            }

            strCopy = String(str).slice(re.lastIndex); // Support anchored sticky behavior.

            if (re.lastIndex > 0 && (!re.multiline || re.multiline && str[re.lastIndex - 1] !== '\n')) {
              source = '(?: ' + source + ')';
              strCopy = ' ' + strCopy;
              charsAdded++;
            } // ^(? + rx + ) is needed, in combination with some str slicing, to
            // simulate the 'y' flag.


            reCopy = new RegExp('^(?:' + source + ')', flags);
          }

          if (NPCG_INCLUDED) {
            reCopy = new RegExp('^' + source + '$(?!\\s)', flags);
          }

          if (UPDATES_LAST_INDEX_WRONG) lastIndex = re.lastIndex;
          match = nativeExec.call(sticky ? reCopy : re, strCopy);

          if (sticky) {
            if (match) {
              match.input = match.input.slice(charsAdded);
              match[0] = match[0].slice(charsAdded);
              match.index = re.lastIndex;
              re.lastIndex += match[0].length;
            } else re.lastIndex = 0;
          } else if (UPDATES_LAST_INDEX_WRONG && match) {
            re.lastIndex = re.global ? match.index + match[0].length : lastIndex;
          }

          if (NPCG_INCLUDED && match && match.length > 1) {
            // Fix browsers whose `exec` methods don't consistently return `undefined`
            // for NPCG, like IE8. NOTE: This doesn' work for /(.?)?/
            nativeReplace.call(match[0], reCopy, function () {
              for (i = 1; i < arguments.length - 2; i++) {
                if (arguments[i] === undefined) match[i] = undefined;
              }
            });
          }

          return match;
        };
      }

      module.exports = patchedExec;
      /***/
    },

    /***/
    "qpIG":
    /*!****************************************************************************************************!*\
      !*** ./node_modules/@angular-devkit/build-angular/node_modules/core-js/modules/es.string.small.js ***!
      \****************************************************************************************************/

    /*! no static exports found */

    /***/
    function qpIG(module, exports, __webpack_require__) {
      "use strict";

      var $ = __webpack_require__(
      /*! ../internals/export */
      "wA6s");

      var createHTML = __webpack_require__(
      /*! ../internals/create-html */
      "uoca");

      var forcedStringHTMLMethod = __webpack_require__(
      /*! ../internals/string-html-forced */
      "d8Sw"); // `String.prototype.small` method
      // https://tc39.es/ecma262/#sec-string.prototype.small


      $({
        target: 'String',
        proto: true,
        forced: forcedStringHTMLMethod('small')
      }, {
        small: function small() {
          return createHTML(this, 'small', '', '');
        }
      });
      /***/
    },

    /***/
    "qx7X":
    /*!**************************************************************************************************************!*\
      !*** ./node_modules/@angular-devkit/build-angular/node_modules/core-js/internals/document-create-element.js ***!
      \**************************************************************************************************************/

    /*! no static exports found */

    /***/
    function qx7X(module, exports, __webpack_require__) {
      var global = __webpack_require__(
      /*! ../internals/global */
      "ocAm");

      var isObject = __webpack_require__(
      /*! ../internals/is-object */
      "6XUM");

      var document = global.document; // typeof document.createElement is 'object' in old IE

      var EXISTS = isObject(document) && isObject(document.createElement);

      module.exports = function (it) {
        return EXISTS ? document.createElement(it) : {};
      };
      /***/

    },

    /***/
    "r8F+":
    /*!**************************************************************************************************************!*\
      !*** ./node_modules/@angular-devkit/build-angular/node_modules/core-js/modules/es.string.from-code-point.js ***!
      \**************************************************************************************************************/

    /*! no static exports found */

    /***/
    function r8F(module, exports, __webpack_require__) {
      var $ = __webpack_require__(
      /*! ../internals/export */
      "wA6s");

      var toAbsoluteIndex = __webpack_require__(
      /*! ../internals/to-absolute-index */
      "7Oj1");

      var fromCharCode = String.fromCharCode;
      var nativeFromCodePoint = String.fromCodePoint; // length should be 1, old FF problem

      var INCORRECT_LENGTH = !!nativeFromCodePoint && nativeFromCodePoint.length != 1; // `String.fromCodePoint` method
      // https://tc39.es/ecma262/#sec-string.fromcodepoint

      $({
        target: 'String',
        stat: true,
        forced: INCORRECT_LENGTH
      }, {
        fromCodePoint: function fromCodePoint(x) {
          // eslint-disable-line no-unused-vars
          var elements = [];
          var length = arguments.length;
          var i = 0;
          var code;

          while (length > i) {
            code = +arguments[i++];
            if (toAbsoluteIndex(code, 0x10FFFF) !== code) throw RangeError(code + ' is not a valid code point');
            elements.push(code < 0x10000 ? fromCharCode(code) : fromCharCode(((code -= 0x10000) >> 10) + 0xD800, code % 0x400 + 0xDC00));
          }

          return elements.join('');
        }
      });
      /***/
    },

    /***/
    "rCRE":
    /*!**********************************************************************************************************!*\
      !*** ./node_modules/@angular-devkit/build-angular/node_modules/core-js/internals/array-last-index-of.js ***!
      \**********************************************************************************************************/

    /*! no static exports found */

    /***/
    function rCRE(module, exports, __webpack_require__) {
      "use strict";

      var toIndexedObject = __webpack_require__(
      /*! ../internals/to-indexed-object */
      "EMtK");

      var toInteger = __webpack_require__(
      /*! ../internals/to-integer */
      "vDBE");

      var toLength = __webpack_require__(
      /*! ../internals/to-length */
      "xpLY");

      var arrayMethodIsStrict = __webpack_require__(
      /*! ../internals/array-method-is-strict */
      "6CJb");

      var arrayMethodUsesToLength = __webpack_require__(
      /*! ../internals/array-method-uses-to-length */
      "w2hq");

      var min = Math.min;
      var nativeLastIndexOf = [].lastIndexOf;
      var NEGATIVE_ZERO = !!nativeLastIndexOf && 1 / [1].lastIndexOf(1, -0) < 0;
      var STRICT_METHOD = arrayMethodIsStrict('lastIndexOf'); // For preventing possible almost infinite loop in non-standard implementations, test the forward version of the method

      var USES_TO_LENGTH = arrayMethodUsesToLength('indexOf', {
        ACCESSORS: true,
        1: 0
      });
      var FORCED = NEGATIVE_ZERO || !STRICT_METHOD || !USES_TO_LENGTH; // `Array.prototype.lastIndexOf` method implementation
      // https://tc39.es/ecma262/#sec-array.prototype.lastindexof

      module.exports = FORCED ? function lastIndexOf(searchElement
      /* , fromIndex = @[*-1] */
      ) {
        // convert -0 to +0
        if (NEGATIVE_ZERO) return nativeLastIndexOf.apply(this, arguments) || 0;
        var O = toIndexedObject(this);
        var length = toLength(O.length);
        var index = length - 1;
        if (arguments.length > 1) index = min(index, toInteger(arguments[1]));
        if (index < 0) index = length + index;

        for (; index >= 0; index--) {
          if (index in O && O[index] === searchElement) return index || 0;
        }

        return -1;
      } : nativeLastIndexOf;
      /***/
    },

    /***/
    "rG8t":
    /*!********************************************************************************************!*\
      !*** ./node_modules/@angular-devkit/build-angular/node_modules/core-js/internals/fails.js ***!
      \********************************************************************************************/

    /*! no static exports found */

    /***/
    function rG8t(module, exports) {
      module.exports = function (exec) {
        try {
          return !!exec();
        } catch (error) {
          return true;
        }
      };
      /***/

    },

    /***/
    "rH3X":
    /*!******************************************************************************************************!*\
      !*** ./node_modules/@angular-devkit/build-angular/node_modules/core-js/modules/es.array.iterator.js ***!
      \******************************************************************************************************/

    /*! no static exports found */

    /***/
    function rH3X(module, exports, __webpack_require__) {
      "use strict";

      var toIndexedObject = __webpack_require__(
      /*! ../internals/to-indexed-object */
      "EMtK");

      var addToUnscopables = __webpack_require__(
      /*! ../internals/add-to-unscopables */
      "A1Hp");

      var Iterators = __webpack_require__(
      /*! ../internals/iterators */
      "pz+c");

      var InternalStateModule = __webpack_require__(
      /*! ../internals/internal-state */
      "XH/I");

      var defineIterator = __webpack_require__(
      /*! ../internals/define-iterator */
      "WijE");

      var ARRAY_ITERATOR = 'Array Iterator';
      var setInternalState = InternalStateModule.set;
      var getInternalState = InternalStateModule.getterFor(ARRAY_ITERATOR); // `Array.prototype.entries` method
      // https://tc39.es/ecma262/#sec-array.prototype.entries
      // `Array.prototype.keys` method
      // https://tc39.es/ecma262/#sec-array.prototype.keys
      // `Array.prototype.values` method
      // https://tc39.es/ecma262/#sec-array.prototype.values
      // `Array.prototype[@@iterator]` method
      // https://tc39.es/ecma262/#sec-array.prototype-@@iterator
      // `CreateArrayIterator` internal method
      // https://tc39.es/ecma262/#sec-createarrayiterator

      module.exports = defineIterator(Array, 'Array', function (iterated, kind) {
        setInternalState(this, {
          type: ARRAY_ITERATOR,
          target: toIndexedObject(iterated),
          // target
          index: 0,
          // next index
          kind: kind // kind

        }); // `%ArrayIteratorPrototype%.next` method
        // https://tc39.es/ecma262/#sec-%arrayiteratorprototype%.next
      }, function () {
        var state = getInternalState(this);
        var target = state.target;
        var kind = state.kind;
        var index = state.index++;

        if (!target || index >= target.length) {
          state.target = undefined;
          return {
            value: undefined,
            done: true
          };
        }

        if (kind == 'keys') return {
          value: index,
          done: false
        };
        if (kind == 'values') return {
          value: target[index],
          done: false
        };
        return {
          value: [index, target[index]],
          done: false
        };
      }, 'values'); // argumentsList[@@iterator] is %ArrayProto_values%
      // https://tc39.es/ecma262/#sec-createunmappedargumentsobject
      // https://tc39.es/ecma262/#sec-createmappedargumentsobject

      Iterators.Arguments = Iterators.Array; // https://tc39.es/ecma262/#sec-array.prototype-@@unscopables

      addToUnscopables('keys');
      addToUnscopables('values');
      addToUnscopables('entries');
      /***/
    },

    /***/
    "riHj":
    /*!*****************************************************************************************************************!*\
      !*** ./node_modules/@angular-devkit/build-angular/node_modules/core-js/modules/web.dom-collections.iterator.js ***!
      \*****************************************************************************************************************/

    /*! no static exports found */

    /***/
    function riHj(module, exports, __webpack_require__) {
      var global = __webpack_require__(
      /*! ../internals/global */
      "ocAm");

      var DOMIterables = __webpack_require__(
      /*! ../internals/dom-iterables */
      "OjQg");

      var ArrayIteratorMethods = __webpack_require__(
      /*! ../modules/es.array.iterator */
      "rH3X");

      var createNonEnumerableProperty = __webpack_require__(
      /*! ../internals/create-non-enumerable-property */
      "aJMj");

      var wellKnownSymbol = __webpack_require__(
      /*! ../internals/well-known-symbol */
      "m41k");

      var ITERATOR = wellKnownSymbol('iterator');
      var TO_STRING_TAG = wellKnownSymbol('toStringTag');
      var ArrayValues = ArrayIteratorMethods.values;

      for (var COLLECTION_NAME in DOMIterables) {
        var Collection = global[COLLECTION_NAME];
        var CollectionPrototype = Collection && Collection.prototype;

        if (CollectionPrototype) {
          // some Chrome versions have non-configurable methods on DOMTokenList
          if (CollectionPrototype[ITERATOR] !== ArrayValues) try {
            createNonEnumerableProperty(CollectionPrototype, ITERATOR, ArrayValues);
          } catch (error) {
            CollectionPrototype[ITERATOR] = ArrayValues;
          }

          if (!CollectionPrototype[TO_STRING_TAG]) {
            createNonEnumerableProperty(CollectionPrototype, TO_STRING_TAG, COLLECTION_NAME);
          }

          if (DOMIterables[COLLECTION_NAME]) for (var METHOD_NAME in ArrayIteratorMethods) {
            // some Chrome versions have non-configurable methods on DOMTokenList
            if (CollectionPrototype[METHOD_NAME] !== ArrayIteratorMethods[METHOD_NAME]) try {
              createNonEnumerableProperty(CollectionPrototype, METHOD_NAME, ArrayIteratorMethods[METHOD_NAME]);
            } catch (error) {
              CollectionPrototype[METHOD_NAME] = ArrayIteratorMethods[METHOD_NAME];
            }
          }
        }
      }
      /***/

    },

    /***/
    "rwGd":
    /*!*********************************************************************************************************!*\
      !*** ./node_modules/@angular-devkit/build-angular/node_modules/core-js/internals/string-trim-forced.js ***!
      \*********************************************************************************************************/

    /*! no static exports found */

    /***/
    function rwGd(module, exports, __webpack_require__) {
      var fails = __webpack_require__(
      /*! ../internals/fails */
      "rG8t");

      var whitespaces = __webpack_require__(
      /*! ../internals/whitespaces */
      "xFZC");

      var non = "\u200B\x85\u180E"; // check that a method works with the correct list
      // of whitespaces and has a correct name

      module.exports = function (METHOD_NAME) {
        return fails(function () {
          return !!whitespaces[METHOD_NAME]() || non[METHOD_NAME]() != non || whitespaces[METHOD_NAME].name !== METHOD_NAME;
        });
      };
      /***/

    },

    /***/
    "s1IR":
    /*!***************************************************************************************************!*\
      !*** ./node_modules/@angular-devkit/build-angular/node_modules/core-js/modules/es.string.trim.js ***!
      \***************************************************************************************************/

    /*! no static exports found */

    /***/
    function s1IR(module, exports, __webpack_require__) {
      "use strict";

      var $ = __webpack_require__(
      /*! ../internals/export */
      "wA6s");

      var $trim = __webpack_require__(
      /*! ../internals/string-trim */
      "jnLS").trim;

      var forcedStringTrimMethod = __webpack_require__(
      /*! ../internals/string-trim-forced */
      "rwGd"); // `String.prototype.trim` method
      // https://tc39.es/ecma262/#sec-string.prototype.trim


      $({
        target: 'String',
        proto: true,
        forced: forcedStringTrimMethod('trim')
      }, {
        trim: function trim() {
          return $trim(this);
        }
      });
      /***/
    },

    /***/
    "s5qY":
    /*!**************************************************************!*\
      !*** ./node_modules/core-js/modules/_validate-collection.js ***!
      \**************************************************************/

    /*! no static exports found */

    /***/
    function s5qY(module, exports, __webpack_require__) {
      var isObject = __webpack_require__(
      /*! ./_is-object */
      "0/R4");

      module.exports = function (it, TYPE) {
        if (!isObject(it) || it._t !== TYPE) throw TypeError('Incompatible receiver, ' + TYPE + ' required!');
        return it;
      };
      /***/

    },

    /***/
    "s5r0":
    /*!********************************************************************************************************!*\
      !*** ./node_modules/@angular-devkit/build-angular/node_modules/core-js/modules/es.number.is-finite.js ***!
      \********************************************************************************************************/

    /*! no static exports found */

    /***/
    function s5r0(module, exports, __webpack_require__) {
      var $ = __webpack_require__(
      /*! ../internals/export */
      "wA6s");

      var numberIsFinite = __webpack_require__(
      /*! ../internals/number-is-finite */
      "Yg8j"); // `Number.isFinite` method
      // https://tc39.es/ecma262/#sec-number.isfinite


      $({
        target: 'Number',
        stat: true
      }, {
        isFinite: numberIsFinite
      });
      /***/
    },

    /***/
    "s8qp":
    /*!***************************************************************************************************!*\
      !*** ./node_modules/@angular-devkit/build-angular/node_modules/core-js/internals/not-a-regexp.js ***!
      \***************************************************************************************************/

    /*! no static exports found */

    /***/
    function s8qp(module, exports, __webpack_require__) {
      var isRegExp = __webpack_require__(
      /*! ../internals/is-regexp */
      "1p6F");

      module.exports = function (it) {
        if (isRegExp(it)) {
          throw TypeError("The method doesn't accept regular expressions");
        }

        return it;
      };
      /***/

    },

    /***/
    "sQrk":
    /*!****************************************************************************************************!*\
      !*** ./node_modules/@angular-devkit/build-angular/node_modules/core-js/modules/es.array.splice.js ***!
      \****************************************************************************************************/

    /*! no static exports found */

    /***/
    function sQrk(module, exports, __webpack_require__) {
      "use strict";

      var $ = __webpack_require__(
      /*! ../internals/export */
      "wA6s");

      var toAbsoluteIndex = __webpack_require__(
      /*! ../internals/to-absolute-index */
      "7Oj1");

      var toInteger = __webpack_require__(
      /*! ../internals/to-integer */
      "vDBE");

      var toLength = __webpack_require__(
      /*! ../internals/to-length */
      "xpLY");

      var toObject = __webpack_require__(
      /*! ../internals/to-object */
      "VCQ8");

      var arraySpeciesCreate = __webpack_require__(
      /*! ../internals/array-species-create */
      "JafA");

      var createProperty = __webpack_require__(
      /*! ../internals/create-property */
      "DYg9");

      var arrayMethodHasSpeciesSupport = __webpack_require__(
      /*! ../internals/array-method-has-species-support */
      "lRyB");

      var arrayMethodUsesToLength = __webpack_require__(
      /*! ../internals/array-method-uses-to-length */
      "w2hq");

      var HAS_SPECIES_SUPPORT = arrayMethodHasSpeciesSupport('splice');
      var USES_TO_LENGTH = arrayMethodUsesToLength('splice', {
        ACCESSORS: true,
        0: 0,
        1: 2
      });
      var max = Math.max;
      var min = Math.min;
      var MAX_SAFE_INTEGER = 0x1FFFFFFFFFFFFF;
      var MAXIMUM_ALLOWED_LENGTH_EXCEEDED = 'Maximum allowed length exceeded'; // `Array.prototype.splice` method
      // https://tc39.es/ecma262/#sec-array.prototype.splice
      // with adding support of @@species

      $({
        target: 'Array',
        proto: true,
        forced: !HAS_SPECIES_SUPPORT || !USES_TO_LENGTH
      }, {
        splice: function splice(start, deleteCount
        /* , ...items */
        ) {
          var O = toObject(this);
          var len = toLength(O.length);
          var actualStart = toAbsoluteIndex(start, len);
          var argumentsLength = arguments.length;
          var insertCount, actualDeleteCount, A, k, from, to;

          if (argumentsLength === 0) {
            insertCount = actualDeleteCount = 0;
          } else if (argumentsLength === 1) {
            insertCount = 0;
            actualDeleteCount = len - actualStart;
          } else {
            insertCount = argumentsLength - 2;
            actualDeleteCount = min(max(toInteger(deleteCount), 0), len - actualStart);
          }

          if (len + insertCount - actualDeleteCount > MAX_SAFE_INTEGER) {
            throw TypeError(MAXIMUM_ALLOWED_LENGTH_EXCEEDED);
          }

          A = arraySpeciesCreate(O, actualDeleteCount);

          for (k = 0; k < actualDeleteCount; k++) {
            from = actualStart + k;
            if (from in O) createProperty(A, k, O[from]);
          }

          A.length = actualDeleteCount;

          if (insertCount < actualDeleteCount) {
            for (k = actualStart; k < len - actualDeleteCount; k++) {
              from = k + actualDeleteCount;
              to = k + insertCount;
              if (from in O) O[to] = O[from];else delete O[to];
            }

            for (k = len; k > len - actualDeleteCount + insertCount; k--) {
              delete O[k - 1];
            }
          } else if (insertCount > actualDeleteCount) {
            for (k = len - actualDeleteCount; k > actualStart; k--) {
              from = k + actualDeleteCount - 1;
              to = k + insertCount - 1;
              if (from in O) O[to] = O[from];else delete O[to];
            }
          }

          for (k = 0; k < insertCount; k++) {
            O[k + actualStart] = arguments[k + 2];
          }

          O.length = len - actualDeleteCount + insertCount;
          return A;
        }
      });
      /***/
    },

    /***/
    "shqn":
    /*!********************************************************************************************************!*\
      !*** ./node_modules/@angular-devkit/build-angular/node_modules/core-js/internals/set-to-string-tag.js ***!
      \********************************************************************************************************/

    /*! no static exports found */

    /***/
    function shqn(module, exports, __webpack_require__) {
      var defineProperty = __webpack_require__(
      /*! ../internals/object-define-property */
      "/Ybd").f;

      var has = __webpack_require__(
      /*! ../internals/has */
      "OG5q");

      var wellKnownSymbol = __webpack_require__(
      /*! ../internals/well-known-symbol */
      "m41k");

      var TO_STRING_TAG = wellKnownSymbol('toStringTag');

      module.exports = function (it, TAG, STATIC) {
        if (it && !has(it = STATIC ? it : it.prototype, TO_STRING_TAG)) {
          defineProperty(it, TO_STRING_TAG, {
            configurable: true,
            value: TAG
          });
        }
      };
      /***/

    },

    /***/
    "tNyX":
    /*!************************************************************************************************************!*\
      !*** ./node_modules/@angular-devkit/build-angular/node_modules/core-js/modules/es.string.code-point-at.js ***!
      \************************************************************************************************************/

    /*! no static exports found */

    /***/
    function tNyX(module, exports, __webpack_require__) {
      "use strict";

      var $ = __webpack_require__(
      /*! ../internals/export */
      "wA6s");

      var codeAt = __webpack_require__(
      /*! ../internals/string-multibyte */
      "G7bs").codeAt; // `String.prototype.codePointAt` method
      // https://tc39.es/ecma262/#sec-string.prototype.codepointat


      $({
        target: 'String',
        proto: true
      }, {
        codePointAt: function codePointAt(pos) {
          return codeAt(this, pos);
        }
      });
      /***/
    },

    /***/
    "tUdv":
    /*!*****************************************************************************************************!*\
      !*** ./node_modules/@angular-devkit/build-angular/node_modules/core-js/internals/indexed-object.js ***!
      \*****************************************************************************************************/

    /*! no static exports found */

    /***/
    function tUdv(module, exports, __webpack_require__) {
      var fails = __webpack_require__(
      /*! ../internals/fails */
      "rG8t");

      var classof = __webpack_require__(
      /*! ../internals/classof-raw */
      "ezU2");

      var split = ''.split; // fallback for non-array-like ES3 and non-enumerable old V8 strings

      module.exports = fails(function () {
        // throws an error in rhino, see https://github.com/mozilla/rhino/issues/346
        // eslint-disable-next-line no-prototype-builtins
        return !Object('z').propertyIsEnumerable(0);
      }) ? function (it) {
        return classof(it) == 'String' ? split.call(it, '') : Object(it);
      } : Object;
      /***/
    },

    /***/
    "tXU5":
    /*!******************************************************************************************!*\
      !*** ./node_modules/@angular-devkit/build-angular/node_modules/core-js/es/math/index.js ***!
      \******************************************************************************************/

    /*! no static exports found */

    /***/
    function tXU5(module, exports, __webpack_require__) {
      __webpack_require__(
      /*! ../../modules/es.math.acosh */
      "IXlp");

      __webpack_require__(
      /*! ../../modules/es.math.asinh */
      "3caY");

      __webpack_require__(
      /*! ../../modules/es.math.atanh */
      "8iOR");

      __webpack_require__(
      /*! ../../modules/es.math.cbrt */
      "D94X");

      __webpack_require__(
      /*! ../../modules/es.math.clz32 */
      "M1AK");

      __webpack_require__(
      /*! ../../modules/es.math.cosh */
      "S58s");

      __webpack_require__(
      /*! ../../modules/es.math.expm1 */
      "JhPs");

      __webpack_require__(
      /*! ../../modules/es.math.fround */
      "Pf6x");

      __webpack_require__(
      /*! ../../modules/es.math.hypot */
      "CwIO");

      __webpack_require__(
      /*! ../../modules/es.math.imul */
      "QFgE");

      __webpack_require__(
      /*! ../../modules/es.math.log10 */
      "WEpO");

      __webpack_require__(
      /*! ../../modules/es.math.log1p */
      "Djps");

      __webpack_require__(
      /*! ../../modules/es.math.log2 */
      "6oxo");

      __webpack_require__(
      /*! ../../modules/es.math.sign */
      "BnCb");

      __webpack_require__(
      /*! ../../modules/es.math.sinh */
      "n1Kw");

      __webpack_require__(
      /*! ../../modules/es.math.tanh */
      "aTTg");

      __webpack_require__(
      /*! ../../modules/es.math.to-string-tag */
      "OVXS");

      __webpack_require__(
      /*! ../../modules/es.math.trunc */
      "SdaC");

      var path = __webpack_require__(
      /*! ../../internals/path */
      "E7aN");

      module.exports = path.Math;
      /***/
    },

    /***/
    "tcQx":
    /*!************************************************************************************************************!*\
      !*** ./node_modules/@angular-devkit/build-angular/node_modules/core-js/internals/function-bind-context.js ***!
      \************************************************************************************************************/

    /*! no static exports found */

    /***/
    function tcQx(module, exports, __webpack_require__) {
      var aFunction = __webpack_require__(
      /*! ../internals/a-function */
      "Neub"); // optional / simple context binding


      module.exports = function (fn, that, length) {
        aFunction(fn);
        if (that === undefined) return fn;

        switch (length) {
          case 0:
            return function () {
              return fn.call(that);
            };

          case 1:
            return function (a) {
              return fn.call(that, a);
            };

          case 2:
            return function (a, b) {
              return fn.call(that, a, b);
            };

          case 3:
            return function (a, b, c) {
              return fn.call(that, a, b, c);
            };
        }

        return function ()
        /* ...args */
        {
          return fn.apply(that, arguments);
        };
      };
      /***/

    },

    /***/
    "tkWj":
    /*!*******************************************************************************************************!*\
      !*** ./node_modules/@angular-devkit/build-angular/node_modules/core-js/modules/es.string.iterator.js ***!
      \*******************************************************************************************************/

    /*! no static exports found */

    /***/
    function tkWj(module, exports, __webpack_require__) {
      "use strict";

      var charAt = __webpack_require__(
      /*! ../internals/string-multibyte */
      "G7bs").charAt;

      var InternalStateModule = __webpack_require__(
      /*! ../internals/internal-state */
      "XH/I");

      var defineIterator = __webpack_require__(
      /*! ../internals/define-iterator */
      "WijE");

      var STRING_ITERATOR = 'String Iterator';
      var setInternalState = InternalStateModule.set;
      var getInternalState = InternalStateModule.getterFor(STRING_ITERATOR); // `String.prototype[@@iterator]` method
      // https://tc39.es/ecma262/#sec-string.prototype-@@iterator

      defineIterator(String, 'String', function (iterated) {
        setInternalState(this, {
          type: STRING_ITERATOR,
          string: String(iterated),
          index: 0
        }); // `%StringIteratorPrototype%.next` method
        // https://tc39.es/ecma262/#sec-%stringiteratorprototype%.next
      }, function next() {
        var state = getInternalState(this);
        var string = state.string;
        var index = state.index;
        var point;
        if (index >= string.length) return {
          value: undefined,
          done: true
        };
        point = charAt(string, index);
        state.index += point.length;
        return {
          value: point,
          done: false
        };
      });
      /***/
    },

    /***/
    "tuHh":
    /*!****************************************************************************************************!*\
      !*** ./node_modules/@angular-devkit/build-angular/node_modules/core-js/internals/engine-is-ios.js ***!
      \****************************************************************************************************/

    /*! no static exports found */

    /***/
    function tuHh(module, exports, __webpack_require__) {
      var userAgent = __webpack_require__(
      /*! ../internals/engine-user-agent */
      "T/Kj");

      module.exports = /(iphone|ipod|ipad).*applewebkit/i.test(userAgent);
      /***/
    },

    /***/
    "u5Nv":
    /*!*************************************************************************************************!*\
      !*** ./node_modules/@angular-devkit/build-angular/node_modules/core-js/modules/es.object.is.js ***!
      \*************************************************************************************************/

    /*! no static exports found */

    /***/
    function u5Nv(module, exports, __webpack_require__) {
      var $ = __webpack_require__(
      /*! ../internals/export */
      "wA6s");

      var is = __webpack_require__(
      /*! ../internals/same-value */
      "EQZg"); // `Object.is` method
      // https://tc39.es/ecma262/#sec-object.is


      $({
        target: 'Object',
        stat: true
      }, {
        is: is
      });
      /***/
    },

    /***/
    "uAtd":
    /*!***********************************************************************!*\
      !*** ./node_modules/core-js/modules/es7.reflect.get-metadata-keys.js ***!
      \***********************************************************************/

    /*! no static exports found */

    /***/
    function uAtd(module, exports, __webpack_require__) {
      var Set = __webpack_require__(
      /*! ./es6.set */
      "T39b");

      var from = __webpack_require__(
      /*! ./_array-from-iterable */
      "Q3ne");

      var metadata = __webpack_require__(
      /*! ./_metadata */
      "N6cJ");

      var anObject = __webpack_require__(
      /*! ./_an-object */
      "y3w9");

      var getPrototypeOf = __webpack_require__(
      /*! ./_object-gpo */
      "OP3Y");

      var ordinaryOwnMetadataKeys = metadata.keys;
      var toMetaKey = metadata.key;

      var ordinaryMetadataKeys = function ordinaryMetadataKeys(O, P) {
        var oKeys = ordinaryOwnMetadataKeys(O, P);
        var parent = getPrototypeOf(O);
        if (parent === null) return oKeys;
        var pKeys = ordinaryMetadataKeys(parent, P);
        return pKeys.length ? oKeys.length ? from(new Set(oKeys.concat(pKeys))) : pKeys : oKeys;
      };

      metadata.exp({
        getMetadataKeys: function getMetadataKeys(target
        /* , targetKey */
        ) {
          return ordinaryMetadataKeys(anObject(target), arguments.length < 2 ? undefined : toMetaKey(arguments[1]));
        }
      });
      /***/
    },

    /***/
    "uKyN":
    /*!******************************************************************************************************!*\
      !*** ./node_modules/@angular-devkit/build-angular/node_modules/core-js/modules/es.symbol.species.js ***!
      \******************************************************************************************************/

    /*! no static exports found */

    /***/
    function uKyN(module, exports, __webpack_require__) {
      var defineWellKnownSymbol = __webpack_require__(
      /*! ../internals/define-well-known-symbol */
      "94Vg"); // `Symbol.species` well-known symbol
      // https://tc39.es/ecma262/#sec-symbol.species


      defineWellKnownSymbol('species');
      /***/
    },

    /***/
    "uSMZ":
    /*!*****************************************************************************************************************!*\
      !*** ./node_modules/@angular-devkit/build-angular/node_modules/core-js/internals/create-property-descriptor.js ***!
      \*****************************************************************************************************************/

    /*! no static exports found */

    /***/
    function uSMZ(module, exports) {
      module.exports = function (bitmap, value) {
        return {
          enumerable: !(bitmap & 1),
          configurable: !(bitmap & 2),
          writable: !(bitmap & 4),
          value: value
        };
      };
      /***/

    },

    /***/
    "unYP":
    /*!***********************************************************************************************************!*\
      !*** ./node_modules/@angular-devkit/build-angular/node_modules/core-js/internals/regexp-exec-abstract.js ***!
      \***********************************************************************************************************/

    /*! no static exports found */

    /***/
    function unYP(module, exports, __webpack_require__) {
      var classof = __webpack_require__(
      /*! ./classof-raw */
      "ezU2");

      var regexpExec = __webpack_require__(
      /*! ./regexp-exec */
      "qjkP"); // `RegExpExec` abstract operation
      // https://tc39.es/ecma262/#sec-regexpexec


      module.exports = function (R, S) {
        var exec = R.exec;

        if (typeof exec === 'function') {
          var result = exec.call(R, S);

          if (typeof result !== 'object') {
            throw TypeError('RegExp exec method returned something other than an Object or null');
          }

          return result;
        }

        if (classof(R) !== 'RegExp') {
          throw TypeError('RegExp#exec called on incompatible receiver');
        }

        return regexpExec.call(R, S);
      };
      /***/

    },

    /***/
    "uoca":
    /*!**************************************************************************************************!*\
      !*** ./node_modules/@angular-devkit/build-angular/node_modules/core-js/internals/create-html.js ***!
      \**************************************************************************************************/

    /*! no static exports found */

    /***/
    function uoca(module, exports, __webpack_require__) {
      var requireObjectCoercible = __webpack_require__(
      /*! ../internals/require-object-coercible */
      "hmpk");

      var quot = /"/g; // B.2.3.2.1 CreateHTML(string, tag, attribute, value)
      // https://tc39.es/ecma262/#sec-createhtml

      module.exports = function (string, tag, attribute, value) {
        var S = String(requireObjectCoercible(string));
        var p1 = '<' + tag;
        if (attribute !== '') p1 += ' ' + attribute + '="' + String(value).replace(quot, '&quot;') + '"';
        return p1 + '>' + S + '</' + tag + '>';
      };
      /***/

    },

    /***/
    "v5if":
    /*!******************************************************************************************************!*\
      !*** ./node_modules/@angular-devkit/build-angular/node_modules/core-js/modules/es.array.for-each.js ***!
      \******************************************************************************************************/

    /*! no static exports found */

    /***/
    function v5if(module, exports, __webpack_require__) {
      "use strict";

      var $ = __webpack_require__(
      /*! ../internals/export */
      "wA6s");

      var forEach = __webpack_require__(
      /*! ../internals/array-for-each */
      "nP0K"); // `Array.prototype.forEach` method
      // https://tc39.es/ecma262/#sec-array.prototype.foreach


      $({
        target: 'Array',
        proto: true,
        forced: [].forEach != forEach
      }, {
        forEach: forEach
      });
      /***/
    },

    /***/
    "vDBE":
    /*!*************************************************************************************************!*\
      !*** ./node_modules/@angular-devkit/build-angular/node_modules/core-js/internals/to-integer.js ***!
      \*************************************************************************************************/

    /*! no static exports found */

    /***/
    function vDBE(module, exports) {
      var ceil = Math.ceil;
      var floor = Math.floor; // `ToInteger` abstract operation
      // https://tc39.es/ecma262/#sec-tointeger

      module.exports = function (argument) {
        return isNaN(argument = +argument) ? 0 : (argument > 0 ? floor : ceil)(argument);
      };
      /***/

    },

    /***/
    "vRoz":
    /*!*******************************************************************************************!*\
      !*** ./node_modules/@angular-devkit/build-angular/node_modules/core-js/modules/es.map.js ***!
      \*******************************************************************************************/

    /*! no static exports found */

    /***/
    function vRoz(module, exports, __webpack_require__) {
      "use strict";

      var collection = __webpack_require__(
      /*! ../internals/collection */
      "wdMf");

      var collectionStrong = __webpack_require__(
      /*! ../internals/collection-strong */
      "nIH4"); // `Map` constructor
      // https://tc39.es/ecma262/#sec-map-objects


      module.exports = collection('Map', function (init) {
        return function Map() {
          return init(this, arguments.length ? arguments[0] : undefined);
        };
      }, collectionStrong);
      /***/
    },

    /***/
    "vVmn":
    /*!***********************************************************************************************************!*\
      !*** ./node_modules/@angular-devkit/build-angular/node_modules/core-js/internals/object-keys-internal.js ***!
      \***********************************************************************************************************/

    /*! no static exports found */

    /***/
    function vVmn(module, exports, __webpack_require__) {
      var has = __webpack_require__(
      /*! ../internals/has */
      "OG5q");

      var toIndexedObject = __webpack_require__(
      /*! ../internals/to-indexed-object */
      "EMtK");

      var indexOf = __webpack_require__(
      /*! ../internals/array-includes */
      "OXtp").indexOf;

      var hiddenKeys = __webpack_require__(
      /*! ../internals/hidden-keys */
      "yQMY");

      module.exports = function (object, names) {
        var O = toIndexedObject(object);
        var i = 0;
        var result = [];
        var key;

        for (key in O) {
          !has(hiddenKeys, key) && has(O, key) && result.push(key);
        } // Don't enum bug & hidden keys


        while (names.length > i) {
          if (has(O, key = names[i++])) {
            ~indexOf(result, key) || result.push(key);
          }
        }

        return result;
      };
      /***/

    },

    /***/
    "vZCr":
    /*!*********************************************************************************************************!*\
      !*** ./node_modules/@angular-devkit/build-angular/node_modules/core-js/internals/number-parse-float.js ***!
      \*********************************************************************************************************/

    /*! no static exports found */

    /***/
    function vZCr(module, exports, __webpack_require__) {
      var global = __webpack_require__(
      /*! ../internals/global */
      "ocAm");

      var trim = __webpack_require__(
      /*! ../internals/string-trim */
      "jnLS").trim;

      var whitespaces = __webpack_require__(
      /*! ../internals/whitespaces */
      "xFZC");

      var $parseFloat = global.parseFloat;
      var FORCED = 1 / $parseFloat(whitespaces + '-0') !== -Infinity; // `parseFloat` method
      // https://tc39.es/ecma262/#sec-parsefloat-string

      module.exports = FORCED ? function parseFloat(string) {
        var trimmedString = trim(String(string));
        var result = $parseFloat(trimmedString);
        return result === 0 && trimmedString.charAt(0) == '-' ? -0 : result;
      } : $parseFloat;
      /***/
    },

    /***/
    "vhPU":
    /*!**************************************************!*\
      !*** ./node_modules/core-js/modules/_defined.js ***!
      \**************************************************/

    /*! no static exports found */

    /***/
    function vhPU(module, exports) {
      // 7.2.1 RequireObjectCoercible(argument)
      module.exports = function (it) {
        if (it == undefined) throw TypeError("Can't call method on  " + it);
        return it;
      };
      /***/

    },

    /***/
    "vipS":
    /*!********************************************************************************************************!*\
      !*** ./node_modules/@angular-devkit/build-angular/node_modules/core-js/modules/es.string.ends-with.js ***!
      \********************************************************************************************************/

    /*! no static exports found */

    /***/
    function vipS(module, exports, __webpack_require__) {
      "use strict";

      var $ = __webpack_require__(
      /*! ../internals/export */
      "wA6s");

      var getOwnPropertyDescriptor = __webpack_require__(
      /*! ../internals/object-get-own-property-descriptor */
      "7gGY").f;

      var toLength = __webpack_require__(
      /*! ../internals/to-length */
      "xpLY");

      var notARegExp = __webpack_require__(
      /*! ../internals/not-a-regexp */
      "s8qp");

      var requireObjectCoercible = __webpack_require__(
      /*! ../internals/require-object-coercible */
      "hmpk");

      var correctIsRegExpLogic = __webpack_require__(
      /*! ../internals/correct-is-regexp-logic */
      "0Ds2");

      var IS_PURE = __webpack_require__(
      /*! ../internals/is-pure */
      "g9hI");

      var nativeEndsWith = ''.endsWith;
      var min = Math.min;
      var CORRECT_IS_REGEXP_LOGIC = correctIsRegExpLogic('endsWith'); // https://github.com/zloirock/core-js/pull/702

      var MDN_POLYFILL_BUG = !IS_PURE && !CORRECT_IS_REGEXP_LOGIC && !!function () {
        var descriptor = getOwnPropertyDescriptor(String.prototype, 'endsWith');
        return descriptor && !descriptor.writable;
      }(); // `String.prototype.endsWith` method
      // https://tc39.es/ecma262/#sec-string.prototype.endswith

      $({
        target: 'String',
        proto: true,
        forced: !MDN_POLYFILL_BUG && !CORRECT_IS_REGEXP_LOGIC
      }, {
        endsWith: function endsWith(searchString
        /* , endPosition = @length */
        ) {
          var that = String(requireObjectCoercible(this));
          notARegExp(searchString);
          var endPosition = arguments.length > 1 ? arguments[1] : undefined;
          var len = toLength(that.length);
          var end = endPosition === undefined ? len : min(toLength(endPosition), len);
          var search = String(searchString);
          return nativeEndsWith ? nativeEndsWith.call(that, search, end) : that.slice(end - search.length, end) === search;
        }
      });
      /***/
    },

    /***/
    "voQr":
    /*!*********************************************************************************!*\
      !*** ./node_modules/@angular-devkit/build-angular/src/webpack/es5-polyfills.js ***!
      \*********************************************************************************/

    /*! no exports provided */

    /***/
    function voQr(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony import */


      var core_js_es_symbol__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! core-js/es/symbol */
      "LRWt");
      /* harmony import */


      var core_js_es_symbol__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(core_js_es_symbol__WEBPACK_IMPORTED_MODULE_0__);
      /* harmony import */


      var core_js_modules_es_function_bind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! core-js/modules/es.function.bind */
      "mA9f");
      /* harmony import */


      var core_js_modules_es_function_bind__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_function_bind__WEBPACK_IMPORTED_MODULE_1__);
      /* harmony import */


      var core_js_modules_es_function_name__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! core-js/modules/es.function.name */
      "MjoC");
      /* harmony import */


      var core_js_modules_es_function_name__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_function_name__WEBPACK_IMPORTED_MODULE_2__);
      /* harmony import */


      var core_js_modules_es_function_has_instance__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
      /*! core-js/modules/es.function.has-instance */
      "3vMK");
      /* harmony import */


      var core_js_modules_es_function_has_instance__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_function_has_instance__WEBPACK_IMPORTED_MODULE_3__);
      /* harmony import */


      var core_js_modules_es_object_create__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
      /*! core-js/modules/es.object.create */
      "RCvO");
      /* harmony import */


      var core_js_modules_es_object_create__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_create__WEBPACK_IMPORTED_MODULE_4__);
      /* harmony import */


      var core_js_modules_es_object_define_property__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(
      /*! core-js/modules/es.object.define-property */
      "cJLW");
      /* harmony import */


      var core_js_modules_es_object_define_property__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_define_property__WEBPACK_IMPORTED_MODULE_5__);
      /* harmony import */


      var core_js_modules_es_object_define_properties__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(
      /*! core-js/modules/es.object.define-properties */
      "EntM");
      /* harmony import */


      var core_js_modules_es_object_define_properties__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_define_properties__WEBPACK_IMPORTED_MODULE_6__);
      /* harmony import */


      var core_js_modules_es_object_get_own_property_descriptor__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(
      /*! core-js/modules/es.object.get-own-property-descriptor */
      "znfk");
      /* harmony import */


      var core_js_modules_es_object_get_own_property_descriptor__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_get_own_property_descriptor__WEBPACK_IMPORTED_MODULE_7__);
      /* harmony import */


      var core_js_modules_es_object_get_prototype_of__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(
      /*! core-js/modules/es.object.get-prototype-of */
      "A7hN");
      /* harmony import */


      var core_js_modules_es_object_get_prototype_of__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_get_prototype_of__WEBPACK_IMPORTED_MODULE_8__);
      /* harmony import */


      var core_js_modules_es_object_keys__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(
      /*! core-js/modules/es.object.keys */
      "wqfI");
      /* harmony import */


      var core_js_modules_es_object_keys__WEBPACK_IMPORTED_MODULE_9___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_keys__WEBPACK_IMPORTED_MODULE_9__);
      /* harmony import */


      var core_js_modules_es_object_get_own_property_names__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(
      /*! core-js/modules/es.object.get-own-property-names */
      "g69M");
      /* harmony import */


      var core_js_modules_es_object_get_own_property_names__WEBPACK_IMPORTED_MODULE_10___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_get_own_property_names__WEBPACK_IMPORTED_MODULE_10__);
      /* harmony import */


      var core_js_modules_es_object_freeze__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(
      /*! core-js/modules/es.object.freeze */
      "IzYO");
      /* harmony import */


      var core_js_modules_es_object_freeze__WEBPACK_IMPORTED_MODULE_11___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_freeze__WEBPACK_IMPORTED_MODULE_11__);
      /* harmony import */


      var core_js_modules_es_object_seal__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(
      /*! core-js/modules/es.object.seal */
      "+5Eg");
      /* harmony import */


      var core_js_modules_es_object_seal__WEBPACK_IMPORTED_MODULE_12___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_seal__WEBPACK_IMPORTED_MODULE_12__);
      /* harmony import */


      var core_js_modules_es_object_prevent_extensions__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(
      /*! core-js/modules/es.object.prevent-extensions */
      "WLa2");
      /* harmony import */


      var core_js_modules_es_object_prevent_extensions__WEBPACK_IMPORTED_MODULE_13___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_prevent_extensions__WEBPACK_IMPORTED_MODULE_13__);
      /* harmony import */


      var core_js_modules_es_object_is_frozen__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(
      /*! core-js/modules/es.object.is-frozen */
      "KMug");
      /* harmony import */


      var core_js_modules_es_object_is_frozen__WEBPACK_IMPORTED_MODULE_14___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_is_frozen__WEBPACK_IMPORTED_MODULE_14__);
      /* harmony import */


      var core_js_modules_es_object_is_sealed__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(
      /*! core-js/modules/es.object.is-sealed */
      "QVG+");
      /* harmony import */


      var core_js_modules_es_object_is_sealed__WEBPACK_IMPORTED_MODULE_15___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_is_sealed__WEBPACK_IMPORTED_MODULE_15__);
      /* harmony import */


      var core_js_modules_es_object_is_extensible__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(
      /*! core-js/modules/es.object.is-extensible */
      "wVAr");
      /* harmony import */


      var core_js_modules_es_object_is_extensible__WEBPACK_IMPORTED_MODULE_16___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_is_extensible__WEBPACK_IMPORTED_MODULE_16__);
      /* harmony import */


      var core_js_modules_es_object_assign__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(
      /*! core-js/modules/es.object.assign */
      "nuqZ");
      /* harmony import */


      var core_js_modules_es_object_assign__WEBPACK_IMPORTED_MODULE_17___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_assign__WEBPACK_IMPORTED_MODULE_17__);
      /* harmony import */


      var core_js_modules_es_object_is__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(
      /*! core-js/modules/es.object.is */
      "u5Nv");
      /* harmony import */


      var core_js_modules_es_object_is__WEBPACK_IMPORTED_MODULE_18___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_is__WEBPACK_IMPORTED_MODULE_18__);
      /* harmony import */


      var core_js_modules_es_object_set_prototype_of__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(
      /*! core-js/modules/es.object.set-prototype-of */
      "WnNu");
      /* harmony import */


      var core_js_modules_es_object_set_prototype_of__WEBPACK_IMPORTED_MODULE_19___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_set_prototype_of__WEBPACK_IMPORTED_MODULE_19__);
      /* harmony import */


      var core_js_modules_es_object_to_string__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(
      /*! core-js/modules/es.object.to-string */
      "NX+v");
      /* harmony import */


      var core_js_modules_es_object_to_string__WEBPACK_IMPORTED_MODULE_20___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_to_string__WEBPACK_IMPORTED_MODULE_20__);
      /* harmony import */


      var core_js_modules_es_object_entries__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(
      /*! core-js/modules/es.object.entries */
      "n9Wl");
      /* harmony import */


      var core_js_modules_es_object_entries__WEBPACK_IMPORTED_MODULE_21___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_entries__WEBPACK_IMPORTED_MODULE_21__);
      /* harmony import */


      var core_js_modules_es_object_values__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(
      /*! core-js/modules/es.object.values */
      "gQgS");
      /* harmony import */


      var core_js_modules_es_object_values__WEBPACK_IMPORTED_MODULE_22___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_values__WEBPACK_IMPORTED_MODULE_22__);
      /* harmony import */


      var core_js_modules_es_object_get_own_property_descriptors__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(
      /*! core-js/modules/es.object.get-own-property-descriptors */
      "e271");
      /* harmony import */


      var core_js_modules_es_object_get_own_property_descriptors__WEBPACK_IMPORTED_MODULE_23___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_get_own_property_descriptors__WEBPACK_IMPORTED_MODULE_23__);
      /* harmony import */


      var core_js_modules_es_object_from_entries__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(
      /*! core-js/modules/es.object.from-entries */
      "OOEz");
      /* harmony import */


      var core_js_modules_es_object_from_entries__WEBPACK_IMPORTED_MODULE_24___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_from_entries__WEBPACK_IMPORTED_MODULE_24__);
      /* harmony import */


      var core_js_modules_es_array_concat__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(
      /*! core-js/modules/es.array.concat */
      "F4rZ");
      /* harmony import */


      var core_js_modules_es_array_concat__WEBPACK_IMPORTED_MODULE_25___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_concat__WEBPACK_IMPORTED_MODULE_25__);
      /* harmony import */


      var core_js_modules_es_array_is_array__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(
      /*! core-js/modules/es.array.is-array */
      "wZP2");
      /* harmony import */


      var core_js_modules_es_array_is_array__WEBPACK_IMPORTED_MODULE_26___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_is_array__WEBPACK_IMPORTED_MODULE_26__);
      /* harmony import */


      var core_js_modules_es_array_from__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(
      /*! core-js/modules/es.array.from */
      "m2tE");
      /* harmony import */


      var core_js_modules_es_array_from__WEBPACK_IMPORTED_MODULE_27___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_from__WEBPACK_IMPORTED_MODULE_27__);
      /* harmony import */


      var core_js_modules_es_array_of__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(
      /*! core-js/modules/es.array.of */
      "BcWx");
      /* harmony import */


      var core_js_modules_es_array_of__WEBPACK_IMPORTED_MODULE_28___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_of__WEBPACK_IMPORTED_MODULE_28__);
      /* harmony import */


      var core_js_modules_es_array_join__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(
      /*! core-js/modules/es.array.join */
      "ntzx");
      /* harmony import */


      var core_js_modules_es_array_join__WEBPACK_IMPORTED_MODULE_29___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_join__WEBPACK_IMPORTED_MODULE_29__);
      /* harmony import */


      var core_js_modules_es_array_slice__WEBPACK_IMPORTED_MODULE_30__ = __webpack_require__(
      /*! core-js/modules/es.array.slice */
      "6q6p");
      /* harmony import */


      var core_js_modules_es_array_slice__WEBPACK_IMPORTED_MODULE_30___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_slice__WEBPACK_IMPORTED_MODULE_30__);
      /* harmony import */


      var core_js_modules_es_array_splice__WEBPACK_IMPORTED_MODULE_31__ = __webpack_require__(
      /*! core-js/modules/es.array.splice */
      "sQrk");
      /* harmony import */


      var core_js_modules_es_array_splice__WEBPACK_IMPORTED_MODULE_31___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_splice__WEBPACK_IMPORTED_MODULE_31__);
      /* harmony import */


      var core_js_modules_es_array_sort__WEBPACK_IMPORTED_MODULE_32__ = __webpack_require__(
      /*! core-js/modules/es.array.sort */
      "6fhQ");
      /* harmony import */


      var core_js_modules_es_array_sort__WEBPACK_IMPORTED_MODULE_32___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_sort__WEBPACK_IMPORTED_MODULE_32__);
      /* harmony import */


      var core_js_modules_es_array_for_each__WEBPACK_IMPORTED_MODULE_33__ = __webpack_require__(
      /*! core-js/modules/es.array.for-each */
      "v5if");
      /* harmony import */


      var core_js_modules_es_array_for_each__WEBPACK_IMPORTED_MODULE_33___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_for_each__WEBPACK_IMPORTED_MODULE_33__);
      /* harmony import */


      var core_js_modules_es_array_map__WEBPACK_IMPORTED_MODULE_34__ = __webpack_require__(
      /*! core-js/modules/es.array.map */
      "FU1i");
      /* harmony import */


      var core_js_modules_es_array_map__WEBPACK_IMPORTED_MODULE_34___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_map__WEBPACK_IMPORTED_MODULE_34__);
      /* harmony import */


      var core_js_modules_es_array_filter__WEBPACK_IMPORTED_MODULE_35__ = __webpack_require__(
      /*! core-js/modules/es.array.filter */
      "gke3");
      /* harmony import */


      var core_js_modules_es_array_filter__WEBPACK_IMPORTED_MODULE_35___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_filter__WEBPACK_IMPORTED_MODULE_35__);
      /* harmony import */


      var core_js_modules_es_array_some__WEBPACK_IMPORTED_MODULE_36__ = __webpack_require__(
      /*! core-js/modules/es.array.some */
      "XEin");
      /* harmony import */


      var core_js_modules_es_array_some__WEBPACK_IMPORTED_MODULE_36___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_some__WEBPACK_IMPORTED_MODULE_36__);
      /* harmony import */


      var core_js_modules_es_array_every__WEBPACK_IMPORTED_MODULE_37__ = __webpack_require__(
      /*! core-js/modules/es.array.every */
      "FeI/");
      /* harmony import */


      var core_js_modules_es_array_every__WEBPACK_IMPORTED_MODULE_37___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_every__WEBPACK_IMPORTED_MODULE_37__);
      /* harmony import */


      var core_js_modules_es_array_reduce__WEBPACK_IMPORTED_MODULE_38__ = __webpack_require__(
      /*! core-js/modules/es.array.reduce */
      "Q4jj");
      /* harmony import */


      var core_js_modules_es_array_reduce__WEBPACK_IMPORTED_MODULE_38___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_reduce__WEBPACK_IMPORTED_MODULE_38__);
      /* harmony import */


      var core_js_modules_es_array_reduce_right__WEBPACK_IMPORTED_MODULE_39__ = __webpack_require__(
      /*! core-js/modules/es.array.reduce-right */
      "IQbc");
      /* harmony import */


      var core_js_modules_es_array_reduce_right__WEBPACK_IMPORTED_MODULE_39___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_reduce_right__WEBPACK_IMPORTED_MODULE_39__);
      /* harmony import */


      var core_js_modules_es_array_index_of__WEBPACK_IMPORTED_MODULE_40__ = __webpack_require__(
      /*! core-js/modules/es.array.index-of */
      "6lQQ");
      /* harmony import */


      var core_js_modules_es_array_index_of__WEBPACK_IMPORTED_MODULE_40___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_index_of__WEBPACK_IMPORTED_MODULE_40__);
      /* harmony import */


      var core_js_modules_es_array_last_index_of__WEBPACK_IMPORTED_MODULE_41__ = __webpack_require__(
      /*! core-js/modules/es.array.last-index-of */
      "Xm88");
      /* harmony import */


      var core_js_modules_es_array_last_index_of__WEBPACK_IMPORTED_MODULE_41___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_last_index_of__WEBPACK_IMPORTED_MODULE_41__);
      /* harmony import */


      var core_js_modules_es_array_copy_within__WEBPACK_IMPORTED_MODULE_42__ = __webpack_require__(
      /*! core-js/modules/es.array.copy-within */
      "kP9Y");
      /* harmony import */


      var core_js_modules_es_array_copy_within__WEBPACK_IMPORTED_MODULE_42___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_copy_within__WEBPACK_IMPORTED_MODULE_42__);
      /* harmony import */


      var core_js_modules_es_array_fill__WEBPACK_IMPORTED_MODULE_43__ = __webpack_require__(
      /*! core-js/modules/es.array.fill */
      "DscF");
      /* harmony import */


      var core_js_modules_es_array_fill__WEBPACK_IMPORTED_MODULE_43___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_fill__WEBPACK_IMPORTED_MODULE_43__);
      /* harmony import */


      var core_js_modules_es_array_find__WEBPACK_IMPORTED_MODULE_44__ = __webpack_require__(
      /*! core-js/modules/es.array.find */
      "6CEi");
      /* harmony import */


      var core_js_modules_es_array_find__WEBPACK_IMPORTED_MODULE_44___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_find__WEBPACK_IMPORTED_MODULE_44__);
      /* harmony import */


      var core_js_modules_es_array_find_index__WEBPACK_IMPORTED_MODULE_45__ = __webpack_require__(
      /*! core-js/modules/es.array.find-index */
      "Jt/z");
      /* harmony import */


      var core_js_modules_es_array_find_index__WEBPACK_IMPORTED_MODULE_45___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_find_index__WEBPACK_IMPORTED_MODULE_45__);
      /* harmony import */


      var core_js_modules_es_array_iterator__WEBPACK_IMPORTED_MODULE_46__ = __webpack_require__(
      /*! core-js/modules/es.array.iterator */
      "rH3X");
      /* harmony import */


      var core_js_modules_es_array_iterator__WEBPACK_IMPORTED_MODULE_46___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_iterator__WEBPACK_IMPORTED_MODULE_46__);
      /* harmony import */


      var core_js_modules_es_array_includes__WEBPACK_IMPORTED_MODULE_47__ = __webpack_require__(
      /*! core-js/modules/es.array.includes */
      "eC89");
      /* harmony import */


      var core_js_modules_es_array_includes__WEBPACK_IMPORTED_MODULE_47___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_includes__WEBPACK_IMPORTED_MODULE_47__);
      /* harmony import */


      var core_js_modules_es_array_flat__WEBPACK_IMPORTED_MODULE_48__ = __webpack_require__(
      /*! core-js/modules/es.array.flat */
      "68Yi");
      /* harmony import */


      var core_js_modules_es_array_flat__WEBPACK_IMPORTED_MODULE_48___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_flat__WEBPACK_IMPORTED_MODULE_48__);
      /* harmony import */


      var core_js_modules_es_array_flat_map__WEBPACK_IMPORTED_MODULE_49__ = __webpack_require__(
      /*! core-js/modules/es.array.flat-map */
      "54C3");
      /* harmony import */


      var core_js_modules_es_array_flat_map__WEBPACK_IMPORTED_MODULE_49___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_flat_map__WEBPACK_IMPORTED_MODULE_49__);
      /* harmony import */


      var core_js_modules_es_string_from_code_point__WEBPACK_IMPORTED_MODULE_50__ = __webpack_require__(
      /*! core-js/modules/es.string.from-code-point */
      "r8F+");
      /* harmony import */


      var core_js_modules_es_string_from_code_point__WEBPACK_IMPORTED_MODULE_50___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_string_from_code_point__WEBPACK_IMPORTED_MODULE_50__);
      /* harmony import */


      var core_js_modules_es_string_raw__WEBPACK_IMPORTED_MODULE_51__ = __webpack_require__(
      /*! core-js/modules/es.string.raw */
      "IPby");
      /* harmony import */


      var core_js_modules_es_string_raw__WEBPACK_IMPORTED_MODULE_51___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_string_raw__WEBPACK_IMPORTED_MODULE_51__);
      /* harmony import */


      var core_js_modules_es_string_trim__WEBPACK_IMPORTED_MODULE_52__ = __webpack_require__(
      /*! core-js/modules/es.string.trim */
      "s1IR");
      /* harmony import */


      var core_js_modules_es_string_trim__WEBPACK_IMPORTED_MODULE_52___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_string_trim__WEBPACK_IMPORTED_MODULE_52__);
      /* harmony import */


      var core_js_modules_es_string_iterator__WEBPACK_IMPORTED_MODULE_53__ = __webpack_require__(
      /*! core-js/modules/es.string.iterator */
      "tkWj");
      /* harmony import */


      var core_js_modules_es_string_iterator__WEBPACK_IMPORTED_MODULE_53___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_string_iterator__WEBPACK_IMPORTED_MODULE_53__);
      /* harmony import */


      var core_js_modules_es_string_code_point_at__WEBPACK_IMPORTED_MODULE_54__ = __webpack_require__(
      /*! core-js/modules/es.string.code-point-at */
      "tNyX");
      /* harmony import */


      var core_js_modules_es_string_code_point_at__WEBPACK_IMPORTED_MODULE_54___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_string_code_point_at__WEBPACK_IMPORTED_MODULE_54__);
      /* harmony import */


      var core_js_modules_es_string_ends_with__WEBPACK_IMPORTED_MODULE_55__ = __webpack_require__(
      /*! core-js/modules/es.string.ends-with */
      "vipS");
      /* harmony import */


      var core_js_modules_es_string_ends_with__WEBPACK_IMPORTED_MODULE_55___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_string_ends_with__WEBPACK_IMPORTED_MODULE_55__);
      /* harmony import */


      var core_js_modules_es_string_includes__WEBPACK_IMPORTED_MODULE_56__ = __webpack_require__(
      /*! core-js/modules/es.string.includes */
      "L4l2");
      /* harmony import */


      var core_js_modules_es_string_includes__WEBPACK_IMPORTED_MODULE_56___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_string_includes__WEBPACK_IMPORTED_MODULE_56__);
      /* harmony import */


      var core_js_modules_es_string_repeat__WEBPACK_IMPORTED_MODULE_57__ = __webpack_require__(
      /*! core-js/modules/es.string.repeat */
      "BaTD");
      /* harmony import */


      var core_js_modules_es_string_repeat__WEBPACK_IMPORTED_MODULE_57___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_string_repeat__WEBPACK_IMPORTED_MODULE_57__);
      /* harmony import */


      var core_js_modules_es_string_starts_with__WEBPACK_IMPORTED_MODULE_58__ = __webpack_require__(
      /*! core-js/modules/es.string.starts-with */
      "oatR");
      /* harmony import */


      var core_js_modules_es_string_starts_with__WEBPACK_IMPORTED_MODULE_58___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_string_starts_with__WEBPACK_IMPORTED_MODULE_58__);
      /* harmony import */


      var core_js_modules_es_string_anchor__WEBPACK_IMPORTED_MODULE_59__ = __webpack_require__(
      /*! core-js/modules/es.string.anchor */
      "QUoj");
      /* harmony import */


      var core_js_modules_es_string_anchor__WEBPACK_IMPORTED_MODULE_59___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_string_anchor__WEBPACK_IMPORTED_MODULE_59__);
      /* harmony import */


      var core_js_modules_es_string_big__WEBPACK_IMPORTED_MODULE_60__ = __webpack_require__(
      /*! core-js/modules/es.string.big */
      "gXAK");
      /* harmony import */


      var core_js_modules_es_string_big__WEBPACK_IMPORTED_MODULE_60___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_string_big__WEBPACK_IMPORTED_MODULE_60__);
      /* harmony import */


      var core_js_modules_es_string_blink__WEBPACK_IMPORTED_MODULE_61__ = __webpack_require__(
      /*! core-js/modules/es.string.blink */
      "4axp");
      /* harmony import */


      var core_js_modules_es_string_blink__WEBPACK_IMPORTED_MODULE_61___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_string_blink__WEBPACK_IMPORTED_MODULE_61__);
      /* harmony import */


      var core_js_modules_es_string_bold__WEBPACK_IMPORTED_MODULE_62__ = __webpack_require__(
      /*! core-js/modules/es.string.bold */
      "Yu3F");
      /* harmony import */


      var core_js_modules_es_string_bold__WEBPACK_IMPORTED_MODULE_62___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_string_bold__WEBPACK_IMPORTED_MODULE_62__);
      /* harmony import */


      var core_js_modules_es_string_fixed__WEBPACK_IMPORTED_MODULE_63__ = __webpack_require__(
      /*! core-js/modules/es.string.fixed */
      "J4zY");
      /* harmony import */


      var core_js_modules_es_string_fixed__WEBPACK_IMPORTED_MODULE_63___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_string_fixed__WEBPACK_IMPORTED_MODULE_63__);
      /* harmony import */


      var core_js_modules_es_string_fontcolor__WEBPACK_IMPORTED_MODULE_64__ = __webpack_require__(
      /*! core-js/modules/es.string.fontcolor */
      "WKvG");
      /* harmony import */


      var core_js_modules_es_string_fontcolor__WEBPACK_IMPORTED_MODULE_64___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_string_fontcolor__WEBPACK_IMPORTED_MODULE_64__);
      /* harmony import */


      var core_js_modules_es_string_fontsize__WEBPACK_IMPORTED_MODULE_65__ = __webpack_require__(
      /*! core-js/modules/es.string.fontsize */
      "W0ke");
      /* harmony import */


      var core_js_modules_es_string_fontsize__WEBPACK_IMPORTED_MODULE_65___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_string_fontsize__WEBPACK_IMPORTED_MODULE_65__);
      /* harmony import */


      var core_js_modules_es_string_italics__WEBPACK_IMPORTED_MODULE_66__ = __webpack_require__(
      /*! core-js/modules/es.string.italics */
      "zTQA");
      /* harmony import */


      var core_js_modules_es_string_italics__WEBPACK_IMPORTED_MODULE_66___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_string_italics__WEBPACK_IMPORTED_MODULE_66__);
      /* harmony import */


      var core_js_modules_es_string_link__WEBPACK_IMPORTED_MODULE_67__ = __webpack_require__(
      /*! core-js/modules/es.string.link */
      "WEX0");
      /* harmony import */


      var core_js_modules_es_string_link__WEBPACK_IMPORTED_MODULE_67___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_string_link__WEBPACK_IMPORTED_MODULE_67__);
      /* harmony import */


      var core_js_modules_es_string_small__WEBPACK_IMPORTED_MODULE_68__ = __webpack_require__(
      /*! core-js/modules/es.string.small */
      "qpIG");
      /* harmony import */


      var core_js_modules_es_string_small__WEBPACK_IMPORTED_MODULE_68___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_string_small__WEBPACK_IMPORTED_MODULE_68__);
      /* harmony import */


      var core_js_modules_es_string_strike__WEBPACK_IMPORTED_MODULE_69__ = __webpack_require__(
      /*! core-js/modules/es.string.strike */
      "VmbE");
      /* harmony import */


      var core_js_modules_es_string_strike__WEBPACK_IMPORTED_MODULE_69___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_string_strike__WEBPACK_IMPORTED_MODULE_69__);
      /* harmony import */


      var core_js_modules_es_string_sub__WEBPACK_IMPORTED_MODULE_70__ = __webpack_require__(
      /*! core-js/modules/es.string.sub */
      "4Kt7");
      /* harmony import */


      var core_js_modules_es_string_sub__WEBPACK_IMPORTED_MODULE_70___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_string_sub__WEBPACK_IMPORTED_MODULE_70__);
      /* harmony import */


      var core_js_modules_es_string_sup__WEBPACK_IMPORTED_MODULE_71__ = __webpack_require__(
      /*! core-js/modules/es.string.sup */
      "dI74");
      /* harmony import */


      var core_js_modules_es_string_sup__WEBPACK_IMPORTED_MODULE_71___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_string_sup__WEBPACK_IMPORTED_MODULE_71__);
      /* harmony import */


      var core_js_modules_es_string_match__WEBPACK_IMPORTED_MODULE_72__ = __webpack_require__(
      /*! core-js/modules/es.string.match */
      "K1Z7");
      /* harmony import */


      var core_js_modules_es_string_match__WEBPACK_IMPORTED_MODULE_72___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_string_match__WEBPACK_IMPORTED_MODULE_72__);
      /* harmony import */


      var core_js_modules_es_string_replace__WEBPACK_IMPORTED_MODULE_73__ = __webpack_require__(
      /*! core-js/modules/es.string.replace */
      "S3Yw");
      /* harmony import */


      var core_js_modules_es_string_replace__WEBPACK_IMPORTED_MODULE_73___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_string_replace__WEBPACK_IMPORTED_MODULE_73__);
      /* harmony import */


      var core_js_modules_es_string_search__WEBPACK_IMPORTED_MODULE_74__ = __webpack_require__(
      /*! core-js/modules/es.string.search */
      "fMvl");
      /* harmony import */


      var core_js_modules_es_string_search__WEBPACK_IMPORTED_MODULE_74___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_string_search__WEBPACK_IMPORTED_MODULE_74__);
      /* harmony import */


      var core_js_modules_es_string_split__WEBPACK_IMPORTED_MODULE_75__ = __webpack_require__(
      /*! core-js/modules/es.string.split */
      "PmIt");
      /* harmony import */


      var core_js_modules_es_string_split__WEBPACK_IMPORTED_MODULE_75___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_string_split__WEBPACK_IMPORTED_MODULE_75__);
      /* harmony import */


      var core_js_modules_es_parse_int__WEBPACK_IMPORTED_MODULE_76__ = __webpack_require__(
      /*! core-js/modules/es.parse-int */
      "PbJR");
      /* harmony import */


      var core_js_modules_es_parse_int__WEBPACK_IMPORTED_MODULE_76___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_parse_int__WEBPACK_IMPORTED_MODULE_76__);
      /* harmony import */


      var core_js_modules_es_parse_float__WEBPACK_IMPORTED_MODULE_77__ = __webpack_require__(
      /*! core-js/modules/es.parse-float */
      "Ay+M");
      /* harmony import */


      var core_js_modules_es_parse_float__WEBPACK_IMPORTED_MODULE_77___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_parse_float__WEBPACK_IMPORTED_MODULE_77__);
      /* harmony import */


      var core_js_es_number__WEBPACK_IMPORTED_MODULE_78__ = __webpack_require__(
      /*! core-js/es/number */
      "qaQR");
      /* harmony import */


      var core_js_es_number__WEBPACK_IMPORTED_MODULE_78___default = /*#__PURE__*/__webpack_require__.n(core_js_es_number__WEBPACK_IMPORTED_MODULE_78__);
      /* harmony import */


      var core_js_es_math__WEBPACK_IMPORTED_MODULE_79__ = __webpack_require__(
      /*! core-js/es/math */
      "tXU5");
      /* harmony import */


      var core_js_es_math__WEBPACK_IMPORTED_MODULE_79___default = /*#__PURE__*/__webpack_require__.n(core_js_es_math__WEBPACK_IMPORTED_MODULE_79__);
      /* harmony import */


      var core_js_es_date__WEBPACK_IMPORTED_MODULE_80__ = __webpack_require__(
      /*! core-js/es/date */
      "lPAZ");
      /* harmony import */


      var core_js_es_date__WEBPACK_IMPORTED_MODULE_80___default = /*#__PURE__*/__webpack_require__.n(core_js_es_date__WEBPACK_IMPORTED_MODULE_80__);
      /* harmony import */


      var core_js_modules_es_regexp_constructor__WEBPACK_IMPORTED_MODULE_81__ = __webpack_require__(
      /*! core-js/modules/es.regexp.constructor */
      "T4tC");
      /* harmony import */


      var core_js_modules_es_regexp_constructor__WEBPACK_IMPORTED_MODULE_81___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_regexp_constructor__WEBPACK_IMPORTED_MODULE_81__);
      /* harmony import */


      var core_js_modules_es_regexp_to_string__WEBPACK_IMPORTED_MODULE_82__ = __webpack_require__(
      /*! core-js/modules/es.regexp.to-string */
      "Rj+b");
      /* harmony import */


      var core_js_modules_es_regexp_to_string__WEBPACK_IMPORTED_MODULE_82___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_regexp_to_string__WEBPACK_IMPORTED_MODULE_82__);
      /* harmony import */


      var core_js_modules_es_regexp_flags__WEBPACK_IMPORTED_MODULE_83__ = __webpack_require__(
      /*! core-js/modules/es.regexp.flags */
      "pWza");
      /* harmony import */


      var core_js_modules_es_regexp_flags__WEBPACK_IMPORTED_MODULE_83___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_regexp_flags__WEBPACK_IMPORTED_MODULE_83__);
      /* harmony import */


      var core_js_modules_es_map__WEBPACK_IMPORTED_MODULE_84__ = __webpack_require__(
      /*! core-js/modules/es.map */
      "vRoz");
      /* harmony import */


      var core_js_modules_es_map__WEBPACK_IMPORTED_MODULE_84___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_map__WEBPACK_IMPORTED_MODULE_84__);
      /* harmony import */


      var core_js_modules_es_weak_map__WEBPACK_IMPORTED_MODULE_85__ = __webpack_require__(
      /*! core-js/modules/es.weak-map */
      "hdsk");
      /* harmony import */


      var core_js_modules_es_weak_map__WEBPACK_IMPORTED_MODULE_85___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_weak_map__WEBPACK_IMPORTED_MODULE_85__);
      /* harmony import */


      var core_js_modules_es_set__WEBPACK_IMPORTED_MODULE_86__ = __webpack_require__(
      /*! core-js/modules/es.set */
      "ViWx");
      /* harmony import */


      var core_js_modules_es_set__WEBPACK_IMPORTED_MODULE_86___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_set__WEBPACK_IMPORTED_MODULE_86__);
      /* harmony import */


      var core_js_modules_web_dom_collections_for_each__WEBPACK_IMPORTED_MODULE_87__ = __webpack_require__(
      /*! core-js/modules/web.dom-collections.for-each */
      "kIOX");
      /* harmony import */


      var core_js_modules_web_dom_collections_for_each__WEBPACK_IMPORTED_MODULE_87___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_web_dom_collections_for_each__WEBPACK_IMPORTED_MODULE_87__);
      /* harmony import */


      var core_js_modules_web_dom_collections_iterator__WEBPACK_IMPORTED_MODULE_88__ = __webpack_require__(
      /*! core-js/modules/web.dom-collections.iterator */
      "riHj");
      /* harmony import */


      var core_js_modules_web_dom_collections_iterator__WEBPACK_IMPORTED_MODULE_88___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_web_dom_collections_iterator__WEBPACK_IMPORTED_MODULE_88__);
      /* harmony import */


      var core_js_modules_es_promise__WEBPACK_IMPORTED_MODULE_89__ = __webpack_require__(
      /*! core-js/modules/es.promise */
      "bHwr");
      /* harmony import */


      var core_js_modules_es_promise__WEBPACK_IMPORTED_MODULE_89___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_promise__WEBPACK_IMPORTED_MODULE_89__);
      /* harmony import */


      var core_js_modules_es_json_to_string_tag__WEBPACK_IMPORTED_MODULE_90__ = __webpack_require__(
      /*! core-js/modules/es.json.to-string-tag */
      "8CeQ");
      /* harmony import */


      var core_js_modules_es_json_to_string_tag__WEBPACK_IMPORTED_MODULE_90___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_json_to_string_tag__WEBPACK_IMPORTED_MODULE_90__);
      /* harmony import */


      var regenerator_runtime_runtime__WEBPACK_IMPORTED_MODULE_91__ = __webpack_require__(
      /*! regenerator-runtime/runtime */
      "ls82");
      /* harmony import */


      var regenerator_runtime_runtime__WEBPACK_IMPORTED_MODULE_91___default = /*#__PURE__*/__webpack_require__.n(regenerator_runtime_runtime__WEBPACK_IMPORTED_MODULE_91__);
      /**
       * @license
       * Copyright Google Inc. All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */
      // ES2015 symbol capabilities
      // ES2015 function capabilities
      // ES2015 object capabilities
      // ES2015 array capabilities
      // ES2015 string capabilities

      /***/

    },

    /***/
    "vyNX":
    /*!***************************************************************************************************!*\
      !*** ./node_modules/@angular-devkit/build-angular/node_modules/core-js/internals/array-reduce.js ***!
      \***************************************************************************************************/

    /*! no static exports found */

    /***/
    function vyNX(module, exports, __webpack_require__) {
      var aFunction = __webpack_require__(
      /*! ../internals/a-function */
      "Neub");

      var toObject = __webpack_require__(
      /*! ../internals/to-object */
      "VCQ8");

      var IndexedObject = __webpack_require__(
      /*! ../internals/indexed-object */
      "tUdv");

      var toLength = __webpack_require__(
      /*! ../internals/to-length */
      "xpLY"); // `Array.prototype.{ reduce, reduceRight }` methods implementation


      var createMethod = function createMethod(IS_RIGHT) {
        return function (that, callbackfn, argumentsLength, memo) {
          aFunction(callbackfn);
          var O = toObject(that);
          var self = IndexedObject(O);
          var length = toLength(O.length);
          var index = IS_RIGHT ? length - 1 : 0;
          var i = IS_RIGHT ? -1 : 1;
          if (argumentsLength < 2) while (true) {
            if (index in self) {
              memo = self[index];
              index += i;
              break;
            }

            index += i;

            if (IS_RIGHT ? index < 0 : length <= index) {
              throw TypeError('Reduce of empty array with no initial value');
            }
          }

          for (; IS_RIGHT ? index >= 0 : length > index; index += i) {
            if (index in self) {
              memo = callbackfn(memo, self[index], index, O);
            }
          }

          return memo;
        };
      };

      module.exports = {
        // `Array.prototype.reduce` method
        // https://tc39.es/ecma262/#sec-array.prototype.reduce
        left: createMethod(false),
        // `Array.prototype.reduceRight` method
        // https://tc39.es/ecma262/#sec-array.prototype.reduceright
        right: createMethod(true)
      };
      /***/
    },

    /***/
    "w2a5":
    /*!*********************************************************!*\
      !*** ./node_modules/core-js/modules/_array-includes.js ***!
      \*********************************************************/

    /*! no static exports found */

    /***/
    function w2a5(module, exports, __webpack_require__) {
      // false -> Array#indexOf
      // true  -> Array#includes
      var toIObject = __webpack_require__(
      /*! ./_to-iobject */
      "aCFj");

      var toLength = __webpack_require__(
      /*! ./_to-length */
      "ne8i");

      var toAbsoluteIndex = __webpack_require__(
      /*! ./_to-absolute-index */
      "d/Gc");

      module.exports = function (IS_INCLUDES) {
        return function ($this, el, fromIndex) {
          var O = toIObject($this);
          var length = toLength(O.length);
          var index = toAbsoluteIndex(fromIndex, length);
          var value; // Array#includes uses SameValueZero equality algorithm
          // eslint-disable-next-line no-self-compare

          if (IS_INCLUDES && el != el) while (length > index) {
            value = O[index++]; // eslint-disable-next-line no-self-compare

            if (value != value) return true; // Array#indexOf ignores holes, Array#includes - not
          } else for (; length > index; index++) {
            if (IS_INCLUDES || index in O) {
              if (O[index] === el) return IS_INCLUDES || index || 0;
            }
          }
          return !IS_INCLUDES && -1;
        };
      };
      /***/

    },

    /***/
    "w2hq":
    /*!******************************************************************************************************************!*\
      !*** ./node_modules/@angular-devkit/build-angular/node_modules/core-js/internals/array-method-uses-to-length.js ***!
      \******************************************************************************************************************/

    /*! no static exports found */

    /***/
    function w2hq(module, exports, __webpack_require__) {
      var DESCRIPTORS = __webpack_require__(
      /*! ../internals/descriptors */
      "T69T");

      var fails = __webpack_require__(
      /*! ../internals/fails */
      "rG8t");

      var has = __webpack_require__(
      /*! ../internals/has */
      "OG5q");

      var defineProperty = Object.defineProperty;
      var cache = {};

      var thrower = function thrower(it) {
        throw it;
      };

      module.exports = function (METHOD_NAME, options) {
        if (has(cache, METHOD_NAME)) return cache[METHOD_NAME];
        if (!options) options = {};
        var method = [][METHOD_NAME];
        var ACCESSORS = has(options, 'ACCESSORS') ? options.ACCESSORS : false;
        var argument0 = has(options, 0) ? options[0] : thrower;
        var argument1 = has(options, 1) ? options[1] : undefined;
        return cache[METHOD_NAME] = !!method && !fails(function () {
          if (ACCESSORS && !DESCRIPTORS) return true;
          var O = {
            length: -1
          };
          if (ACCESSORS) defineProperty(O, 1, {
            enumerable: true,
            get: thrower
          });else O[1] = 1;
          method.call(O, argument0, argument1);
        });
      };
      /***/

    },

    /***/
    "w4Hq":
    /*!*************************************************************************************************!*\
      !*** ./node_modules/@angular-devkit/build-angular/node_modules/core-js/internals/array-fill.js ***!
      \*************************************************************************************************/

    /*! no static exports found */

    /***/
    function w4Hq(module, exports, __webpack_require__) {
      "use strict";

      var toObject = __webpack_require__(
      /*! ../internals/to-object */
      "VCQ8");

      var toAbsoluteIndex = __webpack_require__(
      /*! ../internals/to-absolute-index */
      "7Oj1");

      var toLength = __webpack_require__(
      /*! ../internals/to-length */
      "xpLY"); // `Array.prototype.fill` method implementation
      // https://tc39.es/ecma262/#sec-array.prototype.fill


      module.exports = function fill(value
      /* , start = 0, end = @length */
      ) {
        var O = toObject(this);
        var length = toLength(O.length);
        var argumentsLength = arguments.length;
        var index = toAbsoluteIndex(argumentsLength > 1 ? arguments[1] : undefined, length);
        var end = argumentsLength > 2 ? arguments[2] : undefined;
        var endPos = end === undefined ? length : toAbsoluteIndex(end, length);

        while (endPos > index) {
          O[index++] = value;
        }

        return O;
      };
      /***/

    },

    /***/
    "wA6s":
    /*!*********************************************************************************************!*\
      !*** ./node_modules/@angular-devkit/build-angular/node_modules/core-js/internals/export.js ***!
      \*********************************************************************************************/

    /*! no static exports found */

    /***/
    function wA6s(module, exports, __webpack_require__) {
      var global = __webpack_require__(
      /*! ../internals/global */
      "ocAm");

      var getOwnPropertyDescriptor = __webpack_require__(
      /*! ../internals/object-get-own-property-descriptor */
      "7gGY").f;

      var createNonEnumerableProperty = __webpack_require__(
      /*! ../internals/create-non-enumerable-property */
      "aJMj");

      var redefine = __webpack_require__(
      /*! ../internals/redefine */
      "2MGJ");

      var setGlobal = __webpack_require__(
      /*! ../internals/set-global */
      "Fqhe");

      var copyConstructorProperties = __webpack_require__(
      /*! ../internals/copy-constructor-properties */
      "NIlc");

      var isForced = __webpack_require__(
      /*! ../internals/is-forced */
      "MkZA");
      /*
        options.target      - name of the target object
        options.global      - target is the global object
        options.stat        - export as static methods of target
        options.proto       - export as prototype methods of target
        options.real        - real prototype method for the `pure` version
        options.forced      - export even if the native feature is available
        options.bind        - bind methods to the target, required for the `pure` version
        options.wrap        - wrap constructors to preventing global pollution, required for the `pure` version
        options.unsafe      - use the simple assignment of property instead of delete + defineProperty
        options.sham        - add a flag to not completely full polyfills
        options.enumerable  - export as enumerable property
        options.noTargetGet - prevent calling a getter on target
      */


      module.exports = function (options, source) {
        var TARGET = options.target;
        var GLOBAL = options.global;
        var STATIC = options.stat;
        var FORCED, target, key, targetProperty, sourceProperty, descriptor;

        if (GLOBAL) {
          target = global;
        } else if (STATIC) {
          target = global[TARGET] || setGlobal(TARGET, {});
        } else {
          target = (global[TARGET] || {}).prototype;
        }

        if (target) for (key in source) {
          sourceProperty = source[key];

          if (options.noTargetGet) {
            descriptor = getOwnPropertyDescriptor(target, key);
            targetProperty = descriptor && descriptor.value;
          } else targetProperty = target[key];

          FORCED = isForced(GLOBAL ? key : TARGET + (STATIC ? '.' : '#') + key, options.forced); // contained in target

          if (!FORCED && targetProperty !== undefined) {
            if (typeof sourceProperty === typeof targetProperty) continue;
            copyConstructorProperties(sourceProperty, targetProperty);
          } // add a flag to not completely full polyfills


          if (options.sham || targetProperty && targetProperty.sham) {
            createNonEnumerableProperty(sourceProperty, 'sham', true);
          } // extend global


          redefine(target, key, sourceProperty, options);
        }
      };
      /***/

    },

    /***/
    "wIVT":
    /*!**************************************************************************************************************!*\
      !*** ./node_modules/@angular-devkit/build-angular/node_modules/core-js/internals/object-get-prototype-of.js ***!
      \**************************************************************************************************************/

    /*! no static exports found */

    /***/
    function wIVT(module, exports, __webpack_require__) {
      var has = __webpack_require__(
      /*! ../internals/has */
      "OG5q");

      var toObject = __webpack_require__(
      /*! ../internals/to-object */
      "VCQ8");

      var sharedKey = __webpack_require__(
      /*! ../internals/shared-key */
      "/AsP");

      var CORRECT_PROTOTYPE_GETTER = __webpack_require__(
      /*! ../internals/correct-prototype-getter */
      "cwa4");

      var IE_PROTO = sharedKey('IE_PROTO');
      var ObjectPrototype = Object.prototype; // `Object.getPrototypeOf` method
      // https://tc39.es/ecma262/#sec-object.getprototypeof

      module.exports = CORRECT_PROTOTYPE_GETTER ? Object.getPrototypeOf : function (O) {
        O = toObject(O);
        if (has(O, IE_PROTO)) return O[IE_PROTO];

        if (typeof O.constructor == 'function' && O instanceof O.constructor) {
          return O.constructor.prototype;
        }

        return O instanceof Object ? ObjectPrototype : null;
      };
      /***/
    },

    /***/
    "wVAr":
    /*!************************************************************************************************************!*\
      !*** ./node_modules/@angular-devkit/build-angular/node_modules/core-js/modules/es.object.is-extensible.js ***!
      \************************************************************************************************************/

    /*! no static exports found */

    /***/
    function wVAr(module, exports, __webpack_require__) {
      var $ = __webpack_require__(
      /*! ../internals/export */
      "wA6s");

      var fails = __webpack_require__(
      /*! ../internals/fails */
      "rG8t");

      var isObject = __webpack_require__(
      /*! ../internals/is-object */
      "6XUM");

      var nativeIsExtensible = Object.isExtensible;
      var FAILS_ON_PRIMITIVES = fails(function () {
        nativeIsExtensible(1);
      }); // `Object.isExtensible` method
      // https://tc39.es/ecma262/#sec-object.isextensible

      $({
        target: 'Object',
        stat: true,
        forced: FAILS_ON_PRIMITIVES
      }, {
        isExtensible: function isExtensible(it) {
          return isObject(it) ? nativeIsExtensible ? nativeIsExtensible(it) : true : false;
        }
      });
      /***/
    },

    /***/
    "wZP2":
    /*!******************************************************************************************************!*\
      !*** ./node_modules/@angular-devkit/build-angular/node_modules/core-js/modules/es.array.is-array.js ***!
      \******************************************************************************************************/

    /*! no static exports found */

    /***/
    function wZP2(module, exports, __webpack_require__) {
      var $ = __webpack_require__(
      /*! ../internals/export */
      "wA6s");

      var isArray = __webpack_require__(
      /*! ../internals/is-array */
      "erNl"); // `Array.isArray` method
      // https://tc39.es/ecma262/#sec-array.isarray


      $({
        target: 'Array',
        stat: true
      }, {
        isArray: isArray
      });
      /***/
    },

    /***/
    "wdMf":
    /*!*************************************************************************************************!*\
      !*** ./node_modules/@angular-devkit/build-angular/node_modules/core-js/internals/collection.js ***!
      \*************************************************************************************************/

    /*! no static exports found */

    /***/
    function wdMf(module, exports, __webpack_require__) {
      "use strict";

      var $ = __webpack_require__(
      /*! ../internals/export */
      "wA6s");

      var global = __webpack_require__(
      /*! ../internals/global */
      "ocAm");

      var isForced = __webpack_require__(
      /*! ../internals/is-forced */
      "MkZA");

      var redefine = __webpack_require__(
      /*! ../internals/redefine */
      "2MGJ");

      var InternalMetadataModule = __webpack_require__(
      /*! ../internals/internal-metadata */
      "M7Xk");

      var iterate = __webpack_require__(
      /*! ../internals/iterate */
      "Rn6E");

      var anInstance = __webpack_require__(
      /*! ../internals/an-instance */
      "SM6+");

      var isObject = __webpack_require__(
      /*! ../internals/is-object */
      "6XUM");

      var fails = __webpack_require__(
      /*! ../internals/fails */
      "rG8t");

      var checkCorrectnessOfIteration = __webpack_require__(
      /*! ../internals/check-correctness-of-iteration */
      "EIBq");

      var setToStringTag = __webpack_require__(
      /*! ../internals/set-to-string-tag */
      "shqn");

      var inheritIfRequired = __webpack_require__(
      /*! ../internals/inherit-if-required */
      "K6ZX");

      module.exports = function (CONSTRUCTOR_NAME, wrapper, common) {
        var IS_MAP = CONSTRUCTOR_NAME.indexOf('Map') !== -1;
        var IS_WEAK = CONSTRUCTOR_NAME.indexOf('Weak') !== -1;
        var ADDER = IS_MAP ? 'set' : 'add';
        var NativeConstructor = global[CONSTRUCTOR_NAME];
        var NativePrototype = NativeConstructor && NativeConstructor.prototype;
        var Constructor = NativeConstructor;
        var exported = {};

        var fixMethod = function fixMethod(KEY) {
          var nativeMethod = NativePrototype[KEY];
          redefine(NativePrototype, KEY, KEY == 'add' ? function add(value) {
            nativeMethod.call(this, value === 0 ? 0 : value);
            return this;
          } : KEY == 'delete' ? function (key) {
            return IS_WEAK && !isObject(key) ? false : nativeMethod.call(this, key === 0 ? 0 : key);
          } : KEY == 'get' ? function get(key) {
            return IS_WEAK && !isObject(key) ? undefined : nativeMethod.call(this, key === 0 ? 0 : key);
          } : KEY == 'has' ? function has(key) {
            return IS_WEAK && !isObject(key) ? false : nativeMethod.call(this, key === 0 ? 0 : key);
          } : function set(key, value) {
            nativeMethod.call(this, key === 0 ? 0 : key, value);
            return this;
          });
        }; // eslint-disable-next-line max-len


        if (isForced(CONSTRUCTOR_NAME, typeof NativeConstructor != 'function' || !(IS_WEAK || NativePrototype.forEach && !fails(function () {
          new NativeConstructor().entries().next();
        })))) {
          // create collection constructor
          Constructor = common.getConstructor(wrapper, CONSTRUCTOR_NAME, IS_MAP, ADDER);
          InternalMetadataModule.REQUIRED = true;
        } else if (isForced(CONSTRUCTOR_NAME, true)) {
          var instance = new Constructor(); // early implementations not supports chaining

          var HASNT_CHAINING = instance[ADDER](IS_WEAK ? {} : -0, 1) != instance; // V8 ~ Chromium 40- weak-collections throws on primitives, but should return false

          var THROWS_ON_PRIMITIVES = fails(function () {
            instance.has(1);
          }); // most early implementations doesn't supports iterables, most modern - not close it correctly
          // eslint-disable-next-line no-new

          var ACCEPT_ITERABLES = checkCorrectnessOfIteration(function (iterable) {
            new NativeConstructor(iterable);
          }); // for early implementations -0 and +0 not the same

          var BUGGY_ZERO = !IS_WEAK && fails(function () {
            // V8 ~ Chromium 42- fails only with 5+ elements
            var $instance = new NativeConstructor();
            var index = 5;

            while (index--) {
              $instance[ADDER](index, index);
            }

            return !$instance.has(-0);
          });

          if (!ACCEPT_ITERABLES) {
            Constructor = wrapper(function (dummy, iterable) {
              anInstance(dummy, Constructor, CONSTRUCTOR_NAME);
              var that = inheritIfRequired(new NativeConstructor(), dummy, Constructor);
              if (iterable != undefined) iterate(iterable, that[ADDER], {
                that: that,
                AS_ENTRIES: IS_MAP
              });
              return that;
            });
            Constructor.prototype = NativePrototype;
            NativePrototype.constructor = Constructor;
          }

          if (THROWS_ON_PRIMITIVES || BUGGY_ZERO) {
            fixMethod('delete');
            fixMethod('has');
            IS_MAP && fixMethod('get');
          }

          if (BUGGY_ZERO || HASNT_CHAINING) fixMethod(ADDER); // weak collections should not contains .clear method

          if (IS_WEAK && NativePrototype.clear) delete NativePrototype.clear;
        }

        exported[CONSTRUCTOR_NAME] = Constructor;
        $({
          global: true,
          forced: Constructor != NativeConstructor
        }, exported);
        setToStringTag(Constructor, CONSTRUCTOR_NAME);
        if (!IS_WEAK) common.setStrong(Constructor, CONSTRUCTOR_NAME, IS_MAP);
        return Constructor;
      };
      /***/

    },

    /***/
    "wmvG":
    /*!************************************************************!*\
      !*** ./node_modules/core-js/modules/_collection-strong.js ***!
      \************************************************************/

    /*! no static exports found */

    /***/
    function wmvG(module, exports, __webpack_require__) {
      "use strict";

      var dP = __webpack_require__(
      /*! ./_object-dp */
      "hswa").f;

      var create = __webpack_require__(
      /*! ./_object-create */
      "Kuth");

      var redefineAll = __webpack_require__(
      /*! ./_redefine-all */
      "3Lyj");

      var ctx = __webpack_require__(
      /*! ./_ctx */
      "m0Pp");

      var anInstance = __webpack_require__(
      /*! ./_an-instance */
      "9gX7");

      var forOf = __webpack_require__(
      /*! ./_for-of */
      "SlkY");

      var $iterDefine = __webpack_require__(
      /*! ./_iter-define */
      "Afnz");

      var step = __webpack_require__(
      /*! ./_iter-step */
      "1TsA");

      var setSpecies = __webpack_require__(
      /*! ./_set-species */
      "elZq");

      var DESCRIPTORS = __webpack_require__(
      /*! ./_descriptors */
      "nh4g");

      var fastKey = __webpack_require__(
      /*! ./_meta */
      "Z6vF").fastKey;

      var validate = __webpack_require__(
      /*! ./_validate-collection */
      "s5qY");

      var SIZE = DESCRIPTORS ? '_s' : 'size';

      var getEntry = function getEntry(that, key) {
        // fast case
        var index = fastKey(key);
        var entry;
        if (index !== 'F') return that._i[index]; // frozen object case

        for (entry = that._f; entry; entry = entry.n) {
          if (entry.k == key) return entry;
        }
      };

      module.exports = {
        getConstructor: function getConstructor(wrapper, NAME, IS_MAP, ADDER) {
          var C = wrapper(function (that, iterable) {
            anInstance(that, C, NAME, '_i');
            that._t = NAME; // collection type

            that._i = create(null); // index

            that._f = undefined; // first entry

            that._l = undefined; // last entry

            that[SIZE] = 0; // size

            if (iterable != undefined) forOf(iterable, IS_MAP, that[ADDER], that);
          });
          redefineAll(C.prototype, {
            // 23.1.3.1 Map.prototype.clear()
            // 23.2.3.2 Set.prototype.clear()
            clear: function clear() {
              for (var that = validate(this, NAME), data = that._i, entry = that._f; entry; entry = entry.n) {
                entry.r = true;
                if (entry.p) entry.p = entry.p.n = undefined;
                delete data[entry.i];
              }

              that._f = that._l = undefined;
              that[SIZE] = 0;
            },
            // 23.1.3.3 Map.prototype.delete(key)
            // 23.2.3.4 Set.prototype.delete(value)
            'delete': function _delete(key) {
              var that = validate(this, NAME);
              var entry = getEntry(that, key);

              if (entry) {
                var next = entry.n;
                var prev = entry.p;
                delete that._i[entry.i];
                entry.r = true;
                if (prev) prev.n = next;
                if (next) next.p = prev;
                if (that._f == entry) that._f = next;
                if (that._l == entry) that._l = prev;
                that[SIZE]--;
              }

              return !!entry;
            },
            // 23.2.3.6 Set.prototype.forEach(callbackfn, thisArg = undefined)
            // 23.1.3.5 Map.prototype.forEach(callbackfn, thisArg = undefined)
            forEach: function forEach(callbackfn
            /* , that = undefined */
            ) {
              validate(this, NAME);
              var f = ctx(callbackfn, arguments.length > 1 ? arguments[1] : undefined, 3);
              var entry;

              while (entry = entry ? entry.n : this._f) {
                f(entry.v, entry.k, this); // revert to the last existing entry

                while (entry && entry.r) {
                  entry = entry.p;
                }
              }
            },
            // 23.1.3.7 Map.prototype.has(key)
            // 23.2.3.7 Set.prototype.has(value)
            has: function has(key) {
              return !!getEntry(validate(this, NAME), key);
            }
          });
          if (DESCRIPTORS) dP(C.prototype, 'size', {
            get: function get() {
              return validate(this, NAME)[SIZE];
            }
          });
          return C;
        },
        def: function def(that, key, value) {
          var entry = getEntry(that, key);
          var prev, index; // change existing entry

          if (entry) {
            entry.v = value; // create new entry
          } else {
            that._l = entry = {
              i: index = fastKey(key, true),
              // <- index
              k: key,
              // <- key
              v: value,
              // <- value
              p: prev = that._l,
              // <- previous entry
              n: undefined,
              // <- next entry
              r: false // <- removed

            };
            if (!that._f) that._f = entry;
            if (prev) prev.n = entry;
            that[SIZE]++; // add to index

            if (index !== 'F') that._i[index] = entry;
          }

          return that;
        },
        getEntry: getEntry,
        setStrong: function setStrong(C, NAME, IS_MAP) {
          // add .keys, .values, .entries, [@@iterator]
          // 23.1.3.4, 23.1.3.8, 23.1.3.11, 23.1.3.12, 23.2.3.5, 23.2.3.8, 23.2.3.10, 23.2.3.11
          $iterDefine(C, NAME, function (iterated, kind) {
            this._t = validate(iterated, NAME); // target

            this._k = kind; // kind

            this._l = undefined; // previous
          }, function () {
            var that = this;
            var kind = that._k;
            var entry = that._l; // revert to the last existing entry

            while (entry && entry.r) {
              entry = entry.p;
            } // get next entry


            if (!that._t || !(that._l = entry = entry ? entry.n : that._t._f)) {
              // or finish the iteration
              that._t = undefined;
              return step(1);
            } // return step by kind


            if (kind == 'keys') return step(0, entry.k);
            if (kind == 'values') return step(0, entry.v);
            return step(0, [entry.k, entry.v]);
          }, IS_MAP ? 'entries' : 'values', !IS_MAP, true); // add [@@species], 23.1.2.2, 23.2.2.2

          setSpecies(NAME);
        }
      };
      /***/
    },

    /***/
    "wqfI":
    /*!***************************************************************************************************!*\
      !*** ./node_modules/@angular-devkit/build-angular/node_modules/core-js/modules/es.object.keys.js ***!
      \***************************************************************************************************/

    /*! no static exports found */

    /***/
    function wqfI(module, exports, __webpack_require__) {
      var $ = __webpack_require__(
      /*! ../internals/export */
      "wA6s");

      var toObject = __webpack_require__(
      /*! ../internals/to-object */
      "VCQ8");

      var nativeKeys = __webpack_require__(
      /*! ../internals/object-keys */
      "ZRqE");

      var fails = __webpack_require__(
      /*! ../internals/fails */
      "rG8t");

      var FAILS_ON_PRIMITIVES = fails(function () {
        nativeKeys(1);
      }); // `Object.keys` method
      // https://tc39.es/ecma262/#sec-object.keys

      $({
        target: 'Object',
        stat: true,
        forced: FAILS_ON_PRIMITIVES
      }, {
        keys: function keys(it) {
          return nativeKeys(toObject(it));
        }
      });
      /***/
    },

    /***/
    "x+GC":
    /*!*******************************************************************************************************!*\
      !*** ./node_modules/@angular-devkit/build-angular/node_modules/core-js/internals/get-substitution.js ***!
      \*******************************************************************************************************/

    /*! no static exports found */

    /***/
    function xGC(module, exports, __webpack_require__) {
      var toObject = __webpack_require__(
      /*! ../internals/to-object */
      "VCQ8");

      var floor = Math.floor;
      var replace = ''.replace;
      var SUBSTITUTION_SYMBOLS = /\$([$&'`]|\d\d?|<[^>]*>)/g;
      var SUBSTITUTION_SYMBOLS_NO_NAMED = /\$([$&'`]|\d\d?)/g; // https://tc39.es/ecma262/#sec-getsubstitution

      module.exports = function (matched, str, position, captures, namedCaptures, replacement) {
        var tailPos = position + matched.length;
        var m = captures.length;
        var symbols = SUBSTITUTION_SYMBOLS_NO_NAMED;

        if (namedCaptures !== undefined) {
          namedCaptures = toObject(namedCaptures);
          symbols = SUBSTITUTION_SYMBOLS;
        }

        return replace.call(replacement, symbols, function (match, ch) {
          var capture;

          switch (ch.charAt(0)) {
            case '$':
              return '$';

            case '&':
              return matched;

            case '`':
              return str.slice(0, position);

            case "'":
              return str.slice(tailPos);

            case '<':
              capture = namedCaptures[ch.slice(1, -1)];
              break;

            default:
              // \d\d?
              var n = +ch;
              if (n === 0) return match;

              if (n > m) {
                var f = floor(n / 10);
                if (f === 0) return match;
                if (f <= m) return captures[f - 1] === undefined ? ch.charAt(1) : captures[f - 1] + ch.charAt(1);
                return match;
              }

              capture = captures[n - 1];
          }

          return capture === undefined ? '' : capture;
        });
      };
      /***/

    },

    /***/
    "x0kV":
    /*!***************************************************************************************************!*\
      !*** ./node_modules/@angular-devkit/build-angular/node_modules/core-js/internals/regexp-flags.js ***!
      \***************************************************************************************************/

    /*! no static exports found */

    /***/
    function x0kV(module, exports, __webpack_require__) {
      "use strict";

      var anObject = __webpack_require__(
      /*! ../internals/an-object */
      "F26l"); // `RegExp.prototype.flags` getter implementation
      // https://tc39.es/ecma262/#sec-get-regexp.prototype.flags


      module.exports = function () {
        var that = anObject(this);
        var result = '';
        if (that.global) result += 'g';
        if (that.ignoreCase) result += 'i';
        if (that.multiline) result += 'm';
        if (that.dotAll) result += 's';
        if (that.unicode) result += 'u';
        if (that.sticky) result += 'y';
        return result;
      };
      /***/

    },

    /***/
    "xFZC":
    /*!**************************************************************************************************!*\
      !*** ./node_modules/@angular-devkit/build-angular/node_modules/core-js/internals/whitespaces.js ***!
      \**************************************************************************************************/

    /*! no static exports found */

    /***/
    function xFZC(module, exports) {
      // a string of all valid unicode whitespaces
      // eslint-disable-next-line max-len
      module.exports = "\t\n\x0B\f\r \xA0\u1680\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000\u2028\u2029\uFEFF";
      /***/
    },

    /***/
    "xpLY":
    /*!************************************************************************************************!*\
      !*** ./node_modules/@angular-devkit/build-angular/node_modules/core-js/internals/to-length.js ***!
      \************************************************************************************************/

    /*! no static exports found */

    /***/
    function xpLY(module, exports, __webpack_require__) {
      var toInteger = __webpack_require__(
      /*! ../internals/to-integer */
      "vDBE");

      var min = Math.min; // `ToLength` abstract operation
      // https://tc39.es/ecma262/#sec-tolength

      module.exports = function (argument) {
        return argument > 0 ? min(toInteger(argument), 0x1FFFFFFFFFFFFF) : 0; // 2 ** 53 - 1 == 9007199254740991
      };
      /***/

    },

    /***/
    "xpql":
    /*!*********************************************************!*\
      !*** ./node_modules/core-js/modules/_ie8-dom-define.js ***!
      \*********************************************************/

    /*! no static exports found */

    /***/
    function xpql(module, exports, __webpack_require__) {
      module.exports = !__webpack_require__(
      /*! ./_descriptors */
      "nh4g") && !__webpack_require__(
      /*! ./_fails */
      "eeVq")(function () {
        return Object.defineProperty(__webpack_require__(
        /*! ./_dom-create */
        "Iw71")('div'), 'a', {
          get: function get() {
            return 7;
          }
        }).a != 7;
      });
      /***/
    },

    /***/
    "y3w9":
    /*!****************************************************!*\
      !*** ./node_modules/core-js/modules/_an-object.js ***!
      \****************************************************/

    /*! no static exports found */

    /***/
    function y3w9(module, exports, __webpack_require__) {
      var isObject = __webpack_require__(
      /*! ./_is-object */
      "0/R4");

      module.exports = function (it) {
        if (!isObject(it)) throw TypeError(it + ' is not an object!');
        return it;
      };
      /***/

    },

    /***/
    "yI8t":
    /*!***************************************************************************************************************!*\
      !*** ./node_modules/@angular-devkit/build-angular/node_modules/core-js/modules/es.number.max-safe-integer.js ***!
      \***************************************************************************************************************/

    /*! no static exports found */

    /***/
    function yI8t(module, exports, __webpack_require__) {
      var $ = __webpack_require__(
      /*! ../internals/export */
      "wA6s"); // `Number.MAX_SAFE_INTEGER` constant
      // https://tc39.es/ecma262/#sec-number.max_safe_integer


      $({
        target: 'Number',
        stat: true
      }, {
        MAX_SAFE_INTEGER: 0x1FFFFFFFFFFFFF
      });
      /***/
    },

    /***/
    "yIiL":
    /*!*********************************************************************************************!*\
      !*** ./node_modules/@angular-devkit/build-angular/node_modules/core-js/internals/shared.js ***!
      \*********************************************************************************************/

    /*! no static exports found */

    /***/
    function yIiL(module, exports, __webpack_require__) {
      var IS_PURE = __webpack_require__(
      /*! ../internals/is-pure */
      "g9hI");

      var store = __webpack_require__(
      /*! ../internals/shared-store */
      "KBkW");

      (module.exports = function (key, value) {
        return store[key] || (store[key] = value !== undefined ? value : {});
      })('versions', []).push({
        version: '3.8.2',
        mode: IS_PURE ? 'pure' : 'global',
        copyright: '© 2021 Denis Pushkarev (zloirock.ru)'
      });
      /***/
    },

    /***/
    "yQMY":
    /*!**************************************************************************************************!*\
      !*** ./node_modules/@angular-devkit/build-angular/node_modules/core-js/internals/hidden-keys.js ***!
      \**************************************************************************************************/

    /*! no static exports found */

    /***/
    function yQMY(module, exports) {
      module.exports = {};
      /***/
    },

    /***/
    "yaK9":
    /*!******************************************************************************************************!*\
      !*** ./node_modules/@angular-devkit/build-angular/node_modules/core-js/internals/native-weak-map.js ***!
      \******************************************************************************************************/

    /*! no static exports found */

    /***/
    function yaK9(module, exports, __webpack_require__) {
      var global = __webpack_require__(
      /*! ../internals/global */
      "ocAm");

      var inspectSource = __webpack_require__(
      /*! ../internals/inspect-source */
      "6urC");

      var WeakMap = global.WeakMap;
      module.exports = typeof WeakMap === 'function' && /native code/.test(inspectSource(WeakMap));
      /***/
    },

    /***/
    "ylqs":
    /*!**********************************************!*\
      !*** ./node_modules/core-js/modules/_uid.js ***!
      \**********************************************/

    /*! no static exports found */

    /***/
    function ylqs(module, exports) {
      var id = 0;
      var px = Math.random();

      module.exports = function (key) {
        return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));
      };
      /***/

    },

    /***/
    "zJ5J":
    /*!*************************************************************!*\
      !*** ./node_modules/@angular/localize/fesm2015/localize.js ***!
      \*************************************************************/

    /*! exports provided: ɵcomputeMsgId, clearTranslations, loadTranslations, ɵMissingTranslationError, ɵfindEndOfBlock, ɵisMissingTranslationError, ɵmakeParsedTranslation, ɵmakeTemplateObject, ɵparseMessage, ɵparseMetadata, ɵparseTranslation, ɵsplitBlock, ɵtranslate */

    /***/
    function zJ5J(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "clearTranslations", function () {
        return clearTranslations;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "loadTranslations", function () {
        return loadTranslations;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵMissingTranslationError", function () {
        return MissingTranslationError;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵfindEndOfBlock", function () {
        return findEndOfBlock;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵisMissingTranslationError", function () {
        return isMissingTranslationError;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵmakeParsedTranslation", function () {
        return makeParsedTranslation;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵmakeTemplateObject", function () {
        return makeTemplateObject;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵparseMessage", function () {
        return parseMessage;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵparseMetadata", function () {
        return parseMetadata;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵparseTranslation", function () {
        return parseTranslation;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵsplitBlock", function () {
        return splitBlock;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵtranslate", function () {
        return translate;
      });
      /* harmony import */


      var _angular_compiler__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! @angular/compiler */
      "1uSB");
      /* harmony reexport (safe) */


      __webpack_require__.d(__webpack_exports__, "ɵcomputeMsgId", function () {
        return _angular_compiler__WEBPACK_IMPORTED_MODULE_0__["computeMsgId"];
      });
      /**
       * @license Angular v11.2.4
       * (c) 2010-2021 Google LLC. https://angular.io/
       * License: MIT
       */

      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * The character used to mark the start and end of a "block" in a `$localize` tagged string.
       * A block can indicate metadata about the message or specify a name of a placeholder for a
       * substitution expressions.
       *
       * For example:
       *
       * ```ts
       * $localize`Hello, ${title}:title:!`;
       * $localize`:meaning|description@@id:source message text`;
       * ```
       */


      var BLOCK_MARKER = ':';
      /**
       * The marker used to separate a message's "meaning" from its "description" in a metadata block.
       *
       * For example:
       *
       * ```ts
       * $localize `:correct|Indicates that the user got the answer correct: Right!`;
       * $localize `:movement|Button label for moving to the right: Right!`;
       * ```
       */

      var MEANING_SEPARATOR = '|';
      /**
       * The marker used to separate a message's custom "id" from its "description" in a metadata block.
       *
       * For example:
       *
       * ```ts
       * $localize `:A welcome message on the home page@@myApp-homepage-welcome: Welcome!`;
       * ```
       */

      var ID_SEPARATOR = '@@';
      /**
       * The marker used to separate legacy message ids from the rest of a metadata block.
       *
       * For example:
       *
       * ```ts
       * $localize `:@@custom-id␟2df64767cd895a8fabe3e18b94b5b6b6f9e2e3f0: Welcome!`;
       * ```
       *
       * Note that this character is the "symbol for the unit separator" (␟) not the "unit separator
       * character" itself, since that has no visual representation. See https://graphemica.com/%E2%90%9F.
       *
       * Here is some background for the original "unit separator character":
       * https://stackoverflow.com/questions/8695118/whats-the-file-group-record-unit-separator-control-characters-and-its-usage
       */

      var LEGACY_ID_INDICATOR = "\u241F";
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * Parse a `$localize` tagged string into a structure that can be used for translation or
       * extraction.
       *
       * See `ParsedMessage` for an example.
       */

      function parseMessage(messageParts, expressions, location, messagePartLocations) {
        var expressionLocations = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : [];
        var substitutions = {};
        var substitutionLocations = {};
        var metadata = parseMetadata(messageParts[0], messageParts.raw[0]);
        var cleanedMessageParts = [metadata.text];
        var placeholderNames = [];
        var messageString = metadata.text;

        for (var i = 1; i < messageParts.length; i++) {
          var _splitBlock = splitBlock(messageParts[i], messageParts.raw[i]),
              messagePart = _splitBlock.text,
              _splitBlock$block = _splitBlock.block,
              placeholderName = _splitBlock$block === void 0 ? computePlaceholderName(i) : _splitBlock$block;

          messageString += "{$".concat(placeholderName, "}").concat(messagePart);

          if (expressions !== undefined) {
            substitutions[placeholderName] = expressions[i - 1];
            substitutionLocations[placeholderName] = expressionLocations[i - 1];
          }

          placeholderNames.push(placeholderName);
          cleanedMessageParts.push(messagePart);
        }

        var messageId = metadata.customId || Object(_angular_compiler__WEBPACK_IMPORTED_MODULE_0__["computeMsgId"])(messageString, metadata.meaning || '');
        var legacyIds = metadata.legacyIds ? metadata.legacyIds.filter(function (id) {
          return id !== messageId;
        }) : [];
        return {
          id: messageId,
          legacyIds: legacyIds,
          substitutions: substitutions,
          substitutionLocations: substitutionLocations,
          text: messageString,
          customId: metadata.customId,
          meaning: metadata.meaning || '',
          description: metadata.description || '',
          messageParts: cleanedMessageParts,
          messagePartLocations: messagePartLocations,
          placeholderNames: placeholderNames,
          location: location
        };
      }
      /**
       * Parse the given message part (`cooked` + `raw`) to extract the message metadata from the text.
       *
       * If the message part has a metadata block this function will extract the `meaning`,
       * `description`, `customId` and `legacyId` (if provided) from the block. These metadata properties
       * are serialized in the string delimited by `|`, `@@` and `␟` respectively.
       *
       * (Note that `␟` is the `LEGACY_ID_INDICATOR` - see `constants.ts`.)
       *
       * For example:
       *
       * ```ts
       * `:meaning|description@@custom-id`
       * `:meaning|@@custom-id`
       * `:meaning|description`
       * `description@@custom-id`
       * `meaning|`
       * `description`
       * `@@custom-id`
       * `:meaning|description@@custom-id␟legacy-id-1␟legacy-id-2`
       * ```
       *
       * @param cooked The cooked version of the message part to parse.
       * @param raw The raw version of the message part to parse.
       * @returns A object containing any metadata that was parsed from the message part.
       */


      function parseMetadata(cooked, raw) {
        var _splitBlock2 = splitBlock(cooked, raw),
            messageString = _splitBlock2.text,
            block = _splitBlock2.block;

        if (block === undefined) {
          return {
            text: messageString
          };
        } else {
          var _block$split = block.split(LEGACY_ID_INDICATOR),
              _block$split2 = _toArray(_block$split),
              meaningDescAndId = _block$split2[0],
              legacyIds = _block$split2.slice(1);

          var _meaningDescAndId$spl = meaningDescAndId.split(ID_SEPARATOR, 2),
              _meaningDescAndId$spl2 = _slicedToArray(_meaningDescAndId$spl, 2),
              meaningAndDesc = _meaningDescAndId$spl2[0],
              customId = _meaningDescAndId$spl2[1];

          var _meaningAndDesc$split = meaningAndDesc.split(MEANING_SEPARATOR, 2),
              _meaningAndDesc$split2 = _slicedToArray(_meaningAndDesc$split, 2),
              meaning = _meaningAndDesc$split2[0],
              description = _meaningAndDesc$split2[1];

          if (description === undefined) {
            description = meaning;
            meaning = undefined;
          }

          if (description === '') {
            description = undefined;
          }

          return {
            text: messageString,
            meaning: meaning,
            description: description,
            customId: customId,
            legacyIds: legacyIds
          };
        }
      }
      /**
       * Split a message part (`cooked` + `raw`) into an optional delimited "block" off the front and the
       * rest of the text of the message part.
       *
       * Blocks appear at the start of message parts. They are delimited by a colon `:` character at the
       * start and end of the block.
       *
       * If the block is in the first message part then it will be metadata about the whole message:
       * meaning, description, id.  Otherwise it will be metadata about the immediately preceding
       * substitution: placeholder name.
       *
       * Since blocks are optional, it is possible that the content of a message block actually starts
       * with a block marker. In this case the marker must be escaped `\:`.
       *
       * @param cooked The cooked version of the message part to parse.
       * @param raw The raw version of the message part to parse.
       * @returns An object containing the `text` of the message part and the text of the `block`, if it
       * exists.
       * @throws an error if the `block` is unterminated
       */


      function splitBlock(cooked, raw) {
        if (raw.charAt(0) !== BLOCK_MARKER) {
          return {
            text: cooked
          };
        } else {
          var endOfBlock = findEndOfBlock(cooked, raw);
          return {
            block: cooked.substring(1, endOfBlock),
            text: cooked.substring(endOfBlock + 1)
          };
        }
      }

      function computePlaceholderName(index) {
        return index === 1 ? 'PH' : "PH_".concat(index - 1);
      }
      /**
       * Find the end of a "marked block" indicated by the first non-escaped colon.
       *
       * @param cooked The cooked string (where escaped chars have been processed)
       * @param raw The raw string (where escape sequences are still in place)
       *
       * @returns the index of the end of block marker
       * @throws an error if the block is unterminated
       */


      function findEndOfBlock(cooked, raw) {
        /************************************************************************************************
         * This function is repeated in `src/localize/src/localize.ts` and the two should be kept in sync.
         * (See that file for more explanation of why.)
         ************************************************************************************************/
        for (var cookedIndex = 1, rawIndex = 1; cookedIndex < cooked.length; cookedIndex++, rawIndex++) {
          if (raw[rawIndex] === '\\') {
            rawIndex++;
          } else if (cooked[cookedIndex] === BLOCK_MARKER) {
            return cookedIndex;
          }
        }

        throw new Error("Unterminated $localize metadata block in \"".concat(raw, "\"."));
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      var MissingTranslationError = /*#__PURE__*/function (_Error) {
        _inherits(MissingTranslationError, _Error);

        var _super112 = _createSuper(MissingTranslationError);

        function MissingTranslationError(parsedMessage) {
          var _this317;

          _classCallCheck(this, MissingTranslationError);

          _this317 = _super112.call(this, "No translation found for ".concat(describeMessage(parsedMessage), "."));
          _this317.parsedMessage = parsedMessage;
          _this317.type = 'MissingTranslationError';
          return _this317;
        }

        return MissingTranslationError;
      }( /*#__PURE__*/_wrapNativeSuper(Error));

      function isMissingTranslationError(e) {
        return e.type === 'MissingTranslationError';
      }
      /**
       * Translate the text of the `$localize` tagged-string (i.e. `messageParts` and
       * `substitutions`) using the given `translations`.
       *
       * The tagged-string is parsed to extract its `messageId` which is used to find an appropriate
       * `ParsedTranslation`. If this doesn't match and there are legacy ids then try matching a
       * translation using those.
       *
       * If one is found then it is used to translate the message into a new set of `messageParts` and
       * `substitutions`.
       * The translation may reorder (or remove) substitutions as appropriate.
       *
       * If there is no translation with a matching message id then an error is thrown.
       * If a translation contains a placeholder that is not found in the message being translated then an
       * error is thrown.
       */


      function translate(translations, messageParts, substitutions) {
        var message = parseMessage(messageParts, substitutions); // Look up the translation using the messageId, and then the legacyId if available.

        var translation = translations[message.id]; // If the messageId did not match a translation, try matching the legacy ids instead

        if (message.legacyIds !== undefined) {
          for (var i = 0; i < message.legacyIds.length && translation === undefined; i++) {
            translation = translations[message.legacyIds[i]];
          }
        }

        if (translation === undefined) {
          throw new MissingTranslationError(message);
        }

        return [translation.messageParts, translation.placeholderNames.map(function (placeholder) {
          if (message.substitutions.hasOwnProperty(placeholder)) {
            return message.substitutions[placeholder];
          } else {
            throw new Error("There is a placeholder name mismatch with the translation provided for the message ".concat(describeMessage(message), ".\n") + "The translation contains a placeholder with name ".concat(placeholder, ", which does not exist in the message."));
          }
        })];
      }
      /**
       * Parse the `messageParts` and `placeholderNames` out of a target `message`.
       *
       * Used by `loadTranslations()` to convert target message strings into a structure that is more
       * appropriate for doing translation.
       *
       * @param message the message to be parsed.
       */


      function parseTranslation(messageString) {
        var parts = messageString.split(/{\$([^}]*)}/);
        var messageParts = [parts[0]];
        var placeholderNames = [];

        for (var i = 1; i < parts.length - 1; i += 2) {
          placeholderNames.push(parts[i]);
          messageParts.push("".concat(parts[i + 1]));
        }

        var rawMessageParts = messageParts.map(function (part) {
          return part.charAt(0) === BLOCK_MARKER ? '\\' + part : part;
        });
        return {
          text: messageString,
          messageParts: makeTemplateObject(messageParts, rawMessageParts),
          placeholderNames: placeholderNames
        };
      }
      /**
       * Create a `ParsedTranslation` from a set of `messageParts` and `placeholderNames`.
       *
       * @param messageParts The message parts to appear in the ParsedTranslation.
       * @param placeholderNames The names of the placeholders to intersperse between the `messageParts`.
       */


      function makeParsedTranslation(messageParts) {
        var placeholderNames = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
        var messageString = messageParts[0];

        for (var i = 0; i < placeholderNames.length; i++) {
          messageString += "{$".concat(placeholderNames[i], "}").concat(messageParts[i + 1]);
        }

        return {
          text: messageString,
          messageParts: makeTemplateObject(messageParts, messageParts),
          placeholderNames: placeholderNames
        };
      }
      /**
       * Create the specialized array that is passed to tagged-string tag functions.
       *
       * @param cooked The message parts with their escape codes processed.
       * @param raw The message parts with their escaped codes as-is.
       */


      function makeTemplateObject(cooked, raw) {
        Object.defineProperty(cooked, 'raw', {
          value: raw
        });
        return cooked;
      }

      function describeMessage(message) {
        var meaningString = message.meaning && " - \"".concat(message.meaning, "\"");
        var legacy = message.legacyIds && message.legacyIds.length > 0 ? " [".concat(message.legacyIds.map(function (l) {
          return "\"".concat(l, "\"");
        }).join(', '), "]") : '';
        return "\"".concat(message.id, "\"").concat(legacy, " (\"").concat(message.text, "\"").concat(meaningString, ")");
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * Load translations for `$localize`.
       *
       * The given `translations` are processed and added to a lookup based on their `MessageId`.
       * A new translation will overwrite a previous translation if it has the same `MessageId`.
       *
       * * If a message is generated by the Angular compiler from an `i18n` marker in a template, the
       *   `MessageId` is passed through to the `$localize` call as a custom `MessageId`. The `MessageId`
       *   will match what is extracted into translation files.
       *
       * * If the translation is from a call to `$localize` in application code, and no custom `MessageId`
       *   is provided, then the `MessageId` can be generated by passing the tagged string message-parts
       *   to the `parseMessage()` function (not currently public API).
       *
       * @publicApi
       *
       */


      function loadTranslations(translations) {
        // Ensure the translate function exists
        if (!$localize.translate) {
          $localize.translate = translate$1;
        }

        if (!$localize.TRANSLATIONS) {
          $localize.TRANSLATIONS = {};
        }

        Object.keys(translations).forEach(function (key) {
          $localize.TRANSLATIONS[key] = parseTranslation(translations[key]);
        });
      }
      /**
       * Remove all translations for `$localize`.
       *
       * @publicApi
       */


      function clearTranslations() {
        $localize.translate = undefined;
        $localize.TRANSLATIONS = {};
      }
      /**
       * Translate the text of the given message, using the loaded translations.
       *
       * This function may reorder (or remove) substitutions as indicated in the matching translation.
       */


      function translate$1(messageParts, substitutions) {
        try {
          return translate($localize.TRANSLATIONS, messageParts, substitutions);
        } catch (e) {
          console.warn(e.message);
          return [messageParts, substitutions];
        }
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */
      //# sourceMappingURL=localize.js.map

      /***/

    },

    /***/
    "zRwo":
    /*!***************************************************************!*\
      !*** ./node_modules/core-js/modules/_array-species-create.js ***!
      \***************************************************************/

    /*! no static exports found */

    /***/
    function zRwo(module, exports, __webpack_require__) {
      // 9.4.2.3 ArraySpeciesCreate(originalArray, length)
      var speciesConstructor = __webpack_require__(
      /*! ./_array-species-constructor */
      "6FMO");

      module.exports = function (original, length) {
        return new (speciesConstructor(original))(length);
      };
      /***/

    },

    /***/
    "zTQA":
    /*!******************************************************************************************************!*\
      !*** ./node_modules/@angular-devkit/build-angular/node_modules/core-js/modules/es.string.italics.js ***!
      \******************************************************************************************************/

    /*! no static exports found */

    /***/
    function zTQA(module, exports, __webpack_require__) {
      "use strict";

      var $ = __webpack_require__(
      /*! ../internals/export */
      "wA6s");

      var createHTML = __webpack_require__(
      /*! ../internals/create-html */
      "uoca");

      var forcedStringHTMLMethod = __webpack_require__(
      /*! ../internals/string-html-forced */
      "d8Sw"); // `String.prototype.italics` method
      // https://tc39.es/ecma262/#sec-string.prototype.italics


      $({
        target: 'String',
        proto: true,
        forced: forcedStringHTMLMethod('italics')
      }, {
        italics: function italics() {
          return createHTML(this, 'i', '', '');
        }
      });
      /***/
    },

    /***/
    "zglh":
    /*!*************************************************************************************************************!*\
      !*** ./node_modules/@angular-devkit/build-angular/node_modules/core-js/modules/es.reflect.to-string-tag.js ***!
      \*************************************************************************************************************/

    /*! no static exports found */

    /***/
    function zglh(module, exports, __webpack_require__) {
      var $ = __webpack_require__(
      /*! ../internals/export */
      "wA6s");

      var global = __webpack_require__(
      /*! ../internals/global */
      "ocAm");

      var setToStringTag = __webpack_require__(
      /*! ../internals/set-to-string-tag */
      "shqn");

      $({
        global: true
      }, {
        Reflect: {}
      }); // Reflect[@@toStringTag] property
      // https://tc39.es/ecma262/#sec-reflect-@@tostringtag

      setToStringTag(global.Reflect, 'Reflect', true);
      /***/
    },

    /***/
    "zhAb":
    /*!***************************************************************!*\
      !*** ./node_modules/core-js/modules/_object-keys-internal.js ***!
      \***************************************************************/

    /*! no static exports found */

    /***/
    function zhAb(module, exports, __webpack_require__) {
      var has = __webpack_require__(
      /*! ./_has */
      "aagx");

      var toIObject = __webpack_require__(
      /*! ./_to-iobject */
      "aCFj");

      var arrayIndexOf = __webpack_require__(
      /*! ./_array-includes */
      "w2a5")(false);

      var IE_PROTO = __webpack_require__(
      /*! ./_shared-key */
      "YTvA")('IE_PROTO');

      module.exports = function (object, names) {
        var O = toIObject(object);
        var i = 0;
        var result = [];
        var key;

        for (key in O) {
          if (key != IE_PROTO) has(O, key) && result.push(key);
        } // Don't enum bug & hidden keys


        while (names.length > i) {
          if (has(O, key = names[i++])) {
            ~arrayIndexOf(result, key) || result.push(key);
          }
        }

        return result;
      };
      /***/

    },

    /***/
    "znfk":
    /*!**************************************************************************************************************************!*\
      !*** ./node_modules/@angular-devkit/build-angular/node_modules/core-js/modules/es.object.get-own-property-descriptor.js ***!
      \**************************************************************************************************************************/

    /*! no static exports found */

    /***/
    function znfk(module, exports, __webpack_require__) {
      var $ = __webpack_require__(
      /*! ../internals/export */
      "wA6s");

      var fails = __webpack_require__(
      /*! ../internals/fails */
      "rG8t");

      var toIndexedObject = __webpack_require__(
      /*! ../internals/to-indexed-object */
      "EMtK");

      var nativeGetOwnPropertyDescriptor = __webpack_require__(
      /*! ../internals/object-get-own-property-descriptor */
      "7gGY").f;

      var DESCRIPTORS = __webpack_require__(
      /*! ../internals/descriptors */
      "T69T");

      var FAILS_ON_PRIMITIVES = fails(function () {
        nativeGetOwnPropertyDescriptor(1);
      });
      var FORCED = !DESCRIPTORS || FAILS_ON_PRIMITIVES; // `Object.getOwnPropertyDescriptor` method
      // https://tc39.es/ecma262/#sec-object.getownpropertydescriptor

      $({
        target: 'Object',
        stat: true,
        forced: FORCED,
        sham: !DESCRIPTORS
      }, {
        getOwnPropertyDescriptor: function getOwnPropertyDescriptor(it, key) {
          return nativeGetOwnPropertyDescriptor(toIndexedObject(it), key);
        }
      });
      /***/
    },

    /***/
    "zq+C":
    /*!*********************************************************************!*\
      !*** ./node_modules/core-js/modules/es7.reflect.delete-metadata.js ***!
      \*********************************************************************/

    /*! no static exports found */

    /***/
    function zqC(module, exports, __webpack_require__) {
      var metadata = __webpack_require__(
      /*! ./_metadata */
      "N6cJ");

      var anObject = __webpack_require__(
      /*! ./_an-object */
      "y3w9");

      var toMetaKey = metadata.key;
      var getOrCreateMetadataMap = metadata.map;
      var store = metadata.store;
      metadata.exp({
        deleteMetadata: function deleteMetadata(metadataKey, target
        /* , targetKey */
        ) {
          var targetKey = arguments.length < 3 ? undefined : toMetaKey(arguments[2]);
          var metadataMap = getOrCreateMetadataMap(anObject(target), targetKey, false);
          if (metadataMap === undefined || !metadataMap['delete'](metadataKey)) return false;
          if (metadataMap.size) return true;
          var targetMetadata = store.get(target);
          targetMetadata['delete'](targetKey);
          return !!targetMetadata.size || store['delete'](target);
        }
      });
      /***/
    }
  }, [[1, "runtime"]]]);
})();
//# sourceMappingURL=polyfills-es5.js.map