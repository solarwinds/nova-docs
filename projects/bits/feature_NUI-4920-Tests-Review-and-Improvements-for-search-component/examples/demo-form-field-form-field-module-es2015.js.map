{"version":3,"sources":["webpack:///./node_modules/raw-loader/dist/cjs.js .*\\.(ts|html|less)$?7e2f","webpack:///./demo/src/components/demo/form-field/form-field-docs/form-field-docs.example.component.html?d3b9","webpack:///./demo/src/components/demo/form-field/basic/basic-form-field.example.component.ts?d087","webpack:///./demo/src/components/demo/form-field/basic-reactive/basic-reactive-form-field.example.component.html?d420","./demo/src/components/demo/form-field/html-as-info/html-as-info-in-form-field.example.component.html","./demo/src/components/demo/form-field/html-as-info/html-as-info-in-form-field.example.component.ts","webpack:///./demo/src/components/demo/form-field/form-field-docs/form-field-docs.example.component.ts?e7f6","./demo/src/components/demo/form-field/nested-forms-as-component/nested-forms-as-component.example.component.ts","./demo/src/components/demo/form-field/nested-forms-as-component/nested-forms-as-component.example.component.html","webpack:///./demo/src/components/demo/form-field/basic/basic-form-field.example.component.html?e99f","webpack:///./demo/src/components/demo/form-field/basic-reactive/basic-reactive-form-field-custom-validation.example.component.ts?ecf9","./demo/src/components/demo/form-field/in-form/in-form-form-field.example.component.ts","./demo/src/components/demo/form-field/in-form/in-form-form-field.example.component.html","webpack:///./demo/src/components/demo/form-field/form-field.module.ts?f1eb","./demo/src/components/demo/form-field/form-field.module.ts","webpack:///./demo/src/components/demo/form-field/form-field-validation-triggering/form-field-validation-triggering.example.component.html?02ef","webpack:///./demo/src/components/demo/form-field/form-field-test/form-field-test.component.ts?08bf","webpack:///./demo/src/components/demo/form-field/in-form/in-form-form-field.example.component.ts?0915","./demo/src/components/demo/form-field/complex/form-field-complex.example.component.ts","./demo/src/components/demo/form-field/complex/form-field-complex.example.component.html","webpack:///./demo/src/components/demo/form-field/form-field-test/form-field-test.component.html?17db","webpack:///./demo/src/components/demo/form-field/form-field-visual-test/form-field-visual-test.component.ts?18c8","./demo/src/components/demo/form-field/basic-reactive/basic-reactive-form-field-custom-validation.example.component.ts","./demo/src/components/demo/form-field/basic-reactive/basic-reactive-form-field-custom-validation.example.component.html","webpack:///./demo/src/components/demo/form-field/form-field-validation-triggering/form-field-validation-triggering.example.component.ts?1987","./demo/src/components/demo/form-field/form-field-test/form-field-test.component.ts","./demo/src/components/demo/form-field/form-field-test/form-field-test.component.html","webpack:///./demo/src/components/demo/form-field/nested-forms-as-component/nested-forms-as-component.example.component.ts?2fe2","./demo/src/components/demo/form-field/form-field-docs/form-field-docs.example.component.ts","./demo/src/components/demo/form-field/form-field-docs/form-field-docs.example.component.html","./demo/src/components/demo/form-field/form-field-visual-test/form-field-visual-test.component.ts","./demo/src/components/demo/form-field/form-field-visual-test/form-field-visual-test.component.html","webpack:///./demo/src/components/demo/form-field/html-as-info/html-as-info-in-form-field.example.component.ts?33cb","webpack:///./demo/src/components/demo/form-field/complex/form-field-complex.example.component.ts?3f90","webpack:///./demo/src/components/demo/form-field/html-as-info/html-as-info-in-form-field.example.component.html?4303","./demo/src/components/demo/form-field/index.ts","./demo/src/components/demo/form-field/dynamic-disabling/form-field-dynamic-disabling.example.component.ts","./demo/src/components/demo/form-field/dynamic-disabling/form-field-dynamic-disabling.example.component.html","webpack:///./demo/src/components/demo/form-field/form-field-visual-test/form-field-visual-test.component.html?5470","webpack:///./demo/src/components/demo/form-field/nested-forms-as-component/nested-forms-as-component.example.component.html?5ca6","webpack:///./demo/src/components/demo/form-field/in-form/in-form-form-field.example.component.html?66ca","./demo/src/components/demo/form-field/basic/basic-form-field.example.component.ts","./demo/src/components/demo/form-field/basic/basic-form-field.example.component.html","webpack:///./demo/src/components/demo/form-field/index.ts?7624","webpack:///./demo/src/components/demo/form-field/dynamic-disabling/form-field-dynamic-disabling.example.component.ts?7b80","webpack:///./demo/src/components/demo/form-field/basic-reactive/basic-reactive-form-field.example.component.ts?7d68","./demo/src/components/demo/form-field/basic-reactive/basic-reactive-form-field.example.component.ts","./demo/src/components/demo/form-field/basic-reactive/basic-reactive-form-field.example.component.html","webpack:///./demo/src/components/demo/form-field/basic-hint/form-field-hint.example.component.html?91b0","webpack:///./demo/src/components/demo/form-field/basic-hint/form-field-hint.example.component.ts?a3f0","webpack:///./demo/src/components/demo/form-field/complex/form-field-complex.example.component.html?a80f","webpack:///./demo/src/components/demo/form-field/basic-reactive/basic-reactive-form-field-custom-validation.example.component.html?aef6","./demo/src/components/demo/form-field/basic-hint/form-field-hint.example.component.html","./demo/src/components/demo/form-field/basic-hint/form-field-hint.example.component.ts","webpack:///./demo/src/components/demo/form-field/dynamic-disabling/form-field-dynamic-disabling.example.component.html?c542","./demo/src/components/demo/form-field/form-field-validation-triggering/form-field-validation-triggering.example.component.ts","./demo/src/components/demo/form-field/form-field-validation-triggering/form-field-validation-triggering.example.component.html"],"names":[],"mappings":"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","file":"demo-form-field-form-field-module-es2015.js","sourcesContent":["var map = {\n\t\"./basic-hint/form-field-hint.example.component.html\": \"kbAz\",\n\t\"./basic-hint/form-field-hint.example.component.ts\": \"o/AE\",\n\t\"./basic-reactive/basic-reactive-form-field-custom-validation.example.component.html\": \"rvYP\",\n\t\"./basic-reactive/basic-reactive-form-field-custom-validation.example.component.ts\": \"7PlJ\",\n\t\"./basic-reactive/basic-reactive-form-field.example.component.html\": \"1CBV\",\n\t\"./basic-reactive/basic-reactive-form-field.example.component.ts\": \"fWie\",\n\t\"./basic/basic-form-field.example.component.html\": \"6Z8p\",\n\t\"./basic/basic-form-field.example.component.ts\": \"0IcM\",\n\t\"./complex/form-field-complex.example.component.html\": \"qA8t\",\n\t\"./complex/form-field-complex.example.component.ts\": \"P5BU\",\n\t\"./dynamic-disabling/form-field-dynamic-disabling.example.component.html\": \"xUJR\",\n\t\"./dynamic-disabling/form-field-dynamic-disabling.example.component.ts\": \"e4Ap\",\n\t\"./form-field-docs/form-field-docs.example.component.html\": \"07mq\",\n\t\"./form-field-docs/form-field-docs.example.component.ts\": \"5/Y5\",\n\t\"./form-field-test/form-field-test.component.html\": \"F9s2\",\n\t\"./form-field-test/form-field-test.component.ts\": \"CL+U\",\n\t\"./form-field-validation-triggering/form-field-validation-triggering.example.component.html\": \"Au9I\",\n\t\"./form-field-validation-triggering/form-field-validation-triggering.example.component.ts\": \"GYdM\",\n\t\"./form-field-visual-test/form-field-visual-test.component.html\": \"VHCc\",\n\t\"./form-field-visual-test/form-field-visual-test.component.ts\": \"GMhJ\",\n\t\"./form-field.module.ts\": \"8et7\",\n\t\"./html-as-info/html-as-info-in-form-field.example.component.html\": \"QwNZ\",\n\t\"./html-as-info/html-as-info-in-form-field.example.component.ts\": \"M8su\",\n\t\"./in-form/in-form-form-field.example.component.html\": \"Zso1\",\n\t\"./in-form/in-form-form-field.example.component.ts\": \"CRXI\",\n\t\"./index.ts\": \"diQS\",\n\t\"./nested-forms-as-component/nested-forms-as-component.example.component.html\": \"XKa7\",\n\t\"./nested-forms-as-component/nested-forms-as-component.example.component.ts\": \"L+Iw\"\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = \"+YJB\";","export default \"<h2>Required Modules</h2>\\n<ul>\\n    <li>\\n        <code>NuiFormFieldModule</code>\\n    </li>\\n</ul>\\n\\n<h2>Basic Usage</h2>\\n\\n<p>\\n    Form Field is a convenient wrapper that helps to combine your inputs in a form. Currently we support these types of form items (but please note that not all of these components are in alpha stage):\\n</p>\\n<ul>\\n    <li>textbox</li>\\n    <li>textarea</li>\\n    <li>textNumber</li>\\n    <li>checkbox</li>\\n    <li>checkboxGroup</li>\\n    <li>combobox</li>\\n    <li>radioGroup</li>\\n    <li>switch</li>\\n    <li>select</li>\\n    <li>datePicker</li>\\n    <li>timePicker</li>\\n    <!--<li>dateTimePicker</li>-->\\n    <!--<li>timeFramePicker</li>-->\\n</ul>\\n\\n<p>\\n    <code>nui-form-field</code> is a building block for any form. It gives an ability to add label for any input,\\n    complementary help text under it and info icon with a popover to display some additional text.\\n</p>\\n\\n<nui-example-wrapper filenamePrefix=\\\"basic-form-field\\\" exampleTitle=\\\"Basic Form Field\\\">\\n    <nui-form-field-basic-example></nui-form-field-basic-example>\\n</nui-example-wrapper>\\n\\n<h2>Validation Messages Inside Reactive Form</h2>\\n<p>\\n    In order to use <code>nui-form-field</code> within reactive form you need to pass it access to a control <code>[control]=\\\"reactiveForm.controls['email']\\\"</code>.\\n    Also <code>formControlName</code> needs to be set directly on the input element you're using with the name of a form control.\\n</p>\\n<p>\\n    <code>nui-validation-message</code> component can be added inside <code>nui-form-field</code>. It has 2 inputs: <code>show</code> and <code>for</code>.\\n    Form Field Component will change <code>show</code> by itself to control visibility of the error message (this input is useful for consumers only outside <code>nui-form-field</code>),\\n    <code>for</code> input accepts validator name.\\n</p>\\n\\n<nui-example-wrapper filenamePrefix=\\\"basic-reactive-form-field\\\" exampleTitle=\\\"Validation Messages Inside Reactive Form\\\">\\n    <nui-form-field-basic-reactive-example></nui-form-field-basic-reactive-example>\\n</nui-example-wrapper>\\n\\n<p>\\n    For customization purposes, we provide the <code>nui-custom-validation-message</code>\\n    component that does not contain internal styling and html elements.\\n    <b>Input properties are similar to <code>nui-validation-message</code></b>\\n</p>\\n<nui-example-wrapper filenamePrefix=\\\"basic-reactive-form-field-custom-validation\\\" exampleTitle=\\\"Custom Styled Validation Messages Inside Reactive Form\\\">\\n    <nui-form-field-basic-reactive-custom-validation-example></nui-form-field-basic-reactive-custom-validation-example>\\n</nui-example-wrapper>\\n\\n<h2>Compound Validation</h2>\\n\\n<p>\\n    In the example below an example of a compound validation can be seen.\\n    To validate group of fields you need to find the first common parent FormGroup and add validator there\\n    (click \\\"Source\\\" above and open the TS tab to see the <code>matchPassword</code> validator).\\n</p>\\n<p>\\n    The current validation state of the form is displayed at the bottom of the example.\\n</p>\\n\\n<nui-example-wrapper filenamePrefix=\\\"form-field-complex\\\" exampleTitle=\\\"Form Field with custom validation\\\">\\n    <nui-form-field-complex-example></nui-form-field-complex-example>\\n</nui-example-wrapper>\\n\\n<h2>HTML as info</h2>\\n\\n<p>\\n    There is a possibility to have additional information to each field. It can be done using either <code>info</code>\\n    input, that is just a text, passed as a string, or <code>infoTemplate</code> input, that uses html inside the <code>ng-template</code>.\\n    Note: the template is provided completely by the user and we do not do any sanitizing.\\n</p>\\n\\n<nui-example-wrapper filenamePrefix=\\\"html-as-info-in-form-field\\\" exampleTitle=\\\"HTML inside popover\\\">\\n    <nui-form-field-with-html-example></nui-form-field-with-html-example>\\n</nui-example-wrapper>\\n\\n<h2>Hint Text</h2>\\n\\n<p>\\n    Hint text can give the user additional information about a form field and will appear below the field's user input area.\\n    The text for a hint can be specified in one of two ways: either by setting the <code>{{getItemConfigKey('hint')}}</code> input with a string value\\n    or by providing a templateRef through the <code>{{getItemConfigKey('hintTemplate')}}</code> input.\\n</p>\\n\\n<nui-example-wrapper filenamePrefix=\\\"form-field-hint\\\" exampleTitle=\\\"Form Field Hints\\\">\\n    <nui-form-field-hint-basic-example></nui-form-field-hint-basic-example>\\n</nui-example-wrapper>\\n\\n<h2>Dynamic Disabling</h2>\\n\\n<p>\\n\\tExample to show possibility of controlling disabled state (setting initial, dynamic change of state).\\n</p>\\n\\n<nui-example-wrapper filenamePrefix=\\\"form-field-dynamic-disabling\\\" exampleTitle=\\\"Form Field with dynamic disabling\\\">\\n    <nui-form-field-dynamic-disabling-example></nui-form-field-dynamic-disabling-example>\\n</nui-example-wrapper>\\n\\n\\n<h2>Nested Form Components</h2>\\n\\n<p>\\n    In order to avoid code duplication, it may be useful to combine a form from several components.\\n    In this example there is a Form Group that consists of Nickname control an 2 child Form Groups represented by separate components:\\n    one is for personal data (name, surname) called <code>nui-first-custom-form-example</code>\\n    and another is for address (city, address) called <code>nui-second-custom-form-example</code>.\\n    In order to achieve that we need to let the parent form know that there are some child groups that should be appended.\\n    This is done by calling <code>formInitialized</code> method from the parent form group on the event <code>formReady</code> of the child.\\n    Also there is a <code>CustomFormFieldExampleComponent</code> from previous example reused in child components to illustrate\\n    even more flexibility of this approach.\\n</p>\\n<p>\\n    The current validation state of the form is displayed at the bottom of the example.\\n</p>\\n<p>\\n    Note that there are several ways to use components as a form group, but this is currently the most convenient way.\\n</p>\\n\\n<nui-example-wrapper filenamePrefix=\\\"nested-forms-as-component\\\" exampleTitle=\\\"Nested form components\\\">\\n    <nui-nested-forms-as-component-example></nui-nested-forms-as-component-example>\\n</nui-example-wrapper>\\n\\n<h2>Various Components in a Form</h2>\\n\\n<p>\\n    This example shows all possible inputs combined in one form\\n</p>\\n\\n<nui-example-wrapper filenamePrefix=\\\"in-form-form-field\\\" exampleTitle=\\\"Form Field inside the Form\\\">\\n    <nui-form-field-in-form-example></nui-form-field-in-form-example>\\n</nui-example-wrapper>\\n\\n<h2>Validation Triggering</h2>\\n\\n<p>\\n    This example shows all possible ways for validation message triggering by touch, value changes or status changes event.\\n</p>\\n\\n<nui-example-wrapper filenamePrefix=\\\"form-field-validation-triggering\\\" exampleTitle=\\\"Form Field Validation Triggering\\\">\\n    <nui-form-field-validation-triggering-example></nui-form-field-validation-triggering-example>\\n</nui-example-wrapper>\\n\\n\";","export default \"import { Component } from \\\"@angular/core\\\";\\n\\n@Component({\\n    selector: \\\"nui-form-field-basic-example\\\",\\n    templateUrl: \\\"./basic-form-field.example.component.html\\\",\\n})\\nexport class FormFieldBasicExampleComponent {\\n\\n}\\n\";","export default \"<form [formGroup]=\\\"reactiveForm\\\">\\n    <nui-form-field caption=\\\"Email address\\\" i18n-caption\\n                    hint=\\\"Try to change value or remove everything\\\"\\n                    i18n-hint\\n                    [control]=\\\"reactiveForm.controls['email']\\\">\\n        <nui-textbox formControlName=\\\"email\\\" type=\\\"email\\\"></nui-textbox>\\n        <nui-validation-message for=\\\"required\\\" i18n>\\n            This is required\\n        </nui-validation-message>\\n        <nui-validation-message for=\\\"email\\\" i18n>\\n            This should be a valid email\\n        </nui-validation-message>\\n    </nui-form-field>\\n</form>\\n\";","<nui-form-field caption=\"This caption is generic for all form fields\" i18n-caption\n                [infoTemplate]=\"template\"\n                hint=\"Hint may be useful\" i18n-hint>\n    <nui-textbox></nui-textbox>\n</nui-form-field>\n<ng-template #template>\n    New custom info text.\n    <p>My paragraph. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Suspendisse mollis purus ut odio tempus, ut venenatis diam egestas.</p>\n    <h1>My header</h1>\n    <a href=\"http://apollo-docs.swdev.local/\" target=\"_blank\">My link</a>\n    <br>\n    <i>Italic text</i>\n    <br>\n    <strong>Strong text</strong>\n</ng-template>\n","import { Component } from \"@angular/core\";\n\n@Component({\n    selector: \"nui-form-field-with-html-example\",\n    templateUrl: \"./html-as-info-in-form-field.example.component.html\",\n})\nexport class FormFieldWithHTMLExampleComponent {\n\n}\n","export default \"import { Component } from \\\"@angular/core\\\";\\nimport {FormFieldComponent} from \\\"@nova-ui/bits\\\";\\n\\n@Component({\\n    selector: \\\"nui-form-field-docs-example\\\",\\n    templateUrl: \\\"./form-field-docs.example.component.html\\\",\\n})\\nexport class FormFieldExampleComponent {\\n    getItemConfigKey(key: keyof FormFieldComponent): string {\\n        return key;\\n    }\\n}\\n\";","import { Component, EventEmitter, Inject, OnInit, Output } from \"@angular/core\";\nimport { FormBuilder, FormGroup, Validators } from \"@angular/forms\";\nimport { ToastService } from \"@nova-ui/bits\";\n\n@Component({\n    selector: \"nui-nested-forms-as-component-example\",\n    templateUrl: \"./nested-forms-as-component.example.component.html\",\n})\nexport class NestedFormsAsComponentExampleComponent implements OnInit {\n    public fancyForm: FormGroup;\n\n    constructor(private fb: FormBuilder,\n                @Inject(ToastService) private toastService: ToastService) {}\n\n    ngOnInit() {\n\n        this.fancyForm = this.fb.group({\n            nickname: this.fb.control (\"\", [Validators.required, Validators.min(3)]),\n        });\n    }\n\n    formInitialized(name: string, form: FormGroup) {\n        this.fancyForm.setControl(name, form);\n    }\n    public onSubmit(value: FormGroup) {\n        this.toastService.success({\n            message: `Form is valid: ${value.valid}`,\n            title: \"Submit\",\n        });\n    }\n}\n\n/**\n * Component representing form group for name and surname\n */\n@Component({\n    selector: \"nui-first-custom-form-example\",\n    template: `<div [formGroup]=\"firstForm\">\n        <nui-form-field class=\"d-block mb-4\"\n                        caption=\"First Name\" i18n-caption\n                        [control]=\"firstForm.controls['firstName']\">\n            <nui-textbox formControlName=\"firstName\"></nui-textbox>\n            <nui-validation-message for=\"required\" i18n>\n                This is required\n            </nui-validation-message>\n        </nui-form-field>\n        <nui-form-field class=\"d-block mb-4\"\n                        caption=\"Last Name\" i18n-caption\n                        [control]=\"firstForm.controls['lastName']\">\n            <nui-textbox formControlName=\"lastName\"></nui-textbox>\n            <nui-validation-message for=\"required\" i18n>\n                This is required\n            </nui-validation-message>\n        </nui-form-field>\n    </div>`,\n})\nexport class FirstCustomFormExampleComponent implements OnInit {\n    @Output() formReady = new EventEmitter<FormGroup>();\n    public firstForm: FormGroup;\n\n    ngOnInit() {\n        this.firstForm = this.fb.group({\n            firstName: this.fb.control (\"\", Validators.required),\n            lastName: this.fb.control (\"\", Validators.required),\n        });\n\n        this.formReady.emit(this.firstForm);\n    }\n\n    constructor(private fb: FormBuilder) {}\n}\n\n/**\n * Component representing address form group\n */\n@Component({\n    selector: \"nui-second-custom-form-example\",\n    template: `\n        <div [formGroup]=\"secondForm\">\n            <nui-form-field class=\"d-block mb-4\"\n                            caption=\"City\" i18n-caption\n                            [control]=\"secondForm.controls['city']\">\n                <nui-textbox formControlName=\"city\"></nui-textbox>\n                <nui-validation-message for=\"required\" i18n>\n                    This is required\n                </nui-validation-message>\n            </nui-form-field>\n            <nui-form-field class=\"d-block mb-4\"\n                            caption=\"Address\" i18n-caption\n                            [control]=\"secondForm.controls['address']\">\n                <nui-textbox formControlName=\"address\"></nui-textbox>\n                <nui-validation-message for=\"required\" i18n>\n                    This is required\n                </nui-validation-message>\n            </nui-form-field>\n        </div>`,\n})\nexport class SecondCustomFormExampleComponent implements OnInit {\n    @Output() formReady = new EventEmitter<FormGroup>();\n    public secondForm: FormGroup;\n\n    ngOnInit() {\n        this.secondForm = this.fb.group({\n            city: null,\n            address: null,\n        });\n\n        this.formReady.emit(this.secondForm);\n    }\n\n    constructor(private fb: FormBuilder) {}\n}\n","<form [formGroup]=\"fancyForm\" (submit)=\"onSubmit(fancyForm)\" class=\"nui-edge-definer\">\n    <nui-form-field class=\"d-block mb-4\"\n                    caption=\"Nickname\" i18n-caption\n                    hint=\"Some pretty long text with hint\" i18n-hint\n                    info=\"text\"\n                    [control]=\"fancyForm.controls['nickname']\">\n        <nui-textbox formControlName=\"nickname\"></nui-textbox>\n        <nui-validation-message for=\"required\" i18n>\n            This is required\n        </nui-validation-message>\n    </nui-form-field>\n    <nui-first-custom-form-example (formReady)=\"formInitialized('firstForm', $event)\"></nui-first-custom-form-example>\n    <nui-second-custom-form-example (formReady)=\"formInitialized('secondForm', $event)\"></nui-second-custom-form-example>\n    <pre>fancyForm.valid = {{fancyForm.valid}}</pre>\n</form>\n","export default \"<nui-form-field caption=\\\"This caption is generic for all form fields\\\" i18n-caption\\n                info=\\\"Some info to show\\\" i18n-info\\n                hint=\\\"Hint may be useful\\\" i18n-hint>\\n    <nui-textbox></nui-textbox>\\n</nui-form-field>\\n\";","export default \"import { Component, OnInit } from \\\"@angular/core\\\";\\nimport { FormBuilder, FormGroup, Validators } from \\\"@angular/forms\\\";\\n\\n@Component({\\n    selector: \\\"nui-form-field-basic-reactive-custom-validation-example\\\",\\n    templateUrl: \\\"./basic-reactive-form-field-custom-validation.example.component.html\\\",\\n})\\nexport class FormFieldBasicReactiveCustomValidationExampleComponent implements OnInit {\\n    public reactiveForm: FormGroup;\\n\\n    constructor(private formBuilder: FormBuilder) {\\n    }\\n\\n    public ngOnInit() {\\n        this.reactiveForm = this.formBuilder.group({\\n            email: this.formBuilder.control(\\\"\\\", [\\n                Validators.required,\\n                Validators.email,\\n            ]),\\n        });\\n    }\\n}\\n\";","import { ChangeDetectorRef, Component, OnInit } from \"@angular/core\";\nimport { FormBuilder, FormGroup, Validators } from \"@angular/forms\";\nimport moment from \"moment/moment\";\n\n@Component({\n    selector: \"nui-form-field-in-form-example\",\n    templateUrl: \"./in-form-form-field.example.component.html\",\n})\nexport class FormFieldInFormExampleComponent implements OnInit {\n    public fancyForm: FormGroup;\n\n    public vegetables = [$localize `Cabbage`, $localize `Potato`, $localize `Tomato`, $localize `Carrot`];\n\n    constructor(private formBuilder: FormBuilder,\n                private changeDetector: ChangeDetectorRef) {}\n    public ngOnInit() {\n        this.fancyForm = this.formBuilder.group({\n            textbox: this.formBuilder.control(\"\", [\n                Validators.required,\n            ]),\n            textNumber: this.formBuilder.control(0, [\n                Validators.required,\n            ]),\n            checkbox: this.formBuilder.control(true, [\n                Validators.requiredTrue,\n            ]),\n            checkboxGroup: this.formBuilder.control([\"Cabbage\", \"Potato\"] , [\n                Validators.required,\n            ]),\n            radioGroup: this.formBuilder.control(this.vegetables[1], [\n                Validators.required,\n            ]),\n            switch: this.formBuilder.control(false, [ Validators.requiredTrue,\n            ]),\n            select: this.formBuilder.control(\"\", [\n                Validators.required,\n            ]),\n            combobox: this.formBuilder.control(\"\", [\n                Validators.required,\n            ]),\n            datePicker: this.formBuilder.control(moment()),\n            timePicker: this.formBuilder.control(\"\", [\n                Validators.required,\n            ]),\n            dateTimePicker: this.formBuilder.control(moment(), [\n                Validators.required,\n            ]),\n        });\n    }\n}\n","<form [formGroup]=\"fancyForm\" class=\"nui-edge-definer\">\n    <nui-form-field class=\"d-block mb-4\"\n                    caption=\"Textbox\" i18n-caption\n                    hint=\"This is a configurable help hint\" i18n-hint\n                    info=\"text\"\n                    [control]=\"fancyForm.controls['textbox']\" >\n        <nui-textbox id=\"input-textbox\"\n                    formControlName=\"textbox\"></nui-textbox>\n        <nui-validation-message for=\"required\" i18n>\n            This field is required\n        </nui-validation-message>\n    </nui-form-field>\n    <nui-form-field class=\"d-block mb-4\"\n                    caption=\"Textbox number\" i18n-caption\n                    hint=\"This is a configurable help hint\" i18n-hint\n                    info=\"text\"\n                    [control]=\"fancyForm.controls['textNumber']\" >\n        <nui-textbox-number id=\"input-textNumber\"\n                            formControlName=\"textNumber\"></nui-textbox-number>\n        <nui-validation-message for=\"required\" i18n>\n            This field is required\n        </nui-validation-message>\n    </nui-form-field>\n    <nui-form-field class=\"d-block mb-4\"\n                    caption=\"Checkbox\" i18n-caption\n                    hint=\"Some pretty long text with hint\" i18n-hint\n                    info=\"text\"\n                    [control]=\"fancyForm.controls['checkbox']\">\n        <nui-checkbox id=\"input-checkbox\"\n                    formControlName=\"checkbox\" required></nui-checkbox>\n        <nui-validation-message for=\"required\" i18n>\n            This field is required\n        </nui-validation-message>\n    </nui-form-field>\n    <nui-form-field class=\"d-block mb-4\"\n                    caption=\"Checkbox Group\" i18n-caption\n                    hint=\"Some pretty long text with hint\" i18n-hint\n                    info=\"text\"\n                    [control]=\"fancyForm.controls['checkboxGroup']\">\n        <nui-checkbox-group id=\"input-checkboxGroup\"\n                            formControlName=\"checkboxGroup\"\n                            name=\"vegetable\">\n            <nui-checkbox *ngFor=\"let vegetable of vegetables;\"\n                        [value]=\"vegetable\">\n                {{vegetable}}\n            </nui-checkbox>\n        </nui-checkbox-group>\n        <nui-validation-message for=\"required\" i18n>\n            This field is required\n        </nui-validation-message>\n    </nui-form-field>\n    <nui-form-field class=\"d-block mb-4\"\n                    caption=\"Radio Group\" i18n-caption\n                    hint=\"Some pretty long text with hint\" i18n-hint\n                    info=\"text\"\n                    [control]=\"fancyForm.controls['radioGroup']\">\n        <nui-radio-group id=\"input-radioGroup\"\n                        formControlName=\"radioGroup\"\n                        name=\"vegetable\" required>\n            <nui-radio *ngFor=\"let vegetable of vegetables\"\n                    [value]=\"vegetable\">\n                {{vegetable}}\n            </nui-radio>\n        </nui-radio-group>\n        <nui-validation-message for=\"required\" i18n>\n            This field is required\n        </nui-validation-message>\n    </nui-form-field>\n    <nui-form-field class=\"d-block mb-4\"\n                    caption=\"Switch\" i18n-caption\n                    hint=\"Some pretty long text with hint\" i18n-hint\n                    info=\"text\"\n                    [control]=\"fancyForm.controls['switch']\">\n        <nui-switch id=\"input-switch\"\n                    formControlName=\"switch\"></nui-switch>\n        <nui-validation-message for=\"required\">\n            This field is required\n        </nui-validation-message>\n    </nui-form-field>\n    <nui-form-field class=\"d-block mb-4\"\n                    caption=\"Select\" i18n-caption\n                    hint=\"Some pretty long text with hint\" i18n-hint\n                    info=\"text\"\n                    [control]=\"fancyForm.controls['select']\">\n        <nui-select id=\"input-select\"\n                    formControlName=\"select\"\n                    [itemsSource]=\"vegetables\"></nui-select>\n        <nui-validation-message for=\"required\" i18n>\n            This field is required\n        </nui-validation-message>\n    </nui-form-field>\n    <nui-form-field class=\"d-block mb-4\"\n                    caption=\"Combobox\" i18n-caption\n                    hint=\"Some pretty long text with hint\" i18n-hint\n                    info=\"text\"\n                    [control]=\"fancyForm.controls['combobox']\">\n        <nui-combobox id=\"input-combobox\"\n                    formControlName=\"combobox\"\n                    [itemsSource]=\"vegetables\"></nui-combobox>\n        <nui-validation-message for=\"required\" i18n>\n            This field is required\n        </nui-validation-message>\n    </nui-form-field>\n    <nui-form-field class=\"d-block mb-4\"\n                    caption=\"Date Picker\" i18n-caption\n                    hint=\"Some pretty long text with hint\" i18n-hint\n                    info=\"text\"\n                    [control]=\"fancyForm.controls['datePicker']\">\n        <nui-date-picker id=\"input-datePicker\"\n                        formControlName=\"datePicker\"></nui-date-picker>\n        <nui-validation-message for=\"invalidFormat\" i18n>\n            The format is incorrect\n        </nui-validation-message>\n    </nui-form-field>\n    <nui-form-field class=\"d-block mb-4\"\n                    caption=\"Time Picker\" i18n-caption\n                    hint=\"Some pretty long text with hint\" i18n-hint\n                    info=\"text\"\n                    [control]=\"fancyForm.controls['timePicker']\">\n        <nui-time-picker id=\"input-timePicker\"\n                        formControlName=\"timePicker\"></nui-time-picker>\n        <nui-validation-message for=\"required\" i18n>\n            This field is required\n        </nui-validation-message>\n    </nui-form-field>\n    <nui-form-field caption=\"Date Time Picker\"\n        hint=\"Some pretty long text with hint. Longer than previous even. This text should not ellipsify.\"\n        info=\"text\">\n        <nui-date-time-picker id=\"input-dateTimePicker\"\n                            formControlName=\"dateTimePicker\">\n        </nui-date-time-picker>\n        <nui-validation-message>\n            This field is required\n        </nui-validation-message>\n    </nui-form-field>\n</form>\n","export default \"import { NgModule } from \\\"@angular/core\\\";\\nimport { FormsModule, ReactiveFormsModule } from \\\"@angular/forms\\\";\\nimport { RouterModule } from \\\"@angular/router\\\";\\nimport {\\n    DEMO_PATH_TOKEN,\\n    NuiButtonModule,\\n    NuiCheckboxModule,\\n    NuiDatePickerModule,\\n    NuiDateTimePickerModule,\\n    NuiDocsModule,\\n    NuiFormFieldModule,\\n    NuiIconModule,\\n    NuiRadioModule,\\n    NuiSelectModule,\\n    NuiSelectV2Module,\\n    NuiSwitchModule,\\n    NuiTextboxModule,\\n    NuiTimePickerModule,\\n    NuiValidationMessageModule,\\n    SrlcStage,\\n} from \\\"@nova-ui/bits\\\";\\n\\nimport { FormFieldBasicHintExampleComponent } from \\\"./basic-hint/form-field-hint.example.component\\\";\\nimport { FormFieldBasicReactiveCustomValidationExampleComponent } from \\\"./basic-reactive/basic-reactive-form-field-custom-validation.example.component\\\";\\nimport {\\n    FirstCustomFormExampleComponent,\\n    FormFieldBasicExampleComponent,\\n    FormFieldBasicReactiveExampleComponent,\\n    FormFieldComplexExampleComponent,\\n    FormFieldDynamicDisablingExampleComponent,\\n    FormFieldExampleComponent,\\n    FormFieldInFormExampleComponent,\\n    FormFieldTestComponent,\\n    FormFieldValidationTriggeringxampleComponent,\\n    FormFieldVisualTestComponent,\\n    FormFieldWithHTMLExampleComponent,\\n    NestedFormsAsComponentExampleComponent,\\n    SecondCustomFormExampleComponent,\\n} from \\\"./index\\\";\\n\\nconst routes = [\\n    {\\n        path: \\\"\\\",\\n        component: FormFieldExampleComponent,\\n        data: {\\n            \\\"srlc\\\": {\\n                \\\"stage\\\": SrlcStage.ga,\\n            },\\n            showThemeSwitcher: true,\\n        },\\n    },\\n    {\\n        path: \\\"form-field-test\\\",\\n        component: FormFieldTestComponent,\\n        data: {\\n            \\\"srlc\\\": {\\n                \\\"hideIndicator\\\": true,\\n            },\\n        },\\n    },\\n    {\\n        path: \\\"form-field-visual-test\\\",\\n        component: FormFieldVisualTestComponent,\\n        data: {\\n            \\\"srlc\\\": {\\n                \\\"hideIndicator\\\": true,\\n            },\\n        },\\n    },\\n    {\\n        path: \\\"form-field-validation-triggering\\\",\\n        component: FormFieldValidationTriggeringxampleComponent,\\n        data: {\\n            \\\"srlc\\\": {\\n                \\\"hideIndicator\\\": true,\\n            },\\n        },\\n    },\\n];\\n\\n@NgModule({\\n    imports: [\\n        NuiButtonModule,\\n        NuiFormFieldModule,\\n        NuiValidationMessageModule,\\n        NuiTextboxModule,\\n        FormsModule,\\n        ReactiveFormsModule,\\n        NuiSelectModule,\\n        NuiRadioModule,\\n        NuiIconModule,\\n        NuiDatePickerModule,\\n        NuiDocsModule,\\n        NuiSwitchModule,\\n        NuiDateTimePickerModule,\\n        NuiTimePickerModule,\\n        NuiCheckboxModule,\\n        RouterModule.forChild(routes),\\n        NuiSelectV2Module,\\n    ],\\n    declarations: [\\n        FormFieldExampleComponent,\\n        FormFieldBasicExampleComponent,\\n        FormFieldBasicHintExampleComponent,\\n        FormFieldBasicReactiveExampleComponent,\\n        FormFieldBasicReactiveCustomValidationExampleComponent,\\n        FormFieldComplexExampleComponent,\\n        FormFieldDynamicDisablingExampleComponent,\\n        FormFieldInFormExampleComponent,\\n        FormFieldTestComponent,\\n        FormFieldVisualTestComponent,\\n        FormFieldWithHTMLExampleComponent,\\n        NestedFormsAsComponentExampleComponent,\\n        FirstCustomFormExampleComponent,\\n        SecondCustomFormExampleComponent,\\n        FormFieldValidationTriggeringxampleComponent,\\n    ],\\n    providers: [\\n        {\\n            provide: DEMO_PATH_TOKEN,\\n            useFactory: () => (<any>require).context(`!!raw-loader!./`, true, /.*\\\\.(ts|html|less)$/),\\n        },\\n    ],\\n    exports: [\\n        RouterModule,\\n    ],\\n})\\nexport class FormFieldModule {\\n}\\n\";","import { NgModule } from \"@angular/core\";\nimport { FormsModule, ReactiveFormsModule } from \"@angular/forms\";\nimport { RouterModule } from \"@angular/router\";\nimport {\n    DEMO_PATH_TOKEN,\n    NuiButtonModule,\n    NuiCheckboxModule,\n    NuiDatePickerModule,\n    NuiDateTimePickerModule,\n    NuiDocsModule,\n    NuiFormFieldModule,\n    NuiIconModule,\n    NuiRadioModule,\n    NuiSelectModule,\n    NuiSelectV2Module,\n    NuiSwitchModule,\n    NuiTextboxModule,\n    NuiTimePickerModule,\n    NuiValidationMessageModule,\n    SrlcStage,\n} from \"@nova-ui/bits\";\n\nimport { FormFieldBasicHintExampleComponent } from \"./basic-hint/form-field-hint.example.component\";\nimport { FormFieldBasicReactiveCustomValidationExampleComponent } from \"./basic-reactive/basic-reactive-form-field-custom-validation.example.component\";\nimport {\n    FirstCustomFormExampleComponent,\n    FormFieldBasicExampleComponent,\n    FormFieldBasicReactiveExampleComponent,\n    FormFieldComplexExampleComponent,\n    FormFieldDynamicDisablingExampleComponent,\n    FormFieldExampleComponent,\n    FormFieldInFormExampleComponent,\n    FormFieldTestComponent,\n    FormFieldValidationTriggeringxampleComponent,\n    FormFieldVisualTestComponent,\n    FormFieldWithHTMLExampleComponent,\n    NestedFormsAsComponentExampleComponent,\n    SecondCustomFormExampleComponent,\n} from \"./index\";\n\nconst routes = [\n    {\n        path: \"\",\n        component: FormFieldExampleComponent,\n        data: {\n            \"srlc\": {\n                \"stage\": SrlcStage.ga,\n            },\n            showThemeSwitcher: true,\n        },\n    },\n    {\n        path: \"form-field-test\",\n        component: FormFieldTestComponent,\n        data: {\n            \"srlc\": {\n                \"hideIndicator\": true,\n            },\n        },\n    },\n    {\n        path: \"form-field-visual-test\",\n        component: FormFieldVisualTestComponent,\n        data: {\n            \"srlc\": {\n                \"hideIndicator\": true,\n            },\n        },\n    },\n    {\n        path: \"form-field-validation-triggering\",\n        component: FormFieldValidationTriggeringxampleComponent,\n        data: {\n            \"srlc\": {\n                \"hideIndicator\": true,\n            },\n        },\n    },\n];\n\n@NgModule({\n    imports: [\n        NuiButtonModule,\n        NuiFormFieldModule,\n        NuiValidationMessageModule,\n        NuiTextboxModule,\n        FormsModule,\n        ReactiveFormsModule,\n        NuiSelectModule,\n        NuiRadioModule,\n        NuiIconModule,\n        NuiDatePickerModule,\n        NuiDocsModule,\n        NuiSwitchModule,\n        NuiDateTimePickerModule,\n        NuiTimePickerModule,\n        NuiCheckboxModule,\n        RouterModule.forChild(routes),\n        NuiSelectV2Module,\n    ],\n    declarations: [\n        FormFieldExampleComponent,\n        FormFieldBasicExampleComponent,\n        FormFieldBasicHintExampleComponent,\n        FormFieldBasicReactiveExampleComponent,\n        FormFieldBasicReactiveCustomValidationExampleComponent,\n        FormFieldComplexExampleComponent,\n        FormFieldDynamicDisablingExampleComponent,\n        FormFieldInFormExampleComponent,\n        FormFieldTestComponent,\n        FormFieldVisualTestComponent,\n        FormFieldWithHTMLExampleComponent,\n        NestedFormsAsComponentExampleComponent,\n        FirstCustomFormExampleComponent,\n        SecondCustomFormExampleComponent,\n        FormFieldValidationTriggeringxampleComponent,\n    ],\n    providers: [\n        {\n            provide: DEMO_PATH_TOKEN,\n            useFactory: () => (<any>require).context(`!!raw-loader!./`, true, /.*\\.(ts|html|less)$/),\n        },\n    ],\n    exports: [\n        RouterModule,\n    ],\n})\nexport class FormFieldModule {\n}\n","export default \"<form [formGroup]=\\\"reactiveForm\\\">\\n    <nui-form-field class=\\\"d-block mb-4\\\"\\n                    caption=\\\"Email address\\\" i18n-caption\\n                    hint=\\\"Try to change value or remove everything\\\"\\n                    i18n-hint\\n                    [control]=\\\"reactiveForm.controls['email']\\\">\\n        <nui-textbox formControlName=\\\"email\\\" type=\\\"email\\\"></nui-textbox>\\n        <nui-validation-message for=\\\"required\\\" i18n>\\n            This is required\\n        </nui-validation-message>\\n        <nui-validation-message for=\\\"email\\\" i18n>\\n            This should be a valid email\\n        </nui-validation-message>\\n    </nui-form-field>\\n</form>\\n<div class=\\\"btn-group\\\">\\n    <button nui-button type=\\\"button\\\" (click)=\\\"onAddValidators()\\\" i18n>Add Validators</button>\\n    <button nui-button type=\\\"button\\\" (click)=\\\"onTouch()\\\" i18n>Touch</button>\\n    <button nui-button type=\\\"button\\\" (click)=\\\"onValueChange()\\\" i18n>Value Change</button>\\n    <button nui-button type=\\\"button\\\" (click)=\\\"onStatusChange()\\\" i18n>Status Change</button>\\n    <button nui-button type=\\\"button\\\" (click)=\\\"onReset()\\\" i18n>Reset</button>\\n</div>\\n\\n\\n\";","export default \"import { Component, OnInit } from \\\"@angular/core\\\";\\nimport { FormBuilder, FormGroup, Validators } from \\\"@angular/forms\\\";\\nimport moment from \\\"moment/moment\\\";\\n\\n@Component({\\n    selector: \\\"nui-form-field-test\\\",\\n    templateUrl: \\\"./form-field-test.component.html\\\",\\n})\\nexport class FormFieldTestComponent implements OnInit {\\n    public dynamicForm: FormGroup;\\n\\n    public dateTimePickerModel: string;\\n\\n    constructor(private formBuilder: FormBuilder) {\\n    }\\n\\n    public vegetables = [$localize `Cabbage`, $localize `Potato`, $localize `Tomato`, $localize `Carrot`];\\n\\n    public ngOnInit(): void {\\n        this.dynamicForm = this.formBuilder.group({\\n            textbox: this.formBuilder.control(\\\"\\\", Validators.required),\\n            textboxNumber: this.formBuilder.control(\\\"\\\", Validators.required),\\n            radio: this.formBuilder.control({}, Validators.required),\\n            checkbox: this.formBuilder.control(true, Validators.required),\\n            checkboxGroup: this.formBuilder.control(\\\"\\\", Validators.required),\\n            switch: this.formBuilder.control(true, Validators.required),\\n            selectV2: this.formBuilder.control(\\\"apple\\\", Validators.required),\\n            comboboxV2: this.formBuilder.control(\\\"apple\\\", Validators.required),\\n            datepicker: this.formBuilder.control(moment(), Validators.required),\\n            timepicker: this.formBuilder.control({}, Validators.required),\\n            dateTimePicker: this.formBuilder.control(moment(\\\"04/09/1989\\\", \\\"L\\\"), [ // \\\"L\\\" is \\\"MM/DD/YYY\\\" in moment.js\\n                Validators.required,\\n            ]),\\n        });\\n        this.dynamicForm.disable();\\n        this.dynamicForm.valueChanges.subscribe(value => this.dateTimePickerModel =  moment(value[\\\"dateTimePicker\\\"]).format(\\\"LLLL\\\"));\\n    }\\n\\n    public toggleDisabledState(): void {\\n        if (this.dynamicForm.disabled) {\\n            this.dynamicForm.enable();\\n        } else {\\n            this.dynamicForm.disable();\\n        }\\n    }\\n}\\n\";","export default \"import { ChangeDetectorRef, Component, OnInit } from \\\"@angular/core\\\";\\nimport { FormBuilder, FormGroup, Validators } from \\\"@angular/forms\\\";\\nimport moment from \\\"moment/moment\\\";\\n\\n@Component({\\n    selector: \\\"nui-form-field-in-form-example\\\",\\n    templateUrl: \\\"./in-form-form-field.example.component.html\\\",\\n})\\nexport class FormFieldInFormExampleComponent implements OnInit {\\n    public fancyForm: FormGroup;\\n\\n    public vegetables = [$localize `Cabbage`, $localize `Potato`, $localize `Tomato`, $localize `Carrot`];\\n\\n    constructor(private formBuilder: FormBuilder,\\n                private changeDetector: ChangeDetectorRef) {}\\n    public ngOnInit() {\\n        this.fancyForm = this.formBuilder.group({\\n            textbox: this.formBuilder.control(\\\"\\\", [\\n                Validators.required,\\n            ]),\\n            textNumber: this.formBuilder.control(0, [\\n                Validators.required,\\n            ]),\\n            checkbox: this.formBuilder.control(true, [\\n                Validators.requiredTrue,\\n            ]),\\n            checkboxGroup: this.formBuilder.control([\\\"Cabbage\\\", \\\"Potato\\\"] , [\\n                Validators.required,\\n            ]),\\n            radioGroup: this.formBuilder.control(this.vegetables[1], [\\n                Validators.required,\\n            ]),\\n            switch: this.formBuilder.control(false, [ Validators.requiredTrue,\\n            ]),\\n            select: this.formBuilder.control(\\\"\\\", [\\n                Validators.required,\\n            ]),\\n            combobox: this.formBuilder.control(\\\"\\\", [\\n                Validators.required,\\n            ]),\\n            datePicker: this.formBuilder.control(moment()),\\n            timePicker: this.formBuilder.control(\\\"\\\", [\\n                Validators.required,\\n            ]),\\n            dateTimePicker: this.formBuilder.control(moment(), [\\n                Validators.required,\\n            ]),\\n        });\\n    }\\n}\\n\";","import { ChangeDetectorRef, Component, OnInit } from \"@angular/core\";\nimport { FormBuilder, FormGroup, Validators } from \"@angular/forms\";\n\n\n@Component({\n    selector: \"nui-form-field-complex-example\",\n    templateUrl: \"./form-field-complex.example.component.html\",\n})\nexport class FormFieldComplexExampleComponent implements OnInit {\n    public fancyForm: FormGroup;\n\n    constructor(private formBuilder: FormBuilder, private changeDetector: ChangeDetectorRef) {\n    }\n\n    public ngOnInit() {\n\n        this.fancyForm = this.formBuilder.group({\n            password: this.formBuilder.control(\"\", Validators.required),\n            confirmPassword: this.formBuilder.control(\"\", Validators.required),\n        }, {\n            validator: this.matchPassword.bind(this.formBuilder.group),\n        });\n    }\n\n    private matchPassword(group: FormGroup) {\n        const password = group.controls.password;\n        const confirm = group.controls.confirmPassword;\n        if (password.pristine || confirm.pristine) {\n            return null;\n        }\n\n        group.markAsTouched();\n\n        if (password.value === confirm.value) {\n            return null;\n        }\n\n        return {\n            isValid: false,\n        };\n    }\n}\n","<form [formGroup]=\"fancyForm\" class=\"nui-edge-definer\">\n    <nui-form-field class=\"d-block mb-4\"\n                    caption=\"Password\" i18n-caption\n                    hint=\"Some pretty long text with hint\" i18n-hint\n                    info=\"text\"\n                    [control]=\"fancyForm.controls['password']\">\n        <nui-textbox formControlName=\"password\"></nui-textbox>\n        <nui-validation-message for=\"required\" i18n>\n            This is required\n        </nui-validation-message>\n    </nui-form-field>\n    <nui-form-field class=\"d-block mb-4\"\n                    caption=\"Confirm Password\" i18n-caption\n                    hint=\"Some pretty long text with hint\" i18n-hint\n                    info=\"text\"\n                    [control]=\"fancyForm.controls['confirmPassword']\">\n        <nui-textbox formControlName=\"confirmPassword\"></nui-textbox>\n        <nui-validation-message for=\"required\" i18n>\n            This is required\n        </nui-validation-message>\n    </nui-form-field>\n</form>\n<pre>fancyForm.valid = {{fancyForm.valid}}</pre>\n","export default \"<nui-form-field caption=\\\"This caption is generic for all form fields\\\" i18n-caption\\n                info=\\\"Some info to show\\\" i18n-info\\n                hint=\\\"Hint may be useful\\\" i18n-hint\\n                id=\\\"nui-demo-form-field\\\">\\n    <!-- ngIf added for the QA to verify that there's no \\\"expression changed after it has been checked\\\" error -->\\n    <nui-textbox *ngIf=\\\"true\\\"></nui-textbox>\\n    <nui-validation-message [show]=\\\"true\\\" i18n>Some error message</nui-validation-message>\\n</nui-form-field>\\n\\n<form [formGroup]=\\\"dynamicForm\\\">\\n    <button id=\\\"nui-form-field-test-toggle-disable-state-button\\\" nui-button type=\\\"button\\\" (click)=\\\"toggleDisabledState()\\\">\\n        Toggle Disabled State\\n    </button>\\n\\n    <nui-form-field caption=\\\"Textbox\\\" i18n-caption\\n                    [control]=\\\"dynamicForm.controls['textbox']\\\">\\n        <!-- ngIf added for the QA to verify that there's no \\\"expression changed after it has been checked\\\" error -->\\n        <nui-textbox *ngIf=\\\"true\\\" id=\\\"nui-form-field-test-textbox\\\" formControlName=\\\"textbox\\\"></nui-textbox>\\n        <nui-validation-message for=\\\"required\\\" i18n>\\n            This is required\\n        </nui-validation-message>\\n    </nui-form-field>\\n\\n    <nui-form-field caption=\\\"Textbox Number\\\" i18n-caption\\n                    [control]=\\\"dynamicForm.controls['textboxNumber']\\\">\\n        <!-- ngIf added for the QA to verify that there's no \\\"expression changed after it has been checked\\\" error -->\\n        <nui-textbox-number *ngIf=\\\"true\\\" id=\\\"nui-form-field-test-textbox-number\\\" formControlName=\\\"textboxNumber\\\"></nui-textbox-number>\\n        <nui-validation-message for=\\\"required\\\" i18n>\\n            This is required\\n        </nui-validation-message>\\n    </nui-form-field>\\n\\n    <nui-form-field caption=\\\"Switch\\\" i18n-caption\\n                    [control]=\\\"dynamicForm.controls['switch']\\\">\\n        <!-- ngIf added for the QA to verify that there's no \\\"expression changed after it has been checked\\\" error -->\\n        <nui-switch *ngIf=\\\"true\\\" id=\\\"nui-form-field-test-switch\\\" formControlName=\\\"switch\\\"></nui-switch>\\n    </nui-form-field>\\n\\n    <nui-form-field caption=\\\"Radio Group\\\" i18n-caption\\n                    [control]=\\\"dynamicForm.controls['radio']\\\">\\n        <!-- ngIf added for the QA to verify that there's no \\\"expression changed after it has been checked\\\" error -->\\n        <nui-radio-group *ngIf=\\\"true\\\" id=\\\"nui-form-field-test-radio\\\" formControlName=\\\"radio\\\">\\n            <nui-radio ariaLabel=\\\"Radio\\\">Radio</nui-radio>\\n        </nui-radio-group>\\n    </nui-form-field>\\n\\n    <nui-form-field caption=\\\"Checkbox\\\" i18n-caption\\n                    [control]=\\\"dynamicForm.controls['checkbox']\\\">\\n        <!-- ngIf added for the QA to verify that there's no \\\"expression changed after it has been checked\\\" error -->\\n        <nui-checkbox *ngIf=\\\"true\\\" formControlName=\\\"checkbox\\\" id=\\\"nui-form-field-test-checkbox\\\">Checkbox</nui-checkbox>\\n    </nui-form-field>\\n\\n    <nui-form-field caption=\\\"Checkbox Group\\\" i18n-caption\\n                    [control]=\\\"dynamicForm.controls['checkboxGroup']\\\">\\n        <!-- ngIf added for the QA to verify that there's no \\\"expression changed after it has been checked\\\" error -->\\n        <nui-checkbox-group *ngIf=\\\"true\\\" id=\\\"nui-form-field-test-checkbox-group\\\" formControlName=\\\"checkboxGroup\\\">\\n                <nui-checkbox *ngFor=\\\"let vegetable of vegetables\\\"\\n                              [ariaLabel]=\\\"vegetable\\\"\\n                              [value]=\\\"vegetable\\\">{{ vegetable }}\\n                </nui-checkbox>\\n            </nui-checkbox-group>\\n    </nui-form-field>\\n\\n    <nui-form-field caption=\\\"Datepicker\\\" i18n-caption\\n                    [control]=\\\"dynamicForm.controls['datepicker']\\\">\\n        <!-- ngIf added for the QA to verify that there's no \\\"expression changed after it has been checked\\\" error -->\\n        <nui-date-picker *ngIf=\\\"true\\\" id=\\\"nui-form-field-test-datepicker\\\" formControlName=\\\"datepicker\\\" [inline]=\\\"false\\\"></nui-date-picker>\\n    </nui-form-field>\\n\\n    <nui-form-field caption=\\\"Timepicker\\\" i18n-caption\\n                    [control]=\\\"dynamicForm.controls['timepicker']\\\">\\n        <!-- ngIf added for the QA to verify that there's no \\\"expression changed after it has been checked\\\" error -->\\n        <nui-time-picker *ngIf=\\\"true\\\" id=\\\"nui-form-field-test-timepicker\\\" formControlName=\\\"timepicker\\\"></nui-time-picker>\\n    </nui-form-field>\\n\\n    <nui-form-field caption=\\\"Date Time Picker\\\"\\n                    hint=\\\"Some pretty long text with hint. Longer than previous even. This text should not ellipsify.\\\"\\n                    info=\\\"text\\\"\\n                    [control]=\\\"dynamicForm.controls['dateTimePicker']\\\">\\n        <!-- ngIf added for the QA to verify that there's no \\\"expression changed after it has been checked\\\" error -->\\n        <nui-date-time-picker *ngIf=\\\"true\\\"\\n                              id=\\\"nui-form-field-test-datetimepicker\\\"\\n                              formControlName=\\\"dateTimePicker\\\">\\n        </nui-date-time-picker>\\n        <nui-validation-message>\\n            This field is required\\n        </nui-validation-message>\\n    </nui-form-field>\\n    <span id=\\\"nui-form-field-test-datetimepicker-model\\\">\\n        {{dateTimePickerModel}}\\n    </span>\\n\\n    <nui-form-field caption=\\\"SelectV2\\\" i18n-caption\\n                    [control]=\\\"dynamicForm.controls['selectV2']\\\">\\n        <!-- ngIf added for the QA to verify that there's no \\\"expression changed after it has been checked\\\" error -->\\n        <nui-select-v2 *ngIf=\\\"true\\\" formControlName=\\\"selectV2\\\" id=\\\"nui-form-field-test-select\\\">\\n            <nui-select-v2-option *ngFor=\\\"let item of ['orange', 'apple']\\\" [value]=\\\"item\\\">{{item}}</nui-select-v2-option>\\n        </nui-select-v2>\\n    </nui-form-field>\\n\\n    <nui-form-field caption=\\\"ComboboxV2\\\" i18n-caption\\n                    [control]=\\\"dynamicForm.controls['comboboxV2']\\\">\\n        <!-- ngIf added for the QA to verify that there's no \\\"expression changed after it has been checked\\\" error -->\\n        <nui-combobox-v2 *ngIf=\\\"true\\\" formControlName=\\\"comboboxV2\\\" id=\\\"nui-form-field-test-combobox\\\">\\n            <nui-select-v2-option *ngFor=\\\"let item of ['orange', 'apple']\\\" [value]=\\\"item\\\">{{item}}</nui-select-v2-option>\\n        </nui-combobox-v2>\\n    </nui-form-field>\\n</form>\\n\\n\\n<nui-form-field caption=\\\"This caption is generic for all form fields\\\" i18n-caption\\n                [infoTemplate]=\\\"template\\\"\\n                hint=\\\"Hint may be useful\\\" i18n-hint\\n                id=\\\"nui-demo-form-field-with-template\\\">\\n    <!-- ngIf added for the QA to verify that there's no \\\"expression changed after it has been checked\\\" error -->\\n    <nui-textbox *ngIf=\\\"true\\\"></nui-textbox>\\n    <nui-validation-message [show]=\\\"true\\\" i18n>Some error message</nui-validation-message>\\n</nui-form-field>\\n<ng-template #template>\\n    <a>Template with link</a>\\n</ng-template>\\n\\n<nui-form-field caption=\\\"This caption is generic for all form fields\\\" i18n-caption\\n                [hintTemplate]=\\\"hintTemplate\\\"\\n                id=\\\"nui-demo-form-field-hint-with-template\\\">\\n    <!-- ngIf added for the QA to verify that there's no \\\"expression changed after it has been checked\\\" error -->\\n    <nui-textbox *ngIf=\\\"true\\\"></nui-textbox>\\n</nui-form-field>\\n\\n<ng-template #hintTemplate>\\n    <a href=\\\"\\\" [routerLink]=\\\"\\\" i18n>Hint template</a>\\n</ng-template>\\n\";","export default \"import { Component, OnInit } from \\\"@angular/core\\\";\\nimport { FormBuilder, FormGroup, Validators } from \\\"@angular/forms\\\";\\n\\n@Component({\\n    selector: \\\"nui-form-field-visual-test\\\",\\n    templateUrl: \\\"./form-field-visual-test.component.html\\\",\\n})\\n\\nexport class FormFieldVisualTestComponent implements OnInit {\\n    public fancyForm: FormGroup;\\n\\n    public vegetables = [\\\"Cabbage\\\", \\\"Potato\\\", \\\"Tomato\\\", \\\"Carrot\\\"];\\n\\n    constructor(private formBuilder: FormBuilder) {}\\n    public ngOnInit() {\\n        this.fancyForm = this.formBuilder.group({\\n            nickname:       this.formBuilder.control(\\\"\\\",    [Validators.required, Validators.min(3)]),\\n            city:           this.formBuilder.control(\\\"\\\"),\\n            textbox:        this.formBuilder.control(\\\"\\\",    [Validators.required]),\\n            checkbox:       this.formBuilder.control(false, [Validators.requiredTrue]),\\n            checkboxGroup:  this.formBuilder.control(\\\"\\\",    [Validators.required]),\\n            radioGroup:     this.formBuilder.control(null,  [Validators.required]),\\n            switch:         this.formBuilder.control(false, [Validators.requiredTrue]),\\n            select:         this.formBuilder.control(\\\"\\\",    [Validators.required]),\\n            combobox:       this.formBuilder.control(\\\"\\\",    [Validators.required]),\\n            timePicker:     this.formBuilder.control(\\\"\\\",    [Validators.required]),\\n        });\\n    }\\n\\n    formInitialized(name: string, form: FormGroup) {\\n        this.fancyForm.setControl(name, form);\\n    }\\n\\n    markAsTouched() {\\n        Object.keys(this.fancyForm.controls).forEach(key => {\\n            this.fancyForm.controls[key].markAsDirty();\\n            this.fancyForm.controls[key].updateValueAndValidity();\\n        });\\n    }\\n}\\n\";","import { Component, OnInit } from \"@angular/core\";\nimport { FormBuilder, FormGroup, Validators } from \"@angular/forms\";\n\n@Component({\n    selector: \"nui-form-field-basic-reactive-custom-validation-example\",\n    templateUrl: \"./basic-reactive-form-field-custom-validation.example.component.html\",\n})\nexport class FormFieldBasicReactiveCustomValidationExampleComponent implements OnInit {\n    public reactiveForm: FormGroup;\n\n    constructor(private formBuilder: FormBuilder) {\n    }\n\n    public ngOnInit() {\n        this.reactiveForm = this.formBuilder.group({\n            email: this.formBuilder.control(\"\", [\n                Validators.required,\n                Validators.email,\n            ]),\n        });\n    }\n}\n","<form [formGroup]=\"reactiveForm\">\n    <nui-form-field i18n-caption caption=\"Email address\"\n                    i18n-hint hint=\"Try to change value or remove everything\"\n                    [control]=\"reactiveForm.controls['email']\">\n        <nui-textbox formControlName=\"email\" type=\"email\"></nui-textbox>\n\n        <nui-custom-validation-message for=\"required\">\n            <div class=\"nui-validation-message\" role=\"alert\">\n                <nui-icon icon=\"status_critical\" iconSize=\"small\" aria-hidden=\"true\"></nui-icon>\n                <span class=\"ml-1\"><em i18n>This is required</em></span>\n            </div>\n        </nui-custom-validation-message>\n\n        <nui-custom-validation-message for=\"email\">\n            <div class=\"nui-validation-message\" role=\"alert\">\n                <nui-icon icon=\"status_critical\" iconSize=\"small\" aria-hidden=\"true\"></nui-icon>\n                <span class=\"ml-1\"><em i18n>This should be a valid email</em></span>\n            </div>\n        </nui-custom-validation-message>\n    </nui-form-field>\n</form>\n","export default \"import { Component, OnInit } from \\\"@angular/core\\\";\\nimport { FormBuilder, FormGroup, Validators } from \\\"@angular/forms\\\";\\n\\n@Component({\\n    selector: \\\"nui-form-field-validation-triggering-example\\\",\\n    templateUrl: \\\"./form-field-validation-triggering.example.component.html\\\",\\n})\\nexport class FormFieldValidationTriggeringxampleComponent implements OnInit {\\n    public reactiveForm: FormGroup;\\n\\n    constructor(private formBuilder: FormBuilder) {\\n    }\\n\\n    public ngOnInit() {\\n        this.reactiveForm = this.formBuilder.group({\\n            email: this.formBuilder.control(\\\"\\\"),\\n        });\\n    }\\n\\n    public onAddValidators() {\\n        this.reactiveForm.get(\\\"email\\\")?.setValidators([\\n            Validators.required,\\n            Validators.email,\\n        ]);\\n    }\\n\\n    public onTouch() {\\n        if (this.reactiveForm.get(\\\"email\\\")?.value === \\\"\\\" &&  this.reactiveForm.get(\\\"email\\\")?.errors === null && this.reactiveForm.get(\\\"email\\\")?.validator) {\\n            this.reactiveForm.get(\\\"email\\\")?.setErrors({ required: true });\\n        }\\n        this.reactiveForm.get(\\\"email\\\")?.markAsTouched();\\n    }\\n\\n    public onValueChange() {\\n        const text = this.reactiveForm.get(\\\"email\\\")?.value === \\\"\\\" ? \\\"some text here\\\" : \\\"\\\";\\n        this.reactiveForm.get(\\\"email\\\")?.setValue(text);\\n    }\\n\\n    public onStatusChange() {\\n        const errors = this.reactiveForm.valid ? { hasError: true} : null;\\n        this.reactiveForm.get(\\\"email\\\")?.setErrors(errors);\\n    }\\n\\n    public onReset() {\\n        this.reactiveForm.get(\\\"email\\\")?.reset(\\\"\\\");\\n        this.reactiveForm.get(\\\"email\\\")?.setErrors(null);\\n        this.reactiveForm.get(\\\"email\\\")?.setValidators(null);\\n    }\\n}\\n\";","import { Component, OnInit } from \"@angular/core\";\nimport { FormBuilder, FormGroup, Validators } from \"@angular/forms\";\nimport moment from \"moment/moment\";\n\n@Component({\n    selector: \"nui-form-field-test\",\n    templateUrl: \"./form-field-test.component.html\",\n})\nexport class FormFieldTestComponent implements OnInit {\n    public dynamicForm: FormGroup;\n\n    public dateTimePickerModel: string;\n\n    constructor(private formBuilder: FormBuilder) {\n    }\n\n    public vegetables = [$localize `Cabbage`, $localize `Potato`, $localize `Tomato`, $localize `Carrot`];\n\n    public ngOnInit(): void {\n        this.dynamicForm = this.formBuilder.group({\n            textbox: this.formBuilder.control(\"\", Validators.required),\n            textboxNumber: this.formBuilder.control(\"\", Validators.required),\n            radio: this.formBuilder.control({}, Validators.required),\n            checkbox: this.formBuilder.control(true, Validators.required),\n            checkboxGroup: this.formBuilder.control(\"\", Validators.required),\n            switch: this.formBuilder.control(true, Validators.required),\n            selectV2: this.formBuilder.control(\"apple\", Validators.required),\n            comboboxV2: this.formBuilder.control(\"apple\", Validators.required),\n            datepicker: this.formBuilder.control(moment(), Validators.required),\n            timepicker: this.formBuilder.control({}, Validators.required),\n            dateTimePicker: this.formBuilder.control(moment(\"04/09/1989\", \"L\"), [ // \"L\" is \"MM/DD/YYY\" in moment.js\n                Validators.required,\n            ]),\n        });\n        this.dynamicForm.disable();\n        this.dynamicForm.valueChanges.subscribe(value => this.dateTimePickerModel =  moment(value[\"dateTimePicker\"]).format(\"LLLL\"));\n    }\n\n    public toggleDisabledState(): void {\n        if (this.dynamicForm.disabled) {\n            this.dynamicForm.enable();\n        } else {\n            this.dynamicForm.disable();\n        }\n    }\n}\n","<nui-form-field caption=\"This caption is generic for all form fields\" i18n-caption\n                info=\"Some info to show\" i18n-info\n                hint=\"Hint may be useful\" i18n-hint\n                id=\"nui-demo-form-field\">\n    <!-- ngIf added for the QA to verify that there's no \"expression changed after it has been checked\" error -->\n    <nui-textbox *ngIf=\"true\"></nui-textbox>\n    <nui-validation-message [show]=\"true\" i18n>Some error message</nui-validation-message>\n</nui-form-field>\n\n<form [formGroup]=\"dynamicForm\">\n    <button id=\"nui-form-field-test-toggle-disable-state-button\" nui-button type=\"button\" (click)=\"toggleDisabledState()\">\n        Toggle Disabled State\n    </button>\n\n    <nui-form-field caption=\"Textbox\" i18n-caption\n                    [control]=\"dynamicForm.controls['textbox']\">\n        <!-- ngIf added for the QA to verify that there's no \"expression changed after it has been checked\" error -->\n        <nui-textbox *ngIf=\"true\" id=\"nui-form-field-test-textbox\" formControlName=\"textbox\"></nui-textbox>\n        <nui-validation-message for=\"required\" i18n>\n            This is required\n        </nui-validation-message>\n    </nui-form-field>\n\n    <nui-form-field caption=\"Textbox Number\" i18n-caption\n                    [control]=\"dynamicForm.controls['textboxNumber']\">\n        <!-- ngIf added for the QA to verify that there's no \"expression changed after it has been checked\" error -->\n        <nui-textbox-number *ngIf=\"true\" id=\"nui-form-field-test-textbox-number\" formControlName=\"textboxNumber\"></nui-textbox-number>\n        <nui-validation-message for=\"required\" i18n>\n            This is required\n        </nui-validation-message>\n    </nui-form-field>\n\n    <nui-form-field caption=\"Switch\" i18n-caption\n                    [control]=\"dynamicForm.controls['switch']\">\n        <!-- ngIf added for the QA to verify that there's no \"expression changed after it has been checked\" error -->\n        <nui-switch *ngIf=\"true\" id=\"nui-form-field-test-switch\" formControlName=\"switch\"></nui-switch>\n    </nui-form-field>\n\n    <nui-form-field caption=\"Radio Group\" i18n-caption\n                    [control]=\"dynamicForm.controls['radio']\">\n        <!-- ngIf added for the QA to verify that there's no \"expression changed after it has been checked\" error -->\n        <nui-radio-group *ngIf=\"true\" id=\"nui-form-field-test-radio\" formControlName=\"radio\">\n            <nui-radio ariaLabel=\"Radio\">Radio</nui-radio>\n        </nui-radio-group>\n    </nui-form-field>\n\n    <nui-form-field caption=\"Checkbox\" i18n-caption\n                    [control]=\"dynamicForm.controls['checkbox']\">\n        <!-- ngIf added for the QA to verify that there's no \"expression changed after it has been checked\" error -->\n        <nui-checkbox *ngIf=\"true\" formControlName=\"checkbox\" id=\"nui-form-field-test-checkbox\">Checkbox</nui-checkbox>\n    </nui-form-field>\n\n    <nui-form-field caption=\"Checkbox Group\" i18n-caption\n                    [control]=\"dynamicForm.controls['checkboxGroup']\">\n        <!-- ngIf added for the QA to verify that there's no \"expression changed after it has been checked\" error -->\n        <nui-checkbox-group *ngIf=\"true\" id=\"nui-form-field-test-checkbox-group\" formControlName=\"checkboxGroup\">\n                <nui-checkbox *ngFor=\"let vegetable of vegetables\"\n                              [ariaLabel]=\"vegetable\"\n                              [value]=\"vegetable\">{{ vegetable }}\n                </nui-checkbox>\n            </nui-checkbox-group>\n    </nui-form-field>\n\n    <nui-form-field caption=\"Datepicker\" i18n-caption\n                    [control]=\"dynamicForm.controls['datepicker']\">\n        <!-- ngIf added for the QA to verify that there's no \"expression changed after it has been checked\" error -->\n        <nui-date-picker *ngIf=\"true\" id=\"nui-form-field-test-datepicker\" formControlName=\"datepicker\" [inline]=\"false\"></nui-date-picker>\n    </nui-form-field>\n\n    <nui-form-field caption=\"Timepicker\" i18n-caption\n                    [control]=\"dynamicForm.controls['timepicker']\">\n        <!-- ngIf added for the QA to verify that there's no \"expression changed after it has been checked\" error -->\n        <nui-time-picker *ngIf=\"true\" id=\"nui-form-field-test-timepicker\" formControlName=\"timepicker\"></nui-time-picker>\n    </nui-form-field>\n\n    <nui-form-field caption=\"Date Time Picker\"\n                    hint=\"Some pretty long text with hint. Longer than previous even. This text should not ellipsify.\"\n                    info=\"text\"\n                    [control]=\"dynamicForm.controls['dateTimePicker']\">\n        <!-- ngIf added for the QA to verify that there's no \"expression changed after it has been checked\" error -->\n        <nui-date-time-picker *ngIf=\"true\"\n                              id=\"nui-form-field-test-datetimepicker\"\n                              formControlName=\"dateTimePicker\">\n        </nui-date-time-picker>\n        <nui-validation-message>\n            This field is required\n        </nui-validation-message>\n    </nui-form-field>\n    <span id=\"nui-form-field-test-datetimepicker-model\">\n        {{dateTimePickerModel}}\n    </span>\n\n    <nui-form-field caption=\"SelectV2\" i18n-caption\n                    [control]=\"dynamicForm.controls['selectV2']\">\n        <!-- ngIf added for the QA to verify that there's no \"expression changed after it has been checked\" error -->\n        <nui-select-v2 *ngIf=\"true\" formControlName=\"selectV2\" id=\"nui-form-field-test-select\">\n            <nui-select-v2-option *ngFor=\"let item of ['orange', 'apple']\" [value]=\"item\">{{item}}</nui-select-v2-option>\n        </nui-select-v2>\n    </nui-form-field>\n\n    <nui-form-field caption=\"ComboboxV2\" i18n-caption\n                    [control]=\"dynamicForm.controls['comboboxV2']\">\n        <!-- ngIf added for the QA to verify that there's no \"expression changed after it has been checked\" error -->\n        <nui-combobox-v2 *ngIf=\"true\" formControlName=\"comboboxV2\" id=\"nui-form-field-test-combobox\">\n            <nui-select-v2-option *ngFor=\"let item of ['orange', 'apple']\" [value]=\"item\">{{item}}</nui-select-v2-option>\n        </nui-combobox-v2>\n    </nui-form-field>\n</form>\n\n\n<nui-form-field caption=\"This caption is generic for all form fields\" i18n-caption\n                [infoTemplate]=\"template\"\n                hint=\"Hint may be useful\" i18n-hint\n                id=\"nui-demo-form-field-with-template\">\n    <!-- ngIf added for the QA to verify that there's no \"expression changed after it has been checked\" error -->\n    <nui-textbox *ngIf=\"true\"></nui-textbox>\n    <nui-validation-message [show]=\"true\" i18n>Some error message</nui-validation-message>\n</nui-form-field>\n<ng-template #template>\n    <a>Template with link</a>\n</ng-template>\n\n<nui-form-field caption=\"This caption is generic for all form fields\" i18n-caption\n                [hintTemplate]=\"hintTemplate\"\n                id=\"nui-demo-form-field-hint-with-template\">\n    <!-- ngIf added for the QA to verify that there's no \"expression changed after it has been checked\" error -->\n    <nui-textbox *ngIf=\"true\"></nui-textbox>\n</nui-form-field>\n\n<ng-template #hintTemplate>\n    <a href=\"\" [routerLink]=\"\" i18n>Hint template</a>\n</ng-template>\n","export default \"import { Component, EventEmitter, Inject, OnInit, Output } from \\\"@angular/core\\\";\\nimport { FormBuilder, FormGroup, Validators } from \\\"@angular/forms\\\";\\nimport { ToastService } from \\\"@nova-ui/bits\\\";\\n\\n@Component({\\n    selector: \\\"nui-nested-forms-as-component-example\\\",\\n    templateUrl: \\\"./nested-forms-as-component.example.component.html\\\",\\n})\\nexport class NestedFormsAsComponentExampleComponent implements OnInit {\\n    public fancyForm: FormGroup;\\n\\n    constructor(private fb: FormBuilder,\\n                @Inject(ToastService) private toastService: ToastService) {}\\n\\n    ngOnInit() {\\n\\n        this.fancyForm = this.fb.group({\\n            nickname: this.fb.control (\\\"\\\", [Validators.required, Validators.min(3)]),\\n        });\\n    }\\n\\n    formInitialized(name: string, form: FormGroup) {\\n        this.fancyForm.setControl(name, form);\\n    }\\n    public onSubmit(value: FormGroup) {\\n        this.toastService.success({\\n            message: `Form is valid: ${value.valid}`,\\n            title: \\\"Submit\\\",\\n        });\\n    }\\n}\\n\\n/**\\n * Component representing form group for name and surname\\n */\\n@Component({\\n    selector: \\\"nui-first-custom-form-example\\\",\\n    template: `<div [formGroup]=\\\"firstForm\\\">\\n        <nui-form-field class=\\\"d-block mb-4\\\"\\n                        caption=\\\"First Name\\\" i18n-caption\\n                        [control]=\\\"firstForm.controls['firstName']\\\">\\n            <nui-textbox formControlName=\\\"firstName\\\"></nui-textbox>\\n            <nui-validation-message for=\\\"required\\\" i18n>\\n                This is required\\n            </nui-validation-message>\\n        </nui-form-field>\\n        <nui-form-field class=\\\"d-block mb-4\\\"\\n                        caption=\\\"Last Name\\\" i18n-caption\\n                        [control]=\\\"firstForm.controls['lastName']\\\">\\n            <nui-textbox formControlName=\\\"lastName\\\"></nui-textbox>\\n            <nui-validation-message for=\\\"required\\\" i18n>\\n                This is required\\n            </nui-validation-message>\\n        </nui-form-field>\\n    </div>`,\\n})\\nexport class FirstCustomFormExampleComponent implements OnInit {\\n    @Output() formReady = new EventEmitter<FormGroup>();\\n    public firstForm: FormGroup;\\n\\n    ngOnInit() {\\n        this.firstForm = this.fb.group({\\n            firstName: this.fb.control (\\\"\\\", Validators.required),\\n            lastName: this.fb.control (\\\"\\\", Validators.required),\\n        });\\n\\n        this.formReady.emit(this.firstForm);\\n    }\\n\\n    constructor(private fb: FormBuilder) {}\\n}\\n\\n/**\\n * Component representing address form group\\n */\\n@Component({\\n    selector: \\\"nui-second-custom-form-example\\\",\\n    template: `\\n        <div [formGroup]=\\\"secondForm\\\">\\n            <nui-form-field class=\\\"d-block mb-4\\\"\\n                            caption=\\\"City\\\" i18n-caption\\n                            [control]=\\\"secondForm.controls['city']\\\">\\n                <nui-textbox formControlName=\\\"city\\\"></nui-textbox>\\n                <nui-validation-message for=\\\"required\\\" i18n>\\n                    This is required\\n                </nui-validation-message>\\n            </nui-form-field>\\n            <nui-form-field class=\\\"d-block mb-4\\\"\\n                            caption=\\\"Address\\\" i18n-caption\\n                            [control]=\\\"secondForm.controls['address']\\\">\\n                <nui-textbox formControlName=\\\"address\\\"></nui-textbox>\\n                <nui-validation-message for=\\\"required\\\" i18n>\\n                    This is required\\n                </nui-validation-message>\\n            </nui-form-field>\\n        </div>`,\\n})\\nexport class SecondCustomFormExampleComponent implements OnInit {\\n    @Output() formReady = new EventEmitter<FormGroup>();\\n    public secondForm: FormGroup;\\n\\n    ngOnInit() {\\n        this.secondForm = this.fb.group({\\n            city: null,\\n            address: null,\\n        });\\n\\n        this.formReady.emit(this.secondForm);\\n    }\\n\\n    constructor(private fb: FormBuilder) {}\\n}\\n\";","import { Component } from \"@angular/core\";\nimport {FormFieldComponent} from \"@nova-ui/bits\";\n\n@Component({\n    selector: \"nui-form-field-docs-example\",\n    templateUrl: \"./form-field-docs.example.component.html\",\n})\nexport class FormFieldExampleComponent {\n    getItemConfigKey(key: keyof FormFieldComponent): string {\n        return key;\n    }\n}\n","<h2>Required Modules</h2>\n<ul>\n    <li>\n        <code>NuiFormFieldModule</code>\n    </li>\n</ul>\n\n<h2>Basic Usage</h2>\n\n<p>\n    Form Field is a convenient wrapper that helps to combine your inputs in a form. Currently we support these types of form items (but please note that not all of these components are in alpha stage):\n</p>\n<ul>\n    <li>textbox</li>\n    <li>textarea</li>\n    <li>textNumber</li>\n    <li>checkbox</li>\n    <li>checkboxGroup</li>\n    <li>combobox</li>\n    <li>radioGroup</li>\n    <li>switch</li>\n    <li>select</li>\n    <li>datePicker</li>\n    <li>timePicker</li>\n    <!--<li>dateTimePicker</li>-->\n    <!--<li>timeFramePicker</li>-->\n</ul>\n\n<p>\n    <code>nui-form-field</code> is a building block for any form. It gives an ability to add label for any input,\n    complementary help text under it and info icon with a popover to display some additional text.\n</p>\n\n<nui-example-wrapper filenamePrefix=\"basic-form-field\" exampleTitle=\"Basic Form Field\">\n    <nui-form-field-basic-example></nui-form-field-basic-example>\n</nui-example-wrapper>\n\n<h2>Validation Messages Inside Reactive Form</h2>\n<p>\n    In order to use <code>nui-form-field</code> within reactive form you need to pass it access to a control <code>[control]=\"reactiveForm.controls['email']\"</code>.\n    Also <code>formControlName</code> needs to be set directly on the input element you're using with the name of a form control.\n</p>\n<p>\n    <code>nui-validation-message</code> component can be added inside <code>nui-form-field</code>. It has 2 inputs: <code>show</code> and <code>for</code>.\n    Form Field Component will change <code>show</code> by itself to control visibility of the error message (this input is useful for consumers only outside <code>nui-form-field</code>),\n    <code>for</code> input accepts validator name.\n</p>\n\n<nui-example-wrapper filenamePrefix=\"basic-reactive-form-field\" exampleTitle=\"Validation Messages Inside Reactive Form\">\n    <nui-form-field-basic-reactive-example></nui-form-field-basic-reactive-example>\n</nui-example-wrapper>\n\n<p>\n    For customization purposes, we provide the <code>nui-custom-validation-message</code>\n    component that does not contain internal styling and html elements.\n    <b>Input properties are similar to <code>nui-validation-message</code></b>\n</p>\n<nui-example-wrapper filenamePrefix=\"basic-reactive-form-field-custom-validation\" exampleTitle=\"Custom Styled Validation Messages Inside Reactive Form\">\n    <nui-form-field-basic-reactive-custom-validation-example></nui-form-field-basic-reactive-custom-validation-example>\n</nui-example-wrapper>\n\n<h2>Compound Validation</h2>\n\n<p>\n    In the example below an example of a compound validation can be seen.\n    To validate group of fields you need to find the first common parent FormGroup and add validator there\n    (click \"Source\" above and open the TS tab to see the <code>matchPassword</code> validator).\n</p>\n<p>\n    The current validation state of the form is displayed at the bottom of the example.\n</p>\n\n<nui-example-wrapper filenamePrefix=\"form-field-complex\" exampleTitle=\"Form Field with custom validation\">\n    <nui-form-field-complex-example></nui-form-field-complex-example>\n</nui-example-wrapper>\n\n<h2>HTML as info</h2>\n\n<p>\n    There is a possibility to have additional information to each field. It can be done using either <code>info</code>\n    input, that is just a text, passed as a string, or <code>infoTemplate</code> input, that uses html inside the <code>ng-template</code>.\n    Note: the template is provided completely by the user and we do not do any sanitizing.\n</p>\n\n<nui-example-wrapper filenamePrefix=\"html-as-info-in-form-field\" exampleTitle=\"HTML inside popover\">\n    <nui-form-field-with-html-example></nui-form-field-with-html-example>\n</nui-example-wrapper>\n\n<h2>Hint Text</h2>\n\n<p>\n    Hint text can give the user additional information about a form field and will appear below the field's user input area.\n    The text for a hint can be specified in one of two ways: either by setting the <code>{{getItemConfigKey('hint')}}</code> input with a string value\n    or by providing a templateRef through the <code>{{getItemConfigKey('hintTemplate')}}</code> input.\n</p>\n\n<nui-example-wrapper filenamePrefix=\"form-field-hint\" exampleTitle=\"Form Field Hints\">\n    <nui-form-field-hint-basic-example></nui-form-field-hint-basic-example>\n</nui-example-wrapper>\n\n<h2>Dynamic Disabling</h2>\n\n<p>\n\tExample to show possibility of controlling disabled state (setting initial, dynamic change of state).\n</p>\n\n<nui-example-wrapper filenamePrefix=\"form-field-dynamic-disabling\" exampleTitle=\"Form Field with dynamic disabling\">\n    <nui-form-field-dynamic-disabling-example></nui-form-field-dynamic-disabling-example>\n</nui-example-wrapper>\n\n\n<h2>Nested Form Components</h2>\n\n<p>\n    In order to avoid code duplication, it may be useful to combine a form from several components.\n    In this example there is a Form Group that consists of Nickname control an 2 child Form Groups represented by separate components:\n    one is for personal data (name, surname) called <code>nui-first-custom-form-example</code>\n    and another is for address (city, address) called <code>nui-second-custom-form-example</code>.\n    In order to achieve that we need to let the parent form know that there are some child groups that should be appended.\n    This is done by calling <code>formInitialized</code> method from the parent form group on the event <code>formReady</code> of the child.\n    Also there is a <code>CustomFormFieldExampleComponent</code> from previous example reused in child components to illustrate\n    even more flexibility of this approach.\n</p>\n<p>\n    The current validation state of the form is displayed at the bottom of the example.\n</p>\n<p>\n    Note that there are several ways to use components as a form group, but this is currently the most convenient way.\n</p>\n\n<nui-example-wrapper filenamePrefix=\"nested-forms-as-component\" exampleTitle=\"Nested form components\">\n    <nui-nested-forms-as-component-example></nui-nested-forms-as-component-example>\n</nui-example-wrapper>\n\n<h2>Various Components in a Form</h2>\n\n<p>\n    This example shows all possible inputs combined in one form\n</p>\n\n<nui-example-wrapper filenamePrefix=\"in-form-form-field\" exampleTitle=\"Form Field inside the Form\">\n    <nui-form-field-in-form-example></nui-form-field-in-form-example>\n</nui-example-wrapper>\n\n<h2>Validation Triggering</h2>\n\n<p>\n    This example shows all possible ways for validation message triggering by touch, value changes or status changes event.\n</p>\n\n<nui-example-wrapper filenamePrefix=\"form-field-validation-triggering\" exampleTitle=\"Form Field Validation Triggering\">\n    <nui-form-field-validation-triggering-example></nui-form-field-validation-triggering-example>\n</nui-example-wrapper>\n\n","import { Component, OnInit } from \"@angular/core\";\nimport { FormBuilder, FormGroup, Validators } from \"@angular/forms\";\n\n@Component({\n    selector: \"nui-form-field-visual-test\",\n    templateUrl: \"./form-field-visual-test.component.html\",\n})\n\nexport class FormFieldVisualTestComponent implements OnInit {\n    public fancyForm: FormGroup;\n\n    public vegetables = [\"Cabbage\", \"Potato\", \"Tomato\", \"Carrot\"];\n\n    constructor(private formBuilder: FormBuilder) {}\n    public ngOnInit() {\n        this.fancyForm = this.formBuilder.group({\n            nickname:       this.formBuilder.control(\"\",    [Validators.required, Validators.min(3)]),\n            city:           this.formBuilder.control(\"\"),\n            textbox:        this.formBuilder.control(\"\",    [Validators.required]),\n            checkbox:       this.formBuilder.control(false, [Validators.requiredTrue]),\n            checkboxGroup:  this.formBuilder.control(\"\",    [Validators.required]),\n            radioGroup:     this.formBuilder.control(null,  [Validators.required]),\n            switch:         this.formBuilder.control(false, [Validators.requiredTrue]),\n            select:         this.formBuilder.control(\"\",    [Validators.required]),\n            combobox:       this.formBuilder.control(\"\",    [Validators.required]),\n            timePicker:     this.formBuilder.control(\"\",    [Validators.required]),\n        });\n    }\n\n    formInitialized(name: string, form: FormGroup) {\n        this.fancyForm.setControl(name, form);\n    }\n\n    markAsTouched() {\n        Object.keys(this.fancyForm.controls).forEach(key => {\n            this.fancyForm.controls[key].markAsDirty();\n            this.fancyForm.controls[key].updateValueAndValidity();\n        });\n    }\n}\n","\n<div class=\"container\">\n    <h3>Nested form components</h3>\n    <form [formGroup]=\"fancyForm\" class=\"nui-edge-definer\">\n        <nui-form-field caption=\"Nickname\"\n                        hint=\"Some pretty long text with hint\"\n                        info=\"text\"\n                        [control]=\"fancyForm.controls['nickname']\">\n            <nui-textbox formControlName=\"nickname\" id=\"nui-form-field-visual-test-nickname\"></nui-textbox>\n            <nui-validation-message for=\"required\">\n                This is required\n            </nui-validation-message>\n        </nui-form-field>\n        <nui-form-field caption=\"City\"\n                        [control]=\"fancyForm.controls['City']\">\n            <nui-textbox formControlName=\"city\" id=\"nui-form-field-visual-test-city\"></nui-textbox>\n        </nui-form-field>\n    </form>\n    <h3>Custom error message styling</h3>\n    <form [formGroup]=\"fancyForm\">\n        <nui-form-field i18n-caption caption=\"Textbox\"\n                        i18n-hint hint=\"Try to leave empty this required field\"\n                        [control]=\"fancyForm.controls['textbox']\">\n            <nui-textbox formControlName=\"textbox\" type=\"textbox\"></nui-textbox>\n\n            <nui-custom-validation-message for=\"required\">\n                <nui-icon icon=\"status_critical\" iconSize=\"small\" aria-hidden=\"true\"></nui-icon>\n                <span class=\"ml-1\"><em i18n>This is required</em></span>\n            </nui-custom-validation-message>\n        </nui-form-field>\n    </form>\n    <h3>Various Components in a Form</h3>\n    <form [formGroup]=\"fancyForm\" class=\"nui-edge-definer\">\n    <div class=\"row\">\n        <div class=\"col\">\n            <nui-form-field caption=\"Textbox\"\n                            hint=\"This should be any valid email\"\n                            info=\"text\"\n                            [control]=\"fancyForm.controls['textbox']\">\n                <nui-textbox id=\"nui-form-field-visual-test-textbox\"\n                             formControlName=\"textbox\"></nui-textbox>\n                <nui-validation-message for=\"required\">\n                    This field is required\n                </nui-validation-message>\n                <nui-validation-message for=\"email\">\n                    Something, but not enough\n                </nui-validation-message>\n            </nui-form-field>\n        </div>\n        <div class=\"col\">\n            <nui-form-field id=\"nui-form-field-visual-test-form-field\"\n                            caption=\"Checkbox\"\n                            hint=\"Some pretty long text with hint\"\n                            info=\"text\"\n                            [control]=\"fancyForm.controls['checkbox']\">\n                <nui-checkbox id=\"nui-form-field-visual-test-checkbox\"\n                                formControlName=\"checkbox\"></nui-checkbox>\n                <nui-validation-message for=\"required\">\n                    This field is required\n                </nui-validation-message>\n            </nui-form-field>\n        </div>\n        <div class=\"col\">\n            <nui-form-field caption=\"Switch\"\n                            hint=\"Some pretty long text with hint\"\n                            info=\"text\"\n                            [control]=\"fancyForm.controls['switch']\">\n                <nui-switch id=\"nui-form-field-visual-test-switch\"\n                            formControlName=\"switch\"></nui-switch>\n                <nui-validation-message for=\"required\">\n                    This field is required\n                </nui-validation-message>\n            </nui-form-field>\n        </div>\n        <hr />\n    </div>\n    <div class=\"row\">\n        <div class=\"col\">\n            <nui-form-field caption=\"Checkbox Group\"\n                            hint=\"Some pretty long text with hint\"\n                            info=\"text\"\n                            [control]=\"fancyForm.controls['checkboxGroup']\">\n                <nui-checkbox-group id=\"nui-form-field-visual-test-checkbox-group\"\n                                    formControlName=\"checkboxGroup\"\n                                    name=\"vegetable\">\n                    <nui-checkbox *ngFor=\"let vegetable of vegetables;\"\n                                  [value]=\"vegetable\">\n                        {{vegetable}}\n                    </nui-checkbox>\n                </nui-checkbox-group>\n                <nui-validation-message for=\"required\">\n                    This field is required\n                </nui-validation-message>\n            </nui-form-field>\n        </div>\n        <div class=\"col\">\n            <nui-form-field caption=\"Radio Group\"\n                            hint=\"Some pretty long text with hint\"\n                            info=\"text\"\n                            [control]=\"fancyForm.controls['radioGroup']\">\n                <nui-radio-group id=\"nui-form-field-visual-test-radio\"\n                                 formControlName=\"radioGroup\"\n                                 name=\"vegetable\" required>\n                    <nui-radio *ngFor=\"let vegetable of vegetables\"\n                               [value]=\"vegetable\">\n                        {{vegetable}}\n                    </nui-radio>\n                </nui-radio-group>\n                <nui-validation-message for=\"required\">\n                    This field is required\n                </nui-validation-message>\n            </nui-form-field>\n        </div>\n        <hr />\n    </div>\n    <div class=\"row\">\n        <div class=\"col\">\n            <nui-form-field caption=\"Combobox\"\n                            hint=\"Some pretty long text with hint\"\n                            info=\"text\"\n                            [control]=\"fancyForm.controls['combobox']\">\n                <nui-combobox id=\"nui-form-field-visual-test-combobox\"\n                                formControlName=\"combobox\"\n                                [itemsSource]=\"vegetables\"></nui-combobox>\n                <nui-validation-message for=\"required\">\n                    This field is required\n                </nui-validation-message>\n            </nui-form-field>\n        </div>\n        <div class=\"col\">\n            <nui-form-field caption=\"Select\"\n                            hint=\"Some pretty long text with hint\"\n                            info=\"text\"\n                            [control]=\"fancyForm.controls['select']\">\n                <nui-select id=\"nui-form-field-visual-test-select\"\n                            formControlName=\"select\"\n                            [itemsSource]=\"vegetables\"></nui-select>\n                <nui-validation-message for=\"required\">\n                    This field is required\n                </nui-validation-message>\n            </nui-form-field>\n        </div>\n        <div class=\"col\">\n            <nui-form-field caption=\"Time Picker\"\n                            hint=\"Some pretty long text with hint\"\n                            info=\"text\"\n                            [control]=\"fancyForm.controls['timePicker']\">\n                <nui-time-picker id=\"nui-form-field-visual-test-timepicker\"\n                                    formControlName=\"timePicker\"></nui-time-picker>\n                <nui-validation-message for=\"required\">\n                    This field is required\n                </nui-validation-message>\n            </nui-form-field>\n        </div>\n    </div>\n    <div class=\"my-3 d-flex flex-row justify-content-center\">\n        <div>\n            <button nui-button class=\"btn\" id=\"nui-demo-mark-as-touched-button\" (click)=\"markAsTouched()\">Mark as Dirty</button>\n        </div>\n    </div>\n    <div class=\"d-flex flex-row justify-content-center\">\n        <div class=\"w-100 d-flex flex-column\">\n            <pre>fancyForm.valid = {{fancyForm.valid}}</pre>\n        </div>\n    </div>\n    </form>\n</div>\n","export default \"import { Component } from \\\"@angular/core\\\";\\n\\n@Component({\\n    selector: \\\"nui-form-field-with-html-example\\\",\\n    templateUrl: \\\"./html-as-info-in-form-field.example.component.html\\\",\\n})\\nexport class FormFieldWithHTMLExampleComponent {\\n\\n}\\n\";","export default \"import { ChangeDetectorRef, Component, OnInit } from \\\"@angular/core\\\";\\nimport { FormBuilder, FormGroup, Validators } from \\\"@angular/forms\\\";\\n\\n\\n@Component({\\n    selector: \\\"nui-form-field-complex-example\\\",\\n    templateUrl: \\\"./form-field-complex.example.component.html\\\",\\n})\\nexport class FormFieldComplexExampleComponent implements OnInit {\\n    public fancyForm: FormGroup;\\n\\n    constructor(private formBuilder: FormBuilder, private changeDetector: ChangeDetectorRef) {\\n    }\\n\\n    public ngOnInit() {\\n\\n        this.fancyForm = this.formBuilder.group({\\n            password: this.formBuilder.control(\\\"\\\", Validators.required),\\n            confirmPassword: this.formBuilder.control(\\\"\\\", Validators.required),\\n        }, {\\n            validator: this.matchPassword.bind(this.formBuilder.group),\\n        });\\n    }\\n\\n    private matchPassword(group: FormGroup) {\\n        const password = group.controls.password;\\n        const confirm = group.controls.confirmPassword;\\n        if (password.pristine || confirm.pristine) {\\n            return null;\\n        }\\n\\n        group.markAsTouched();\\n\\n        if (password.value === confirm.value) {\\n            return null;\\n        }\\n\\n        return {\\n            isValid: false,\\n        };\\n    }\\n}\\n\";","export default \"<nui-form-field caption=\\\"This caption is generic for all form fields\\\" i18n-caption\\n                [infoTemplate]=\\\"template\\\"\\n                hint=\\\"Hint may be useful\\\" i18n-hint>\\n    <nui-textbox></nui-textbox>\\n</nui-form-field>\\n<ng-template #template>\\n    New custom info text.\\n    <p>My paragraph. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Suspendisse mollis purus ut odio tempus, ut venenatis diam egestas.</p>\\n    <h1>My header</h1>\\n    <a href=\\\"http://apollo-docs.swdev.local/\\\" target=\\\"_blank\\\">My link</a>\\n    <br>\\n    <i>Italic text</i>\\n    <br>\\n    <strong>Strong text</strong>\\n</ng-template>\\n\";","export * from \"./form-field-docs/form-field-docs.example.component\";\nexport * from \"./basic/basic-form-field.example.component\";\nexport * from \"./basic-reactive/basic-reactive-form-field.example.component\";\nexport * from \"./in-form/in-form-form-field.example.component\";\nexport * from \"./complex/form-field-complex.example.component\";\nexport * from \"./nested-forms-as-component/nested-forms-as-component.example.component\";\nexport * from \"./form-field-visual-test/form-field-visual-test.component\";\nexport * from \"./dynamic-disabling/form-field-dynamic-disabling.example.component\";\nexport * from \"./form-field-test/form-field-test.component\";\nexport * from \"./html-as-info/html-as-info-in-form-field.example.component\";\nexport * from \"./form-field-validation-triggering/form-field-validation-triggering.example.component\";\n","import { Component, Inject, OnInit } from \"@angular/core\";\nimport { FormBuilder, FormGroup, Validators } from \"@angular/forms\";\nimport { ToastService } from \"@nova-ui/bits\";\n\n@Component({\n    selector: \"nui-form-field-dynamic-disabling-example\",\n    templateUrl: \"./form-field-dynamic-disabling.example.component.html\",\n})\nexport class FormFieldDynamicDisablingExampleComponent implements OnInit {\n    public dynamicForm: FormGroup;\n    public visibleRadio: boolean;\n\n    constructor(private formBuilder: FormBuilder,\n                @Inject(ToastService) private toastService: ToastService) {\n    }\n\n    public ngOnInit() {\n        this.dynamicForm = this.formBuilder.group({\n            password: this.formBuilder.control(\"\", Validators.required),\n            confirmPassword: this.formBuilder.control({value: \"\", disabled: true}, Validators.required),\n        });\n    }\n\n    public onPasswordBlurred() {\n        if (this.dynamicForm.controls.password.valid) {\n            this.dynamicForm.controls.confirmPassword.enable();\n        } else {\n            this.dynamicForm.controls.confirmPassword.disable();\n        }\n    }\n\n    public toggleRadio() {\n        this.visibleRadio = !this.visibleRadio;\n    }\n}\n","<form [formGroup]=\"dynamicForm\">\n    <nui-form-field class=\"d-block mb-4\"\n                    caption=\"Password\" i18n-caption\n                    [control]=\"dynamicForm.controls['password']\"\n                    id=\"nui-form-field-dynamic-disabling\">\n        <nui-textbox id=\"nui-form-field-dynamic-disabling-password\" formControlName=\"password\"\n                    (textChange)=\"onPasswordBlurred()\"></nui-textbox>\n        <nui-validation-message for=\"required\" i18n>\n            This is required\n        </nui-validation-message>\n    </nui-form-field>\n    <nui-form-field caption=\"Confirm Password\" i18n-caption\n                    [control]=\"dynamicForm.controls['confirmPassword']\">\n        <nui-textbox id=\"nui-form-field-dynamic-disabling-confirm-password\"\n                    formControlName=\"confirmPassword\"></nui-textbox>\n        <nui-validation-message for=\"required\" i18n>\n            This is required\n        </nui-validation-message>\n    </nui-form-field>\n</form>\n","export default \"\\n<div class=\\\"container\\\">\\n    <h3>Nested form components</h3>\\n    <form [formGroup]=\\\"fancyForm\\\" class=\\\"nui-edge-definer\\\">\\n        <nui-form-field caption=\\\"Nickname\\\"\\n                        hint=\\\"Some pretty long text with hint\\\"\\n                        info=\\\"text\\\"\\n                        [control]=\\\"fancyForm.controls['nickname']\\\">\\n            <nui-textbox formControlName=\\\"nickname\\\" id=\\\"nui-form-field-visual-test-nickname\\\"></nui-textbox>\\n            <nui-validation-message for=\\\"required\\\">\\n                This is required\\n            </nui-validation-message>\\n        </nui-form-field>\\n        <nui-form-field caption=\\\"City\\\"\\n                        [control]=\\\"fancyForm.controls['City']\\\">\\n            <nui-textbox formControlName=\\\"city\\\" id=\\\"nui-form-field-visual-test-city\\\"></nui-textbox>\\n        </nui-form-field>\\n    </form>\\n    <h3>Custom error message styling</h3>\\n    <form [formGroup]=\\\"fancyForm\\\">\\n        <nui-form-field i18n-caption caption=\\\"Textbox\\\"\\n                        i18n-hint hint=\\\"Try to leave empty this required field\\\"\\n                        [control]=\\\"fancyForm.controls['textbox']\\\">\\n            <nui-textbox formControlName=\\\"textbox\\\" type=\\\"textbox\\\"></nui-textbox>\\n\\n            <nui-custom-validation-message for=\\\"required\\\">\\n                <nui-icon icon=\\\"status_critical\\\" iconSize=\\\"small\\\" aria-hidden=\\\"true\\\"></nui-icon>\\n                <span class=\\\"ml-1\\\"><em i18n>This is required</em></span>\\n            </nui-custom-validation-message>\\n        </nui-form-field>\\n    </form>\\n    <h3>Various Components in a Form</h3>\\n    <form [formGroup]=\\\"fancyForm\\\" class=\\\"nui-edge-definer\\\">\\n    <div class=\\\"row\\\">\\n        <div class=\\\"col\\\">\\n            <nui-form-field caption=\\\"Textbox\\\"\\n                            hint=\\\"This should be any valid email\\\"\\n                            info=\\\"text\\\"\\n                            [control]=\\\"fancyForm.controls['textbox']\\\">\\n                <nui-textbox id=\\\"nui-form-field-visual-test-textbox\\\"\\n                             formControlName=\\\"textbox\\\"></nui-textbox>\\n                <nui-validation-message for=\\\"required\\\">\\n                    This field is required\\n                </nui-validation-message>\\n                <nui-validation-message for=\\\"email\\\">\\n                    Something, but not enough\\n                </nui-validation-message>\\n            </nui-form-field>\\n        </div>\\n        <div class=\\\"col\\\">\\n            <nui-form-field id=\\\"nui-form-field-visual-test-form-field\\\"\\n                            caption=\\\"Checkbox\\\"\\n                            hint=\\\"Some pretty long text with hint\\\"\\n                            info=\\\"text\\\"\\n                            [control]=\\\"fancyForm.controls['checkbox']\\\">\\n                <nui-checkbox id=\\\"nui-form-field-visual-test-checkbox\\\"\\n                                formControlName=\\\"checkbox\\\"></nui-checkbox>\\n                <nui-validation-message for=\\\"required\\\">\\n                    This field is required\\n                </nui-validation-message>\\n            </nui-form-field>\\n        </div>\\n        <div class=\\\"col\\\">\\n            <nui-form-field caption=\\\"Switch\\\"\\n                            hint=\\\"Some pretty long text with hint\\\"\\n                            info=\\\"text\\\"\\n                            [control]=\\\"fancyForm.controls['switch']\\\">\\n                <nui-switch id=\\\"nui-form-field-visual-test-switch\\\"\\n                            formControlName=\\\"switch\\\"></nui-switch>\\n                <nui-validation-message for=\\\"required\\\">\\n                    This field is required\\n                </nui-validation-message>\\n            </nui-form-field>\\n        </div>\\n        <hr />\\n    </div>\\n    <div class=\\\"row\\\">\\n        <div class=\\\"col\\\">\\n            <nui-form-field caption=\\\"Checkbox Group\\\"\\n                            hint=\\\"Some pretty long text with hint\\\"\\n                            info=\\\"text\\\"\\n                            [control]=\\\"fancyForm.controls['checkboxGroup']\\\">\\n                <nui-checkbox-group id=\\\"nui-form-field-visual-test-checkbox-group\\\"\\n                                    formControlName=\\\"checkboxGroup\\\"\\n                                    name=\\\"vegetable\\\">\\n                    <nui-checkbox *ngFor=\\\"let vegetable of vegetables;\\\"\\n                                  [value]=\\\"vegetable\\\">\\n                        {{vegetable}}\\n                    </nui-checkbox>\\n                </nui-checkbox-group>\\n                <nui-validation-message for=\\\"required\\\">\\n                    This field is required\\n                </nui-validation-message>\\n            </nui-form-field>\\n        </div>\\n        <div class=\\\"col\\\">\\n            <nui-form-field caption=\\\"Radio Group\\\"\\n                            hint=\\\"Some pretty long text with hint\\\"\\n                            info=\\\"text\\\"\\n                            [control]=\\\"fancyForm.controls['radioGroup']\\\">\\n                <nui-radio-group id=\\\"nui-form-field-visual-test-radio\\\"\\n                                 formControlName=\\\"radioGroup\\\"\\n                                 name=\\\"vegetable\\\" required>\\n                    <nui-radio *ngFor=\\\"let vegetable of vegetables\\\"\\n                               [value]=\\\"vegetable\\\">\\n                        {{vegetable}}\\n                    </nui-radio>\\n                </nui-radio-group>\\n                <nui-validation-message for=\\\"required\\\">\\n                    This field is required\\n                </nui-validation-message>\\n            </nui-form-field>\\n        </div>\\n        <hr />\\n    </div>\\n    <div class=\\\"row\\\">\\n        <div class=\\\"col\\\">\\n            <nui-form-field caption=\\\"Combobox\\\"\\n                            hint=\\\"Some pretty long text with hint\\\"\\n                            info=\\\"text\\\"\\n                            [control]=\\\"fancyForm.controls['combobox']\\\">\\n                <nui-combobox id=\\\"nui-form-field-visual-test-combobox\\\"\\n                                formControlName=\\\"combobox\\\"\\n                                [itemsSource]=\\\"vegetables\\\"></nui-combobox>\\n                <nui-validation-message for=\\\"required\\\">\\n                    This field is required\\n                </nui-validation-message>\\n            </nui-form-field>\\n        </div>\\n        <div class=\\\"col\\\">\\n            <nui-form-field caption=\\\"Select\\\"\\n                            hint=\\\"Some pretty long text with hint\\\"\\n                            info=\\\"text\\\"\\n                            [control]=\\\"fancyForm.controls['select']\\\">\\n                <nui-select id=\\\"nui-form-field-visual-test-select\\\"\\n                            formControlName=\\\"select\\\"\\n                            [itemsSource]=\\\"vegetables\\\"></nui-select>\\n                <nui-validation-message for=\\\"required\\\">\\n                    This field is required\\n                </nui-validation-message>\\n            </nui-form-field>\\n        </div>\\n        <div class=\\\"col\\\">\\n            <nui-form-field caption=\\\"Time Picker\\\"\\n                            hint=\\\"Some pretty long text with hint\\\"\\n                            info=\\\"text\\\"\\n                            [control]=\\\"fancyForm.controls['timePicker']\\\">\\n                <nui-time-picker id=\\\"nui-form-field-visual-test-timepicker\\\"\\n                                    formControlName=\\\"timePicker\\\"></nui-time-picker>\\n                <nui-validation-message for=\\\"required\\\">\\n                    This field is required\\n                </nui-validation-message>\\n            </nui-form-field>\\n        </div>\\n    </div>\\n    <div class=\\\"my-3 d-flex flex-row justify-content-center\\\">\\n        <div>\\n            <button nui-button class=\\\"btn\\\" id=\\\"nui-demo-mark-as-touched-button\\\" (click)=\\\"markAsTouched()\\\">Mark as Dirty</button>\\n        </div>\\n    </div>\\n    <div class=\\\"d-flex flex-row justify-content-center\\\">\\n        <div class=\\\"w-100 d-flex flex-column\\\">\\n            <pre>fancyForm.valid = {{fancyForm.valid}}</pre>\\n        </div>\\n    </div>\\n    </form>\\n</div>\\n\";","export default \"<form [formGroup]=\\\"fancyForm\\\" (submit)=\\\"onSubmit(fancyForm)\\\" class=\\\"nui-edge-definer\\\">\\n    <nui-form-field class=\\\"d-block mb-4\\\"\\n                    caption=\\\"Nickname\\\" i18n-caption\\n                    hint=\\\"Some pretty long text with hint\\\" i18n-hint\\n                    info=\\\"text\\\"\\n                    [control]=\\\"fancyForm.controls['nickname']\\\">\\n        <nui-textbox formControlName=\\\"nickname\\\"></nui-textbox>\\n        <nui-validation-message for=\\\"required\\\" i18n>\\n            This is required\\n        </nui-validation-message>\\n    </nui-form-field>\\n    <nui-first-custom-form-example (formReady)=\\\"formInitialized('firstForm', $event)\\\"></nui-first-custom-form-example>\\n    <nui-second-custom-form-example (formReady)=\\\"formInitialized('secondForm', $event)\\\"></nui-second-custom-form-example>\\n    <pre>fancyForm.valid = {{fancyForm.valid}}</pre>\\n</form>\\n\";","export default \"<form [formGroup]=\\\"fancyForm\\\" class=\\\"nui-edge-definer\\\">\\n    <nui-form-field class=\\\"d-block mb-4\\\"\\n                    caption=\\\"Textbox\\\" i18n-caption\\n                    hint=\\\"This is a configurable help hint\\\" i18n-hint\\n                    info=\\\"text\\\"\\n                    [control]=\\\"fancyForm.controls['textbox']\\\" >\\n        <nui-textbox id=\\\"input-textbox\\\"\\n                    formControlName=\\\"textbox\\\"></nui-textbox>\\n        <nui-validation-message for=\\\"required\\\" i18n>\\n            This field is required\\n        </nui-validation-message>\\n    </nui-form-field>\\n    <nui-form-field class=\\\"d-block mb-4\\\"\\n                    caption=\\\"Textbox number\\\" i18n-caption\\n                    hint=\\\"This is a configurable help hint\\\" i18n-hint\\n                    info=\\\"text\\\"\\n                    [control]=\\\"fancyForm.controls['textNumber']\\\" >\\n        <nui-textbox-number id=\\\"input-textNumber\\\"\\n                            formControlName=\\\"textNumber\\\"></nui-textbox-number>\\n        <nui-validation-message for=\\\"required\\\" i18n>\\n            This field is required\\n        </nui-validation-message>\\n    </nui-form-field>\\n    <nui-form-field class=\\\"d-block mb-4\\\"\\n                    caption=\\\"Checkbox\\\" i18n-caption\\n                    hint=\\\"Some pretty long text with hint\\\" i18n-hint\\n                    info=\\\"text\\\"\\n                    [control]=\\\"fancyForm.controls['checkbox']\\\">\\n        <nui-checkbox id=\\\"input-checkbox\\\"\\n                    formControlName=\\\"checkbox\\\" required></nui-checkbox>\\n        <nui-validation-message for=\\\"required\\\" i18n>\\n            This field is required\\n        </nui-validation-message>\\n    </nui-form-field>\\n    <nui-form-field class=\\\"d-block mb-4\\\"\\n                    caption=\\\"Checkbox Group\\\" i18n-caption\\n                    hint=\\\"Some pretty long text with hint\\\" i18n-hint\\n                    info=\\\"text\\\"\\n                    [control]=\\\"fancyForm.controls['checkboxGroup']\\\">\\n        <nui-checkbox-group id=\\\"input-checkboxGroup\\\"\\n                            formControlName=\\\"checkboxGroup\\\"\\n                            name=\\\"vegetable\\\">\\n            <nui-checkbox *ngFor=\\\"let vegetable of vegetables;\\\"\\n                        [value]=\\\"vegetable\\\">\\n                {{vegetable}}\\n            </nui-checkbox>\\n        </nui-checkbox-group>\\n        <nui-validation-message for=\\\"required\\\" i18n>\\n            This field is required\\n        </nui-validation-message>\\n    </nui-form-field>\\n    <nui-form-field class=\\\"d-block mb-4\\\"\\n                    caption=\\\"Radio Group\\\" i18n-caption\\n                    hint=\\\"Some pretty long text with hint\\\" i18n-hint\\n                    info=\\\"text\\\"\\n                    [control]=\\\"fancyForm.controls['radioGroup']\\\">\\n        <nui-radio-group id=\\\"input-radioGroup\\\"\\n                        formControlName=\\\"radioGroup\\\"\\n                        name=\\\"vegetable\\\" required>\\n            <nui-radio *ngFor=\\\"let vegetable of vegetables\\\"\\n                    [value]=\\\"vegetable\\\">\\n                {{vegetable}}\\n            </nui-radio>\\n        </nui-radio-group>\\n        <nui-validation-message for=\\\"required\\\" i18n>\\n            This field is required\\n        </nui-validation-message>\\n    </nui-form-field>\\n    <nui-form-field class=\\\"d-block mb-4\\\"\\n                    caption=\\\"Switch\\\" i18n-caption\\n                    hint=\\\"Some pretty long text with hint\\\" i18n-hint\\n                    info=\\\"text\\\"\\n                    [control]=\\\"fancyForm.controls['switch']\\\">\\n        <nui-switch id=\\\"input-switch\\\"\\n                    formControlName=\\\"switch\\\"></nui-switch>\\n        <nui-validation-message for=\\\"required\\\">\\n            This field is required\\n        </nui-validation-message>\\n    </nui-form-field>\\n    <nui-form-field class=\\\"d-block mb-4\\\"\\n                    caption=\\\"Select\\\" i18n-caption\\n                    hint=\\\"Some pretty long text with hint\\\" i18n-hint\\n                    info=\\\"text\\\"\\n                    [control]=\\\"fancyForm.controls['select']\\\">\\n        <nui-select id=\\\"input-select\\\"\\n                    formControlName=\\\"select\\\"\\n                    [itemsSource]=\\\"vegetables\\\"></nui-select>\\n        <nui-validation-message for=\\\"required\\\" i18n>\\n            This field is required\\n        </nui-validation-message>\\n    </nui-form-field>\\n    <nui-form-field class=\\\"d-block mb-4\\\"\\n                    caption=\\\"Combobox\\\" i18n-caption\\n                    hint=\\\"Some pretty long text with hint\\\" i18n-hint\\n                    info=\\\"text\\\"\\n                    [control]=\\\"fancyForm.controls['combobox']\\\">\\n        <nui-combobox id=\\\"input-combobox\\\"\\n                    formControlName=\\\"combobox\\\"\\n                    [itemsSource]=\\\"vegetables\\\"></nui-combobox>\\n        <nui-validation-message for=\\\"required\\\" i18n>\\n            This field is required\\n        </nui-validation-message>\\n    </nui-form-field>\\n    <nui-form-field class=\\\"d-block mb-4\\\"\\n                    caption=\\\"Date Picker\\\" i18n-caption\\n                    hint=\\\"Some pretty long text with hint\\\" i18n-hint\\n                    info=\\\"text\\\"\\n                    [control]=\\\"fancyForm.controls['datePicker']\\\">\\n        <nui-date-picker id=\\\"input-datePicker\\\"\\n                        formControlName=\\\"datePicker\\\"></nui-date-picker>\\n        <nui-validation-message for=\\\"invalidFormat\\\" i18n>\\n            The format is incorrect\\n        </nui-validation-message>\\n    </nui-form-field>\\n    <nui-form-field class=\\\"d-block mb-4\\\"\\n                    caption=\\\"Time Picker\\\" i18n-caption\\n                    hint=\\\"Some pretty long text with hint\\\" i18n-hint\\n                    info=\\\"text\\\"\\n                    [control]=\\\"fancyForm.controls['timePicker']\\\">\\n        <nui-time-picker id=\\\"input-timePicker\\\"\\n                        formControlName=\\\"timePicker\\\"></nui-time-picker>\\n        <nui-validation-message for=\\\"required\\\" i18n>\\n            This field is required\\n        </nui-validation-message>\\n    </nui-form-field>\\n    <nui-form-field caption=\\\"Date Time Picker\\\"\\n        hint=\\\"Some pretty long text with hint. Longer than previous even. This text should not ellipsify.\\\"\\n        info=\\\"text\\\">\\n        <nui-date-time-picker id=\\\"input-dateTimePicker\\\"\\n                            formControlName=\\\"dateTimePicker\\\">\\n        </nui-date-time-picker>\\n        <nui-validation-message>\\n            This field is required\\n        </nui-validation-message>\\n    </nui-form-field>\\n</form>\\n\";","import { Component } from \"@angular/core\";\n\n@Component({\n    selector: \"nui-form-field-basic-example\",\n    templateUrl: \"./basic-form-field.example.component.html\",\n})\nexport class FormFieldBasicExampleComponent {\n\n}\n","<nui-form-field caption=\"This caption is generic for all form fields\" i18n-caption\n                info=\"Some info to show\" i18n-info\n                hint=\"Hint may be useful\" i18n-hint>\n    <nui-textbox></nui-textbox>\n</nui-form-field>\n","export default \"export * from \\\"./form-field-docs/form-field-docs.example.component\\\";\\nexport * from \\\"./basic/basic-form-field.example.component\\\";\\nexport * from \\\"./basic-reactive/basic-reactive-form-field.example.component\\\";\\nexport * from \\\"./in-form/in-form-form-field.example.component\\\";\\nexport * from \\\"./complex/form-field-complex.example.component\\\";\\nexport * from \\\"./nested-forms-as-component/nested-forms-as-component.example.component\\\";\\nexport * from \\\"./form-field-visual-test/form-field-visual-test.component\\\";\\nexport * from \\\"./dynamic-disabling/form-field-dynamic-disabling.example.component\\\";\\nexport * from \\\"./form-field-test/form-field-test.component\\\";\\nexport * from \\\"./html-as-info/html-as-info-in-form-field.example.component\\\";\\nexport * from \\\"./form-field-validation-triggering/form-field-validation-triggering.example.component\\\";\\n\";","export default \"import { Component, Inject, OnInit } from \\\"@angular/core\\\";\\nimport { FormBuilder, FormGroup, Validators } from \\\"@angular/forms\\\";\\nimport { ToastService } from \\\"@nova-ui/bits\\\";\\n\\n@Component({\\n    selector: \\\"nui-form-field-dynamic-disabling-example\\\",\\n    templateUrl: \\\"./form-field-dynamic-disabling.example.component.html\\\",\\n})\\nexport class FormFieldDynamicDisablingExampleComponent implements OnInit {\\n    public dynamicForm: FormGroup;\\n    public visibleRadio: boolean;\\n\\n    constructor(private formBuilder: FormBuilder,\\n                @Inject(ToastService) private toastService: ToastService) {\\n    }\\n\\n    public ngOnInit() {\\n        this.dynamicForm = this.formBuilder.group({\\n            password: this.formBuilder.control(\\\"\\\", Validators.required),\\n            confirmPassword: this.formBuilder.control({value: \\\"\\\", disabled: true}, Validators.required),\\n        });\\n    }\\n\\n    public onPasswordBlurred() {\\n        if (this.dynamicForm.controls.password.valid) {\\n            this.dynamicForm.controls.confirmPassword.enable();\\n        } else {\\n            this.dynamicForm.controls.confirmPassword.disable();\\n        }\\n    }\\n\\n    public toggleRadio() {\\n        this.visibleRadio = !this.visibleRadio;\\n    }\\n}\\n\";","export default \"import { Component, OnInit } from \\\"@angular/core\\\";\\nimport { FormBuilder, FormGroup, Validators } from \\\"@angular/forms\\\";\\n\\n@Component({\\n    selector: \\\"nui-form-field-basic-reactive-example\\\",\\n    templateUrl: \\\"./basic-reactive-form-field.example.component.html\\\",\\n})\\nexport class FormFieldBasicReactiveExampleComponent implements OnInit {\\n    public reactiveForm: FormGroup;\\n\\n    constructor(private formBuilder: FormBuilder) {\\n    }\\n\\n    public ngOnInit() {\\n        this.reactiveForm = this.formBuilder.group({\\n            email: this.formBuilder.control(\\\"\\\", [\\n                Validators.required,\\n                Validators.email,\\n            ]),\\n        });\\n    }\\n}\\n\";","import { Component, OnInit } from \"@angular/core\";\nimport { FormBuilder, FormGroup, Validators } from \"@angular/forms\";\n\n@Component({\n    selector: \"nui-form-field-basic-reactive-example\",\n    templateUrl: \"./basic-reactive-form-field.example.component.html\",\n})\nexport class FormFieldBasicReactiveExampleComponent implements OnInit {\n    public reactiveForm: FormGroup;\n\n    constructor(private formBuilder: FormBuilder) {\n    }\n\n    public ngOnInit() {\n        this.reactiveForm = this.formBuilder.group({\n            email: this.formBuilder.control(\"\", [\n                Validators.required,\n                Validators.email,\n            ]),\n        });\n    }\n}\n","<form [formGroup]=\"reactiveForm\">\n    <nui-form-field caption=\"Email address\" i18n-caption\n                    hint=\"Try to change value or remove everything\"\n                    i18n-hint\n                    [control]=\"reactiveForm.controls['email']\">\n        <nui-textbox formControlName=\"email\" type=\"email\"></nui-textbox>\n        <nui-validation-message for=\"required\" i18n>\n            This is required\n        </nui-validation-message>\n        <nui-validation-message for=\"email\" i18n>\n            This should be a valid email\n        </nui-validation-message>\n    </nui-form-field>\n</form>\n","export default \"<nui-form-field class=\\\"d-block mb-4\\\"\\n                caption=\\\"Form field with string hint\\\" i18n-caption\\n                info=\\\"Some info to show\\\" i18n-info\\n                hint=\\\"Hint may be useful Some pretty long text with hint.\\\">\\n    <nui-textbox></nui-textbox>\\n</nui-form-field>\\n<nui-form-field caption=\\\"Form field with hint template\\\" i18n-caption\\n                info=\\\"Some info to show\\\" i18n-info\\n                [hintTemplate]=\\\"hintTemplate\\\">\\n    <nui-textbox></nui-textbox>\\n</nui-form-field>\\n<ng-template #hintTemplate>\\n    <ng-container i18n>Some pretty long text with hint. <a href=\\\"\\\" [routerLink]=\\\"\\\">Example link.</a></ng-container>\\n</ng-template>\\n\";","export default \"import { Component } from \\\"@angular/core\\\";\\n\\n@Component({\\n    selector: \\\"nui-form-field-hint-basic-example\\\",\\n    templateUrl: \\\"./form-field-hint.example.component.html\\\",\\n})\\nexport class FormFieldBasicHintExampleComponent {\\n\\n}\\n\";","export default \"<form [formGroup]=\\\"fancyForm\\\" class=\\\"nui-edge-definer\\\">\\n    <nui-form-field class=\\\"d-block mb-4\\\"\\n                    caption=\\\"Password\\\" i18n-caption\\n                    hint=\\\"Some pretty long text with hint\\\" i18n-hint\\n                    info=\\\"text\\\"\\n                    [control]=\\\"fancyForm.controls['password']\\\">\\n        <nui-textbox formControlName=\\\"password\\\"></nui-textbox>\\n        <nui-validation-message for=\\\"required\\\" i18n>\\n            This is required\\n        </nui-validation-message>\\n    </nui-form-field>\\n    <nui-form-field class=\\\"d-block mb-4\\\"\\n                    caption=\\\"Confirm Password\\\" i18n-caption\\n                    hint=\\\"Some pretty long text with hint\\\" i18n-hint\\n                    info=\\\"text\\\"\\n                    [control]=\\\"fancyForm.controls['confirmPassword']\\\">\\n        <nui-textbox formControlName=\\\"confirmPassword\\\"></nui-textbox>\\n        <nui-validation-message for=\\\"required\\\" i18n>\\n            This is required\\n        </nui-validation-message>\\n    </nui-form-field>\\n</form>\\n<pre>fancyForm.valid = {{fancyForm.valid}}</pre>\\n\";","export default \"<form [formGroup]=\\\"reactiveForm\\\">\\n    <nui-form-field i18n-caption caption=\\\"Email address\\\"\\n                    i18n-hint hint=\\\"Try to change value or remove everything\\\"\\n                    [control]=\\\"reactiveForm.controls['email']\\\">\\n        <nui-textbox formControlName=\\\"email\\\" type=\\\"email\\\"></nui-textbox>\\n\\n        <nui-custom-validation-message for=\\\"required\\\">\\n            <div class=\\\"nui-validation-message\\\" role=\\\"alert\\\">\\n                <nui-icon icon=\\\"status_critical\\\" iconSize=\\\"small\\\" aria-hidden=\\\"true\\\"></nui-icon>\\n                <span class=\\\"ml-1\\\"><em i18n>This is required</em></span>\\n            </div>\\n        </nui-custom-validation-message>\\n\\n        <nui-custom-validation-message for=\\\"email\\\">\\n            <div class=\\\"nui-validation-message\\\" role=\\\"alert\\\">\\n                <nui-icon icon=\\\"status_critical\\\" iconSize=\\\"small\\\" aria-hidden=\\\"true\\\"></nui-icon>\\n                <span class=\\\"ml-1\\\"><em i18n>This should be a valid email</em></span>\\n            </div>\\n        </nui-custom-validation-message>\\n    </nui-form-field>\\n</form>\\n\";","<nui-form-field class=\"d-block mb-4\"\n                caption=\"Form field with string hint\" i18n-caption\n                info=\"Some info to show\" i18n-info\n                hint=\"Hint may be useful Some pretty long text with hint.\">\n    <nui-textbox></nui-textbox>\n</nui-form-field>\n<nui-form-field caption=\"Form field with hint template\" i18n-caption\n                info=\"Some info to show\" i18n-info\n                [hintTemplate]=\"hintTemplate\">\n    <nui-textbox></nui-textbox>\n</nui-form-field>\n<ng-template #hintTemplate>\n    <ng-container i18n>Some pretty long text with hint. <a href=\"\" [routerLink]=\"\">Example link.</a></ng-container>\n</ng-template>\n","import { Component } from \"@angular/core\";\n\n@Component({\n    selector: \"nui-form-field-hint-basic-example\",\n    templateUrl: \"./form-field-hint.example.component.html\",\n})\nexport class FormFieldBasicHintExampleComponent {\n\n}\n","export default \"<form [formGroup]=\\\"dynamicForm\\\">\\n    <nui-form-field class=\\\"d-block mb-4\\\"\\n                    caption=\\\"Password\\\" i18n-caption\\n                    [control]=\\\"dynamicForm.controls['password']\\\"\\n                    id=\\\"nui-form-field-dynamic-disabling\\\">\\n        <nui-textbox id=\\\"nui-form-field-dynamic-disabling-password\\\" formControlName=\\\"password\\\"\\n                    (textChange)=\\\"onPasswordBlurred()\\\"></nui-textbox>\\n        <nui-validation-message for=\\\"required\\\" i18n>\\n            This is required\\n        </nui-validation-message>\\n    </nui-form-field>\\n    <nui-form-field caption=\\\"Confirm Password\\\" i18n-caption\\n                    [control]=\\\"dynamicForm.controls['confirmPassword']\\\">\\n        <nui-textbox id=\\\"nui-form-field-dynamic-disabling-confirm-password\\\"\\n                    formControlName=\\\"confirmPassword\\\"></nui-textbox>\\n        <nui-validation-message for=\\\"required\\\" i18n>\\n            This is required\\n        </nui-validation-message>\\n    </nui-form-field>\\n</form>\\n\";","import { Component, OnInit } from \"@angular/core\";\nimport { FormBuilder, FormGroup, Validators } from \"@angular/forms\";\n\n@Component({\n    selector: \"nui-form-field-validation-triggering-example\",\n    templateUrl: \"./form-field-validation-triggering.example.component.html\",\n})\nexport class FormFieldValidationTriggeringxampleComponent implements OnInit {\n    public reactiveForm: FormGroup;\n\n    constructor(private formBuilder: FormBuilder) {\n    }\n\n    public ngOnInit() {\n        this.reactiveForm = this.formBuilder.group({\n            email: this.formBuilder.control(\"\"),\n        });\n    }\n\n    public onAddValidators() {\n        this.reactiveForm.get(\"email\")?.setValidators([\n            Validators.required,\n            Validators.email,\n        ]);\n    }\n\n    public onTouch() {\n        if (this.reactiveForm.get(\"email\")?.value === \"\" &&  this.reactiveForm.get(\"email\")?.errors === null && this.reactiveForm.get(\"email\")?.validator) {\n            this.reactiveForm.get(\"email\")?.setErrors({ required: true });\n        }\n        this.reactiveForm.get(\"email\")?.markAsTouched();\n    }\n\n    public onValueChange() {\n        const text = this.reactiveForm.get(\"email\")?.value === \"\" ? \"some text here\" : \"\";\n        this.reactiveForm.get(\"email\")?.setValue(text);\n    }\n\n    public onStatusChange() {\n        const errors = this.reactiveForm.valid ? { hasError: true} : null;\n        this.reactiveForm.get(\"email\")?.setErrors(errors);\n    }\n\n    public onReset() {\n        this.reactiveForm.get(\"email\")?.reset(\"\");\n        this.reactiveForm.get(\"email\")?.setErrors(null);\n        this.reactiveForm.get(\"email\")?.setValidators(null);\n    }\n}\n","<form [formGroup]=\"reactiveForm\">\n    <nui-form-field class=\"d-block mb-4\"\n                    caption=\"Email address\" i18n-caption\n                    hint=\"Try to change value or remove everything\"\n                    i18n-hint\n                    [control]=\"reactiveForm.controls['email']\">\n        <nui-textbox formControlName=\"email\" type=\"email\"></nui-textbox>\n        <nui-validation-message for=\"required\" i18n>\n            This is required\n        </nui-validation-message>\n        <nui-validation-message for=\"email\" i18n>\n            This should be a valid email\n        </nui-validation-message>\n    </nui-form-field>\n</form>\n<div class=\"btn-group\">\n    <button nui-button type=\"button\" (click)=\"onAddValidators()\" i18n>Add Validators</button>\n    <button nui-button type=\"button\" (click)=\"onTouch()\" i18n>Touch</button>\n    <button nui-button type=\"button\" (click)=\"onValueChange()\" i18n>Value Change</button>\n    <button nui-button type=\"button\" (click)=\"onStatusChange()\" i18n>Status Change</button>\n    <button nui-button type=\"button\" (click)=\"onReset()\" i18n>Reset</button>\n</div>\n\n\n"],"sourceRoot":"webpack:///"}