{"version":3,"sources":["webpack:///demo/src/components/demo/checkbox-group/checkbox-group-docs/checkbox-group-docs.example.component.ts?f947","webpack:///node_modules/raw-loader/dist/cjs.js .*\\.(ts|html|less)$?33fc","webpack:///demo/src/components/demo/checkbox-group/checkbox-group-in-form/checkbox-group-in-form.example.component.ts","webpack:///demo/src/components/demo/checkbox-group/checkbox-group-in-form/checkbox-group-in-form.example.component.html","webpack:///demo/src/components/demo/checkbox-group/checkbox-group-inline/checkbox-group-inline.example.component.ts?f19e","webpack:///demo/src/components/demo/checkbox-group/checkbox-group-test/checkbox-group-test.component.ts","webpack:///demo/src/components/demo/checkbox-group/checkbox-group-test/checkbox-group-test.component.html","webpack:///demo/src/components/demo/checkbox-group/checkbox-group-visual-test/checkbox-group-visual-test.component.ts?1050","webpack:///demo/src/components/demo/checkbox-group/checkbox-group-justified/checkbox-group-justified.example.component.ts?1225","webpack:///demo/src/components/demo/checkbox-group/index.ts?1435","webpack:///demo/src/components/demo/checkbox-group/checkbox-group-inline/checkbox-group-inline.example.component.html?16c6","webpack:///demo/src/components/demo/checkbox-group/checkbox-group-docs/checkbox-group-docs.example.component.ts","webpack:///demo/src/components/demo/checkbox-group/checkbox-group-docs/checkbox-group-docs.example.component.html","webpack:///demo/src/components/demo/checkbox-group/checkbox-group-justified/checkbox-group-justified.example.component.html?2682","webpack:///demo/src/components/demo/checkbox-group/checkbox-group.module.ts?2693","webpack:///demo/src/components/demo/checkbox-group/checkbox-group-in-form/checkbox-group-in-form.example.component.html?36f3","webpack:///demo/src/components/demo/checkbox-group/checkbox-group-test/checkbox-group-test.component.html?52df","webpack:///demo/src/components/demo/checkbox-group/checkbox-group-in-form/checkbox-group-in-form.example.component.ts?63b6","webpack:///demo/src/components/demo/checkbox-group/checkbox-group-basic/checkbox-group-basic.example.component.ts?67b8","webpack:///demo/src/components/demo/checkbox-group/checkbox-group.module.ts","webpack:///demo/src/components/demo/checkbox-group/checkbox-group-basic/checkbox-group-basic.example.component.html?7662","webpack:///demo/src/components/demo/checkbox-group/checkbox-group-test/checkbox-group-test.component.ts?7ee4","webpack:///demo/src/components/demo/checkbox-group/checkbox-group-visual-test/checkbox-group-visual-test.component.html?8f7c","webpack:///demo/src/components/demo/checkbox-group/checkbox-group-visual-test/checkbox-group-visual-test.component.ts","webpack:///demo/src/components/demo/checkbox-group/checkbox-group-visual-test/checkbox-group-visual-test.component.html","webpack:///demo/src/components/demo/checkbox-group/checkbox-group-docs/checkbox-group-docs.example.component.html?9464","webpack:///demo/src/components/demo/checkbox-group/index.ts","webpack:///demo/src/components/demo/checkbox-group/checkbox-group-basic/checkbox-group-basic.example.component.ts","webpack:///demo/src/components/demo/checkbox-group/checkbox-group-basic/checkbox-group-basic.example.component.html","webpack:///demo/src/components/demo/checkbox-group/checkbox-group-inline/checkbox-group-inline.example.component.html","webpack:///demo/src/components/demo/checkbox-group/checkbox-group-inline/checkbox-group-inline.example.component.ts","webpack:///demo/src/components/demo/checkbox-group/checkbox-group-justified/checkbox-group-justified.example.component.html","webpack:///demo/src/components/demo/checkbox-group/checkbox-group-justified/checkbox-group-justified.example.component.ts"],"names":["map","webpackContext","req","id","webpackContextResolve","__webpack_require__","o","e","Error","code","keys","webpackContextKeys","Object","resolve","module","exports","CheckboxGroupInFormExampleComponent","formBuilder","toastService","cabbage","$localize","potato","tomato","carrot","vegetables","selectedVegetables","myForm","group","checkboxGroup","control","required","minLength","console","log","success","message","vegetable","indexOf","onSubmit","CheckboxGroupTestComponent","disabledOne","hints","testForm","value","disabled","checkboxGroup2","CheckboxGroupExampleComponent","routes","path","component","data","ga","showThemeSwitcher","CheckboxGroupModule","provide","useFactory","forChild","CheckboxGroupVisualTestComponent","CheckboxGroupBasicExampleComponent","event","onValueChange","CheckboxGroupInlineExampleComponent","CheckboxGroupJustifiedExampleComponent"],"mappings":"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","file":"demo-checkbox-group-checkbox-group-module-es5.js","sourcesContent":["export default \"import { Component } from \\\"@angular/core\\\";\\n\\n@Component({\\n    selector: \\\"nui-checkbox-group-docs-example\\\",\\n    templateUrl: \\\"./checkbox-group-docs.example.component.html\\\",\\n})\\nexport class CheckboxGroupExampleComponent {}\\n\";","var map = {\n\t\"./checkbox-group-basic/checkbox-group-basic.example.component.html\": \"dmI9\",\n\t\"./checkbox-group-basic/checkbox-group-basic.example.component.ts\": \"Z7g5\",\n\t\"./checkbox-group-docs/checkbox-group-docs.example.component.html\": \"lGTv\",\n\t\"./checkbox-group-docs/checkbox-group-docs.example.component.ts\": \"+Uf0\",\n\t\"./checkbox-group-in-form/checkbox-group-in-form.example.component.html\": \"NvPO\",\n\t\"./checkbox-group-in-form/checkbox-group-in-form.example.component.ts\": \"Y7Yd\",\n\t\"./checkbox-group-inline/checkbox-group-inline.example.component.html\": \"FsbB\",\n\t\"./checkbox-group-inline/checkbox-group-inline.example.component.ts\": \"8Z72\",\n\t\"./checkbox-group-justified/checkbox-group-justified.example.component.html\": \"JoKC\",\n\t\"./checkbox-group-justified/checkbox-group-justified.example.component.ts\": \"EiW/\",\n\t\"./checkbox-group-test/checkbox-group-test.component.html\": \"Ut/2\",\n\t\"./checkbox-group-test/checkbox-group-test.component.ts\": \"fuQ5\",\n\t\"./checkbox-group-visual-test/checkbox-group-visual-test.component.html\": \"j3x3\",\n\t\"./checkbox-group-visual-test/checkbox-group-visual-test.component.ts\": \"EFDT\",\n\t\"./checkbox-group.module.ts\": \"JpOM\",\n\t\"./index.ts\": \"FDVP\"\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = \"19SM\";","import { Component, OnInit } from \"@angular/core\";\nimport { FormBuilder, FormGroup, Validators } from \"@angular/forms\";\nimport { ToastService } from \"@nova-ui/bits\";\n\n@Component({\n    selector: \"nui-checkbox-group-in-form-example\",\n    templateUrl: \"./checkbox-group-in-form.example.component.html\",\n})\nexport class CheckboxGroupInFormExampleComponent implements OnInit {\n    public myForm: FormGroup;\n    public cabbage = $localize `Cabbage`;\n    public potato = $localize `Potato`;\n    public tomato = $localize `Tomato`;\n    public carrot = $localize `Carrot`;\n    public vegetables = [this.cabbage, this.potato, this.tomato, this.carrot];\n    public selectedVegetables = [this.cabbage];\n\n    constructor(private formBuilder: FormBuilder,\n                private toastService: ToastService) {}\n\n    public ngOnInit() {\n        this.myForm = this.formBuilder.group({\n            checkboxGroup: this.formBuilder.control([this.cabbage, this.potato], [\n                Validators.required, Validators.minLength(3)]),\n        });\n    }\n\n    public onSubmit() {\n        console.log(this.myForm);\n        this.toastService.success({message: $localize `Your form is valid!`});\n    }\n\n    public isChecked(vegetable: string): boolean {\n        return this.selectedVegetables.indexOf(vegetable) > -1;\n    }\n}\n","<form [formGroup]=\"myForm\" (submit)=\"onSubmit()\">\n    <div class=\"form-group\">\n        <nui-message [allowDismiss]=\"true\" type=\"critical\" *ngIf=\"!myForm.controls['checkboxGroup'].valid && myForm.controls['checkboxGroup'].touched\" >\n            <b i18n>Select minimum 3 checkboxes!</b>\n        </nui-message>\n        <nui-checkbox-group id=\"nui-demo-checkbox-group-in-form\"\n                            formControlName=\"checkboxGroup\"\n                            name=\"vegetable\" required>\n            <nui-checkbox *ngFor=\"let vegetable of vegetables\"\n                          [value]=\"vegetable\">\n                {{vegetable}}\n            </nui-checkbox>\n        </nui-checkbox-group>\n    </div>\n    <button nui-button type=\"submit\" [disabled]=\"myForm.disabled || myForm.controls['checkboxGroup'].invalid\" i18n>Submit</button>\n</form>\n","export default \"import { Component } from \\\"@angular/core\\\";\\n\\n@Component({\\n    selector: \\\"nui-checkbox-group-inline-example\\\",\\n    templateUrl: \\\"./checkbox-group-inline.example.component.html\\\",\\n})\\nexport class CheckboxGroupInlineExampleComponent {\\n    public cabbage = $localize `Cabbage`;\\n    public potato = $localize `Potato`;\\n    public tomato = $localize `Tomato`;\\n    public carrot = $localize `Carrot`;\\n    public vegetables = [this.cabbage, this.potato, this.tomato, this.carrot];\\n    public selectedVegetables = [this.potato, this.tomato];\\n\\n    constructor() {}\\n}\\n\";","import { Component, OnInit } from \"@angular/core\";\nimport { FormBuilder, FormGroup } from \"@angular/forms\";\n\n@Component({\n    selector: \"nui-checkbox-group-test-example\",\n    templateUrl: \"checkbox-group-test.component.html\",\n})\n\nexport class CheckboxGroupTestComponent implements OnInit {\n    public testForm: FormGroup;\n    public cabbage = \"Cabbage\";\n    public potato = \"Potato\";\n    public tomato = \"Tomato\";\n    public carrot = \"Carrot\";\n    public disabledOne = \"DISABLED\";\n    public vegetables = [this.cabbage, this.potato, this.tomato, this.carrot];\n    public hints = [this.cabbage, this.tomato];\n    public selectedVegetables = [this.potato, this.tomato, this.disabledOne];\n\n    constructor(private formBuilder: FormBuilder) {}\n\n    ngOnInit() {\n        this.testForm = this.formBuilder.group({\n            checkboxGroup: this.formBuilder.control({\n                value: this.selectedVegetables, disabled: true,\n            }),\n            checkboxGroup2: this.formBuilder.control({\n                value: this.selectedVegetables, disabled: false,\n            }),\n        });\n    }\n\n    public isChecked(vegetable: string): boolean {\n        return this.selectedVegetables.indexOf(vegetable) > -1;\n    }\n}\n","<div class=\"container d-flex\">\n    <div class=\"d-flex flex-column mr-5\">\n        <nui-checkbox-group id=\"nui-demo-checkbox-group-basic\"\n                            name=\"vegetable\"\n                            [values]=\"selectedVegetables\">\n            <nui-checkbox *ngFor=\"let vegetable of vegetables\"\n                          [value]=\"vegetable\"\n                          hint=\"This is some help text\"\n                          [checked]=\"isChecked(vegetable)\">\n                {{vegetable}}\n            </nui-checkbox>\n            <nui-checkbox hint=\"If it's not disabled ring the alarm!\"\n                          id=\"nui-demo-checkbox-group-1-disabled-checkbox\"\n                          [value]=\"disabledOne\"\n                          [checked]=\"!isChecked(disabledOne)\"\n                          disabled=\"true\">{{disabledOne}}</nui-checkbox>\n        </nui-checkbox-group>\n    </div>\n    <div class=\"d-flex flex-column mt-5\">\n        <nui-checkbox-group id=\"nui-demo-checkbox-group-justified\"\n                        name=\"vegetable\"\n                        [values]=\"selectedVegetables\">\n            <nui-checkbox *ngFor=\"let vegetable of vegetables\"\n                        [value]=\"vegetable\"\n                        [hint]=\"(hints.indexOf(vegetable) >=0) ? hints[hints.indexOf(vegetable)] : null\"\n                        [checked]=\"isChecked(vegetable)\"\n                        class=\"nui-checkbox--justified\">\n                {{vegetable}}\n            </nui-checkbox>\n        </nui-checkbox-group>\n    </div>\n    <div class=\"d-flex flex-column mt-5\">\n        <form [formGroup]=\"testForm\">\n            <nui-checkbox-group id=\"nui-demo-checkbox-group-in-form\"\n                            name=\"vegetable\"\n                            formControlName=\"checkboxGroup\">\n                <nui-checkbox *ngFor=\"let vegetable of vegetables\"\n                            [value]=\"vegetable\"\n                            [checked]=\"isChecked(vegetable)\">\n                    {{vegetable}}\n                </nui-checkbox>\n            </nui-checkbox-group>\n        </form>\n    </div>\n    <div class=\"d-flex flex-column mt-5\">\n        <form [formGroup]=\"testForm\">\n            <nui-checkbox-group id=\"nui-demo-checkbox-group-in-form-disabled-checkboxes\"\n                            name=\"vegetable\"\n                            formControlName=\"checkboxGroup2\">\n                <nui-checkbox [value]=\"vegetables[0]\"\n                                [disabled]=\"true\"\n                                [checked]=\"isChecked(vegetables[0])\">\n                    {{vegetables[0]}}</nui-checkbox>\n                <nui-checkbox [value]=\"vegetables[1]\"\n                                [disabled]=\"false\"\n                                [checked]=\"isChecked(vegetables[1])\">\n                    {{vegetables[1]}}</nui-checkbox>\n                <nui-checkbox [value]=\"vegetables[2]\"\n                                [disabled]=\"true\"\n                                [checked]=\"isChecked(vegetables[2])\">\n                    {{vegetables[2]}}</nui-checkbox>\n                <nui-checkbox [value]=\"vegetables[3]\"\n                                [disabled]=\"false\"\n                                [checked]=\"isChecked(vegetables[3])\">\n                    {{vegetables[3]}}</nui-checkbox>\n            </nui-checkbox-group>\n        </form>\n    </div>\n</div>\n","export default \"import { Component, OnInit } from \\\"@angular/core\\\";\\nimport { FormBuilder, FormGroup } from \\\"@angular/forms\\\";\\n\\n@Component({\\n    selector: \\\"nui-checkbox-group-visual-test\\\",\\n    templateUrl: \\\"./checkbox-group-visual-test.component.html\\\",\\n})\\nexport class CheckboxGroupVisualTestComponent implements OnInit {\\n    public testForm: FormGroup;\\n    public cabbage = \\\"Cabbage\\\";\\n    public potato = \\\"Potato\\\";\\n    public tomato = \\\"Tomato\\\";\\n    public carrot = \\\"Carrot\\\";\\n    public disabledOne = \\\"DISABLED\\\";\\n    public vegetables = [this.cabbage, this.potato, this.tomato, this.carrot];\\n    public selectedVegetables = [this.potato, this.tomato, this.disabledOne];\\n\\n    constructor(private formBuilder: FormBuilder) {}\\n\\n    ngOnInit() {\\n        this.testForm = this.formBuilder.group({\\n            checkboxGroup: this.formBuilder.control({\\n                value: this.selectedVegetables, disabled: true,\\n            }),\\n            checkboxGroup2: this.formBuilder.control({\\n                value: this.selectedVegetables, disabled: false,\\n            }),\\n        });\\n    }\\n\\n    public isChecked(vegetable: string): boolean {\\n        return this.selectedVegetables.indexOf(vegetable) > -1;\\n    }\\n}\\n\";","export default \"import { Component } from \\\"@angular/core\\\";\\n\\n@Component({\\n    selector: \\\"nui-checkbox-group-justified-example\\\",\\n    templateUrl: \\\"./checkbox-group-justified.example.component.html\\\",\\n})\\nexport class CheckboxGroupJustifiedExampleComponent {\\n    public cabbage = $localize `Cabbage`;\\n    public potato = $localize `Potato`;\\n    public tomato = $localize `Tomato`;\\n    public carrot = $localize `Carrot`;\\n    public vegetables = [this.cabbage, this.potato, this.tomato, this.carrot];\\n    public hints = [this.cabbage, this.tomato];\\n    public selectedVegetables = [this.potato, this.tomato];\\n\\n    constructor() { }\\n\\n    public isChecked(vegetable: string): boolean {\\n        return this.selectedVegetables.indexOf(vegetable) > -1;\\n    }\\n}\\n\";","export default \"export * from \\\"./checkbox-group-docs/checkbox-group-docs.example.component\\\";\\nexport * from \\\"./checkbox-group-inline/checkbox-group-inline.example.component\\\";\\nexport * from \\\"./checkbox-group-basic/checkbox-group-basic.example.component\\\";\\nexport * from \\\"./checkbox-group-in-form/checkbox-group-in-form.example.component\\\";\\nexport * from \\\"./checkbox-group-visual-test/checkbox-group-visual-test.component\\\";\\nexport * from \\\"./checkbox-group-justified/checkbox-group-justified.example.component\\\";\\nexport * from \\\"./checkbox-group-test/checkbox-group-test.component\\\";\\n\";","export default \"<nui-checkbox-group id=\\\"nui-demo-checkbox-group-inline\\\"\\n                    class=\\\"nui-checkbox-group-inline\\\"\\n                    [values]=\\\"selectedVegetables\\\"\\n                    name=\\\"vegetable\\\">\\n    <nui-checkbox *ngFor=\\\"let vegetable of vegetables\\\"\\n                  [value]=\\\"vegetable\\\">\\n        {{vegetable}}\\n    </nui-checkbox>\\n</nui-checkbox-group>\\n\";","import { Component } from \"@angular/core\";\n\n@Component({\n    selector: \"nui-checkbox-group-docs-example\",\n    templateUrl: \"./checkbox-group-docs.example.component.html\",\n})\nexport class CheckboxGroupExampleComponent {}\n","<h2>Required Modules</h2>\n<ul>\n    <li>\n        <code>NuiCheckboxModule</code>\n    </li>\n</ul>\n\n<h2>Basic Usage</h2>\n<p>\n    The <code>&lt;nui-checkbox-group&gt;</code> component is used for combining <code>&lt;nui-checkbox&gt;</code> components into a\n    group. Use the <code>name</code> input to set the \"name\" attribute for the inner <code>&lt;nui-checkbox&gt;</code> input elements. To get the\n    values of the <code>&lt;nui-checkbox&gt;</code> child components use the <code>values</code> input which is an array of checked state values.\n    To act on checkbox value changes, bind to the <code>(valuesChange)</code> output.\n</p>\n<nui-example-wrapper filenamePrefix=\"checkbox-group-basic\" exampleTitle=\"Basic Usage\">\n    <nui-checkbox-group-basic-example></nui-checkbox-group-basic-example>\n</nui-example-wrapper>\n\n<h2>Inline</h2>\n<p>\n    Use the <code>nui-checkbox-group-inline</code> class to display checkbox group inline.\n</p>\n<nui-example-wrapper filenamePrefix=\"checkbox-group-inline\" exampleTitle=\"Inline\">\n    <nui-checkbox-group-inline-example></nui-checkbox-group-inline-example>\n</nui-example-wrapper>\n\n<h2>Part of Form</h2>\n<p>\n    <code>&lt;nui-checkbox-group&gt;</code> can be used in reactive forms.\n</p>\n<nui-example-wrapper filenamePrefix=\"checkbox-group-in-form\" exampleTitle=\"Part of Form\">\n    <nui-checkbox-group-in-form-example></nui-checkbox-group-in-form-example>\n</nui-example-wrapper>\n\n<h2>Justified</h2>\n<p>\n    To justify <code>&lt;nui-checkbox&gt;</code> to the width of <code>&lt;nui-checkbox-group&gt;</code> (or simply parent element,\n    in case <code>&lt;nui-checkbox&gt;</code> is used not as a part of <code>&lt;nui-checkbox-group&gt;</code>), add\n    <code>nui-checkbox--justified</code> class to the <code>&lt;nui-checkbox&gt;</code>.\n</p>\n<nui-example-wrapper filenamePrefix=\"checkbox-group-justified\" exampleTitle=\"Justified\">\n    <nui-checkbox-group-justified-example></nui-checkbox-group-justified-example>\n</nui-example-wrapper>\n","export default \"<nui-checkbox-group id=\\\"nui-demo-checkbox-group-justified\\\"\\n                    name=\\\"vegetable\\\"\\n                    [values]=\\\"selectedVegetables\\\">\\n    <nui-checkbox *ngFor=\\\"let vegetable of vegetables\\\"\\n                  [value]=\\\"vegetable\\\"\\n                  i18n-hint\\n                  [hint]=\\\"(hints.indexOf(vegetable) >=0) ? hints[hints.indexOf(vegetable)] : null\\\"\\n                  [checked]=\\\"isChecked(vegetable)\\\"\\n                  class=\\\"nui-checkbox--justified\\\">\\n        {{vegetable}}\\n    </nui-checkbox>\\n</nui-checkbox-group>\\n\";","export default \"import { NgModule } from \\\"@angular/core\\\";\\nimport { FormsModule, ReactiveFormsModule } from \\\"@angular/forms\\\";\\nimport { RouterModule } from \\\"@angular/router\\\";\\nimport { DEMO_PATH_TOKEN, NuiButtonModule, NuiCheckboxModule, NuiDocsModule, SrlcStage } from \\\"@nova-ui/bits\\\";\\n\\nimport { CheckboxGroupTestComponent } from \\\"./checkbox-group-test/checkbox-group-test.component\\\";\\nimport {\\n    CheckboxGroupBasicExampleComponent,\\n    CheckboxGroupExampleComponent,\\n    CheckboxGroupInFormExampleComponent,\\n    CheckboxGroupInlineExampleComponent,\\n    CheckboxGroupJustifiedExampleComponent,\\n    CheckboxGroupVisualTestComponent,\\n} from \\\"./index\\\";\\n\\nconst routes = [\\n    {\\n        path: \\\"\\\",\\n        component: CheckboxGroupExampleComponent,\\n        data: {\\n            \\\"srlc\\\": {\\n                \\\"stage\\\": SrlcStage.ga,\\n            },\\n            showThemeSwitcher: true,\\n        },\\n    },\\n    {\\n        path: \\\"checkbox-group-visual-test\\\",\\n        component: CheckboxGroupVisualTestComponent,\\n        data: {\\n            \\\"srlc\\\": {\\n                \\\"hideIndicator\\\": true,\\n            },\\n        },\\n    },\\n    {\\n        path: \\\"checkbox-group-test\\\",\\n        component: CheckboxGroupTestComponent,\\n        data: {\\n            \\\"srlc\\\": {\\n                \\\"hideIndicator\\\": true,\\n            },\\n        },\\n    },\\n];\\n\\n@NgModule({\\n    imports: [\\n        NuiCheckboxModule,\\n        NuiDocsModule,\\n        FormsModule,\\n        ReactiveFormsModule,\\n        NuiButtonModule,\\n        RouterModule.forChild(routes),\\n    ],\\n    declarations: [\\n        CheckboxGroupExampleComponent,\\n        CheckboxGroupInlineExampleComponent,\\n        CheckboxGroupInFormExampleComponent,\\n        CheckboxGroupBasicExampleComponent,\\n        CheckboxGroupVisualTestComponent,\\n        CheckboxGroupJustifiedExampleComponent,\\n        CheckboxGroupTestComponent,\\n    ],\\n    providers: [\\n        {\\n            provide: DEMO_PATH_TOKEN,\\n            useFactory: () => (<any>require).context(`!!raw-loader!./`, true, /.*\\\\.(ts|html|less)$/),\\n        },\\n    ],\\n    exports: [\\n        RouterModule,\\n    ],\\n})\\nexport class CheckboxGroupModule {\\n}\\n\";","export default \"<form [formGroup]=\\\"myForm\\\" (submit)=\\\"onSubmit()\\\">\\n    <div class=\\\"form-group\\\">\\n        <nui-message [allowDismiss]=\\\"true\\\" type=\\\"critical\\\" *ngIf=\\\"!myForm.controls['checkboxGroup'].valid && myForm.controls['checkboxGroup'].touched\\\" >\\n            <b i18n>Select minimum 3 checkboxes!</b>\\n        </nui-message>\\n        <nui-checkbox-group id=\\\"nui-demo-checkbox-group-in-form\\\"\\n                            formControlName=\\\"checkboxGroup\\\"\\n                            name=\\\"vegetable\\\" required>\\n            <nui-checkbox *ngFor=\\\"let vegetable of vegetables\\\"\\n                          [value]=\\\"vegetable\\\">\\n                {{vegetable}}\\n            </nui-checkbox>\\n        </nui-checkbox-group>\\n    </div>\\n    <button nui-button type=\\\"submit\\\" [disabled]=\\\"myForm.disabled || myForm.controls['checkboxGroup'].invalid\\\" i18n>Submit</button>\\n</form>\\n\";","export default \"<div class=\\\"container d-flex\\\">\\n    <div class=\\\"d-flex flex-column mr-5\\\">\\n        <nui-checkbox-group id=\\\"nui-demo-checkbox-group-basic\\\"\\n                            name=\\\"vegetable\\\"\\n                            [values]=\\\"selectedVegetables\\\">\\n            <nui-checkbox *ngFor=\\\"let vegetable of vegetables\\\"\\n                          [value]=\\\"vegetable\\\"\\n                          hint=\\\"This is some help text\\\"\\n                          [checked]=\\\"isChecked(vegetable)\\\">\\n                {{vegetable}}\\n            </nui-checkbox>\\n            <nui-checkbox hint=\\\"If it's not disabled ring the alarm!\\\"\\n                          id=\\\"nui-demo-checkbox-group-1-disabled-checkbox\\\"\\n                          [value]=\\\"disabledOne\\\"\\n                          [checked]=\\\"!isChecked(disabledOne)\\\"\\n                          disabled=\\\"true\\\">{{disabledOne}}</nui-checkbox>\\n        </nui-checkbox-group>\\n    </div>\\n    <div class=\\\"d-flex flex-column mt-5\\\">\\n        <nui-checkbox-group id=\\\"nui-demo-checkbox-group-justified\\\"\\n                        name=\\\"vegetable\\\"\\n                        [values]=\\\"selectedVegetables\\\">\\n            <nui-checkbox *ngFor=\\\"let vegetable of vegetables\\\"\\n                        [value]=\\\"vegetable\\\"\\n                        [hint]=\\\"(hints.indexOf(vegetable) >=0) ? hints[hints.indexOf(vegetable)] : null\\\"\\n                        [checked]=\\\"isChecked(vegetable)\\\"\\n                        class=\\\"nui-checkbox--justified\\\">\\n                {{vegetable}}\\n            </nui-checkbox>\\n        </nui-checkbox-group>\\n    </div>\\n    <div class=\\\"d-flex flex-column mt-5\\\">\\n        <form [formGroup]=\\\"testForm\\\">\\n            <nui-checkbox-group id=\\\"nui-demo-checkbox-group-in-form\\\"\\n                            name=\\\"vegetable\\\"\\n                            formControlName=\\\"checkboxGroup\\\">\\n                <nui-checkbox *ngFor=\\\"let vegetable of vegetables\\\"\\n                            [value]=\\\"vegetable\\\"\\n                            [checked]=\\\"isChecked(vegetable)\\\">\\n                    {{vegetable}}\\n                </nui-checkbox>\\n            </nui-checkbox-group>\\n        </form>\\n    </div>\\n    <div class=\\\"d-flex flex-column mt-5\\\">\\n        <form [formGroup]=\\\"testForm\\\">\\n            <nui-checkbox-group id=\\\"nui-demo-checkbox-group-in-form-disabled-checkboxes\\\"\\n                            name=\\\"vegetable\\\"\\n                            formControlName=\\\"checkboxGroup2\\\">\\n                <nui-checkbox [value]=\\\"vegetables[0]\\\"\\n                                [disabled]=\\\"true\\\"\\n                                [checked]=\\\"isChecked(vegetables[0])\\\">\\n                    {{vegetables[0]}}</nui-checkbox>\\n                <nui-checkbox [value]=\\\"vegetables[1]\\\"\\n                                [disabled]=\\\"false\\\"\\n                                [checked]=\\\"isChecked(vegetables[1])\\\">\\n                    {{vegetables[1]}}</nui-checkbox>\\n                <nui-checkbox [value]=\\\"vegetables[2]\\\"\\n                                [disabled]=\\\"true\\\"\\n                                [checked]=\\\"isChecked(vegetables[2])\\\">\\n                    {{vegetables[2]}}</nui-checkbox>\\n                <nui-checkbox [value]=\\\"vegetables[3]\\\"\\n                                [disabled]=\\\"false\\\"\\n                                [checked]=\\\"isChecked(vegetables[3])\\\">\\n                    {{vegetables[3]}}</nui-checkbox>\\n            </nui-checkbox-group>\\n        </form>\\n    </div>\\n</div>\\n\";","export default \"import { Component, OnInit } from \\\"@angular/core\\\";\\nimport { FormBuilder, FormGroup, Validators } from \\\"@angular/forms\\\";\\nimport { ToastService } from \\\"@nova-ui/bits\\\";\\n\\n@Component({\\n    selector: \\\"nui-checkbox-group-in-form-example\\\",\\n    templateUrl: \\\"./checkbox-group-in-form.example.component.html\\\",\\n})\\nexport class CheckboxGroupInFormExampleComponent implements OnInit {\\n    public myForm: FormGroup;\\n    public cabbage = $localize `Cabbage`;\\n    public potato = $localize `Potato`;\\n    public tomato = $localize `Tomato`;\\n    public carrot = $localize `Carrot`;\\n    public vegetables = [this.cabbage, this.potato, this.tomato, this.carrot];\\n    public selectedVegetables = [this.cabbage];\\n\\n    constructor(private formBuilder: FormBuilder,\\n                private toastService: ToastService) {}\\n\\n    public ngOnInit() {\\n        this.myForm = this.formBuilder.group({\\n            checkboxGroup: this.formBuilder.control([this.cabbage, this.potato], [\\n                Validators.required, Validators.minLength(3)]),\\n        });\\n    }\\n\\n    public onSubmit() {\\n        console.log(this.myForm);\\n        this.toastService.success({message: $localize `Your form is valid!`});\\n    }\\n\\n    public isChecked(vegetable: string): boolean {\\n        return this.selectedVegetables.indexOf(vegetable) > -1;\\n    }\\n}\\n\";","export default \"import { Component } from \\\"@angular/core\\\";\\nimport { ToastService } from \\\"@nova-ui/bits\\\";\\n\\n@Component({\\n    selector: \\\"nui-checkbox-group-basic-example\\\",\\n    templateUrl: \\\"./checkbox-group-basic.example.component.html\\\",\\n})\\nexport class CheckboxGroupBasicExampleComponent {\\n    public cabbage = $localize `Cabbage`;\\n    public potato = $localize `Potato`;\\n    public tomato = $localize `Tomato`;\\n    public carrot = $localize `Carrot`;\\n    public vegetables = [this.cabbage, this.potato, this.tomato, this.carrot];\\n    public selectedVegetables = [this.potato, this.tomato];\\n\\n    constructor(private toastService: ToastService) {}\\n\\n    public isChecked(vegetable: string): boolean {\\n        return this.selectedVegetables.indexOf(vegetable) > -1;\\n    }\\n\\n    public onValueChange (event: any) {\\n        this.toastService.success({message: $localize `Selected checkboxes: ` + event});\\n    }\\n\\n}\\n\";","import { NgModule } from \"@angular/core\";\nimport { FormsModule, ReactiveFormsModule } from \"@angular/forms\";\nimport { RouterModule } from \"@angular/router\";\nimport { DEMO_PATH_TOKEN, NuiButtonModule, NuiCheckboxModule, NuiDocsModule, SrlcStage } from \"@nova-ui/bits\";\n\nimport { CheckboxGroupTestComponent } from \"./checkbox-group-test/checkbox-group-test.component\";\nimport {\n    CheckboxGroupBasicExampleComponent,\n    CheckboxGroupExampleComponent,\n    CheckboxGroupInFormExampleComponent,\n    CheckboxGroupInlineExampleComponent,\n    CheckboxGroupJustifiedExampleComponent,\n    CheckboxGroupVisualTestComponent,\n} from \"./index\";\n\nconst routes = [\n    {\n        path: \"\",\n        component: CheckboxGroupExampleComponent,\n        data: {\n            \"srlc\": {\n                \"stage\": SrlcStage.ga,\n            },\n            showThemeSwitcher: true,\n        },\n    },\n    {\n        path: \"checkbox-group-visual-test\",\n        component: CheckboxGroupVisualTestComponent,\n        data: {\n            \"srlc\": {\n                \"hideIndicator\": true,\n            },\n        },\n    },\n    {\n        path: \"checkbox-group-test\",\n        component: CheckboxGroupTestComponent,\n        data: {\n            \"srlc\": {\n                \"hideIndicator\": true,\n            },\n        },\n    },\n];\n\n@NgModule({\n    imports: [\n        NuiCheckboxModule,\n        NuiDocsModule,\n        FormsModule,\n        ReactiveFormsModule,\n        NuiButtonModule,\n        RouterModule.forChild(routes),\n    ],\n    declarations: [\n        CheckboxGroupExampleComponent,\n        CheckboxGroupInlineExampleComponent,\n        CheckboxGroupInFormExampleComponent,\n        CheckboxGroupBasicExampleComponent,\n        CheckboxGroupVisualTestComponent,\n        CheckboxGroupJustifiedExampleComponent,\n        CheckboxGroupTestComponent,\n    ],\n    providers: [\n        {\n            provide: DEMO_PATH_TOKEN,\n            useFactory: () => (<any>require).context(`!!raw-loader!./`, true, /.*\\.(ts|html|less)$/),\n        },\n    ],\n    exports: [\n        RouterModule,\n    ],\n})\nexport class CheckboxGroupModule {\n}\n","export default \"<nui-checkbox-group id=\\\"nui-demo-checkbox-group-basic\\\"\\n                    name=\\\"vegetable\\\"\\n                    [values]=\\\"selectedVegetables\\\"\\n                    (valuesChange)=\\\"onValueChange($event)\\\">\\n    <nui-checkbox *ngFor=\\\"let vegetable of vegetables\\\"\\n                  [value]=\\\"vegetable\\\"\\n                  i18n-hint\\n                  hint=\\\"This is some help text\\\"\\n                  [checked]=\\\"isChecked(vegetable)\\\">\\n        {{vegetable}}\\n    </nui-checkbox>\\n</nui-checkbox-group>\\n\";","export default \"import { Component, OnInit } from \\\"@angular/core\\\";\\nimport { FormBuilder, FormGroup } from \\\"@angular/forms\\\";\\n\\n@Component({\\n    selector: \\\"nui-checkbox-group-test-example\\\",\\n    templateUrl: \\\"checkbox-group-test.component.html\\\",\\n})\\n\\nexport class CheckboxGroupTestComponent implements OnInit {\\n    public testForm: FormGroup;\\n    public cabbage = \\\"Cabbage\\\";\\n    public potato = \\\"Potato\\\";\\n    public tomato = \\\"Tomato\\\";\\n    public carrot = \\\"Carrot\\\";\\n    public disabledOne = \\\"DISABLED\\\";\\n    public vegetables = [this.cabbage, this.potato, this.tomato, this.carrot];\\n    public hints = [this.cabbage, this.tomato];\\n    public selectedVegetables = [this.potato, this.tomato, this.disabledOne];\\n\\n    constructor(private formBuilder: FormBuilder) {}\\n\\n    ngOnInit() {\\n        this.testForm = this.formBuilder.group({\\n            checkboxGroup: this.formBuilder.control({\\n                value: this.selectedVegetables, disabled: true,\\n            }),\\n            checkboxGroup2: this.formBuilder.control({\\n                value: this.selectedVegetables, disabled: false,\\n            }),\\n        });\\n    }\\n\\n    public isChecked(vegetable: string): boolean {\\n        return this.selectedVegetables.indexOf(vegetable) > -1;\\n    }\\n}\\n\";","export default \"<div class=\\\"container\\\">\\n    <div class=\\\"row\\\">\\n        <div class=\\\"col\\\">\\n            <h3>Basic Checkbox-Group with Hint Text</h3>\\n            <nui-checkbox-group id=\\\"nui-demo-checkbox-group-basic\\\"\\n                                name=\\\"vegetable\\\"\\n                                [values]=\\\"selectedVegetables\\\">\\n                <nui-checkbox *ngFor=\\\"let vegetable of vegetables\\\"\\n                              [value]=\\\"vegetable\\\"\\n                              hint=\\\"This is some help text\\\"\\n                              [checked]=\\\"isChecked(vegetable)\\\">\\n                    {{vegetable}}\\n                </nui-checkbox>\\n                <nui-checkbox hint=\\\"If it's not disabled ring the alarm!\\\"\\n                                id=\\\"nui-demo-checkbox-group-1-disabled-checkbox\\\"\\n                                [value]=\\\"disabledOne\\\"\\n                                [checked]=\\\"!isChecked(disabledOne)\\\"\\n                                disabled=\\\"true\\\">{{disabledOne}}</nui-checkbox>\\n            </nui-checkbox-group>\\n            <hr />\\n        </div>\\n        <div class=\\\"col\\\">\\n            <h3>Inline Checkbox-Group</h3>\\n            <nui-checkbox-group id=\\\"nui-demo-checkbox-group-inline\\\"\\n                                class=\\\"nui-checkbox-group-inline\\\"\\n                                [values]=\\\"selectedVegetables\\\"\\n                                name=\\\"vegetable\\\">\\n                <nui-checkbox *ngFor=\\\"let vegetable of vegetables\\\"\\n                              [value]=\\\"vegetable\\\">\\n                    {{vegetable}}\\n                </nui-checkbox>\\n            </nui-checkbox-group>\\n            <hr />\\n        </div>\\n        <div class=\\\"w-100\\\"></div>\\n        <div class=\\\"col\\\">\\n            <h3>Justified Checkbox-Group</h3>\\n            <nui-checkbox-group id=\\\"nui-demo-checkbox-group-justified\\\"\\n                                name=\\\"vegetable\\\"\\n                                [values]=\\\"selectedVegetables\\\">\\n                <nui-checkbox *ngFor=\\\"let vegetable of vegetables\\\"\\n                              [value]=\\\"vegetable\\\"\\n                              [checked]=\\\"isChecked(vegetable)\\\"\\n                              class=\\\"nui-checkbox--justified\\\">\\n                    {{vegetable}}\\n                </nui-checkbox>\\n            </nui-checkbox-group>\\n            <hr />\\n        </div>\\n        <div class=\\\"col\\\">\\n            <h3>Disabled checkboxes within the form</h3>\\n            <form [formGroup]=\\\"testForm\\\">\\n                <nui-checkbox-group id=\\\"nui-demo-checkbox-group-in-form-disabled-checkboxes\\\"\\n                                name=\\\"vegetable\\\"\\n                                formControlName=\\\"checkboxGroup2\\\">\\n                    <nui-checkbox [value]=\\\"vegetables[0]\\\"\\n                                    [disabled]=\\\"true\\\"\\n                                    [checked]=\\\"isChecked(vegetables[0])\\\">\\n                        {{vegetables[0]}}</nui-checkbox>\\n                    <nui-checkbox [value]=\\\"vegetables[1]\\\"\\n                                    [disabled]=\\\"false\\\"\\n                                    [checked]=\\\"isChecked(vegetables[1])\\\">\\n                        {{vegetables[1]}}</nui-checkbox>\\n                    <nui-checkbox [value]=\\\"vegetables[2]\\\"\\n                                    [disabled]=\\\"true\\\"\\n                                    [checked]=\\\"isChecked(vegetables[2])\\\">\\n                        {{vegetables[2]}}</nui-checkbox>\\n                    <nui-checkbox [value]=\\\"vegetables[3]\\\"\\n                                    [disabled]=\\\"false\\\"\\n                                    [checked]=\\\"isChecked(vegetables[3])\\\">\\n                        {{vegetables[3]}}</nui-checkbox>\\n                </nui-checkbox-group>\\n            </form>\\n        </div>\\n    </div>\\n</div>\\n\";","import { Component, OnInit } from \"@angular/core\";\nimport { FormBuilder, FormGroup } from \"@angular/forms\";\n\n@Component({\n    selector: \"nui-checkbox-group-visual-test\",\n    templateUrl: \"./checkbox-group-visual-test.component.html\",\n})\nexport class CheckboxGroupVisualTestComponent implements OnInit {\n    public testForm: FormGroup;\n    public cabbage = \"Cabbage\";\n    public potato = \"Potato\";\n    public tomato = \"Tomato\";\n    public carrot = \"Carrot\";\n    public disabledOne = \"DISABLED\";\n    public vegetables = [this.cabbage, this.potato, this.tomato, this.carrot];\n    public selectedVegetables = [this.potato, this.tomato, this.disabledOne];\n\n    constructor(private formBuilder: FormBuilder) {}\n\n    ngOnInit() {\n        this.testForm = this.formBuilder.group({\n            checkboxGroup: this.formBuilder.control({\n                value: this.selectedVegetables, disabled: true,\n            }),\n            checkboxGroup2: this.formBuilder.control({\n                value: this.selectedVegetables, disabled: false,\n            }),\n        });\n    }\n\n    public isChecked(vegetable: string): boolean {\n        return this.selectedVegetables.indexOf(vegetable) > -1;\n    }\n}\n","<div class=\"container\">\n    <div class=\"row\">\n        <div class=\"col\">\n            <h3>Basic Checkbox-Group with Hint Text</h3>\n            <nui-checkbox-group id=\"nui-demo-checkbox-group-basic\"\n                                name=\"vegetable\"\n                                [values]=\"selectedVegetables\">\n                <nui-checkbox *ngFor=\"let vegetable of vegetables\"\n                              [value]=\"vegetable\"\n                              hint=\"This is some help text\"\n                              [checked]=\"isChecked(vegetable)\">\n                    {{vegetable}}\n                </nui-checkbox>\n                <nui-checkbox hint=\"If it's not disabled ring the alarm!\"\n                                id=\"nui-demo-checkbox-group-1-disabled-checkbox\"\n                                [value]=\"disabledOne\"\n                                [checked]=\"!isChecked(disabledOne)\"\n                                disabled=\"true\">{{disabledOne}}</nui-checkbox>\n            </nui-checkbox-group>\n            <hr />\n        </div>\n        <div class=\"col\">\n            <h3>Inline Checkbox-Group</h3>\n            <nui-checkbox-group id=\"nui-demo-checkbox-group-inline\"\n                                class=\"nui-checkbox-group-inline\"\n                                [values]=\"selectedVegetables\"\n                                name=\"vegetable\">\n                <nui-checkbox *ngFor=\"let vegetable of vegetables\"\n                              [value]=\"vegetable\">\n                    {{vegetable}}\n                </nui-checkbox>\n            </nui-checkbox-group>\n            <hr />\n        </div>\n        <div class=\"w-100\"></div>\n        <div class=\"col\">\n            <h3>Justified Checkbox-Group</h3>\n            <nui-checkbox-group id=\"nui-demo-checkbox-group-justified\"\n                                name=\"vegetable\"\n                                [values]=\"selectedVegetables\">\n                <nui-checkbox *ngFor=\"let vegetable of vegetables\"\n                              [value]=\"vegetable\"\n                              [checked]=\"isChecked(vegetable)\"\n                              class=\"nui-checkbox--justified\">\n                    {{vegetable}}\n                </nui-checkbox>\n            </nui-checkbox-group>\n            <hr />\n        </div>\n        <div class=\"col\">\n            <h3>Disabled checkboxes within the form</h3>\n            <form [formGroup]=\"testForm\">\n                <nui-checkbox-group id=\"nui-demo-checkbox-group-in-form-disabled-checkboxes\"\n                                name=\"vegetable\"\n                                formControlName=\"checkboxGroup2\">\n                    <nui-checkbox [value]=\"vegetables[0]\"\n                                    [disabled]=\"true\"\n                                    [checked]=\"isChecked(vegetables[0])\">\n                        {{vegetables[0]}}</nui-checkbox>\n                    <nui-checkbox [value]=\"vegetables[1]\"\n                                    [disabled]=\"false\"\n                                    [checked]=\"isChecked(vegetables[1])\">\n                        {{vegetables[1]}}</nui-checkbox>\n                    <nui-checkbox [value]=\"vegetables[2]\"\n                                    [disabled]=\"true\"\n                                    [checked]=\"isChecked(vegetables[2])\">\n                        {{vegetables[2]}}</nui-checkbox>\n                    <nui-checkbox [value]=\"vegetables[3]\"\n                                    [disabled]=\"false\"\n                                    [checked]=\"isChecked(vegetables[3])\">\n                        {{vegetables[3]}}</nui-checkbox>\n                </nui-checkbox-group>\n            </form>\n        </div>\n    </div>\n</div>\n","export default \"<h2>Required Modules</h2>\\n<ul>\\n    <li>\\n        <code>NuiCheckboxModule</code>\\n    </li>\\n</ul>\\n\\n<h2>Basic Usage</h2>\\n<p>\\n    The <code>&lt;nui-checkbox-group&gt;</code> component is used for combining <code>&lt;nui-checkbox&gt;</code> components into a\\n    group. Use the <code>name</code> input to set the \\\"name\\\" attribute for the inner <code>&lt;nui-checkbox&gt;</code> input elements. To get the\\n    values of the <code>&lt;nui-checkbox&gt;</code> child components use the <code>values</code> input which is an array of checked state values.\\n    To act on checkbox value changes, bind to the <code>(valuesChange)</code> output.\\n</p>\\n<nui-example-wrapper filenamePrefix=\\\"checkbox-group-basic\\\" exampleTitle=\\\"Basic Usage\\\">\\n    <nui-checkbox-group-basic-example></nui-checkbox-group-basic-example>\\n</nui-example-wrapper>\\n\\n<h2>Inline</h2>\\n<p>\\n    Use the <code>nui-checkbox-group-inline</code> class to display checkbox group inline.\\n</p>\\n<nui-example-wrapper filenamePrefix=\\\"checkbox-group-inline\\\" exampleTitle=\\\"Inline\\\">\\n    <nui-checkbox-group-inline-example></nui-checkbox-group-inline-example>\\n</nui-example-wrapper>\\n\\n<h2>Part of Form</h2>\\n<p>\\n    <code>&lt;nui-checkbox-group&gt;</code> can be used in reactive forms.\\n</p>\\n<nui-example-wrapper filenamePrefix=\\\"checkbox-group-in-form\\\" exampleTitle=\\\"Part of Form\\\">\\n    <nui-checkbox-group-in-form-example></nui-checkbox-group-in-form-example>\\n</nui-example-wrapper>\\n\\n<h2>Justified</h2>\\n<p>\\n    To justify <code>&lt;nui-checkbox&gt;</code> to the width of <code>&lt;nui-checkbox-group&gt;</code> (or simply parent element,\\n    in case <code>&lt;nui-checkbox&gt;</code> is used not as a part of <code>&lt;nui-checkbox-group&gt;</code>), add\\n    <code>nui-checkbox--justified</code> class to the <code>&lt;nui-checkbox&gt;</code>.\\n</p>\\n<nui-example-wrapper filenamePrefix=\\\"checkbox-group-justified\\\" exampleTitle=\\\"Justified\\\">\\n    <nui-checkbox-group-justified-example></nui-checkbox-group-justified-example>\\n</nui-example-wrapper>\\n\";","export * from \"./checkbox-group-docs/checkbox-group-docs.example.component\";\nexport * from \"./checkbox-group-inline/checkbox-group-inline.example.component\";\nexport * from \"./checkbox-group-basic/checkbox-group-basic.example.component\";\nexport * from \"./checkbox-group-in-form/checkbox-group-in-form.example.component\";\nexport * from \"./checkbox-group-visual-test/checkbox-group-visual-test.component\";\nexport * from \"./checkbox-group-justified/checkbox-group-justified.example.component\";\nexport * from \"./checkbox-group-test/checkbox-group-test.component\";\n","import { Component } from \"@angular/core\";\nimport { ToastService } from \"@nova-ui/bits\";\n\n@Component({\n    selector: \"nui-checkbox-group-basic-example\",\n    templateUrl: \"./checkbox-group-basic.example.component.html\",\n})\nexport class CheckboxGroupBasicExampleComponent {\n    public cabbage = $localize `Cabbage`;\n    public potato = $localize `Potato`;\n    public tomato = $localize `Tomato`;\n    public carrot = $localize `Carrot`;\n    public vegetables = [this.cabbage, this.potato, this.tomato, this.carrot];\n    public selectedVegetables = [this.potato, this.tomato];\n\n    constructor(private toastService: ToastService) {}\n\n    public isChecked(vegetable: string): boolean {\n        return this.selectedVegetables.indexOf(vegetable) > -1;\n    }\n\n    public onValueChange (event: any) {\n        this.toastService.success({message: $localize `Selected checkboxes: ` + event});\n    }\n\n}\n","<nui-checkbox-group id=\"nui-demo-checkbox-group-basic\"\n                    name=\"vegetable\"\n                    [values]=\"selectedVegetables\"\n                    (valuesChange)=\"onValueChange($event)\">\n    <nui-checkbox *ngFor=\"let vegetable of vegetables\"\n                  [value]=\"vegetable\"\n                  i18n-hint\n                  hint=\"This is some help text\"\n                  [checked]=\"isChecked(vegetable)\">\n        {{vegetable}}\n    </nui-checkbox>\n</nui-checkbox-group>\n","<nui-checkbox-group id=\"nui-demo-checkbox-group-inline\"\n                    class=\"nui-checkbox-group-inline\"\n                    [values]=\"selectedVegetables\"\n                    name=\"vegetable\">\n    <nui-checkbox *ngFor=\"let vegetable of vegetables\"\n                  [value]=\"vegetable\">\n        {{vegetable}}\n    </nui-checkbox>\n</nui-checkbox-group>\n","import { Component } from \"@angular/core\";\n\n@Component({\n    selector: \"nui-checkbox-group-inline-example\",\n    templateUrl: \"./checkbox-group-inline.example.component.html\",\n})\nexport class CheckboxGroupInlineExampleComponent {\n    public cabbage = $localize `Cabbage`;\n    public potato = $localize `Potato`;\n    public tomato = $localize `Tomato`;\n    public carrot = $localize `Carrot`;\n    public vegetables = [this.cabbage, this.potato, this.tomato, this.carrot];\n    public selectedVegetables = [this.potato, this.tomato];\n\n    constructor() {}\n}\n","<nui-checkbox-group id=\"nui-demo-checkbox-group-justified\"\n                    name=\"vegetable\"\n                    [values]=\"selectedVegetables\">\n    <nui-checkbox *ngFor=\"let vegetable of vegetables\"\n                  [value]=\"vegetable\"\n                  i18n-hint\n                  [hint]=\"(hints.indexOf(vegetable) >=0) ? hints[hints.indexOf(vegetable)] : null\"\n                  [checked]=\"isChecked(vegetable)\"\n                  class=\"nui-checkbox--justified\">\n        {{vegetable}}\n    </nui-checkbox>\n</nui-checkbox-group>\n","import { Component } from \"@angular/core\";\n\n@Component({\n    selector: \"nui-checkbox-group-justified-example\",\n    templateUrl: \"./checkbox-group-justified.example.component.html\",\n})\nexport class CheckboxGroupJustifiedExampleComponent {\n    public cabbage = $localize `Cabbage`;\n    public potato = $localize `Potato`;\n    public tomato = $localize `Tomato`;\n    public carrot = $localize `Carrot`;\n    public vegetables = [this.cabbage, this.potato, this.tomato, this.carrot];\n    public hints = [this.cabbage, this.tomato];\n    public selectedVegetables = [this.potato, this.tomato];\n\n    constructor() { }\n\n    public isChecked(vegetable: string): boolean {\n        return this.selectedVegetables.indexOf(vegetable) > -1;\n    }\n}\n"]}