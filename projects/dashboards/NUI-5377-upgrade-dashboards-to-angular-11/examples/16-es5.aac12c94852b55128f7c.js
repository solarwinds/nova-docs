!function(){var e,t;function n(e,t){return t||(t=e.slice(0)),Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(t)}}))}function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function a(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}function i(e,t,n){return t&&a(e.prototype,t),n&&a(e,n),e}function s(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&c(e,t)}function c(e,t){return(c=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function d(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],function(){})),!0}catch(e){return!1}}();return function(){var n,o=l(e);if(t){var r=l(this).constructor;n=Reflect.construct(o,arguments,r)}else n=o.apply(this,arguments);return p(this,n)}}function p(e,t){return!t||"object"!=typeof t&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function l(e){return(l=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}(window.webpackJsonp=window.webpackJsonp||[]).push([[16],{"+MGO":function(e,t,n){"use strict";n.r(t),t.default='// tslint:disable:max-line-length\n\nimport { IBroadcasterConfig } from "../../components/providers/types";\nimport { IFormatterDefinition, LegendPlacement } from "../../components/types";\nimport { FormStackComponent } from "../../configurator/components/form-stack/form-stack.component";\nimport { DonutContentPercentageFormatterComponent } from "../../configurator/components/formatters/donut-content-percentage-formatter/donut-content-percentage-formatter.component";\nimport { DonutContentRawFormatterComponent } from "../../configurator/components/formatters/donut-content-raw-formatter/donut-content-raw-formatter.component";\nimport { DonutContentSumFormatterComponent } from "../../configurator/components/formatters/donut-content-sum-formatter/donut-content-sum-formatter.component";\nimport { LinkFormatterComponent } from "../../configurator/components/formatters/link-formatter/link-formatter.component";\nimport { PercentageFormatterComponent } from "../../configurator/components/formatters/percentage-formatter/percentage-formatter.component";\nimport { RawFormatterComponent } from "../../configurator/components/formatters/raw-formatter/raw-formatter.component";\nimport { SiUnitsFormatterComponent } from "../../configurator/components/formatters/si-units-formatter/si-units-formatter.component";\nimport { StatusWithIconFormatterComponent } from "../../configurator/components/formatters/status-with-icon-formatter/status-with-icon-formatter.component";\nimport { WidgetConfiguratorSectionComponent } from "../../configurator/components/widget-configurator-section/widget-configurator-section.component";\nimport { DataSourceConfigurationComponent } from "../../configurator/components/widgets/configurator-items/data-source-configuration/data-source-configuration.component";\nimport { TitleAndDescriptionConfigurationComponent } from "../../configurator/components/widgets/configurator-items/title-and-description-configuration/title-and-description-configuration.component";\nimport { AggregatorMetricSelectorConfigurationComponent } from "../../configurator/components/widgets/proportional/aggregators-configurators/aggregator-configurator/aggregator-configurator.component";\nimport { FieldMapperAggregatorConfiguratorComponent } from "../../configurator/components/widgets/proportional/aggregators-configurators/field-mapper-aggregator-configurator/field-mapper-aggregator-configurator.component";\nimport { ProportionalChartOptionsEditorV2Component } from "../../configurator/components/widgets/proportional/chart-options-editor-v2/proportional-chart-options-editor-v2.component";\nimport { ProportionalChartOptionsEditorComponent } from "../../configurator/components/widgets/proportional/chart-options-editor/proportional-chart-options-editor.component";\nimport { DonutContentConfigurationComponent } from "../../configurator/components/widgets/proportional/donut-content-configuration/donut-content-configuration.component";\nimport { ValueSelectorComponent } from "../../configurator/public-api";\nimport { fieldMapper } from "../../functions/proportional-aggregators/field-mapper";\nimport { IPercentageAggregatorProperties, percentageAggregator } from "../../functions/proportional-aggregators/percentage-aggregator";\nimport { sumAggregator } from "../../functions/proportional-aggregators/sum-aggregator";\nimport { IProportionalDonutContentAggregatorDefinition } from "../../functions/proportional-aggregators/types";\nimport {\n    DEFAULT_PIZZAGNA_ROOT,\n    NOVA_GENERIC_CONVERTER,\n    NOVA_PIZZAGNA_BROADCASTER,\n    NOVA_PROPORTIONAL_CONTENT_FORMATTERS_REGISTRY,\n    NOVA_PROPORTIONAL_WIDGET_CHART_OPTIONS_CONVERTER,\n    NOVA_TITLE_AND_DESCRIPTION_CONVERTER\n} from "../../services/types";\nimport { PizzagnaLayer, WellKnownProviders } from "../../types";\nimport { REFRESHER_CONFIGURATOR } from "../common/configurator/components";\n// tslint:enable:max-line-length\n\nexport const DEFAULT_LEGEND_FORMATTERS: IFormatterDefinition[] = [\n    {\n        componentType: "",\n        label: $localize`Raw Formatter`,\n        dataTypes: {\n            // @ts-ignore\n            value: null,\n        },\n    },\n    {\n        componentType: StatusWithIconFormatterComponent.lateLoadKey,\n        "label": $localize`Status With Icon`,\n        dataTypes: {\n            // @ts-ignore\n            value: null,\n        },\n    },\n    {\n        componentType: LinkFormatterComponent.lateLoadKey,\n        "label": $localize`Link`,\n        dataTypes: {\n            // @ts-ignore\n            value: null,\n        },\n    },\n\n];\nexport const DEFAULT_PROPORTIONAL_CONTENT_FORMATTERS: IFormatterDefinition[] = [\n    {\n        componentType: RawFormatterComponent.lateLoadKey,\n        label: $localize`Raw Formatter`,\n        dataTypes: {\n            // @ts-ignore\n            value: null,\n        },\n        properties: {\n            elementClass: "nui-text-page",\n        },\n    },\n    {\n        componentType: SiUnitsFormatterComponent.lateLoadKey,\n        label: $localize`Si Units Formatter`,\n        dataTypes: {\n            // @ts-ignore\n            value: null,\n        },\n        properties: {\n            elementClass: "nui-text-page",\n        },\n    },\n    {\n        componentType: PercentageFormatterComponent.lateLoadKey,\n        label: $localize`Percentage Formatter`,\n        dataTypes: {\n            // @ts-ignore\n            value: null,\n        },\n        properties: {\n            elementClass: "nui-text-page",\n        },\n    },\n];\n\nexport const DEFAULT_PROPORTIONAL_CONTENT_AGGREGATORS: IProportionalDonutContentAggregatorDefinition[] = [\n    {\n        aggregatorType: sumAggregator.aggregatorType,\n        label: "Sum Aggregator",\n        fn: sumAggregator,\n        configurationComponent: AggregatorMetricSelectorConfigurationComponent.lateLoadKey,\n    },\n    {\n        aggregatorType: percentageAggregator.aggregatorType,\n        label: "Percentage Aggregator",\n        fn: percentageAggregator,\n        properties: {\n            base100: true,\n        } as IPercentageAggregatorProperties,\n        configurationComponent: AggregatorMetricSelectorConfigurationComponent.lateLoadKey,\n    },\n    {\n        aggregatorType: fieldMapper.aggregatorType,\n        label: "Field Mapper Aggregator",\n        fn: fieldMapper,\n        configurationComponent: FieldMapperAggregatorConfiguratorComponent.lateLoadKey,\n    },\n];\n\nexport const proportionalConfigurator = {\n    [PizzagnaLayer.Structure]: {\n        [DEFAULT_PIZZAGNA_ROOT]: {\n            id: DEFAULT_PIZZAGNA_ROOT,\n            // base layout of the configurator - all form components referenced herein will be stacked in a column\n            componentType: FormStackComponent.lateLoadKey,\n            properties: {\n                elementClass: "flex-grow-1 overflow-auto nui-scroll-shadows",\n                // references to other components laid out in this form\n                nodes: ["presentation", "dataAndCalculations"],\n            },\n            providers: {\n                [WellKnownProviders.FormattersRegistry]: {\n                    providerId: NOVA_PROPORTIONAL_CONTENT_FORMATTERS_REGISTRY,\n                },\n            },\n        },\n        // /presentation\n        presentation: {\n            id: "presentation",\n            componentType: WidgetConfiguratorSectionComponent.lateLoadKey,\n            properties: {\n                headerText: "Presentation",\n                nodes: ["titleAndDescription", "chartOptionsEditor"],\n            },\n        },\n        // /presentation/titleAndDescription\n        titleAndDescription: {\n            id: "titleAndDescription",\n            componentType: TitleAndDescriptionConfigurationComponent.lateLoadKey,\n            providers: {\n                [WellKnownProviders.Converter]: {\n                    providerId: NOVA_TITLE_AND_DESCRIPTION_CONVERTER,\n                },\n            },\n        },\n        // /presentation/chartOptionsEditor\n        chartOptionsEditor: {\n            id: "chartOptionsEditor",\n            componentType: ProportionalChartOptionsEditorComponent.lateLoadKey,\n            properties: {\n                chartOptions: {\n                    chartTypes: ["PieChart", "DonutChart", "VerticalBarChart", "HorizontalBarChart"],\n                    legendPlacementOptions: [\n                        {\n                            id: LegendPlacement.None,\n                            label: $localize`None`,\n                        },\n                        {\n                            id: LegendPlacement.Right,\n                            label: $localize`Right`,\n                        },\n                        {\n                            id: LegendPlacement.Bottom,\n                            label: $localize`Bottom`,\n                        },\n                    ],\n                    contentFormatters: [\n                        {\n                            componentType: DonutContentRawFormatterComponent.lateLoadKey,\n                            "label": $localize`Raw`,\n                        },\n                        {\n                            componentType: DonutContentSumFormatterComponent.lateLoadKey,\n                            "label": $localize`Sum`,\n                        },\n                        {\n                            componentType: DonutContentPercentageFormatterComponent.lateLoadKey,\n                            "label": $localize`Percentage`,\n                            configurationComponent: "DonutContentPercentageConfigurationComponent",\n                        },\n                    ]  as IFormatterDefinition[],\n                    legendFormatters: [\n                        {\n                            componentType: StatusWithIconFormatterComponent.lateLoadKey,\n                            "label": $localize`Status With Icon`,\n                        },\n                        {\n                            componentType: LinkFormatterComponent.lateLoadKey,\n                            "label": $localize`Link`,\n                        },\n                    ] as IFormatterDefinition[],\n                },\n            },\n            providers: {\n                // converter transforms the chart options data between the widget and the form\n                [WellKnownProviders.Converter]: {\n                    providerId: NOVA_PROPORTIONAL_WIDGET_CHART_OPTIONS_CONVERTER,\n                },\n            },\n        },\n        refresher: REFRESHER_CONFIGURATOR,\n        // /dataAndCalculations\n        dataAndCalculations: {\n            id: "dataAndCalculations",\n            componentType: WidgetConfiguratorSectionComponent.lateLoadKey,\n            properties: {\n                headerText: $localize`Data and Calculations`,\n                nodes: ["dataSource"],\n            },\n        },\n        // /dataAndCalculations/dataSource\n        dataSource: {\n            id: "dataSource",\n            componentType: DataSourceConfigurationComponent.lateLoadKey,\n            properties: {\n                // for the DataSourceConfigurationComponent, this defines the list of data sources to pick from\n                dataSourceProviders: [] as string[],\n            },\n            providers: {\n                // converter transforms the data source metadata between the widget and the form\n                [WellKnownProviders.Converter]: {\n                    providerId: NOVA_GENERIC_CONVERTER,\n                    properties: {\n                        formParts: [\n                            {\n                                // this component updates the \'providerId\' of the \'dataSource\'\n                                previewPath: "chart.providers.dataSource",\n                                // TODO: Remove \'properties\' key in v10\n                                keys: ["providerId", "properties"],\n                            },\n                            {\n                                // this component updates the \'properties\' of the \'dataSource\' via an adapter\n                                previewPath: "chart.providers.adapter.properties.dataSource",\n                                keys: ["properties"],\n                            },\n                        ],\n                    },\n                },\n                [WellKnownProviders.Broadcaster]: {\n                    providerId: NOVA_PIZZAGNA_BROADCASTER,\n                    properties: {\n                        configs: [\n                            {\n                                trackOn: "component",\n                                key: "dsOutput",\n                                paths: ["data.chartOptionsEditor.properties.dsOutput"],\n                            },\n                        ] as IBroadcasterConfig[],\n                    },\n                },\n            },\n        },\n    },\n};\n'},"62BU":function(a,c,p){"use strict";var l,u;p.r(c),p.d(c,"ProportionalDocsModule",function(){return W});var g=p("tyNb"),m=p("Rr1A"),f=p("gKry"),h=p("fXoL"),b=p("mrSG"),y=p("2Vo4"),v=p("ofXK"),C=p("sleA"),O=p("MJAs");function w(e,t){if(1&e){var n=h.Wb();h.Vb(0,"button",6),h.jc("click",function(){return h.Gc(n),h.nc().initializeDashboard()}),h.Oc(1,"Restore Widget"),h.Ub()}}var T,D,A,S=((T=function(e){s(n,e);var t=d(n);function n(){var e;return r(this,n),(e=t.apply(this,arguments)).busy=new y.a(!1),e}return i(n,[{key:"getFilteredData",value:function(){return Object(b.a)(this,void 0,void 0,regeneratorRuntime.mark(function e(){var t=this;return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt("return",(this.busy.next(!0),new Promise(function(e){setTimeout(function(){t.outputsSubject.next({result:[{id:"Brno",name:"Brno",data:[Math.round(1e5*Math.random())],icon:"status_down",link:"https://en.wikipedia.org/wiki/Brno",value:"Brno",color:"var(--nui-color-chart-one)"},{id:"kyiv",name:"Kyiv",data:[Math.round(1e5*Math.random())],icon:"status_critical",link:"https://en.wikipedia.org/wiki/Kyiv",value:"Kyiv",color:"var(--nui-color-chart-two)"},{id:"austin",name:"Austin",data:[Math.round(1e5*Math.random())],icon:"status_warning",link:"https://en.wikipedia.org/wiki/Austin",value:"Austin",color:"var(--nui-color-chart-three)"},{id:"lisbon",name:"Lisbon",data:[Math.round(1e5*Math.random())],icon:"status_unknown",link:"https://en.wikipedia.org/wiki/Lisbon",value:"Lisbon",color:"var(--nui-color-chart-four)"},{id:"sydney",name:"Sydney",data:[Math.round(1e5*Math.random())],icon:"status_up",link:"https://en.wikipedia.org/wiki/Sydney",value:"Sydney",color:"var(--nui-color-chart-five)"},{id:"nur-sultan",name:"Nur-Sultan",data:[Math.round(1e5*Math.random())],icon:"status_unmanaged",link:"https://en.wikipedia.org/wiki/Nur-Sultan",value:"Nur-Sultan",color:"var(--nui-color-chart-six)"}].sort(function(e,t){return e.data[0]-t.data[0]})}),t.busy.next(!1)},300)})));case 1:case"end":return e.stop()}},e,this)}))}},{key:"ngOnDestroy",value:function(){this.outputsSubject.complete()}}]),n}(m.g)).providerId="BeerReviewCountsByCityMockDataSource",T.\u0275fac=function(e){return P(e||T)},T.\u0275prov=h.Lb({token:T,factory:T.\u0275fac}),T),P=h.Xb(S),R=((D=function(){function e(t,n){r(this,e),this.widgetTypesService=t,this.providerRegistry=n,this.gridsterConfig={},this.editMode=!1}return i(e,[{key:"ngOnInit",value:function(){var e=this.widgetTypesService.getWidgetType("proportional",1);this.widgetTypesService.setNode(e,"configurator",f.jb.DataSourceProviders,[S.providerId]),this.providerRegistry.setProviders(o({},S.providerId,{provide:f.b,useClass:S,deps:[]})),this.initializeDashboard()}},{key:"initializeDashboard",value:function(){var e=o({},V.id,this.widgetTypesService.mergeWithWidgetType(V));this.dashboard={positions:o({},V.id,{cols:5,rows:6,y:0,x:0}),widgets:e}}}]),e}()).\u0275fac=function(e){return new(e||D)(h.Pb(f.nb),h.Pb(f.V))},D.\u0275cmp=h.Jb({type:D,selectors:[["proportional-widget-example"]],decls:6,vars:5,consts:function(){return[[1,"mb-2","d-flex","align-items-center"],[1,"ml-3","py-2",3,"value","valueChange"],$localize(e||(e=n([":\u241f18d630a3c524dbab6dc528571782a939a7bc95b1\u241f861097914887003123: Edit Mode "]))),["type","button","displayStyle","action","nui-button","",3,"click",4,"ngIf"],[1,"w-100","dashboard"],["nuiWidgetEditor","",3,"dashboard","editMode","gridsterConfig","dashboardChange","gridsterConfigChange"],["type","button","displayStyle","action","nui-button","",3,"click"]]},template:function(e,t){1&e&&(h.Vb(0,"div",0),h.Vb(1,"nui-switch",1),h.jc("valueChange",function(e){return t.editMode=e}),h.Zb(2,2),h.Ub(),h.Mc(3,w,2,0,"button",3),h.Ub(),h.Vb(4,"div",4),h.Vb(5,"nui-dashboard",5),h.jc("dashboardChange",function(e){return t.dashboard=e})("gridsterConfigChange",function(e){return t.gridsterConfig=e}),h.Ub(),h.Ub()),2&e&&(h.Db(1),h.uc("value",t.editMode),h.Db(2),h.uc("ngIf",!(null!=t.dashboard&&t.dashboard.widgets.proportionalWidgetId)),h.Db(2),h.uc("dashboard",t.dashboard)("editMode",t.editMode)("gridsterConfig",t.gridsterConfig))},directives:[m.Fb,v.o,C.a,O.a,m.b],styles:[".dashboard[_ngcontent-%COMP%]{height:400px}"]}),D),V={id:"proportionalWidgetId",type:"proportional",pizzagna:o({},f.Q.Configuration,(l={},o(l,f.g,{providers:o({},f.kb.Refresher,{properties:{interval:600,enabled:!0}})}),o(l,"header",{properties:{title:"Beer Review Tally by City",subtitle:"These People Love Beer"}}),o(l,"chart",{providers:o({},f.kb.DataSource,{providerId:S.providerId}),properties:{configuration:{chartOptions:{type:f.U.DonutChart,legendPlacement:f.B.Right},chartColors:{Brno:"var(--nui-color-chart-five)",kyiv:"var(--nui-color-chart-six)",austin:"var(--nui-color-chart-seven)",lisbon:"var(--nui-color-chart-eight)",sydney:"var(--nui-color-chart-nine)","nur-sultan":"var(--nui-color-chart-ten)"},prioritizeWidgetColors:!1}}}),l))},U=((A=function e(){r(this,e),this.proportionalWidgetFileText=p("NCPm").default,this.proportionalConfiguratorFileText=p("+MGO").default}).\u0275fac=function(e){return new(e||A)},A.\u0275cmp=h.Jb({type:A,selectors:[["nui-proportional-docs"]],decls:47,vars:3,consts:[["type","info",3,"allowDismiss"],["filenamePrefix","proportional-widget-example.component","exampleTitle","Proportional Widget"],["language","typescript"],["href","../interfaces/IProportionalWidgetConfig.html","target","_blank"]],template:function(e,t){1&e&&(h.Vb(0,"h1"),h.Oc(1,"Proportional Widget"),h.Ub(),h.Vb(2,"p"),h.Oc(3," The general use-case for a proportional widget is to visualize at a glance how one data point compares to others in relation to the sum of all related data points. In other words, it can be used to show proportional data as a series of slices that make up a whole. The supported visualization modes include pie chart, donut chart, and bar chart in either horizontal or vertical orientation.\n"),h.Ub(),h.Vb(4,"p"),h.Oc(5,' An example use-case might be if we have some categories of data such as node statuses. Some of the nodes may have a status of "on" while the rest of them have a status of "off". This data can be fed into the proportional widget to let a user see at a glance how many of the nodes are "on" in relation to the ones that are "off" and in relation to the total number of nodes. The following example displays the number of Solarians who have reviewed beers by city. The data is completely made up and makes no sense, but it\'s all in good fun.\n'),h.Ub(),h.Vb(6,"nui-message",0),h.Oc(7," For details on how to instantiate a proportional widget, take a look at the inline comments under the source expander of the following example.\n"),h.Ub(),h.Vb(8,"nui-example-wrapper",1),h.Qb(9,"proportional-widget-example"),h.Ub(),h.Vb(10,"h2"),h.Oc(11,"Widget Schema"),h.Ub(),h.Vb(12,"p"),h.Oc(13," The code listings below are the source files for the proportional widget definition with inline comments describing the parts that compose the standard proportional widget type. It includes the widget's definition as well as its corresponding configurator form for defining how to configure (create/edit) the widget.\n"),h.Ub(),h.Vb(14,"h2"),h.Oc(15,"Widget"),h.Ub(),h.Vb(16,"p"),h.Oc(17," This part shows the actual widget definition. It includes, among other things, the components and providers that compose the widget itself.\n"),h.Ub(),h.Vb(18,"nui-example-code",2),h.Oc(19),h.Ub(),h.Vb(20,"h2"),h.Oc(21,"Configurator"),h.Ub(),h.Vb(22,"p"),h.Oc(23,"This part shows the form that's used for configuring (creating/editing) the widget."),h.Ub(),h.Vb(24,"nui-example-code",2),h.Oc(25),h.Ub(),h.Vb(26,"h2"),h.Oc(27,"Additional Features"),h.Ub(),h.Vb(28,"ul"),h.Vb(29,"li"),h.Oc(30," Define custom colors for the chart by assigning a string array of css color variables, color keywords, or RGB hex values to the "),h.Vb(31,"code"),h.Oc(32,"chartColors"),h.Ub(),h.Oc(33," property on the widget's "),h.Vb(34,"code"),h.Oc(35,"configuration"),h.Ub(),h.Oc(36," input ("),h.Vb(37,"code"),h.Vb(38,"a",3),h.Oc(39,"IProportionalWidgetConfig"),h.Ub(),h.Ub(),h.Oc(40,"). Also, you can use data-driven approach for setting the colors - just put the "),h.Vb(41,"code"),h.Oc(42,"color"),h.Ub(),h.Oc(43," property in the widget data series. You can use "),h.Vb(44,"code"),h.Oc(45,"prioritizeWidgetColors"),h.Ub(),h.Oc(46," property if you want for widget colors to override data colors. For all that, take a look at the example under the source code expander above. "),h.Ub(),h.Ub()),2&e&&(h.Db(6),h.uc("allowDismiss",!1),h.Db(13),h.Pc(t.proportionalWidgetFileText),h.Db(6),h.Pc(t.proportionalConfiguratorFileText))},directives:[m.y,m.l,R,m.k],encapsulation:2}),A);function k(e,t){if(1&e){var n=h.Wb();h.Vb(0,"button",6),h.jc("click",function(){return h.Gc(n),h.nc().initializeDashboard()}),h.Oc(1,"Restore Widget"),h.Ub()}}var I,F,_,E=function(){var e=function(e){s(n,e);var t=d(n);function n(){var e;return r(this,n),(e=t.apply(this,arguments)).busy=new y.a(!1),e.dataFields=[{id:"Brno",label:"Brno",dataType:null},{id:"kyiv",label:"Kyiv",dataType:null},{id:"austin",label:"Austin",dataType:null},{id:"lisbon",label:"Lisbon",dataType:null},{id:"sydney",label:"Sydney",dataType:null},{id:"nur-sultan",label:"Nur-Sultan",dataType:null}],e.chartSeriesDataFields=[{id:"data[0]",label:"data",dataType:null},{id:"customDonutContent",label:"Custom Donut Content",dataType:null}],e.dataFieldsConfig={dataFields$:new y.a(e.dataFields),chartSeriesDataFields$:new y.a(e.chartSeriesDataFields)},e}return i(n,[{key:"getFilteredData",value:function(){return Object(b.a)(this,void 0,void 0,regeneratorRuntime.mark(function e(){var t=this;return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt("return",(this.busy.next(!0),new Promise(function(e){setTimeout(function(){t.outputsSubject.next({result:[{id:"Brno",name:"Brno",data:[Math.round(1e6*Math.random())],icon:"status_down",link:"https://en.wikipedia.org/wiki/Brno",value:"Brno",customDonutContent:"Custom Brno"},{id:"kyiv",name:"Kyiv",data:[Math.round(1e6*Math.random())],icon:"status_critical",link:"https://en.wikipedia.org/wiki/Kyiv",value:"Kyiv",customDonutContent:"Custom Kyiv"},{id:"austin",name:"Austin",data:[Math.round(1e6*Math.random())],icon:"status_warning",link:"https://en.wikipedia.org/wiki/Austin",value:"Austin",customDonutContent:"Custom Austin"},{id:"lisbon",name:"Lisbon",data:[Math.round(1e6*Math.random())],icon:"status_unknown",link:"https://en.wikipedia.org/wiki/Lisbon",value:"Lisbon",customDonutContent:"Custom Lisbon"},{id:"sydney",name:"Sydney",data:[Math.round(1e6*Math.random())],icon:"status_up",link:"https://en.wikipedia.org/wiki/Sydney",value:"Sydney",customDonutContent:"Custom Sydney"},{id:"nur-sultan",name:"Nur-Sultan",data:[Math.round(1e6*Math.random())],icon:"status_unmanaged",link:"https://en.wikipedia.org/wiki/Nur-Sultan",value:"Nur-Sultan",customDonutContent:"Custom Nur-Sultan"}].sort(function(e,t){return e.data[0]-t.data[0]})}),t.busy.next(!1)},300)})));case 1:case"end":return e.stop()}},e,this)}))}},{key:"ngOnDestroy",value:function(){this.outputsSubject.complete()}}]),n}(m.g);return e.providerId="BeerReviewCountsByCityMockDataSource",e.\u0275fac=function(t){return N(t||e)},e.\u0275prov=h.Lb({token:e,factory:e.\u0275fac}),e}(),N=h.Xb(E),L=((I=function(){function e(t,n,o,a,i){r(this,e),this.widgetTypesService=t,this.providerRegistry=n,this.gridsterConfig={},this.editMode=!1,a.addItems(f.f),o.addItems(f.i),i.addItems(f.h)}return i(e,[{key:"ngOnInit",value:function(){var e=this.widgetTypesService.getWidgetType("proportional",1);this.widgetTypesService.setNode(e,"configurator",f.jb.DataSourceProviders,[E.providerId]),this.setupConfigurator(),this.providerRegistry.setProviders(o({},E.providerId,{provide:f.b,useClass:E,deps:[]})),this.initializeDashboard()}},{key:"initializeDashboard",value:function(){var e=o({},x.id,this.widgetTypesService.mergeWithWidgetType(x));this.dashboard={positions:o({},x.id,{cols:6,rows:6,y:0,x:0}),widgets:e}}},{key:"setupConfigurator",value:function(){var e,t,n,o,r,a,i=this.widgetTypesService.getWidgetType("proportional",1);null===(t=null===(e=i.configurator)||void 0===e?void 0:e.structure)||void 0===t||delete t.presentation,null===(o=null===(n=i.configurator)||void 0===n?void 0:n.structure)||void 0===o||delete o.chartOptionsEditor,null===(a=null===(r=i.configurator)||void 0===r?void 0:r.structure)||void 0===a||delete a.donutContentConfiguration,this.widgetTypesService.setNode(i,"configurator","presentation",f.j.presentation),this.widgetTypesService.setNode(i,"configurator","chartOptionsEditor",f.j.chartOptionsEditor),this.widgetTypesService.setNode(i,"configurator","donutContentConfiguration",f.j.donutContentConfiguration)}}]),e}()).\u0275fac=function(e){return new(e||I)(h.Pb(f.nb),h.Pb(f.V),h.Pb(f.S),h.Pb(f.T),h.Pb(f.R))},I.\u0275cmp=h.Jb({type:I,selectors:[["proportional-widget-donut-content-formatters-example"]],decls:6,vars:5,consts:function(){return[[1,"mb-2","d-flex","align-items-center"],[1,"ml-3","py-2",3,"value","valueChange"],$localize(t||(t=n([":\u241f18d630a3c524dbab6dc528571782a939a7bc95b1\u241f861097914887003123: Edit Mode "]))),["type","button","displayStyle","action","nui-button","",3,"click",4,"ngIf"],[1,"w-100","dashboard"],["nuiWidgetEditor","",3,"dashboard","editMode","gridsterConfig","dashboardChange","gridsterConfigChange"],["type","button","displayStyle","action","nui-button","",3,"click"]]},template:function(e,t){1&e&&(h.Vb(0,"div",0),h.Vb(1,"nui-switch",1),h.jc("valueChange",function(e){return t.editMode=e}),h.Zb(2,2),h.Ub(),h.Mc(3,k,2,0,"button",3),h.Ub(),h.Vb(4,"div",4),h.Vb(5,"nui-dashboard",5),h.jc("dashboardChange",function(e){return t.dashboard=e})("gridsterConfigChange",function(e){return t.gridsterConfig=e}),h.Ub(),h.Ub()),2&e&&(h.Db(1),h.uc("value",t.editMode),h.Db(2),h.uc("ngIf",!(null!=t.dashboard&&t.dashboard.widgets.proportionalWidgetId)),h.Db(2),h.uc("dashboard",t.dashboard)("editMode",t.editMode)("gridsterConfig",t.gridsterConfig))},directives:[m.Fb,v.o,C.a,O.a,m.b],styles:[".dashboard[_ngcontent-%COMP%]{height:370px}"]}),I),x={id:"proportionalWidgetId",type:"proportional",pizzagna:o({},f.Q.Configuration,(u={},o(u,f.g,{providers:{}}),o(u,"header",{properties:{title:"Beer Review Tally by City",subtitle:"These People Love Beer"}}),o(u,"chart",{providers:o({},f.kb.DataSource,{providerId:E.providerId}),properties:{configuration:{chartOptions:{type:f.U.DonutChart,legendPlacement:f.B.Right,donutContentConfig:{formatter:{componentType:f.Y.lateLoadKey},aggregator:{aggregatorType:f.rb.aggregatorType,properties:{}}}}}}}),u))},M=[{path:"",component:U,data:{srlc:{hideIndicator:!0},showThemeSwitcher:!0}},{path:"example",component:R,data:{srlc:{hideIndicator:!0}}},{path:"donut-content-formatters",component:(F=function e(){r(this,e),this.dataSourceDataFieldsConfig="\npublic dataFieldsConfig: IProportionalDataFieldsConfig = {\n    dataFields$: new BehaviorSubject<IDataField[]>(this.dataFields),\n    chartSeriesDataFields$: new BehaviorSubject<IDataField[]>(this.chartSeriesDataFields),\n};\n    ",this.widgetConfigSlice='\n"properties": {\n    "configuration": {\n        "chartOptions": {\n            donutContentConfig: {\n                formatter: {\n                    componentType: SiUnitsFormatterComponent.lateLoadKey,\n                },\n                aggregator: {\n                    aggregatorType: sumAggregator.aggregatorType,\n                },\n            },\n        }\n    }\n}\n\n    '},F.\u0275fac=function(e){return new(e||F)},F.\u0275cmp=h.Jb({type:F,selectors:[["nui-proportional-donut-content-docs"]],decls:128,vars:2,consts:[["filenamePrefix","proportional-donut-content-formatters-example.component","exampleTitle","Proportional Widget with Donut Content"],["href","../additional-documentation/anatomy/data-sources.html","target","_blank"],["href","../../interfaces/IProportionalDataFieldsConfig.html","target","_blank"],["language","typescript"],["href","../../interfaces/IDonutContentConfig.html","target","_blank"]],template:function(e,t){1&e&&(h.Vb(0,"h1"),h.Oc(1,"Proportional Widget Donut Chart Content Configuration"),h.Ub(),h.Vb(2,"p"),h.Oc(3,"Donut Content configuration consists of two basic logic elements:"),h.Ub(),h.Vb(4,"ul"),h.Vb(5,"li"),h.Vb(6,"code"),h.Oc(7,"aggregator"),h.Ub(),h.Oc(8," - an element that is responsible for processing ALL the metrics in chart and return a single value. For example, "),h.Vb(9,"code"),h.Oc(10,"percentageAggregator"),h.Ub(),h.Oc(11," - processes all the metrics and takes a percentage of a certain metric (configurable). "),h.Ub(),h.Vb(12,"li"),h.Vb(13,"code"),h.Oc(14,"formatter"),h.Ub(),h.Oc(15," - an element that changes the representation of a single value. In terms of the proportional donut content, processes the output of an "),h.Vb(16,"code"),h.Oc(17,"aggregator"),h.Ub(),h.Oc(18,". "),h.Ub(),h.Ub(),h.Vb(19,"h3"),h.Oc(20,"Default aggregators available"),h.Ub(),h.Vb(21,"ul"),h.Vb(22,"li"),h.Vb(23,"strong"),h.Oc(24,"Sum Aggregator"),h.Ub(),h.Oc(25," - Gets the sum of all the metrics in the chart. "),h.Vb(26,"code"),h.Oc(27,"aggregatorType: sumAggregator"),h.Ub(),h.Ub(),h.Vb(28,"li"),h.Vb(29,"strong"),h.Oc(30,"Percentage Aggregator"),h.Ub(),h.Oc(31," - Gets the percentage of a specified metric among the other metrics. "),h.Vb(32,"code"),h.Oc(33,"aggregatorType: percentageAggregator"),h.Ub(),h.Ub(),h.Vb(34,"li"),h.Vb(35,"strong"),h.Oc(36,"Field Mapper"),h.Ub(),h.Oc(37," - Allows to map chart series fields to be displayed in the donut center. For example, if you want to display some value in the series data, you can use field mapper to get the value from the chart series. Check the configuration section in the example for more details. "),h.Vb(38,"code"),h.Oc(39,"aggregatorType: fieldMapper"),h.Ub(),h.Oc(40,". "),h.Ub(),h.Ub(),h.Vb(41,"h3"),h.Oc(42,"Default formatters available"),h.Ub(),h.Vb(43,"ul"),h.Vb(44,"li"),h.Vb(45,"strong"),h.Oc(46,"Raw Formatter"),h.Ub(),h.Oc(47," - displays the value as it. "),h.Vb(48,"code"),h.Oc(49,"componentType: RawFormatterComponent"),h.Ub(),h.Ub(),h.Vb(50,"li"),h.Vb(51,"strong"),h.Oc(52,"Percentage Formatter"),h.Ub(),h.Oc(53," - displays the value and the "),h.Vb(54,"code"),h.Oc(55,"%"),h.Ub(),h.Oc(56," sign. "),h.Vb(57,"code"),h.Oc(58,"componentType: PercentageFormatterComponent"),h.Ub(),h.Ub(),h.Vb(59,"li"),h.Vb(60,"strong"),h.Oc(61,"Si Units Formatter"),h.Ub(),h.Oc(62," - displays the "),h.Vb(63,"code"),h.Oc(64,"number"),h.Ub(),h.Oc(65," value using SI system prefixes (k, M, G etc.). For example, "),h.Vb(66,"code"),h.Oc(67,"123456789"),h.Ub(),h.Oc(68," value will be displayed as "),h.Vb(69,"code"),h.Oc(70,"123.5 M"),h.Ub(),h.Oc(71,". "),h.Vb(72,"code"),h.Oc(73,"componentType: SiUnitsFormatterComponent"),h.Ub(),h.Ub(),h.Ub(),h.Vb(74,"nui-example-wrapper",0),h.Qb(75,"proportional-widget-donut-content-formatters-example"),h.Ub(),h.Vb(76,"h2"),h.Oc(77,"DataSource setup"),h.Ub(),h.Vb(78,"p"),h.Oc(79," Before proceeding, to the widget configuration it's necessary to setup the dataSource first. It's necessary for the correct work of the configurator.\n"),h.Ub(),h.Vb(80,"p"),h.Oc(81," DataSource should describe its "),h.Vb(82,"code"),h.Oc(83,"dataFields"),h.Ub(),h.Oc(84,", so be sure to check the "),h.Vb(85,"a",1),h.Oc(86,"DataSource Documentation"),h.Ub(),h.Oc(87," before proceeding. Moreover, for the Donut Content configuration it's necessary that "),h.Vb(88,"code"),h.Oc(89,"dataFieldsConfig"),h.Ub(),h.Oc(90," to implement the "),h.Vb(91,"a",2),h.Oc(92,"IProportionalDataFieldsConfig"),h.Ub(),h.Oc(93," interface, as follows:\n"),h.Ub(),h.Vb(94,"nui-example-code",3),h.Oc(95),h.Ub(),h.Vb(96,"p"),h.Oc(97,"Check the code under the source expander for more details."),h.Ub(),h.Vb(98,"h2"),h.Oc(99,"Widget Configuration"),h.Ub(),h.Vb(100,"p"),h.Oc(101," To configure the donut content you need to set "),h.Vb(102,"a",4),h.Oc(103,"donutContentConfig"),h.Ub(),h.Oc(104," in "),h.Vb(105,"code"),h.Oc(106,"donutContentConfig"),h.Ub(),h.Oc(107," in the "),h.Vb(108,"code"),h.Oc(109,"chartOptions"),h.Ub(),h.Oc(110," section. Following config example shows the config for setting Sum aggregation with Si Units Formatter applied to it.\n"),h.Ub(),h.Vb(111,"p"),h.Vb(112,"strong"),h.Oc(113,"Note: "),h.Ub(),h.Oc(114," please be aware that this config has top priority over\n"),h.Ub(),h.Vb(115,"nui-example-code",3),h.Oc(116),h.Ub(),h.Vb(117,"h3"),h.Oc(118,"Setting up the Configurator"),h.Ub(),h.Vb(119,"p"),h.Oc(120," Having such a configuration, involves having a different configurator section configuration, otherwise the default configuration section "),h.Vb(121,"strong"),h.Oc(122,"won't work!"),h.Ub(),h.Ub(),h.Vb(123,"p"),h.Oc(124," To setup the Configurator, please check the "),h.Vb(125,"strong"),h.Oc(126,"setupConfigurator"),h.Ub(),h.Oc(127," dashboard method implementation. You can find the sources under the dashboard source expander.\n"),h.Ub()),2&e&&(h.Db(95),h.Qc(" ",t.dataSourceDataFieldsConfig,"\n"),h.Db(21),h.Qc(" ",t.widgetConfigSlice,"\n"))},directives:[m.l,L,m.k],encapsulation:2}),F),data:{srlc:{hideIndicator:!0}}},{path:"donut-content-formatters-example",component:L,data:{srlc:{hideIndicator:!0}}}],W=((_=function e(){r(this,e)}).\u0275mod=h.Nb({type:_}),_.\u0275inj=h.Mb({factory:function(e){return new(e||_)},imports:[[g.d.forChild(M),m.A,m.F,f.N,m.M,m.Z]]}),_)},NCPm:function(e,t,n){"use strict";n.r(t),t.default='import { StackComponent } from "../../components/layouts/stack/stack.component";\nimport { ProportionalWidgetComponent } from "../../components/proportional-widget/proportional-widget.component";\nimport { DEFAULT_PIZZAGNA_ROOT, NOVA_DATASOURCE_ADAPTER } from "../../services/types";\nimport { PizzagnaLayer, WellKnownProviders } from "../../types";\nimport { widgetBodyContentNodes, WIDGET_BODY, WIDGET_HEADER, WIDGET_LOADING } from "../common/widget/components";\nimport { EVENT_PROXY, refresher } from "../common/widget/providers";\n\nexport const proportionalWidget = {\n    [PizzagnaLayer.Structure]: {\n        [DEFAULT_PIZZAGNA_ROOT]: {\n            id: DEFAULT_PIZZAGNA_ROOT,\n            // base layout of the widget - all components referenced herein will be stacked in a column\n            componentType: StackComponent.lateLoadKey,\n            properties: {\n                // these values reference other components in this structure\n                nodes: [\n                    "header",\n                    "loading",\n                    "body",\n                ],\n            },\n            providers: {\n                // When enabled, this provider emits the REFRESH event on the pizzagna event bus every X seconds\n                [WellKnownProviders.Refresher]: refresher(),\n                // event proxy manages the transmission of events between widget and dashboard\n                [WellKnownProviders.EventProxy]: EVENT_PROXY,\n            },\n        },\n        // widget header\n        header: WIDGET_HEADER,\n        // this is the loading bar below the header\n        loading: WIDGET_LOADING,\n        // widget body\n        body: {\n            ...WIDGET_BODY,\n            properties: {\n                ...WIDGET_BODY.properties,\n                elementClass: "overflow-auto",\n            },\n        },\n\n\n        // retrieving the definitions for the body content nodes. the argument corresponds to the main content node key\n        ...widgetBodyContentNodes("chart"),\n\n        // a component that manages layout and behavior of the proportional chart\n        chart: {\n            id: "chart",\n            componentType: ProportionalWidgetComponent.lateLoadKey,\n            providers: {\n                [WellKnownProviders.Adapter]: {\n                    providerId: NOVA_DATASOURCE_ADAPTER,\n                    properties: {\n                        componentId: "chart",\n                        propertyPath: "widgetData",\n                    },\n                },\n            },\n            properties: {\n                elementClass: "d-flex flex-grow-1 justify-content-center overflow-auto",\n            },\n        },\n    },\n    [PizzagnaLayer.Configuration]: {\n        [DEFAULT_PIZZAGNA_ROOT]: {\n            id: DEFAULT_PIZZAGNA_ROOT,\n            providers: {\n                // default refresher configuration\n                [WellKnownProviders.Refresher]: refresher(false, 60),\n            },\n        },\n        // default header configuration\n        header: {\n            properties: {\n                title: $localize`Empty Proportional Widget`,\n            },\n        },\n    },\n};\n'}}])}();