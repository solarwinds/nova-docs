import{b as f}from"./chunk-3LXGWFKT.js";import{b as x}from"./chunk-PTQI3KQS.js";import{c as g}from"./chunk-C2AYYFSU.js";import{b as l}from"./chunk-5JNG5CIY.js";import{Mc as h,oe as p,qe as u}from"./chunk-PMWUHOKA.js";import{Bc as e,Db as c,Ub as r,bc as i,cc as t,dc as n,rb as s}from"./chunk-MCPF2SEG.js";import{i as d}from"./chunk-VBFW7A5V.js";var k=(()=>{class a{constructor(){this.timeseriesWidgetFileText="",this.timeseriesConfiguratorFileText=""}ngOnInit(){return d(this,null,function*(){this.timeseriesWidgetFileText=yield import("./chunk-EW6UJLNI.js").then(l),this.timeseriesConfiguratorFileText=yield import("./chunk-AWGMMAIZ.js").then(l)})}static{this.\u0275fac=function(o){return new(o||a)}}static{this.\u0275cmp=c({type:a,selectors:[["nui-timeseries-docs"]],standalone:!1,decls:170,vars:3,consts:[["type","info",3,"allowDismiss"],["href","../miscellaneous/enumerations.html#TimeseriesChartPreset","target","_blank"],["href","../interfaces/ITimeseriesWidgetSeriesData.html","target","_blank"],["filenamePrefix","timeseries-widget-example","exampleTitle","Numeric Value Visualizations"],["href","../interfaces/ITimeseriesWidgetStatusData.html","target","_blank"],["href","../miscellaneous/enumerations.html#TimeseriesScaleType","target","_blank"],["href","../miscellaneous/functions.html#applyStatusEndpoints","target","_blank"],["filenamePrefix","timeseries-widget-status-bar-example","exampleTitle","State Values Visualization"],["href","../injectables/UrlInteractionHandler.html","target","_blank"],["filenamePrefix","timeseries-widget-interactive-example","exampleTitle","Timeseries with Interaction Examples"],["language","typescript",3,"code"],["href","../interfaces/ITimeseriesWidgetConfig.html","target","_blank"],["href","../miscellaneous/enumerations.html#TimeseriesScaleType"]],template:function(o,m){o&1&&(i(0,"h1"),e(1,"Timeseries Widget"),t(),i(2,"p"),e(3,` A timeseries widget is, as its name suggests, used for visualizing changes in one or more numeric values over a specified period of time. It essentially brings a second dimension to the KPI widget use-case of displaying values of one or more metrics at a specific moment in time, i.e. the present. The following example exhibits an admittedly contrived scenario of comparing the reported primary leisure activity of Solarians over a seven-day period. The data is made up and makes absolutely no sense, but it's all in good fun.
`),t(),i(4,"nui-message",0),e(5,` For details on how to instantiate a timeseries widget, take a look at the inline comments under the source expander of the following example.
`),t(),i(6,"h2"),e(7,"Supported Visualizations"),t(),i(8,"ul")(9,"li"),e(10,"Line"),t(),i(11,"li"),e(12,"Stacked Area"),t(),i(13,"li"),e(14,"Stacked Percentage Area"),t(),i(15,"li"),e(16,"Stacked Bar"),t(),i(17,"li"),e(18,"Status Bar"),t()(),i(19,"p"),e(20," The default visualization for the timeseries widget is Line. To change the visualization presented by the widget, set the widget's "),i(21,"code"),e(22,"pizzagna.configuration.chart.properties.configuration.preset"),t(),e(23," property to a value of type "),i(24,"code")(25,"a",1),e(26,"TimeseriesChartPreset"),t()(),e(27,`. For a look at how to configure it in the context of a functioning widget, see the widget configurations in the source expanders of the examples on this page.
`),t(),i(28,"h3"),e(29,"Visualizations for Continuous Numeric Values"),t(),i(30,"p"),e(31," Continuous numeric values can be visualized as lines, areas, or bars along a time progression. Data sources for these visualizations should provide series data that conform to the "),i(32,"code")(33,"a",2),e(34,"ITimeseriesWidgetSeriesData"),t()(),e(35,` interface in their output. Open the source expander of the following example to see how this looks.
`),t(),i(36,"nui-example-wrapper",3),n(37,"timeseries-widget-example"),t(),i(38,"h3"),e(39,"Visualizing Discrete State Values"),t(),i(40,"p"),e(41," Discrete state values can be visualized as horizontal bars of variable length and color along a time progression. Data sources for the Status Bar visualization must provide their series data in a slightly different format from that of the other timeseries visualization types shown above. In this case, the series data should conform to the "),i(42,"code")(43,"a",4),e(44,"ITimeseriesWidgetStatusData"),t()(),e(45," interface which extends "),i(46,"code")(47,"a",2),e(48,"ITimeseriesWidgetSeriesData"),t()(),e(49,` with three additional properties:
`),t(),i(50,"ul")(51,"li")(52,"code"),e(53,"color"),t(),e(54,": string or css variable for the color to use for the fill color of the associated bar "),t(),i(55,"li")(56,"code"),e(57,"icon"),t(),e(58,": string value for the name of the icon to display on the bar as well as the legend "),t(),i(59,"li")(60,"code"),e(61,"thick"),t(),e(62,': boolean for whether or not to display a "thick" bar ("false" is typically used for an "ok" status) '),t()(),i(63,"h4"),e(64,"Usage Notes"),t(),i(65,"ul")(66,"li")(67,"strong"),e(68,"Continuous (Non-Interval) Scale ("),i(69,"code")(70,"a",5),e(71,"TimeseriesScaleType.Time"),t()(),e(72,")"),t(),i(73,"ul")(74,"li"),e(75," To display the last data point correctly, your data must include a final data point that indicates the endpoint for the most recent status value in the data set. "),t(),i(76,"li"),e(77," To accommodate proper zooming of the chart, use the "),i(78,"code")(79,"a",6),e(80,"applyStatusEndpoints"),t()(),e(81," function to prepend and append the filtered status data with endpoints that match the start and end datetimes of the zoomed time period. This will ensure that each status visualization has valid start and end values after the chart is zoomed. "),t()()(),i(82,"li")(83,"strong"),e(84,"Interval Scale ("),i(85,"code")(86,"a",5),e(87,"TimeseriesScaleType.TimeInterval"),t()(),e(88,")"),t(),i(89,"ul")(90,"li"),e(91," Unlike a continuous scale "),i(92,"strong"),e(93,"no"),t(),e(94," additional data point is needed at the end of the data set since the status values are visualized at regular intervals. "),t(),i(95,"li"),e(96," Unlike a continuous scale, endpoints do not need to be applied to the data since the values are simply visualized at regular intervals. In other words, the "),i(97,"code"),e(98,"applyStatusEndpoints"),t(),e(99," function mentioned for continuous scales above does not need to be used. "),t()()()(),i(100,"p"),e(101,` For better clarity on these usage notes, see the inline comments in the source expander of the example below.
`),t(),i(102,"nui-example-wrapper",7),n(103,"timeseries-widget-status-bar-example"),t(),i(104,"h3"),e(105,"Interaction Handling"),t(),i(106,"p"),e(107," The line chart below show how to use the "),i(108,"code")(109,"a",8),e(110,"UrlInteractionHandler"),t()(),e(111,` to handle interactions that occur on the legend when the chart is set to interactive. The stacked bar chart below shows how individual series can be interactive when the series data has value for:
`),t(),i(112,"ul")(113,"li")(114,"code"),e(115,"link"),t(),e(116,": string used for the legends label link."),t(),i(117,"li")(118,"code"),e(119,"secondaryLink"),t(),e(120,": string used for the legends secondary description link. "),t()(),i(121,"p"),e(122," Look at the inline comments in the source expander to see how the "),i(123,"code")(124,"a",8),e(125,"UrlInteractionHandler"),t()(),e(126,` is set up and configured.
`),t(),i(127,"nui-example-wrapper",9),n(128,"timeseries-widget-interactive-example"),t(),i(129,"h2"),e(130,"Widget Schema"),t(),i(131,"p"),e(132,` The code listings below are the source files for the Timeseries widget definition with inline comments describing the parts that compose the standard Timeseries widget type. It includes the widget's definition as well as its corresponding configurator form for defining how to configure (create/edit) the widget.
`),t(),i(133,"h2"),e(134,"Widget"),t(),i(135,"p"),e(136,` This part shows the actual widget definition. It includes, among other things, the components and providers that compose the widget itself.
`),t(),n(137,"nui-example-code",10),i(138,"h2"),e(139,"Configurator"),t(),i(140,"p"),e(141,` This part shows the form that's used for configuring (creating/editing) the widget.
`),t(),n(142,"nui-example-code",10),i(143,"h2"),e(144,"Additional Features"),t(),i(145,"ul")(146,"li"),e(147," Define custom colors for the chart by assigning a string array of css color variables, color keywords, or RGB hex values to the "),i(148,"code"),e(149,"chartColors"),t(),e(150," property on the widget's "),i(151,"code"),e(152,"configuration"),t(),e(153," input ("),i(154,"code")(155,"a",11),e(156,"ITimeseriesWidgetConfig"),t()(),e(157,"). For how to do this, take a look at the inline comment in the example's source expander above. "),t(),i(158,"li"),e(159," Apart from the aforementioned configuration options, you can also configure the chart scale types using the "),i(160,"code"),e(161,"scales"),t(),e(162," property of the "),i(163,"code"),e(164,"configuration"),t(),e(165," input. Supported scales are enumerated in the "),i(166,"code")(167,"a",12),e(168,"TimeseriesScaleType"),t()(),e(169," type. "),t()()),o&2&&(s(4),r("allowDismiss",!1),s(133),r("code",m.timeseriesWidgetFileText),s(5),r("code",m.timeseriesConfiguratorFileText))},dependencies:[u,p,h,f,x,g],encapsulation:2})}}return a})();export{k as a};
