"use strict";(self.webpackChunkexamples=self.webpackChunkexamples||[]).push([[327],{61327:(l,m,o)=>{o.r(m),o.d(m,{EmbeddedContentDocsModule:()=>I});var c=o(11420),r=o(30652),a=o(91366),e=o(5e3),E=o(69808),u=o(34575),f=o(44994);function h(t,d){if(1&t){const n=e.EpF();e.TgZ(0,"button",6),e.NdJ("click",function(){return e.CHM(n),e.oxw().reInitializeDashboard()}),e._uU(1," Restore Widget "),e.qZA()}}function T(t,d){if(1&t){const n=e.EpF();e.TgZ(0,"nui-dashboard",7),e.NdJ("dashboardChange",function(s){return e.CHM(n),e.oxw().dashboard=s})("gridsterConfigChange",function(s){return e.CHM(n),e.oxw().gridsterConfig=s}),e.qZA()}if(2&t){const n=e.oxw();e.Q6J("dashboard",n.dashboard)("gridsterConfig",n.gridsterConfig)("editMode",n.editMode)}}let g=(()=>{class t{constructor(n,i,s){this.widgetTypesService=n,this.componentRegistry=i,this.changeDetectorRef=s,this.gridsterConfig={},this.editMode=!1}ngOnInit(){this.prepareNovaDashboards(),this.initializeDashboard()}reInitializeDashboard(){this.dashboard=void 0,this.changeDetectorRef.detectChanges(),this.initializeDashboard()}initializeDashboard(){const n=C,i={[n.id]:this.widgetTypesService.mergeWithWidgetType(n)};this.dashboard={positions:{[n.id]:{cols:10,rows:10,y:0,x:0}},widgets:i}}prepareNovaDashboards(){this.componentRegistry.registerByLateLoadKey(a.B),this.componentRegistry.registerByLateLoadKey(a.lc0)}}return t.\u0275fac=function(n){return new(n||t)(e.Y36(a.xTe),e.Y36(a.hiK),e.Y36(e.sBO))},t.\u0275cmp=e.Xpm({type:t,selectors:[["embedded-content-widget-example"]],decls:6,vars:3,consts:function(){let d;return d=$localize`:␟5fa31edac506213950b479159e840b300d749592␟3766035158759769347: Edit Mode `,[[1,"my-3","d-flex","align-items-center"],[1,"ml-3",3,"value","valueChange"],d,["type","button","displayStyle","action","nui-button","",3,"click",4,"ngIf"],[1,"w-100","dashboard"],["nuiWidgetEditor","",3,"dashboard","gridsterConfig","editMode","dashboardChange","gridsterConfigChange",4,"ngIf"],["type","button","displayStyle","action","nui-button","",3,"click"],["nuiWidgetEditor","",3,"dashboard","gridsterConfig","editMode","dashboardChange","gridsterConfigChange"]]},template:function(n,i){1&n&&(e.TgZ(0,"div",0)(1,"nui-switch",1),e.NdJ("valueChange",function(p){return i.editMode=p}),e.SDv(2,2),e.qZA(),e.YNc(3,h,2,0,"button",3),e.qZA(),e.TgZ(4,"div",4),e.YNc(5,T,1,3,"nui-dashboard",5),e.qZA()),2&n&&(e.xp6(1),e.Q6J("value",i.editMode),e.xp6(2),e.Q6J("ngIf",!(null!=i.dashboard&&i.dashboard.widgets.embeddedContentWidgetId)),e.xp6(2),e.Q6J("ngIf",i.dashboard))},directives:[r.qUD,E.O5,r.r0F,u.M,f.t],styles:[".dashboard[_ngcontent-%COMP%]{height:700px}"]}),t})();const C={id:"embeddedContentWidgetId",type:"embedded-content",pizzagna:{[a.xW5.Configuration]:{header:{properties:{title:"Embedded Content Widget",subtitle:""}},mainContent:{properties:{sanitized:!0,mode:a.Ksf.URL,customEmbeddedContent:"https://www.ventusky.com/"}}}}},b=[{path:"",component:(()=>{class t{constructor(){this.embeddedContentWidgetFileText=o(30538).Z,this.embeddedContentConfiguratorFileText=o(68902).Z}}return t.\u0275fac=function(n){return new(n||t)},t.\u0275cmp=e.Xpm({type:t,selectors:[["nui-embedded-content-docs"]],decls:24,vars:3,consts:[["type","info",3,"allowDismiss"],["filenamePrefix","embedded-content-widget-example","exampleTitle","Embedded Content widget"],["language","typescript"]],template:function(n,i){1&n&&(e.TgZ(0,"h1"),e._uU(1,"Embedded Content Widget"),e.qZA(),e.TgZ(2,"p"),e._uU(3," An Embedded Content Widget is used to embed content from an external site to a widget. You can integrate the contents of another web page into your own by two approaches: show the extract HTML or content of URL.\n"),e.qZA(),e.TgZ(4,"nui-message",0),e._uU(5," For details on how to instantiate a Embedded Content Widget, take a look at the inline comments under the source expander of the following example.\n"),e.qZA(),e.TgZ(6,"nui-example-wrapper",1),e._UZ(7,"embedded-content-widget-example"),e.qZA(),e.TgZ(8,"h2"),e._uU(9,"Widget Schema"),e.qZA(),e.TgZ(10,"p"),e._uU(11," The code listings below are the source files for the Embedded Content Widget definition with inline comments describing the parts that compose the standard Embedded Content Widget type. It includes the widget's definition as well as its corresponding configurator form for defining how to configure (create/edit) the widget.\n"),e.qZA(),e.TgZ(12,"h2"),e._uU(13,"Widget"),e.qZA(),e.TgZ(14,"p"),e._uU(15," This part shows the actual widget definition. It includes, among other things, the components and providers that compose the widget itself.\n"),e.qZA(),e.TgZ(16,"nui-example-code",2),e._uU(17),e.qZA(),e.TgZ(18,"h2"),e._uU(19,"Configurator"),e.qZA(),e.TgZ(20,"p"),e._uU(21," This part shows the form that's used for configuring (creating/editing) the widget.\n"),e.qZA(),e.TgZ(22,"nui-example-code",2),e._uU(23),e.qZA()),2&n&&(e.xp6(4),e.Q6J("allowDismiss",!1),e.xp6(13),e.Oqu(i.embeddedContentWidgetFileText),e.xp6(6),e.Oqu(i.embeddedContentConfiguratorFileText))},directives:[r.qqZ,r.hD2,g,r.i10],encapsulation:2}),t})(),data:{srlc:{hideIndicator:!0}}},{path:"example",component:g,data:{srlc:{hideIndicator:!0}}}];let I=(()=>{class t{}return t.\u0275fac=function(n){return new(n||t)},t.\u0275mod=e.oAB({type:t}),t.\u0275inj=e.cJS({imports:[[c.Bz.forChild(b),r.Az_,r.vvu,r.gkT,a.Pi,r.cJ5]]}),t})()},68902:(l,m,o)=>{o.d(m,{Z:()=>c});const c='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\n/* eslint-disable max-len */\nimport {\n    IInfoMessage,\n    IInfoMessageProperties,\n    ILinkDefinition,\n} from "../../components/types";\nimport { FormStackComponent } from "../../configurator/components/form-stack/form-stack.component";\nimport { WidgetConfiguratorSectionComponent } from "../../configurator/components/widget-configurator-section/widget-configurator-section.component";\nimport { EmbeddedContentConfigurationComponent } from "../../configurator/components/widgets/configurator-items/embedded-content-configuration/embedded-content-configuration.component";\nimport { InfoMessageConfigurationComponent } from "../../configurator/components/widgets/configurator-items/info-message-configuration/info-message-configuration.component";\nimport { TitleAndDescriptionConfigurationComponent } from "../../configurator/components/widgets/configurator-items/title-and-description-configuration/title-and-description-configuration.component";\nimport { IConverterFormPartsProperties } from "../../configurator/services/converters/types";\nimport {\n    DEFAULT_PIZZAGNA_ROOT,\n    NOVA_GENERIC_CONVERTER,\n    NOVA_TITLE_AND_DESCRIPTION_CONVERTER,\n} from "../../services/types";\nimport {\n    IProviderConfiguration,\n    PizzagnaLayer,\n    WellKnownProviders,\n} from "../../types";\n/* eslint-enable max-len */\n\nexport const embeddedContentConfigurator = {\n    [PizzagnaLayer.Structure]: {\n        [DEFAULT_PIZZAGNA_ROOT]: {\n            id: DEFAULT_PIZZAGNA_ROOT,\n            // base layout of the configurator - all form components referenced herein will be stacked in a column\n            componentType: FormStackComponent.lateLoadKey,\n            properties: {\n                elementClass: "flex-grow-1 overflow-auto nui-scroll-shadows",\n                // references to other components laid out in this form\n                nodes: ["presentation", "customConfig"],\n            },\n        },\n        // /presentation\n        presentation: {\n            id: "presentation",\n            componentType: WidgetConfiguratorSectionComponent.lateLoadKey,\n            properties: {\n                headerText: $localize`Presentation`,\n                nodes: ["titleAndDescription"],\n            },\n        },\n        // /presentation/titleAndDescription\n        titleAndDescription: {\n            id: "titleAndDescription",\n            componentType:\n                TitleAndDescriptionConfigurationComponent.lateLoadKey,\n            providers: {\n                converter: {\n                    providerId: NOVA_TITLE_AND_DESCRIPTION_CONVERTER,\n                } as IProviderConfiguration,\n            },\n        },\n        // /customConfig\n        customConfig: {\n            id: "customConfig",\n            componentType: WidgetConfiguratorSectionComponent.lateLoadKey,\n            properties: {\n                headerText: $localize`Custom Widget Configuration`,\n                nodes: ["embeddedContentSelection"],\n            },\n        },\n        // /customConfig/embeddedContentSelection\n        embeddedContentSelection: {\n            id: "embeddedContentSelection",\n            componentType: EmbeddedContentConfigurationComponent.lateLoadKey,\n            properties: {\n                messageComponent: {\n                    componentType:\n                        InfoMessageConfigurationComponent.lateLoadKey,\n                    properties: {\n                        emphasizeText: "Some content may not work as expected.",\n                        generalText: `Web pages embedded in a widget may not be able to open popup windows or may experience formatting problems.\n                                    If you supply your own HTML, dangerous content like scripts will be removed.`,\n                        link: {\n                            href: "https://www.solarwinds.com/",\n                            target: "_blank",\n                            text: "Learn more about best practices for the HTML widget",\n                        } as ILinkDefinition,\n                        allowDismiss: true,\n                    } as IInfoMessageProperties,\n                } as IInfoMessage,\n            },\n            providers: {\n                // converter transforms the data between the widget and the form\n                [WellKnownProviders.Converter]: {\n                    providerId: NOVA_GENERIC_CONVERTER,\n                    properties: {\n                        formParts: [\n                            {\n                                previewPath: "mainContent.properties",\n                                keys: [\n                                    "customEmbeddedContent",\n                                    "mode",\n                                    "messageComponent",\n                                    "sanitized",\n                                ],\n                            },\n                        ] as IConverterFormPartsProperties[],\n                    },\n                } as IProviderConfiguration,\n            },\n        },\n    },\n};\n'},30538:(l,m,o)=>{o.d(m,{Z:()=>c});const c='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport { EmbeddedContentComponent } from "../../components/embedded-content/embedded-content.component";\nimport { StackComponent } from "../../components/layouts/stack/stack.component";\nimport { DEFAULT_PIZZAGNA_ROOT } from "../../services/types";\nimport { PizzagnaLayer, WellKnownProviders } from "../../types";\nimport {\n    widgetBodyContentNodes,\n    WIDGET_BODY,\n    WIDGET_HEADER,\n    WIDGET_LOADING,\n} from "../common/widget/components";\nimport { EVENT_PROXY, refresher } from "../common/widget/providers";\n\nexport const embeddedContentWidget = {\n    [PizzagnaLayer.Structure]: {\n        [DEFAULT_PIZZAGNA_ROOT]: {\n            id: DEFAULT_PIZZAGNA_ROOT,\n            // base layout of the widget - all components referenced herein will be stacked in a column\n            componentType: StackComponent.lateLoadKey,\n            providers: {\n                // When enabled, this provider emits the REFRESH event on the pizzagna event bus every X seconds\n                [WellKnownProviders.Refresher]: refresher(),\n                // event proxy manages the transmission of events between widget and dashboard\n                [WellKnownProviders.EventProxy]: EVENT_PROXY,\n            },\n            properties: {\n                nodes: ["header", "loading", "body"],\n            },\n        },\n        // widget header\n        header: WIDGET_HEADER,\n        // this is the loading bar below the header\n        loading: WIDGET_LOADING,\n        // widget body\n        body: WIDGET_BODY,\n\n        /**\n         * Retrieving definitions for the body content nodes\n         * ---\n         * The first argument corresponds to the main content node key.\n         * The second argument is the id of the adapter responsible for activating fallback content in case of an error.\n         */\n        ...widgetBodyContentNodes("mainContent"),\n\n        // the main content node specifying a component that manages layout of the KPI tiles in a CSS grid\n        mainContent: {\n            id: "mainContent",\n            componentType: EmbeddedContentComponent.lateLoadKey,\n            properties: {\n                elementClass: "d-flex w-100 justify-content-center",\n            },\n        },\n    },\n    [PizzagnaLayer.Configuration]: {\n        // default header configuration\n        header: {\n            properties: {\n                title: $localize`Empty Embedded Content Widget`,\n            },\n        },\n    },\n};\n'}}]);