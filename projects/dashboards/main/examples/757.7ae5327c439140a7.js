"use strict";(self.webpackChunkexamples=self.webpackChunkexamples||[]).push([[757],{75757:(h,l,r)=>{r.r(l),r.d(l,{default:()=>y});var m=r(75883),d=r(72536),s=r(41456),e=r(94650),R=r(80529),E=r(61135),A=r(28746),I=r(36895),C=r(18177),O=r(84710);function _(o,i){if(1&o){const n=e.EpF();e.TgZ(0,"button",6),e.NdJ("click",function(){e.CHM(n);const c=e.oxw();return e.KtG(c.initializeDashboard())}),e._uU(1," Restore Widget "),e.qZA()}}let u=(()=>{class o extends d.LvN{constructor(n){super(),this.http=n,this.busy=new E.X(!1)}getFilteredData(){return function(o,i,n,t){return new(n||(n=Promise))(function(a,g){function D(p){try{f(t.next(p))}catch(T){g(T)}}function P(p){try{f(t.throw(p))}catch(T){g(T)}}function f(p){p.done?a(p.value):function c(a){return a instanceof n?a:new n(function(g){g(a)})}(p.value).then(D,P)}f((t=t.apply(o,i||[])).next())})}(this,void 0,void 0,function*(){return this.busy.next(!0),new Promise(n=>{this.http.get("https://www.googleapis.com/books/v1/volumes/5MQFrgEACAAJ").pipe((0,A.x)(()=>this.busy.next(!1))).subscribe({next:t=>{n({result:{value:t.volumeInfo.averageRating}})},error:t=>{n({result:null,error:{type:t.status}})}})})})}ngOnDestroy(){this.outputsSubject.complete()}}return o.providerId="AverageRatingRiskScoreDataSource",o.\u0275fac=function(n){return new(n||o)(e.LFG(R.eN))},o.\u0275prov=e.Yz7({token:o,factory:o.\u0275fac}),o})(),S=(()=>{class o{constructor(n,t){this.widgetTypesService=n,this.providerRegistry=t,this.gridsterConfig={},this.editMode=!1}ngOnInit(){const n=this.widgetTypesService.getWidgetType("risk-score",1);this.widgetTypesService.setNode(n,"configurator",s.ACc.DataSourceProviders,[u.providerId]),this.providerRegistry.setProviders({[u.providerId]:{provide:s.Fk3,useClass:u,deps:[R.eN]}}),this.initializeDashboard()}initializeDashboard(){const n=w,t={[n.id]:this.widgetTypesService.mergeWithWidgetType(n)};this.dashboard={positions:{[n.id]:{cols:4,rows:6,y:0,x:0}},widgets:t}}}return o.\u0275fac=function(n){return new(n||o)(e.Y36(s.xTe),e.Y36(s.CNH))},o.\u0275cmp=e.Xpm({type:o,selectors:[["risk-score-widget-example"]],decls:6,vars:5,consts:function(){let i;return i=$localize`:␟18d630a3c524dbab6dc528571782a939a7bc95b1␟861097914887003123: Edit Mode `,[[1,"mb-2","d-flex","align-items-center"],[1,"ml-3","py-2",3,"value","valueChange"],i,["type","button","displayStyle","action","nui-button","",3,"click",4,"ngIf"],[1,"w-100","dashboard"],["nuiWidgetEditor","",3,"dashboard","editMode","gridsterConfig","dashboardChange","gridsterConfigChange"],["type","button","displayStyle","action","nui-button","",3,"click"]]},template:function(n,t){1&n&&(e.TgZ(0,"div",0)(1,"nui-switch",1),e.NdJ("valueChange",function(a){return t.editMode=a}),e.SDv(2,2),e.qZA(),e.YNc(3,_,2,0,"button",3),e.qZA(),e.TgZ(4,"div",4)(5,"nui-dashboard",5),e.NdJ("dashboardChange",function(a){return t.dashboard=a})("gridsterConfigChange",function(a){return t.gridsterConfig=a}),e.qZA()()),2&n&&(e.xp6(1),e.Q6J("value",t.editMode),e.xp6(2),e.Q6J("ngIf",!(null!=t.dashboard&&t.dashboard.widgets.riskScoreWidgetId)),e.xp6(2),e.Q6J("dashboard",t.dashboard)("editMode",t.editMode)("gridsterConfig",t.gridsterConfig))},dependencies:[d.r0F,I.O5,C.M,O.t,d.qUD],styles:[".dashboard[_ngcontent-%COMP%]{height:400px}"]}),o})();const w={id:"riskScoreWidgetId",type:"risk-score",pizzagna:{[s.xW5.Configuration]:{[s.XMI]:{providers:{[s.Muk.Refresher]:{properties:{interval:600,enabled:!0}}}},header:{properties:{title:"Harry Potter and the Sorcerer's Stone",subtitle:"By J. K. Rowling"}},tiles:{properties:{nodes:["riskScore1"]}},riskScore1:{id:"riskScore1",componentType:s.NCw.lateLoadKey,properties:{widgetData:{minValue:0,maxValue:5,useStaticLabel:!1,staticLabel:void 0,label:"Average Rating",description:"Harry Potter and the Sorcerer's Stone By J. K. Rowling Average Rating Risk Score"}},providers:{[s.Muk.DataSource]:{providerId:u.providerId},[s.Muk.Adapter]:{providerId:s.u1$,properties:{componentId:"riskScore1",propertyPath:"widgetData"}}}}}}},N=[{path:"",component:(()=>{class o{constructor(){this.riskScoreWidgetFileText=r(54024).Z,this.riskScoreConfiguratorFileText=r(62746).Z}}return o.\u0275fac=function(n){return new(n||o)},o.\u0275cmp=e.Xpm({type:o,selectors:[["nui-risk-score-docs"]],decls:24,vars:3,consts:[["type","info",3,"allowDismiss"],["filenamePrefix","risk-score-widget-example","exampleTitle","Risk Score widget"],["language","typescript"]],template:function(n,t){1&n&&(e.TgZ(0,"h1"),e._uU(1,"Risk Score Widget"),e.qZA(),e.TgZ(2,"p"),e._uU(3," Risk Score indicators are quantifiable measures designed to track any metrics of a monitored system. The Risk Score widget displays the current measurement of a Risk Score as a color level value on a gradient scale from green to red and can display one or more individual metrics within a single widget instance. It's useful for highlighting and promoting easy comprehension of key metrics.\n"),e.qZA(),e.TgZ(4,"nui-message",0),e._uU(5," For details on how to instantiate a Risk Score widget, take a look at the inline comments under the source expander of the following example.\n"),e.qZA(),e.TgZ(6,"nui-example-wrapper",1),e._UZ(7,"risk-score-widget-example"),e.qZA(),e.TgZ(8,"h2"),e._uU(9,"Widget Schema"),e.qZA(),e.TgZ(10,"p"),e._uU(11," The code listings below are the source files for the Risk Score widget definition with inline comments describing the parts that compose the standard Risk Score widget type. It includes the widget's definition as well as its corresponding configurator form for defining how to configure (create/edit) the widget.\n"),e.qZA(),e.TgZ(12,"h2"),e._uU(13,"Widget"),e.qZA(),e.TgZ(14,"p"),e._uU(15," This part shows the actual widget definition. It includes, among other things, the components and providers that compose the widget itself.\n"),e.qZA(),e.TgZ(16,"nui-example-code",2),e._uU(17),e.qZA(),e.TgZ(18,"h2"),e._uU(19,"Configurator"),e.qZA(),e.TgZ(20,"p"),e._uU(21," This part shows the form that's used for configuring (creating/editing) the widget.\n"),e.qZA(),e.TgZ(22,"nui-example-code",2),e._uU(23),e.qZA()),2&n&&(e.xp6(4),e.Q6J("allowDismiss",!1),e.xp6(13),e.Oqu(t.riskScoreWidgetFileText),e.xp6(6),e.Oqu(t.riskScoreConfiguratorFileText))},dependencies:[d.hD2,d.i10,d.qqZ,S],encapsulation:2}),o})(),data:{srlc:{hideIndicator:!0},showThemeSwitcher:!0}},{path:"example",component:S,data:{srlc:{hideIndicator:!0}}}];let y=(()=>{class o{}return o.\u0275fac=function(n){return new(n||o)},o.\u0275mod=e.oAB({type:o}),o.\u0275inj=e.cJS({imports:[m.Bz.forChild(N),d.Az_,d.vvu,d.gkT,s.Pi,d.cJ5]}),o})()},62746:(h,l,r)=>{r.d(l,{Z:()=>m});const m='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\n/* eslint-disable max-len */\nimport { IBroadcasterConfig } from "../../components/providers/types";\nimport { IFormatterDefinition } from "../../components/types";\nimport { FormStackComponent } from "../../configurator/components/form-stack/form-stack.component";\nimport { RawFormatterComponent } from "../../configurator/components/formatters/raw-formatter/raw-formatter.component";\nimport { WidgetConfiguratorSectionComponent } from "../../configurator/components/widget-configurator-section/widget-configurator-section.component";\nimport { DataSourceConfigurationComponent } from "../../configurator/components/widgets/configurator-items/data-source-configuration/data-source-configuration.component";\nimport { DataSourceErrorComponent } from "../../configurator/components/widgets/configurator-items/data-source-error/data-source-error.component";\nimport { RiskScoreTileDescriptionConfigurationComponent } from "../../configurator/components/widgets/configurator-items/risk-score-tile-description-configuration/risk-score-tile-description-configuration.component";\nimport { TitleAndDescriptionConfigurationComponent } from "../../configurator/components/widgets/configurator-items/title-and-description-configuration/title-and-description-configuration.component";\nimport { RiskScoreTilesConfigurationComponent } from "../../configurator/components/widgets/risk-score/risk-score-tiles-configuration/risk-score-tiles-configuration.component";\nimport { PresentationConfigurationComponent } from "../../configurator/components/widgets/table/columns-editor/column-configuration/presentation-configuration/presentation-configuration.component";\nimport {\n    DEFAULT_PIZZAGNA_ROOT,\n    NOVA_RISK_SCORE_FORMATTERS_REGISTRY,\n    NOVA_KPI_SECTION_CONVERTER,\n    NOVA_KPI_TILES_CONVERTER,\n    NOVA_PIZZAGNA_BROADCASTER,\n    NOVA_TITLE_AND_DESCRIPTION_CONVERTER,\n} from "../../services/types";\nimport {\n    IProviderConfiguration,\n    PizzagnaLayer,\n    WellKnownProviders,\n} from "../../types";\nimport { REFRESHER_CONFIGURATOR } from "../common/configurator/components";\n\n/* eslint-enable max-len */\n\nexport const DEFAULT_RISK_SCORE_FORMATTERS: IFormatterDefinition[] = [\n    {\n        componentType: RawFormatterComponent.lateLoadKey,\n        label: $localize`Raw Formatter`,\n        dataTypes: {\n            // @ts-ignore\n            value: null,\n        },\n    },\n];\n\nexport const riskScoreConfigurator = {\n    [PizzagnaLayer.Structure]: {\n        [DEFAULT_PIZZAGNA_ROOT]: {\n            id: DEFAULT_PIZZAGNA_ROOT,\n            // base layout of the configurator - all form components referenced herein will be stacked in a column\n            componentType: FormStackComponent.lateLoadKey,\n            properties: {\n                elementClass: "flex-grow-1 overflow-auto nui-scroll-shadows",\n                // references to other components laid out in this form\n                nodes: ["presentation", "tiles"],\n            },\n            providers: {\n                [WellKnownProviders.FormattersRegistry]: {\n                    providerId: NOVA_RISK_SCORE_FORMATTERS_REGISTRY,\n                },\n            },\n        },\n        // /presentation\n        presentation: {\n            id: "presentation",\n            componentType: WidgetConfiguratorSectionComponent.lateLoadKey,\n            properties: {\n                headerText: $localize`Presentation`,\n                nodes: ["titleAndDescription", "refresher"],\n            },\n        },\n        // /presentation/titleAndDescription\n        titleAndDescription: {\n            id: "titleAndDescription",\n            componentType:\n                TitleAndDescriptionConfigurationComponent.lateLoadKey,\n            providers: {\n                converter: {\n                    providerId: NOVA_TITLE_AND_DESCRIPTION_CONVERTER,\n                },\n            },\n        },\n        refresher: REFRESHER_CONFIGURATOR,\n        // /tiles\n        tiles: {\n            id: "tiles",\n            componentType: RiskScoreTilesConfigurationComponent.lateLoadKey,\n            properties: {\n                // these components serve as a template for every KPI tile created\n                template: [\n                    {\n                        // Risk Score tile description (label) configuration section\n                        id: "description",\n                        componentType:\n                            RiskScoreTileDescriptionConfigurationComponent.lateLoadKey,\n                        properties: {},\n                        providers: {\n                            // converter transforms the data between the widget and the form\n                            [WellKnownProviders.Converter]: {\n                                providerId: NOVA_KPI_SECTION_CONVERTER,\n                                properties: {\n                                    formParts: [\n                                        {\n                                            previewPath:\n                                                "properties.widgetData",\n                                            keys: [\n                                                "label",\n                                                "minValue",\n                                                "maxValue",\n                                                "description",\n                                                "useStaticLabel",\n                                                "staticLabel",\n                                            ],\n                                        },\n                                    ],\n                                },\n                            } as IProviderConfiguration,\n                        },\n                    },\n                    {\n                        // data source configuration section\n                        id: "dataSource",\n                        componentType:\n                            DataSourceConfigurationComponent.lateLoadKey,\n                        properties: {\n                            // for the DataSourceConfigurationComponent, this defines the list of data sources to pick from\n                            dataSourceProviders: [] as string[],\n                            errorComponent:\n                                DataSourceErrorComponent.lateLoadKey,\n                        },\n                        providers: {\n                            // converter transforms the data source metadata between the widget and the form\n                            [WellKnownProviders.Converter]: {\n                                providerId: NOVA_KPI_SECTION_CONVERTER,\n                                properties: {\n                                    formParts: [\n                                        {\n                                            // this component updates \'providerId\' of \'dataSource\'\n                                            previewPath: "providers.dataSource",\n                                            // TODO: Remove \'properties\' key in v10 - NUI-5831\n                                            keys: ["providerId", "properties"],\n                                        },\n                                        {\n                                            // this component updates \'properties\' of \'dataSource\' via an adapter\n                                            previewPath:\n                                                "providers.adapter.properties.dataSource",\n                                            keys: ["properties"],\n                                        },\n                                    ],\n                                },\n                            } as IProviderConfiguration,\n                            [WellKnownProviders.Broadcaster]: {\n                                providerId: NOVA_PIZZAGNA_BROADCASTER,\n                                properties: {\n                                    configs: [\n                                        {\n                                            trackOn: "component",\n                                            key: "dataFieldIds",\n                                            paths: [\n                                                "data.{parentComponentId}/formatting.properties.dataFieldIds",\n                                            ],\n                                        },\n                                    ] as IBroadcasterConfig[],\n                                },\n                            },\n                        },\n                    },\n                    {\n                        id: "formatting",\n                        componentType:\n                            PresentationConfigurationComponent.lateLoadKey,\n                        providers: {\n                            [WellKnownProviders.Converter]: {\n                                providerId: NOVA_KPI_SECTION_CONVERTER,\n                                properties: {\n                                    formParts: [\n                                        {\n                                            previewPath:\n                                                "properties.configuration.formatters.Value",\n                                            keys: ["formatter"],\n                                        },\n                                    ],\n                                },\n                            } as IProviderConfiguration,\n                        },\n                        properties: {\n                            // Note: Now you should define your formatters in the KpiFormatterRegistry which can contain more formatter options\n                            // formatters: DEFAULT_RISK_SCORE_FORMATTERS,\n\n                            // Set default formatter to the configuration section as RawFormatterComponent.\n                            // In case Risk Scrore doesn\'t use the formatters yet, it will be overridden with default formatter value on first save\n                            formatter: {\n                                componentType:\n                                    RawFormatterComponent.lateLoadKey,\n                                properties: {\n                                    dataFieldIds: {\n                                        value: "value",\n                                    },\n                                },\n                            },\n                        },\n                    },\n                ],\n            },\n            providers: {\n                // converter transforms the data between the widget and the form\n                [WellKnownProviders.Converter]: {\n                    providerId: NOVA_KPI_TILES_CONVERTER,\n                } as IProviderConfiguration,\n            },\n        },\n    },\n};\n'},54024:(h,l,r)=>{r.d(l,{Z:()=>m});const m='// \xa9 2023 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\nimport { StackComponent } from "../../components/layouts/stack/stack.component";\nimport { TilesComponent } from "../../components/layouts/tiles/tiles.component";\nimport { RiskScoreTileComponent } from "../../components/risk-score-tile/risk-score-tile.component";\nimport {\n    DEFAULT_PIZZAGNA_ROOT,\n    NOVA_KPI_DATASOURCE_ADAPTER,\n    NOVA_KPI_STATUS_CONTENT_FALLBACK_ADAPTER,\n} from "../../services/types";\nimport {\n    IProviderConfiguration,\n    PizzagnaLayer,\n    WellKnownProviders,\n} from "../../types";\nimport {\n    widgetBodyContentNodes,\n    WIDGET_BODY,\n    WIDGET_HEADER,\n    WIDGET_LOADING,\n} from "../common/widget/components";\nimport { EVENT_PROXY, refresher } from "../common/widget/providers";\n\nexport const riskScoreWidget = {\n    [PizzagnaLayer.Structure]: {\n        [DEFAULT_PIZZAGNA_ROOT]: {\n            id: DEFAULT_PIZZAGNA_ROOT,\n            // base layout of the widget - all components referenced herein will be stacked in a column\n            componentType: StackComponent.lateLoadKey,\n            providers: {\n                // When enabled, this provider emits the REFRESH event on the pizzagna event bus every X seconds\n                [WellKnownProviders.Refresher]: refresher(),\n                // event proxy manages the transmission of events between widget and dashboard\n                [WellKnownProviders.EventProxy]: EVENT_PROXY,\n            },\n            properties: {\n                nodes: ["header", "loading", "body"],\n            },\n        },\n        // widget header\n        header: WIDGET_HEADER,\n        // this is the loading bar below the header\n        loading: WIDGET_LOADING,\n        // widget body\n        body: {\n            ...WIDGET_BODY,\n            properties: {\n                ...WIDGET_BODY.properties,\n                elementClass: "overflow-hidden",\n            },\n        },\n\n        /**\n         * Retrieving definitions for the body content nodes\n         * ---\n         * The first argument corresponds to the main content node key.\n         * The second argument is the id of the adapter responsible for activating fallback content in case of an error.\n         */\n        ...widgetBodyContentNodes(\n            "tiles",\n            NOVA_KPI_STATUS_CONTENT_FALLBACK_ADAPTER\n        ),\n\n        // the main content node specifying a component that manages layout of the KPI tiles in a CSS grid\n        tiles: {\n            id: "tiles",\n            componentType: TilesComponent.lateLoadKey,\n            properties: {\n                elementClass: "flex-grow-1 pt-2 px-3 pb-3 w-100",\n                template: {\n                    componentType: RiskScoreTileComponent.lateLoadKey,\n                    providers: {\n                        [WellKnownProviders.Adapter]: {\n                            providerId: NOVA_KPI_DATASOURCE_ADAPTER,\n                            properties: {\n                                propertyPath: "widgetData",\n                            },\n                        } as IProviderConfiguration,\n                    },\n                    properties: {\n                        elementClass: "flex-grow-1",\n                    },\n                },\n            },\n        },\n    },\n    [PizzagnaLayer.Configuration]: {\n        [DEFAULT_PIZZAGNA_ROOT]: {\n            id: DEFAULT_PIZZAGNA_ROOT,\n            providers: {\n                // default refresher configuration\n                [WellKnownProviders.Refresher]: refresher(false, 60),\n            },\n        },\n        // default header configuration\n        header: {\n            properties: {\n                title: $localize`Empty Risk Score Widget`,\n            },\n        },\n    },\n};\n'}}]);