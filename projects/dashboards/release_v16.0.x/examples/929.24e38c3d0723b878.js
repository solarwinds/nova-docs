(self.webpackChunkexamples=self.webpackChunkexamples||[]).push([[929],{23929:(o,e,n)=>{"use strict";n.d(e,{R:()=>a});const t=["dashboard-docs.module.ts","demo.files.ts","overview/hero/dashboard/hero-dashboard.component.html","overview/hero/dashboard/hero-dashboard.component.less","overview/hero/dashboard/hero-dashboard.component.ts","overview/hero/dashboard/widget-configs.ts","overview/hero/data/kpi-datasources.ts","overview/hero/data/proportional-datasources.ts","overview/hero/data/table/beer-data-source.ts","overview/hero/data/table/constants.ts","overview/hero/data/table/random-user-data-source.ts","overview/hero/data/table/types.ts","overview/hero/data/timeseries-data-sources.ts","overview/hero/data/types.ts","overview/hero/data/widget-data.ts","overview/hero/widget-configs/kpi.ts","overview/hero/widget-configs/proportional.ts","overview/hero/widget-configs/risk-score.ts","overview/hero/widget-configs/table.ts","overview/hero/widget-configs/timeseries.ts","overview/overview-docs.component.html","overview/overview-docs.component.ts","overview/overview.module.ts","tutorials/customization/configurator-section/custom-configurator-section/custom-configurator-section.example.component.html","tutorials/customization/configurator-section/custom-configurator-section/custom-configurator-section.example.component.less","tutorials/customization/configurator-section/custom-configurator-section/custom-configurator-section.example.component.ts","tutorials/customization/configurator-section/custom-configurator-section-docs.component.html","tutorials/customization/configurator-section/custom-configurator-section-docs.component.ts","tutorials/customization/configurator-section/custom-configurator-section.module.ts","tutorials/customization/customization.module.ts","tutorials/customization/data-source-configurator/custom-data-source-configurator-docs.component.html","tutorials/customization/data-source-configurator/custom-data-source-configurator-docs.component.ts","tutorials/customization/data-source-configurator/custom-data-source-configurator.module.ts","tutorials/customization/data-source-configurator/example/custom-data-source-configurator-example.component.html","tutorials/customization/data-source-configurator/example/custom-data-source-configurator-example.component.less","tutorials/customization/data-source-configurator/example/custom-data-source-configurator-example.component.ts","tutorials/customization/formatter/custom-formatter.module.ts","tutorials/customization/formatter/donut-content-formatter-example/custom-donut-content-formatter-docs.component.html","tutorials/customization/formatter/donut-content-formatter-example/custom-donut-content-formatter-docs.component.ts","tutorials/customization/formatter/donut-content-formatter-example/custom-donut-content-formatter-example.component.html","tutorials/customization/formatter/donut-content-formatter-example/custom-donut-content-formatter-example.component.less","tutorials/customization/formatter/donut-content-formatter-example/custom-donut-content-formatter-example.component.ts","tutorials/customization/formatter/formatter-example/custom-formatter-docs.component.html","tutorials/customization/formatter/formatter-example/custom-formatter-docs.component.ts","tutorials/customization/formatter/formatter-example/custom-formatter-example.component.html","tutorials/customization/formatter/formatter-example/custom-formatter-example.component.less","tutorials/customization/formatter/formatter-example/custom-formatter-example.component.ts","tutorials/customization/widget/custom-widget-docs.component.html","tutorials/customization/widget/custom-widget-docs.component.ts","tutorials/customization/widget/custom-widget.component.html","tutorials/customization/widget/custom-widget.component.less","tutorials/customization/widget/custom-widget.component.ts","tutorials/customization/widget/custom-widget.module.ts","tutorials/data-source-setup/data-source-setup-docs.component.html","tutorials/data-source-setup/data-source-setup-docs.component.ts","tutorials/data-source-setup/data-source-setup.component.html","tutorials/data-source-setup/data-source-setup.component.less","tutorials/data-source-setup/data-source-setup.component.ts","tutorials/data-source-setup/data-source-setup.module.ts","tutorials/dynamic-header-links/dynamic-header-links-docs.component.html","tutorials/dynamic-header-links/dynamic-header-links-docs.component.ts","tutorials/dynamic-header-links/dynamic-header-links-docs.module.ts","tutorials/hello-dashboards/hello-dashboards-docs.component.html","tutorials/hello-dashboards/hello-dashboards-docs.component.ts","tutorials/hello-dashboards/hello-dashboards-example/hello-dashboards-example.component.html","tutorials/hello-dashboards/hello-dashboards-example/hello-dashboards-example.component.less","tutorials/hello-dashboards/hello-dashboards-example/hello-dashboards-example.component.ts","tutorials/hello-dashboards/hello-dashboards.module.ts","tutorials/persistence-handler-setup/persistence-handler-setup-docs.component.html","tutorials/persistence-handler-setup/persistence-handler-setup-docs.component.ts","tutorials/persistence-handler-setup/persistence-handler-setup.component.html","tutorials/persistence-handler-setup/persistence-handler-setup.component.less","tutorials/persistence-handler-setup/persistence-handler-setup.component.ts","tutorials/persistence-handler-setup/persistence-handler-setup.module.ts","tutorials/tutorials.module.ts","tutorials/widget-creation/widget-creation-docs.component.html","tutorials/widget-creation/widget-creation-docs.component.ts","tutorials/widget-creation/widget-creation.component.html","tutorials/widget-creation/widget-creation.component.less","tutorials/widget-creation/widget-creation.component.ts","tutorials/widget-creation/widget-creation.module.ts","tutorials/widget-editor-setup/widget-editor-setup-docs.component.html","tutorials/widget-editor-setup/widget-editor-setup-docs.component.ts","tutorials/widget-editor-setup/widget-editor-setup.component.html","tutorials/widget-editor-setup/widget-editor-setup.component.less","tutorials/widget-editor-setup/widget-editor-setup.component.ts","tutorials/widget-editor-setup/widget-editor-setup.module.ts","tutorials/widget-error-handling/widget-error-handling-docs.component.html","tutorials/widget-error-handling/widget-error-handling-docs.component.ts","tutorials/widget-error-handling/widget-error-handling.component.html","tutorials/widget-error-handling/widget-error-handling.component.less","tutorials/widget-error-handling/widget-error-handling.component.ts","tutorials/widget-error-handling/widget-error-handling.module.ts","types.ts","widget-types/drilldown/drilldown-multi-request-widget/drilldown-multi-request-widget-example.component.html","widget-types/drilldown/drilldown-multi-request-widget/drilldown-multi-request-widget-example.component.less","widget-types/drilldown/drilldown-multi-request-widget/drilldown-multi-request-widget-example.component.ts","widget-types/drilldown/drilldown-widget/data-mock.ts","widget-types/drilldown/drilldown-widget/drilldown-widget-example.component.html","widget-types/drilldown/drilldown-widget/drilldown-widget-example.component.less","widget-types/drilldown/drilldown-widget/drilldown-widget-example.component.ts","widget-types/drilldown/drilldown-widget/mock-data-source.ts","widget-types/drilldown/drilldown-widget-docs.component.html","widget-types/drilldown/drilldown-widget-docs.component.ts","widget-types/drilldown/drilldown-widget-docs.module.ts","widget-types/embedded-content/embedded-content-docs.component.html","widget-types/embedded-content/embedded-content-docs.component.ts","widget-types/embedded-content/embedded-content-docs.module.ts","widget-types/embedded-content/embedded-content-widget-example/embedded-content-widget-example.component.html","widget-types/embedded-content/embedded-content-widget-example/embedded-content-widget-example.component.less","widget-types/embedded-content/embedded-content-widget-example/embedded-content-widget-example.component.ts","widget-types/kpi/kpi-docs.component.html","widget-types/kpi/kpi-docs.component.ts","widget-types/kpi/kpi-docs.module.ts","widget-types/kpi/kpi-sync-broker/kpi-sync-broker-example.component.html","widget-types/kpi/kpi-sync-broker/kpi-sync-broker-example.component.less","widget-types/kpi/kpi-sync-broker/kpi-sync-broker-example.component.ts","widget-types/kpi/kpi-sync-broker-docs.component.html","widget-types/kpi/kpi-sync-broker-docs.component.ts","widget-types/kpi/kpi-sync-broker-for-all-tiles/kpi-sync-broker-for-all-tiles-example.component.html","widget-types/kpi/kpi-sync-broker-for-all-tiles/kpi-sync-broker-for-all-tiles-example.component.less","widget-types/kpi/kpi-sync-broker-for-all-tiles/kpi-sync-broker-for-all-tiles-example.component.ts","widget-types/kpi/kpi-widget/kpi-widget-example.component.html","widget-types/kpi/kpi-widget/kpi-widget-example.component.less","widget-types/kpi/kpi-widget/kpi-widget-example.component.ts","widget-types/kpi/kpi-widget-background-color/kpi-widget-background-color-example.component.html","widget-types/kpi/kpi-widget-background-color/kpi-widget-background-color-example.component.less","widget-types/kpi/kpi-widget-background-color/kpi-widget-background-color-example.component.ts","widget-types/kpi/kpi-widget-background-color-docs.component.html","widget-types/kpi/kpi-widget-background-color-docs.component.ts","widget-types/kpi/kpi-widget-interactive/kpi-widget-interactive-example.component.html","widget-types/kpi/kpi-widget-interactive/kpi-widget-interactive-example.component.less","widget-types/kpi/kpi-widget-interactive/kpi-widget-interactive-example.component.ts","widget-types/proportional/models.ts","widget-types/proportional/proportional-docs.component.html","widget-types/proportional/proportional-docs.component.ts","widget-types/proportional/proportional-docs.module.ts","widget-types/proportional/proportional-donut-content-docs.component.html","widget-types/proportional/proportional-donut-content-docs.component.ts","widget-types/proportional/proportional-donut-content-formatters/proportional-donut-content-formatters-example.component.html","widget-types/proportional/proportional-donut-content-formatters/proportional-donut-content-formatters-example.component.less","widget-types/proportional/proportional-donut-content-formatters/proportional-donut-content-formatters-example.component.ts","widget-types/proportional/proportional-widget/proportional-widget-example.component.html","widget-types/proportional/proportional-widget/proportional-widget-example.component.less","widget-types/proportional/proportional-widget/proportional-widget-example.component.ts","widget-types/proportional/proportional-widget-interactive/proportional-widget-interactive-example.component.html","widget-types/proportional/proportional-widget-interactive/proportional-widget-interactive-example.component.less","widget-types/proportional/proportional-widget-interactive/proportional-widget-interactive-example.component.ts","widget-types/risk-score/risk-score-docs.component.html","widget-types/risk-score/risk-score-docs.component.ts","widget-types/risk-score/risk-score-docs.module.ts","widget-types/risk-score/risk-score-widget-example/risk-score-widget-example.component.html","widget-types/risk-score/risk-score-widget-example/risk-score-widget-example.component.less","widget-types/risk-score/risk-score-widget-example/risk-score-widget-example.component.ts","widget-types/table/table-docs.component.html","widget-types/table/table-docs.component.ts","widget-types/table/table-docs.module.ts","widget-types/table/table-paginator-docs.component.html","widget-types/table/table-paginator-docs.component.ts","widget-types/table/table-selectable-docs.component.html","widget-types/table/table-selectable-docs.component.ts","widget-types/table/table-widget/table-widget-example.component.html","widget-types/table/table-widget/table-widget-example.component.less","widget-types/table/table-widget/table-widget-example.component.ts","widget-types/table/table-widget-interactive/table-widget-interactive-example.component.html","widget-types/table/table-widget-interactive/table-widget-interactive-example.component.less","widget-types/table/table-widget-interactive/table-widget-interactive-example.component.ts","widget-types/table/table-widget-paginator/table-widget-paginator-example.component.html","widget-types/table/table-widget-paginator/table-widget-paginator-example.component.less","widget-types/table/table-widget-paginator/table-widget-paginator-example.component.ts","widget-types/table/table-widget-search/table-widget-search-example.component.html","widget-types/table/table-widget-search/table-widget-search-example.component.less","widget-types/table/table-widget-search/table-widget-search-example.component.ts","widget-types/table/table-widget-search-docs.component.html","widget-types/table/table-widget-search-docs.component.ts","widget-types/table/table-widget-selectable/table-widget-selectable-multi/table-widget-selectable-multi.example.component.html","widget-types/table/table-widget-selectable/table-widget-selectable-multi/table-widget-selectable-multi.example.component.less","widget-types/table/table-widget-selectable/table-widget-selectable-multi/table-widget-selectable-multi.example.component.ts","widget-types/table/table-widget-selectable/table-widget-selectable-radio/table-widget-selectable-radio.example.component.html","widget-types/table/table-widget-selectable/table-widget-selectable-radio/table-widget-selectable-radio.example.component.less","widget-types/table/table-widget-selectable/table-widget-selectable-radio/table-widget-selectable-radio.example.component.ts","widget-types/table/table-widget-selectable/table-widget-selectable-single/table-widget-selectable-single.example.component.html","widget-types/table/table-widget-selectable/table-widget-selectable-single/table-widget-selectable-single.example.component.less","widget-types/table/table-widget-selectable/table-widget-selectable-single/table-widget-selectable-single.example.component.ts","widget-types/table/table-widget-selectable/table-widget-selectable.example.component.html","widget-types/table/table-widget-selectable/table-widget-selectable.example.component.less","widget-types/table/table-widget-selectable/table-widget-selectable.example.component.ts","widget-types/timeseries/timeseries-docs.component.html","widget-types/timeseries/timeseries-docs.component.ts","widget-types/timeseries/timeseries-docs.module.ts","widget-types/timeseries/timeseries-widget-example/timeseries-widget-example.component.html","widget-types/timeseries/timeseries-widget-example/timeseries-widget-example.component.less","widget-types/timeseries/timeseries-widget-example/timeseries-widget-example.component.ts","widget-types/timeseries/timeseries-widget-interactive-example/timeseries-widget-interactive-example.component.html","widget-types/timeseries/timeseries-widget-interactive-example/timeseries-widget-interactive-example.component.less","widget-types/timeseries/timeseries-widget-interactive-example/timeseries-widget-interactive-example.component.ts","widget-types/timeseries/timeseries-widget-status-bar-example/timeseries-widget-status-bar-example.component.html","widget-types/timeseries/timeseries-widget-status-bar-example/timeseries-widget-status-bar-example.component.less","widget-types/timeseries/timeseries-widget-status-bar-example/timeseries-widget-status-bar-example.component.ts","widget-types/widget-types.module.ts"],a=r=>({context:r,files:t.filter(i=>i.includes(r)).map(i=>({content:n(25934)(`./${i}`).default,path:i})).concat({content:n(8677).A,path:"package.json"})})},2192:(o,e,n)=>{"use strict";n.r(e),n.d(e,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport { NgModule, Type } from "@angular/core";\nimport { RouterModule, Routes } from "@angular/router";\nimport { InMemoryCache } from "@apollo/client/core";\nimport { APOLLO_OPTIONS, ApolloModule } from "apollo-angular";\nimport { HttpLink } from "apollo-angular/http";\n\nimport { NuiDocsModule, NuiMessageModule } from "@nova-ui/bits";\n\n// https://swicloud.atlassian.net/browse/NUI-6196\n// TODO fix api, now it send 500\nconst COUNTRIES_API = "https://countries-274616.ew.r.appspot.com/";\n\nconst exampleRoutes: Routes = [\n    {\n        path: "overview",\n        loadChildren: async () =>\n            import("./overview/overview.module") as object as Promise<\n                Type<any>\n            >,\n    },\n    {\n        path: "tutorials",\n        loadChildren: async () =>\n            import("./tutorials/tutorials.module") as object as Promise<\n                Type<any>\n            >,\n    },\n    {\n        path: "widget-types",\n        loadChildren: async () =>\n            import("./widget-types/widget-types.module") as object as Promise<\n                Type<any>\n            >,\n    },\n];\n\n@NgModule({\n    imports: [\n        NuiDocsModule,\n        NuiMessageModule,\n        ApolloModule,\n        RouterModule.forChild(exampleRoutes),\n    ],\n    providers: [\n        {\n            provide: APOLLO_OPTIONS,\n            useFactory: (httpLink: HttpLink) => ({\n                cache: new InMemoryCache(),\n                link: httpLink.create({\n                    uri: COUNTRIES_API,\n                }),\n            }),\n            deps: [HttpLink],\n        },\n    ],\n})\nexport default class DashboardDocsModule {}\n'},36054:(o,e,n)=>{"use strict";n.r(e),n.d(e,{default:()=>t});const t='// this file autogenerated, do not edit it manually please run the script\n// yarn run compile-demo-paths\nexport const DEMO_PATHS = [\n    "dashboard-docs.module.ts",\n    "demo.files.ts",\n    "overview/hero/dashboard/hero-dashboard.component.html",\n    "overview/hero/dashboard/hero-dashboard.component.less",\n    "overview/hero/dashboard/hero-dashboard.component.ts",\n    "overview/hero/dashboard/widget-configs.ts",\n    "overview/hero/data/kpi-datasources.ts",\n    "overview/hero/data/proportional-datasources.ts",\n    "overview/hero/data/table/beer-data-source.ts",\n    "overview/hero/data/table/constants.ts",\n    "overview/hero/data/table/random-user-data-source.ts",\n    "overview/hero/data/table/types.ts",\n    "overview/hero/data/timeseries-data-sources.ts",\n    "overview/hero/data/types.ts",\n    "overview/hero/data/widget-data.ts",\n    "overview/hero/widget-configs/kpi.ts",\n    "overview/hero/widget-configs/proportional.ts",\n    "overview/hero/widget-configs/risk-score.ts",\n    "overview/hero/widget-configs/table.ts",\n    "overview/hero/widget-configs/timeseries.ts",\n    "overview/overview-docs.component.html",\n    "overview/overview-docs.component.ts",\n    "overview/overview.module.ts",\n    "tutorials/customization/configurator-section/custom-configurator-section/custom-configurator-section.example.component.html",\n    "tutorials/customization/configurator-section/custom-configurator-section/custom-configurator-section.example.component.less",\n    "tutorials/customization/configurator-section/custom-configurator-section/custom-configurator-section.example.component.ts",\n    "tutorials/customization/configurator-section/custom-configurator-section-docs.component.html",\n    "tutorials/customization/configurator-section/custom-configurator-section-docs.component.ts",\n    "tutorials/customization/configurator-section/custom-configurator-section.module.ts",\n    "tutorials/customization/customization.module.ts",\n    "tutorials/customization/data-source-configurator/custom-data-source-configurator-docs.component.html",\n    "tutorials/customization/data-source-configurator/custom-data-source-configurator-docs.component.ts",\n    "tutorials/customization/data-source-configurator/custom-data-source-configurator.module.ts",\n    "tutorials/customization/data-source-configurator/example/custom-data-source-configurator-example.component.html",\n    "tutorials/customization/data-source-configurator/example/custom-data-source-configurator-example.component.less",\n    "tutorials/customization/data-source-configurator/example/custom-data-source-configurator-example.component.ts",\n    "tutorials/customization/formatter/custom-formatter.module.ts",\n    "tutorials/customization/formatter/donut-content-formatter-example/custom-donut-content-formatter-docs.component.html",\n    "tutorials/customization/formatter/donut-content-formatter-example/custom-donut-content-formatter-docs.component.ts",\n    "tutorials/customization/formatter/donut-content-formatter-example/custom-donut-content-formatter-example.component.html",\n    "tutorials/customization/formatter/donut-content-formatter-example/custom-donut-content-formatter-example.component.less",\n    "tutorials/customization/formatter/donut-content-formatter-example/custom-donut-content-formatter-example.component.ts",\n    "tutorials/customization/formatter/formatter-example/custom-formatter-docs.component.html",\n    "tutorials/customization/formatter/formatter-example/custom-formatter-docs.component.ts",\n    "tutorials/customization/formatter/formatter-example/custom-formatter-example.component.html",\n    "tutorials/customization/formatter/formatter-example/custom-formatter-example.component.less",\n    "tutorials/customization/formatter/formatter-example/custom-formatter-example.component.ts",\n    "tutorials/customization/widget/custom-widget-docs.component.html",\n    "tutorials/customization/widget/custom-widget-docs.component.ts",\n    "tutorials/customization/widget/custom-widget.component.html",\n    "tutorials/customization/widget/custom-widget.component.less",\n    "tutorials/customization/widget/custom-widget.component.ts",\n    "tutorials/customization/widget/custom-widget.module.ts",\n    "tutorials/data-source-setup/data-source-setup-docs.component.html",\n    "tutorials/data-source-setup/data-source-setup-docs.component.ts",\n    "tutorials/data-source-setup/data-source-setup.component.html",\n    "tutorials/data-source-setup/data-source-setup.component.less",\n    "tutorials/data-source-setup/data-source-setup.component.ts",\n    "tutorials/data-source-setup/data-source-setup.module.ts",\n    "tutorials/dynamic-header-links/dynamic-header-links-docs.component.html",\n    "tutorials/dynamic-header-links/dynamic-header-links-docs.component.ts",\n    "tutorials/dynamic-header-links/dynamic-header-links-docs.module.ts",\n    "tutorials/hello-dashboards/hello-dashboards-docs.component.html",\n    "tutorials/hello-dashboards/hello-dashboards-docs.component.ts",\n    "tutorials/hello-dashboards/hello-dashboards-example/hello-dashboards-example.component.html",\n    "tutorials/hello-dashboards/hello-dashboards-example/hello-dashboards-example.component.less",\n    "tutorials/hello-dashboards/hello-dashboards-example/hello-dashboards-example.component.ts",\n    "tutorials/hello-dashboards/hello-dashboards.module.ts",\n    "tutorials/persistence-handler-setup/persistence-handler-setup-docs.component.html",\n    "tutorials/persistence-handler-setup/persistence-handler-setup-docs.component.ts",\n    "tutorials/persistence-handler-setup/persistence-handler-setup.component.html",\n    "tutorials/persistence-handler-setup/persistence-handler-setup.component.less",\n    "tutorials/persistence-handler-setup/persistence-handler-setup.component.ts",\n    "tutorials/persistence-handler-setup/persistence-handler-setup.module.ts",\n    "tutorials/tutorials.module.ts",\n    "tutorials/widget-creation/widget-creation-docs.component.html",\n    "tutorials/widget-creation/widget-creation-docs.component.ts",\n    "tutorials/widget-creation/widget-creation.component.html",\n    "tutorials/widget-creation/widget-creation.component.less",\n    "tutorials/widget-creation/widget-creation.component.ts",\n    "tutorials/widget-creation/widget-creation.module.ts",\n    "tutorials/widget-editor-setup/widget-editor-setup-docs.component.html",\n    "tutorials/widget-editor-setup/widget-editor-setup-docs.component.ts",\n    "tutorials/widget-editor-setup/widget-editor-setup.component.html",\n    "tutorials/widget-editor-setup/widget-editor-setup.component.less",\n    "tutorials/widget-editor-setup/widget-editor-setup.component.ts",\n    "tutorials/widget-editor-setup/widget-editor-setup.module.ts",\n    "tutorials/widget-error-handling/widget-error-handling-docs.component.html",\n    "tutorials/widget-error-handling/widget-error-handling-docs.component.ts",\n    "tutorials/widget-error-handling/widget-error-handling.component.html",\n    "tutorials/widget-error-handling/widget-error-handling.component.less",\n    "tutorials/widget-error-handling/widget-error-handling.component.ts",\n    "tutorials/widget-error-handling/widget-error-handling.module.ts",\n    "types.ts",\n    "widget-types/drilldown/drilldown-multi-request-widget/drilldown-multi-request-widget-example.component.html",\n    "widget-types/drilldown/drilldown-multi-request-widget/drilldown-multi-request-widget-example.component.less",\n    "widget-types/drilldown/drilldown-multi-request-widget/drilldown-multi-request-widget-example.component.ts",\n    "widget-types/drilldown/drilldown-widget/data-mock.ts",\n    "widget-types/drilldown/drilldown-widget/drilldown-widget-example.component.html",\n    "widget-types/drilldown/drilldown-widget/drilldown-widget-example.component.less",\n    "widget-types/drilldown/drilldown-widget/drilldown-widget-example.component.ts",\n    "widget-types/drilldown/drilldown-widget/mock-data-source.ts",\n    "widget-types/drilldown/drilldown-widget-docs.component.html",\n    "widget-types/drilldown/drilldown-widget-docs.component.ts",\n    "widget-types/drilldown/drilldown-widget-docs.module.ts",\n    "widget-types/embedded-content/embedded-content-docs.component.html",\n    "widget-types/embedded-content/embedded-content-docs.component.ts",\n    "widget-types/embedded-content/embedded-content-docs.module.ts",\n    "widget-types/embedded-content/embedded-content-widget-example/embedded-content-widget-example.component.html",\n    "widget-types/embedded-content/embedded-content-widget-example/embedded-content-widget-example.component.less",\n    "widget-types/embedded-content/embedded-content-widget-example/embedded-content-widget-example.component.ts",\n    "widget-types/kpi/kpi-docs.component.html",\n    "widget-types/kpi/kpi-docs.component.ts",\n    "widget-types/kpi/kpi-docs.module.ts",\n    "widget-types/kpi/kpi-sync-broker/kpi-sync-broker-example.component.html",\n    "widget-types/kpi/kpi-sync-broker/kpi-sync-broker-example.component.less",\n    "widget-types/kpi/kpi-sync-broker/kpi-sync-broker-example.component.ts",\n    "widget-types/kpi/kpi-sync-broker-docs.component.html",\n    "widget-types/kpi/kpi-sync-broker-docs.component.ts",\n    "widget-types/kpi/kpi-sync-broker-for-all-tiles/kpi-sync-broker-for-all-tiles-example.component.html",\n    "widget-types/kpi/kpi-sync-broker-for-all-tiles/kpi-sync-broker-for-all-tiles-example.component.less",\n    "widget-types/kpi/kpi-sync-broker-for-all-tiles/kpi-sync-broker-for-all-tiles-example.component.ts",\n    "widget-types/kpi/kpi-widget/kpi-widget-example.component.html",\n    "widget-types/kpi/kpi-widget/kpi-widget-example.component.less",\n    "widget-types/kpi/kpi-widget/kpi-widget-example.component.ts",\n    "widget-types/kpi/kpi-widget-background-color/kpi-widget-background-color-example.component.html",\n    "widget-types/kpi/kpi-widget-background-color/kpi-widget-background-color-example.component.less",\n    "widget-types/kpi/kpi-widget-background-color/kpi-widget-background-color-example.component.ts",\n    "widget-types/kpi/kpi-widget-background-color-docs.component.html",\n    "widget-types/kpi/kpi-widget-background-color-docs.component.ts",\n    "widget-types/kpi/kpi-widget-interactive/kpi-widget-interactive-example.component.html",\n    "widget-types/kpi/kpi-widget-interactive/kpi-widget-interactive-example.component.less",\n    "widget-types/kpi/kpi-widget-interactive/kpi-widget-interactive-example.component.ts",\n    "widget-types/proportional/models.ts",\n    "widget-types/proportional/proportional-docs.component.html",\n    "widget-types/proportional/proportional-docs.component.ts",\n    "widget-types/proportional/proportional-docs.module.ts",\n    "widget-types/proportional/proportional-donut-content-docs.component.html",\n    "widget-types/proportional/proportional-donut-content-docs.component.ts",\n    "widget-types/proportional/proportional-donut-content-formatters/proportional-donut-content-formatters-example.component.html",\n    "widget-types/proportional/proportional-donut-content-formatters/proportional-donut-content-formatters-example.component.less",\n    "widget-types/proportional/proportional-donut-content-formatters/proportional-donut-content-formatters-example.component.ts",\n    "widget-types/proportional/proportional-widget/proportional-widget-example.component.html",\n    "widget-types/proportional/proportional-widget/proportional-widget-example.component.less",\n    "widget-types/proportional/proportional-widget/proportional-widget-example.component.ts",\n    "widget-types/proportional/proportional-widget-interactive/proportional-widget-interactive-example.component.html",\n    "widget-types/proportional/proportional-widget-interactive/proportional-widget-interactive-example.component.less",\n    "widget-types/proportional/proportional-widget-interactive/proportional-widget-interactive-example.component.ts",\n    "widget-types/risk-score/risk-score-docs.component.html",\n    "widget-types/risk-score/risk-score-docs.component.ts",\n    "widget-types/risk-score/risk-score-docs.module.ts",\n    "widget-types/risk-score/risk-score-widget-example/risk-score-widget-example.component.html",\n    "widget-types/risk-score/risk-score-widget-example/risk-score-widget-example.component.less",\n    "widget-types/risk-score/risk-score-widget-example/risk-score-widget-example.component.ts",\n    "widget-types/table/table-docs.component.html",\n    "widget-types/table/table-docs.component.ts",\n    "widget-types/table/table-docs.module.ts",\n    "widget-types/table/table-paginator-docs.component.html",\n    "widget-types/table/table-paginator-docs.component.ts",\n    "widget-types/table/table-selectable-docs.component.html",\n    "widget-types/table/table-selectable-docs.component.ts",\n    "widget-types/table/table-widget/table-widget-example.component.html",\n    "widget-types/table/table-widget/table-widget-example.component.less",\n    "widget-types/table/table-widget/table-widget-example.component.ts",\n    "widget-types/table/table-widget-interactive/table-widget-interactive-example.component.html",\n    "widget-types/table/table-widget-interactive/table-widget-interactive-example.component.less",\n    "widget-types/table/table-widget-interactive/table-widget-interactive-example.component.ts",\n    "widget-types/table/table-widget-paginator/table-widget-paginator-example.component.html",\n    "widget-types/table/table-widget-paginator/table-widget-paginator-example.component.less",\n    "widget-types/table/table-widget-paginator/table-widget-paginator-example.component.ts",\n    "widget-types/table/table-widget-search/table-widget-search-example.component.html",\n    "widget-types/table/table-widget-search/table-widget-search-example.component.less",\n    "widget-types/table/table-widget-search/table-widget-search-example.component.ts",\n    "widget-types/table/table-widget-search-docs.component.html",\n    "widget-types/table/table-widget-search-docs.component.ts",\n    "widget-types/table/table-widget-selectable/table-widget-selectable-multi/table-widget-selectable-multi.example.component.html",\n    "widget-types/table/table-widget-selectable/table-widget-selectable-multi/table-widget-selectable-multi.example.component.less",\n    "widget-types/table/table-widget-selectable/table-widget-selectable-multi/table-widget-selectable-multi.example.component.ts",\n    "widget-types/table/table-widget-selectable/table-widget-selectable-radio/table-widget-selectable-radio.example.component.html",\n    "widget-types/table/table-widget-selectable/table-widget-selectable-radio/table-widget-selectable-radio.example.component.less",\n    "widget-types/table/table-widget-selectable/table-widget-selectable-radio/table-widget-selectable-radio.example.component.ts",\n    "widget-types/table/table-widget-selectable/table-widget-selectable-single/table-widget-selectable-single.example.component.html",\n    "widget-types/table/table-widget-selectable/table-widget-selectable-single/table-widget-selectable-single.example.component.less",\n    "widget-types/table/table-widget-selectable/table-widget-selectable-single/table-widget-selectable-single.example.component.ts",\n    "widget-types/table/table-widget-selectable/table-widget-selectable.example.component.html",\n    "widget-types/table/table-widget-selectable/table-widget-selectable.example.component.less",\n    "widget-types/table/table-widget-selectable/table-widget-selectable.example.component.ts",\n    "widget-types/timeseries/timeseries-docs.component.html",\n    "widget-types/timeseries/timeseries-docs.component.ts",\n    "widget-types/timeseries/timeseries-docs.module.ts",\n    "widget-types/timeseries/timeseries-widget-example/timeseries-widget-example.component.html",\n    "widget-types/timeseries/timeseries-widget-example/timeseries-widget-example.component.less",\n    "widget-types/timeseries/timeseries-widget-example/timeseries-widget-example.component.ts",\n    "widget-types/timeseries/timeseries-widget-interactive-example/timeseries-widget-interactive-example.component.html",\n    "widget-types/timeseries/timeseries-widget-interactive-example/timeseries-widget-interactive-example.component.less",\n    "widget-types/timeseries/timeseries-widget-interactive-example/timeseries-widget-interactive-example.component.ts",\n    "widget-types/timeseries/timeseries-widget-status-bar-example/timeseries-widget-status-bar-example.component.html",\n    "widget-types/timeseries/timeseries-widget-status-bar-example/timeseries-widget-status-bar-example.component.less",\n    "widget-types/timeseries/timeseries-widget-status-bar-example/timeseries-widget-status-bar-example.component.ts",\n    "widget-types/widget-types.module.ts",\n];\n'},15152:(o,e,n)=>{"use strict";n.r(e),n.d(e,{default:()=>t});const t='<div class="w-100 dashboard">\n    <nui-dashboard\n        nuiWidgetEditor\n        [editMode]="editMode"\n        [(dashboard)]="dashboard"\n        [(gridsterConfig)]="gridsterConfig"\n    ></nui-dashboard>\n</div>\n\n<div class="mt-3 mr-2 d-flex align-items-center justify-content-end">\n    <nui-switch [(value)]="editMode"> Edit Mode </nui-switch>\n</div>\n'},44968:(o,e,n)=>{"use strict";n.r(e),n.d(e,{default:()=>t});const t=".dashboard {\n    height: 841px;\n}\n"},61680:(o,e,n)=>{"use strict";n.r(e),n.d(e,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport { HttpClient } from "@angular/common/http";\nimport {\n    ChangeDetectionStrategy,\n    Component,\n    OnInit,\n    ViewEncapsulation,\n} from "@angular/core";\nimport keyBy from "lodash/keyBy";\n\nimport { LoggerService, ThemeSwitchService } from "@nova-ui/bits";\nimport {\n    DATA_SOURCE,\n    IDashboard,\n    IWidget,\n    ProviderRegistryService,\n    WidgetTypesService,\n} from "@nova-ui/dashboards";\n\nimport {\n    HarryPotterAverageRatingDataSource,\n    HarryPotterRatingsCountDataSource,\n} from "../data/kpi-datasources";\nimport {\n    BeerReviewCountsByCityMockDataSource,\n    BeerReviewCountsByCityMockDataSource2,\n} from "../data/proportional-datasources";\nimport { BeerDataSource } from "../data/table/beer-data-source";\nimport { RandomUserDataSource } from "../data/table/random-user-data-source";\nimport {\n    BeerVsReadingMockDataSource,\n    LoungingVsFrisbeeGolfMockDataSource,\n} from "../data/timeseries-data-sources";\nimport { positions, widgets } from "./widget-configs";\n\n/**\n * A component that instantiates the dashboard\n */\n@Component({\n    selector: "hero-dashboard",\n    templateUrl: "./hero-dashboard.component.html",\n    styleUrls: ["./hero-dashboard.component.less"],\n    encapsulation: ViewEncapsulation.Emulated,\n    changeDetection: ChangeDetectionStrategy.Default,\n})\nexport class HeroDashboardComponent implements OnInit {\n    public dashboard: IDashboard = {\n        positions: {},\n        widgets: {},\n    };\n\n    public gridsterConfig = {};\n    public editMode = false;\n\n    constructor(\n        private providerRegistry: ProviderRegistryService,\n        public themeSwitcherService: ThemeSwitchService,\n        private widgetTypesService: WidgetTypesService\n    ) {\n        this.providerRegistry.setProviders({\n            [HarryPotterAverageRatingDataSource.providerId]: {\n                provide: DATA_SOURCE,\n                useClass: HarryPotterAverageRatingDataSource,\n                deps: [HttpClient],\n            },\n            [HarryPotterRatingsCountDataSource.providerId]: {\n                provide: DATA_SOURCE,\n                useClass: HarryPotterRatingsCountDataSource,\n                deps: [HttpClient],\n            },\n            [BeerReviewCountsByCityMockDataSource.providerId]: {\n                provide: DATA_SOURCE,\n                useClass: BeerReviewCountsByCityMockDataSource,\n                deps: [],\n            },\n            [BeerReviewCountsByCityMockDataSource2.providerId]: {\n                provide: DATA_SOURCE,\n                useClass: BeerReviewCountsByCityMockDataSource2,\n                deps: [],\n            },\n            [RandomUserDataSource.providerId]: {\n                provide: DATA_SOURCE,\n                useClass: RandomUserDataSource,\n                deps: [LoggerService],\n            },\n            [BeerDataSource.providerId]: {\n                provide: DATA_SOURCE,\n                useClass: BeerDataSource,\n                deps: [LoggerService],\n            },\n            [BeerVsReadingMockDataSource.providerId]: {\n                provide: DATA_SOURCE,\n                useClass: BeerVsReadingMockDataSource,\n                deps: [],\n            },\n            [LoungingVsFrisbeeGolfMockDataSource.providerId]: {\n                provide: DATA_SOURCE,\n                useClass: LoungingVsFrisbeeGolfMockDataSource,\n                deps: [],\n            },\n        });\n    }\n\n    public ngOnInit(): void {\n        const widgetsWithStructure = widgets.map((w) => ({\n            ...w,\n            pizzagna: {\n                ...this.widgetTypesService.getWidgetType(w.type, w.version)\n                    .widget,\n                ...w.pizzagna,\n            },\n        }));\n        const widgetsIndex = keyBy(widgetsWithStructure, (w: IWidget) => w.id);\n\n        this.dashboard = {\n            positions: positions,\n            widgets: widgetsIndex,\n        };\n    }\n}\n'},35894:(o,e,n)=>{"use strict";n.r(e),n.d(e,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport { GridsterItem } from "angular-gridster2";\n\nimport { IWidget } from "@nova-ui/dashboards";\n\nimport { kpiConfig } from "../widget-configs/kpi";\nimport { proportionalConfig } from "../widget-configs/proportional";\nimport { tableConfig } from "../widget-configs/table";\nimport { timeseriesConfig } from "../widget-configs/timeseries";\n\nexport const positions: Record<string, GridsterItem> = {\n    [tableConfig.id]: {\n        cols: 7,\n        rows: 7,\n        y: 0,\n        x: 0,\n    },\n    [proportionalConfig.id]: {\n        cols: 5,\n        rows: 7,\n        y: 0,\n        x: 7,\n    },\n    [kpiConfig.id]: {\n        cols: 6,\n        rows: 7,\n        y: 7,\n        x: 0,\n    },\n    [timeseriesConfig.id]: {\n        cols: 6,\n        rows: 7,\n        y: 7,\n        x: 6,\n    },\n};\n\nexport const widgets: IWidget[] = [\n    {\n        ...tableConfig,\n    },\n    {\n        ...proportionalConfig,\n    },\n    {\n        ...kpiConfig,\n    },\n    {\n        ...timeseriesConfig,\n    },\n];\n'},62439:(o,e,n)=>{"use strict";n.r(e),n.d(e,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport { HttpClient, HttpErrorResponse } from "@angular/common/http";\nimport { Injectable, OnDestroy } from "@angular/core";\nimport { BehaviorSubject } from "rxjs";\nimport { finalize } from "rxjs/operators";\n\nimport { DataSourceService, IFilteringOutputs } from "@nova-ui/bits";\nimport { IKpiData } from "@nova-ui/dashboards";\n\nimport { GOOGLE_BOOKS_URL } from "./table/constants";\n\n@Injectable()\nexport class HarryPotterAverageRatingDataSource\n    extends DataSourceService<IKpiData>\n    implements OnDestroy\n{\n    public static providerId = "HarryPotterAverageRatingDataSource";\n\n    public busy = new BehaviorSubject<boolean>(false);\n\n    constructor(private http: HttpClient) {\n        super();\n    }\n\n    public async getFilteredData(): Promise<IFilteringOutputs> {\n        this.busy.next(true);\n        return new Promise((resolve) => {\n            // *** Make a resource request to an external API (if needed)\n            this.http\n                .get(`${GOOGLE_BOOKS_URL}/5MQFrgEACAAJ`)\n                .pipe(finalize(() => this.busy.next(false)))\n                .subscribe({\n                    next: (data: any) => {\n                        resolve({\n                            result: {\n                                value: data.volumeInfo.averageRating,\n                            },\n                        });\n                    },\n                    error: (error: HttpErrorResponse) => {\n                        resolve({\n                            result: null,\n                            error: {\n                                type: error.status,\n                            },\n                        });\n                    },\n                });\n        });\n    }\n\n    public ngOnDestroy(): void {\n        this.outputsSubject.complete();\n    }\n}\n\n@Injectable()\nexport class HarryPotterRatingsCountDataSource\n    extends DataSourceService<IKpiData>\n    implements OnDestroy\n{\n    public static providerId = "HarryPotterRatingsCountDataSource";\n\n    public busy = new BehaviorSubject<boolean>(false);\n\n    constructor(private http: HttpClient) {\n        super();\n    }\n\n    public async getFilteredData(): Promise<IFilteringOutputs> {\n        this.busy.next(true);\n        return new Promise((resolve) => {\n            this.http\n                .get(`${GOOGLE_BOOKS_URL}/5MQFrgEACAAJ`)\n                .pipe(finalize(() => this.busy.next(false)))\n                .subscribe({\n                    next: (data: any) => {\n                        resolve({\n                            result: {\n                                value: data.volumeInfo.ratingsCount,\n                            },\n                        });\n                    },\n                    error: (error: HttpErrorResponse) => {\n                        resolve({\n                            result: null,\n                            error: {\n                                type: error.status,\n                            },\n                        });\n                    },\n                });\n        });\n    }\n\n    public ngOnDestroy(): void {\n        this.outputsSubject.complete();\n    }\n}\n'},88892:(o,e,n)=>{"use strict";n.r(e),n.d(e,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport { Injectable, OnDestroy } from "@angular/core";\nimport { BehaviorSubject } from "rxjs";\n\nimport {\n    DataSourceService,\n    IDataSource,\n    IFilteringOutputs,\n} from "@nova-ui/bits";\n\nimport {\n    getMockBeerReviewCountsByCity,\n    getMockBeerReviewCountsByCity2,\n    IProportionalWidgetData,\n} from "./widget-data";\n\n@Injectable()\nexport class BeerReviewCountsByCityMockDataSource\n    extends DataSourceService<IProportionalWidgetData>\n    implements IDataSource<IProportionalWidgetData>, OnDestroy\n{\n    // This is the ID we\'ll use to identify the provider\n    public static providerId = "BeerReviewCountsByCityMockDataSource";\n    public busy = new BehaviorSubject(false);\n\n    public async getFilteredData(): Promise<IFilteringOutputs> {\n        this.busy.next(true);\n        return new Promise((resolve) => {\n            setTimeout(() => {\n                this.outputsSubject.next({\n                    result: getMockBeerReviewCountsByCity(),\n                });\n                this.busy.next(false);\n            }, 300);\n        });\n    }\n\n    public ngOnDestroy(): void {\n        this.outputsSubject.complete();\n    }\n}\n\n@Injectable()\nexport class BeerReviewCountsByCityMockDataSource2\n    extends DataSourceService<IProportionalWidgetData>\n    implements IDataSource<IProportionalWidgetData>, OnDestroy\n{\n    // This is the ID we\'ll use to identify the provider\n    public static providerId = "BeerReviewCountsByCityMockDataSource2";\n    public busy = new BehaviorSubject(false);\n\n    public async getFilteredData(): Promise<IFilteringOutputs> {\n        this.busy.next(true);\n        return new Promise((resolve) => {\n            setTimeout(() => {\n                this.outputsSubject.next({\n                    result: getMockBeerReviewCountsByCity2(),\n                });\n                this.busy.next(false);\n            }, 1500);\n        });\n    }\n\n    public ngOnDestroy(): void {\n        this.outputsSubject.complete();\n    }\n}\n'},96472:(o,e,n)=>{"use strict";n.r(e),n.d(e,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport { ListRange } from "@angular/cdk/collections";\nimport { Injectable } from "@angular/core";\nimport isEqual from "lodash/isEqual";\nimport orderBy from "lodash/orderBy";\nimport { BehaviorSubject } from "rxjs";\n\nimport {\n    DataSourceService,\n    IDataField,\n    INovaFilteringOutputs,\n    INovaFilters,\n    ISorterFilter,\n    LoggerService,\n} from "@nova-ui/bits";\n\nimport { IBrewDatasourceResponse, IBrewInfo } from "../types";\nimport { BREW_API_URL } from "./constants";\n\n@Injectable()\nexport class BeerDataSource extends DataSourceService<IBrewInfo> {\n    public static providerId = "BeerDataSource";\n\n    private cache = Array.from<IBrewInfo>({ length: 0 });\n    private lastSortValue?: ISorterFilter;\n    private lastVirtualScroll?: ListRange;\n    private totalItems: number = 325;\n\n    public page: number = 1;\n    public busy = new BehaviorSubject(false);\n\n    public dataFields: Array<IDataField> = [\n        { id: "id", label: "No", dataType: "number" },\n        { id: "name", label: "Name", dataType: "string" },\n        { id: "tagline", label: "Tagline", dataType: "string" },\n        { id: "first_brewed", label: "First Brewed", dataType: "string" },\n        { id: "description", label: "Description", dataType: "string" },\n        { id: "brewers_tips", label: "Brewer\'s Tips", dataType: "string" },\n    ];\n\n    constructor(private logger: LoggerService) {\n        super();\n    }\n\n    public async getFilteredData(\n        filters: INovaFilters\n    ): Promise<INovaFilteringOutputs> {\n        const start = filters.virtualScroll?.value?.start ?? 0;\n        const end = filters.virtualScroll?.value?.end ?? 0;\n        const delta = end - start;\n\n        // This condition handles sorting. We want to sort columns without fetching another chunk of data.\n        // Since the data is being fetched when scrolled, we compare virtual scroll indexes here in the condition as well.\n        if (filters.sorter?.value) {\n            if (\n                !isEqual(this.lastSortValue, filters.sorter.value) &&\n                isEqual(this.lastVirtualScroll, filters.virtualScroll?.value)\n            ) {\n                const totalPages = Math.ceil(\n                    delta ? this.totalItems / delta : 1\n                );\n                const itemsPerPage: number = Math.max(\n                    delta < 80 ? delta : 80,\n                    1\n                );\n                let response: Array<IBrewInfo> | null = null;\n                let map: IBrewDatasourceResponse;\n\n                if (filters.sorter?.value?.direction === "desc") {\n                    this.cache = [];\n                    for (let i = 0; i < this.page; ++i) {\n                        response = await (\n                            await fetch(\n                                `${BREW_API_URL}/?page=${\n                                    totalPages - i || 1\n                                }&per_page=${itemsPerPage}`\n                            )\n                        ).json();\n\n                        // since the last page contains only 5 items we need to fetch another page to give virtual scroll enough space to work\n                        if (response && response.length < itemsPerPage) {\n                            this.page++;\n                        }\n                        map = {\n                            brewInfo: response?.map((result: IBrewInfo) => ({\n                                id: result.id,\n                                name: result.name,\n                                tagline: result.tagline,\n                                first_brewed: result.first_brewed,\n                                description: result.description,\n                                brewers_tips: result.brewers_tips,\n                            })),\n                            total: response?.length,\n                        } as IBrewDatasourceResponse;\n                        this.cache =\n                            totalPages - i !== 0\n                                ? this.cache.concat(map.brewInfo)\n                                : this.cache;\n                    }\n                }\n\n                if (filters.sorter?.value?.direction === "asc") {\n                    this.cache = [];\n                    for (let i = 0; i < this.page; i++) {\n                        response = await (\n                            await fetch(\n                                `${BREW_API_URL}/?page=${\n                                    i + 1\n                                }&per_page=${itemsPerPage}`\n                            )\n                        ).json();\n                        map = {\n                            brewInfo: response?.map((result: IBrewInfo) => ({\n                                id: result.id,\n                                name: result.name,\n                                tagline: result.tagline,\n                                first_brewed: result.first_brewed,\n                                description: result.description,\n                                brewers_tips: result.brewers_tips,\n                            })),\n                            total: response?.length,\n                        } as IBrewDatasourceResponse;\n                        this.cache = this.cache.concat(map.brewInfo);\n                    }\n                }\n\n                this.lastSortValue = filters.sorter?.value;\n                this.lastVirtualScroll = filters.virtualScroll?.value;\n\n                return {\n                    repeat: { itemsSource: this.sortData(this.cache, filters) },\n                    paginator: { total: this.totalItems },\n                    dataFields: this.dataFields,\n                };\n            }\n        }\n\n        this.busy.next(true);\n        return new Promise((resolve) => {\n            setTimeout(() => {\n                this.getData(start, end, filters).then(\n                    (response: INovaFilteringOutputs) => {\n                        if (!response) {\n                            return;\n                        }\n\n                        this.cache = this.cache.concat(response.brewInfo);\n\n                        this.dataSubject.next(this.cache);\n                        resolve({\n                            repeat: {\n                                itemsSource: this.sortData(this.cache, filters),\n                            },\n                            paginator: { total: this.totalItems },\n                            dataFields: this.dataFields,\n                        });\n\n                        this.lastSortValue = filters.sorter?.value;\n                        this.lastVirtualScroll = filters.virtualScroll?.value;\n                        this.busy.next(false);\n                    }\n                );\n            }, 500);\n        });\n    }\n\n    public async getData(\n        start: number = 0,\n        end: number = 20,\n        filters: INovaFilters\n    ): Promise<INovaFilteringOutputs> {\n        const delta = end - start;\n        const totalPages = Math.ceil(delta ? this.totalItems / delta : 1);\n        let response: Array<IBrewInfo> | null = null;\n        // The api.punk.com is able to return only 80 items per page\n        const itemsPerPage: number = Math.max(delta < 80 ? delta : 80, 1);\n\n        if (filters.sorter?.value?.direction === "asc") {\n            response = await (\n                await fetch(\n                    `${BREW_API_URL}/?page=${this.page}&per_page=${itemsPerPage}`\n                )\n            ).json();\n        }\n\n        if (filters.sorter?.value?.direction === "desc") {\n            response = await (\n                await fetch(\n                    `${BREW_API_URL}/?page=${\n                        totalPages - this.page\n                    }&per_page=${itemsPerPage}`\n                )\n            ).json();\n        }\n\n        if (!filters.sorter) {\n            response = await (\n                await fetch(\n                    `${BREW_API_URL}/?page=${this.page}&per_page=${itemsPerPage}`\n                )\n            ).json();\n        }\n        return {\n            brewInfo: response?.map((result: IBrewInfo, i: number) => ({\n                id: result.id,\n                name: result.name,\n                tagline: result.tagline,\n                first_brewed: result.first_brewed,\n                description: result.description,\n                brewers_tips: result.brewers_tips,\n            })),\n            total: response?.length,\n        } as IBrewDatasourceResponse;\n    }\n\n    private sortData(data: IBrewInfo[], filters: INovaFilters) {\n        return orderBy(\n            data,\n            filters.sorter?.value?.sortBy,\n            filters.sorter?.value?.direction as "desc" | "asc"\n        );\n    }\n}\n'},73184:(o,e,n)=>{"use strict";n.r(e),n.d(e,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nexport const corsProxy = "https://cors-anywhere.herokuapp.com";\nexport const RANDOMUSER_API_URL = "https://randomuser.me";\nexport const BREW_API_URL = "https://api.punkapi.com/v2/beers";\nexport const GOOGLE_BOOKS_URL = "https://www.googleapis.com/books/v1/volumes";\nexport const apiRoute = "api/1.3";\nexport const responseError = `Error responding from server. Please visit ${RANDOMUSER_API_URL} and ${corsProxy} to see if they\'re available`;\n'},32427:(o,e,n)=>{"use strict";n.r(e),n.d(e,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport { ListRange } from "@angular/cdk/collections";\nimport { Injectable } from "@angular/core";\nimport isEqual from "lodash/isEqual";\nimport orderBy from "lodash/orderBy";\nimport { BehaviorSubject } from "rxjs";\n\nimport {\n    DataSourceService,\n    IDataField,\n    INovaFilteringOutputs,\n    INovaFilters,\n    ISorterFilter,\n    LoggerService,\n} from "@nova-ui/bits";\n\nimport {\n    IRandomUserResponse,\n    IRandomUserResults,\n    IRandomUserTableModel,\n    UsersQueryResponse,\n} from "../types";\nimport {\n    apiRoute,\n    corsProxy,\n    RANDOMUSER_API_URL,\n    responseError,\n} from "./constants";\n\n@Injectable()\nexport class RandomUserDataSource extends DataSourceService<IRandomUserTableModel> {\n    public static providerId = "RandomUserDataSource";\n\n    private readonly seed = "sw";\n\n    private cache = Array.from<IRandomUserTableModel>({ length: 0 });\n    private lastSortValue?: ISorterFilter;\n    private lastVirtualScroll?: ListRange;\n\n    public page: number = 1;\n    public busy = new BehaviorSubject(false);\n\n    public dataFields: Array<IDataField> = [\n        { id: "no", label: $localize`No`, dataType: "number" },\n        { id: "nameTitle", label: $localize`Title`, dataType: "string" },\n        { id: "nameFirst", label: $localize`First`, dataType: "string" },\n        { id: "nameLast", label: $localize`Last`, dataType: "string" },\n        { id: "gender", label: $localize`Gender`, dataType: "string" },\n        { id: "country", label: $localize`Country`, dataType: "string" },\n        { id: "city", label: $localize`City`, dataType: "string" },\n        { id: "postcode", label: $localize`Postcode`, dataType: "number" },\n        { id: "email", label: $localize`E-Mail`, dataType: "string" },\n        { id: "cell", label: $localize`Cell`, dataType: "string" },\n    ];\n\n    constructor(private logger: LoggerService) {\n        super();\n    }\n\n    public async getFilteredData(\n        filters: INovaFilters\n    ): Promise<INovaFilteringOutputs> {\n        // This condition handles sorting. We want to sort columns without fetching another chunk of data.\n        // Since the data is being fetched when scrolled, we compare virtual scroll indexes here in the condition as well.\n        if (filters.sorter?.value) {\n            if (\n                !isEqual(this.lastSortValue, filters.sorter.value) &&\n                isEqual(this.lastVirtualScroll, filters.virtualScroll?.value)\n            ) {\n                this.lastSortValue = filters.sorter?.value;\n                this.lastVirtualScroll = filters.virtualScroll?.value;\n\n                return {\n                    repeat: { itemsSource: this.sortData(this.cache, filters) },\n                    paginator: { total: 200 },\n                    dataFields: this.dataFields,\n                };\n            }\n        }\n        this.busy.next(true);\n\n        const virtualScrollFilter =\n            filters.virtualScroll && filters.virtualScroll.value;\n        const start = virtualScrollFilter\n            ? filters.virtualScroll?.value.start\n            : 0;\n        const end = virtualScrollFilter ? filters.virtualScroll?.value.end : 0;\n\n        // We\'re returning Promise with setTimeout here to make the response from the server longer, as the API being used sends responses\n        // almost immediately. We need it longer to be able the show the spinner component on data load\n        return new Promise((resolve) => {\n            setTimeout(() => {\n                this.getData(start, end).then(\n                    (response: INovaFilteringOutputs | undefined) => {\n                        if (!response) {\n                            return;\n                        }\n\n                        this.cache = this.cache.concat(response.users);\n\n                        this.dataSubject.next(this.cache);\n                        resolve({\n                            repeat: {\n                                itemsSource: this.sortData(this.cache, filters),\n                            },\n                            // This API can return thousands of results, however doesn\'t return the max number of results,\n                            // so we set the max number of result manually here.\n                            paginator: { total: 200 },\n                            dataFields: this.dataFields,\n                        });\n\n                        this.lastSortValue = filters.sorter?.value;\n                        this.lastVirtualScroll = filters.virtualScroll?.value;\n                        this.busy.next(false);\n                    }\n                );\n            }, 300);\n        });\n    }\n\n    public async getData(\n        start: number = 0,\n        end: number = 20\n    ): Promise<INovaFilteringOutputs | undefined> {\n        let response: IRandomUserResponse | null = null;\n        try {\n            response = await (\n                await fetch(\n                    `${corsProxy}/${RANDOMUSER_API_URL}/${apiRoute}/?page=${\n                        this.page\n                    }&results=${end - start}&seed=${this.seed}`\n                )\n            ).json();\n            return {\n                users: response?.results.map(\n                    (result: IRandomUserResults, i: number) => ({\n                        no: this.cache.length + i + 1,\n                        nameTitle: result.name.title,\n                        nameFirst: result.name.first,\n                        nameLast: result.name.last,\n                        gender: result.gender,\n                        country: result.location.country,\n                        city: result.location.city,\n                        postcode: result.location.postcode,\n                        email: result.email,\n                        cell: result.cell,\n                    })\n                ),\n                total: response?.results.length,\n                start: start,\n            } as UsersQueryResponse;\n        } catch (e) {\n            this.logger.error(responseError);\n        }\n    }\n\n    private sortData(data: IRandomUserTableModel[], filters: INovaFilters) {\n        return orderBy(\n            data,\n            filters.sorter?.value?.sortBy,\n            filters.sorter?.value?.direction as "desc" | "asc"\n        );\n    }\n}\n'},93028:(o,e,n)=>{"use strict";n.r(e),n.d(e,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport { IDataField, INovaFilteringOutputs } from "@nova-ui/bits";\nexport interface BasicTableModel {\n    position: number;\n    name: string;\n    features: any;\n    status: string;\n    checks: any;\n    "cpu-load": number;\n    firstUrl: string;\n    firstUrlLabel: string;\n    secondUrl: string;\n    secondUrlLabel: string;\n}\n\nexport interface ITableDataSourceOutput extends INovaFilteringOutputs {\n    dataFields: IDataField[];\n}\n'},42914:(o,e,n)=>{"use strict";n.r(e),n.d(e,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport { Injectable } from "@angular/core";\nimport { Moment } from "moment/moment";\nimport { BehaviorSubject } from "rxjs";\n\nimport { DataSourceService, IDataSource, INovaFilters } from "@nova-ui/bits";\nimport {\n    ITimeseriesOutput,\n    ITimeseriesWidgetData,\n    ITimeseriesWidgetSeriesData,\n} from "@nova-ui/dashboards";\n\nimport {\n    BEER_VS_READING_DATA,\n    LOUNGING_VS_ULTIMATE_FRISBEE_DATA,\n} from "./widget-data";\n\n@Injectable()\nexport class BeerVsReadingMockDataSource\n    extends DataSourceService<ITimeseriesWidgetData>\n    implements IDataSource<ITimeseriesOutput>\n{\n    public static providerId = "BeerVsReadingMockDataSource";\n\n    public busy = new BehaviorSubject(false);\n\n    constructor() {\n        super();\n    }\n\n    public async getFilteredData(\n        filters: INovaFilters\n    ): Promise<ITimeseriesOutput> {\n        this.busy.next(true);\n        const result = await delay(\n            { series: getData(filters, BEER_VS_READING_DATA) },\n            1000\n        );\n        this.busy.next(false);\n        return result;\n    }\n}\n\n@Injectable()\nexport class LoungingVsFrisbeeGolfMockDataSource\n    extends DataSourceService<ITimeseriesWidgetData>\n    implements IDataSource<ITimeseriesOutput>\n{\n    public static providerId = "LoungingVsFrisbeeGolfMockDataSource";\n\n    public busy = new BehaviorSubject(false);\n\n    constructor() {\n        super();\n    }\n\n    public async getFilteredData(\n        filters: INovaFilters\n    ): Promise<ITimeseriesOutput> {\n        this.busy.next(true);\n        const result = await delay(\n            { series: getData(filters, LOUNGING_VS_ULTIMATE_FRISBEE_DATA) },\n            1000\n        );\n        this.busy.next(false);\n        return result;\n    }\n}\n\nfunction getData(\n    filters: INovaFilters,\n    data: ITimeseriesWidgetData[]\n): ITimeseriesWidgetData[] {\n    const timeframeFilter = filters.timeframe;\n    let filteredData = data;\n    // TIME FRAME PICKER FILTERING\n    if (timeframeFilter) {\n        filteredData = filteredData.map((item: ITimeseriesWidgetData) => ({\n            id: item.id,\n            name: item.name,\n            description: item.description,\n            data: item.data.filter((seriesData: ITimeseriesWidgetSeriesData) =>\n                filterDates(\n                    seriesData.x,\n                    timeframeFilter.value.startDatetime,\n                    timeframeFilter.value.endDatetime\n                )\n            ),\n        }));\n    }\n\n    return filteredData;\n}\n\nfunction filterDates(dateToCheck: Moment, startDate: Moment, endDate: Moment) {\n    return (\n        dateToCheck.isBetween(startDate, endDate) ||\n        dateToCheck.isSame(startDate) ||\n        dateToCheck.isSame(endDate)\n    );\n}\n\nasync function delay(\n    value: ITimeseriesOutput,\n    ms: number\n): Promise<ITimeseriesOutput> {\n    return new Promise((resolve) => setTimeout(() => resolve(value), ms));\n}\n'},68831:(o,e,n)=>{"use strict";n.r(e),n.d(e,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nexport interface UsersQueryResponse {\n    users: IRandomUserTableModel[];\n    total: number;\n    start: number;\n}\n\nexport interface IRandomUserResponse {\n    info: Array<IRandomUserInfo>;\n    results: Array<IRandomUserResults>;\n}\n\nexport interface IRandomUserInfo {\n    page: number;\n    results: number;\n    seed: string;\n    version: string;\n}\n\nexport interface IRandomUserResults {\n    cell: string;\n    dob: {\n        age: number;\n        date: string;\n    };\n    email: string;\n    gender: string;\n    id: any;\n    location: IRandomUserLocation;\n    login: {\n        md5: string;\n        password: string;\n        salt: string;\n        sha1: string;\n        sha256: string;\n        username: string;\n        uuid: string;\n    };\n    name: {\n        title: string;\n        first: string;\n        last: string;\n    };\n    nat: string;\n    phone: string;\n    picture: {\n        large: string;\n        medium: string;\n        thumbnail: string;\n    };\n    registered: {\n        date: string;\n        age: number;\n    };\n}\n\nexport interface IRandomUserTableModel {\n    no: number;\n    nameTitle: string;\n    nameFirst: string;\n    nameLast: string;\n    gender: string;\n    country: string;\n    city: string;\n    postcode: number;\n    email: string;\n    cell: string;\n}\n\nexport interface IRandomUserLocation {\n    city: string;\n    coordinates: { latitude: string; longitude: string };\n    country: string;\n    postcode: number;\n    state: string;\n    street: { number: number; name: string };\n    timezone: any;\n}\n\nexport interface IBrewInfo {\n    id: number;\n    name: string;\n    tagline: string;\n    first_brewed: string;\n    description: string;\n    brewers_tips: string;\n}\n\nexport interface IBrewDatasourceResponse {\n    brewInfo: IBrewInfo[];\n    total: number;\n}\n'},60845:(o,e,n)=>{"use strict";n.r(e),n.d(e,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport moment from "moment/moment";\n\nimport { ITimeseriesWidgetData } from "@nova-ui/dashboards";\n\nimport { BasicTableModel } from "./table/types";\n\nexport interface IProportionalWidgetData {\n    id: string;\n    name: string;\n    data: number[];\n    link: string;\n    value: string;\n}\n\nexport function getMockBeerReviewCountsByCity(): IProportionalWidgetData[] {\n    return [\n        {\n            id: "Brno",\n            name: "Brno",\n            data: [Math.round(Math.random() * 100000)],\n            link: "https://en.wikipedia.org/wiki/Brno",\n            value: "Brno",\n        },\n        {\n            id: "kyiv",\n            name: "Kyiv",\n            data: [Math.round(Math.random() * 100000)],\n            link: "https://en.wikipedia.org/wiki/Kyiv",\n            value: "Kyiv",\n        },\n        {\n            id: "austin",\n            name: "Austin",\n            data: [Math.round(Math.random() * 100000)],\n            link: "https://en.wikipedia.org/wiki/Austin",\n            value: "Austin",\n        },\n        {\n            id: "lisbon",\n            name: "Lisbon",\n            data: [Math.round(Math.random() * 100000)],\n            link: "https://en.wikipedia.org/wiki/Lisbon",\n            value: "Lisbon",\n        },\n        {\n            id: "sydney",\n            name: "Sydney",\n            data: [Math.round(Math.random() * 100000)],\n            link: "https://en.wikipedia.org/wiki/Sydney",\n            value: "Sydney",\n        },\n        {\n            id: "nur-sultan",\n            name: "Nur-Sultan",\n            data: [Math.round(Math.random() * 100000)],\n            link: "https://en.wikipedia.org/wiki/Nur-Sultan",\n            value: "Nur-Sultan",\n        },\n    ].sort((a, b) => a.data[0] - b.data[0]);\n}\n\nexport function getMockBeerReviewCountsByCity2(): IProportionalWidgetData[] {\n    return [\n        {\n            id: "london",\n            name: "London",\n            data: [Math.round(Math.random() * 100000)],\n            link: "https://en.wikipedia.org/wiki/London",\n            value: "London",\n        },\n        {\n            id: "paris",\n            name: "Paris",\n            data: [Math.round(Math.random() * 100000)],\n            link: "https://en.wikipedia.org/wiki/Paris",\n            value: "Paris",\n        },\n        {\n            id: "rio",\n            name: "Rio",\n            data: [Math.round(Math.random() * 100000)],\n            link: "https://en.wikipedia.org/wiki/Rio_de_Janeiro",\n            value: "Rio",\n        },\n    ].sort((a, b) => a.data[0] - b.data[0]);\n}\n\nexport const BEER_VS_READING_DATA: ITimeseriesWidgetData[] = [\n    {\n        id: "series-1",\n        name: "Beer Tasting",\n        description: "Havin\' some suds",\n        data: [\n            { x: moment().subtract(10, "day"), y: 30 },\n            { x: moment().subtract(9, "day"), y: 35 },\n            { x: moment().subtract(8, "day"), y: 33 },\n            { x: moment().subtract(7, "day"), y: 40 },\n            { x: moment().subtract(6, "day"), y: 35 },\n            { x: moment().subtract(5, "day"), y: 30 },\n            { x: moment().subtract(4, "day"), y: 35 },\n            { x: moment().subtract(3, "day"), y: 15 },\n            { x: moment().subtract(2, "day"), y: 30 },\n            { x: moment().subtract(1, "day"), y: 35 },\n            { x: moment().subtract(24, "hour"), y: 34 },\n            { x: moment().subtract(15, "hour"), y: 33 },\n            { x: moment().subtract(10, "hour"), y: 35 },\n            { x: moment().subtract(5, "hour"), y: 36 },\n            { x: moment().subtract(1, "hour"), y: 34 },\n            { x: moment().subtract(50, "minute"), y: 33 },\n            { x: moment().subtract(40, "minute"), y: 30 },\n            { x: moment().subtract(30, "minute"), y: 32 },\n            { x: moment().subtract(20, "minute"), y: 31 },\n            { x: moment().subtract(10, "minute"), y: 34 },\n        ],\n    },\n    {\n        id: "series-2",\n        name: "Reading",\n        description: "Hittin\' the books",\n        data: [\n            { x: moment().subtract(10, "day"), y: 60 },\n            { x: moment().subtract(9, "day"), y: 64 },\n            { x: moment().subtract(8, "day"), y: 70 },\n            { x: moment().subtract(7, "day"), y: 55 },\n            { x: moment().subtract(6, "day"), y: 55 },\n            { x: moment().subtract(5, "day"), y: 45 },\n            { x: moment().subtract(4, "day"), y: 10 },\n            { x: moment().subtract(3, "day"), y: 65 },\n            { x: moment().subtract(2, "day"), y: 35 },\n            { x: moment().subtract(1, "day"), y: 60 },\n            { x: moment().subtract(24, "hour"), y: 61 },\n            { x: moment().subtract(15, "hour"), y: 65 },\n            { x: moment().subtract(10, "hour"), y: 63 },\n            { x: moment().subtract(5, "hour"), y: 58 },\n            { x: moment().subtract(1, "hour"), y: 64 },\n            { x: moment().subtract(50, "minute"), y: 63 },\n            { x: moment().subtract(40, "minute"), y: 60 },\n            { x: moment().subtract(30, "minute"), y: 62 },\n            { x: moment().subtract(20, "minute"), y: 61 },\n            { x: moment().subtract(10, "minute"), y: 62 },\n        ],\n    },\n];\n\nexport const LOUNGING_VS_ULTIMATE_FRISBEE_DATA: ITimeseriesWidgetData[] = [\n    {\n        id: "series-a",\n        name: "Lounging",\n        description: "Shootin\' the Breeze",\n        data: [\n            { x: moment().subtract(10, "day"), y: 10 },\n            { x: moment().subtract(9, "day"), y: 15 },\n            { x: moment().subtract(8, "day"), y: 13 },\n            { x: moment().subtract(7, "day"), y: 20 },\n            { x: moment().subtract(6, "day"), y: 15 },\n            { x: moment().subtract(5, "day"), y: 10 },\n            { x: moment().subtract(4, "day"), y: 15 },\n            { x: moment().subtract(3, "day"), y: 5 },\n            { x: moment().subtract(2, "day"), y: 10 },\n            { x: moment().subtract(1, "day"), y: 15 },\n            { x: moment().subtract(24, "hour"), y: 14 },\n            { x: moment().subtract(15, "hour"), y: 13 },\n            { x: moment().subtract(10, "hour"), y: 15 },\n            { x: moment().subtract(5, "hour"), y: 16 },\n            { x: moment().subtract(1, "hour"), y: 14 },\n            { x: moment().subtract(50, "minute"), y: 13 },\n            { x: moment().subtract(40, "minute"), y: 10 },\n            { x: moment().subtract(30, "minute"), y: 12 },\n            { x: moment().subtract(20, "minute"), y: 11 },\n            { x: moment().subtract(10, "minute"), y: 14 },\n        ],\n    },\n    {\n        id: "series-b",\n        name: "Frisbee Golfing",\n        description: "Golfin\' with a disc",\n        data: [\n            { x: moment().subtract(10, "day"), y: 80 },\n            { x: moment().subtract(9, "day"), y: 84 },\n            { x: moment().subtract(8, "day"), y: 80 },\n            { x: moment().subtract(7, "day"), y: 75 },\n            { x: moment().subtract(6, "day"), y: 95 },\n            { x: moment().subtract(5, "day"), y: 85 },\n            { x: moment().subtract(4, "day"), y: 80 },\n            { x: moment().subtract(3, "day"), y: 85 },\n            { x: moment().subtract(2, "day"), y: 85 },\n            { x: moment().subtract(1, "day"), y: 80 },\n            { x: moment().subtract(24, "hour"), y: 81 },\n            { x: moment().subtract(15, "hour"), y: 85 },\n            { x: moment().subtract(10, "hour"), y: 83 },\n            { x: moment().subtract(5, "hour"), y: 88 },\n            { x: moment().subtract(1, "hour"), y: 84 },\n            { x: moment().subtract(50, "minute"), y: 83 },\n            { x: moment().subtract(40, "minute"), y: 80 },\n            { x: moment().subtract(30, "minute"), y: 82 },\n            { x: moment().subtract(20, "minute"), y: 81 },\n            { x: moment().subtract(10, "minute"), y: 82 },\n        ],\n    },\n];\n\nexport const TABLE_DATA: BasicTableModel[] = [\n    {\n        position: 1,\n        name: "FOCUS-SVR-02258",\n        features: ["remote-access-vpn-tunnel", "patch-manager01"],\n        status: "Active",\n        checks: {\n            icon: "status_up",\n            num: 25,\n        },\n        "cpu-load": 86,\n        firstUrl: "https://en.wikipedia.org/wiki/Brno",\n        firstUrlLabel: "Brno",\n        secondUrl: "https://en.wikipedia.org/wiki/VMware_Workstation",\n        secondUrlLabel: "Workstation",\n    },\n    {\n        position: 2,\n        name: "FOCUS-SVR-03312",\n        features: ["tools", "database", "orion-ape-backup"],\n        status: "Active",\n        checks: {\n            icon: "status_critical",\n            num: 25,\n        },\n        "cpu-load": 47,\n        firstUrl: "https://en.wikipedia.org/wiki/Brno",\n        firstUrlLabel: "Brno",\n        secondUrl: "https://en.wikipedia.org/wiki/VMware_Workstation",\n        secondUrlLabel: "Workstation",\n    },\n    {\n        position: 3,\n        name: "FOCUS-SVR-02258",\n        features: [\n            "remote-access-vpn-tunnel",\n            "database",\n            "orion-ape-backup",\n            "patch-manager01",\n        ],\n        status: "Active",\n        checks: {\n            icon: "status_down",\n            num: 25,\n        },\n        "cpu-load": 53,\n        firstUrl: "https://en.wikipedia.org/wiki/Kyiv",\n        firstUrlLabel: "Kyiv",\n        secondUrl: "https://en.wikipedia.org/wiki/VMware_Workstation",\n        secondUrlLabel: "Workstation",\n    },\n    {\n        position: 4,\n        name: "Man-LT-JYJ4AD5",\n        features: [\n            "remote-access-vpn-tunnel",\n            "tools",\n            "database",\n            "orion-ape-backup",\n        ],\n        status: "Active",\n        checks: {\n            icon: "status_up",\n            num: 25,\n        },\n        "cpu-load": 32,\n        firstUrl: "https://en.wikipedia.org/wiki/Kyiv",\n        firstUrlLabel: "Kyiv",\n        secondUrl: "https://en.wikipedia.org/wiki/VirtualBox",\n        secondUrlLabel: "VirtualBox",\n    },\n    {\n        position: 5,\n        name: "Man-LT-JYJ425",\n        features: [\n            "remote-access-vpn-tunnel",\n            "tools",\n            "database",\n            "orion-ape-backup",\n        ],\n        status: "Active",\n        checks: {\n            icon: "status_up",\n            num: 25,\n        },\n        "cpu-load": 22,\n        firstUrl: "https://en.wikipedia.org/wiki/Kyiv",\n        firstUrlLabel: "Kyiv",\n        secondUrl: "https://en.wikipedia.org/wiki/VirtualBox",\n        secondUrlLabel: "VirtualBox",\n    },\n    {\n        position: 6,\n        name: "Man-LT-JYJ4333",\n        features: [\n            "remote-access-vpn-tunnel",\n            "tools",\n            "database",\n            "orion-ape-backup",\n        ],\n        status: "Active",\n        checks: {\n            icon: "status_up",\n            num: 25,\n        },\n        "cpu-load": 12,\n        firstUrl: "https://en.wikipedia.org/wiki/Kyiv",\n        firstUrlLabel: "Kyiv",\n        secondUrl: "https://en.wikipedia.org/wiki/VirtualBox",\n        secondUrlLabel: "VirtualBox",\n    },\n    {\n        position: 7,\n        name: "FOCUS-SVR-02258",\n        features: ["remote-access-vpn-tunnel", "patch-manager01"],\n        status: "Active",\n        checks: {\n            icon: "status_up",\n            num: 25,\n        },\n        "cpu-load": 86,\n        firstUrl: "https://en.wikipedia.org/wiki/Austin",\n        firstUrlLabel: "Austin",\n        secondUrl: "https://en.wikipedia.org/wiki/VMware_Workstation",\n        secondUrlLabel: "Workstation",\n    },\n    {\n        position: 8,\n        name: "Man-LT-JYJ4AD5",\n        features: [\n            "remote-access-vpn-tunnel",\n            "tools",\n            "database",\n            "orion-ape-backup",\n            "patch-manager01",\n        ],\n        status: "Active",\n        checks: {\n            icon: "status_inactive",\n            num: 25,\n        },\n        "cpu-load": 35,\n        firstUrl: "https://en.wikipedia.org/wiki/Austin",\n        firstUrlLabel: "Austin",\n        secondUrl: "https://en.wikipedia.org/wiki/VMware_Workstation",\n        secondUrlLabel: "Workstation",\n    },\n    {\n        position: 9,\n        name: "Man-LT-JYJ4AD5",\n        features: [\n            "remote-access-vpn-tunnel",\n            "tools",\n            "database",\n            "patch-manager01",\n        ],\n        status: "Active",\n        checks: {\n            icon: "status_up",\n            num: 25,\n        },\n        "cpu-load": 32,\n        firstUrl: "https://en.wikipedia.org/wiki/Brno",\n        firstUrlLabel: "Brno",\n        secondUrl: "https://en.wikipedia.org/wiki/VMware_Workstation",\n        secondUrlLabel: "Workstation",\n    },\n    {\n        position: 10,\n        name: "Man-LT-JYJ4AD5",\n        features: [\n            "remote-access-vpn-tunnel",\n            "database",\n            "orion-ape-backup",\n            "patch-manager01",\n        ],\n        status: "Active",\n        checks: {\n            icon: "status_up",\n            num: 25,\n        },\n        "cpu-load": 64,\n        firstUrl: "https://en.wikipedia.org/wiki/Kyiv",\n        firstUrlLabel: "Kyiv",\n        secondUrl: "https://en.wikipedia.org/wiki/VMware_Workstation",\n        secondUrlLabel: "Workstation",\n    },\n    {\n        position: 11,\n        name: "Man-LT-111",\n        features: [],\n        status: "Active",\n        checks: {\n            icon: "status_external",\n            num: 25,\n        },\n        "cpu-load": 55,\n        firstUrl: "https://en.wikipedia.org/wiki/Brno",\n        firstUrlLabel: "Brno",\n        secondUrl: "https://en.wikipedia.org/wiki/VMware_Workstation",\n        secondUrlLabel: "Workstation",\n    },\n    {\n        position: 12,\n        name: "Man-LT-2222",\n        features: [\n            "remote-access-vpn-tunnel",\n            "tools",\n            "database",\n            "orion-ape-backup",\n            "patch-manager01",\n        ],\n        status: "Active",\n        checks: {\n            icon: "status_inactive",\n            num: 25,\n        },\n        "cpu-load": 34,\n        firstUrl: "https://en.wikipedia.org/wiki/Brno",\n        firstUrlLabel: "Brno",\n        secondUrl: "https://en.wikipedia.org/wiki/VMware_Workstation",\n        secondUrlLabel: "Workstation",\n    },\n    {\n        position: 13,\n        name: "Man-LT-333333",\n        features: [\n            "remote-access-vpn-tunnel",\n            "tools",\n            "database",\n            "patch-manager01",\n        ],\n        status: "Active",\n        checks: {\n            icon: "status_up",\n            num: 25,\n        },\n        "cpu-load": 56,\n        firstUrl: "https://en.wikipedia.org/wiki/Kyiv",\n        firstUrlLabel: "Kyiv",\n        secondUrl: "https://en.wikipedia.org/wiki/VMware_Workstation",\n        secondUrlLabel: "Workstation",\n    },\n    {\n        position: 14,\n        name: "Man-LT-444444",\n        features: [\n            "remote-access-vpn-tunnel",\n            "database",\n            "orion-ape-backup",\n            "patch-manager01",\n        ],\n        status: "Active",\n        checks: {\n            icon: "status_up",\n            num: 25,\n        },\n        "cpu-load": 26,\n        firstUrl: "https://en.wikipedia.org/wiki/Kyiv",\n        firstUrlLabel: "Kyiv",\n        secondUrl: "https://en.wikipedia.org/wiki/VMware_Workstation",\n        secondUrlLabel: "Workstation",\n    },\n    {\n        position: 15,\n        name: "Man-LT-555555",\n        features: [\n            "remote-access-vpn-tunnel",\n            "database",\n            "orion-ape-backup",\n            "patch-manager01",\n        ],\n        status: "Active",\n        checks: {\n            icon: "status_up",\n            num: 25,\n        },\n        "cpu-load": 76,\n        firstUrl: "https://en.wikipedia.org/wiki/Austin",\n        firstUrlLabel: "Austin",\n        secondUrl: "https://en.wikipedia.org/wiki/VMware_Workstation",\n        secondUrlLabel: "Workstation",\n    },\n    {\n        position: 16,\n        name: "FOCUS-SVR-02258",\n        features: ["remote-access-vpn-tunnel", "patch-manager01"],\n        status: "Active",\n        checks: {\n            icon: "status_up",\n            num: 25,\n        },\n        "cpu-load": 86,\n        firstUrl: "https://en.wikipedia.org/wiki/Brno",\n        firstUrlLabel: "Brno",\n        secondUrl: "https://en.wikipedia.org/wiki/VMware_Workstation",\n        secondUrlLabel: "Workstation",\n    },\n    {\n        position: 17,\n        name: "FOCUS-SVR-03312",\n        features: ["tools", "database", "orion-ape-backup"],\n        status: "Active",\n        checks: {\n            icon: "status_critical",\n            num: 25,\n        },\n        "cpu-load": 47,\n        firstUrl: "https://en.wikipedia.org/wiki/Brno",\n        firstUrlLabel: "Brno",\n        secondUrl: "https://en.wikipedia.org/wiki/VMware_Workstation",\n        secondUrlLabel: "Workstation",\n    },\n    {\n        position: 18,\n        name: "FOCUS-SVR-02258",\n        features: [\n            "remote-access-vpn-tunnel",\n            "database",\n            "orion-ape-backup",\n            "patch-manager01",\n        ],\n        status: "Active",\n        checks: {\n            icon: "status_down",\n            num: 25,\n        },\n        "cpu-load": 53,\n        firstUrl: "https://en.wikipedia.org/wiki/Kyiv",\n        firstUrlLabel: "Kyiv",\n        secondUrl: "https://en.wikipedia.org/wiki/VMware_Workstation",\n        secondUrlLabel: "Workstation",\n    },\n    {\n        position: 19,\n        name: "Man-LT-JYJ4AD5",\n        features: [\n            "remote-access-vpn-tunnel",\n            "tools",\n            "database",\n            "orion-ape-backup",\n        ],\n        status: "Active",\n        checks: {\n            icon: "status_up",\n            num: 25,\n        },\n        "cpu-load": 32,\n        firstUrl: "https://en.wikipedia.org/wiki/Kyiv",\n        firstUrlLabel: "Kyiv",\n        secondUrl: "https://en.wikipedia.org/wiki/VirtualBox",\n        secondUrlLabel: "VirtualBox",\n    },\n    {\n        position: 20,\n        name: "Man-LT-JYJ425",\n        features: [\n            "remote-access-vpn-tunnel",\n            "tools",\n            "database",\n            "orion-ape-backup",\n        ],\n        status: "Active",\n        checks: {\n            icon: "status_up",\n            num: 25,\n        },\n        "cpu-load": 22,\n        firstUrl: "https://en.wikipedia.org/wiki/Kyiv",\n        firstUrlLabel: "Kyiv",\n        secondUrl: "https://en.wikipedia.org/wiki/VirtualBox",\n        secondUrlLabel: "VirtualBox",\n    },\n    {\n        position: 21,\n        name: "Man-LT-JYJ4333",\n        features: [\n            "remote-access-vpn-tunnel",\n            "tools",\n            "database",\n            "orion-ape-backup",\n        ],\n        status: "Active",\n        checks: {\n            icon: "status_up",\n            num: 25,\n        },\n        "cpu-load": 12,\n        firstUrl: "https://en.wikipedia.org/wiki/Kyiv",\n        firstUrlLabel: "Kyiv",\n        secondUrl: "https://en.wikipedia.org/wiki/VirtualBox",\n        secondUrlLabel: "VirtualBox",\n    },\n    {\n        position: 22,\n        name: "FOCUS-SVR-02258",\n        features: ["remote-access-vpn-tunnel", "patch-manager01"],\n        status: "Active",\n        checks: {\n            icon: "status_up",\n            num: 25,\n        },\n        "cpu-load": 86,\n        firstUrl: "https://en.wikipedia.org/wiki/Austin",\n        firstUrlLabel: "Austin",\n        secondUrl: "https://en.wikipedia.org/wiki/VMware_Workstation",\n        secondUrlLabel: "Workstation",\n    },\n    {\n        position: 23,\n        name: "Man-LT-JYJ4AD5",\n        features: [\n            "remote-access-vpn-tunnel",\n            "tools",\n            "database",\n            "orion-ape-backup",\n            "patch-manager01",\n        ],\n        status: "Active",\n        checks: {\n            icon: "status_inactive",\n            num: 25,\n        },\n        "cpu-load": 35,\n        firstUrl: "https://en.wikipedia.org/wiki/Austin",\n        firstUrlLabel: "Austin",\n        secondUrl: "https://en.wikipedia.org/wiki/VMware_Workstation",\n        secondUrlLabel: "Workstation",\n    },\n    {\n        position: 24,\n        name: "Man-LT-JYJ4AD5",\n        features: [\n            "remote-access-vpn-tunnel",\n            "tools",\n            "database",\n            "patch-manager01",\n        ],\n        status: "Active",\n        checks: {\n            icon: "status_up",\n            num: 25,\n        },\n        "cpu-load": 32,\n        firstUrl: "https://en.wikipedia.org/wiki/Brno",\n        firstUrlLabel: "Brno",\n        secondUrl: "https://en.wikipedia.org/wiki/VMware_Workstation",\n        secondUrlLabel: "Workstation",\n    },\n    {\n        position: 25,\n        name: "Man-LT-JYJ4AD5",\n        features: [\n            "remote-access-vpn-tunnel",\n            "database",\n            "orion-ape-backup",\n            "patch-manager01",\n        ],\n        status: "Active",\n        checks: {\n            icon: "status_up",\n            num: 25,\n        },\n        "cpu-load": 64,\n        firstUrl: "https://en.wikipedia.org/wiki/Kyiv",\n        firstUrlLabel: "Kyiv",\n        secondUrl: "https://en.wikipedia.org/wiki/VMware_Workstation",\n        secondUrlLabel: "Workstation",\n    },\n    {\n        position: 26,\n        name: "Man-LT-111",\n        features: [],\n        status: "Active",\n        checks: {\n            icon: "status_external",\n            num: 25,\n        },\n        "cpu-load": 55,\n        firstUrl: "https://en.wikipedia.org/wiki/Brno",\n        firstUrlLabel: "Brno",\n        secondUrl: "https://en.wikipedia.org/wiki/VMware_Workstation",\n        secondUrlLabel: "Workstation",\n    },\n    {\n        position: 27,\n        name: "Man-LT-2222",\n        features: [\n            "remote-access-vpn-tunnel",\n            "tools",\n            "database",\n            "orion-ape-backup",\n            "patch-manager01",\n        ],\n        status: "Active",\n        checks: {\n            icon: "status_inactive",\n            num: 25,\n        },\n        "cpu-load": 34,\n        firstUrl: "https://en.wikipedia.org/wiki/Brno",\n        firstUrlLabel: "Brno",\n        secondUrl: "https://en.wikipedia.org/wiki/VMware_Workstation",\n        secondUrlLabel: "Workstation",\n    },\n    {\n        position: 28,\n        name: "Man-LT-333333",\n        features: [\n            "remote-access-vpn-tunnel",\n            "tools",\n            "database",\n            "patch-manager01",\n        ],\n        status: "Active",\n        checks: {\n            icon: "status_up",\n            num: 25,\n        },\n        "cpu-load": 56,\n        firstUrl: "https://en.wikipedia.org/wiki/Kyiv",\n        firstUrlLabel: "Kyiv",\n        secondUrl: "https://en.wikipedia.org/wiki/VMware_Workstation",\n        secondUrlLabel: "Workstation",\n    },\n    {\n        position: 29,\n        name: "Man-LT-444444",\n        features: [\n            "remote-access-vpn-tunnel",\n            "database",\n            "orion-ape-backup",\n            "patch-manager01",\n        ],\n        status: "Active",\n        checks: {\n            icon: "status_up",\n            num: 25,\n        },\n        "cpu-load": 26,\n        firstUrl: "https://en.wikipedia.org/wiki/Kyiv",\n        firstUrlLabel: "Kyiv",\n        secondUrl: "https://en.wikipedia.org/wiki/VMware_Workstation",\n        secondUrlLabel: "Workstation",\n    },\n    {\n        position: 30,\n        name: "Man-LT-555555",\n        features: [\n            "remote-access-vpn-tunnel",\n            "database",\n            "orion-ape-backup",\n            "patch-manager01",\n        ],\n        status: "Active",\n        checks: {\n            icon: "status_up",\n            num: 25,\n        },\n        "cpu-load": 76,\n        firstUrl: "https://en.wikipedia.org/wiki/Austin",\n        firstUrlLabel: "Austin",\n        secondUrl: "https://en.wikipedia.org/wiki/VMware_Workstation",\n        secondUrlLabel: "Workstation",\n    },\n    {\n        position: 31,\n        name: "FOCUS-SVR-02258",\n        features: ["remote-access-vpn-tunnel", "patch-manager01"],\n        status: "Active",\n        checks: {\n            icon: "status_up",\n            num: 25,\n        },\n        "cpu-load": 86,\n        firstUrl: "https://en.wikipedia.org/wiki/Brno",\n        firstUrlLabel: "Brno",\n        secondUrl: "https://en.wikipedia.org/wiki/VMware_Workstation",\n        secondUrlLabel: "Workstation",\n    },\n    {\n        position: 32,\n        name: "FOCUS-SVR-03312",\n        features: ["tools", "database", "orion-ape-backup"],\n        status: "Active",\n        checks: {\n            icon: "status_critical",\n            num: 25,\n        },\n        "cpu-load": 47,\n        firstUrl: "https://en.wikipedia.org/wiki/Brno",\n        firstUrlLabel: "Brno",\n        secondUrl: "https://en.wikipedia.org/wiki/VMware_Workstation",\n        secondUrlLabel: "Workstation",\n    },\n    {\n        position: 33,\n        name: "FOCUS-SVR-02258",\n        features: [\n            "remote-access-vpn-tunnel",\n            "database",\n            "orion-ape-backup",\n            "patch-manager01",\n        ],\n        status: "Active",\n        checks: {\n            icon: "status_down",\n            num: 25,\n        },\n        "cpu-load": 53,\n        firstUrl: "https://en.wikipedia.org/wiki/Kyiv",\n        firstUrlLabel: "Kyiv",\n        secondUrl: "https://en.wikipedia.org/wiki/VMware_Workstation",\n        secondUrlLabel: "Workstation",\n    },\n    {\n        position: 34,\n        name: "Man-LT-JYJ4AD5",\n        features: [\n            "remote-access-vpn-tunnel",\n            "tools",\n            "database",\n            "orion-ape-backup",\n        ],\n        status: "Active",\n        checks: {\n            icon: "status_up",\n            num: 25,\n        },\n        "cpu-load": 32,\n        firstUrl: "https://en.wikipedia.org/wiki/Kyiv",\n        firstUrlLabel: "Kyiv",\n        secondUrl: "https://en.wikipedia.org/wiki/VirtualBox",\n        secondUrlLabel: "VirtualBox",\n    },\n    {\n        position: 35,\n        name: "Man-LT-JYJ425",\n        features: [\n            "remote-access-vpn-tunnel",\n            "tools",\n            "database",\n            "orion-ape-backup",\n        ],\n        status: "Active",\n        checks: {\n            icon: "status_up",\n            num: 25,\n        },\n        "cpu-load": 22,\n        firstUrl: "https://en.wikipedia.org/wiki/Kyiv",\n        firstUrlLabel: "Kyiv",\n        secondUrl: "https://en.wikipedia.org/wiki/VirtualBox",\n        secondUrlLabel: "VirtualBox",\n    },\n    {\n        position: 36,\n        name: "Man-LT-JYJ4333",\n        features: [\n            "remote-access-vpn-tunnel",\n            "tools",\n            "database",\n            "orion-ape-backup",\n        ],\n        status: "Active",\n        checks: {\n            icon: "status_up",\n            num: 25,\n        },\n        "cpu-load": 12,\n        firstUrl: "https://en.wikipedia.org/wiki/Kyiv",\n        firstUrlLabel: "Kyiv",\n        secondUrl: "https://en.wikipedia.org/wiki/VirtualBox",\n        secondUrlLabel: "VirtualBox",\n    },\n    {\n        position: 37,\n        name: "FOCUS-SVR-02258",\n        features: ["remote-access-vpn-tunnel", "patch-manager01"],\n        status: "Active",\n        checks: {\n            icon: "status_up",\n            num: 25,\n        },\n        "cpu-load": 86,\n        firstUrl: "https://en.wikipedia.org/wiki/Austin",\n        firstUrlLabel: "Austin",\n        secondUrl: "https://en.wikipedia.org/wiki/VMware_Workstation",\n        secondUrlLabel: "Workstation",\n    },\n    {\n        position: 38,\n        name: "Man-LT-JYJ4AD5",\n        features: [\n            "remote-access-vpn-tunnel",\n            "tools",\n            "database",\n            "orion-ape-backup",\n            "patch-manager01",\n        ],\n        status: "Active",\n        checks: {\n            icon: "status_inactive",\n            num: 25,\n        },\n        "cpu-load": 35,\n        firstUrl: "https://en.wikipedia.org/wiki/Austin",\n        firstUrlLabel: "Austin",\n        secondUrl: "https://en.wikipedia.org/wiki/VMware_Workstation",\n        secondUrlLabel: "Workstation",\n    },\n    {\n        position: 39,\n        name: "Man-LT-JYJ4AD5",\n        features: [\n            "remote-access-vpn-tunnel",\n            "tools",\n            "database",\n            "patch-manager01",\n        ],\n        status: "Active",\n        checks: {\n            icon: "status_up",\n            num: 25,\n        },\n        "cpu-load": 32,\n        firstUrl: "https://en.wikipedia.org/wiki/Brno",\n        firstUrlLabel: "Brno",\n        secondUrl: "https://en.wikipedia.org/wiki/VMware_Workstation",\n        secondUrlLabel: "Workstation",\n    },\n    {\n        position: 40,\n        name: "Man-LT-JYJ4AD5",\n        features: [\n            "remote-access-vpn-tunnel",\n            "database",\n            "orion-ape-backup",\n            "patch-manager01",\n        ],\n        status: "Active",\n        checks: {\n            icon: "status_up",\n            num: 25,\n        },\n        "cpu-load": 64,\n        firstUrl: "https://en.wikipedia.org/wiki/Kyiv",\n        firstUrlLabel: "Kyiv",\n        secondUrl: "https://en.wikipedia.org/wiki/VMware_Workstation",\n        secondUrlLabel: "Workstation",\n    },\n    {\n        position: 41,\n        name: "Man-LT-111",\n        features: [],\n        status: "Active",\n        checks: {\n            icon: "status_external",\n            num: 25,\n        },\n        "cpu-load": 55,\n        firstUrl: "https://en.wikipedia.org/wiki/Brno",\n        firstUrlLabel: "Brno",\n        secondUrl: "https://en.wikipedia.org/wiki/VMware_Workstation",\n        secondUrlLabel: "Workstation",\n    },\n    {\n        position: 42,\n        name: "Man-LT-2222",\n        features: [\n            "remote-access-vpn-tunnel",\n            "tools",\n            "database",\n            "orion-ape-backup",\n            "patch-manager01",\n        ],\n        status: "Active",\n        checks: {\n            icon: "status_inactive",\n            num: 25,\n        },\n        "cpu-load": 34,\n        firstUrl: "https://en.wikipedia.org/wiki/Brno",\n        firstUrlLabel: "Brno",\n        secondUrl: "https://en.wikipedia.org/wiki/VMware_Workstation",\n        secondUrlLabel: "Workstation",\n    },\n    {\n        position: 43,\n        name: "Man-LT-333333",\n        features: [\n            "remote-access-vpn-tunnel",\n            "tools",\n            "database",\n            "patch-manager01",\n        ],\n        status: "Active",\n        checks: {\n            icon: "status_up",\n            num: 25,\n        },\n        "cpu-load": 56,\n        firstUrl: "https://en.wikipedia.org/wiki/Kyiv",\n        firstUrlLabel: "Kyiv",\n        secondUrl: "https://en.wikipedia.org/wiki/VMware_Workstation",\n        secondUrlLabel: "Workstation",\n    },\n    {\n        position: 44,\n        name: "Man-LT-444444",\n        features: [\n            "remote-access-vpn-tunnel",\n            "database",\n            "orion-ape-backup",\n            "patch-manager01",\n        ],\n        status: "Active",\n        checks: {\n            icon: "status_up",\n            num: 25,\n        },\n        "cpu-load": 26,\n        firstUrl: "https://en.wikipedia.org/wiki/Kyiv",\n        firstUrlLabel: "Kyiv",\n        secondUrl: "https://en.wikipedia.org/wiki/VMware_Workstation",\n        secondUrlLabel: "Workstation",\n    },\n    {\n        position: 45,\n        name: "Man-LT-555555",\n        features: [\n            "remote-access-vpn-tunnel",\n            "database",\n            "orion-ape-backup",\n            "patch-manager01",\n        ],\n        status: "Active",\n        checks: {\n            icon: "status_up",\n            num: 25,\n        },\n        "cpu-load": 76,\n        firstUrl: "https://en.wikipedia.org/wiki/Austin",\n        firstUrlLabel: "Austin",\n        secondUrl: "https://en.wikipedia.org/wiki/VMware_Workstation",\n        secondUrlLabel: "Workstation",\n    },\n];\n'},45294:(o,e,n)=>{"use strict";n.r(e),n.d(e,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport {\n    DEFAULT_PIZZAGNA_ROOT,\n    IProviderConfiguration,\n    IRefresherProperties,\n    IWidget,\n    KpiComponent,\n    NOVA_KPI_DATASOURCE_ADAPTER,\n    PizzagnaLayer,\n    WellKnownProviders,\n} from "@nova-ui/dashboards";\n\nimport {\n    HarryPotterAverageRatingDataSource,\n    HarryPotterRatingsCountDataSource,\n} from "../data/kpi-datasources";\n\nexport const kpiConfig: IWidget = {\n    id: "kpiWidgetId",\n    type: "kpi",\n    pizzagna: {\n        [PizzagnaLayer.Configuration]: {\n            [DEFAULT_PIZZAGNA_ROOT]: {\n                providers: {\n                    [WellKnownProviders.Refresher]: {\n                        properties: {\n                            // Configuring the refresher interval so that our data source is invoked every ten minutes\n                            interval: 60 * 10,\n                            enabled: true,\n                        } as IRefresherProperties,\n                    } as Partial<IProviderConfiguration>,\n                },\n            },\n            header: {\n                properties: {\n                    title: "Harry Potter and the Sorcerer\'s Stone",\n                    subtitle: "By J. K. Rowling",\n                },\n            },\n            tiles: {\n                properties: {\n                    nodes: ["kpi1", "kpi2"],\n                },\n            },\n            kpi1: {\n                id: "kpi1",\n                componentType: KpiComponent.lateLoadKey,\n                properties: {\n                    widgetData: {\n                        label: "Average Rating",\n                        backgroundColor: "var(--nui-color-chart-three)",\n                        units: "out of 5 Stars",\n                    },\n                },\n                providers: {\n                    [WellKnownProviders.DataSource]: {\n                        // Setting the data source providerId for the tile with id "kpi1"\n                        providerId:\n                            HarryPotterAverageRatingDataSource.providerId,\n                    } as IProviderConfiguration,\n                    [WellKnownProviders.Adapter]: {\n                        providerId: NOVA_KPI_DATASOURCE_ADAPTER,\n                        properties: {\n                            componentId: "kpi1",\n                            propertyPath: "widgetData",\n                        },\n                    } as IProviderConfiguration,\n                },\n            },\n            kpi2: {\n                id: "kpi2",\n                componentType: KpiComponent.lateLoadKey,\n                properties: {\n                    widgetData: {\n                        label: "Reader Feedback",\n                        units: "Ratings",\n                    },\n                },\n                providers: {\n                    [WellKnownProviders.DataSource]: {\n                        // Setting the data source providerId for the tile with id "kpi"\n                        providerId:\n                            HarryPotterRatingsCountDataSource.providerId,\n                    } as IProviderConfiguration,\n                    [WellKnownProviders.Adapter]: {\n                        providerId: NOVA_KPI_DATASOURCE_ADAPTER,\n                        properties: {\n                            componentId: "kpi2",\n                            propertyPath: "widgetData",\n                        },\n                    } as IProviderConfiguration,\n                },\n            },\n        },\n    },\n};\n'},73157:(o,e,n)=>{"use strict";n.r(e),n.d(e,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport {\n    DEFAULT_PIZZAGNA_ROOT,\n    IProportionalWidgetChartOptions,\n    IProviderConfiguration,\n    IWidget,\n    LegendPlacement,\n    PizzagnaLayer,\n    ProportionalWidgetChartTypes,\n    WellKnownProviders,\n} from "@nova-ui/dashboards";\n\nimport { BeerReviewCountsByCityMockDataSource } from "../data/proportional-datasources";\n\nexport const proportionalConfig: IWidget = {\n    id: "proportionalWidgetId",\n    type: "proportional",\n    pizzagna: {\n        [PizzagnaLayer.Configuration]: {\n            [DEFAULT_PIZZAGNA_ROOT]: {\n                providers: {\n                    [WellKnownProviders.Refresher]: {\n                        properties: {\n                            interval: 0,\n                        },\n                    },\n                },\n            },\n            header: {\n                properties: {\n                    title: "Beer Review Tally by City",\n                    subtitle: "These People Love Beer",\n                },\n            },\n            chart: {\n                providers: {\n                    [WellKnownProviders.DataSource]: {\n                        providerId:\n                            BeerReviewCountsByCityMockDataSource.providerId,\n                    } as IProviderConfiguration,\n                },\n                properties: {\n                    configuration: {\n                        chartOptions: {\n                            type: ProportionalWidgetChartTypes.DonutChart,\n                            legendPlacement: LegendPlacement.Right,\n                        } as IProportionalWidgetChartOptions,\n                    },\n                },\n            },\n        },\n    },\n};\n'},84898:(o,e,n)=>{"use strict";n.r(e),n.d(e,{default:()=>t});const t='// \xa9 2023 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport {\n    DEFAULT_PIZZAGNA_ROOT,\n    IProviderConfiguration,\n    IRefresherProperties,\n    IWidget,\n    RiskScoreTileComponent,\n    NOVA_KPI_DATASOURCE_ADAPTER,\n    PizzagnaLayer,\n    WellKnownProviders,\n} from "@nova-ui/dashboards";\n\nimport { HarryPotterAverageRatingDataSource } from "../data/kpi-datasources";\n\nexport const riskScoreConfig: IWidget = {\n    id: "riskScoreWidgetId",\n    type: "risk-score",\n    pizzagna: {\n        [PizzagnaLayer.Configuration]: {\n            [DEFAULT_PIZZAGNA_ROOT]: {\n                providers: {\n                    [WellKnownProviders.Refresher]: {\n                        properties: {\n                            // Configuring the refresher interval so that our data source is invoked every ten minutes\n                            interval: 60 * 10,\n                            enabled: true,\n                        } as IRefresherProperties,\n                    } as Partial<IProviderConfiguration>,\n                },\n            },\n            header: {\n                properties: {\n                    title: "Harry Potter and the Sorcerer\'s Stone",\n                    subtitle: "By J. K. Rowling",\n                },\n            },\n            tiles: {\n                properties: {\n                    nodes: ["riskScore1"],\n                },\n            },\n            riskScore1: {\n                id: "riskScore1",\n                componentType: RiskScoreTileComponent.lateLoadKey,\n                properties: {\n                    widgetData: {\n                        minValue: 0,\n                        maxValue: 5,\n                        useStaticLabel: false,\n                        staticLabel: undefined,\n                        label: `Average Rating`,\n                        description: `Harry Potter and the Sorcerer\'s Stone By J. K. Rowling Average Rating Risk Score`,\n                    },\n                },\n                providers: {\n                    [WellKnownProviders.DataSource]: {\n                        // Setting the data source providerId for the tile with id "riskScore1"\n                        providerId:\n                            HarryPotterAverageRatingDataSource.providerId,\n                    } as IProviderConfiguration,\n                    [WellKnownProviders.Adapter]: {\n                        providerId: NOVA_KPI_DATASOURCE_ADAPTER,\n                        properties: {\n                            componentId: "riskScore1",\n                            propertyPath: "widgetData",\n                        },\n                    } as IProviderConfiguration,\n                },\n            },\n        },\n    },\n};\n'},87384:(o,e,n)=>{"use strict";n.r(e),n.d(e,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport {\n    ITableWidgetColumnConfig,\n    ITableWidgetSorterConfig,\n    IWidget,\n    PizzagnaLayer,\n    RawFormatterComponent,\n    WellKnownProviders,\n} from "@nova-ui/dashboards";\n\nimport { BeerDataSource } from "../data/table/beer-data-source";\n\nexport const tableConfig: IWidget = {\n    id: "tableWidgetId",\n    type: "table",\n    pizzagna: {\n        [PizzagnaLayer.Configuration]: {\n            header: {\n                properties: {\n                    title: "Stupendous Suds",\n                    subtitle: "Try These Brilliant Brews",\n                },\n            },\n            table: {\n                providers: {\n                    [WellKnownProviders.DataSource]: {\n                        providerId: BeerDataSource.providerId,\n                    },\n                },\n                properties: {\n                    configuration: {\n                        columns: [\n                            {\n                                id: "column1",\n                                label: "Beer Name",\n                                isActive: true,\n                                width: 185,\n                                formatter: {\n                                    componentType:\n                                        RawFormatterComponent.lateLoadKey,\n                                    properties: {\n                                        dataFieldIds: {\n                                            value: "name",\n                                        },\n                                    },\n                                },\n                            },\n                            {\n                                id: "column2",\n                                label: "Tagline",\n                                isActive: true,\n                                width: 250,\n                                formatter: {\n                                    componentType:\n                                        RawFormatterComponent.lateLoadKey,\n                                    properties: {\n                                        dataFieldIds: {\n                                            value: "tagline",\n                                        },\n                                    },\n                                },\n                            },\n                            {\n                                id: "column3",\n                                label: "First Brewed",\n                                isActive: true,\n                                formatter: {\n                                    componentType:\n                                        RawFormatterComponent.lateLoadKey,\n                                    properties: {\n                                        dataFieldIds: {\n                                            value: "first_brewed",\n                                        },\n                                    },\n                                },\n                            },\n                            {\n                                id: "column4",\n                                label: "Description",\n                                isActive: true,\n                                width: 275,\n                                formatter: {\n                                    componentType:\n                                        RawFormatterComponent.lateLoadKey,\n                                    properties: {\n                                        dataFieldIds: {\n                                            value: "description",\n                                        },\n                                    },\n                                },\n                            },\n                        ] as ITableWidgetColumnConfig[],\n                        sorterConfiguration: {\n                            descendantSorting: false,\n                            sortBy: "",\n                        } as ITableWidgetSorterConfig,\n                        hasVirtualScroll: true,\n                    },\n                },\n            },\n        },\n    },\n};\n'},13262:(o,e,n)=>{"use strict";n.r(e),n.d(e,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport moment from "moment/moment";\n\nimport {\n    DEFAULT_PIZZAGNA_ROOT,\n    IProviderConfiguration,\n    ISerializableTimeframe,\n    ITimeseriesItemConfiguration,\n    IWidget,\n    LegendPlacement,\n    WellKnownProviders,\n} from "@nova-ui/dashboards";\n\nimport { BeerVsReadingMockDataSource } from "../data/timeseries-data-sources";\n\nexport const timeseriesConfig: IWidget = {\n    id: "timeseriesWidgetId",\n    type: "timeseries",\n    pizzagna: {\n        configuration: {\n            [DEFAULT_PIZZAGNA_ROOT]: {\n                providers: {\n                    [WellKnownProviders.DataSource]: {\n                        providerId: BeerVsReadingMockDataSource.providerId,\n                    } as IProviderConfiguration,\n                },\n            },\n            header: {\n                properties: {\n                    title: "Primary Leisure Activity Over Time",\n                    subtitle: "Survey of 1000 Solarians",\n                },\n            },\n            chart: {\n                providers: {\n                    [WellKnownProviders.Adapter]: {\n                        properties: {\n                            series: [\n                                {\n                                    id: "series-1",\n                                    label: "Beer Tasting",\n                                    selectedSeriesId: "series-1",\n                                },\n                                {\n                                    id: "series-2",\n                                    label: "Reading",\n                                    selectedSeriesId: "series-2",\n                                },\n                            ] as ITimeseriesItemConfiguration[],\n                        },\n                    } as Partial<IProviderConfiguration>,\n                },\n                properties: {\n                    configuration: {\n                        legendPlacement: LegendPlacement.Right,\n                        enableZoom: true,\n                        leftAxisLabel: "Solarians (%)",\n                    },\n                },\n            },\n            timeframeSelection: {\n                properties: {\n                    timeframe: {\n                        selectedPresetId: "last7Days",\n                    } as ISerializableTimeframe,\n                    minDate: moment().subtract(10, "days").format(),\n                    maxDate: moment().format(),\n                },\n            },\n        },\n    },\n};\n'},54880:(o,e,n)=>{"use strict";n.r(e),n.d(e,{default:()=>t});const t='<h1>Overview</h1>\n\n<p>\n    Nova Dashboards provide feature developers with a common solution for\n    presenting data coming from various sources within a single view, as well as\n    a set of predefined widget visualizations that are 100% configuration-driven\n    and designed specifically to conform to the Nova Design Language (NDL).\n</p>\n<p>\n    Even though NDL-prescriptive features are provided out of the box, the\n    framework and its set of widgets are made to be flexible! Individual parts\n    of it can be overridden, and custom widgets can be implemented without an\n    inordinate amount of effort. However, as with any flexible framework, it\'s\n    important to remember that the more customizations you create, the more\n    initial work and maintenance effort you\'ll absorb into your product\'s code\n    base.\n</p>\n\n<h2>Why?</h2>\n<p>\n    For Solarwinds, the summary-style dashboard is arguably the centerpiece of\n    many of our products. As such, it\'s important to have a common way to\n    fulfill the dashboard use-case for as many of those products as possible.\n    Our primary goals are to:\n</p>\n<ol>\n    <li>\n        Prevent developers from having to reinvent dashboard systems from\n        product to product, while losing the lessons learned from other\n        implementations.\n    </li>\n    <li>\n        Minimize the overhead of building and maintaining custom widget\n        visualizations that can easily be solved by a common visualization.\n    </li>\n    <li>\n        Accelerate development of dashboard features by providing a framework\n        that can be quickly bootstrapped and populated by configuration.\n    </li>\n    <li>\n        Empower end-users to leverage our visualizations by injecting any data\n        into our widgets, as long as it\'s properly formatted.\n    </li>\n</ol>\n<p>\n    But the reasons for having a common dashboarding framework are not just\n    technical. With the goal of proliferating the One Solarwinds philosophy, a\n    common dashboard solution makes it easier to work towards achieving a\n    singular look and feel across product lines.\n</p>\n\n<div class="pt-5">\n    <hero-dashboard></hero-dashboard>\n</div>\n\n<h2>Architectural Goals</h2>\n<ul>\n    <li>\n        To allow partial changes of widget behavior/layout without having to\n        re-implement an entire widget.\n    </li>\n    <li>To implement stateless widgets that allow for easy reuse.</li>\n    <li>\n        To allow the entire state of the dashboard to be serializable and easily\n        stored in a database.\n    </li>\n    <li>\n        To provide an easy-to-use API for communicating within a widget and\n        between the dashboard and its widgets.\n    </li>\n    <li>\n        To allow for a tiered prioritization of widget state in which runtime\n        data takes precedence over the stored widget configuration.\n    </li>\n    <li>\n        To have a pure, self-contained widget configurator for use in widget\n        editing and cloning.\n    </li>\n    <li>\n        To have widgets that are infinitely resizable, movable, editable,\n        clonable, and removable. The widgets can span multiple rows and columns,\n        can refresh themselves, and can be updated in real time.\n    </li>\n    <li>To provide a predefined "starter pack" of widget types.</li>\n</ul>\n\n<h2>Technologies Used</h2>\n<ul>\n    <li>\n        <a href="https://angular.io/" target="_blank">Angular</a> - Provides the\n        project structure, dependency injection, etc. for development. Apps\n        employing Nova Dashboards currently must also be Angular-based.\n    </li>\n    <li>\n        <a\n            href="https://github.com/tiberiuzuld/angular-gridster2/blob/master/README.md"\n            target="_blank"\n            >angular-gridster2</a\n        >\n        - Also known simply as Gridster, angular-gridster2 is a package used by\n        Nova Dashboards that simplifies the process of creating and maintaining\n        intuitive, draggable grid layouts of DOM elements. In the case of Nova\n        Dashboards, these elements take the form of widgets which can span one\n        or more rows and columns. In addition to draggability, Nova Dashboards\'\n        use of Gridster allows users to dynamically add or remove widgets from\n        the the dashboard grid.\n    </li>\n</ul>\n\n<h2>Supported Widgets</h2>\n<ul>\n    <li>\n        <a\n            href="../additional-documentation/widget-types/table.html"\n            target="_blank"\n            >Table</a\n        >\n        - For presenting a sortable set of data in rows and columns\n    </li>\n    <li>\n        <a\n            href="../additional-documentation/widget-types/proportional.html"\n            target="_blank"\n            >Proportional</a\n        >\n        - For presenting related data points as part of a whole\n    </li>\n    <li>\n        <a\n            href="../additional-documentation/widget-types/kpi.html"\n            target="_blank"\n            >KPI</a\n        >\n        (Key Performance Indicator) - For displaying one or more key values\n    </li>\n    <li>\n        <a\n            href="../additional-documentation/widget-types/risk-score.html"\n            target="_blank"\n            >Risk Score</a\n        >\n        - For displaying one or more score values\n    </li>\n    <li>\n        <a\n            href="../additional-documentation/widget-types/timeseries.html"\n            target="_blank"\n            >Timeseries</a\n        >\n        - For displaying changes in values over time\n    </li>\n    <li>\n        <a\n            href="../additional-documentation/widget-types/embedded-content.html"\n            target="_blank"\n            >Embedded Content</a\n        >\n        - For displaying web layouts\n    </li>\n</ul>\n\n<h2>Planned Widgets</h2>\n<ul>\n    <li>Maps/Graph - to provide a visualization of related nodes</li>\n    <li>Drill-down - to provide a view of statuses within hierarchical data</li>\n</ul>\n'},87648:(o,e,n)=>{"use strict";n.r(e),n.d(e,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport { Component } from "@angular/core";\n\n@Component({\n    selector: "nui-dashboard-overview-docs",\n    templateUrl: "./overview-docs.component.html",\n})\nexport class OverviewDocsComponent {}\n'},48927:(o,e,n)=>{"use strict";n.r(e),n.d(e,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport { CommonModule } from "@angular/common";\nimport { NgModule } from "@angular/core";\nimport { RouterModule } from "@angular/router";\n\nimport {\n    NuiBusyModule,\n    NuiButtonModule,\n    NuiDocsModule,\n    NuiIconModule,\n    NuiMessageModule,\n    NuiSwitchModule,\n} from "@nova-ui/bits";\nimport {\n    ConfiguratorHeadingService,\n    IFormatterDefinition,\n    LinkFormatterComponent,\n    NuiDashboardsModule,\n    WellKnownPathKey,\n    WidgetTypesService,\n} from "@nova-ui/dashboards";\n\nimport { HeroDashboardComponent } from "./hero/dashboard/hero-dashboard.component";\nimport {\n    HarryPotterAverageRatingDataSource,\n    HarryPotterRatingsCountDataSource,\n} from "./hero/data/kpi-datasources";\nimport {\n    BeerReviewCountsByCityMockDataSource,\n    BeerReviewCountsByCityMockDataSource2,\n} from "./hero/data/proportional-datasources";\nimport { BeerDataSource } from "./hero/data/table/beer-data-source";\nimport { RandomUserDataSource } from "./hero/data/table/random-user-data-source";\nimport {\n    BeerVsReadingMockDataSource,\n    LoungingVsFrisbeeGolfMockDataSource,\n} from "./hero/data/timeseries-data-sources";\nimport { OverviewDocsComponent } from "./overview-docs.component";\n\nconst routes = [\n    {\n        path: "",\n        component: OverviewDocsComponent,\n        data: {\n            srlc: {\n                hideIndicator: true,\n            },\n            showThemeSwitcher: true,\n        },\n    },\n    {\n        path: "hero",\n        component: HeroDashboardComponent,\n        data: {\n            srlc: {\n                hideIndicator: true,\n            },\n        },\n    },\n];\n\n@NgModule({\n    imports: [\n        CommonModule,\n        NuiDashboardsModule,\n        NuiBusyModule,\n        NuiButtonModule,\n        NuiDocsModule,\n        NuiMessageModule,\n        NuiSwitchModule,\n        NuiIconModule,\n        RouterModule.forChild(routes),\n    ],\n    declarations: [OverviewDocsComponent, HeroDashboardComponent],\n    providers: [ConfiguratorHeadingService],\n})\nexport default class OverviewModule {\n    constructor(private widgetTypesService: WidgetTypesService) {\n        this.setupDataSourceProviders();\n        this.setupProportionalLegendFormatters();\n    }\n\n    private setupDataSourceProviders() {\n        this.setDataSourceProviders("table", [\n            RandomUserDataSource.providerId,\n            BeerDataSource.providerId,\n        ]);\n        this.setDataSourceProviders("kpi", [\n            HarryPotterAverageRatingDataSource.providerId,\n            HarryPotterRatingsCountDataSource.providerId,\n        ]);\n        this.setDataSourceProviders("risk-score", [\n            HarryPotterAverageRatingDataSource.providerId,\n            HarryPotterRatingsCountDataSource.providerId,\n        ]);\n        this.setDataSourceProviders("proportional", [\n            BeerReviewCountsByCityMockDataSource.providerId,\n            BeerReviewCountsByCityMockDataSource2.providerId,\n        ]);\n        this.setDataSourceProviders("timeseries", [\n            BeerVsReadingMockDataSource.providerId,\n            LoungingVsFrisbeeGolfMockDataSource.providerId,\n        ]);\n    }\n\n    private setDataSourceProviders(type: string, providers: string[]) {\n        const widgetTemplate = this.widgetTypesService.getWidgetType(type, 1);\n        this.widgetTypesService.setNode(\n            widgetTemplate,\n            "configurator",\n            WellKnownPathKey.DataSourceProviders,\n            providers\n        );\n    }\n\n    private setupProportionalLegendFormatters() {\n        const formatters: IFormatterDefinition[] = [\n            {\n                componentType: LinkFormatterComponent.lateLoadKey,\n                label: $localize`Link`,\n                dataTypes: {\n                    value: "label",\n                    link: "link",\n                },\n            },\n        ];\n\n        const widgetTemplate = this.widgetTypesService.getWidgetType(\n            "proportional",\n            1\n        );\n        this.widgetTypesService.setNode(\n            widgetTemplate,\n            "configurator",\n            WellKnownPathKey.Formatters,\n            formatters\n        );\n    }\n}\n'},43966:(o,e,n)=>{"use strict";n.r(e),n.d(e,{default:()=>t});const t='<h1>Implementing a Custom Configurator Section</h1>\n\n<p>\n    While developing a dashboard, you may find yourself wanting to give users\n    the ability to configure a widget behavior or layout that\'s not configurable\n    out of the box. For example, you may want to provide a product-specific way\n    for users to configure a data source. The first step to achieving something\n    like this is to replace an existing widget configurator (editor) section\n    with your own implementation. In this tutorial, we\'ll do our best to give\n    you an understanding of what\'s needed to accomplish this first step.\n</p>\n<p>\n    For now, we\'ll keep things simple and create a custom version of the KPI\n    description configuration component to replace the background color selector\n    with some static text content. This will serve mainly as a proof-of-concept\n    for the configurator side. In a later tutorial, we\'ll create a\n    <a\n        href="../additional-documentation/tutorials/customization/widget.html"\n        target="_parent"\n        >custom widget</a\n    >\n    that can actually be configured via a custom configurator section. And, in\n    another tutorial beyond that, we\'ll go over the small amount of additional\n    wiring required to give users the ability to change the configuration of a\n    data source.\n</p>\n\n<h2>Fundamental Concepts</h2>\n<ul>\n    <li>\n        <code\n            ><a href="../classes/WidgetTypesService.html" target="_blank"\n                >WidgetTypesService</a\n            ></code\n        >\n    </li>\n    <li>\n        <code\n            ><a\n                href="../injectables/ComponentRegistryService.html"\n                target="_blank"\n                >ComponentRegistryService</a\n            ></code\n        >\n    </li>\n    <li>Custom configurator section component</li>\n</ul>\n\n<h2>Basic Steps</h2>\n<ol>\n    <li>\n        Follow the instructions\n        <a\n            href="../additional-documentation/getting-started.html"\n            target="_parent"\n            >here</a\n        >\n        to set up your environment for dashboard development.\n    </li>\n    <li>\n        Follow the instructions from previous tutorials to get a basic dashboard\n        up and running.\n    </li>\n    <li>\n        Create a component that will be used to replace an existing\n        framework-provided configurator section. In this tutorial, we\'ll replace\n        the existing\n        <code\n            ><a\n                href="../components/KpiDescriptionConfigurationComponent.html"\n                target="_blank"\n                >KpiDescriptionConfigurationComponent</a\n            ></code\n        >\n        with a custom one. Our version will insert custom content where there\n        would normally be a tile color selection dropdown.\n    </li>\n    <li>\n        Ensure that the following modules are included in the imports of the\n        custom configurator section component\'s parent module:\n        <code\n            ><a\n                href="../modules/NuiDashboardConfiguratorModule.html"\n                target="_blank"\n                >NuiDashboardConfiguratorModule</a\n            ></code\n        >, <code>NuiFormFieldModule</code>, <code>NuiTextboxModule</code>,\n        <code>NuiIconModule</code>, and Angular\'s\n        <code\n            ><a\n                href="https://angular.io/api/forms/ReactiveFormsModule"\n                target="_blank"\n                >ReactiveFormsModule</a\n            ></code\n        >.\n    </li>\n    <li>\n        Add the custom configurator section component class name to the\n        declarations of the module in which it\'s implemented. In this example,\n        the class name is\n        <code>CustomKpiDescriptionConfigurationComponent</code>\n    </li>\n    <li>\n        Prepare the dashboard framework to use our custom configurator section\n        by doing the following:\n        <ol>\n            <li>\n                Use the\n                <code\n                    ><a\n                        href="../classes/WidgetTypesService.html"\n                        target="_blank"\n                        >WidgetTypesService</a\n                    ></code\n                >\n                to replace the existing configurator section component with our\n                custom one.\n            </li>\n            <li>\n                Register the custom configurator section component using the\n                <code\n                    ><a\n                        href="../injectables/ComponentRegistryService.html"\n                        target="_blank"\n                        >ComponentRegistryService</a\n                    ></code\n                >\n                to make it available for late load by the dashboard framework.\n            </li>\n        </ol>\n        <nui-message type="info" [allowDismiss]="false">\n            <strong>Note:</strong> In this tutorial, the above two steps are\n            performed in the component\'s <code>ngOnInit</code>. But, in a\n            real-world app, widget type modifications and component\n            registrations like this may make more sense in a parent module\'s\n            constructor. Moving framework initialization procedures such as\n            these to a higher level in an app\'s hierarchy ensures that multiple\n            dashboard instances within a common parent module have access to the\n            same modifications.\n        </nui-message>\n    </li>\n    <li>\n        At this point you should be able to open the widget editor using the\n        Edit button in the menu at the top-right corner of the widget. Once the\n        editor is open, expand the KPI tile\'s Description section. The custom\n        component we created should now be displayed in that section of the\n        editor.\n    </li>\n    <li>\n        In case you have custom content, like formatters etc., and you use\n        <code>nui-select-v2</code> and <code>nui-combobox-v2</code> components,\n        it is possible that in case of large lists the component overlay may go\n        beyond the configurator heading due to its high z-index. To fix this,\n        use the <code>nui-select-v2</code> and\n        <code>nui-combobox-v2</code> components input\n        <code>popupViewportMargin</code> and pass the height of the configurator\n        heading into it. You can get the height of the configurator heading by\n        simply injecting the\n        <code\n            ><a\n                href="../injectables/ConfiguratorHeadingService.html"\n                target="_blank"\n                >ConfiguratorHeadingService</a\n            ></code\n        >\n        and use its <code>height$</code> observable and async pipe to instantly\n        get the current height of the configurator heading.\n    </li>\n</ol>\n\n<nui-message type="info" [allowDismiss]="false">\n    For more detailed information about implementing a custom configurator\n    section, take a look at the inline comments under the source expander of the\n    following example.\n</nui-message>\n<nui-example-wrapper\n    filenamePrefix="custom-configurator-section"\n    exampleTitle="Custom Configurator Section"\n>\n    <custom-configurator-section-example></custom-configurator-section-example>\n</nui-example-wrapper>\n'},95002:(o,e,n)=>{"use strict";n.r(e),n.d(e,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport { Component } from "@angular/core";\n\n@Component({\n    selector: "custom-configurator-section-docs",\n    templateUrl: "./custom-configurator-section-docs.component.html",\n})\nexport class CustomConfiguratorSectionDocsComponent {}\n'},11013:(o,e,n)=>{"use strict";n.r(e),n.d(e,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport { CommonModule } from "@angular/common";\nimport { HttpClientModule } from "@angular/common/http";\nimport { NgModule } from "@angular/core";\nimport { ReactiveFormsModule } from "@angular/forms";\nimport { RouterModule } from "@angular/router";\n\nimport {\n    NuiButtonModule,\n    NuiDocsModule,\n    NuiFormFieldModule,\n    NuiIconModule,\n    NuiMessageModule,\n    NuiSwitchModule,\n    NuiTextboxModule,\n    DEMO_PATH_TOKEN,\n} from "@nova-ui/bits";\nimport {\n    NuiDashboardConfiguratorModule,\n    NuiDashboardsModule,\n} from "@nova-ui/dashboards";\n\nimport { getDemoFiles } from "../../../../../demo-files-factory";\nimport { CustomConfiguratorSectionDocsComponent } from "./custom-configurator-section-docs.component";\nimport {\n    CustomConfiguratorSectionExampleComponent,\n    CustomKpiDescriptionConfigurationComponent,\n} from "./custom-configurator-section/custom-configurator-section.example.component";\n\nconst routes = [\n    {\n        path: "",\n        component: CustomConfiguratorSectionDocsComponent,\n        data: {\n            srlc: {\n                hideIndicator: true,\n            },\n            showThemeSwitcher: true,\n        },\n    },\n    {\n        path: "example",\n        component: CustomConfiguratorSectionExampleComponent,\n        data: {\n            srlc: {\n                hideIndicator: true,\n            },\n        },\n    },\n];\n\n@NgModule({\n    imports: [\n        CommonModule,\n        ReactiveFormsModule,\n        HttpClientModule,\n        NuiDashboardsModule,\n        NuiDashboardConfiguratorModule,\n        NuiDocsModule,\n        NuiFormFieldModule,\n        NuiIconModule,\n        NuiMessageModule,\n        NuiSwitchModule,\n        NuiTextboxModule,\n        NuiButtonModule,\n        RouterModule.forChild(routes),\n    ],\n    declarations: [\n        CustomConfiguratorSectionDocsComponent,\n        CustomKpiDescriptionConfigurationComponent,\n        CustomConfiguratorSectionExampleComponent,\n    ],\n    providers: [\n        {\n            provide: DEMO_PATH_TOKEN,\n            useValue: getDemoFiles("configurator-section"),\n        },\n    ],\n})\nexport default class CustomConfiguratorSectionModule {}\n'},64692:(o,e,n)=>{"use strict";n.r(e),n.d(e,{default:()=>t});const t='<div class="my-3 d-flex align-items-center">\n    <nui-switch class="ml-3" [(value)]="editMode" i18n> Edit Mode </nui-switch>\n    <button\n        *ngIf="!dashboard?.widgets[\'widget1\']"\n        type="button"\n        displayStyle="action"\n        (click)="reInitializeDashboard()"\n        nui-button\n    >\n        Restore Widget\n    </button>\n</div>\n\n<div class="w-100 dashboard">\n    \x3c!--\n        Note: The dashboard and gridsterConfig input assignments must use banana-in-a-box notation to keep\n        the dashboard state updated with changes to the pizzagna.\n    --\x3e\n    <nui-dashboard\n        *ngIf="dashboard"\n        [(dashboard)]="dashboard"\n        [(gridsterConfig)]="gridsterConfig"\n        [editMode]="editMode"\n        nuiWidgetEditor\n    >\n    </nui-dashboard>\n</div>\n'},5460:(o,e,n)=>{"use strict";n.r(e),n.d(e,{default:()=>t});const t='@import (reference) "@nova-ui/bits/sdk/less/nui-framework-variables";\n@import (reference) "@nova-ui/bits/sdk/less/mixins";\n\n.dashboard {\n    height: 800px;\n}\n\n// Styling for the custom configurator section\n.kpi-description-configuration {\n    &__accordion-content {\n        padding: @nui-space-md @nui-space-md @nui-space-md\n            (@nui-space-md * 2 + @icon-size-default);\n    }\n\n    &__custom-content-container {\n        .setCssVariable(background-color, nui-color-bg-dark);\n        border-radius: @nui-radius-default;\n    }\n\n    &__custom-content-header,\n    &__custom-content {\n        .setCssVariable(color, nui-color-text-light);\n    }\n}\n'},68020:(o,e,n)=>{"use strict";n.r(e),n.d(e,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport { HttpClient, HttpErrorResponse } from "@angular/common/http";\nimport {\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    EventEmitter,\n    Injectable,\n    Input,\n    OnChanges,\n    OnDestroy,\n    OnInit,\n    Output,\n    SimpleChanges,\n} from "@angular/core";\nimport { FormBuilder, FormGroup, Validators } from "@angular/forms";\nimport { GridsterConfig, GridsterItem } from "angular-gridster2";\n// eslint-disable-next-line import/no-deprecated\nimport { BehaviorSubject, combineLatest, Observable } from "rxjs";\n// eslint-disable-next-line import/no-deprecated\nimport { finalize, map, startWith } from "rxjs/operators";\n\nimport { DataSourceService, IFilteringOutputs } from "@nova-ui/bits";\nimport {\n    ComponentRegistryService,\n    DATA_SOURCE,\n    DEFAULT_PIZZAGNA_ROOT,\n    IDashboard,\n    IHasChangeDetector,\n    IHasForm,\n    IKpiData,\n    IProviderConfiguration,\n    IRefresherProperties,\n    IWidget,\n    IWidgets,\n    KpiComponent,\n    NOVA_KPI_DATASOURCE_ADAPTER,\n    PizzagnaLayer,\n    ProviderRegistryService,\n    WellKnownPathKey,\n    WellKnownProviders,\n    WidgetTypesService,\n} from "@nova-ui/dashboards";\n\n/**\n * A custom version of the KpiDescriptionConfigurationComponent provided by the dashboards framework.\n * ---\n * For this example, the existing background color selection functionality has been replaced by custom\n * template content.\n */\n@Component({\n    selector: "custom-kpi-description-configuration",\n    template: `\n        <nui-widget-editor-accordion\n            [formGroup]="form"\n            [state]="form | nuiWidgetEditorAccordionFormState | async"\n        >\n            <nui-widget-editor-accordion-header\n                [subtitle]="subtitle$ | async"\n                [headerIcon]="\n                    form | nuiFormHeaderIconPipe : \'widget_list\' | async\n                "\n                headerTitle="Description"\n            />\n            <div class="kpi-description-configuration__accordion-content">\n                <div class="mb-4">\n                    <nui-form-field\n                        caption="Label"\n                        i18n-caption\n                        [control]="form.get(\'label\')"\n                        class="form-group"\n                    >\n                        <nui-textbox\n                            formControlName="label"\n                            placeholder="Set label"\n                            i18n-placeholder\n                        ></nui-textbox>\n                    </nui-form-field>\n                </div>\n\n                \x3c!-- Begin custom layout content --\x3e\n                <div\n                    class="my-4 pt-1 px-3 pb-3 kpi-description-configuration__custom-content-container"\n                >\n                    <h5\n                        class="kpi-description-configuration__custom-content-header"\n                        i18n\n                    >\n                        Custom Content\n                    </h5>\n                    <div\n                        class="kpi-description-configuration__custom-content"\n                        i18n\n                    >\n                        The default version of this configurator section\n                        displays a background color selector here.\n                    </div>\n                </div>\n                \x3c!-- End custom layout content --\x3e\n\n                <div class="mt-4" *ngIf="configurableUnits">\n                    <nui-form-field\n                        caption="Units"\n                        i18n-caption\n                        [control]="form.get(\'units\')"\n                        class="form-group"\n                    >\n                        <nui-textbox\n                            formControlName="units"\n                            placeholder="Units"\n                            i18n-placeholder\n                        ></nui-textbox>\n                    </nui-form-field>\n                </div>\n            </div>\n        </nui-widget-editor-accordion>\n    `,\n    styleUrls: ["./custom-configurator-section.example.component.less"],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\n// Remember to declare this class in the parent module\nexport class CustomKpiDescriptionConfigurationComponent\n    implements OnInit, OnChanges, IHasChangeDetector, IHasForm\n{\n    // Ensure that the lateLoadKey value matches class name\n    public static lateLoadKey = "CustomKpiDescriptionConfigurationComponent";\n\n    @Input() componentId: string;\n    @Input() configurableUnits: boolean;\n\n    @Input() label: string = "";\n    @Input() units: string = "";\n\n    @Output() formReady = new EventEmitter<FormGroup>();\n\n    public form: FormGroup;\n    public subtitle$: Observable<string>;\n\n    constructor(\n        public changeDetector: ChangeDetectorRef,\n        private formBuilder: FormBuilder\n    ) {}\n\n    public ngOnInit(): void {\n        this.form = this.formBuilder.group({\n            label: [this.label, [Validators.required]],\n        });\n\n        if (this.configurableUnits) {\n            this.form.addControl("units", this.formBuilder.control(this.units));\n        }\n\n        const label = this.form.get("label");\n        // eslint-disable-next-line import/no-deprecated\n        const labelValue = label?.valueChanges.pipe(startWith(label?.value));\n\n        // eslint-disable-next-line import/no-deprecated\n        this.subtitle$ = combineLatest([\n            labelValue?.pipe(map((t) => t || $localize`no label`)),\n        ]).pipe(map((labels) => labels.join(", ")));\n\n        this.formReady.emit(this.form);\n    }\n\n    public ngOnChanges(changes: SimpleChanges): void {\n        if (changes.label) {\n            this.form.patchValue({ label: changes.label.currentValue });\n        }\n        if (changes.units) {\n            this.form.patchValue({ units: changes.units.currentValue });\n        }\n    }\n}\n\n/**\n * A simple KPI data source to retrieve the average rating of Harry Potter and the Sorcerer\'s Stone (book) via googleapis\n */\n@Injectable()\nexport class AverageRatingKpiDataSource\n    extends DataSourceService<IKpiData>\n    implements OnDestroy\n{\n    // This is the ID we\'ll use to identify the provider\n    public static providerId = "AverageRatingKpiDataSource";\n\n    // Use this subject to communicate the data source\'s busy state\n    public busy = new BehaviorSubject<boolean>(false);\n\n    constructor(private http: HttpClient) {\n        super();\n    }\n\n    // In this example, getFilteredData is invoked every 10 minutes (Take a look at the refresher\n    // provider definition in the widget configuration below to see how the interval is set)\n    public async getFilteredData(): Promise<IFilteringOutputs> {\n        this.busy.next(true);\n        return new Promise((resolve) => {\n            // *** Make a resource request to an external API (if needed)\n            this.http\n                .get("https://www.googleapis.com/books/v1/volumes/5MQFrgEACAAJ")\n                .pipe(finalize(() => this.busy.next(false)))\n                .subscribe({\n                    next: (data: any) => {\n                        resolve({\n                            result: {\n                                value: data.volumeInfo.averageRating,\n                            },\n                        });\n                    },\n                    error: (error: HttpErrorResponse) => {\n                        resolve({\n                            result: null,\n                            error: {\n                                type: error.status,\n                            },\n                        });\n                    },\n                });\n        });\n    }\n\n    public ngOnDestroy(): void {\n        this.outputsSubject.complete();\n    }\n}\n\n/**\n * A simple KPI data source to retrieve the ratings count of Harry Potter and the Sorcerer\'s Stone (book) via googleapis\n */\n@Injectable()\nexport class RatingsCountKpiDataSource\n    extends DataSourceService<IKpiData>\n    implements OnDestroy\n{\n    public static providerId = "RatingsCountKpiDataSource";\n\n    // Use this subject to communicate the data source\'s busy state\n    public busy = new BehaviorSubject<boolean>(false);\n\n    constructor(private http: HttpClient) {\n        super();\n    }\n\n    public async getFilteredData(): Promise<IFilteringOutputs> {\n        this.busy.next(true);\n        return new Promise((resolve) => {\n            this.http\n                .get("https://www.googleapis.com/books/v1/volumes/5MQFrgEACAAJ")\n                .pipe(finalize(() => this.busy.next(false)))\n                .subscribe({\n                    next: (data: any) => {\n                        resolve({\n                            result: {\n                                value: data.volumeInfo.ratingsCount,\n                            },\n                        });\n                    },\n                    error: (error: HttpErrorResponse) => {\n                        resolve({\n                            result: null,\n                            error: {\n                                type: error.status,\n                            },\n                        });\n                    },\n                });\n        });\n    }\n\n    public ngOnDestroy(): void {\n        this.outputsSubject.complete();\n    }\n}\n\n/**\n * A component that instantiates the dashboard\n */\n@Component({\n    selector: "custom-configurator-section-example",\n    templateUrl: "./custom-configurator-section.example.component.html",\n    styleUrls: ["./custom-configurator-section.example.component.less"],\n})\nexport class CustomConfiguratorSectionExampleComponent implements OnInit {\n    // This variable will hold all the data needed to define the layout and behavior of the widgets.\n    // Pass this to the dashboard component\'s dashboard input in the template.\n    public dashboard: IDashboard | undefined;\n\n    // Angular gridster requires a configuration object even if it\'s empty.\n    // Pass this to the dashboard component\'s gridsterConfig input in the template.\n    public gridsterConfig: GridsterConfig = {};\n\n    // Boolean which dashboard takes in as an input if its true it allows you to move widgets around.\n    public editMode: boolean = false;\n\n    constructor(\n        // WidgetTypesService provides the widget\'s necessary structure information\n        private widgetTypesService: WidgetTypesService,\n\n        // In general, the ProviderRegistryService is used for making entities available for injection into dynamically loaded components.\n        private providerRegistry: ProviderRegistryService,\n\n        // Inject the ComponentRegistryService to make our custom component available for late loading by the dashboards framework\n        private componentRegistry: ComponentRegistryService,\n\n        private changeDetectorRef: ChangeDetectorRef\n    ) {}\n\n    public ngOnInit(): void {\n        // Grab the widget\'s default template which will be needed as a parameter for setNode.\n        const widgetTemplate = this.widgetTypesService.getWidgetType("kpi", 1);\n\n        // Replace the default KPI description configuration component with our custom one.\n        // Note: This could also be done in the parent module\'s constructor to give\n        // multiple dashboards access to the same custom configurator section.\n        this.widgetTypesService.setNode(\n            widgetTemplate,\n            "configurator",\n            WellKnownPathKey.TileDescriptionConfigComponentType,\n            CustomKpiDescriptionConfigurationComponent.lateLoadKey\n        );\n\n        // Register the custom configurator section with the component registry to make it available\n        // for late loading by the dashboards framework.\n        this.componentRegistry.registerByLateLoadKey(\n            CustomKpiDescriptionConfigurationComponent\n        );\n\n        // Register our data sources as dropdown options in the widget editor/configurator\n        // Note: This could also be done in the parent module\'s constructor so that\n        // multiple dashboards could have access to the same widget template modification.\n        this.widgetTypesService.setNode(\n            // This is the template we grabbed above with getWidgetType\n            widgetTemplate,\n            // We are setting the editor/configurator part of the widget template\n            "configurator",\n            // This indicates which node you are changing and we want to change\n            // the data source providers available for selection in the editor.\n            WellKnownPathKey.DataSourceProviders,\n            // We are setting the data sources available for selection in the editor\n            [\n                AverageRatingKpiDataSource.providerId,\n                RatingsCountKpiDataSource.providerId,\n            ]\n        );\n\n        // Register the data sources available for injection into the KPI tiles.\n        // Note: Each tile of a KPI widget is assigned its own instance of a data source\n        this.providerRegistry.setProviders({\n            [AverageRatingKpiDataSource.providerId]: {\n                provide: DATA_SOURCE,\n                useClass: AverageRatingKpiDataSource,\n                // Any dependencies that need to be injected into the provider must be listed here\n                deps: [HttpClient],\n            },\n            [RatingsCountKpiDataSource.providerId]: {\n                provide: DATA_SOURCE,\n                useClass: RatingsCountKpiDataSource,\n                deps: [HttpClient],\n            },\n        });\n\n        this.initializeDashboard();\n    }\n\n    public initializeDashboard(): void {\n        // We\'re using a static configuration object for this example (see widgetConfig at the bottom of the file),\n        // but this is where the widget\'s configuration could potentially be populated from a database\n        const kpiWidget = widgetConfig;\n        const widgetIndex: IWidgets = {\n            // Complete the KPI widget with information coming from its type definition\n            [kpiWidget.id]:\n                this.widgetTypesService.mergeWithWidgetType(kpiWidget),\n        };\n\n        // Setting the widget dimensions and position (this is for gridster)\n        const positions: Record<string, GridsterItem> = {\n            [kpiWidget.id]: {\n                cols: 4,\n                rows: 6,\n                y: 0,\n                x: 0,\n            },\n        };\n\n        // Finally, assigning the variables we created above to the dashboard\n        this.dashboard = {\n            positions,\n            widgets: widgetIndex,\n        };\n    }\n\n    /** Used for restoring widgets state */\n    public reInitializeDashboard(): void {\n        // destroys the components and their providers so the dashboard can re init data\n        this.dashboard = undefined;\n        this.changeDetectorRef.detectChanges();\n\n        this.initializeDashboard();\n    }\n}\n\nconst widgetConfig: IWidget = {\n    id: "widget1",\n    type: "kpi",\n    pizzagna: {\n        [PizzagnaLayer.Configuration]: {\n            [DEFAULT_PIZZAGNA_ROOT]: {\n                providers: {\n                    [WellKnownProviders.Refresher]: {\n                        properties: {\n                            // Configuring the refresher interval so that our data source is invoked every ten minutes\n                            interval: 60 * 10,\n                            enabled: true,\n                        } as IRefresherProperties,\n                    } as Partial<IProviderConfiguration>,\n                },\n            },\n            header: {\n                properties: {\n                    title: "Harry Potter and the Sorcerer\'s Stone",\n                    subtitle: "By J. K. Rowling",\n                },\n            },\n            tiles: {\n                properties: {\n                    nodes: ["kpi1"],\n                },\n            },\n            kpi1: {\n                id: "kpi1",\n                componentType: KpiComponent.lateLoadKey,\n                properties: {\n                    widgetData: {\n                        units: "out of 5 Stars",\n                        label: "Average Rating",\n                    },\n                },\n                providers: {\n                    [WellKnownProviders.DataSource]: {\n                        // Setting the data source providerId for the tile with id "kpi1"\n                        providerId: AverageRatingKpiDataSource.providerId,\n                    } as IProviderConfiguration,\n                    [WellKnownProviders.Adapter]: {\n                        providerId: NOVA_KPI_DATASOURCE_ADAPTER,\n                        properties: {\n                            componentId: "kpi1",\n                            propertyPath: "widgetData",\n                        },\n                    } as IProviderConfiguration,\n                },\n            },\n        },\n    },\n};\n'},18179:(o,e,n)=>{"use strict";n.r(e),n.d(e,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport { NgModule, Type } from "@angular/core";\nimport { RouterModule, Routes } from "@angular/router";\n\nimport { ConfiguratorHeadingService } from "@nova-ui/dashboards";\n\nenum CustomizationModuleRoute {\n    ConfiguratorSection = "configurator-section",\n    Widget = "widget",\n    Formatter = "formatter",\n    DataSourceConfigurator = "data-source-configurator",\n}\n\nconst routes: Routes = [\n    {\n        path: CustomizationModuleRoute.ConfiguratorSection,\n        loadChildren: async () =>\n            import(\n                "./configurator-section/custom-configurator-section.module"\n            ) as object as Promise<Type<any>>,\n    },\n    {\n        path: CustomizationModuleRoute.Widget,\n        loadChildren: async () =>\n            import("./widget/custom-widget.module") as object as Promise<\n                Type<any>\n            >,\n    },\n    {\n        path: CustomizationModuleRoute.Formatter,\n        loadChildren: async () =>\n            import("./formatter/custom-formatter.module") as object as Promise<\n                Type<any>\n            >,\n    },\n    {\n        path: CustomizationModuleRoute.DataSourceConfigurator,\n        loadChildren: async () =>\n            import(\n                "./data-source-configurator/custom-data-source-configurator.module"\n            ) as object as Promise<Type<any>>,\n    },\n];\n\n@NgModule({\n    imports: [RouterModule.forChild(routes)],\n    providers: [ConfiguratorHeadingService],\n})\nexport default class CustomizationModule {}\n'},74114:(o,e,n)=>{"use strict";n.r(e),n.d(e,{default:()=>t});const t='<h1>Implementing a Custom Data Source Configurator</h1>\n\n<p>\n    In the\n    <a\n        href="../additional-documentation/tutorials/customization/configurator-section.html"\n        target="_parent"\n        >Custom Configurator Section</a\n    >\n    tutorial, we walked through giving users the ability to configure a widget\n    behavior or layout that\'s not configurable out of the box. And, in the\n    <a\n        href="../additional-documentation/tutorials/adding-a-data-source.html"\n        target="_parent"\n        >Adding a Data Source</a\n    >\n    tutorial, we walked through the basics of how to create a data source and\n    register it for use by a widget.\n</p>\n<p>\n    While developing a dashboard, you might find that a statically configured\n    data source isn\'t necessarily flexible enough for your end-users. In fact,\n    they may want the ability to change the configuration of a data source to\n    adjust its output in some way. In this tutorial, we\'ll add user\n    configurability to a data source by creating a custom configurator component\n    that allows the user to select which Harry Potter book and/or metric for\n    which a data source will return a value.\n</p>\n<p>\n    <strong>Note:</strong> Off the shelf, the Nova Dashboards framework provides\n    <code\n        ><a\n            href="../components/DataSourceConfigurationComponent.html"\n            target="_blank"\n            >DataSourceConfigurationComponent</a\n        ></code\n    >\n    which allows the user to select a data source class name from a drop down.\n    In the tutorial, however, we will create a custom configuration component\n    that extends a newer version of the component called\n    <code\n        ><a\n            href="../components/DataSourceConfigurationV2Component.html "\n            target="_blank"\n            >DataSourceConfigurationV2Component</a\n        ></code\n    >\n    This new component has functionality similar to the original, but it adds\n    the ability to present friendly provider names for users to select from\n    instead of just raw class names. Additionally, it allows users to select\n    from any pre-configured properties on the data source.\n</p>\n\n<h2>Fundamental Concepts</h2>\n<ul>\n    <li>\n        <code\n            ><a href="../classes/WidgetTypesService.html" target="_blank"\n                >WidgetTypesService</a\n            ></code\n        >\n    </li>\n    <li>\n        <code\n            ><a\n                href="../injectables/ComponentRegistryService.html"\n                target="_blank"\n                >ComponentRegistryService</a\n            ></code\n        >\n    </li>\n    <li>Custom data source configurator</li>\n    <li>Data source</li>\n</ul>\n<h2>Basic Steps</h2>\n<ol>\n    <li>\n        Follow the instructions\n        <a\n            href="../additional-documentation/getting-started.html"\n            target="_parent"\n            >here</a\n        >\n        to set up your environment for dashboard development.\n    </li>\n    <li>\n        Follow the instructions from previous tutorials to get a basic dashboard\n        up and running.\n    </li>\n    <li>\n        Create a component that extends\n        <code\n            ><a\n                href="../components/DataSourceConfigurationV2Component.html "\n                target="_blank"\n                >DataSourceConfigurationV2Component</a\n            ></code\n        >. Since our properties are going to be editable by the user, we\'ll need\n        to override the properties on the form to be a form group instead of a\n        single form control.\n    </li>\n    <li>\n        Ensure that the following modules are included in the imports of the\n        custom configurator section component\'s parent module:\n        <code>NuiDashboardConfiguratorModule</code>,\n        <code>NuiFormFieldModule</code>, <code>NuiTextboxModule</code>,\n        <code>NuiValidationMessageModule</code>, and\n        <code>NuiSelectV2Module</code>\n    </li>\n    <li>\n        In case you have custom content, like formatters etc., and you use\n        <code>nui-select-v2</code> and <code>nui-combobox-v2</code> components,\n        it is possible that in case of large lists the component overlay may go\n        beyond the configurator heading due to its high z-index. To fix this,\n        use the <code>nui-select-v2</code> and\n        <code>nui-combobox-v2</code> components input\n        <code>popupViewportMargin</code> and pass the height of the configurator\n        heading into it. You can get the height of the configurator heading by\n        simply injecting the\n        <code\n            ><a\n                href="../injectables/ConfiguratorHeadingService.html"\n                target="_blank"\n                >ConfiguratorHeadingService</a\n            ></code\n        >\n        and use its <code>height$</code> observable and async pipe to instantly\n        get the current height of the configurator heading.\n    </li>\n    <li>\n        Create a data source with properties that will be configurable by the\n        end-user. The data source will need to receive updates to those\n        properties by implementing an\n        <code>updateConfiguration</code> method prescribed by the\n        <code\n            ><a href="../interfaces/IConfigurable.html" target="_blank"\n                >IConfigurable</a\n            ></code\n        >\n        interface. This method will be called automatically anytime the user\n        selects a new value for a property.\n    </li>\n    <li>\n        Register the custom configurator component using the\n        <code\n            ><a\n                href="../injectables/ComponentRegistryService.html"\n                target="_blank"\n                >ComponentRegistryService</a\n            ></code\n        >\n        to make it available for late load by the dashboard framework.\n    </li>\n    <li>\n        Use the\n        <code\n            ><a href="../classes/WidgetTypesService.html" target="_blank"\n                >WidgetTypesService</a\n            ></code\n        >\n        to replace the existing configurator component with our custom one.\n    </li>\n</ol>\n<nui-message type="info" [allowDismiss]="false">\n    For details on how to create a custom data source configurator, take a look\n    at the inline comments under the source expander of the following example.\n</nui-message>\n\n<nui-example-wrapper\n    filenamePrefix="custom-data-source-configurator-example"\n    exampleTitle="Custom Data Source Configurator"\n>\n    <custom-data-source-configurator-example></custom-data-source-configurator-example>\n</nui-example-wrapper>\n'},13854:(o,e,n)=>{"use strict";n.r(e),n.d(e,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport { Component } from "@angular/core";\n\n@Component({\n    selector: "nui-custom-data-source-configurator-docs",\n    templateUrl: "./custom-data-source-configurator-docs.component.html",\n})\nexport class CustomDataSourceConfiguratorDocComponent {}\n'},37897:(o,e,n)=>{"use strict";n.r(e),n.d(e,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport { NgModule } from "@angular/core";\nimport { ReactiveFormsModule } from "@angular/forms";\nimport { RouterModule, Routes } from "@angular/router";\n\n// eslint-disable-next-line max-len\nimport {\n    NuiButtonModule,\n    NuiDocsModule,\n    NuiFormFieldModule,\n    NuiIconModule,\n    NuiMessageModule,\n    NuiSelectV2Module,\n    NuiSwitchModule,\n    NuiTextboxModule,\n    NuiValidationMessageModule,\n    DEMO_PATH_TOKEN,\n} from "@nova-ui/bits";\nimport {\n    NuiDashboardConfiguratorModule,\n    NuiDashboardsModule,\n} from "@nova-ui/dashboards";\n\nimport { getDemoFiles } from "../../../../../demo-files-factory";\nimport { CustomDataSourceConfiguratorDocComponent } from "./custom-data-source-configurator-docs.component";\nimport {\n    CustomDataSourceConfiguratorExampleComponent,\n    HarryPotterDataSourceConfiguratorComponent,\n} from "./example/custom-data-source-configurator-example.component";\n\nconst routes: Routes = [\n    {\n        path: "",\n        component: CustomDataSourceConfiguratorDocComponent,\n        data: {\n            srlc: {\n                hideIndicator: true,\n            },\n            showThemeSwitcher: true,\n        },\n    },\n];\n\n@NgModule({\n    imports: [\n        RouterModule.forChild(routes),\n        NuiDocsModule,\n        NuiButtonModule,\n        NuiMessageModule,\n        NuiDashboardConfiguratorModule,\n        NuiDashboardsModule,\n        NuiFormFieldModule,\n        NuiTextboxModule,\n        NuiSwitchModule,\n        NuiSelectV2Module,\n        NuiValidationMessageModule,\n        NuiIconModule,\n        ReactiveFormsModule,\n    ],\n    declarations: [\n        CustomDataSourceConfiguratorDocComponent,\n        CustomDataSourceConfiguratorExampleComponent,\n        HarryPotterDataSourceConfiguratorComponent,\n    ],\n    providers: [\n        {\n            provide: DEMO_PATH_TOKEN,\n            useValue: getDemoFiles("data-source-configurator"),\n        },\n    ],\n})\nexport default class CustomDataSourceConfiguratorModuleRoute {}\n'},11424:(o,e,n)=>{"use strict";n.r(e),n.d(e,{default:()=>t});const t='<div class="mb-2 d-flex align-items-center">\n    <nui-switch class="ml-3 py-2" [(value)]="editMode" i18n>\n        Edit Mode\n    </nui-switch>\n</div>\n\n<div class="w-100 dashboard">\n    \x3c!--\n        Note: The dashboard and gridsterConfig input assignments must use banana-in-a-box notation to keep\n        the dashboard state updated with changes to the pizzagna.\n    --\x3e\n    <nui-dashboard\n        [(dashboard)]="dashboard"\n        [editMode]="editMode"\n        [(gridsterConfig)]="gridsterConfig"\n        nuiWidgetEditor\n    >\n    </nui-dashboard>\n</div>\n'},46648:(o,e,n)=>{"use strict";n.r(e),n.d(e,{default:()=>t});const t='@import (reference) "@nova-ui/bits/sdk/less/nui-framework-variables";\n@import (reference) "@nova-ui/bits/sdk/less/mixins";\n\n.dashboard {\n    height: 400px;\n}\n\n.datasource-configuration {\n    &__accordion-content {\n        padding: @nui-space-md @nui-space-md @nui-space-md\n            (@nui-space-md * 2 + @icon-size-default);\n    }\n}\n\n.custom-data-source-configurator__text-truncate {\n    .text-overflow(ellipsis);\n}\n'},24768:(o,e,n)=>{"use strict";n.r(e),n.d(e,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport { HttpClient, HttpErrorResponse } from "@angular/common/http";\nimport {\n    ChangeDetectorRef,\n    Component,\n    Inject,\n    Injectable,\n    Injector,\n    OnDestroy,\n    OnInit,\n} from "@angular/core";\nimport { FormBuilder, Validators } from "@angular/forms";\nimport { GridsterConfig, GridsterItem } from "angular-gridster2";\nimport { BehaviorSubject } from "rxjs";\nimport { finalize } from "rxjs/operators";\n\nimport {\n    DataSourceService,\n    EventBus,\n    IEvent,\n    IFilteringOutputs,\n    LoggerService,\n} from "@nova-ui/bits";\nimport {\n    ComponentRegistryService,\n    ConfiguratorHeadingService,\n    DataSourceConfigurationV2Component,\n    DATA_SOURCE,\n    DEFAULT_PIZZAGNA_ROOT,\n    IConfigurable,\n    IDashboard,\n    IKpiData,\n    IProperties,\n    IProviderConfiguration,\n    IRefresherProperties,\n    IWidget,\n    IWidgets,\n    KpiComponent,\n    NOVA_KPI_DATASOURCE_ADAPTER,\n    PizzagnaLayer,\n    PIZZAGNA_EVENT_BUS,\n    ProviderRegistryService,\n    WellKnownPathKey,\n    WellKnownProviders,\n    WidgetTypesService,\n} from "@nova-ui/dashboards";\n\n/**\n * This component will serve as the data source accordion in the configurator.\n */\n@Component({\n    selector: "harry-potter-data-source-configurator",\n    styleUrls: ["./custom-data-source-configurator-example.component.less"],\n    template: `\n        <nui-widget-editor-accordion\n            [formGroup]="form"\n            [state]="form | nuiWidgetEditorAccordionFormState | async"\n        >\n            <div accordionHeader class="d-flex align-items-center pl-4 py-2">\n                <nui-icon\n                    class="align-self-start pt-2"\n                    [icon]="form | nuiFormHeaderIconPipe : \'database\' | async"\n                ></nui-icon>\n                <div class="d-flex flex-column ml-4 pt1">\n                    <span class="nui-text-label" i18n>Data Source</span>\n                    <div\n                        class="nui-text-secondary"\n                        title="Harry Potter Books"\n                        i18n-title\n                        i18n\n                    >\n                        Harry Potter Books\n                    </div>\n                </div>\n            </div>\n            <div\n                class="datasource-configuration__accordion-content"\n                formGroupName="properties"\n            >\n                <nui-form-field\n                    caption="Books"\n                    [control]="form.get(\'properties\')?.get(\'bookId\')"\n                >\n                    <nui-select-v2\n                        placeholder="Select book"\n                        i18n-placeholder\n                        [popupViewportMargin]="\n                            configuratorHeading.height$ | async\n                        "\n                        formControlName="bookId"\n                    >\n                        <nui-select-v2-option\n                            *ngFor="let book of books"\n                            [value]="book.id"\n                            [displayValueContext]="book"\n                        >\n                            {{ book.title }}\n                        </nui-select-v2-option>\n                    </nui-select-v2>\n                </nui-form-field>\n            </div>\n            <div\n                class="datasource-configuration__accordion-content"\n                formGroupName="properties"\n            >\n                <nui-form-field\n                    caption="Metrics"\n                    [control]="form.get(\'properties\')?.get(\'metric\')"\n                >\n                    <nui-select-v2\n                        placeholder="Select metric"\n                        [popupViewportMargin]="\n                            configuratorHeading.height$ | async\n                        "\n                        i18n-placeholder\n                        formControlName="metric"\n                    >\n                        <nui-select-v2-option\n                            *ngFor="let metric of metrics"\n                            [value]="metric.id"\n                        >\n                            {{ metric.label }}\n                        </nui-select-v2-option>\n                    </nui-select-v2>\n                </nui-form-field>\n            </div>\n        </nui-widget-editor-accordion>\n    `,\n})\n@Injectable()\nexport class HarryPotterDataSourceConfiguratorComponent\n    extends DataSourceConfigurationV2Component\n    implements OnInit\n{\n    // This lateLoadKey allows the component to be able to be registered by the componentRegistry\n    public static lateLoadKey = "HarryPotterDataSourceConfiguratorComponent";\n\n    // Array of books that will populate the book select\n    public books = [\n        {\n            id: "5MQFrgEACAAJ",\n            title: $localize`Harry Potter and the Sorcerer\'s Stone`,\n        },\n        {\n            id: "5iTebBW-w7QC",\n            title: $localize`Harry Potter and the Chamber of Secrets`,\n        },\n    ];\n\n    // Array of metrics that will populate the metric select\n    public metrics = [\n        {\n            id: "averageRating",\n            label: $localize`Average Rating`,\n        },\n        {\n            id: "ratingsCount",\n            label: $localize`Ratings Count`,\n        },\n    ];\n\n    // These need to be injected because DataSourceConfigurationV2Component uses them\n    constructor(\n        changeDetector: ChangeDetectorRef,\n        configuratorHeading: ConfiguratorHeadingService,\n        formBuilder: FormBuilder,\n        providerRegistryService: ProviderRegistryService,\n        @Inject(PIZZAGNA_EVENT_BUS) eventBus: EventBus<IEvent>,\n        injector: Injector,\n        logger: LoggerService\n    ) {\n        super(\n            changeDetector,\n            configuratorHeading,\n            formBuilder,\n            providerRegistryService,\n            eventBus,\n            injector,\n            logger\n        );\n    }\n\n    // Overriding \'ngOnInit\' to add custom controls to the \'properties\' form group\n    public ngOnInit(): void {\n        super.ngOnInit();\n\n        // Overriding the \'properties\' control on the form to create a form group that accommodates our custom properties\n        this.form.setControl(\n            "properties",\n            this.formBuilder.group({\n                bookId: [this.properties?.bookId ?? "", Validators.required],\n                metric: [this.properties?.metric ?? "", Validators.required],\n            })\n        );\n        // The default data source control has a required validator we\'re removing that validator here since we aren\'t using it.\n        this.form.setControl("dataSource", this.formBuilder.control(null));\n        // Here we set the providerId to our only data source so when a new tile gets created it will default to it.\n        this.form.get("providerId")?.setValue(AcmeKpiDataSource.providerId);\n        // Here we subscribe to the form and if there are any changes we invoke the data source\n        this.form.valueChanges.subscribe((value) => {\n            if (!value.providerId) {\n                return;\n            }\n            this.invokeDataSource(value);\n        });\n    }\n}\n\n/**\n * A simple KPI data source to retrieve the average rating of Harry Potter and the Sorcerer\'s Stone (book) via googleapis\n */\n@Injectable()\nexport class AcmeKpiDataSource\n    extends DataSourceService<IKpiData>\n    implements OnDestroy, IConfigurable\n{\n    // This is the ID we\'ll use to identify the provider\n    public static providerId = "AcmeKpiDataSource";\n\n    // Use this subject to communicate the data source\'s busy state\n    public busy = new BehaviorSubject<boolean>(false);\n\n    public properties: IProperties;\n\n    constructor(private http: HttpClient) {\n        super();\n    }\n\n    // This function MUST be implemented in order to receive property updates from our configurator\n    public updateConfiguration(properties: IProperties): void {\n        // Saving the properties because we will need it for this data source.\n        this.properties = properties;\n    }\n\n    // In this example, getFilteredData is invoked every 10 minutes (Take a look at the refresher\n    // provider definition in the widget configuration below to see how the interval is set)\n    public async getFilteredData(): Promise<IFilteringOutputs> {\n        // For loading indicator to show\n        this.busy.next(true);\n        return new Promise((resolve) => {\n            // *** Make a resource request to an external API (if needed)\n            this.http\n                .get(\n                    `https://www.googleapis.com/books/v1/volumes/${this.properties?.bookId}`\n                )\n                // For loading indicator to be hidden\n                .pipe(finalize(() => this.busy.next(false)))\n                .subscribe({\n                    next: (data: any) => {\n                        resolve({\n                            result: {\n                                value: data.volumeInfo[this.properties?.metric],\n                            },\n                        });\n                    },\n                    error: (error: HttpErrorResponse) => {\n                        resolve({\n                            result: null,\n                            error: {\n                                type: error.status,\n                            },\n                        });\n                    },\n                });\n        });\n    }\n\n    public ngOnDestroy(): void {\n        this.outputsSubject.complete();\n    }\n}\n\n/**\n * A component that instantiates the dashboard\n */\n@Component({\n    selector: "custom-data-source-configurator-example",\n    templateUrl: "./custom-data-source-configurator-example.component.html",\n    styleUrls: ["./custom-data-source-configurator-example.component.less"],\n})\nexport class CustomDataSourceConfiguratorExampleComponent implements OnInit {\n    // This variable will hold all the data needed to define the layout and behavior of the widgets.\n    // Pass this to the dashboard component\'s dashboard input in the template.\n    public dashboard: IDashboard;\n\n    // Angular gridster requires a configuration object even if it\'s empty.\n    // Pass this to the dashboard component\'s gridsterConfig input in the template.\n    public gridsterConfig: GridsterConfig = {};\n\n    // Boolean which dashboard takes in as an input if its true it allows you to move widgets around.\n    public editMode: boolean = false;\n\n    constructor(\n        // WidgetTypesService provides the widget\'s necessary structure information\n        private widgetTypesService: WidgetTypesService,\n\n        // In general, the ProviderRegistryService is used for making entities available for injection into dynamically loaded components.\n        private providerRegistry: ProviderRegistryService,\n\n        // Inject the ComponentRegistryService to make our custom component available for late loading by the dashboards framework\n        private componentRegistry: ComponentRegistryService\n    ) {}\n\n    public ngOnInit(): void {\n        // Registering the new data source configurator so it can be used.\n        this.componentRegistry.registerByLateLoadKey(\n            HarryPotterDataSourceConfiguratorComponent\n        );\n        // Registering the data source for injection into the KPI tile.\n        // Note: Each tile of a KPI widget is assigned its own instance of the data source\n        this.providerRegistry.setProviders({\n            [AcmeKpiDataSource.providerId]: {\n                provide: DATA_SOURCE,\n                useClass: AcmeKpiDataSource,\n                // Any dependencies that need to be injected into the provider must be listed here\n                deps: [HttpClient],\n            },\n        });\n\n        const kpiWidgetTemplate = this.widgetTypesService.getWidgetType(\n            "kpi",\n            1\n        );\n\n        this.widgetTypesService.setNode(\n            // This is the template we grabbed above with getWidgetType\n            kpiWidgetTemplate,\n            // We are setting the editor/configurator part of the widget template\n            "configurator",\n            // This is the path to go to the data source config component type.\n            WellKnownPathKey.DataSourceConfigComponentType,\n            // We are changing it to use the component we just created above instead of the default.\n            HarryPotterDataSourceConfiguratorComponent.lateLoadKey\n        );\n\n        // We\'re using a static configuration object for this example, but this is where\n        // the widget\'s configuration could potentially be populated from a database\n        const kpiWidget = widgetConfig;\n        const widgetIndex: IWidgets = {\n            // Complete the KPI widget with information coming from its type definition\n            [kpiWidget.id]:\n                this.widgetTypesService.mergeWithWidgetType(kpiWidget),\n        };\n\n        // Setting the widget dimensions and position (this is for gridster)\n        const positions: Record<string, GridsterItem> = {\n            [kpiWidget.id]: {\n                cols: 4,\n                rows: 6,\n                y: 0,\n                x: 0,\n            },\n        };\n\n        // Finally, assigning the variables we created above to the dashboard\n        this.dashboard = {\n            positions,\n            widgets: widgetIndex,\n        };\n    }\n}\n\nconst widgetConfig: IWidget = {\n    id: "widget1",\n    type: "kpi",\n    pizzagna: {\n        [PizzagnaLayer.Configuration]: {\n            [DEFAULT_PIZZAGNA_ROOT]: {\n                providers: {\n                    [WellKnownProviders.Refresher]: {\n                        properties: {\n                            // Configuring the refresher interval so that our data source is invoked every ten minutes\n                            interval: 60 * 10,\n                            enabled: true,\n                        } as IRefresherProperties,\n                    } as Partial<IProviderConfiguration>,\n                },\n            },\n            header: {\n                properties: {\n                    title: "Harry Potter and the Sorcerer\'s Stone",\n                    subtitle: "By J. K. Rowling",\n                },\n            },\n            tiles: {\n                properties: {\n                    nodes: ["kpi1"],\n                },\n            },\n            kpi1: {\n                id: "kpi1",\n                componentType: KpiComponent.lateLoadKey,\n                properties: {\n                    widgetData: {\n                        units: "out of 5 Stars",\n                        label: "Average Rating",\n                    },\n                },\n                providers: {\n                    [WellKnownProviders.DataSource]: {\n                        // Setting the data source providerId for the tile with id "kpi1"\n                        providerId: AcmeKpiDataSource.providerId,\n                        properties: {\n                            bookId: "5MQFrgEACAAJ",\n                            metric: "averageRating",\n                        },\n                    } as IProviderConfiguration,\n                    [WellKnownProviders.Adapter]: {\n                        providerId: NOVA_KPI_DATASOURCE_ADAPTER,\n                        properties: {\n                            componentId: "kpi1",\n                            propertyPath: "widgetData",\n                        },\n                    } as IProviderConfiguration,\n                },\n            },\n        },\n    },\n};\n'},1983:(o,e,n)=>{"use strict";n.r(e),n.d(e,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport { NgModule } from "@angular/core";\nimport { ReactiveFormsModule } from "@angular/forms";\nimport { RouterModule, Routes } from "@angular/router";\n\n// eslint-disable-next-line max-len\nimport {\n    NuiButtonModule,\n    NuiDocsModule,\n    NuiFormFieldModule,\n    NuiIconModule,\n    NuiMessageModule,\n    NuiSelectV2Module,\n    NuiSwitchModule,\n    NuiTextboxModule,\n    NuiValidationMessageModule,\n    DEMO_PATH_TOKEN,\n} from "@nova-ui/bits";\nimport { NuiDashboardsModule } from "@nova-ui/dashboards";\n\nimport { getDemoFiles } from "../../../../../demo-files-factory";\nimport { CustomDonutContentFormatterDocComponent } from "./donut-content-formatter-example/custom-donut-content-formatter-docs.component";\nimport {\n    CustomDonutContentFormatterComponent,\n    CustomDonutContentFormatterConfiguratorComponent,\n    CustomDonutContentFormatterExampleComponent,\n} from "./donut-content-formatter-example/custom-donut-content-formatter-example.component";\nimport { CustomFormatterDocComponent } from "./formatter-example/custom-formatter-docs.component";\nimport {\n    CustomFormatterComponent,\n    CustomFormatterConfiguratorComponent,\n    CustomFormatterExampleComponent,\n} from "./formatter-example/custom-formatter-example.component";\n\nconst routes: Routes = [\n    {\n        path: "table-formatter",\n        component: CustomFormatterDocComponent,\n        data: {\n            srlc: {\n                hideIndicator: true,\n            },\n            showThemeSwitcher: true,\n        },\n    },\n    {\n        path: "donut-content-formatter",\n        component: CustomDonutContentFormatterDocComponent,\n        data: {\n            srlc: {\n                hideIndicator: true,\n            },\n            showThemeSwitcher: true,\n        },\n    },\n];\n\n@NgModule({\n    imports: [\n        RouterModule.forChild(routes),\n        NuiDocsModule,\n        NuiButtonModule,\n        NuiMessageModule,\n        NuiDashboardsModule,\n        NuiFormFieldModule,\n        NuiTextboxModule,\n        NuiSwitchModule,\n        NuiSelectV2Module,\n        NuiValidationMessageModule,\n        NuiIconModule,\n        ReactiveFormsModule,\n    ],\n    declarations: [\n        CustomDonutContentFormatterComponent,\n        CustomDonutContentFormatterExampleComponent,\n        CustomDonutContentFormatterConfiguratorComponent,\n        CustomDonutContentFormatterDocComponent,\n        CustomFormatterDocComponent,\n        CustomFormatterExampleComponent,\n        CustomFormatterConfiguratorComponent,\n        CustomFormatterComponent,\n    ],\n    providers: [\n        {\n            provide: DEMO_PATH_TOKEN,\n            useValue: getDemoFiles("formatter"),\n        },\n    ],\n})\nexport default class CustomFormatterModuleRoute {}\n'},37792:(o,e,n)=>{"use strict";n.r(e),n.d(e,{default:()=>t});const t='<h1>Custom Formatter for the Donut Chart Content</h1>\n\n<h2>Basic Steps</h2>\n<ol>\n    <li>\n        Follow the instructions from previous tutorials to get a basic dashboard\n        up and running.\n    </li>\n    <li>\n        Create a component that will format the donut chart\'s content. It will\n        take as an input the data that\'s normally displayed as a raw value. In\n        this tutorial, our formatter will do the following:\n        <ul>\n            <li>Display the selected metric name</li>\n            <li>Display the selected metric\'s value</li>\n            <li>\n                Convert and change the selected metric\'s value depending on the\n                unit type selected\n            </li>\n            <li>\n                Change the selected metric name and value depending on whether\n                user interacts with the chart\n            </li>\n        </ul>\n    </li>\n    <li>\n        Create a component that extends\n        <code\n            ><a\n                href="../classes/DonutChartFormatterConfiguratorComponent.html"\n                target="_blank"\n                >DonutChartFormatterConfiguratorComponent</a\n            ></code\n        >. This component will serve as the custom configurator section. If you\n        have any custom form controls make sure to override\n        <code>DonutChartFormatterConfiguratorComponent</code>\'s\n        <code>addCustomFormControls</code> method and add the custom form\n        controls using the form group argument. The controls in this form group\n        will be available under the <code>properties</code> input on the\n        formatter.\n    </li>\n    <li>\n        Ensure that the following modules are included in the imports of the\n        custom configurator section component\'s parent module:\n        <code>NuiFormFieldModule</code>,\n        <code>NuiValidationMessageModule</code>, and\n        <code>NuiSelectV2Module</code>\n    </li>\n    <li>\n        Add the custom formatter and configurator section component class names\n        to the declarations of the module(s) in which they\'re implemented. In\n        this example, the class names are\n        <code>CustomDonutContentFormatterComponent</code> and\n        <code>CustomDonutContentFormatterConfiguratorComponent</code>\n        respectively.\n    </li>\n    <li>\n        Prepare the dashboard framework to use our custom components by doing\n        the following:\n        <ol>\n            <li>\n                Register the custom formatter and custom configurator section\n                components using the\n                <code\n                    ><a\n                        href="../injectables/ComponentRegistryService.html"\n                        target="_blank"\n                        >ComponentRegistryService</a\n                    ></code\n                >. This will make them available for late load by the dashboard\n                framework.\n            </li>\n            <li>\n                Register the formatter definitions of type\n                <code\n                    ><a\n                        href="../interfaces/IFormatterDefinition.html"\n                        target="_blank"\n                        >IFormatterDefinition</a\n                    ></code\n                >\n                using the\n                <code\n                    ><a\n                        href="../classes/WidgetTypesService.html"\n                        target="_blank"\n                        >WidgetTypesService</a\n                    ></code\n                >.\n            </li>\n            <nui-message type="info" [allowDismiss]="false">\n                <strong>Note:</strong> In this tutorial, the above two steps are\n                performed in the component\'s <code>constructor</code>. But, in a\n                real-world app, widget type modifications and component\n                registrations like this might make more sense in a parent\n                module\'s constructor. Moving framework initialization procedures\n                such as these to a higher level in an app\'s hierarchy ensures\n                that multiple dashboard instances within a common parent module\n                have access to the same modifications.\n            </nui-message>\n        </ol>\n    </li>\n\n    <li>\n        At this point you should be able to open the widget editor using the\n        Edit button in the menu at the top-right corner of the widget. Once the\n        editor is open, expand the <code>Chart Options</code> section. The\n        custom component we created should be displayed in the\n        <code>Custom format</code> select.\n    </li>\n    <li>\n        Observe how additional selects <code>Metrics</code> and\n        <code>Units</code> appeared under the formatter menu. The\n        <code>Metrics</code> one enables users to select a specific metric to\n        show it\'s info in the chart content. The <code>Units</code> one allows\n        users to select different units to display that would format the\n        metric\'s data to a selected unit format.\n    </li>\n    <li>\n        Choose your options and save changes, then quit the edit mode. Hover\n        over either the chart legend, or chart\'s segments to see how the donut\n        chart content data is changed dynamically.\n    </li>\n    <li>\n        In case you you use <code>nui-select-v2</code> and\n        <code>nui-combobox-v2</code> components, it is possible that in case of\n        large lists the component overlay may go beyond the configurator heading\n        due to its high z-index. To fix this, use the\n        <code>nui-select-v2</code> and <code>nui-combobox-v2</code> components\n        input <code>popupViewportMargin</code> and pass the height of the\n        configurator heading into it. You can get the height of the configurator\n        heading by simply injecting the\n        <code\n            ><a\n                href="../injectables/ConfiguratorHeadingService.html"\n                target="_blank"\n                >ConfiguratorHeadingService</a\n            ></code\n        >\n        and use its <code>height$</code> observable and async pipe to instantly\n        get the current height of the configurator heading.\n    </li>\n</ol>\n\n<nui-message type="info" [allowDismiss]="false">\n    For details on how to create a custom formatter, take a look at the inline\n    comments under the source expander of the following example.\n</nui-message>\n\n<nui-example-wrapper\n    filenamePrefix="custom-donut-content-formatter-example"\n    exampleTitle="Custom Formatter"\n>\n    <custom-donut-content-formatter-example></custom-donut-content-formatter-example>\n</nui-example-wrapper>\n'},11968:(o,e,n)=>{"use strict";n.r(e),n.d(e,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport { Component } from "@angular/core";\n\n@Component({\n    selector: "nui-custom-donut-content-formatter-docs",\n    templateUrl: "./custom-donut-content-formatter-docs.component.html",\n})\nexport class CustomDonutContentFormatterDocComponent {}\n'},40591:(o,e,n)=>{"use strict";n.r(e),n.d(e,{default:()=>t});const t='<div class="mb-2 d-flex align-items-center">\n    <nui-switch class="ml-3 py-2" [(value)]="editMode" i18n>\n        Edit Mode\n    </nui-switch>\n    <button\n        *ngIf="!dashboard?.widgets[\'proportionalWidgetId\']"\n        type="button"\n        displayStyle="action"\n        (click)="reInitializeDashboard()"\n        nui-button\n    >\n        Restore Widget\n    </button>\n</div>\n\n<div class="w-100 dashboard">\n    \x3c!--\n        Note: The dashboard and gridsterConfig input assignments must use banana-in-a-box notation to keep\n        the dashboard state updated with changes to the pizzagna.\n    --\x3e\n    <nui-dashboard\n        *ngIf="dashboard"\n        [(dashboard)]="dashboard"\n        [editMode]="editMode"\n        [(gridsterConfig)]="gridsterConfig"\n        nuiWidgetEditor\n    >\n    </nui-dashboard>\n</div>\n'},96059:(o,e,n)=>{"use strict";n.r(e),n.d(e,{default:()=>t});const t=".dashboard {\n    height: 400px;\n}\n\n.custom-formatter-configurator__icon-select-template {\n    height: 20px;\n}\n"},34615:(o,e,n)=>{"use strict";n.r(e),n.d(e,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport { HttpClient } from "@angular/common/http";\nimport {\n    ChangeDetectorRef,\n    Component,\n    Injectable,\n    Input,\n    OnChanges,\n    OnDestroy,\n    OnInit,\n    SimpleChanges,\n} from "@angular/core";\nimport { FormBuilder, FormGroup, Validators } from "@angular/forms";\nimport { GridsterConfig, GridsterItem } from "angular-gridster2";\nimport { Subject } from "rxjs";\nimport { takeUntil, tap } from "rxjs/operators";\n\nimport {\n    DataSourceService,\n    IconService,\n    IDataSource,\n    IFilteringOutputs,\n    LoggerService,\n} from "@nova-ui/bits";\nimport {\n    ChartAssist,\n    IAccessors,\n    IChartAssistEvent,\n    IChartAssistSeries,\n} from "@nova-ui/charts";\nimport {\n    ComponentRegistryService,\n    ConfiguratorHeadingService,\n    DATA_SOURCE,\n    DonutChartFormatterConfiguratorComponent,\n    DonutContentPercentageConfigurationComponent,\n    DonutContentPercentageFormatterComponent,\n    DonutContentSumFormatterComponent,\n    IDashboard,\n    IFormatterDefinition,\n    IHasChangeDetector,\n    IProperties,\n    IProportionalWidgetChartOptions,\n    IProportionalWidgetConfig,\n    IProviderConfiguration,\n    IWidget,\n    IWidgets,\n    LegendPlacement,\n    PizzagnaLayer,\n    ProportionalWidgetChartTypes,\n    ProviderRegistryService,\n    WellKnownPathKey,\n    WellKnownProviders,\n    WidgetTypesService,\n} from "@nova-ui/dashboards";\n\nexport enum Units {\n    Days = "Day(s)",\n    Weeks = "Week(s)",\n    Hours = "Hour(s)",\n}\n\n@Component({\n    selector: "custom-donut-content-formatter",\n    host: { class: "d-flex flex-column align-items-center" },\n    template: `<ng-container>\n        <div class="nui-text-panel">\n            \x3c!-- First we look at the metric currently being hovered,\n                             then, if not interaction occurs we take currently selected metric,\n                             finally, we fall back to the very first element if none were selected so far --\x3e\n            {{ chartMetric || properties?.currentMetric || data[0].id }}\n        </div>\n        <div class="nui-text-page">\n            {{ chartContent }}\n        </div>\n        <div class="nui-text-secondary">\n            {{ units }}\n        </div>\n    </ng-container>`,\n    styleUrls: ["./custom-donut-content-formatter-example.component.less"],\n})\nexport class CustomDonutContentFormatterComponent\n    implements IHasChangeDetector, OnInit, OnChanges\n{\n    public static lateLoadKey = "CustomDonutContentFormatterComponent";\n\n    // Used to emphasize the chart series when user interacts either with the chart legend, or chart segments.\n    public emphasizedSeriesData: IChartAssistSeries<IAccessors> | undefined;\n\n    // Current raw value of the metric to display\n    public currentMetricData: number;\n\n    // Metric value rendered inside the template, when user selects a metric, and gets automatically recalculated depending on selected units\n    public chartContent: number;\n\n    // Metric value rendered inside the template, when user interacts with either chart legend, or chart segments\n    public chartMetric: number;\n\n    // Units which user can select from the configuration\n    public units: Units = Units.Days;\n\n    private readonly destroy$ = new Subject<void>();\n\n    constructor(public changeDetector: ChangeDetectorRef) {}\n\n    // The data we receive from the chart, including metrics names and their values\n    @Input() data: IChartAssistSeries<IAccessors>[];\n\n    // We use this chart assist instance to subscribe to the events triggered when an interaction with the chart occurs\n    @Input() chartAssist: ChartAssist;\n\n    // These are the current properties from pizzagna. Used to use data set at the configuration layer\n    @Input() properties: IProperties;\n\n    public ngOnChanges(changes: SimpleChanges): void {\n        if (changes.properties || !this.properties) {\n            // If current metric is not in the list of metrics any more we fall back to the very first one from the list we get from the datasource\n            this.currentMetricData =\n                this.data.find(\n                    (item) => item.id === this.properties?.currentMetric\n                )?.data[0] || this.data[0].data[0];\n\n            // We either take the selected value, or fall back to the preselected default one\n            this.units = this.properties?.units || this.units;\n        }\n\n        this.setContentValue();\n    }\n\n    public ngOnInit(): void {\n        // Here \'chartAssistSubject\' is the entity that emits events every time user interacts with either chart legend, or chart segments.\n        // Subscribing to properly react on these kind of events\n        this.chartAssist.chartAssistSubject\n            .pipe(\n                tap(\n                    (data: IChartAssistEvent) =>\n                        (this.emphasizedSeriesData = this.data.find(\n                            (item) => item.id === data.payload.seriesId\n                        ))\n                ),\n                tap(() => this.setContentValue()),\n                tap(() => this.setMetricValue()),\n                takeUntil(this.destroy$)\n            )\n            .subscribe();\n    }\n\n    public getConvertedData(emphData: number): number {\n        // Recalculating data depending on the units user selected from the configuration view\n        switch (this.units) {\n            case Units.Weeks:\n                return this.emphasizedSeriesData\n                    ? this.convertToWeeks(emphData)\n                    : this.convertToWeeks(this.currentMetricData);\n\n            case Units.Hours:\n                return this.emphasizedSeriesData\n                    ? this.convertToHours(emphData)\n                    : this.convertToHours(this.currentMetricData);\n\n            default:\n                return this.emphasizedSeriesData\n                    ? emphData\n                    : this.currentMetricData;\n        }\n    }\n\n    public setContentValue(): void {\n        this.chartContent = this.getConvertedData(\n            this.emphasizedSeriesData?.data[0]\n        );\n    }\n\n    public setMetricValue(): void {\n        this.chartMetric = this.emphasizedSeriesData\n            ? this.data.find(\n                  (item) =>\n                      this.getConvertedData(item.data[0]) ===\n                      this.getConvertedData(this.emphasizedSeriesData?.data[0])\n              )?.id\n            : // if metric was not initially selected we fall back to the very first one\n              this.properties?.currentMetric || this.data[0].id;\n    }\n\n    private convertToWeeks(days: number | undefined): number {\n        return days ? Number((days / 7).toFixed(2)) : 0;\n    }\n\n    private convertToHours(days: number | undefined): number {\n        return days ? Number((days * 24).toFixed(2)) : 0;\n    }\n}\n\n@Component({\n    selector: "custom-donut-content-formatter-configurator",\n    styleUrls: ["./custom-donut-content-formatter-example.component.less"],\n    template: `\n        <div [formGroup]="form">\n            <div class="mt-4">\n                <nui-form-field\n                    caption="Metrics"\n                    i18n-caption\n                    class="mb-3"\n                    [control]="currentMetric"\n                >\n                    <nui-select-v2\n                        formControlName="currentMetric"\n                        [formControl]="currentMetric"\n                        [popupViewportMargin]="\n                            configuratorHeading.height$ | async\n                        "\n                    >\n                        <nui-select-v2-option\n                            *ngFor="let itemValue of dsOutput?.result"\n                            [value]="itemValue?.id"\n                        >\n                            {{ itemValue?.name }}\n                        </nui-select-v2-option>\n                    </nui-select-v2>\n                    <nui-validation-message for="required" i18n>\n                        This field is required\n                    </nui-validation-message>\n                </nui-form-field>\n            </div>\n            <div class="mt-4">\n                <nui-form-field\n                    caption="Units"\n                    i18n-caption\n                    class="mb-3"\n                    [control]="form.controls[\'units\']"\n                >\n                    <nui-select-v2\n                        formControlName="units"\n                        [formControl]="form.controls[\'units\']"\n                        [popupViewportMargin]="\n                            configuratorHeading.height$ | async\n                        "\n                    >\n                        <nui-select-v2-option\n                            *ngFor="let itemValue of availableUnits"\n                            [value]="itemValue"\n                        >\n                            {{ itemValue }}\n                        </nui-select-v2-option>\n                    </nui-select-v2>\n                    <nui-validation-message for="required" i18n>\n                        This field is required\n                    </nui-validation-message>\n                </nui-form-field>\n            </div>\n        </div>\n    `,\n})\nexport class CustomDonutContentFormatterConfiguratorComponent\n    extends DonutChartFormatterConfiguratorComponent\n    implements OnChanges, OnInit, IHasChangeDetector\n{\n    public static lateLoadKey = "CustomFormatterConfiguratorComponent";\n\n    constructor(\n        changeDetector: ChangeDetectorRef,\n        formBuilder: FormBuilder,\n        logger: LoggerService,\n        public iconService: IconService,\n        public configuratorHeading: ConfiguratorHeadingService\n    ) {\n        super(changeDetector, formBuilder, logger);\n    }\n\n    public availableUnits: Units[] = [Units.Days, Units.Hours, Units.Weeks];\n\n    protected addCustomFormControls(form: FormGroup): void {\n        form.addControl(\n            "units",\n            this.formBuilder.control(Units.Days, Validators.required)\n        );\n    }\n}\n\n/**\n * A component that instantiates the dashboard\n */\n@Component({\n    selector: "custom-donut-content-formatter-example",\n    templateUrl: "./custom-donut-content-formatter-example.component.html",\n    styleUrls: ["./custom-donut-content-formatter-example.component.less"],\n})\nexport class CustomDonutContentFormatterExampleComponent implements OnInit {\n    public editMode: boolean = false;\n    // This variable will hold all the data needed to define the layout and behavior of the widgets.\n    // Pass this to the dashboard component\'s dashboard input in the template.\n    public dashboard: IDashboard | undefined;\n\n    // Angular gridster requires a configuration object even if it\'s empty.\n    // Pass this to the dashboard component\'s gridsterConfig input in the template.\n    public gridsterConfig: GridsterConfig = {};\n\n    constructor(\n        // WidgetTypesService provides the widget\'s necessary structure information\n        private widgetTypesService: WidgetTypesService,\n        // In general, the ProviderRegistryService is used for making entities available for injection into dynamically loaded components.\n        private providerRegistry: ProviderRegistryService,\n        // Inject the ComponentRegistryService to make our custom component available for late loading by the dashboards framework\n        private componentRegistry: ComponentRegistryService,\n        private changeDetectorRef: ChangeDetectorRef\n    ) {\n        // Register the custom configurator component with the component registry to make it available\n        // for late loading by the dashboard framework.\n        this.componentRegistry.registerByLateLoadKey(\n            CustomDonutContentFormatterConfiguratorComponent\n        );\n        // Register the custom formatter component with the component registry to make it available\n        // for late loading by the dashboard framework.\n        this.componentRegistry.registerByLateLoadKey(\n            CustomDonutContentFormatterComponent\n        );\n\n        // Grab the widget\'s default template which will be needed as a parameter for setNode below.\n        const proportional = this.widgetTypesService.getWidgetType(\n            "proportional",\n            1\n        );\n\n        const donutFormatters: IFormatterDefinition[] = [\n            {\n                componentType: DonutContentSumFormatterComponent.lateLoadKey,\n                label: $localize`Sum`,\n            } as IFormatterDefinition,\n            {\n                componentType:\n                    DonutContentPercentageFormatterComponent.lateLoadKey,\n                label: $localize`Percentage`,\n                configurationComponent:\n                    DonutContentPercentageConfigurationComponent.lateLoadKey,\n            } as IFormatterDefinition,\n            {\n                componentType: CustomDonutContentFormatterComponent.lateLoadKey,\n                label: $localize`Custom`,\n                // This is a custom configurator that will pop up below the formatter once it gets selected\n                configurationComponent:\n                    CustomDonutContentFormatterConfiguratorComponent.lateLoadKey,\n            } as IFormatterDefinition,\n        ];\n\n        this.widgetTypesService.setNode(\n            // This is the template we grabbed above with getWidgetType\n            proportional,\n            // We are setting the editor/configurator part of the widget template\n            "configurator",\n            // This indicates which node you are changing and we want to change the formatters available for selection in the editor.\n            WellKnownPathKey.Formatters,\n            // We are setting the available formatters with the array we created above.\n            donutFormatters\n        );\n\n        // This sets the donut chart\'s datasource to have the StatusesExampleDatasource so the drop down is filled similar to the line above.\n        this.widgetTypesService.setNode(\n            proportional,\n            "configurator",\n            WellKnownPathKey.DataSourceProviders,\n            [StatusesExampleDatasource.providerId]\n        );\n\n        // Registering the data source for injection into the widget.\n        this.providerRegistry.setProviders({\n            [StatusesExampleDatasource.providerId]: {\n                provide: DATA_SOURCE,\n                useClass: StatusesExampleDatasource,\n                // Any dependencies that need to be injected into the provider must be listed here\n                deps: [],\n            },\n        });\n    }\n\n    public ngOnInit(): void {\n        this.initializeDashboard();\n    }\n\n    /** Used for restoring widgets state */\n    public reInitializeDashboard(): void {\n        // destroys the components and their providers so the dashboard can re init data\n        this.dashboard = undefined;\n        this.changeDetectorRef.detectChanges();\n\n        this.initializeDashboard();\n    }\n\n    public initializeDashboard(): void {\n        // We\'re using a static configuration object for this example, but this is where\n        // the widget\'s configuration could potentially be populated from a database\n        const proportionalWidget = widgetConfig;\n        const widgetIndex: IWidgets = {\n            // Enhance the widget with information coming from it\'s type definition\n            [proportionalWidget.id]:\n                this.widgetTypesService.mergeWithWidgetType(proportionalWidget),\n        };\n\n        // Setting the widget dimensions and position (this is for gridster)\n        const positions: Record<string, GridsterItem> = {\n            [proportionalWidget.id]: {\n                cols: 12,\n                rows: 6,\n                y: 0,\n                x: 0,\n            },\n        };\n\n        // Finally, assigning the variables we created above to the dashboard\n        this.dashboard = {\n            positions,\n            widgets: widgetIndex,\n        };\n    }\n}\n\nexport interface IStatusesWidgetData {\n    id: string;\n    name: string;\n    data: number[];\n}\n\nexport const randomStatusesWidgetData: IStatusesWidgetData[] = [\n    {\n        id: "Down",\n        name: "Down",\n        data: [Math.round(Math.random() * 100)],\n    },\n    {\n        id: "Critical",\n        name: "Critical",\n        data: [Math.round(Math.random() * 100)],\n    },\n    {\n        id: "Warning",\n        name: "Warning",\n        data: [Math.round(Math.random() * 100)],\n    },\n    {\n        id: "Unknown",\n        name: "Unknown",\n        data: [Math.round(Math.random() * 100)],\n    },\n    {\n        id: "Up",\n        name: "Up",\n        data: [Math.round(Math.random() * 100)],\n    },\n    {\n        id: "Unmanaged",\n        name: "Unmanaged",\n        data: [Math.round(Math.random() * 100)],\n    },\n];\n\n@Injectable()\nexport class StatusesExampleDatasource\n    extends DataSourceService<IStatusesWidgetData>\n    implements IDataSource<IStatusesWidgetData>, OnDestroy\n{\n    public static providerId = "StatusesExampleDatasource";\n\n    public busy = new Subject<boolean>();\n\n    constructor(private http: HttpClient) {\n        super();\n    }\n\n    public async getFilteredData(): Promise<IFilteringOutputs> {\n        this.busy.next(true);\n\n        return new Promise((resolve) => {\n            setTimeout(() => {\n                resolve({\n                    result: randomStatusesWidgetData,\n                });\n                this.busy.next(false);\n            }, 1000);\n        });\n    }\n\n    public ngOnDestroy(): void {\n        this.outputsSubject.complete();\n    }\n}\n\nexport const widgetConfig: IWidget = {\n    id: "proportionalWidgetId",\n    type: "proportional",\n    pizzagna: {\n        [PizzagnaLayer.Configuration]: {\n            header: {\n                properties: {\n                    title: "Proportional Widget!",\n                    subtitle: "Proportional widget with legend formatters",\n                },\n            },\n            chart: {\n                providers: {\n                    [WellKnownProviders.DataSource]: {\n                        providerId: StatusesExampleDatasource.providerId,\n                    } as IProviderConfiguration,\n                },\n                properties: {\n                    configuration: {\n                        interactive: true,\n                        chartOptions: {\n                            type: ProportionalWidgetChartTypes.DonutChart,\n                            legendPlacement: LegendPlacement.Right,\n                            contentFormatter: {\n                                componentType:\n                                    CustomDonutContentFormatterComponent.lateLoadKey,\n                                properties: {\n                                    // here you can set the default value for the metric you receive. If not set the first one from the list will be taken\n                                    currentMetric: "Down",\n                                    // here you set the default value for your custom controls. If not set the first one from the list will be taken\n                                    units: Units.Weeks,\n                                },\n                            },\n                        } as IProportionalWidgetChartOptions,\n                        chartColors: [\n                            "var(--nui-color-chart-eight)",\n                            "var(--nui-color-chart-nine)",\n                            "var(--nui-color-chart-ten)",\n                        ],\n                    } as IProportionalWidgetConfig,\n                },\n            },\n        },\n    },\n};\n'},97758:(o,e,n)=>{"use strict";n.r(e),n.d(e,{default:()=>t});const t='<h1>Implementing a Custom Formatter</h1>\n\n<p>\n    In the\n    <a\n        href="../additional-documentation/tutorials/customization/configurator-section.html"\n        target="_parent"\n        >Custom Configurator Section</a\n    >\n    tutorial, we talked about giving users the ability to configure a widget\n    behavior or layout that\'s not configurable out of the box. While developing\n    a dashboard, you may discover a need to give users the ability to add some\n    special layout or styling to the contents of a table cell beyond raw text\n    display or a link. In this tutorial, we\'ll create a custom formatter and a\n    custom configurator component to conditionally add an icon to the contents\n    of a specified column.\n</p>\n\n<nui-message type="info" [allowDismiss]="false">\n    <strong>Note:</strong> Off the shelf, the Nova Dashboards framework provides\n    a\n    <code\n        ><a href="../components/LinkConfiguratorComponent.html" target="_blank"\n            >LinkConfiguratorComponent</a\n        ></code\n    >\n    which allows users pair a value and url to be displayed as a link in a\n    specified column. The corresponding\n    <code\n        ><a href="../components/LinkFormatterComponent.html" target="_blank"\n            >LinkFormatterComponent</a\n        ></code\n    >\n    uses the configurator\'s output to determine which value to use for display\n    and which value to use for the url. The formatter then displays the\n    formatted link in each table cell within the configured column.\n</nui-message>\n\n<h2>Fundamental Concepts</h2>\n<ul>\n    <li>\n        <code\n            ><a href="../classes/WidgetTypesService.html" target="_blank"\n                >WidgetTypesService</a\n            ></code\n        >\n    </li>\n    <li>\n        <code\n            ><a\n                href="../injectables/ComponentRegistryService.html"\n                target="_blank"\n                >ComponentRegistryService</a\n            ></code\n        >\n    </li>\n    <li>Custom configurator section component</li>\n    <li>Custom formatter</li>\n</ul>\n\n<h2>Basic Steps</h2>\n<ol>\n    <li>\n        Follow the instructions\n        <a\n            href="../additional-documentation/getting-started.html"\n            target="_parent"\n            >here</a\n        >\n        to set up your environment for dashboard development.\n    </li>\n    <li>\n        Follow the instructions from previous tutorials to get a basic dashboard\n        up and running.\n    </li>\n    <li>\n        Create a component that will format the contents of a table cell. It\n        will take as an input the data that\'s normally displayed as a raw value\n        in the cell. In this tutorial, our formatter will prepend the data with\n        an icon if the value meets a certain threshold.\n    </li>\n    <li>\n        Create a component that extends\n        <code\n            ><a\n                href="../classes/FormatterConfiguratorComponent.html"\n                target="_blank"\n                >FormatterConfiguratorComponent</a\n            ></code\n        >. This component will serve as the custom configurator section. If you\n        have any custom form controls make sure to override\n        <code>FormatterConfiguratorComponent</code>\'s\n        <code>addCustomFormControls</code> method and add the custom form\n        controls using the form group argument. The controls in this form group\n        will each correspond to an input on the formatter.\n    </li>\n    <li>\n        Ensure that the following modules are included in the imports of the\n        custom configurator section component\'s parent module:\n        <code>NuiFormFieldModule</code>, <code>NuiIconModule</code>,\n        <code>NuiTextboxModule </code>, <code>NuiValidationMessageModule</code>,\n        and <code>NuiSelectV2Module</code>\n    </li>\n    <li>\n        Ensure that the <code>NuiIconModule</code> is included in the imports of\n        the custom formatter component\'s parent module.\n    </li>\n    <li>\n        Add the custom formatter and configurator section component class names\n        to the declarations of the module(s) in which they\'re implemented. In\n        this example, the class names are\n        <code>CustomFormatterComponent</code> and\n        <code>CustomFormatterConfiguratorComponent</code>\n        respectively.\n    </li>\n    <li>\n        Prepare the dashboard framework to use our custom components by doing\n        the following:\n        <ol>\n            <li>\n                Register the custom formatter and custom configurator section\n                components using the\n                <code\n                    ><a\n                        href="../injectables/ComponentRegistryService.html"\n                        target="_blank"\n                        >ComponentRegistryService</a\n                    ></code\n                >. This will make them available for late load by the dashboard\n                framework.\n            </li>\n            <li>\n                Register the formatter definitions of type\n                <code\n                    ><a\n                        href="../interfaces/ITableFormatterDefinition.html"\n                        target="_blank"\n                        >ITableFormatterDefinition</a\n                    ></code\n                >\n                using the\n                <code\n                    ><a\n                        href="../injectables/TableFormatterRegistryService.html"\n                        target="_blank"\n                        >TableFormatterRegistryService</a\n                    >\n                    which is extending (<a\n                        href="../classes/FormatterRegistryService.html"\n                        target="_blank"\n                        >FormatterRegistryService</a\n                    >)</code\n                >.\n            </li>\n            <nui-message type="info" [allowDismiss]="false">\n                <strong>Note:</strong> In this tutorial, the above two steps are\n                performed in the component\'s <code>constructor</code>. But, in a\n                real-world app, widget type modifications and component\n                registrations like this might make more sense in a parent\n                module\'s constructor. Moving framework initialization procedures\n                such as these to a higher level in an app\'s hierarchy ensures\n                that multiple dashboard instances within a common parent module\n                have access to the same modifications.\n            </nui-message>\n        </ol>\n    </li>\n\n    <li>\n        At this point you should be able to open the widget editor using the\n        Edit button in the menu at the top-right corner of the widget. Once the\n        editor is open, expand any of the column sections. The custom component\n        we created should be displayed in that section of the editor.\n    </li>\n    <li>\n        Select the custom formatter from the Format dropdown and choose an icon\n        and threshold. The selected icon should now be shown on the left side of\n        the corresponding column in the table widget preview if the value is\n        above the threshold.\n    </li>\n    <li>\n        In case you use <code>nui-select-v2</code> and\n        <code>nui-combobox-v2</code> components, it is possible that in case of\n        large lists the component overlay may go beyond the configurator heading\n        due to its high z-index. To fix this, use the\n        <code>nui-select-v2</code> and <code>nui-combobox-v2</code> components\n        input <code>popupViewportMargin</code> and pass the height of the\n        configurator heading into it. You can get the height of the configurator\n        heading by simply injecting the\n        <code\n            ><a\n                href="../injectables/ConfiguratorHeadingService.html"\n                target="_blank"\n                >ConfiguratorHeadingService</a\n            ></code\n        >\n        and use its <code>height$</code> observable and async pipe to instantly\n        get the current height of the configurator heading.\n    </li>\n</ol>\n\n<nui-message type="info" [allowDismiss]="false">\n    For details on how to create a custom formatter, take a look at the inline\n    comments under the source expander of the following example.\n</nui-message>\n\n<nui-example-wrapper\n    filenamePrefix="custom-formatter-example"\n    exampleTitle="Custom Table Formatter"\n>\n    <custom-formatter-example></custom-formatter-example>\n</nui-example-wrapper>\n'},15706:(o,e,n)=>{"use strict";n.r(e),n.d(e,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport { Component } from "@angular/core";\n\n@Component({\n    selector: "nui-custom-formatter-docs",\n    templateUrl: "./custom-formatter-docs.component.html",\n})\nexport class CustomFormatterDocComponent {}\n'},4317:(o,e,n)=>{"use strict";n.r(e),n.d(e,{default:()=>t});const t='<div class="mb-2 d-flex align-items-center">\n    <nui-switch class="ml-3 py-2" [(value)]="editMode" i18n>\n        Edit Mode\n    </nui-switch>\n    <button\n        *ngIf="!dashboard?.widgets[\'tableWidgetId\']"\n        type="button"\n        displayStyle="action"\n        (click)="reInitializeDashboard()"\n        nui-button\n    >\n        Restore Widget\n    </button>\n</div>\n\n<div class="w-100 dashboard">\n    \x3c!--\n        Note: The dashboard and gridsterConfig input assignments must use banana-in-a-box notation to keep\n        the dashboard state updated with changes to the pizzagna.\n    --\x3e\n    <nui-dashboard\n        *ngIf="dashboard"\n        [(dashboard)]="dashboard"\n        [editMode]="editMode"\n        [(gridsterConfig)]="gridsterConfig"\n        nuiWidgetEditor\n    >\n    </nui-dashboard>\n</div>\n'},55825:(o,e,n)=>{"use strict";n.r(e),n.d(e,{default:()=>t});const t=".dashboard {\n    height: 400px;\n}\n\n.custom-formatter-configurator__icon-select-template {\n    height: 20px;\n}\n"},10761:(o,e,n)=>{"use strict";n.r(e),n.d(e,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport { ListRange } from "@angular/cdk/collections";\nimport { ChangeDetectorRef, Component, Input, OnInit } from "@angular/core";\nimport { FormBuilder, FormGroup, Validators } from "@angular/forms";\nimport { GridsterConfig, GridsterItem } from "angular-gridster2";\nimport isEqual from "lodash/isEqual";\nimport orderBy from "lodash/orderBy";\nimport { BehaviorSubject } from "rxjs";\n\nimport {\n    DataSourceService,\n    IconService,\n    IDataField,\n    INovaFilteringOutputs,\n    INovaFilters,\n    ISorterFilter,\n    LoggerService,\n} from "@nova-ui/bits";\nimport {\n    ComponentRegistryService,\n    ConfiguratorHeadingService,\n    DATA_SOURCE,\n    FormatterConfiguratorComponent,\n    IDashboard,\n    IDataSourceOutput,\n    IFormatterDefinition,\n    IHasChangeDetector,\n    ITableWidgetColumnConfig,\n    ITableWidgetSorterConfig,\n    IWidget,\n    IWidgets,\n    PizzagnaLayer,\n    ProviderRegistryService,\n    RawFormatterComponent,\n    TableFormatterRegistryService,\n    WellKnownPathKey,\n    WellKnownProviders,\n    WidgetTypesService,\n} from "@nova-ui/dashboards";\n\nexport const BREW_API_URL = "https://api.punkapi.com/v2/beers";\n\n@Component({\n    selector: "custom-formatter",\n    host: { class: "d-flex" },\n    template: `\n        <div class="d-inline-flex w-100">\n            <div\n                class="mr-2 d-flex align-items-center"\n                *ngIf="icon && isAboveThreshold()"\n            >\n                <nui-icon [icon]="icon"></nui-icon>\n            </div>\n            <div [attr.data-value]="data.value">\n                {{ data.value }}\n            </div>\n        </div>\n    `,\n    styleUrls: ["./custom-formatter-example.component.less"],\n})\nexport class CustomFormatterComponent implements IHasChangeDetector {\n    public static lateLoadKey = "CustomFormatterComponent";\n\n    constructor(public changeDetector: ChangeDetectorRef) {}\n\n    @Input() public data: any;\n    @Input() public icon: string;\n    @Input() public threshold: string;\n\n    public isAboveThreshold(): boolean {\n        return parseFloat(this.threshold) <= this.data.value;\n    }\n}\n\n@Component({\n    selector: "custom-formatter-configurator",\n    styleUrls: ["./custom-formatter-example.component.less"],\n    template: `\n        <form [formGroup]="form">\n            <div class="mt-4" formGroupName="dataFieldIds">\n                <nui-form-field\n                    caption="Value"\n                    i18n-caption\n                    [control]="dataFieldIds.controls[\'value\']"\n                >\n                    <nui-select-v2\n                        placeholder="Select value"\n                        i18n-placeholder\n                        [popupViewportMargin]="\n                            configuratorHeading.height$ | async\n                        "\n                        formControlName="value"\n                    >\n                        <nui-select-v2-option\n                            *ngFor="let item of dropdownItems.value"\n                            [value]="item.id"\n                        >\n                            {{ item.label }}\n                        </nui-select-v2-option>\n                    </nui-select-v2>\n                    <nui-validation-message for="required" i18n>\n                        This field is required\n                    </nui-validation-message>\n                </nui-form-field>\n            </div>\n            <div class="mt-4">\n                <nui-form-field\n                    caption="Icon"\n                    i18n-caption="\n                        caption | displayed above the icon selection field\n                    "\n                    [control]="form.controls[\'icon\']"\n                >\n                    <nui-select-v2\n                        placeholder="Select icon"\n                        i18n-placeholder\n                        [popupViewportMargin]="\n                            configuratorHeading.height$ | async\n                        "\n                        [displayValueTemplate]="iconSelectTemplate"\n                        formControlName="icon"\n                        [overlayConfig]="{ width: 36 }"\n                    >\n                        <nui-select-v2-option\n                            class="d-flex align-items-center"\n                            *ngFor="let item of options"\n                            [value]="item"\n                            i18n\n                        >\n                            <nui-icon [icon]="item"></nui-icon>\n                        </nui-select-v2-option>\n                    </nui-select-v2>\n                    <nui-validation-message\n                        for="required"\n                        i18n="\n                            error message | displayed on blur when icon\n                            selection is empty\n                        "\n                    >\n                        This field is required\n                    </nui-validation-message>\n                </nui-form-field>\n            </div>\n            <div class="mt-4">\n                <nui-form-field\n                    caption="A.B.V. Threshold"\n                    i18n-caption="\n                        caption | displayed above the threshold textbox\n                    "\n                    [control]="form.controls[\'threshold\']"\n                >\n                    <nui-textbox\n                        type="number"\n                        formControlName="threshold"\n                        placeholder="Set threshold"\n                        i18n-placeholder\n                    >\n                    </nui-textbox>\n                    <nui-validation-message\n                        for="required"\n                        i18n="\n                            error message | displayed on blur when threshold\n                            selection is empty\n                        "\n                    >\n                        This field is required\n                    </nui-validation-message>\n                </nui-form-field>\n            </div>\n        </form>\n        <ng-template #iconSelectTemplate let-item let-open="open">\n            <div class="nui-select-v2__value">\n                <div\n                    *ngIf="item; else empty"\n                    class="d-flex align-items-center nui-select-v2__value-content"\n                >\n                    <nui-icon [icon]="item"></nui-icon>\n                </div>\n\n                <nui-icon\n                    [style.transform]="open ? \'rotate(180deg)\' : \'\'"\n                    icon="caret-down"\n                ></nui-icon>\n            </div>\n\n            <ng-template #empty>\n                <span class="nui-select-v2__placeholder">Select Item</span>\n            </ng-template>\n        </ng-template>\n    `,\n})\nexport class CustomFormatterConfiguratorComponent\n    extends FormatterConfiguratorComponent\n    implements OnInit, IHasChangeDetector\n{\n    public static lateLoadKey = "CustomFormatterConfiguratorComponent";\n\n    constructor(\n        changeDetector: ChangeDetectorRef,\n        configuratorHeading: ConfiguratorHeadingService,\n        formBuilder: FormBuilder,\n        logger: LoggerService,\n        public iconService: IconService\n    ) {\n        super(changeDetector, configuratorHeading, formBuilder, logger);\n    }\n\n    public formatterFormGroup: FormGroup;\n    // This array is where the icon names will be stored\n    public options: string[] = [];\n\n    public ngOnInit(): void {\n        for (const icon of this.iconService.icons) {\n            if (icon.category === "severity") {\n                this.options.push(icon.name);\n            }\n        }\n    }\n\n    protected addCustomFormControls(form: FormGroup): void {\n        form.addControl(\n            "icon",\n            this.formBuilder.control("", Validators.required)\n        );\n        form.addControl(\n            "threshold",\n            this.formBuilder.control(null, Validators.required)\n        );\n    }\n}\n\n/**\n * A component that instantiates the dashboard\n */\n@Component({\n    selector: "custom-formatter-example",\n    templateUrl: "./custom-formatter-example.component.html",\n    styleUrls: ["./custom-formatter-example.component.less"],\n})\nexport class CustomFormatterExampleComponent implements OnInit {\n    public editMode: boolean = false;\n    // This variable will hold all the data needed to define the layout and behavior of the widgets.\n    // Pass this to the dashboard component\'s dashboard input in the template.\n    public dashboard: IDashboard | undefined;\n\n    // Angular gridster requires a configuration object even if it\'s empty.\n    // Pass this to the dashboard component\'s gridsterConfig input in the template.\n    public gridsterConfig: GridsterConfig = {};\n\n    constructor(\n        // WidgetTypesService provides the widget\'s necessary structure information\n        private widgetTypesService: WidgetTypesService,\n        // In general, the ProviderRegistryService is used for making entities available for injection into dynamically loaded components.\n        private providerRegistry: ProviderRegistryService,\n        // Inject the ComponentRegistryService to make our custom component available for late loading by the dashboards framework\n        private componentRegistry: ComponentRegistryService,\n        private tableFormatterRegistryService: TableFormatterRegistryService,\n        private changeDetectorRef: ChangeDetectorRef\n    ) {\n        // Register the custom configurator component with the component registry to make it available\n        // for late loading by the dashboard framework.\n        this.componentRegistry.registerByLateLoadKey(\n            CustomFormatterConfiguratorComponent\n        );\n        // Register the custom formatter component with the component registry to make it available\n        // for late loading by the dashboard framework.\n        this.componentRegistry.registerByLateLoadKey(CustomFormatterComponent);\n\n        // Grab the widget\'s default template which will be needed as a parameter for setNode below.\n        const table = this.widgetTypesService.getWidgetType("table", 1);\n\n        const tableFormatters: IFormatterDefinition[] = [\n            {\n                // This will be the component that will format the data\n                componentType: RawFormatterComponent.lateLoadKey,\n                // This is the label for what the formatter is selected in the drop down\n                label: $localize`:table formatter|:No formatter`,\n                // This says what datatype the formatter supports. If the value node is null, it accepts any data type.\n                dataTypes: {\n                    // @ts-ignore: Ignoring compiler error to keep the same flow\n                    value: null,\n                },\n            },\n            {\n                componentType: CustomFormatterComponent.lateLoadKey,\n                label: $localize`:table formatter|:Custom formatter`,\n                // This is a custom configurator that will pop up below the formatter once it gets selected\n                configurationComponent:\n                    CustomFormatterConfiguratorComponent.lateLoadKey,\n                // This says what data types the formatter supports.\n                // In this case, it supports abv values only.\n                // If you look below in the table data source you\'ll see where we define our column\'s data types.\n                dataTypes: {\n                    value: ["abv"],\n                },\n            },\n        ];\n\n        // Registering the formatters\n        this.tableFormatterRegistryService.addItems(tableFormatters);\n\n        // This sets the table\'s datasource to have the BeerDataSource so the drop down is filled similar to the line above.\n        this.widgetTypesService.setNode(\n            table,\n            "configurator",\n            WellKnownPathKey.DataSourceProviders,\n            [BeerDataSource.providerId]\n        );\n\n        // Registering the data source for injection into the widget.\n        this.providerRegistry.setProviders({\n            [BeerDataSource.providerId]: {\n                provide: DATA_SOURCE,\n                useClass: BeerDataSource,\n                // Any dependencies that need to be injected into the provider must be listed here\n                deps: [],\n            },\n        });\n    }\n\n    public ngOnInit(): void {\n        this.initializeDashboard();\n    }\n\n    /** Used for restoring widgets state */\n    public reInitializeDashboard(): void {\n        // destroys the components and their providers so the dashboard can re init data\n        this.dashboard = undefined;\n        this.changeDetectorRef.detectChanges();\n\n        this.initializeDashboard();\n    }\n\n    public initializeDashboard(): void {\n        // We\'re using a static configuration object for this example, but this is where\n        // the widget\'s configuration could potentially be populated from a database\n        const tableWidget = widgetConfig;\n        const widgetIndex: IWidgets = {\n            // Enhance the widget with information coming from it\'s type definition\n            [tableWidget.id]:\n                this.widgetTypesService.mergeWithWidgetType(tableWidget),\n        };\n\n        // Setting the widget dimensions and position (this is for gridster)\n        const positions: Record<string, GridsterItem> = {\n            [tableWidget.id]: {\n                cols: 12,\n                rows: 6,\n                y: 0,\n                x: 0,\n            },\n        };\n\n        // Finally, assigning the variables we created above to the dashboard\n        this.dashboard = {\n            positions,\n            widgets: widgetIndex,\n        };\n    }\n}\n\nexport interface IBrewInfo {\n    id: number;\n    name: string;\n    tagline: string;\n    first_brewed: string;\n    description: string;\n    brewers_tips: string;\n    abv: number;\n}\n\nexport interface IBrewDatasourceResponse {\n    brewInfo: IBrewInfo[];\n    total: number;\n}\n\nexport class BeerDataSource extends DataSourceService<IBrewInfo> {\n    public static providerId = "BeerDataSource";\n\n    private cache = Array.from<IBrewInfo>({ length: 0 });\n    private lastSortValue?: ISorterFilter;\n    private lastVirtualScroll?: ListRange;\n    // For simplicity, the totalItems value is hard-coded here, but in a real-world scenario the value would likely be retrieved via an async backend call\n    private totalItems: number = 325;\n\n    public page: number = 1;\n    public busy = new BehaviorSubject(false);\n\n    public dataFields: Array<IDataField> = [\n        { id: "id", label: "No", dataType: "number" },\n        { id: "name", label: "Name", dataType: "string" },\n        { id: "tagline", label: "Tagline", dataType: "string" },\n        { id: "first_brewed", label: "First Brewed", dataType: "string" },\n        { id: "description", label: "Description", dataType: "string" },\n        { id: "brewers_tips", label: "Brewer\'s Tips", dataType: "string" },\n        // We are giving this field a custom data type of \'abv\' so the dropdown in the custom formatter configurator can use it to filter out other data types\n        { id: "abv", label: "Alcohol By Volume", dataType: "abv" },\n    ];\n\n    constructor(private logger: LoggerService) {\n        super();\n    }\n\n    public async getFilteredData(\n        filters: INovaFilters\n    ): Promise<IDataSourceOutput<INovaFilteringOutputs>> {\n        const start = filters.virtualScroll?.value?.start ?? 0;\n        const end = filters.virtualScroll?.value?.end ?? 0;\n        const delta = end - start;\n\n        // Note: We should start with a clean cache every time first page is requested\n        if (start === 0) {\n            this.cache = [];\n        }\n\n        // This condition handles sorting. We want to sort columns without fetching another chunk of data.\n        // Since the data is being fetched when scrolled, we compare virtual scroll indexes here in the condition as well.\n        if (filters.sorter?.value) {\n            if (\n                !isEqual(this.lastSortValue, filters.sorter.value) &&\n                filters.virtualScroll?.value.start === 0 &&\n                !!this.lastVirtualScroll\n            ) {\n                const totalPages = Math.ceil(\n                    delta ? this.totalItems / delta : 1\n                );\n                const itemsPerPage: number = Math.max(\n                    delta < 80 ? delta : 80,\n                    1\n                );\n                let response: Array<IBrewInfo> | null = null;\n                let map: IBrewDatasourceResponse;\n\n                if (filters.sorter?.value?.direction === "desc") {\n                    this.cache = [];\n                    for (let i = 0; i < this.page; ++i) {\n                        response = await (\n                            await fetch(\n                                `${BREW_API_URL}/?page=${\n                                    totalPages - i || 1\n                                }&per_page=${itemsPerPage}`\n                            )\n                        ).json();\n\n                        // since the last page contains only 5 items we need to fetch another page to give virtual scroll enough space to work\n                        if (response && response.length < itemsPerPage) {\n                            this.page++;\n                        }\n                        map = {\n                            brewInfo: response?.map((result: IBrewInfo) => ({\n                                id: result.id,\n                                name: result.name,\n                                tagline: result.tagline,\n                                first_brewed: result.first_brewed,\n                                description: result.description,\n                                brewers_tips: result.brewers_tips,\n                            })),\n                            total: response?.length,\n                        } as IBrewDatasourceResponse;\n                        this.cache =\n                            totalPages - i !== 0\n                                ? this.cache.concat(map.brewInfo)\n                                : this.cache;\n                    }\n                }\n\n                if (filters.sorter?.value?.direction === "asc") {\n                    this.cache = [];\n                    for (let i = 0; i < this.page; i++) {\n                        response = await (\n                            await fetch(\n                                `${BREW_API_URL}/?page=${\n                                    i + 1\n                                }&per_page=${itemsPerPage}`\n                            )\n                        ).json();\n                        map = {\n                            brewInfo: response?.map((result: IBrewInfo) => ({\n                                id: result.id,\n                                name: result.name,\n                                tagline: result.tagline,\n                                first_brewed: result.first_brewed,\n                                description: result.description,\n                                brewers_tips: result.brewers_tips,\n                            })),\n                            total: response?.length,\n                        } as IBrewDatasourceResponse;\n                        this.cache = this.cache.concat(map.brewInfo);\n                    }\n                }\n\n                this.lastSortValue = filters.sorter?.value;\n                this.lastVirtualScroll = filters.virtualScroll?.value;\n\n                return {\n                    result: {\n                        repeat: {\n                            itemsSource: this.sortData(this.cache, filters),\n                        },\n                        paginator: { total: this.totalItems },\n                        dataFields: this.dataFields,\n                    },\n                };\n            }\n        }\n\n        this.busy.next(true);\n        return new Promise((resolve) => {\n            setTimeout(() => {\n                this.getData(start, end, filters).then(\n                    (response: INovaFilteringOutputs) => {\n                        if (!response) {\n                            return;\n                        }\n\n                        this.cache = this.cache.concat(response.brewInfo);\n\n                        this.dataSubject.next(this.cache);\n                        resolve({\n                            result: {\n                                repeat: {\n                                    itemsSource: this.sortData(\n                                        this.cache,\n                                        filters\n                                    ),\n                                },\n                                paginator: { total: this.totalItems },\n                                dataFields: this.dataFields,\n                            },\n                        });\n\n                        this.lastSortValue = filters.sorter?.value;\n                        this.lastVirtualScroll = filters.virtualScroll?.value;\n                        this.busy.next(false);\n                    }\n                );\n            }, 500);\n        });\n    }\n\n    public async getData(\n        start: number = 0,\n        end: number = 20,\n        filters: INovaFilters\n    ): Promise<INovaFilteringOutputs> {\n        const delta = end - start;\n        const totalPages = Math.ceil(delta ? this.totalItems / delta : 1);\n        let response: Array<IBrewInfo> | null = null;\n        // The api.punk.com is able to return only 80 items per page\n        const itemsPerPage: number = Math.max(delta < 80 ? delta : 80, 1);\n\n        if (filters.sorter?.value?.direction === "asc") {\n            response = await (\n                await fetch(\n                    `${BREW_API_URL}/?page=${this.page}&per_page=${itemsPerPage}`\n                )\n            ).json();\n        }\n\n        if (filters.sorter?.value?.direction === "desc") {\n            response = await (\n                await fetch(\n                    `${BREW_API_URL}/?page=${\n                        totalPages - this.page\n                    }&per_page=${itemsPerPage}`\n                )\n            ).json();\n        }\n\n        if (!filters.sorter) {\n            response = await (\n                await fetch(\n                    `${BREW_API_URL}/?page=${this.page}&per_page=${itemsPerPage}`\n                )\n            ).json();\n        }\n        return {\n            brewInfo: response?.map((result: IBrewInfo, i: number) => ({\n                id: result.id,\n                abv: result.abv,\n                name: result.name,\n                tagline: result.tagline,\n                first_brewed: result.first_brewed,\n                description: result.description,\n                brewers_tips: result.brewers_tips,\n            })),\n            total: response?.length,\n        } as IBrewDatasourceResponse;\n    }\n\n    private sortData(data: IBrewInfo[], filters: INovaFilters) {\n        return orderBy(\n            data,\n            filters.sorter?.value?.sortBy,\n            filters.sorter?.value?.direction as "desc" | "asc"\n        );\n    }\n}\n\nexport const widgetConfig: IWidget = {\n    id: "tableWidgetId",\n    type: "table",\n    pizzagna: {\n        [PizzagnaLayer.Configuration]: {\n            header: {\n                properties: {\n                    title: "Stupendous Suds",\n                    subtitle: "Try These Brilliant Brews",\n                },\n            },\n            table: {\n                providers: {\n                    [WellKnownProviders.DataSource]: {\n                        providerId: BeerDataSource.providerId,\n                    },\n                },\n                properties: {\n                    configuration: {\n                        columns: [\n                            {\n                                id: "column1",\n                                label: "Beer Name",\n                                isActive: true,\n                                width: 185,\n                                formatter: {\n                                    componentType:\n                                        RawFormatterComponent.lateLoadKey,\n                                    properties: {\n                                        dataFieldIds: {\n                                            value: "name",\n                                        },\n                                    },\n                                },\n                            },\n                            {\n                                id: "column2",\n                                label: "Tagline",\n                                isActive: true,\n                                width: 250,\n                                formatter: {\n                                    componentType:\n                                        RawFormatterComponent.lateLoadKey,\n                                    properties: {\n                                        dataFieldIds: {\n                                            value: "tagline",\n                                        },\n                                    },\n                                },\n                            },\n                            {\n                                id: "column3",\n                                label: "Alcohol By Volume",\n                                isActive: true,\n                                width: 150,\n                                formatter: {\n                                    componentType:\n                                        CustomFormatterComponent.lateLoadKey,\n                                    properties: {\n                                        dataFieldIds: {\n                                            value: "abv",\n                                        },\n                                        icon: "severity_error",\n                                        threshold: "5",\n                                    },\n                                },\n                            },\n                            {\n                                id: "column4",\n                                label: "Description",\n                                isActive: true,\n                                formatter: {\n                                    componentType:\n                                        RawFormatterComponent.lateLoadKey,\n                                    properties: {\n                                        dataFieldIds: {\n                                            value: "description",\n                                        },\n                                    },\n                                },\n                            },\n                        ] as ITableWidgetColumnConfig[],\n                        sorterConfiguration: {\n                            descendantSorting: false,\n                            sortBy: "",\n                        } as ITableWidgetSorterConfig,\n                        hasVirtualScroll: true,\n                    },\n                },\n            },\n        },\n    },\n};\n'},3530:(o,e,n)=>{"use strict";n.r(e),n.d(e,{default:()=>t});const t='<h1>Implementing a Custom Widget</h1>\n\n<p>\n    In the\n    <a\n        href="../additional-documentation/tutorials/customization/configurator-section.html"\n        target="_parent"\n        >Custom Configurator Section</a\n    >\n    tutorial, we talked about giving users the ability to configure a widget\n    behavior or layout that\'s not configurable out of the box. This includes\n    such things as providing a product-specific way for users to configure a\n    data source. That tutorial covered the first step to achieving something\n    like this by demonstrating how to replace an existing widget configurator\n    (editor) section with your own implementation. In this tutorial, we\'ll go a\n    step further and create a custom widget that actually reacts to changes\n    triggered by users as they interact with the custom configurator section.\n</p>\n<p>\n    To keep things simple we\'ll create a custom widget body and reuse the\n    standard\n    <code\n        ><a href="../components/WidgetHeaderComponent.html" target="_blank"\n            >WidgetHeaderComponent</a\n        ></code\n    >\n    as our header. The widget body will consist of a\n    <code\n        ><a\n            href="https://nova-ui.solarwinds.io/bits/release_v12.x/components/ImageComponent.html"\n            target="_blank"\n            >nui-image</a\n        ></code\n    >, and we\'ll create a custom configurator section that can be used to update\n    the source url of the image. In a later tutorial, we\'ll create a custom data\n    source configurator section and go over the small amount of additional\n    wiring required to give users the ability to change the configuration of a\n    data source.\n</p>\n\n<nui-message type="critical" [allowDismiss]="false">\n    <strong>Note:</strong> Implementing a custom widget should be an extremely\n    rare occurrence, and it should be done only with the utmost caution. If you\n    or someone on your team is thinking about implementing one, please discuss\n    it with UX leadership and the Nova development team before proceeding.\n</nui-message>\n\n<h2>Fundamental Concepts</h2>\n<ul>\n    <li>\n        <code\n            ><a href="../classes/WidgetTypesService.html" target="_blank"\n                >WidgetTypesService</a\n            ></code\n        >\n    </li>\n    <li>\n        <code\n            ><a\n                href="../injectables/ComponentRegistryService.html"\n                target="_blank"\n                >ComponentRegistryService</a\n            ></code\n        >\n    </li>\n    <li>Custom configurator section component</li>\n    <li>Custom widget body</li>\n</ul>\n\n<h2>Basic Steps</h2>\n<ol>\n    <li>\n        Follow the instructions\n        <a\n            href="../additional-documentation/getting-started.html"\n            target="_parent"\n            >here</a\n        >\n        to set up your environment for dashboard development.\n    </li>\n    <li>\n        Follow the instructions from previous tutorials to get a basic dashboard\n        up and running.\n    </li>\n    <li>\n        Create a component that will serve as the custom widget body. In this\n        tutorial, the widget body will consist of a simple\n        <code>nui-image</code>.\n    </li>\n    <li>\n        Create a component that will serve as the custom configurator section.\n        In this tutorial, the custom configurator section will allow users to\n        update the source url for the image in the custom widget.\n    </li>\n    <li>\n        Ensure that <code>NuiImageModule</code> is included in the imports of\n        the custom widget component\'s parent module.\n    </li>\n    <li>\n        Ensure that the following modules are included in the imports of the\n        custom configurator section component\'s parent module:\n        <code\n            ><a\n                href="../modules/NuiDashboardConfiguratorModule.html"\n                target="_blank"\n                >NuiDashboardConfiguratorModule</a\n            ></code\n        >, <code>NuiFormFieldModule</code>, <code>NuiSelectV2Module</code>,\n        <code>NuiIconModule</code>, and Angular\'s\n        <code\n            ><a\n                href="https://angular.io/api/forms/ReactiveFormsModule"\n                target="_blank"\n                >ReactiveFormsModule</a\n            ></code\n        >.\n    </li>\n    <li>\n        Add the custom widget body and configurator section component class\n        names to the declarations of the module(s) in which they\'re implemented.\n        In this example, the class names are\n        <code>CustomWidgetBodyContentComponent</code> and\n        <code>CustomConfiguratorSectionComponent</code>\n        respectively.\n    </li>\n    <li>\n        Prepare the dashboard framework to use our custom components by doing\n        the following:\n        <ol>\n            <li>\n                Register the new widget type using the\n                <code\n                    ><a\n                        href="../classes/WidgetTypesService.html"\n                        target="_blank"\n                        >WidgetTypesService</a\n                    ></code\n                >.\n            </li>\n            <li>\n                Register the custom widget body and custom configurator section\n                components using the\n                <code\n                    ><a\n                        href="../injectables/ComponentRegistryService.html"\n                        target="_blank"\n                        >ComponentRegistryService</a\n                    ></code\n                >. This will make them available for late load by the dashboard\n                framework.\n            </li>\n            <li>\n                Initialize the image source url options to be displayed in the\n                custom configurator section dropdown using the\n                <code\n                    ><a\n                        href="../classes/WidgetTypesService.html"\n                        target="_blank"\n                        >WidgetTypesService</a\n                    ></code\n                >\n            </li>\n        </ol>\n        <nui-message type="info" [allowDismiss]="false">\n            <strong>Note:</strong> In this tutorial, the above three steps are\n            performed in the component\'s <code>ngOnInit</code>. But, in a\n            real-world app, widget type modifications and component\n            registrations like this may make more sense in a parent module\'s\n            constructor. Moving framework initialization procedures such as\n            these to a higher level in an app\'s hierarchy ensures that multiple\n            dashboard instances within a common parent module have access to the\n            same modifications.\n        </nui-message>\n    </li>\n    <li>\n        At this point you should have a custom widget on the dashboard that\n        displays an image.\n    </li>\n    <li>\n        You should also be able to open the widget editor using the Edit button\n        in the menu at the top-right corner of the widget and see the custom\n        configurator section in the editor.\n    </li>\n    <li>\n        Changing the image selection in the dropdown should update the image in\n        the widget preview.\n    </li>\n    <li>\n        Clicking the Save Changes button in the editor should update the widget\n        on the dashboard to show the newly selected image.\n    </li>\n</ol>\n\n<nui-message type="info" [allowDismiss]="false">\n    For more detailed information about implementing a custom widget, take a\n    look at the inline comments under the source expander of the following\n    example.\n</nui-message>\n<nui-example-wrapper\n    filenamePrefix="custom-widget.component"\n    exampleTitle="Custom Widget"\n>\n    <custom-widget></custom-widget>\n</nui-example-wrapper>\n'},26646:(o,e,n)=>{"use strict";n.r(e),n.d(e,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport { Component } from "@angular/core";\n\n@Component({\n    selector: "custom-widget-docs",\n    templateUrl: "./custom-widget-docs.component.html",\n})\nexport class CustomWidgetDocsComponent {}\n'},67986:(o,e,n)=>{"use strict";n.r(e),n.d(e,{default:()=>t});const t='<div class="my-3 d-flex align-items-center">\n    <nui-switch class="ml-3" [(value)]="editMode" i18n> Edit Mode </nui-switch>\n    <button\n        *ngIf="!dashboard?.widgets[\'widget1\']"\n        type="button"\n        displayStyle="action"\n        (click)="reInitializeDashboard()"\n        nui-button\n    >\n        Restore Widget\n    </button>\n</div>\n\n<div class="w-100 dashboard">\n    \x3c!--\n        Note: The dashboard and gridsterConfig input assignments must use banana-in-a-box notation to keep\n        the dashboard state updated with changes to the pizzagna.\n    --\x3e\n    <nui-dashboard\n        *ngIf="dashboard"\n        [(dashboard)]="dashboard"\n        [(gridsterConfig)]="gridsterConfig"\n        [editMode]="editMode"\n        nuiWidgetEditor\n    >\n    </nui-dashboard>\n</div>\n'},26410:(o,e,n)=>{"use strict";n.r(e),n.d(e,{default:()=>t});const t='@import (reference) "@nova-ui/bits/sdk/less/nui-framework-variables";\n@import (reference) "@nova-ui/bits/sdk/less/mixins";\n\n.dashboard {\n    height: 800px;\n}\n\n// Styling for the custom configurator section\n.custom-configurator-section {\n    &__accordion-content {\n        padding: @nui-space-md @nui-space-md @nui-space-md\n            (@nui-space-md * 2 + @icon-size-default);\n    }\n}\n'},23150:(o,e,n)=>{"use strict";n.r(e),n.d(e,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport {\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    EventEmitter,\n    HostBinding,\n    Input,\n    OnChanges,\n    OnInit,\n    Output,\n    SimpleChanges,\n} from "@angular/core";\nimport { FormBuilder, FormGroup, Validators } from "@angular/forms";\nimport { GridsterConfig, GridsterItem } from "angular-gridster2";\n\nimport { IMenuItem } from "@nova-ui/bits";\nimport {\n    ComponentRegistryService,\n    ConfiguratorHeadingService,\n    DEFAULT_PIZZAGNA_ROOT,\n    EVENT_PROXY,\n    FormStackComponent,\n    IConverterFormPartsProperties,\n    IDashboard,\n    IHasChangeDetector,\n    IHasForm,\n    IProviderConfiguration,\n    IWidget,\n    IWidgets,\n    IWidgetTypeDefinition,\n    NOVA_GENERIC_CONVERTER,\n    NOVA_TITLE_AND_DESCRIPTION_CONVERTER,\n    PizzagnaLayer,\n    refresher,\n    StackComponent,\n    TitleAndDescriptionConfigurationComponent,\n    WellKnownPathKey,\n    WellKnownProviders,\n    widgetBodyContentNodes,\n    WidgetConfiguratorSectionComponent,\n    WidgetTypesService,\n    WIDGET_BODY,\n    WIDGET_HEADER,\n    WIDGET_LOADING,\n} from "@nova-ui/dashboards";\n\n// The custom widget type name we\'ll use\nconst CUSTOM_WIDGET_TYPENAME = "example-custom-widget";\n// The path key we\'ll use for image selection in the configurator definition\nconst IMAGE_SELECTION_CONFIGURATOR_PATH_KEY = "imageSelection";\n\n@Component({\n    selector: "custom-widget-body",\n    // A simple template for our custom widget\n    template: `<nui-image [image]="imageSource"></nui-image>`,\n    styleUrls: ["./custom-widget.component.less"],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\n// Remember to declare this class in the parent module\nexport class CustomWidgetBodyContentComponent implements IHasChangeDetector {\n    // Ensure that the lateLoadKey value matches class name\n    public static lateLoadKey = "CustomWidgetBodyContentComponent";\n\n    // Optionally, providing an input for styling of the host element\n    @Input() @HostBinding("class") public elementClass = "";\n\n    // We\'ll map this input with the configurator form using the NOVA_GENERIC_CONVERTER.\n    // See the customWidget definition at the bottom of the file.\n    @Input() public imageSource: string;\n\n    // Injecting the ChangeDetectorRef to implement IHasChangeDetector.\n    // This allows the dashboard framework to reliably propagate component property changes to the DOM.\n    constructor(public changeDetector: ChangeDetectorRef) {}\n}\n\n/**\n * A custom configurator section component for selecting the image source for the custom widget\n */\n@Component({\n    selector: "custom-configurator-section",\n    template: `\n        \x3c!-- The nuiWidgetEditorAccordionFormState pipe keeps the editor accordion state updated based on the state of the form --\x3e\n        <nui-widget-editor-accordion\n            [formGroup]="form"\n            [state]="form | nuiWidgetEditorAccordionFormState | async"\n        >\n            \x3c!-- The accordionHeader attribute lets the accordion component know which element to use as its header --\x3e\n            \x3c!-- There is also a pre-defined custom component <nui-widget-editor-accordion-header> that can be used instead --\x3e\n            <div accordionHeader class="d-flex align-items-center pl-4 py-2">\n                \x3c!-- nuiFormHeaderIconPipe detects errors on the form and replaces the regular icon with an error icon if necessary --\x3e\n                <nui-icon\n                    class="align-self-start pt-2"\n                    [icon]="form | nuiFormHeaderIconPipe : \'image\' | async"\n                ></nui-icon>\n                <div class="d-flex flex-column ml-4 pt1">\n                    <span class="nui-text-label" i18n>Image Selection</span>\n                    <div [title]="imageDisplayValue" class="nui-text-secondary">\n                        {{ imageDisplayValue }}\n                    </div>\n                </div>\n            </div>\n            <div class="custom-configurator-section__accordion-content">\n                <nui-form-field\n                    caption="Select an image:"\n                    i18n-caption\n                    [control]="form.get(\'imageSource\')"\n                >\n                    \x3c!-- The dropdown for image source selection --\x3e\n                    <nui-select-v2\n                        formControlName="imageSource"\n                        placeholder="No image selected"\n                        i18n-placeholder\n                        [popupViewportMargin]="\n                            configuratorHeading.height$ | async\n                        "\n                        (valueSelected)="onChanged($event)"\n                    >\n                        <nui-select-v2-option\n                            *ngFor="let item of imageItems"\n                            [value]="item.url"\n                        >\n                            {{ item.title }}\n                        </nui-select-v2-option>\n                    </nui-select-v2>\n                </nui-form-field>\n            </div>\n        </nui-widget-editor-accordion>\n    `,\n    styleUrls: ["./custom-widget.component.less"],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\n// Remember to declare this class in the parent module\nexport class CustomConfiguratorSectionComponent\n    implements OnInit, OnChanges, IHasChangeDetector, IHasForm\n{\n    // Ensure that the lateLoadKey value matches the class name\n    public static lateLoadKey = "CustomConfiguratorSectionComponent";\n\n    /**\n     * This input serves as the itemsSource a user can select an image from.\n     */\n    @Input() imageItems: IMenuItem[] = [];\n    /**\n     * This property holds the currently selected image source string.\n     */\n    @Input() imageSource: string;\n\n    /**\n     * An output for emitting formReady to allow the immediate parent formGroup component to register us as a form control\n     * in the larger form. In this case, the immediate parent would be the WidgetConfiguratorSectionComponent as specified\n     * in the customWidget configurator definition at the bottom of this file.\n     */\n    @Output() formReady = new EventEmitter<FormGroup>();\n\n    public form: FormGroup;\n    public imageDisplayValue: string;\n\n    constructor(\n        public changeDetector: ChangeDetectorRef,\n        private formBuilder: FormBuilder,\n        public configuratorHeading: ConfiguratorHeadingService\n    ) {}\n\n    public ngOnInit(): void {\n        // Initializing the form\n        this.form = this.formBuilder.group({\n            // Note: When using the NOVA_GENERIC_CONVERTER, the form control name, in this case \'imageSource\', must match the input name on\n            // this component as well as that of the corresponding property on the custom widget body component.\n            imageSource: [{}, [Validators.required]],\n        });\n\n        // Emitting the formReady as described above.\n        this.formReady.emit(this.form);\n    }\n\n    public ngOnChanges(changes: SimpleChanges): void {\n        if (changes.imageSource && !changes.imageSource.isFirstChange()) {\n            const previousValue: string = changes.imageSource.previousValue;\n            if (previousValue !== this.imageSource) {\n                // Setting the display value according to the current imageSource value\n                this.imageDisplayValue = this.imageItems.find(\n                    (item: IMenuItem) => item.url === this.imageSource\n                )?.title;\n\n                // Updating the form when the imageSource input gets updated\n                this.form.get("imageSource")?.setValue(this.imageSource);\n            }\n        }\n    }\n\n    public onChanged(newValue: string): void {\n        // Keeping the display value updated as the user changes the dropdown selection\n        this.imageDisplayValue = this.imageItems.find(\n            (item: IMenuItem) => item.url === newValue\n        )?.title;\n    }\n}\n\n/**\n * The component that instantiates the dashboard\n */\n@Component({\n    selector: "custom-widget",\n    templateUrl: "./custom-widget.component.html",\n    styleUrls: ["./custom-widget.component.less"],\n})\nexport class CustomWidgetComponent implements OnInit {\n    // This variable will hold all the data needed to define the layout and behavior of the widgets.\n    // Pass this to the dashboard component\'s dashboard input in the template.\n    public dashboard: IDashboard | undefined;\n\n    // Angular gridster requires a configuration object even if it\'s empty.\n    // Pass this to the dashboard component\'s gridsterConfig input in the template.\n    public gridsterConfig: GridsterConfig = {};\n\n    // Boolean which dashboard takes in as an input if its true it allows you to move widgets around.\n    public editMode: boolean = false;\n\n    constructor(\n        // WidgetTypesService provides the widget\'s necessary structure information\n        private widgetTypesService: WidgetTypesService,\n\n        // Inject the ComponentRegistryService to make our custom component available for late loading by the dashboards framework\n        private componentRegistry: ComponentRegistryService,\n        private changeDetectorRef: ChangeDetectorRef\n    ) {}\n\n    public ngOnInit(): void {\n        // Register the custom widget type and custom components\n        // Note: This could also be done in the parent module\'s constructor so that\n        // multiple dashboards could have access to the same registrations.\n        this.prepareNovaDashboards();\n\n        // Register some image items as dropdown options in the widget editor/configurator\n        // Note: This could also be done in the parent module\'s constructor so that\n        // multiple dashboards could have access to the same dropdown options.\n        this.registerImageOptions();\n\n        // Initialize our current instance of a dashboard with an instance of our custom widget\n        this.initializeDashboard();\n    }\n\n    /** Used for restoring widgets state */\n    public reInitializeDashboard(): void {\n        // destroys the components and their providers so the dashboard can re init data\n        this.dashboard = undefined;\n        this.changeDetectorRef.detectChanges();\n\n        this.initializeDashboard();\n    }\n\n    public initializeDashboard(): void {\n        // We\'re using a static configuration object for this example (see widgetConfig at the bottom of the file),\n        // but this is where the widget\'s configuration could potentially be populated from a database\n        const widget = widgetConfig;\n\n        // Create an index of widgets complete with structure and configuration to assign to the dashboard\n        const widgets: IWidgets = {\n            // Complete the custom widget with structure information coming from its type definition\n            [widget.id]: this.widgetTypesService.mergeWithWidgetType(widget),\n        };\n\n        // Setting the widget dimensions and position (this is for gridster)\n        const positions: Record<string, GridsterItem> = {\n            [widget.id]: {\n                cols: 4,\n                rows: 11,\n                y: 0,\n                x: 0,\n            },\n        };\n\n        // Finally, assigning the variables we created above to the dashboard\n        this.dashboard = { positions, widgets };\n    }\n\n    private prepareNovaDashboards() {\n        // Register the custom widget type\n        this.widgetTypesService.registerWidgetType(\n            CUSTOM_WIDGET_TYPENAME,\n            1,\n            customWidget\n        );\n\n        // Register the custom widget body component with the component registry to make it available\n        // for late loading by the dashboard framework.\n        this.componentRegistry.registerByLateLoadKey(\n            CustomWidgetBodyContentComponent\n        );\n\n        // Register the custom configurator section with the component registry to make it available\n        // for late loading by the dashboard framework.\n        this.componentRegistry.registerByLateLoadKey(\n            CustomConfiguratorSectionComponent\n        );\n    }\n\n    private registerImageOptions() {\n        // Grab the widget\'s default template which will be needed as a parameter for setNode below.\n        const widgetTemplate = this.widgetTypesService.getWidgetType(\n            CUSTOM_WIDGET_TYPENAME,\n            1\n        );\n\n        // Register some image items as dropdown options in the widget editor/configurator\n        this.widgetTypesService.setNode(\n            // This is the template we grabbed above with getWidgetType\n            widgetTemplate,\n            // We are setting the editor/configurator part of the widget template\n            "configurator",\n            // This indicates which node you are changing and we want to change the image items available for selection in the editor.\n            // For reference, see the \'paths\' property of the custom widget\'s IWidgetTypeDefinition at the bottom of this file.\n            IMAGE_SELECTION_CONFIGURATOR_PATH_KEY,\n            // We are setting the image items available for selection in the editor. \'imageItems\' is defined\n            // at the bottom of this file.\n            imageItems\n        );\n    }\n}\n\n/***************************************************************************************************\n *  This is the type definition of our custom widget\n ***************************************************************************************************/\nconst customWidget: IWidgetTypeDefinition = {\n    /***************************************************************************************************\n     *  Paths to important settings in this type definition\n     ***************************************************************************************************/\n    paths: {\n        widget: {\n            [WellKnownPathKey.Root]: DEFAULT_PIZZAGNA_ROOT,\n        },\n        configurator: {\n            [WellKnownPathKey.Root]: DEFAULT_PIZZAGNA_ROOT,\n            // for the custom configuration component, this is the path for the list of image items available for selection\n            [IMAGE_SELECTION_CONFIGURATOR_PATH_KEY]:\n                "imageSelection.properties.imageItems",\n        },\n    },\n    /***************************************************************************************************\n     *  Widget section describes the structural part of the custom widget\n     ***************************************************************************************************/\n    widget: {\n        [PizzagnaLayer.Structure]: {\n            [DEFAULT_PIZZAGNA_ROOT]: {\n                id: DEFAULT_PIZZAGNA_ROOT,\n                // base layout of the widget - all components referenced herein will be stacked in a column\n                componentType: StackComponent.lateLoadKey,\n                providers: {\n                    // When enabled, this provider emits the REFRESH event on the pizzagna event bus every X seconds\n                    [WellKnownProviders.Refresher]: refresher(),\n                    // event proxy manages the transmission of events between widget and dashboard such as the WIDGET_EDIT and WIDGET_REMOVE events\n                    [WellKnownProviders.EventProxy]: EVENT_PROXY,\n                },\n                properties: {\n                    // these values reference child components in the widget structure defined below\n                    nodes: ["header", "loading", "body"],\n                },\n            },\n            // standard widget header\n            header: WIDGET_HEADER,\n            // this is the loading bar below the header\n            loading: WIDGET_LOADING,\n            // the body node\n            body: WIDGET_BODY,\n\n            // retrieving the definitions for the body content nodes. the argument corresponds to the main content node key\n            ...widgetBodyContentNodes("mainContent"),\n\n            // the component that supplies the content of our custom widget\n            mainContent: {\n                id: "mainContent",\n                componentType: CustomWidgetBodyContentComponent.lateLoadKey,\n                properties: {\n                    elementClass: "d-flex w-100 justify-content-center",\n                },\n            },\n        },\n        [PizzagnaLayer.Configuration]: {\n            [DEFAULT_PIZZAGNA_ROOT]: {\n                id: DEFAULT_PIZZAGNA_ROOT,\n                providers: {\n                    // default refresher configuration\n                    [WellKnownProviders.Refresher]: refresher(false, 60),\n                },\n            },\n            // default header configuration\n            header: {\n                properties: {\n                    title: $localize`Empty Custom Widget`,\n                },\n            },\n        },\n    },\n    /***************************************************************************************************\n     *  Configurator section describes the form that\'s used to configure the widget\n     ***************************************************************************************************/\n    configurator: {\n        [PizzagnaLayer.Structure]: {\n            [DEFAULT_PIZZAGNA_ROOT]: {\n                id: DEFAULT_PIZZAGNA_ROOT,\n                // base layout of the configurator - all form components referenced herein will be stacked in a column\n                componentType: FormStackComponent.lateLoadKey,\n                properties: {\n                    elementClass:\n                        "flex-grow-1 overflow-auto nui-scroll-shadows",\n                    // these values reference child components laid out in this form (defined below)\n                    nodes: ["presentation", "customConfig"],\n                },\n            },\n            // /presentation\n            presentation: {\n                id: "presentation",\n                componentType: WidgetConfiguratorSectionComponent.lateLoadKey,\n                properties: {\n                    headerText: $localize`Presentation`,\n                    nodes: ["titleAndDescription"],\n                },\n            },\n            // /presentation/titleAndDescription\n            titleAndDescription: {\n                id: "titleAndDescription",\n                componentType:\n                    TitleAndDescriptionConfigurationComponent.lateLoadKey,\n                providers: {\n                    converter: {\n                        providerId: NOVA_TITLE_AND_DESCRIPTION_CONVERTER,\n                    } as IProviderConfiguration,\n                },\n            },\n            // /customConfig\n            customConfig: {\n                id: "customConfig",\n                componentType: WidgetConfiguratorSectionComponent.lateLoadKey,\n                properties: {\n                    headerText: $localize`Custom Widget Configuration`,\n                    nodes: ["imageSelection"],\n                },\n            },\n            // /customConfig/imageSelection\n            imageSelection: {\n                id: "imageSelection",\n                // Here\'s where we set the configurator to use our custom configurator section\n                componentType: CustomConfiguratorSectionComponent.lateLoadKey,\n                properties: {\n                    // This corresponds to the \'imageItems\' input on the custom configurator section component\n                    // which defines the list of image items to pick from. The empty value shown here is overridden\n                    // in the \'registerImageOptions\' method above.\n                    imageItems: [] as IMenuItem[],\n                },\n                providers: {\n                    // Using the generic converter to map the selected image source between the widget and the form\n                    [WellKnownProviders.Converter]: {\n                        providerId: NOVA_GENERIC_CONVERTER,\n                        properties: {\n                            formParts: [\n                                {\n                                    // Setting up the generic converter to update the \'imageSource\' property of the custom widget \'mainContent\' component\n                                    previewPath: "mainContent.properties",\n                                    // Note: To use the NOVA_GENERIC_CONVERTER, the linked properties must have the same name between the configurator\n                                    // section component and the widget \'mainContent\' component. Additionally, the property name must match the formControl\n                                    // name used in the configurator section component. In this case, the common name among all three is \'imageSource\'.\n                                    keys: ["imageSource"],\n                                },\n                            ] as IConverterFormPartsProperties[],\n                        },\n                    } as IProviderConfiguration,\n                },\n            },\n        },\n    },\n};\n\n// For this example, we\'re using static items for the image selection dropdown. In a more realistic scenario,\n// the items available for selection might come from a backend database.\nconst imageItems = [\n    {\n        title: "Harry Potter Book Cover",\n        url: "https://imgc.allpostersimages.com/img/print/u-g-F8PQ9I0.jpg?w=550&h=550&p=0",\n    },\n    {\n        title: "Harry Potter Movie Poster",\n        url: "https://images-na.ssl-images-amazon.com/images/I/81gpmMdKOHL._AC_SY741_.jpg",\n    },\n] as IMenuItem[];\n\n// We\'re using a static configuration object for this example. In a more realistic scenario,\n// a widget\'s configuration would likely be stored in a database.\nconst widgetConfig: IWidget = {\n    id: "widget1",\n    // This custom type is registered in the \'prepareNovaDashboards\' method above.\n    type: CUSTOM_WIDGET_TYPENAME,\n    pizzagna: {\n        [PizzagnaLayer.Configuration]: {\n            header: {\n                // Setting the initial property values for the WidgetHeaderComponent\n                properties: {\n                    title: "Harry Potter and the Sorcerer\'s Stone",\n                    subtitle: "By J. K. Rowling",\n                },\n            },\n            mainContent: {\n                properties: {\n                    // Setting the initial value for the \'imageSource\' property on our custom widget body\n                    imageSource: imageItems[0].url,\n                },\n            },\n        },\n    },\n};\n'},83745:(o,e,n)=>{"use strict";n.r(e),n.d(e,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport { CommonModule } from "@angular/common";\nimport { HttpClientModule } from "@angular/common/http";\nimport { NgModule } from "@angular/core";\nimport { ReactiveFormsModule } from "@angular/forms";\nimport { RouterModule } from "@angular/router";\n\nimport {\n    NuiButtonModule,\n    NuiDocsModule,\n    NuiFormFieldModule,\n    NuiIconModule,\n    NuiImageModule,\n    NuiMessageModule,\n    NuiSelectV2Module,\n    NuiSwitchModule,\n    DEMO_PATH_TOKEN,\n} from "@nova-ui/bits";\nimport {\n    NuiDashboardConfiguratorModule,\n    NuiDashboardsModule,\n} from "@nova-ui/dashboards";\n\nimport { getDemoFiles } from "../../../../../demo-files-factory";\nimport { CustomWidgetDocsComponent } from "./custom-widget-docs.component";\nimport {\n    CustomConfiguratorSectionComponent,\n    CustomWidgetBodyContentComponent,\n    CustomWidgetComponent,\n} from "./custom-widget.component";\n\nconst routes = [\n    {\n        path: "",\n        component: CustomWidgetDocsComponent,\n        data: {\n            srlc: {\n                hideIndicator: true,\n            },\n            showThemeSwitcher: true,\n        },\n    },\n    {\n        path: "example",\n        component: CustomWidgetComponent,\n        data: {\n            srlc: {\n                hideIndicator: true,\n            },\n        },\n    },\n];\n\n@NgModule({\n    imports: [\n        CommonModule,\n        ReactiveFormsModule,\n        HttpClientModule,\n        NuiDashboardsModule,\n        NuiDashboardConfiguratorModule,\n        NuiDocsModule,\n        NuiFormFieldModule,\n        NuiIconModule,\n        NuiImageModule,\n        NuiMessageModule,\n        NuiSelectV2Module,\n        NuiSwitchModule,\n        NuiButtonModule,\n        RouterModule.forChild(routes),\n    ],\n    declarations: [\n        CustomWidgetDocsComponent,\n        CustomConfiguratorSectionComponent,\n        CustomWidgetBodyContentComponent,\n        CustomWidgetComponent,\n    ],\n    providers: [\n        {\n            provide: DEMO_PATH_TOKEN,\n            useValue: getDemoFiles("widget"),\n        },\n    ],\n})\nexport default class CustomWidgetModule {}\n'},60776:(o,e,n)=>{"use strict";n.r(e),n.d(e,{default:()=>t});const t='<h1>Adding a Data Source</h1>\n\n<p>\n    In basic terms, a data source is an entity from which a widget on the\n    dashboard gets its data. In the context of the dashboards framework, a data\n    source is a dependency that gets injected just like any other provider for\n    use by a widget via Angular\'s built-in dependency injection (DI) mechanism.\n    As we\'ll see, the DI for a dependency in Nova Dashboards is very similar to\n    that used in Nova Bits and other Angular-based libraries with one major\n    difference: a dependency must be registered with a provider registry to make\n    the dashboard framework aware of its availability for injection. In this\n    tutorial, we\'ll go into some detail about this and other basics of how to\n    set up a data source.\n</p>\n\n<h2>Fundamental Concepts</h2>\n<ul>\n    <li>\n        <a href="../components/DashboardComponent.html" target="_blank"\n            ><code>DashboardComponent</code></a\n        >\n    </li>\n    <li>\n        <a href="../injectables/ProviderRegistryService.html" target="_blank"\n            ><code>ProviderRegistryService</code></a\n        >\n    </li>\n    <li>\n        <a href="../classes/WidgetTypesService.html" target="_blank"\n            ><code>WidgetTypesService</code></a\n        >\n    </li>\n    <li>Custom data source component</li>\n    <li>Widget configuration (including its associated data)</li>\n    <li>Widget position definition</li>\n</ul>\n\n<h2>Basic Steps</h2>\n<ol>\n    <li>\n        Follow the instructions\n        <a\n            href="../additional-documentation/getting-started.html"\n            target="_parent"\n            >here</a\n        >\n        to set up your environment for dashboard development.\n    </li>\n    <li>\n        Follow the instructions from the\n        <a\n            href="../additional-documentation/tutorials/hello-dashboards.html"\n            target="_parent"\n            >Hello Dashboards</a\n        >\n        tutorial to get a basic dashboard up and running.\n    </li>\n    <li>\n        Implement your data source (See the example source below for a basic\n        implementation).\n        <nui-message type="info" [allowDismiss]="false">\n            <strong>Note:</strong> It\'s recommended to have the data source in a\n            separate file. If you do put it in a separate file, don\'t forget to\n            add <code>@Injectable()</code> to the top of the data source class.\n            This lets Angular know that you plan on injecting dependencies into\n            it.\n        </nui-message>\n    </li>\n    <li>\n        Ensure that Angular\'s <code>HttpClientModule</code> is included in the\n        imports of the module that contains the data source. You can go\n        <a href="https://angular.io/guide/http#setup" target="_blank">here</a>\n        for more information about http setup.\n        <nui-message type="info" [allowDismiss]="false">\n            <strong>Note:</strong> Importing <code>HttpClientModule</code> is\n            required in this example because the data source depends on the\n            <code>HttpClient</code> service.\n        </nui-message>\n    </li>\n    <li>\n        Register the data source as a dynamically injectable provider using the\n        <a href="../injectables/ProviderRegistryService.html" target="_blank"\n            ><code>ProviderRegistryService</code></a\n        >.\n        <nui-message type="warning" [allowDismiss]="false">\n            <strong>Note:</strong> When registering a class provider using the\n            ProviderRegistryService, be sure to include in the\n            <code>deps</code> array any dependencies that need to be injected\n            into the provider. This is demonstrated in the example below.\n        </nui-message>\n    </li>\n    <li>Set the data source\'s provider ID in the widget configuration.</li>\n</ol>\n<p>\n    In the example below, we\'re statically setting the data source providerId\n    for the tile inside the KPI widget. In a real-world scenario, the tile\n    configuration would more likely come from a database or from the widget\n    configurator output. We\'ll cover configurator usage in the Widget Editing\n    and Widget Cloning tutorials.\n</p>\n<nui-message type="info" [allowDismiss]="false">\n    For more detailed information about adding a data source, take a look at the\n    inline comments under the source expander of the following example.\n</nui-message>\n<nui-example-wrapper\n    filenamePrefix="data-source-setup.component"\n    exampleTitle="Adding a Data Source"\n>\n    <data-source-setup></data-source-setup>\n</nui-example-wrapper>\n'},37240:(o,e,n)=>{"use strict";n.r(e),n.d(e,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport { Component } from "@angular/core";\n\n@Component({\n    selector: "nui-dashboard-data-source-docs",\n    templateUrl: "./data-source-setup-docs.component.html",\n})\nexport class DataSourceDocsComponent {}\n'},79208:(o,e,n)=>{"use strict";n.r(e),n.d(e,{default:()=>t});const t='<div class="w-100 dashboard">\n    \x3c!--\n        Note: The dashboard and gridsterConfig input assignments must use banana-in-a-box notation to keep\n        the dashboard state updated with changes to the pizzagna.\n    --\x3e\n    <nui-dashboard\n        [(dashboard)]="dashboard"\n        [(gridsterConfig)]="gridsterConfig"\n    >\n    </nui-dashboard>\n</div>\n'},84096:(o,e,n)=>{"use strict";n.r(e),n.d(e,{default:()=>t});const t=".dashboard {\n    height: 800px;\n}\n"},18680:(o,e,n)=>{"use strict";n.r(e),n.d(e,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport { HttpClient, HttpErrorResponse } from "@angular/common/http";\nimport { Component, Injectable, OnDestroy, OnInit } from "@angular/core";\nimport { GridsterConfig, GridsterItem } from "angular-gridster2";\nimport { BehaviorSubject } from "rxjs";\nimport { finalize } from "rxjs/operators";\n\nimport { DataSourceService, IFilteringOutputs } from "@nova-ui/bits";\nimport {\n    DATA_SOURCE,\n    DEFAULT_PIZZAGNA_ROOT,\n    IDashboard,\n    IKpiData,\n    IProviderConfiguration,\n    IRefresherProperties,\n    IWidget,\n    IWidgets,\n    KpiComponent,\n    NOVA_KPI_DATASOURCE_ADAPTER,\n    PizzagnaLayer,\n    ProviderRegistryService,\n    WellKnownProviders,\n    WidgetTypesService,\n} from "@nova-ui/dashboards";\n\n/**\n * A simple KPI data source to retrieve the average rating of Harry Potter and the Sorcerer\'s Stone (book) via googleapis\n */\n@Injectable()\nexport class AverageRatingKpiDataSource\n    extends DataSourceService<IKpiData>\n    implements OnDestroy\n{\n    // This is the ID we\'ll use to identify the provider\n    public static providerId = "AverageRatingKpiDataSource";\n\n    // Use this subject to communicate the data source\'s busy state\n    public busy = new BehaviorSubject<boolean>(false);\n\n    constructor(private http: HttpClient) {\n        super();\n    }\n\n    // In this example, getFilteredData is invoked every 10 minutes (Take a look at the refresher\n    // provider definition in the widget configuration below to see how the interval is set)\n    public async getFilteredData(): Promise<IFilteringOutputs> {\n        this.busy.next(true);\n        return new Promise((resolve) => {\n            // *** Make a resource request to an external API (if needed)\n            this.http\n                .get("https://www.googleapis.com/books/v1/volumes/5MQFrgEACAAJ")\n                .pipe(finalize(() => this.busy.next(false)))\n                .subscribe({\n                    next: (data: any) => {\n                        resolve({\n                            result: {\n                                value: data.volumeInfo.averageRating,\n                            },\n                        });\n                    },\n                    error: (error: HttpErrorResponse) => {\n                        resolve({\n                            result: null,\n                            error: {\n                                type: error.status,\n                            },\n                        });\n                    },\n                });\n        });\n    }\n\n    public ngOnDestroy(): void {\n        this.outputsSubject.complete();\n    }\n}\n\n/**\n * A component that instantiates the dashboard\n */\n@Component({\n    selector: "data-source-setup",\n    templateUrl: "./data-source-setup.component.html",\n    styleUrls: ["./data-source-setup.component.less"],\n})\nexport class DataSourceSetupComponent implements OnInit {\n    // This variable will hold all the data needed to define the layout and behavior of the widgets.\n    // Pass this to the dashboard component\'s dashboard input in the template.\n    public dashboard: IDashboard;\n\n    // Angular gridster requires a configuration object even if it\'s empty.\n    // Pass this to the dashboard component\'s gridsterConfig input in the template.\n    public gridsterConfig: GridsterConfig = {};\n\n    constructor(\n        // WidgetTypesService provides the widget\'s necessary structure information\n        private widgetTypesService: WidgetTypesService,\n\n        // In general, the ProviderRegistryService is used for making entities available for injection into dynamically loaded components.\n        private providerRegistry: ProviderRegistryService\n    ) {}\n\n    public ngOnInit(): void {\n        // Registering the data source for injection into the KPI tile.\n        // Note: Each tile of a KPI widget is assigned its own instance of the data source\n        this.providerRegistry.setProviders({\n            [AverageRatingKpiDataSource.providerId]: {\n                provide: DATA_SOURCE,\n                useClass: AverageRatingKpiDataSource,\n                // Any dependencies that need to be injected into the provider must be listed here\n                deps: [HttpClient],\n            },\n        });\n        // We\'re using a static configuration object for this example, but this is where\n        // the widget\'s configuration could potentially be populated from a database\n        const kpiWidget = widgetConfig;\n        const widgetIndex: IWidgets = {\n            // Complete the KPI widget with information coming from its type definition\n            [kpiWidget.id]:\n                this.widgetTypesService.mergeWithWidgetType(kpiWidget),\n        };\n\n        // Setting the widget dimensions and position (this is for gridster)\n        const positions: Record<string, GridsterItem> = {\n            [kpiWidget.id]: {\n                cols: 4,\n                rows: 6,\n                y: 0,\n                x: 0,\n            },\n        };\n\n        // Finally, assigning the variables we created above to the dashboard\n        this.dashboard = {\n            positions,\n            widgets: widgetIndex,\n        };\n    }\n}\n\nconst widgetConfig: IWidget = {\n    id: "widget1",\n    type: "kpi",\n    pizzagna: {\n        [PizzagnaLayer.Configuration]: {\n            [DEFAULT_PIZZAGNA_ROOT]: {\n                providers: {\n                    [WellKnownProviders.Refresher]: {\n                        properties: {\n                            // Configuring the refresher interval so that our data source is invoked every ten minutes\n                            interval: 60 * 10,\n                            enabled: true,\n                        } as IRefresherProperties,\n                    } as Partial<IProviderConfiguration>,\n                },\n            },\n            header: {\n                properties: {\n                    title: "Harry Potter and the Sorcerer\'s Stone",\n                    subtitle: "By J. K. Rowling",\n                },\n            },\n            tiles: {\n                properties: {\n                    nodes: ["kpi1"],\n                },\n            },\n            kpi1: {\n                id: "kpi1",\n                componentType: KpiComponent.lateLoadKey,\n                properties: {\n                    widgetData: {\n                        units: "out of 5 Stars",\n                        label: "Average Rating",\n                    },\n                },\n                providers: {\n                    [WellKnownProviders.DataSource]: {\n                        // Setting the data source providerId for the tile with id "kpi1"\n                        providerId: AverageRatingKpiDataSource.providerId,\n                    } as IProviderConfiguration,\n                    [WellKnownProviders.Adapter]: {\n                        providerId: NOVA_KPI_DATASOURCE_ADAPTER,\n                        properties: {\n                            componentId: "kpi1",\n                            propertyPath: "widgetData",\n                        },\n                    } as IProviderConfiguration,\n                },\n            },\n        },\n    },\n};\n'},68599:(o,e,n)=>{"use strict";n.r(e),n.d(e,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport { CommonModule } from "@angular/common";\nimport { HttpClientModule } from "@angular/common/http";\nimport { NgModule } from "@angular/core";\nimport { RouterModule } from "@angular/router";\n\nimport {\n    NuiDocsModule,\n    NuiMessageModule,\n    DEMO_PATH_TOKEN,\n} from "@nova-ui/bits";\nimport { NuiDashboardsModule } from "@nova-ui/dashboards";\n\nimport { getDemoFiles } from "../../../../demo-files-factory";\nimport { DataSourceDocsComponent } from "./data-source-setup-docs.component";\nimport { DataSourceSetupComponent } from "./data-source-setup.component";\n\nconst routes = [\n    {\n        path: "",\n        component: DataSourceDocsComponent,\n        data: {\n            srlc: {\n                hideIndicator: true,\n            },\n            showThemeSwitcher: true,\n        },\n    },\n    {\n        path: "example",\n        component: DataSourceSetupComponent,\n        data: {\n            srlc: {\n                hideIndicator: true,\n            },\n        },\n    },\n];\n\n@NgModule({\n    imports: [\n        CommonModule,\n        HttpClientModule,\n        NuiDashboardsModule,\n        NuiDocsModule,\n        NuiMessageModule,\n        RouterModule.forChild(routes),\n    ],\n    declarations: [DataSourceDocsComponent, DataSourceSetupComponent],\n    providers: [\n        {\n            provide: DEMO_PATH_TOKEN,\n            useValue: getDemoFiles("data-source-setup"),\n        },\n    ],\n})\nexport default class DataSourceSetupModule {}\n'},6340:(o,e,n)=>{"use strict";n.r(e),n.d(e,{default:()=>t});const t='<h1>Dynamic Header Links</h1>\n<p>\n    Widget headers provide a possibility to configure a link URL that shows a\n    link icon and makes the header clickable. This URL is static, but there is\n    an option to implement a dynamic URL. This is done by implementing a custom\n    class and defining it as a provider associated with the widget header in\n    targeted widget types. This custom class has to implement the\n    <code\n        ><a href="../interfaces/IHeaderLinkProvider.html" target="_blank"\n            >IHeaderLinkProvider</a\n        ></code\n    >\n    interface which defines a method returning a dynamic link URL. This URL can\n    be based on the <code>template</code> input, which is the static URL that\n    was configured by the user. This can be used as a template string where\n    specific parameters can be injected or appended at the end. Custom header\n    link provider has to be registered using the\n    <code\n        ><a href="../miscellaneous/variables.html#HEADER_LINK_PROVIDER"\n            >HEADER_LINK_PROVIDER</a\n        ></code\n    >\n    injection token.\n</p>\n<p>\n    Internal\n    <code\n        ><a\n            target="_blank"\n            href="https://github.com/solarwinds/nova/blob/main/packages/dashboards/examples/src/components/prototypes/prototype-1/prototype-1.component.ts"\n            >prototype-1</a\n        >\n    </code>\n    page demonstrates the implementation of a dynamic link URL that includes a\n    value of an external textbox.\n</p>\n'},55524:(o,e,n)=>{"use strict";n.r(e),n.d(e,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport { Component } from "@angular/core";\n\n@Component({\n    selector: "nui-dynamic-header-links-docs",\n    templateUrl: "./dynamic-header-links-docs.component.html",\n})\nexport class DynamicHeaderLinksDocsComponent {}\n'},94531:(o,e,n)=>{"use strict";n.r(e),n.d(e,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport { NgModule } from "@angular/core";\nimport { RouterModule } from "@angular/router";\n\nimport { DynamicHeaderLinksDocsComponent } from "./dynamic-header-links-docs.component";\n\nconst routes = [\n    {\n        path: "",\n        component: DynamicHeaderLinksDocsComponent,\n        data: {\n            srlc: {\n                hideIndicator: true,\n            },\n            showThemeSwitcher: true,\n        },\n    },\n];\n\n@NgModule({\n    imports: [RouterModule.forChild(routes)],\n    declarations: [DynamicHeaderLinksDocsComponent],\n})\nexport default class DynamicHeaderLinksDocsModule {}\n'},88842:(o,e,n)=>{"use strict";n.r(e),n.d(e,{default:()=>t});const t='<h1>Hello, Dashboards!</h1>\n\n<p>\n    In this tutorial we\'ll show you how to create the simplest form of a Nova\n    dashboard with a single static KPI widget.\n</p>\n\n<h2>Fundamental Concepts</h2>\n<ul>\n    <li>\n        <a href="../components/DashboardComponent.html" target="_blank"\n            ><code>DashboardComponent</code></a\n        >\n    </li>\n    <li>\n        <a href="../classes/WidgetTypesService.html" target="_blank"\n            ><code>WidgetTypesService</code></a\n        >\n    </li>\n    <li>Widget configuration (including its associated data)</li>\n    <li>Widget position definition</li>\n</ul>\n\n<h2>Basic Steps</h2>\n<ol>\n    <li>\n        Follow the instructions\n        <a\n            href="../additional-documentation/getting-started.html"\n            target="_blank"\n            >here</a\n        >\n        to set up your environment for dashboard development.\n    </li>\n    <li>\n        Populate a widget\'s initial configuration. Note: Best practice is to\n        retrieve this from a database or a separate file.\n    </li>\n    <li>\n        Grab the widget\'s predefined structure using the\n        <a href="../classes/WidgetTypesService.html" target="_blank"\n            ><code>WidgetTypesService</code></a\n        >\n        and merge it with the widget\'s initial configuration.\n    </li>\n    <li>\n        Create a\n        <a\n            href="https://github.com/tiberiuzuld/angular-gridster2/blob/master/README.md"\n            target="_blank"\n            >gridster</a\n        >\n        configuration variable of type\n        <a\n            href="https://github.com/tiberiuzuld/angular-gridster2/blob/master/projects/angular-gridster2/src/lib/gridsterConfig.interface.ts#L50"\n            target="_blank"\n            ><code>GridsterConfig</code></a\n        >\n        which holds the gridster configuration used by the dashboard to arrange\n        and size the widgets.\n    </li>\n    <li>\n        Create a dashboard variable of type\n        <a href="../interfaces/IDashboard.html" target="_blank"\n            ><code>IDashboard</code></a\n        >\n        which holds the widget definitions and positions.\n    </li>\n    <li>\n        In your template, create a\n        <a\n            href="../components/DashboardComponent.html#dashboard"\n            target="_blank"\n            ><code>&lt;nui-dashboard&gt;</code></a\n        >\n        instance and pass the dashboard definition and gridster configuration to\n        the\n        <code>dashboard</code> and <code>gridsterConfig</code> inputs\n        respectively.\n    </li>\n</ol>\n\n<nui-message type="warning" [allowDismiss]="false">\n    <strong>Note:</strong> The dashboard and gridsterConfig input assignments\n    must use\n    <a\n        href="https://angular.io/guide/template-syntax#two-way-binding-"\n        target="_blank"\n        >banana-in-a-box</a\n    >\n    notation to keep the dashboard state updated with changes to the pizzagna.\n</nui-message>\n\n<p>\n    In the example below, we\'re using a static configuration and data for the\n    KPI widget. Normally, the configuration would come from a database or from\n    the widget configurator output. We\'ll cover configurator usage in the Widget\n    Editing and Cloning tutorials.\n</p>\n\n<h2>Gridster</h2>\n\n<p>\n    <a\n        href="https://github.com/tiberiuzuld/angular-gridster2/blob/master/README.md"\n        target="_blank"\n        ><code>angular-gridster2</code></a\n    >, also known simply as Gridster, is a package used by Nova Dashboards that\n    simplifies the process of creating and maintaining intuitive, draggable grid\n    layouts of DOM elements. In the case of Nova Dashboards, these elements take\n    the form of widgets which can span one or more rows and columns. In addition\n    to draggability, Nova Dashboards\' use of Gridster allows users to\n    dynamically add or remove widgets from the the dashboard grid.\n</p>\n<p>\n    Nova Dashboards exposes the entire gridster configuration API so you can\n    modify any setting that Gridster supports. Check out their\n    <a href="https://tiberiuzuld.github.io/angular-gridster2/" target="_blank"\n        >demo</a\n    >\n    for more configuration information.\n</p>\n\n<nui-message type="info" [allowDismiss]="false">\n    For more detailed information about basic dashboard setup, take a look at\n    the inline comments under the source expander of the following example.\n</nui-message>\n<nui-example-wrapper\n    filenamePrefix="hello-dashboards-example"\n    exampleTitle="Hello Dashboards"\n>\n    <hello-dashboards-example></hello-dashboards-example>\n</nui-example-wrapper>\n'},90134:(o,e,n)=>{"use strict";n.r(e),n.d(e,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport { Component } from "@angular/core";\n\n@Component({\n    selector: "nui-dashboard-hello-dashboards-docs",\n    templateUrl: "./hello-dashboards-docs.component.html",\n})\nexport class HelloDashboardsDocsComponent {}\n'},45499:(o,e,n)=>{"use strict";n.r(e),n.d(e,{default:()=>t});const t='<div class="w-100 dashboard">\n    \x3c!--\n        Note: The dashboard and gridsterConfig input assignments must use banana-in-a-box notation to keep\n        the dashboard state updated with changes to the pizzagna.\n    --\x3e\n    <nui-dashboard\n        [(dashboard)]="dashboard"\n        [(gridsterConfig)]="gridsterConfig"\n    >\n    </nui-dashboard>\n</div>\n'},84063:(o,e,n)=>{"use strict";n.r(e),n.d(e,{default:()=>t});const t=".dashboard {\n    height: 800px;\n}\n"},68003:(o,e,n)=>{"use strict";n.r(e),n.d(e,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport { Component, OnInit } from "@angular/core";\nimport { GridsterConfig, GridsterItem } from "angular-gridster2";\n\nimport {\n    IDashboard,\n    IWidget,\n    IWidgets,\n    KpiComponent,\n    PizzagnaLayer,\n    WidgetTypesService,\n} from "@nova-ui/dashboards";\n\n/**\n * A component that instantiates the dashboard\n */\n@Component({\n    selector: "hello-dashboards-example",\n    templateUrl: "./hello-dashboards-example.component.html",\n    styleUrls: ["./hello-dashboards-example.component.less"],\n})\nexport class HelloDashboardsExampleComponent implements OnInit {\n    // This variable will have all the data needed to render the widgets widgets.\n    // Pass this to the dashboard component\'s dashboard input.\n    public dashboard: IDashboard;\n    // Angular gridster requires a configuration object even if its empty.\n    // Pass this to the dashboard component\'s gridsterConfig input.\n    public gridsterConfig: GridsterConfig = {};\n\n    // WidgetTypesService provides the widget\'s necessary structure information\n    constructor(private widgetTypesService: WidgetTypesService) {}\n\n    public ngOnInit(): void {\n        // Here we are hard-coding the widget config for this example, but this is where you\n        // could potentially populate the widget\'s configuration from a database\n        const kpiWidget = widgetConfig;\n        const widgetIndex: IWidgets = {\n            // Complete the KPI widget with information coming from its type definition\n            [kpiWidget.id]:\n                this.widgetTypesService.mergeWithWidgetType(kpiWidget),\n        };\n        // Setting widget position and dimensions (this is for gridster)\n        const positions: Record<string, GridsterItem> = {\n            [kpiWidget.id]: {\n                cols: 4,\n                rows: 6,\n                y: 0,\n                x: 0,\n            },\n        };\n        // Finally, assigning the variables we created above to the dashboard\n        this.dashboard = {\n            positions,\n            widgets: widgetIndex,\n        };\n    }\n}\n\n// In a real-world scenario, this configuration would typically be fetched from a database or at least live in another file\nconst widgetConfig: IWidget = {\n    id: "widget1",\n    type: "kpi",\n    pizzagna: {\n        [PizzagnaLayer.Configuration]: {\n            header: {\n                properties: {\n                    title: "Hello, KPI Widget!",\n                    subtitle: "A Venue for Meaningful Values",\n                },\n            },\n            tiles: {\n                properties: {\n                    nodes: ["kpi1"],\n                },\n            },\n            kpi1: {\n                id: "kpi1",\n                componentType: KpiComponent.lateLoadKey,\n                properties: {\n                    widgetData: {\n                        id: "totalStorage",\n                        value: 1,\n                        label: "Total storage",\n                        units: "TB",\n                    },\n                },\n            },\n        },\n    },\n};\n'},89633:(o,e,n)=>{"use strict";n.r(e),n.d(e,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport { CommonModule } from "@angular/common";\nimport { NgModule } from "@angular/core";\nimport { RouterModule } from "@angular/router";\n\nimport {\n    NuiDocsModule,\n    NuiMessageModule,\n    DEMO_PATH_TOKEN,\n} from "@nova-ui/bits";\nimport { NuiDashboardsModule } from "@nova-ui/dashboards";\n\nimport { getDemoFiles } from "../../../../demo-files-factory";\nimport { HelloDashboardsDocsComponent } from "./hello-dashboards-docs.component";\nimport { HelloDashboardsExampleComponent } from "./hello-dashboards-example/hello-dashboards-example.component";\n\nconst routes = [\n    {\n        path: "",\n        component: HelloDashboardsDocsComponent,\n        data: {\n            srlc: {\n                hideIndicator: true,\n            },\n            showThemeSwitcher: true,\n        },\n    },\n    {\n        path: "example",\n        component: HelloDashboardsExampleComponent,\n        data: {\n            srlc: {\n                hideIndicator: true,\n            },\n        },\n    },\n];\n\n@NgModule({\n    imports: [\n        CommonModule,\n        NuiDashboardsModule,\n        NuiDocsModule,\n        NuiMessageModule,\n        RouterModule.forChild(routes),\n    ],\n    declarations: [\n        HelloDashboardsDocsComponent,\n        HelloDashboardsExampleComponent,\n    ],\n    providers: [\n        {\n            provide: DEMO_PATH_TOKEN,\n            useValue: getDemoFiles("hello-dashboards"),\n        },\n    ],\n})\nexport default class HelloDashboardsModule {}\n'},81020:(o,e,n)=>{"use strict";n.r(e),n.d(e,{default:()=>t});const t='<h1>Persistence</h1>\n\n<p>\n    In this tutorial we\'ll cover how to add a persistence handler by binding it\n    to the nuiWidgetEditor directive. The persistence handler will allow you to\n    run any persistence or other logic before the editor form workflow is\n    completed or before a widget is removed from the dashboard. For simplicity\'s\n    sake, in this tutorial we won\'t perform any actual persistence. Instead,\n    we\'ll display a toast from each of the handler callbacks to indicate mock\n    success after a one-second timeout.\n</p>\n\n<h2>Fundamental Concepts</h2>\n<ul>\n    <li>\n        <a href="../directives/WidgetEditorDirective.html" target="_blank"\n            ><code>nuiWidgetEditor</code></a\n        >directive\n    </li>\n    <li>Persistence handler</li>\n</ul>\n\n<h2>Basic Steps</h2>\n<ol>\n    <li>\n        Follow the instructions\n        <a\n            href="../additional-documentation/getting-started.html"\n            target="_parent"\n            >here</a\n        >\n        to set up your environment for dashboard development.\n    </li>\n    <li>\n        Follow the instructions from previous tutorials to get a basic dashboard\n        up and running.\n    </li>\n    <li>\n        Create a persistence handler class which implements\n        <a\n            href="../interfaces/IDashboardPersistenceHandler.html"\n            target="_blank"\n            ><code>IDashboardPersistenceHandler</code></a\n        >. To realize the interface, the class may have a\n        <code>trySubmit</code> and/or a <code>tryRemove</code> method.\n        <nui-message type="info" [allowDismiss]="false">\n            <b>Note:</b> It\'s recommended to implement the persistence handler\n            as a separate class in its own file. It can be added to the\n            providers list of either the dashboard component itself or a parent\n            module.\n        </nui-message>\n    </li>\n    <li>\n        Ensure that the <code>NuiToastModule</code> is included in the imports\n        of the module that contains the persistence handler.\n        <nui-message type="info" [allowDismiss]="false">\n            <strong>Note:</strong> Importing <code>NuiToastModule</code> is\n            required in this example because, in this case, the persistence\n            handler uses the <code>ToastService</code>.\n        </nui-message>\n    </li>\n    <li>\n        Implement a <code>trySubmit</code> method that will be invoked as a\n        callback anytime the widget editor form gets submitted. The parameters\n        of the callback are the updated\n        <a href="../interfaces/IWidget.html" target="_blank"\n            ><code>IWidget</code></a\n        >\n        and the\n        <a href="../interfaces/IConfiguratorSource.html" target="_blank"\n            ><code>IConfiguratorSource</code></a\n        >\n        which contains a reference to the\n        <a href="../components/DashboardComponent.html" target="_blank"\n            ><code>DashboardComponent</code></a\n        >\n        and an object containing the original state of the IWidget being edited.\n        Its expected return value is an observable that resolves to the updated\n        <a href="../interfaces/IWidget.html" target="_blank"\n            ><code>IWidget</code></a\n        >\n        if persistence is successful.\n    </li>\n    <li>\n        Implement a <code>tryRemove</code> method that will be invoked as a\n        callback anytime there\'s a widget removal attempt. The parameter of the\n        callback is the string id of the widget being removed. Its expected\n        return value is an observable that resolves to the same id of the\n        removed widget if persistence is successful.\n    </li>\n    <li>\n        In your template, assign the injected instance of the persistence\n        handler to the <code>nuiWidgetEditor</code> directive.\n    </li>\n</ol>\n\n<nui-message type="info" [allowDismiss]="false">\n    For more detailed information about setting up a persistence handler, take a\n    look at the inline comments under the source expander of the following\n    example.\n</nui-message>\n<nui-example-wrapper\n    filenamePrefix="persistence-handler-setup.component"\n    exampleTitle="Adding a persistence handler"\n>\n    <persistence-handler-setup></persistence-handler-setup>\n</nui-example-wrapper>\n'},96076:(o,e,n)=>{"use strict";n.r(e),n.d(e,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport { Component } from "@angular/core";\n\n@Component({\n    selector: "nui-dashboard-persistence-handler-setup-docs",\n    templateUrl: "./persistence-handler-setup-docs.component.html",\n})\nexport class PersistenceHandlerSetupDocsComponent {}\n'},6236:(o,e,n)=>{"use strict";n.r(e),n.d(e,{default:()=>t});const t='<div class="my-3 d-flex align-items-center">\n    <nui-switch class="ml-3" [(value)]="editMode" i18n>Edit Mode</nui-switch>\n    <button\n        *ngIf="!dashboard?.widgets[\'widget1\']"\n        type="button"\n        displayStyle="action"\n        (click)="reInitializeDashboard()"\n        nui-button\n        i18n\n    >\n        Restore Widget\n    </button>\n</div>\n\n\x3c!--\n    The nuiWidgetEditor directive uses a standard input binding for its persistence handler assignment.\n--\x3e\n<div class="w-100 dashboard">\n    <nui-dashboard\n        *ngIf="dashboard"\n        [(dashboard)]="dashboard"\n        [(gridsterConfig)]="gridsterConfig"\n        [editMode]="editMode"\n        [nuiWidgetEditor]="persistenceHandler"\n    >\n    </nui-dashboard>\n</div>\n'},86236:(o,e,n)=>{"use strict";n.r(e),n.d(e,{default:()=>t});const t=".dashboard {\n    height: 800px;\n}\n"},53772:(o,e,n)=>{"use strict";n.r(e),n.d(e,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport { HttpClient, HttpErrorResponse } from "@angular/common/http";\nimport {\n    ChangeDetectorRef,\n    Component,\n    Injectable,\n    OnDestroy,\n    OnInit,\n} from "@angular/core";\nimport { GridsterConfig, GridsterItem } from "angular-gridster2";\nimport { BehaviorSubject, Observable, Subject } from "rxjs";\nimport { finalize } from "rxjs/operators";\n\nimport {\n    DataSourceService,\n    IFilteringOutputs,\n    ToastService,\n    uuid,\n} from "@nova-ui/bits";\nimport {\n    DATA_SOURCE,\n    DEFAULT_PIZZAGNA_ROOT,\n    IDashboard,\n    IDashboardPersistenceHandler,\n    IKpiData,\n    IProviderConfiguration,\n    IRefresherProperties,\n    IWidget,\n    IWidgets,\n    KpiComponent,\n    NOVA_KPI_DATASOURCE_ADAPTER,\n    PizzagnaLayer,\n    ProviderRegistryService,\n    WellKnownPathKey,\n    WellKnownProviders,\n    WidgetTypesService,\n} from "@nova-ui/dashboards";\n\n/**\n * A simple persistence handler that is tied to the widget editor directive\n */\n@Injectable()\n// The realizer of IDashboardPersistenceHandler may implement a trySubmit and/or a tryRemove method.\nexport class PersistenceHandler implements IDashboardPersistenceHandler {\n    // This variable is just to show how to handle error handling.\n    private persistenceSucceeded: boolean = true;\n\n    // The example uses the toast service to demonstrate the\n    // invocation of each of the persistence handler callbacks\n    constructor(private toastService: ToastService) {\n        // toastService options to let it sit on the page for 2 seconds.\n        this.toastService.setConfig({\n            timeOut: 2000,\n        });\n    }\n\n    // This method will be invoked anytime the widget editor form gets submitted.\n    public trySubmit = (widget: IWidget): Observable<IWidget> => {\n        // Since we are working asynchronously, we\'ll return a subject. So, after the submit attempt\n        // succeeds or fails, we can let the subscriber know the result.\n        const subject = new Subject<IWidget>();\n\n        if (!widget.id) {\n            // Creates an id if the widget has no id.\n            // (This step will make more sense in the context of the widget cloning tutorial\n            // in which we handle the persistence of a newly created widget.)\n            widget.id = uuid();\n        }\n\n        // For this example, we\'re using a setTimeout to mock an asynchronous persistence request to a backend\n        setTimeout(() => {\n            if (this.persistenceSucceeded) {\n                // Passes along the new widget after one second.\n                subject.next(widget);\n                // Toast on the page on success.\n                this.toastService.success({\n                    title: $localize`Submit succeeded.`,\n                });\n            } else {\n                const errorText = $localize`Submit failed.`;\n                // Toast on the page on failure.\n                this.toastService.error({ title: errorText });\n                // Makes the subject say there is an error.\n                subject.error(errorText);\n            }\n            // Completes the subject so whoever subscribes to it knows its finished.\n            subject.complete();\n        }, 1000);\n\n        // Returns the subject as an observable.\n        return subject.asObservable();\n    };\n\n    // This method will be invoked anytime there\'s a widget removal attempt.\n    public tryRemove = (widgetId: string): Observable<string> => {\n        const subject = new Subject<string>();\n\n        setTimeout(() => {\n            if (this.persistenceSucceeded) {\n                // Pass through the id of the widget that was removed.\n                subject.next(widgetId);\n                this.toastService.success({\n                    title: $localize`Removal succeeded.`,\n                });\n            } else {\n                const errorText = $localize`Removal failed.`;\n                this.toastService.error({ title: errorText });\n                subject.error(errorText);\n            }\n            subject.complete();\n        }, 1000);\n\n        return subject.asObservable();\n    };\n}\n\n/**\n * A component that instantiates the dashboard\n */\n@Component({\n    selector: "persistence-handler-setup",\n    templateUrl: "./persistence-handler-setup.component.html",\n    styleUrls: ["./persistence-handler-setup.component.less"],\n    // Here we provide our persistence handler at the component level; this can also be done in the module.\n    providers: [PersistenceHandler],\n})\nexport class PersistenceHandlerSetupComponent implements OnInit {\n    // This variable will hold all the data needed to define the layout and behavior of the widgets.\n    // Pass this to the dashboard component\'s dashboard input in the template.\n    public dashboard: IDashboard | undefined;\n\n    // Angular gridster requires a configuration object even if it\'s empty.\n    // Pass this to the dashboard component\'s gridsterConfig input in the template.\n    public gridsterConfig: GridsterConfig = {};\n\n    // Boolean which dashboard takes in as an input if its true it allows you to move widgets around.\n    public editMode: boolean = false;\n\n    constructor(\n        // WidgetTypesService provides the widget\'s necessary structure information\n        private widgetTypesService: WidgetTypesService,\n\n        // In general, the ProviderRegistryService is used for making entities available for injection into dynamically loaded components.\n        private providerRegistry: ProviderRegistryService,\n\n        // We are injecting the PersistenceHandler we created and assigning it to a property we use in the template.\n        public persistenceHandler: PersistenceHandler,\n        private changeDetectorRef: ChangeDetectorRef\n    ) {}\n\n    public ngOnInit(): void {\n        // Grabbing the widget\'s default template which will be needed as a parameter for setNode\n        const widgetTemplate = this.widgetTypesService.getWidgetType("kpi", 1);\n        // Registering our data sources as dropdown options in the widget editor/configurator\n        // Note: This could also be done in the parent module\'s constructor so that\n        // multiple dashboards could have access to the same widget template modification.\n        this.widgetTypesService.setNode(\n            // This is the template we grabbed above with getWidgetType\n            widgetTemplate,\n            // We are setting the editor/configurator part of the widget template\n            "configurator",\n            // This indicates which node you are changing and we want to change\n            // the data source providers available for selection in the editor.\n            WellKnownPathKey.DataSourceProviders,\n            // We are setting the data sources available for selection in the editor\n            [\n                AverageRatingKpiDataSource.providerId,\n                RatingsCountKpiDataSource.providerId,\n            ]\n        );\n\n        // Registering the data sources available for injection into the KPI tiles.\n        // Note: Each tile of a KPI widget is assigned its own instance of a data source\n        this.providerRegistry.setProviders({\n            [AverageRatingKpiDataSource.providerId]: {\n                provide: DATA_SOURCE,\n                useClass: AverageRatingKpiDataSource,\n                // Any dependencies that need to be injected into the provider must be listed here\n                deps: [HttpClient],\n            },\n            [RatingsCountKpiDataSource.providerId]: {\n                provide: DATA_SOURCE,\n                useClass: RatingsCountKpiDataSource,\n                deps: [HttpClient],\n            },\n        });\n\n        this.initializeDashboard();\n    }\n\n    /** Used for restoring widgets state */\n    public reInitializeDashboard(): void {\n        // destroys the components and their providers so the dashboard can re init data\n        this.dashboard = undefined;\n        this.changeDetectorRef.detectChanges();\n\n        this.initializeDashboard();\n    }\n\n    public initializeDashboard(): void {\n        // We\'re using a static configuration object for this example (see widgetConfig at the bottom of the file),\n        // but this is where the widget\'s configuration could potentially be populated from a database\n        const kpiWidget = widgetConfig;\n        const widgetIndex: IWidgets = {\n            // Complete the KPI widget with information coming from its type definition\n            [kpiWidget.id]:\n                this.widgetTypesService.mergeWithWidgetType(kpiWidget),\n        };\n\n        // Setting the widget dimensions and position (this is for gridster)\n        const positions: Record<string, GridsterItem> = {\n            [kpiWidget.id]: {\n                cols: 4,\n                rows: 6,\n                y: 0,\n                x: 0,\n            },\n        };\n\n        // Finally, assigning the variables we created above to the dashboard\n        this.dashboard = {\n            positions,\n            widgets: widgetIndex,\n        };\n    }\n}\n\n/**\n * A simple KPI data source to retrieve the average rating of Harry Potter and the Sorcerer\'s Stone (book) via googleapis\n */\n@Injectable()\nexport class AverageRatingKpiDataSource\n    extends DataSourceService<IKpiData>\n    implements OnDestroy\n{\n    // This is the ID we\'ll use to identify the provider\n    public static providerId = "AverageRatingKpiDataSource";\n\n    // Use this subject to communicate the data source\'s busy state\n    public busy = new BehaviorSubject<boolean>(false);\n\n    constructor(private http: HttpClient) {\n        super();\n    }\n\n    // In this example, getFilteredData is invoked every 10 minutes (Take a look at the refresher\n    // provider definition in the widget configuration below to see how the interval is set)\n    public async getFilteredData(): Promise<IFilteringOutputs> {\n        this.busy.next(true);\n        return new Promise((resolve) => {\n            // *** Make a resource request to an external API (if needed)\n            this.http\n                .get("https://www.googleapis.com/books/v1/volumes/5MQFrgEACAAJ")\n                .pipe(finalize(() => this.busy.next(false)))\n                .subscribe({\n                    next: (data: any) => {\n                        resolve({\n                            result: {\n                                value: data.volumeInfo.averageRating,\n                            },\n                        });\n                    },\n                    error: (error: HttpErrorResponse) => {\n                        resolve({\n                            result: null,\n                            error: {\n                                type: error.status,\n                            },\n                        });\n                    },\n                });\n        });\n    }\n\n    public ngOnDestroy(): void {\n        this.outputsSubject.complete();\n    }\n}\n\n/**\n * A simple KPI data source to retrieve the ratings count of Harry Potter and the Sorcerer\'s Stone (book) via googleapis\n */\n@Injectable()\nexport class RatingsCountKpiDataSource\n    extends DataSourceService<IKpiData>\n    implements OnDestroy\n{\n    public static providerId = "RatingsCountKpiDataSource";\n\n    // Use this subject to communicate the data source\'s busy state\n    public busy = new BehaviorSubject<boolean>(false);\n\n    constructor(private http: HttpClient) {\n        super();\n    }\n\n    public async getFilteredData(): Promise<IFilteringOutputs> {\n        this.busy.next(true);\n        return new Promise((resolve) => {\n            this.http\n                .get("https://www.googleapis.com/books/v1/volumes/5MQFrgEACAAJ")\n                .pipe(finalize(() => this.busy.next(false)))\n                .subscribe({\n                    next: (data: any) => {\n                        resolve({\n                            result: {\n                                value: data.volumeInfo.ratingsCount,\n                            },\n                        });\n                    },\n                    error: (error: HttpErrorResponse) => {\n                        resolve({\n                            result: null,\n                            error: {\n                                type: error.status,\n                            },\n                        });\n                    },\n                });\n        });\n    }\n\n    public ngOnDestroy(): void {\n        this.outputsSubject.complete();\n    }\n}\n\nconst widgetConfig: IWidget = {\n    id: "widget1",\n    type: "kpi",\n    pizzagna: {\n        [PizzagnaLayer.Configuration]: {\n            [DEFAULT_PIZZAGNA_ROOT]: {\n                providers: {\n                    [WellKnownProviders.Refresher]: {\n                        properties: {\n                            // Configuring the refresher interval so that our data source is invoked every ten minutes\n                            interval: 60 * 10,\n                            enabled: true,\n                        } as IRefresherProperties,\n                    } as Partial<IProviderConfiguration>,\n                },\n            },\n            header: {\n                properties: {\n                    title: "Harry Potter and the Sorcerer\'s Stone",\n                    subtitle: "By J. K. Rowling",\n                },\n            },\n            tiles: {\n                properties: {\n                    nodes: ["kpi1"],\n                },\n            },\n            kpi1: {\n                id: "kpi1",\n                componentType: KpiComponent.lateLoadKey,\n                properties: {\n                    widgetData: {\n                        units: "out of 5 Stars",\n                        label: "Average Rating",\n                    },\n                },\n                providers: {\n                    [WellKnownProviders.DataSource]: {\n                        // Setting the data source providerId for the tile with id "kpi1"\n                        providerId: AverageRatingKpiDataSource.providerId,\n                    } as IProviderConfiguration,\n                    [WellKnownProviders.Adapter]: {\n                        providerId: NOVA_KPI_DATASOURCE_ADAPTER,\n                        properties: {\n                            componentId: "kpi1",\n                            propertyPath: "widgetData",\n                        },\n                    } as IProviderConfiguration,\n                },\n            },\n        },\n    },\n};\n'},77179:(o,e,n)=>{"use strict";n.r(e),n.d(e,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport { CommonModule } from "@angular/common";\nimport { HttpClientModule } from "@angular/common/http";\nimport { NgModule } from "@angular/core";\nimport { RouterModule } from "@angular/router";\n\nimport {\n    NuiButtonModule,\n    NuiDocsModule,\n    NuiMessageModule,\n    NuiSwitchModule,\n    NuiToastModule,\n    DEMO_PATH_TOKEN,\n} from "@nova-ui/bits";\nimport { NuiDashboardsModule } from "@nova-ui/dashboards";\n\nimport { getDemoFiles } from "../../../../demo-files-factory";\nimport { PersistenceHandlerSetupDocsComponent } from "./persistence-handler-setup-docs.component";\nimport { PersistenceHandlerSetupComponent } from "./persistence-handler-setup.component";\n\nconst routes = [\n    {\n        path: "",\n        component: PersistenceHandlerSetupDocsComponent,\n        data: {\n            srlc: {\n                hideIndicator: true,\n            },\n            showThemeSwitcher: true,\n        },\n    },\n    {\n        path: "example",\n        component: PersistenceHandlerSetupComponent,\n        data: {\n            srlc: {\n                hideIndicator: true,\n            },\n        },\n    },\n];\n\n@NgModule({\n    imports: [\n        CommonModule,\n        HttpClientModule,\n        NuiDashboardsModule,\n        NuiDocsModule,\n        NuiMessageModule,\n        NuiSwitchModule,\n        NuiToastModule,\n        NuiButtonModule,\n        RouterModule.forChild(routes),\n    ],\n    declarations: [\n        PersistenceHandlerSetupDocsComponent,\n        PersistenceHandlerSetupComponent,\n    ],\n    providers: [\n        {\n            provide: DEMO_PATH_TOKEN,\n            useValue: getDemoFiles("persistence-handler-setup"),\n        },\n    ],\n})\nexport default class PersistenceHandlerSetupModule {}\n'},35783:(o,e,n)=>{"use strict";n.r(e),n.d(e,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport { NgModule, Type } from "@angular/core";\nimport { RouterModule, Routes } from "@angular/router";\n\nimport { ConfiguratorHeadingService } from "@nova-ui/dashboards";\n\nexport enum TutorialsModuleRoute {\n    HelloDashboards = "hello-dashboards",\n    DataSource = "data-source-setup",\n    WidgetEditor = "widget-editor-setup",\n    SubmitHandler = "persistence-handler-setup",\n    WidgetCreation = "widget-creation",\n    Customization = "customization",\n    WidgetErrorHandling = "widget-error-handling",\n    DynamicHeaderLinks = "dynamic-header-links",\n}\n\nconst routes: Routes = [\n    {\n        path: TutorialsModuleRoute.HelloDashboards,\n        loadChildren: async () =>\n            import(\n                "./hello-dashboards/hello-dashboards.module"\n            ) as object as Promise<Type<any>>,\n    },\n    {\n        path: TutorialsModuleRoute.DataSource,\n        loadChildren: async () =>\n            import(\n                "./data-source-setup/data-source-setup.module"\n            ) as object as Promise<Type<any>>,\n    },\n    {\n        path: TutorialsModuleRoute.WidgetEditor,\n        loadChildren: async () =>\n            import(\n                "./widget-editor-setup/widget-editor-setup.module"\n            ) as object as Promise<Type<any>>,\n    },\n    {\n        path: TutorialsModuleRoute.SubmitHandler,\n        loadChildren: async () =>\n            import(\n                "./persistence-handler-setup/persistence-handler-setup.module"\n            ) as object as Promise<Type<any>>,\n    },\n    {\n        path: TutorialsModuleRoute.WidgetCreation,\n        loadChildren: async () =>\n            import(\n                "./widget-creation/widget-creation.module"\n            ) as object as Promise<Type<any>>,\n    },\n    {\n        path: TutorialsModuleRoute.Customization,\n        loadChildren: async () =>\n            import("./customization/customization.module") as object as Promise<\n                Type<any>\n            >,\n    },\n    {\n        path: TutorialsModuleRoute.WidgetErrorHandling,\n        loadChildren: async () =>\n            import(\n                "./widget-error-handling/widget-error-handling.module"\n            ) as object as Promise<Type<any>>,\n    },\n    {\n        path: TutorialsModuleRoute.DynamicHeaderLinks,\n        loadChildren: async () =>\n            import(\n                "./dynamic-header-links/dynamic-header-links-docs.module"\n            ) as object as Promise<Type<any>>,\n    },\n];\n\n@NgModule({\n    imports: [RouterModule.forChild(routes)],\n    providers: [ConfiguratorHeadingService],\n})\nexport default class TutorialsModule {}\n'},74948:(o,e,n)=>{"use strict";n.r(e),n.d(e,{default:()=>t});const t='<h1>Widget Creation</h1>\n\n<p>\n    In this tutorial we\'ll cover how to add a widget creation wizard which\n    allows end-users to create new widget instances based on existing widget\n    configurations. The wizard\'s first step, or page, will use a custom\n    component that lets users choose a widget to create. In the example below\n    we\'ll implement a sample widget selection component that provides a\n    proportional widget and a kpi widget as options.\n</p>\n\n<h2>Fundamental Concepts</h2>\n<ul>\n    <li>\n        <a href="../injectables/ProviderRegistryService.html" target="_blank"\n            ><code>ProviderRegistryService</code></a\n        >\n    </li>\n    <li>\n        <a href="../injectables/WidgetClonerService.html" target="_blank"\n            ><code>WidgetClonerService</code></a\n        >\n    </li>\n    <li>Widget configurations</li>\n    <li>Custom component for widget selection</li>\n</ul>\n\n<h2>Basic Steps</h2>\n<ol>\n    <li>\n        Follow the instructions\n        <a\n            href="../additional-documentation/getting-started.html"\n            target="_parent"\n            >here</a\n        >\n        to set up your environment for dashboard development.\n    </li>\n    <li>\n        Follow the instructions from previous tutorials to get a basic dashboard\n        up and running.\n    </li>\n    <li>\n        Create a widget template selector component which will act as the first\n        step in the wizard. The selector component should implement the\n        <a href="../interfaces/IWidgetTemplateSelector.html" target="_blank"\n            ><code>IWidgetTemplateSelector</code></a\n        >\n        interface which requires a widgetSelected output that should emit a\n        widget to be cloned. For any widgets that require further configuration\n        before they should be placed on the dashboard, set the widget\'s\n        <code\n            ><a\n                href="../interfaces/IWidgetMetadata.html#needsConfiguration"\n                target="_blank"\n                >metadata.needsConfiguration</a\n            ></code\n        >\n        property to <code>true</code>. This will hide the "Create Widget" button\n        whenever an unconfigured widget is selected.\n        <nui-message type="info" [allowDismiss]="false">\n            <strong>Note:</strong> In the example below, the widget selector is\n            implemented in the same file as the dashboard component, but it\'s\n            recommended to define it in a separate file. Additionally, after\n            implementing it, remember to add it to your module declarations.\n        </nui-message>\n    </li>\n    <li>\n        Ensure that <code>NuiRepeatModule</code> and\n        <code>NuiImageModule</code> are included in the imports of the widget\n        template selector component\'s parent module.\n        <nui-message type="info" [allowDismiss]="false">\n            <strong>Note:</strong> Importing these modules is required in this\n            example because, in this case, the widget template selector uses the\n            Nova repeat component and a couple of images from the Nova image\n            repository.\n        </nui-message>\n    </li>\n    <li>\n        Invoke the <code>open</code> method on the\n        <a href="../injectables/WidgetClonerService.html" target="_blank"\n            ><code>WidgetClonerService</code></a\n        >\n        with an argument of type\n        <a href="../interfaces/IWidgetSelector.html" target="_blank"\n            ><code>IWidgetSelector</code></a\n        >. Only two things are required in that object: a reference to the\n        dashboardComponent instance and the typename of the widget selector\n        created in the previous step. Optionally, the argument object may also\n        contain a <code>trySubmit</code> function with logic for persisting the\n        new widget on a backend.\n    </li>\n    <li>\n        Subscribe to the <code>Observable</code> returned by the\n        <a href="../injectables/WidgetClonerService.html#open" target="_blank"\n            ><code>widgetClonerService.open</code></a\n        >\n        method in order to activate the handling of form submission and the\n        subsequent updating of the dashboard with a newly created widget.\n    </li>\n</ol>\n\n<nui-message type="info" [allowDismiss]="false">\n    For more detailed information about widget creation, take a look at the\n    inline comments under the source expander of the following example.\n</nui-message>\n<nui-example-wrapper\n    filenamePrefix="widget-creation.component"\n    exampleTitle="Widget Creation"\n>\n    <widget-creation></widget-creation>\n</nui-example-wrapper>\n'},35204:(o,e,n)=>{"use strict";n.r(e),n.d(e,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport { Component } from "@angular/core";\n\n@Component({\n    selector: "nui-dashboard-widget-creation-docs",\n    templateUrl: "./widget-creation-docs.component.html",\n})\nexport class WidgetCreationDocsComponent {}\n'},26516:(o,e,n)=>{"use strict";n.r(e),n.d(e,{default:()=>t});const t='<div class="my-3 d-flex align-items-center">\n    <nui-switch class="ml-3" [(value)]="editMode" i18n>Edit Mode</nui-switch>\n    <button\n        type="button"\n        nui-button\n        class="ml-4"\n        (click)="onCreateWidget()"\n        i18n\n    >\n        Create Widget\n    </button>\n</div>\n\n\x3c!--\n    The nuiWidgetEditor directive uses a standard input binding for its persistence handler assignment.\n--\x3e\n<div class="w-100 dashboard">\n    <nui-dashboard\n        [(dashboard)]="dashboard"\n        [(gridsterConfig)]="gridsterConfig"\n        [editMode]="editMode"\n        [nuiWidgetEditor]="persistenceHandler"\n    >\n    </nui-dashboard>\n</div>\n'},18868:(o,e,n)=>{"use strict";n.r(e),n.d(e,{default:()=>t});const t="@item-height: 60px;\n\n.dashboard {\n    height: 800px;\n}\n\n.nui-widget-cloner {\n    &__item {\n        height: @item-height;\n    }\n}\n"},29844:(o,e,n)=>{"use strict";n.r(e),n.d(e,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport { HttpClient, HttpErrorResponse } from "@angular/common/http";\nimport {\n    Component,\n    EventEmitter,\n    Injectable,\n    OnDestroy,\n    OnInit,\n    Output,\n    ViewChild,\n} from "@angular/core";\nimport { GridsterConfig, GridsterItem } from "angular-gridster2";\nimport { BehaviorSubject, Observable, Subject } from "rxjs";\nimport { finalize, take, takeUntil } from "rxjs/operators";\n\nimport {\n    DataSourceService,\n    IFilteringOutputs,\n    ToastService,\n    uuid,\n} from "@nova-ui/bits";\nimport {\n    DashboardComponent,\n    DATA_SOURCE,\n    DEFAULT_PIZZAGNA_ROOT,\n    IDashboard,\n    IDashboardPersistenceHandler,\n    IDataSourceOutput,\n    IKpiData,\n    IProviderConfiguration,\n    IRefresherProperties,\n    IWidget,\n    IWidgets,\n    IWidgetSelector,\n    IWidgetTemplateSelector,\n    KpiComponent,\n    NOVA_KPI_DATASOURCE_ADAPTER,\n    PizzagnaLayer,\n    ProviderRegistryService,\n    WellKnownPathKey,\n    WellKnownProviders,\n    WidgetClonerService,\n    WidgetTypesService,\n} from "@nova-ui/dashboards";\n\n// Interface of a widget item\ninterface IWidgetItem {\n    name: string;\n    widget: IWidget;\n}\n\n// This component acts as the first step, or page, in the wizard where the user selects a wizard type to create.\n// It\'s recommended to have this component in a different file. For this tutorial, it\'s included in the same\n// file for simplicity.\n@Component({\n    selector: "widget-template-selection",\n    styleUrls: ["./widget-creation.component.less"],\n    template: `\n        <div class="nui-widget-cloner">\n            <nui-repeat\n                [itemsSource]="widgetItems"\n                [selection]="widgetSelection"\n                selectionMode="singleWithRequiredSelection"\n                (selectionChange)="onSelect($event)"\n                [repeatItemTemplateRef]="widgetClonerItem"\n            >\n            </nui-repeat>\n        </div>\n\n        <ng-template #widgetClonerItem let-item="item">\n            <div\n                class="nui-widget-cloner__item d-flex pt-2 pb-2 align-items-center"\n            >\n                <div class="text-info ml-3">{{ item.name }}</div>\n            </div>\n        </ng-template>\n    `,\n})\nexport class WidgetTemplateSelectionComponent\n    implements IWidgetTemplateSelector, OnInit\n{\n    // This output will notify the wizard that a widget has been selected.\n    @Output() public widgetSelected = new EventEmitter<IWidget>();\n\n    public widgetItems: IWidgetItem[] = [];\n    public widgetSelection: IWidgetItem[];\n\n    constructor(private widgetTypesService: WidgetTypesService) {}\n\n    public ngOnInit(): void {\n        // Here we combine the widget structure from the WidgetTypesService with the corresponding widget\n        // configuration to create an array of widget objects for the itemSource on the repeat component.\n        this.widgetItems = [\n            {\n                name: "Fully Configured KPI Widget",\n                widget: this.widgetTypesService.mergeWithWidgetType(\n                    fullKpiWidgetConfig\n                ),\n            },\n            {\n                name: "Unconfigured Proportional Widget",\n                // Note that \'partialPropWidgetConfig\' sets \'metadata.needsConfiguration\' to true.\n                // When this widget is selected in the wizard, the \'Create Widget\' button will be hidden\n                // to guide the user to the second step where they can complete the configuration.\n                widget: this.widgetTypesService.mergeWithWidgetType(\n                    partialPropWidgetConfig\n                ),\n            },\n        ];\n\n        // You can optionally auto-select a widget by doing the following\n        // this.onSelect([this.widgetItems[0]]);\n    }\n\n    public onSelect(selectedItems: any[]): void {\n        // We emit the selected widget to communicate the selection to the configurator\n        this.widgetSelected.emit(selectedItems[0].widget);\n        this.widgetSelection = selectedItems;\n    }\n}\n\n/**\n * A simple persistence handler that is tied to the widget editor directive\n */\n@Injectable()\n// The realizer of IDashboardPersistenceHandler may implement a trySubmit and/or a tryRemove method.\nexport class PersistenceHandler implements IDashboardPersistenceHandler {\n    // This variable is just to show how to handle error handling.\n    private persistenceSucceeded: boolean = true;\n\n    // The example uses the toast service to demonstrate the\n    // invocation of each of the persistence handler callbacks\n    constructor(private toastService: ToastService) {\n        // toastService options to let it sit on the page for 2 seconds.\n        this.toastService.setConfig({\n            timeOut: 2000,\n        });\n    }\n\n    // This method will be invoked anytime the widget editor form gets submitted.\n    public trySubmit = (widget: IWidget): Observable<IWidget> => {\n        // Since we are working asynchronously, we\'ll return a subject. So, after the submit attempt\n        // succeeds or fails, we can let the subscriber know the result.\n        const subject = new Subject<IWidget>();\n\n        if (!widget.id) {\n            // Creates an id if the widget has no id.\n            // (This step will make more sense in the context of the widget cloning tutorial\n            // in which we handle the persistence of a newly created widget.)\n            widget.id = uuid();\n        }\n\n        // For this example, we\'re using a setTimeout to mock an asynchronous persistence request to a backend\n        setTimeout(() => {\n            if (this.persistenceSucceeded) {\n                // Passes along the new widget after one second.\n                subject.next(widget);\n                // Toast on the page on success.\n                this.toastService.success({\n                    title: $localize`Submit succeeded.`,\n                });\n            } else {\n                const errorText = $localize`Submit failed.`;\n                // Toast on the page on failure.\n                this.toastService.error({ title: errorText });\n                // Makes the subject say there is an error.\n                subject.error(errorText);\n            }\n            // Completes the subject so whoever subscribes to it knows its finished.\n            subject.complete();\n        }, 1000);\n\n        // Returns the subject as an observable.\n        return subject.asObservable();\n    };\n\n    // This method will be invoked anytime there\'s a widget removal attempt.\n    public tryRemove = (widgetId: string): Observable<string> => {\n        const subject = new Subject<string>();\n\n        setTimeout(() => {\n            if (this.persistenceSucceeded) {\n                // Pass through the id of the widget that was removed.\n                subject.next(widgetId);\n                this.toastService.success({\n                    title: $localize`Removal success`,\n                });\n            } else {\n                const errorText = $localize`Removal failed.`;\n                this.toastService.error({ title: errorText });\n                subject.error(errorText);\n            }\n            subject.complete();\n        }, 1000);\n\n        return subject.asObservable();\n    };\n}\n\n/**\n * A component that instantiates the dashboard\n */\n@Component({\n    selector: "widget-creation",\n    templateUrl: "./widget-creation.component.html",\n    styleUrls: ["./widget-creation.component.less"],\n    // Here we provide our persistence handler at the component level; this can also be done in the module.\n    providers: [PersistenceHandler],\n})\nexport class WidgetCreationComponent implements OnInit {\n    // The WidgetClonerService will need this for updating the dashboard\n    @ViewChild(DashboardComponent, { static: true })\n    dashboardComponent: DashboardComponent;\n    // This variable will hold all the data needed to define the layout and behavior of the widgets.\n    // Pass this to the dashboard component\'s dashboard input in the template.\n    public dashboard: IDashboard;\n\n    // Angular gridster requires a configuration object even if it\'s empty.\n    // Pass this to the dashboard component\'s gridsterConfig input in the template.\n    public gridsterConfig: GridsterConfig = {\n        // These values will be used to set the initial widget dimensions on creation.\n        // If not set, they each default to 6.\n        defaultItemCols: 3,\n        defaultItemRows: 5,\n    };\n\n    // Boolean the dashboard takes in as an input; if it\'s set to true\n    // the dashboard allows you to resize widgets and move them around.\n    public editMode: boolean = false;\n\n    // Subject used for auto-unsubscribing from subscriptions on component destruction\n    private readonly destroy$ = new Subject<void>();\n\n    constructor(\n        // WidgetTypesService provides the widget\'s necessary structure information\n        private widgetTypesService: WidgetTypesService,\n\n        // In general, the ProviderRegistryService is used for making entities available for injection into dynamically loaded components.\n        private providerRegistry: ProviderRegistryService,\n\n        // Injecting the PersistenceHandler we created and assigning it to a property we use in the template.\n        public persistenceHandler: PersistenceHandler,\n\n        // Injecting the cloner service which is needed for opening up the cloner wizard.\n        private widgetClonerService: WidgetClonerService\n    ) {}\n\n    public ngOnInit(): void {\n        // Grabbing the widget\'s default template which will be needed as a parameter for setNode\n        const kpiTemplate = this.widgetTypesService.getWidgetType("kpi", 1);\n        const proportionalTemplate = this.widgetTypesService.getWidgetType(\n            "proportional",\n            1\n        );\n\n        // Registering our data sources as dropdown options in the widget editor/configurator\n        // Note: This could also be done in the parent module\'s constructor so that\n        // multiple dashboards could have access to the same widget template modification.\n        this.widgetTypesService.setNode(\n            // This is the template we grabbed above with getWidgetType\n            proportionalTemplate,\n            // Setting the editor/configurator part of the widget template\n            "configurator",\n            // This indicates which node you are changing and we want to change\n            // the data source providers available for selection in the editor.\n            WellKnownPathKey.DataSourceProviders,\n            // Setting the data sources available for selection in the editor\n            [RandomCitiesProportionalDataSource.providerId]\n        );\n\n        // Same as above, but for the KPI data sources\n        this.widgetTypesService.setNode(\n            kpiTemplate,\n            "configurator",\n            WellKnownPathKey.DataSourceProviders,\n            [\n                AverageRatingKpiDataSource.providerId,\n                RatingsCountKpiDataSource.providerId,\n            ]\n        );\n\n        // Registering the data sources available for injection into the KPI tiles and proportional widget.\n        // Note: Each tile of a KPI widget is assigned its own instance of a data source.\n        this.providerRegistry.setProviders({\n            [AverageRatingKpiDataSource.providerId]: {\n                provide: DATA_SOURCE,\n                useClass: AverageRatingKpiDataSource,\n                // Any dependencies that need to be injected into the provider must be listed here\n                deps: [HttpClient],\n            },\n            [RatingsCountKpiDataSource.providerId]: {\n                provide: DATA_SOURCE,\n                useClass: RatingsCountKpiDataSource,\n                deps: [HttpClient],\n            },\n            [RandomCitiesProportionalDataSource.providerId]: {\n                provide: DATA_SOURCE,\n                useClass: RandomCitiesProportionalDataSource,\n                deps: [],\n            },\n        });\n\n        this.initializeDashboard();\n    }\n\n    public onCreateWidget(): void {\n        const widgetSelector: IWidgetSelector = {\n            // Template ref of the dashboard component.\n            dashboardComponent: this.dashboardComponent,\n            // A trySubmit function; in this case, we use the trySubmit from the PersistenceHandler created in the previous tutorial.\n            trySubmit: this.persistenceHandler.trySubmit,\n            // WidgetTemplateSelectionComponent will act as step one of the wizard to allow the user to select which widget will be cloned.\n            widgetSelectionComponentType: WidgetTemplateSelectionComponent,\n        };\n        this.widgetClonerService\n            .open(widgetSelector)\n            .pipe(\n                // Auto-unsubscribe after one emission or on component destruction\n                take(1),\n                takeUntil(this.destroy$)\n            )\n            .subscribe();\n    }\n\n    public initializeDashboard(): void {\n        // We\'re using a static configuration object for this example (see widgetConfig at the bottom of the file),\n        // but this is where the widget\'s configuration could potentially be populated from a database\n        const kpiWidget = fullKpiWidgetConfig;\n        const widgetIndex: IWidgets = {\n            // Complete the KPI widget with information coming from its type definition\n            [kpiWidget.id]:\n                this.widgetTypesService.mergeWithWidgetType(kpiWidget),\n        };\n\n        // Setting the widget dimensions and position (this is for gridster)\n        // Note: If no position is given for a widget the \'defaultItemCols\' and \'defaultItemRows\' properties\n        // from the gridsterConfig will be used for the dimensions\n        const positions: Record<string, GridsterItem> = {\n            [kpiWidget.id]: {\n                cols: 3,\n                rows: 5,\n                y: 0,\n                x: 0,\n            },\n        };\n\n        // Finally, assigning the variables we created above to the dashboard\n        this.dashboard = {\n            positions,\n            widgets: widgetIndex,\n        };\n    }\n}\n\n// Interface for each data point in a proportional widget.\ninterface IProportionalWidgetData {\n    id: string;\n    name: string;\n    data: number[];\n    icon: string;\n    link: string;\n    value: string;\n}\n\n@Injectable()\nexport class RandomCitiesProportionalDataSource implements OnDestroy {\n    public static providerId = "RandomCitiesProportionalDataSource";\n\n    public outputsSubject = new Subject<\n        IDataSourceOutput<IProportionalWidgetData[]>\n    >();\n\n    // Every time applyFilters gets ran we are changing the data source.\n    public applyFilters(): void {\n        setTimeout(() => {\n            this.outputsSubject.next({\n                result: this.getRandomProportionalWidgetData(),\n            });\n        }, 1000);\n    }\n\n    public ngOnDestroy(): void {\n        this.outputsSubject.complete();\n    }\n\n    private getRandomProportionalWidgetData(): IProportionalWidgetData[] {\n        return [\n            {\n                id: "Down",\n                name: "Down",\n                data: [Math.round(Math.random() * 100)],\n                icon: "status_down",\n                link: "https://en.wikipedia.org/wiki/Brno",\n                value: "Brno",\n            },\n            {\n                id: "Critical",\n                name: "Critical",\n                data: [Math.round(Math.random() * 100)],\n                icon: "status_critical",\n                link: "https://en.wikipedia.org/wiki/Kyiv",\n                value: "Kyiv",\n            },\n            {\n                id: "Warning",\n                name: "Warning",\n                data: [Math.round(Math.random() * 100)],\n                icon: "status_warning",\n                link: "https://en.wikipedia.org/wiki/Austin",\n                value: "Austin",\n            },\n            {\n                id: "Unknown",\n                name: "Unknown",\n                data: [Math.round(Math.random() * 100)],\n                icon: "status_unknown",\n                link: "https://en.wikipedia.org/wiki/Lisbon",\n                value: "Lisbon",\n            },\n            {\n                id: "Up",\n                name: "Up",\n                data: [Math.round(Math.random() * 100)],\n                icon: "status_up",\n                link: "https://en.wikipedia.org/wiki/Sydney",\n                value: "Sydney",\n            },\n            {\n                id: "Unmanaged",\n                name: "Unmanaged",\n                data: [Math.round(Math.random() * 100)],\n                icon: "status_unmanaged",\n                link: "https://en.wikipedia.org/wiki/Nur-Sultan",\n                value: "Nur-Sultan",\n            },\n        ];\n    }\n}\n\n/**\n * A simple KPI data source to retrieve the average rating of Harry Potter and the Sorcerer\'s Stone (book) via googleapis\n */\n@Injectable()\nexport class AverageRatingKpiDataSource\n    extends DataSourceService<IKpiData>\n    implements OnDestroy\n{\n    // This is the ID we\'ll use to identify the provider\n    public static providerId = "AverageRatingKpiDataSource";\n\n    // Use this subject to communicate the data source\'s busy state\n    public busy = new BehaviorSubject<boolean>(false);\n\n    constructor(private http: HttpClient) {\n        super();\n    }\n\n    // In this example, getFilteredData is invoked every 10 minutes (Take a look at the refresher\n    // provider definition in the widget configuration below to see how the interval is set)\n    public async getFilteredData(): Promise<IFilteringOutputs> {\n        this.busy.next(true);\n        return new Promise((resolve) => {\n            // *** Make a resource request to an external API (if needed)\n            this.http\n                .get("https://www.googleapis.com/books/v1/volumes/5MQFrgEACAAJ")\n                .pipe(finalize(() => this.busy.next(false)))\n                .subscribe({\n                    next: (data: any) => {\n                        resolve({\n                            result: {\n                                value: data.volumeInfo.averageRating,\n                            },\n                        });\n                    },\n                    error: (error: HttpErrorResponse) => {\n                        resolve({\n                            result: null,\n                            error: {\n                                type: error.status,\n                            },\n                        });\n                    },\n                });\n        });\n    }\n\n    public ngOnDestroy(): void {\n        this.outputsSubject.complete();\n    }\n}\n\n/**\n * A simple KPI data source to retrieve the ratings count of Harry Potter and the Sorcerer\'s Stone (book) via googleapis\n */\n@Injectable()\nexport class RatingsCountKpiDataSource\n    extends DataSourceService<IKpiData>\n    implements OnDestroy\n{\n    public static providerId = "RatingsCountKpiDataSource";\n\n    // Use this subject to communicate the data source\'s busy state\n    public busy = new BehaviorSubject<boolean>(false);\n\n    constructor(private http: HttpClient) {\n        super();\n    }\n\n    public async getFilteredData(): Promise<IFilteringOutputs> {\n        this.busy.next(true);\n        return new Promise((resolve) => {\n            this.http\n                .get("https://www.googleapis.com/books/v1/volumes/5MQFrgEACAAJ")\n                .pipe(finalize(() => this.busy.next(false)))\n                .subscribe({\n                    next: (data: any) => {\n                        resolve({\n                            result: {\n                                value: data.volumeInfo.ratingsCount,\n                            },\n                        });\n                    },\n                    error: (error: HttpErrorResponse) => {\n                        resolve({\n                            result: null,\n                            error: {\n                                type: error.status,\n                            },\n                        });\n                    },\n                });\n        });\n    }\n\n    public ngOnDestroy(): void {\n        this.outputsSubject.complete();\n    }\n}\n\nconst fullKpiWidgetConfig: IWidget = {\n    id: "widget1",\n    type: "kpi",\n    pizzagna: {\n        [PizzagnaLayer.Configuration]: {\n            [DEFAULT_PIZZAGNA_ROOT]: {\n                providers: {\n                    [WellKnownProviders.Refresher]: {\n                        properties: {\n                            // Configuring the refresher interval so that our data source is invoked every ten minutes\n                            interval: 60 * 10,\n                            enabled: true,\n                        } as IRefresherProperties,\n                    } as Partial<IProviderConfiguration>,\n                },\n            },\n            header: {\n                properties: {\n                    title: "Harry Potter and the Sorcerer\'s Stone",\n                    subtitle: "By J. K. Rowling",\n                },\n            },\n            tiles: {\n                properties: {\n                    nodes: ["kpi1"],\n                },\n            },\n            kpi1: {\n                id: "kpi1",\n                componentType: KpiComponent.lateLoadKey,\n                properties: {\n                    widgetData: {\n                        units: `out of 5 Stars`,\n                        label: `Average Rating`,\n                    },\n                },\n                providers: {\n                    [WellKnownProviders.DataSource]: {\n                        // Setting the data source providerId for the tile with id "kpi1"\n                        providerId: AverageRatingKpiDataSource.providerId,\n                    } as IProviderConfiguration,\n                    [WellKnownProviders.Adapter]: {\n                        providerId: NOVA_KPI_DATASOURCE_ADAPTER,\n                        properties: {\n                            componentId: "kpi1",\n                            propertyPath: "widgetData",\n                        },\n                    } as IProviderConfiguration,\n                },\n            },\n        },\n    },\n};\n\nconst partialPropWidgetConfig: IWidget = {\n    id: "widget2",\n    type: "proportional",\n    metadata: {\n        // Set \'needsConfiguration\' to true if the widget needs further configuration before it can be\n        // placed on the dashboard. The "Create Widget" button will be hidden in the wizard when this\n        // widget is selected.\n        needsConfiguration: true,\n    },\n    pizzagna: {\n        [PizzagnaLayer.Configuration]: {\n            header: {\n                properties: {\n                    title: "*New Proportional Widget*",\n                },\n            },\n        },\n    },\n};\n'},5043:(o,e,n)=>{"use strict";n.r(e),n.d(e,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport { CommonModule } from "@angular/common";\nimport { HttpClientModule } from "@angular/common/http";\nimport { NgModule } from "@angular/core";\nimport { RouterModule } from "@angular/router";\n\nimport {\n    NuiButtonModule,\n    NuiDocsModule,\n    NuiImageModule,\n    NuiMessageModule,\n    NuiRepeatModule,\n    NuiSwitchModule,\n    NuiToastModule,\n    DEMO_PATH_TOKEN,\n} from "@nova-ui/bits";\nimport { NuiDashboardsModule } from "@nova-ui/dashboards";\n\nimport { getDemoFiles } from "../../../../demo-files-factory";\nimport { WidgetCreationDocsComponent } from "./widget-creation-docs.component";\nimport {\n    WidgetCreationComponent,\n    WidgetTemplateSelectionComponent,\n} from "./widget-creation.component";\n\nconst routes = [\n    {\n        path: "",\n        component: WidgetCreationDocsComponent,\n        data: {\n            srlc: {\n                hideIndicator: true,\n            },\n            showThemeSwitcher: true,\n        },\n    },\n    {\n        path: "example",\n        component: WidgetCreationComponent,\n        data: {\n            srlc: {\n                hideIndicator: true,\n            },\n        },\n    },\n];\n\n@NgModule({\n    imports: [\n        CommonModule,\n        HttpClientModule,\n        NuiDashboardsModule,\n        NuiDocsModule,\n        NuiMessageModule,\n        NuiSwitchModule,\n        NuiToastModule,\n        NuiButtonModule,\n        NuiRepeatModule,\n        NuiImageModule,\n        RouterModule.forChild(routes),\n    ],\n    declarations: [\n        WidgetCreationDocsComponent,\n        WidgetCreationComponent,\n        WidgetTemplateSelectionComponent,\n    ],\n    providers: [\n        {\n            provide: DEMO_PATH_TOKEN,\n            useValue: getDemoFiles("widget-creation"),\n        },\n    ],\n})\nexport default class WidgetCreationModule {}\n'},40592:(o,e,n)=>{"use strict";n.r(e),n.d(e,{default:()=>t});const t='<h1>Widget and Dashboard Editing</h1>\n\n<p>\n    In this tutorial we\'ll cover how to provide the ability to edit widgets\n    using the framework-provided widget editor. For now we\'ll stop short of\n    implementing any customizations to the editor, but in a\n    <a\n        href="../additional-documentation/tutorials/customization/configurator-section.html"\n        target="_parent"\n        >later step</a\n    >, we\'ll go over how to customize parts of it to accommodate specific needs\n    you may have.\n</p>\n<p>\n    We\'ll also go over how to enable/disable edit mode for the dashboard itself.\n    When a dashboard is in edit mode, widgets can be moved around, resized, or\n    removed.\n</p>\n\n<h2>Fundamental Concepts</h2>\n<ul>\n    <li>\n        <a href="../components/DashboardComponent.html" target="_blank"\n            ><code>DashboardComponent</code></a\n        >\n    </li>\n    <li>\n        <a href="../classes/WidgetTypesService.html" target="_blank"\n            ><code>WidgetTypesService</code></a\n        >\n    </li>\n    <li>\n        <a href="../directives/WidgetEditorDirective.html" target="_blank"\n            ><code>nuiWidgetEditor</code></a\n        >directive\n    </li>\n    <li>Widget configuration (including its associated data)</li>\n    <li>Custom data source</li>\n    <li>Dashboard edit mode</li>\n</ul>\n\n<h2>Basic Steps</h2>\n<ol>\n    <li>\n        Follow the instructions\n        <a\n            href="../additional-documentation/getting-started.html"\n            target="_parent"\n            >here</a\n        >\n        to set up your environment for dashboard development.\n    </li>\n    <li>\n        Follow the instructions from previous tutorials to get a basic dashboard\n        up and running.\n    </li>\n    <li>\n        Ensure that the <code>NuiSwitchModule</code> and\n        <code>NuiButtonModule</code> are included in the imports of the parent\n        module.\n        <nui-message type="info" [allowDismiss]="false">\n            <strong>Note:</strong> Importing these modules is required because\n            the example uses Nova\'s switch and button components.\n        </nui-message>\n    </li>\n    <li>\n        In the\n        <a\n            href="../additional-documentation/tutorials/adding-a-data-source.html"\n            target="_parent"\n        >\n            Adding a Data Source\n        </a>\n        tutorial, we created a single data source. But, for this step, let\'s\n        create a second data source so that the dropdown options for selecting a\n        data source will be populated with more than one option in the editor.\n        As in the previous tutorial it\'s recommended to have each data source\n        class in a different file.\n        <nui-message type="info" [allowDismiss]="false">\n            <strong>Note:</strong> Don\'t forget to add\n            <code>@Injectable()</code> to the top of the data source class. This\n            lets Angular know that you plan on injecting dependencies into it.\n        </nui-message>\n    </li>\n    <li>\n        As before, register the data sources as a dynamically injectable\n        providers using the\n        <a href="../injectables/ProviderRegistryService.html" target="_blank"\n            ><code>ProviderRegistryService</code></a\n        >.\n        <nui-message type="warning" [allowDismiss]="false">\n            <strong>Note:</strong> When registering a class provider using the\n            ProviderRegistryService, be sure to include in the\n            <code>deps</code> array any dependencies that need to be injected\n            into the provider. This is demonstrated in the example below.\n        </nui-message>\n        <nui-message type="info" [allowDismiss]="false">\n            <strong>Note:</strong> In the example, <code>HttpClient</code> is\n            injected into the data source class. This means you\'ll need to\n            <a href="https://angular.io/guide/http#setup" target="_blank"\n                >include the <code>HttpClientModule</code></a\n            >\n            in the imports of the parent NgModule in order to successfully\n            resolve that dependency.\n        </nui-message>\n    </li>\n    <li>\n        Use the\n        <a target="_blank" href="../classes/WidgetTypesService.html#setNode"\n            ><code>widgetTypesService.setNode()</code></a\n        >\n        method to register the data sources for the editor to allow users to\n        choose which data source will be used by which KPI tile. In the Adding a\n        Data Source tutorial, we didn\'t need to do this because we weren\'t using\n        the editor.\n        <nui-message type="info" [allowDismiss]="false">\n            <strong>Note:</strong> In the following example, we do this step in\n            the component\'s ngOnInit, but widget template modifications such as\n            this could also be done in the parent module\'s constructor thereby\n            allowing multiple dashboard instances to have access to the same\n            widget template change.\n        </nui-message>\n    </li>\n    <li>\n        In your template, add the\n        <a href="../directives/WidgetEditorDirective.html" target="_blank">\n            <code>nuiWidgetEditor</code>\n        </a>\n        directive which will allow the widgets to open the widget editor.\n    </li>\n    <li>\n        In your template, set the\n        <a href="../components/DashboardComponent.html#editMode" target="_blank"\n            ><code>editMode</code></a\n        >\n        input on the dashboard component. This input enables/disables the user\'s\n        ability to remove, move, and resize widgets.\n    </li>\n    <li>\n        You should now be able to click the ellipsis button at the top right of\n        the widget to open the widget editor.\n    </li>\n    <li>\n        Once the editor is open, expand the Data Source accordion for a KPI tile\n        to change the data source used by the tile.\n    </li>\n    <li>\n        Click Save Changes and the widget\'s KPI tile will be updated to use the\n        newly selected data source.\n    </li>\n</ol>\n\n<nui-message type="info" [allowDismiss]="false">\n    For more detailed information about setting up the widget editor, take a\n    look at the inline comments under the source expander of the following\n    example.\n</nui-message>\n<nui-example-wrapper\n    filenamePrefix="widget-editor-setup.component"\n    exampleTitle="Adding a widget editor"\n>\n    <widget-editor-setup></widget-editor-setup>\n</nui-example-wrapper>\n'},65776:(o,e,n)=>{"use strict";n.r(e),n.d(e,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport { Component } from "@angular/core";\n\n@Component({\n    selector: "nui-dashboard-widget-editor-docs",\n    templateUrl: "./widget-editor-setup-docs.component.html",\n})\nexport class WidgetEditorDocsComponent {}\n'},63552:(o,e,n)=>{"use strict";n.r(e),n.d(e,{default:()=>t});const t='<div class="my-3 d-flex align-items-center">\n    <nui-switch class="ml-3" [(value)]="editMode" i18n> Edit Mode </nui-switch>\n    <button\n        *ngIf="!dashboard?.widgets[\'widget1\']"\n        type="button"\n        displayStyle="action"\n        (click)="reInitializeDashboard()"\n        nui-button\n    >\n        Restore Widget\n    </button>\n</div>\n\n<div class="w-100 dashboard">\n    \x3c!--\n        Note: The dashboard and gridsterConfig input assignments must use banana-in-a-box notation to keep\n        the dashboard state updated with changes to the pizzagna.\n    --\x3e\n    <nui-dashboard\n        *ngIf="dashboard"\n        [(dashboard)]="dashboard"\n        [(gridsterConfig)]="gridsterConfig"\n        [editMode]="editMode"\n        nuiWidgetEditor\n    >\n    </nui-dashboard>\n</div>\n'},98776:(o,e,n)=>{"use strict";n.r(e),n.d(e,{default:()=>t});const t=".dashboard {\n    height: 800px;\n}\n"},66720:(o,e,n)=>{"use strict";n.r(e),n.d(e,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport { HttpClient, HttpErrorResponse } from "@angular/common/http";\nimport {\n    ChangeDetectorRef,\n    Component,\n    Injectable,\n    OnDestroy,\n    OnInit,\n} from "@angular/core";\nimport { GridsterConfig, GridsterItem } from "angular-gridster2";\nimport { BehaviorSubject } from "rxjs";\nimport { finalize } from "rxjs/operators";\n\nimport { DataSourceService, IFilteringOutputs } from "@nova-ui/bits";\nimport {\n    DATA_SOURCE,\n    DEFAULT_PIZZAGNA_ROOT,\n    IDashboard,\n    IKpiData,\n    IProviderConfiguration,\n    IRefresherProperties,\n    IWidget,\n    IWidgets,\n    KpiComponent,\n    NOVA_KPI_DATASOURCE_ADAPTER,\n    PizzagnaLayer,\n    ProviderRegistryService,\n    WellKnownPathKey,\n    WellKnownProviders,\n    WidgetTypesService,\n} from "@nova-ui/dashboards";\n\n/**\n * A simple KPI data source to retrieve the average rating of Harry Potter and the Sorcerer\'s Stone (book) via googleapis\n */\n@Injectable()\nexport class AverageRatingKpiDataSource\n    extends DataSourceService<IKpiData>\n    implements OnDestroy\n{\n    // This is the ID we\'ll use to identify the provider\n    public static providerId = "AverageRatingKpiDataSource";\n\n    // Use this subject to communicate the data source\'s busy state\n    public busy = new BehaviorSubject<boolean>(false);\n\n    constructor(private http: HttpClient) {\n        super();\n    }\n\n    // In this example, getFilteredData is invoked every 10 minutes (Take a look at the refresher\n    // provider definition in the widget configuration below to see how the interval is set)\n    public async getFilteredData(): Promise<IFilteringOutputs> {\n        this.busy.next(true);\n        return new Promise((resolve) => {\n            // *** Make a resource request to an external API (if needed)\n            this.http\n                .get("https://www.googleapis.com/books/v1/volumes/5MQFrgEACAAJ")\n                .pipe(finalize(() => this.busy.next(false)))\n                .subscribe({\n                    next: (data: any) => {\n                        resolve({\n                            result: {\n                                value: data.volumeInfo.averageRating,\n                            },\n                        });\n                    },\n                    error: (error: HttpErrorResponse) => {\n                        resolve({\n                            result: null,\n                            error: {\n                                type: error.status,\n                            },\n                        });\n                    },\n                });\n        });\n    }\n\n    public ngOnDestroy(): void {\n        this.outputsSubject.complete();\n    }\n}\n\n/**\n * A simple KPI data source to retrieve the ratings count of Harry Potter and the Sorcerer\'s Stone (book) via googleapis\n */\n@Injectable()\nexport class RatingsCountKpiDataSource\n    extends DataSourceService<IKpiData>\n    implements OnDestroy\n{\n    public static providerId = "RatingsCountKpiDataSource";\n\n    // Use this subject to communicate the data source\'s busy state\n    public busy = new BehaviorSubject<boolean>(false);\n\n    constructor(private http: HttpClient) {\n        super();\n    }\n\n    public async getFilteredData(): Promise<IFilteringOutputs> {\n        this.busy.next(true);\n        return new Promise((resolve) => {\n            this.http\n                .get("https://www.googleapis.com/books/v1/volumes/5MQFrgEACAAJ")\n                .pipe(finalize(() => this.busy.next(false)))\n                .subscribe({\n                    next: (data: any) => {\n                        resolve({\n                            result: {\n                                value: data.volumeInfo.ratingsCount,\n                            },\n                        });\n                    },\n                    error: (error: HttpErrorResponse) => {\n                        resolve({\n                            result: null,\n                            error: {\n                                type: error.status,\n                            },\n                        });\n                    },\n                });\n        });\n    }\n\n    public ngOnDestroy(): void {\n        this.outputsSubject.complete();\n    }\n}\n\n/**\n * A component that instantiates the dashboard\n */\n@Component({\n    selector: "widget-editor-setup",\n    templateUrl: "./widget-editor-setup.component.html",\n    styleUrls: ["./widget-editor-setup.component.less"],\n})\nexport class WidgetEditorSetupComponent implements OnInit {\n    // This variable will hold all the data needed to define the layout and behavior of the widgets.\n    // Pass this to the dashboard component\'s dashboard input in the template.\n    public dashboard: IDashboard | undefined;\n\n    // Angular gridster requires a configuration object even if it\'s empty.\n    // Pass this to the dashboard component\'s gridsterConfig input in the template.\n    public gridsterConfig: GridsterConfig = {};\n\n    // Boolean which dashboard takes in as an input if its true it allows you to move widgets around.\n    public editMode: boolean = false;\n\n    constructor(\n        // WidgetTypesService provides the widget\'s necessary structure information\n        private widgetTypesService: WidgetTypesService,\n\n        // In general, the ProviderRegistryService is used for making entities available for injection into dynamically loaded components.\n        private providerRegistry: ProviderRegistryService,\n        private changeDetectorRef: ChangeDetectorRef\n    ) {}\n\n    public ngOnInit(): void {\n        // Grabbing the widget\'s default template which will be needed as a parameter for setNode\n        const widgetTemplate = this.widgetTypesService.getWidgetType("kpi", 1);\n        // Registering our data sources as dropdown options in the widget editor/configurator\n        // Note: This could also be done in the parent module\'s constructor so that\n        // multiple dashboards could have access to the same widget template modification.\n        this.widgetTypesService.setNode(\n            // This is the template we grabbed above with getWidgetType\n            widgetTemplate,\n            // We are setting the editor/configurator part of the widget template\n            "configurator",\n            // This indicates which node you are changing and we want to change\n            // the data source providers available for selection in the editor.\n            WellKnownPathKey.DataSourceProviders,\n            // We are setting the data sources available for selection in the editor\n            [\n                AverageRatingKpiDataSource.providerId,\n                RatingsCountKpiDataSource.providerId,\n            ]\n        );\n\n        // Registering the data sources available for injection into the KPI tiles.\n        // Note: Each tile of a KPI widget is assigned its own instance of a data source\n        this.providerRegistry.setProviders({\n            [AverageRatingKpiDataSource.providerId]: {\n                provide: DATA_SOURCE,\n                useClass: AverageRatingKpiDataSource,\n                // Any dependencies that need to be injected into the provider must be listed here\n                deps: [HttpClient],\n            },\n            [RatingsCountKpiDataSource.providerId]: {\n                provide: DATA_SOURCE,\n                useClass: RatingsCountKpiDataSource,\n                deps: [HttpClient],\n            },\n        });\n\n        this.initializeDashboard();\n    }\n\n    /** Used for restoring widgets state */\n    public reInitializeDashboard(): void {\n        // destroys the components and their providers so the dashboard can re init data\n        this.dashboard = undefined;\n        this.changeDetectorRef.detectChanges();\n\n        this.initializeDashboard();\n    }\n\n    public initializeDashboard(): void {\n        // We\'re using a static configuration object for this example (see widgetConfig at the bottom of the file),\n        // but this is where the widget\'s configuration could potentially be populated from a database\n        const kpiWidget = widgetConfig;\n        const widgetIndex: IWidgets = {\n            // Complete the KPI widget with information coming from its type definition\n            [kpiWidget.id]:\n                this.widgetTypesService.mergeWithWidgetType(kpiWidget),\n        };\n\n        // Setting the widget dimensions and position (this is for gridster)\n        const positions: Record<string, GridsterItem> = {\n            [kpiWidget.id]: {\n                cols: 4,\n                rows: 6,\n                y: 0,\n                x: 0,\n            },\n        };\n\n        // Finally, assigning the variables we created above to the dashboard\n        this.dashboard = {\n            positions,\n            widgets: widgetIndex,\n        };\n    }\n}\n\nconst widgetConfig: IWidget = {\n    id: "widget1",\n    type: "kpi",\n    pizzagna: {\n        [PizzagnaLayer.Configuration]: {\n            [DEFAULT_PIZZAGNA_ROOT]: {\n                providers: {\n                    [WellKnownProviders.Refresher]: {\n                        properties: {\n                            // Configuring the refresher interval so that our data source is invoked every ten minutes\n                            interval: 60 * 10,\n                            enabled: true,\n                        } as IRefresherProperties,\n                    } as Partial<IProviderConfiguration>,\n                },\n            },\n            header: {\n                properties: {\n                    title: "Harry Potter and the Sorcerer\'s Stone",\n                    subtitle: "By J. K. Rowling",\n                },\n            },\n            tiles: {\n                properties: {\n                    nodes: ["kpi1"],\n                },\n            },\n            kpi1: {\n                id: "kpi1",\n                componentType: KpiComponent.lateLoadKey,\n                properties: {\n                    widgetData: {\n                        units: "out of 5 Stars",\n                        label: "Average Rating",\n                    },\n                },\n                providers: {\n                    [WellKnownProviders.DataSource]: {\n                        // Setting the data source providerId for the tile with id "kpi1"\n                        providerId: AverageRatingKpiDataSource.providerId,\n                    } as IProviderConfiguration,\n                    [WellKnownProviders.Adapter]: {\n                        providerId: NOVA_KPI_DATASOURCE_ADAPTER,\n                        properties: {\n                            componentId: "kpi1",\n                            propertyPath: "widgetData",\n                        },\n                    } as IProviderConfiguration,\n                },\n            },\n        },\n    },\n};\n'},85519:(o,e,n)=>{"use strict";n.r(e),n.d(e,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport { CommonModule } from "@angular/common";\nimport { HttpClientModule } from "@angular/common/http";\nimport { NgModule } from "@angular/core";\nimport { RouterModule } from "@angular/router";\n\nimport {\n    NuiButtonModule,\n    NuiDocsModule,\n    NuiMessageModule,\n    NuiSwitchModule,\n    DEMO_PATH_TOKEN,\n} from "@nova-ui/bits";\nimport { NuiDashboardsModule } from "@nova-ui/dashboards";\n\nimport { getDemoFiles } from "../../../../demo-files-factory";\nimport { WidgetEditorDocsComponent } from "./widget-editor-setup-docs.component";\nimport { WidgetEditorSetupComponent } from "./widget-editor-setup.component";\n\nconst routes = [\n    {\n        path: "",\n        component: WidgetEditorDocsComponent,\n        data: {\n            srlc: {\n                hideIndicator: true,\n            },\n            showThemeSwitcher: true,\n        },\n    },\n    {\n        path: "example",\n        component: WidgetEditorSetupComponent,\n        data: {\n            srlc: {\n                hideIndicator: true,\n            },\n        },\n    },\n];\n\n@NgModule({\n    imports: [\n        CommonModule,\n        HttpClientModule,\n        NuiDashboardsModule,\n        NuiDocsModule,\n        NuiMessageModule,\n        NuiSwitchModule,\n        NuiButtonModule,\n        RouterModule.forChild(routes),\n    ],\n    declarations: [WidgetEditorDocsComponent, WidgetEditorSetupComponent],\n    providers: [\n        {\n            provide: DEMO_PATH_TOKEN,\n            useValue: getDemoFiles("widget-editor-setup"),\n        },\n    ],\n})\nexport default class WidgetEditorSetupModule {}\n'},54508:(o,e,n)=>{"use strict";n.r(e),n.d(e,{default:()=>t});const t='<h1>Widget Error Handling</h1>\n<p>\n    In this tutorial we\'ll show you how to handle errors in Nova dashboard. You\n    will know-how provide an empty state view for the widget so users will be\n    informed when there\'s no data or an error has occurred. We have default\n    error state handling for all types of widgets.\n</p>\n\n<p>\n    We have three params in the method <code>widgetBodyContentNodes</code>,\n    which responsible for widget error handling:\n</p>\n<ul>\n    <li>\n        <code>fallbackAdapterId</code> The id for the adapter responsible for\n        activating fallback content in case of an error (default value:\n        NOVA_STATUS_CONTENT_FALLBACK_ADAPTER)\n    </li>\n    <li>\n        <code>fallbackMap</code> A map of node keys to fallback content\n        definitions (default value: ERROR_FALLBACK_MAP)\n    </li>\n    <li>\n        <code>fallbackNodes</code> An index of fallback content definitions\n        (default value: ERROR_NODES)\n    </li>\n</ul>\n\n<p>\n    You can see below the code examples of each part, which are used as a\n    default for widget error handling\n</p>\n<strong>The example of adapter</strong>\n<nui-example-code language="typescript">\n    {{ fallbackAdapter }}\n</nui-example-code>\n\n<p>\n    <strong>A map of error codes to widget error node keys</strong>\n    <nui-message type="info" [allowDismiss]="false">\n        An error code doesn\'t have to be an HTTP status code. It may be any\n        string that matches an expected data source error type. Additionally,\n        the node keys may be any string as long as they correspond to an error\n        configuration node defined in the widget structure.\n    </nui-message>\n    <nui-example-code language="typescript">\n        {{ errorsMap }}\n    </nui-example-code>\n</p>\n\n<strong>An index of common error configurations</strong>\n<p>Each error configuration has:</p>\n<ul>\n    <li><code>id</code> of error node key</li>\n    <li><code>componentType</code> of widget error component</li>\n    <li>\n        <code>properties (image, title and description)</code> for displaying\n        error details\n    </li>\n</ul>\n<nui-example-code language="typescript">\n    {{ errorNodes }}\n</nui-example-code>\n\n<h2>Basic Steps</h2>\n<ol>\n    <li>\n        Follow the instructions\n        <a\n            href="../additional-documentation/getting-started.html"\n            target="_parent"\n            >here</a\n        >\n        to set up your environment for dashboard development.\n    </li>\n    <li>\n        Follow the instructions\n        <a\n            href="../additional-documentation/widget-types/kpi.html"\n            target="_parent"\n            >here</a\n        >\n        to get a basic KPI dashboard up and running.\n    </li>\n</ol>\n<p>\n    In the example below, we\'ll implement a sample KPI widget with an error. If\n    the widget data source results in a known error transition we need to show\n    the corresponding error layout configuration. If the data source reports an\n    unknown error type transition we need to show an "unknown error" layout\n    configuration. Switch into other data sources to see the handling of\n    different errors in the widget. Each data source provides an error from\n    <code>ERROR_FALLBACK_MAP</code>. A widget with no errors does not display an\n    error layout. You can check it when switching to\n    <code>AverageRatingKpiDataSource</code>.\n</p>\n<p>\n    If the data source outputs an error as part of its\n    <code>outputsSubject</code> payload, the configurator will display an error\n    message including the string specified in the <code>message</code> property\n    of the payload\'s error object. If there\'s no value for the\n    <code>message</code> property, the error message will just display the value\n    of the <code>type</code> property. The component responsible for this logic\n    is the\n    <code>\n        <a href="../components/DataSourceErrorComponent.html" target="_blank"\n            >DataSourceErrorComponent</a\n        > </code\n    >. If you want to use a custom component for this, you\'ll need to to set the\n    <code>errorComponent</code> property in the configurator section of the\n    pizzagna with the <code>lateLoadKey</code> of your custom component. For\n    instructions on how to do that, be sure to take a look at the\n    <a\n        href="../additional-documentation/tutorials/customization/data-source-configurator.html"\n        target="_parent"\n        >Implementing a Custom Data Source Configurator</a\n    >\n    tutorial.\n</p>\n<nui-example-wrapper\n    filenamePrefix="widget-error-handling.component"\n    exampleTitle="Widget Error Handling"\n>\n    <widget-error-handling></widget-error-handling>\n</nui-example-wrapper>\n\n<h2>Custom Widget Error Handling</h2>\n<p>\n    At first, follow the instructions\n    <a\n        href="../additional-documentation/tutorials/customization/widget.html"\n        target="_parent"\n        >here</a\n    >\n    to implement your custom widget. Then you need to modify the widget type\n    definition by changing the retrieving the definitions for the body content\n    nodes in the method <code>widgetBodyContentNodes</code>. You can see below\n    the declaration of that method:\n    <nui-example-code language="typescript">\n        {{ widgetBodyContentNodesSignature }}\n    </nui-example-code>\n    So, you can modify any parameter:\n    <code>fallbackAdapterId, fallbackMap, fallbackNodes</code> to your own\n    widget error handling.\n</p>\n'},66876:(o,e,n)=>{"use strict";n.r(e),n.d(e,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport { Component } from "@angular/core";\n\n@Component({\n    selector: "nui-widget-error-handling-docs",\n    templateUrl: "./widget-error-handling-docs.component.html",\n})\nexport class WidgetErrorHandlingDocsComponent {\n    public fallbackAdapter = `\n@Injectable()\nexport class StatusContentFallbackAdapter implements OnDestroy, IHasComponent {\n\n    protected readonly destroy$ = new Subject<void>();\n    protected componentId: string;\n\n    constructor(@Inject(PIZZAGNA_EVENT_BUS) protected eventBus: EventBus<IEvent>,\n                protected pizzagnaService: PizzagnaService) {\n        this.eventBus.getStream(DATA_SOURCE_OUTPUT)\n            .pipe(takeUntil(this.destroy$)).subscribe((event: IEvent<any | IDataSourceOutputPayload<any>>) => {\n                this.handleDataSourceOutput(event);\n            });\n    }\n\n    public ngOnDestroy(): void {\n        this.destroy$.next();\n        this.destroy$.complete();\n    }\n\n    public setComponent(component: any, componentId: string) {\n        this.componentId = componentId;\n    }\n\n    protected handleDataSourceOutput(event: IEvent<any | IDataSourceOutputPayload<any>>) {\n        this.pizzagnaService.setProperty({\n            componentId: this.componentId,\n            propertyPath: ["fallbackKey"],\n            pizzagnaKey: PizzagnaLayer.Data,\n        }, typeof event.payload?.error?.type !== "undefined" ? event.payload?.error?.type.toString() : undefined);\n    }\n}`;\n    public errorsMap = `\nexport const ERROR_FALLBACK_MAP: Record<string, ErrorNodeKey> = {\n    [HttpStatusCode.Unknown]: ErrorNodeKey.ErrorUnknown,\n    [HttpStatusCode.Forbidden]: ErrorNodeKey.ErrorForbidden,\n    [HttpStatusCode.NotFound]: ErrorNodeKey.ErrorNotFound,\n};\n`;\n    public errorNodes = `\nexport const ERROR_NODES: Record<string, IComponentConfiguration> = {\n    [ErrorNodeKey.ErrorUnknown]: {\n        id: ErrorNodeKey.ErrorUnknown,\n        componentType: WidgetErrorComponent.lateLoadKey,\n        properties: {\n            image: "no-data-to-show",\n            title: $localize\\`Whoops, something went wrong\\`,\n            description: $localize\\`There was an unexpected error.\\`,\n        } as IWidgetErrorDisplayProperties,\n    },\n    [ErrorNodeKey.ErrorForbidden]: {\n        id: ErrorNodeKey.ErrorForbidden,\n        componentType: WidgetErrorComponent.lateLoadKey,\n        properties: {\n            image: "no-data-to-show",\n            title: $localize\\`403 - Forbidden\\`,\n            description: $localize\\`The requested action was forbidden.\\`,\n        } as IWidgetErrorDisplayProperties,\n    },\n    [ErrorNodeKey.ErrorNotFound]: {\n        id: ErrorNodeKey.ErrorNotFound,\n        componentType: WidgetErrorComponent.lateLoadKey,\n        properties: {\n            image: "no-data-to-show",\n            title: $localize\\`404 - Not Found\\`,\n            description: $localize\\`The requested resource could not be found.\\`,\n        } as IWidgetErrorDisplayProperties,\n    },\n};`;\n    public widgetBodyContentNodesSignature = `\n/**\n * Retrieves an index of the basic widget body content nodes including fallback nodes\n *\n * @param mainContentNodeKey The key corresponding to the main body content node\n * @param fallbackAdapterId The id for the adapter responsible for activating fallback content in case of an error\n * @param fallbackMap A map of node keys to fallback content definitions\n * @param fallbackNodes An index of fallback content definitions\n *\n * @returns An index of component configurations\n */\nexport function widgetBodyContentNodes(\n    mainContentNodeKey: string,\n    fallbackAdapterId = NOVA_STATUS_CONTENT_FALLBACK_ADAPTER,\n    fallbackMap: Record<string, string> = ERROR_FALLBACK_MAP,\n    fallbackNodes: Record<string, IComponentConfiguration> = ERROR_NODES\n): Record<string, IComponentConfiguration> { ... }\n`;\n}\n'},4812:(o,e,n)=>{"use strict";n.r(e),n.d(e,{default:()=>t});const t='<div class="my-3 d-flex align-items-center">\n    <nui-switch class="ml-3" [(value)]="editMode" i18n> Edit Mode </nui-switch>\n    <button\n        *ngIf="!dashboard?.widgets[\'widget1\']"\n        type="button"\n        displayStyle="action"\n        (click)="reInitializeDashboard()"\n        nui-button\n    >\n        Restore Widget\n    </button>\n</div>\n\n<div class="w-100 dashboard">\n    \x3c!--\n        Note: The dashboard and gridsterConfig input assignments must use banana-in-a-box notation to keep\n        the dashboard state updated with changes to the pizzagna.\n    --\x3e\n    <nui-dashboard\n        *ngIf="dashboard"\n        [(dashboard)]="dashboard"\n        [(gridsterConfig)]="gridsterConfig"\n        [editMode]="editMode"\n        nuiWidgetEditor\n    >\n    </nui-dashboard>\n</div>\n'},7628:(o,e,n)=>{"use strict";n.r(e),n.d(e,{default:()=>t});const t=".dashboard {\n    height: 400px;\n}\n"},32188:(o,e,n)=>{"use strict";n.r(e),n.d(e,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport { HttpClient, HttpErrorResponse } from "@angular/common/http";\nimport {\n    ChangeDetectorRef,\n    Component,\n    Injectable,\n    OnDestroy,\n    OnInit,\n} from "@angular/core";\nimport { GridsterConfig, GridsterItem } from "angular-gridster2";\nimport { BehaviorSubject } from "rxjs";\nimport { finalize } from "rxjs/operators";\n\nimport { DataSourceService, IFilteringOutputs } from "@nova-ui/bits";\nimport {\n    DATA_SOURCE,\n    DEFAULT_PIZZAGNA_ROOT,\n    HttpStatusCode,\n    IDashboard,\n    IKpiData,\n    IProviderConfiguration,\n    IRefresherProperties,\n    IWidget,\n    IWidgets,\n    KpiComponent,\n    NOVA_KPI_DATASOURCE_ADAPTER,\n    PizzagnaLayer,\n    ProviderRegistryService,\n    WellKnownPathKey,\n    WellKnownProviders,\n    WidgetTypesService,\n} from "@nova-ui/dashboards";\n\n/**\n * A simple KPI data source to retrieve the average rating of Harry Potter and the Sorcerer\'s Stone (book) via googleapis\n */\n@Injectable()\nexport class AverageRatingKpiDataSource\n    extends DataSourceService<IKpiData>\n    implements OnDestroy\n{\n    // This is the ID we\'ll use to identify the provider\n    public static providerId = "AverageRatingKpiDataSource";\n\n    // Use this subject to communicate the data source\'s busy state\n    public busy = new BehaviorSubject<boolean>(false);\n\n    constructor(private http: HttpClient) {\n        super();\n    }\n\n    // In this example, getFilteredData is invoked every 10 minutes (Take a look at the refresher\n    // provider definition in the widget configuration below to see how the interval is set)\n    public async getFilteredData(): Promise<IFilteringOutputs> {\n        this.busy.next(true);\n        return new Promise((resolve) => {\n            // *** Make a resource request to an external API (if needed)\n            this.http\n                .get("https://www.googleapis.com/books/v1/volumes/5MQFrgEACAAJ")\n                .pipe(finalize(() => this.busy.next(false)))\n                .subscribe({\n                    next: (data: any) => {\n                        resolve({\n                            result: {\n                                value: data.volumeInfo.averageRating,\n                            },\n                        });\n                    },\n                    error: (error: HttpErrorResponse) => {\n                        resolve({\n                            result: null,\n                            error: {\n                                type: error.status,\n                            },\n                        });\n                    },\n                });\n        });\n    }\n\n    public ngOnDestroy(): void {\n        this.outputsSubject.complete();\n    }\n}\n\n/**\n * A simple KPI data source to retrieve the average rating of Harry Potter and the Sorcerer\'s Stone (book) via googleapis\n */\n@Injectable()\nexport class ErrorUnknownDataSource\n    extends DataSourceService<IKpiData>\n    implements OnDestroy\n{\n    // This is the ID we\'ll use to identify the provider\n    public static providerId = "ErrorUnknownDataSource";\n\n    // Use this subject to communicate the data source\'s busy state\n    public busy = new BehaviorSubject<boolean>(false);\n\n    // In this example, getFilteredData is invoked every 10 minutes (Take a look at the refresher\n    // provider definition in the widget configuration below to see how the interval is set)\n    public async getFilteredData(): Promise<IFilteringOutputs> {\n        this.busy.next(true);\n        const mockError = {\n            result: null,\n            error: { type: HttpStatusCode.Unknown },\n        };\n        this.busy.next(false);\n        return mockError;\n    }\n\n    public ngOnDestroy(): void {\n        this.outputsSubject.complete();\n    }\n}\n\n/**\n * A simple KPI data source to retrieve the ratings count of Harry Potter and the Sorcerer\'s Stone (book) via googleapis\n */\n@Injectable()\nexport class ErrorForbiddenDataSource\n    extends DataSourceService<IKpiData>\n    implements OnDestroy\n{\n    public static providerId = "ErrorForbiddenDataSource";\n\n    // Use this subject to communicate the data source\'s busy state\n    public busy = new BehaviorSubject<boolean>(false);\n\n    constructor(private http: HttpClient) {\n        super();\n    }\n\n    public async getFilteredData(): Promise<IFilteringOutputs> {\n        this.busy.next(true);\n        // generate a 403\n        return new Promise((resolve) => {\n            this.http\n                .get(\n                    "http://www.mocky.io/v2/5ecc724a3200000f0023614a?mocky-delay=4000ms"\n                )\n                .pipe(finalize(() => this.busy.next(false)))\n                .subscribe({\n                    error: (error: HttpErrorResponse) => {\n                        resolve({\n                            result: null,\n                            error: {\n                                type: error.status,\n                            },\n                        });\n                    },\n                });\n        });\n    }\n\n    public ngOnDestroy(): void {\n        this.outputsSubject.complete();\n    }\n}\n\n/**\n * A simple KPI data source to retrieve the ratings count of Harry Potter and the Sorcerer\'s Stone (book) via googleapis\n */\n@Injectable()\nexport class ErrorNotFoundDataSource\n    extends DataSourceService<IKpiData>\n    implements OnDestroy\n{\n    public static providerId = "ErrorNotFoundDataSource";\n\n    // Use this subject to communicate the data source\'s busy state\n    public busy = new BehaviorSubject<boolean>(false);\n\n    constructor(private http: HttpClient) {\n        super();\n    }\n\n    public async getFilteredData(): Promise<IFilteringOutputs> {\n        this.busy.next(true);\n        // generate a 404\n        return new Promise((resolve) => {\n            this.http\n                .get(\n                    "http://www.mocky.io/v2/5ec6bfd93200007800d75100?mocky-delay=1000ms"\n                )\n                .pipe(finalize(() => this.busy.next(false)))\n                .subscribe({\n                    error: (error: HttpErrorResponse) => {\n                        resolve({\n                            result: null,\n                            error: {\n                                type: error.status,\n                            },\n                        });\n                    },\n                });\n        });\n    }\n\n    public ngOnDestroy(): void {\n        this.outputsSubject.complete();\n    }\n}\n\n/**\n * A component that instantiates the dashboard\n */\n@Component({\n    selector: "widget-error-handling",\n    templateUrl: "./widget-error-handling.component.html",\n    styleUrls: ["./widget-error-handling.component.less"],\n})\nexport class WidgetErrorHandlingComponent implements OnInit {\n    // This variable will hold all the data needed to define the layout and behavior of the widgets.\n    // Pass this to the dashboard component\'s dashboard input in the template.\n    public dashboard: IDashboard | undefined;\n\n    // Angular gridster requires a configuration object even if it\'s empty.\n    // Pass this to the dashboard component\'s gridsterConfig input in the template.\n    public gridsterConfig: GridsterConfig = {};\n\n    // Boolean which dashboard takes in as an input if its true it allows you to move widgets around.\n    public editMode: boolean = false;\n\n    constructor(\n        // WidgetTypesService provides the widget\'s necessary structure information\n        private widgetTypesService: WidgetTypesService,\n\n        // In general, the ProviderRegistryService is used for making entities available for injection into dynamically loaded components.\n        private providerRegistry: ProviderRegistryService,\n        private changeDetectorRef: ChangeDetectorRef\n    ) {}\n\n    public ngOnInit(): void {\n        // Grab the widget\'s default template which will be needed as a parameter for setNode.\n        const widgetTemplate = this.widgetTypesService.getWidgetType("kpi", 1);\n        // Register our data sources as dropdown options in the widget editor/configurator\n        // Note: This could also be done in the parent module\'s constructor so that\n        // multiple dashboards could have access to the same widget template modification.\n        this.widgetTypesService.setNode(\n            // This is the template we grabbed above with getWidgetType\n            widgetTemplate,\n            // We are setting the editor/configurator part of the widget template\n            "configurator",\n            // This indicates which node you are changing and we want to change\n            // the data source providers available for selection in the editor.\n            WellKnownPathKey.DataSourceProviders,\n            // We are setting the data sources available for selection in the editor\n            [\n                ErrorUnknownDataSource.providerId,\n                ErrorForbiddenDataSource.providerId,\n                ErrorNotFoundDataSource.providerId,\n                AverageRatingKpiDataSource.providerId,\n            ]\n        );\n\n        // Register the data sources available for injection into the KPI tiles.\n        // Note: Each tile of a KPI widget is assigned its own instance of a data source\n        this.providerRegistry.setProviders({\n            [ErrorUnknownDataSource.providerId]: {\n                provide: DATA_SOURCE,\n                useClass: ErrorUnknownDataSource,\n                // Any dependencies that need to be injected into the provider must be listed here\n                deps: [HttpClient],\n            },\n            [ErrorForbiddenDataSource.providerId]: {\n                provide: DATA_SOURCE,\n                useClass: ErrorForbiddenDataSource,\n                deps: [HttpClient],\n            },\n            [ErrorNotFoundDataSource.providerId]: {\n                provide: DATA_SOURCE,\n                useClass: ErrorNotFoundDataSource,\n                deps: [HttpClient],\n            },\n            [AverageRatingKpiDataSource.providerId]: {\n                provide: DATA_SOURCE,\n                useClass: AverageRatingKpiDataSource,\n                // Any dependencies that need to be injected into the provider must be listed here\n                deps: [HttpClient],\n            },\n        });\n\n        this.initializeDashboard();\n    }\n\n    /** Used for restoring widgets state */\n    public reInitializeDashboard(): void {\n        // destroys the components and their providers so the dashboard can re init data\n        this.dashboard = undefined;\n        this.changeDetectorRef.detectChanges();\n\n        this.initializeDashboard();\n    }\n\n    public initializeDashboard(): void {\n        // We\'re using a static configuration object for this example (see widgetConfig at the bottom of the file),\n        // but this is where the widget\'s configuration could potentially be populated from a database\n        const kpiWidget = widgetConfig;\n        const widgetIndex: IWidgets = {\n            // Complete the KPI widget with information coming from its type definition\n            [kpiWidget.id]:\n                this.widgetTypesService.mergeWithWidgetType(kpiWidget),\n        };\n\n        // Setting the widget dimensions and position (this is for gridster)\n        const positions: Record<string, GridsterItem> = {\n            [kpiWidget.id]: {\n                cols: 4,\n                rows: 6,\n                y: 0,\n                x: 0,\n            },\n        };\n\n        // Finally, assigning the variables we created above to the dashboard\n        this.dashboard = {\n            positions,\n            widgets: widgetIndex,\n        };\n    }\n}\n\nconst widgetConfig: IWidget = {\n    id: "widget1",\n    type: "kpi",\n    pizzagna: {\n        [PizzagnaLayer.Configuration]: {\n            [DEFAULT_PIZZAGNA_ROOT]: {\n                providers: {\n                    [WellKnownProviders.Refresher]: {\n                        properties: {\n                            // Configuring the refresher interval so that our data source is invoked every ten minutes\n                            interval: 60 * 10,\n                            enabled: true,\n                        } as IRefresherProperties,\n                    } as Partial<IProviderConfiguration>,\n                },\n            },\n            header: {\n                properties: {\n                    title: "Harry Potter and the Sorcerer\'s Stone",\n                    subtitle: "By J. K. Rowling",\n                },\n            },\n            tiles: {\n                properties: {\n                    nodes: ["kpi1"],\n                },\n            },\n            kpi1: {\n                id: "kpi1",\n                componentType: KpiComponent.lateLoadKey,\n                properties: {\n                    widgetData: {\n                        units: "out of 5 Stars",\n                        label: "Average Rating",\n                    },\n                },\n                providers: {\n                    [WellKnownProviders.DataSource]: {\n                        // Setting the data source providerId for the tile with id "kpi1"\n                        providerId: ErrorUnknownDataSource.providerId,\n                    } as IProviderConfiguration,\n                    [WellKnownProviders.Adapter]: {\n                        providerId: NOVA_KPI_DATASOURCE_ADAPTER,\n                        properties: {\n                            componentId: "kpi1",\n                            propertyPath: "widgetData",\n                        },\n                    } as IProviderConfiguration,\n                },\n            },\n        },\n    },\n};\n'},86251:(o,e,n)=>{"use strict";n.r(e),n.d(e,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport { CommonModule } from "@angular/common";\nimport { HttpClientModule } from "@angular/common/http";\nimport { NgModule } from "@angular/core";\nimport { ReactiveFormsModule } from "@angular/forms";\nimport { RouterModule } from "@angular/router";\n\nimport {\n    NuiButtonModule,\n    NuiDocsModule,\n    NuiFormFieldModule,\n    NuiIconModule,\n    NuiMessageModule,\n    NuiSwitchModule,\n    NuiTextboxModule,\n    DEMO_PATH_TOKEN,\n} from "@nova-ui/bits";\nimport {\n    NuiDashboardConfiguratorModule,\n    NuiDashboardsModule,\n} from "@nova-ui/dashboards";\n\nimport { getDemoFiles } from "../../../../demo-files-factory";\nimport { WidgetErrorHandlingDocsComponent } from "./widget-error-handling-docs.component";\nimport { WidgetErrorHandlingComponent } from "./widget-error-handling.component";\n\nconst routes = [\n    {\n        path: "",\n        component: WidgetErrorHandlingDocsComponent,\n        data: {\n            srlc: {\n                hideIndicator: true,\n            },\n            showThemeSwitcher: true,\n        },\n    },\n    {\n        path: "example",\n        component: WidgetErrorHandlingComponent,\n        data: {\n            srlc: {\n                hideIndicator: true,\n            },\n        },\n    },\n];\n\n@NgModule({\n    imports: [\n        CommonModule,\n        ReactiveFormsModule,\n        HttpClientModule,\n        NuiButtonModule,\n        NuiDashboardsModule,\n        NuiDashboardConfiguratorModule,\n        NuiDocsModule,\n        NuiFormFieldModule,\n        NuiIconModule,\n        NuiMessageModule,\n        NuiIconModule,\n        NuiTextboxModule,\n        NuiIconModule,\n        NuiSwitchModule,\n        RouterModule.forChild(routes),\n    ],\n    declarations: [\n        WidgetErrorHandlingDocsComponent,\n        WidgetErrorHandlingComponent,\n    ],\n    providers: [\n        {\n            provide: DEMO_PATH_TOKEN,\n            useValue: getDemoFiles("widget-error-handling"),\n        },\n    ],\n})\nexport default class WidgetErrorHandlingModule {}\n'},89163:(o,e,n)=>{"use strict";n.r(e),n.d(e,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nexport enum APOLLO_API_NAMESPACE {\n    COUNTRIES = "countries",\n}\n'},68842:(o,e,n)=>{"use strict";n.r(e),n.d(e,{default:()=>t});const t='<div class="my-3 d-flex align-items-center">\n    <nui-switch class="ml-3" [(value)]="editMode" i18n> Edit Mode </nui-switch>\n    <button\n        *ngIf="!dashboard?.widgets[\'embeddedContentWidgetId\']"\n        type="button"\n        displayStyle="action"\n        (click)="reInitializeDashboard()"\n        nui-button\n    >\n        Restore Widget\n    </button>\n</div>\n\n<div class="w-100 dashboard">\n    \x3c!--\n        Note: The dashboard and gridsterConfig input assignments must use banana-in-a-box notation to keep\n        the dashboard state updated with changes to the pizzagna.\n    --\x3e\n    <nui-dashboard\n        *ngIf="dashboard"\n        [(dashboard)]="dashboard"\n        [(gridsterConfig)]="gridsterConfig"\n        [editMode]="editMode"\n        nuiWidgetEditor\n    >\n    </nui-dashboard>\n</div>\n'},67746:(o,e,n)=>{"use strict";n.r(e),n.d(e,{default:()=>t});const t=".dashboard {\n    height: 700px;\n}\n"},51382:(o,e,n)=>{"use strict";n.r(e),n.d(e,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport { HttpClient } from "@angular/common/http";\nimport {\n    ChangeDetectorRef,\n    Component,\n    Injectable,\n    OnDestroy,\n    OnInit,\n} from "@angular/core";\nimport { GridsterConfig, GridsterItem } from "angular-gridster2";\nimport { Apollo, gql } from "apollo-angular";\nimport { BehaviorSubject, Observable, of, Subject } from "rxjs";\n// eslint-disable-next-line import/no-deprecated\nimport { finalize, map, switchMap, tap } from "rxjs/operators";\n\nimport {\n    DataSourceService,\n    IconStatus,\n    IDataField,\n    IFilters,\n    INovaFilters,\n} from "@nova-ui/bits";\nimport {\n    DATA_SOURCE,\n    DEFAULT_PIZZAGNA_ROOT,\n    IDashboard,\n    IDrilldownComponentsConfiguration,\n    IListWidgetConfiguration,\n    IProviderConfiguration,\n    IWidget,\n    IWidgets,\n    ListGroupItemComponent,\n    ListLeafItemComponent,\n    NOVA_DRILLDOWN_DATASOURCE_ADAPTER,\n    PizzagnaLayer,\n    ProviderRegistryService,\n    WellKnownPathKey,\n    WellKnownProviders,\n    WidgetTypesService,\n} from "@nova-ui/dashboards";\n\nimport { APOLLO_API_NAMESPACE } from "../../../types";\n\n/**\n * A simple KPI data source to retrieve the average rating of Harry Potter and the Sorcerer\'s Stone (book) via googleapis\n */\n@Injectable()\nexport class DrilldownDataSource\n    extends DataSourceService<any>\n    implements OnDestroy\n{\n    // This is the ID we\'ll use to identify the provider\n    public static providerId = "DrilldownDataSource";\n\n    // Use this subject to communicate the data source\'s busy state\n    public busy = new BehaviorSubject<boolean>(false);\n\n    public dataFields: Partial<IDataField>[] = [\n        { id: "Region", label: "Region name" },\n        { id: "Subregion", label: "Subregion name" },\n    ];\n\n    private drillState: string[] = [];\n    private groupBy: string[];\n    private cache: any;\n    private lastDrillState: string[] = [];\n    private leafGroup: string = "Country";\n    private applyFilters$ = new Subject<IFilters>();\n\n    constructor(private http: HttpClient, private apollo: Apollo) {\n        super();\n\n        // TODO: remove Partial in vNext after marking dataType field as optional - NUI-5838\n        (\n            this.dataFieldsConfig.dataFields$ as BehaviorSubject<\n                Partial<IDataField>[]\n            >\n        ).next(this.dataFields);\n\n        this.applyFilters$\n            // eslint-disable-next-line import/no-deprecated\n            .pipe(switchMap((filters) => this.getData(filters)))\n            .subscribe(async (res) => {\n                this.outputsSubject.next(await this.getFilteredData(res));\n            });\n    }\n\n    private groupedDataHistory: any[] = [];\n\n    // In this example, getFilteredData is invoked every 10 minutes (Take a look at the refresher\n    // provider definition in the widget configuration below to see how the interval is set)\n    public async getFilteredData(data: any): Promise<any> {\n        return of(data)\n            .pipe(\n                map((entries) => {\n                    if (this.isDrillDown()) {\n                        const activeDrillLvl = this.drillState.length;\n                        const group = this.groupBy[activeDrillLvl];\n                        const lastGroupedValue =\n                            this.getTransformedDataForGroup(\n                                entries,\n                                group,\n                                getLast(this.drillState)\n                            );\n\n                        this.groupedDataHistory.push(lastGroupedValue);\n\n                        return lastGroupedValue;\n                    }\n\n                    const mapIconsToEntries = entries.map((item: any) => ({\n                        ...item,\n                        icon: "virtual-host",\n                        icon_status: IconStatus.Up,\n                    }));\n                    this.groupedDataHistory.push(mapIconsToEntries);\n                    const widgetInput = this.getOutput(entries);\n\n                    return widgetInput;\n                })\n            )\n            .toPromise();\n    }\n\n    public ngOnDestroy(): void {\n        this.outputsSubject.complete();\n    }\n\n    // redefine parent method\n    public async applyFilters(): Promise<void> {\n        this.applyFilters$.next(this.getFilters());\n    }\n\n    private getQuery(key: string, value: string) {\n        const groupToRequestMap: Record<string, string> = {\n            Region: `{ Region { name } }`,\n            Subregion: `{ Subregion(filter: { region: { name: "${value}" } } ) { name } }`,\n            Country: `{ Country(filter: { subregion: { name: "${value}" } } ) { name capital } }`,\n        };\n\n        return gql`\n            ${groupToRequestMap[key]}\n        `;\n    }\n\n    private getData(filters: INovaFilters): Observable<any> {\n        this.drillState = filters.drillstate?.value;\n        this.groupBy = filters.group?.value;\n        const group = this.groupBy[this.drillState.length];\n        const isDrillUp = this.drillState.length < this.lastDrillState.length;\n\n        this.lastDrillState = [...this.drillState];\n\n        if (!this.drillState.length) {\n            this.groupedDataHistory.length = 0;\n        }\n\n        this.busy.next(true);\n\n        if (this.cache && (isDrillUp || this.isHome())) {\n            return of(this.cache).pipe(\n                map((data) => data.data[group]),\n                finalize(() => this.busy.next(false))\n            );\n        } else {\n            return this.apollo\n                .use(APOLLO_API_NAMESPACE.COUNTRIES)\n                .query<any>({\n                    query: this.getQuery(\n                        group || this.leafGroup,\n                        getLast(this.drillState)\n                    ),\n                })\n                .pipe(\n                    tap(\n                        (data) =>\n                            (this.cache = {\n                                data: { ...this.cache?.data, ...data?.data },\n                            })\n                    ),\n                    map((data) => data.data[group || this.leafGroup]),\n                    finalize(() => this.busy.next(false))\n                );\n        }\n    }\n\n    private getTransformedDataForGroup(\n        data: any,\n        group: string,\n        drillStateValue: string\n    ) {\n        const fallback: string = `No ${group} for ${drillStateValue}`;\n        const dataArr = Object.values(data).map((val: any) => ({\n            id: val.name || fallback,\n            label: val.name || fallback,\n            statuses: [\n                { key: "state_ok", value: val.name?.length },\n                {\n                    key: "status_unreachable",\n                    value: generateNumberUpTo(100000),\n                },\n                { key: "status_warning", value: generateNumberUpTo(10000) },\n                { key: "status_unknown", value: generateNumberUpTo(1000) },\n            ],\n        }));\n\n        return dataArr;\n    }\n\n    private isHome(): boolean {\n        return this.drillState.length === 0;\n    }\n\n    private isDrillDown(): boolean {\n        return this.drillState.length !== this.groupBy.length;\n    }\n\n    private getOutput(data: any) {\n        if (this.isHome()) {\n            this.groupedDataHistory.length = 0;\n        }\n\n        const lastHistoryValue = getLast(this.groupedDataHistory);\n\n        if (!lastHistoryValue) {\n            return data;\n        }\n\n        return lastHistoryValue[getLast(this.drillState)] || lastHistoryValue;\n    }\n}\n\n@Component({\n    selector: "drilldown-multi-request-widget-example",\n    templateUrl: "./drilldown-multi-request-widget-example.component.html",\n    styleUrls: ["./drilldown-multi-request-widget-example.component.less"],\n})\nexport class DrilldownMultiRequestWidgetExampleComponent implements OnInit {\n    // This variable will hold all the data needed to define the layout and behavior of the widgets.\n    // Pass this to the dashboard component\'s dashboard input in the template.\n    public dashboard: IDashboard | undefined;\n\n    // Angular gridster requires a configuration object even if it\'s empty.\n    // Pass this to the dashboard component\'s gridsterConfig input in the template.\n    public gridsterConfig: GridsterConfig = {};\n\n    // Boolean passed as an input to the dashboard. When true, widgets can be moved, resized, removed, or edited\n    public editMode: boolean = false;\n\n    constructor(\n        // WidgetTypesService provides the widget\'s necessary structure information\n        private widgetTypesService: WidgetTypesService,\n        private providerRegistry: ProviderRegistryService,\n        private changeDetectorRef: ChangeDetectorRef\n    ) {}\n\n    public ngOnInit(): void {\n        // this.prepareNovaDashboards();\n        this.initializeDashboard();\n        const widgetTemplate = this.widgetTypesService.getWidgetType(\n            "drilldown",\n            1\n        );\n        this.widgetTypesService.setNode(\n            widgetTemplate,\n            "configurator",\n            WellKnownPathKey.DataSourceProviders,\n            [DrilldownDataSource.providerId]\n        );\n\n        // Registering the data source for injection into the KPI tile.\n        // Note: Each tile of a KPI widget is assigned its own instance of the data source\n        this.providerRegistry.setProviders({\n            [DrilldownDataSource.providerId]: {\n                provide: DATA_SOURCE,\n                useClass: DrilldownDataSource,\n                // Any dependencies that need to be injected into the provider must be listed here\n                deps: [HttpClient, Apollo],\n            },\n        });\n    }\n\n    /** Used for restoring widgets state */\n    public reInitializeDashboard(): void {\n        // destroys the components and their providers so the dashboard can re init data\n        this.dashboard = undefined;\n        this.changeDetectorRef.detectChanges();\n\n        this.initializeDashboard();\n    }\n\n    public initializeDashboard(): void {\n        // We\'re using a static configuration object for this example, but this is where\n        // the widget\'s configuration could potentially be populated from a database\n        const drilldownWidget = widgetConfig;\n        const widgets: IWidgets = {\n            // Complete the widget with information coming from its type definition\n            [drilldownWidget.id]:\n                this.widgetTypesService.mergeWithWidgetType(drilldownWidget),\n        };\n\n        // Setting the widget dimensions and position (this is for gridster)\n        const positions: Record<string, GridsterItem> = {\n            [drilldownWidget.id]: {\n                cols: 10,\n                rows: 10,\n                y: 0,\n                x: 0,\n            },\n        };\n\n        // Finally, assigning the variables we created above to the dashboard\n        this.dashboard = { positions, widgets };\n    }\n}\n\nconst widgetConfig: IWidget = {\n    id: "drilldown",\n    type: "drilldown",\n    pizzagna: {\n        [PizzagnaLayer.Configuration]: {\n            header: {\n                properties: {\n                    title: "Drilldown Widget",\n                    subtitle: "Countries BY continent THEN currency",\n                },\n            },\n            [DEFAULT_PIZZAGNA_ROOT]: {\n                providers: {\n                    [WellKnownProviders.DataSource]: {\n                        // Setting the data source providerId for the tile with id "kpi1"\n                        providerId: DrilldownDataSource.providerId,\n                        properties: {},\n                    } as IProviderConfiguration,\n                },\n            },\n            listWidget: {\n                providers: {\n                    [WellKnownProviders.Adapter]: {\n                        providerId: NOVA_DRILLDOWN_DATASOURCE_ADAPTER,\n                        properties: {\n                            // widget\n                            navigationBarId: "navigationBar",\n                            componentId: "listWidget",\n                            dataPath: "data",\n\n                            // adapter props\n                            drillstate: [],\n                            groups: ["Region", "Subregion"],\n                            groupBy: ["Region", "Subregion"],\n\n                            // components\n                            componentsConfig: {\n                                group: {\n                                    componentType:\n                                        ListGroupItemComponent.lateLoadKey,\n                                    properties: {\n                                        dataFieldIds: {\n                                            id: "id",\n                                            label: "label",\n                                            statuses: "statuses",\n                                        },\n                                    },\n                                    itemProperties: {\n                                        canNavigate: true,\n                                    },\n                                },\n                                leaf: {\n                                    componentType:\n                                        ListLeafItemComponent.lateLoadKey,\n                                    properties: {\n                                        dataFieldIds: {\n                                            icon: "icon",\n                                            status: "icon_status",\n                                            detailedUrl: "capital",\n                                            label: "name",\n                                        },\n                                    },\n                                    itemProperties: {\n                                        canNavigate: false,\n                                    },\n                                },\n                            } as IDrilldownComponentsConfiguration,\n                        },\n                    },\n                },\n                properties: {\n                    configuration: {\n                        // FORMAT:\n                        // componentType: ListLeafItemComponent.lateLoadKey,\n                        // properties: {\n                        //   dataFieldIds: {\n                        //     icon: "",\n                        //     status: "code",\n                        //     detailedUrl: "capital",\n                        //     label: "name",\n                        //   },\n                        // },\n                        //\n                    } as IListWidgetConfiguration,\n                },\n            },\n        },\n    },\n};\n\nconst getLast = (arr: any[]) => arr[arr.length - 1];\n\nconst generateNumberUpTo = (upperLimit: number): number =>\n    Math.floor(Math.random() * upperLimit + 1);\n'},84448:(o,e,n)=>{"use strict";n.r(e),n.d(e,{default:()=>t});const t='<h1>Drilldown Widget</h1>\n\n<p>\n    A Drilldown widget is used for filtering entities by input parameters. For\n    example, the entity is Country, and you need to find Countries where Region\n    is Asia and Subregion is South Asia. That\'s the case where it\'s handy to use\n    a Drilldown widget. As mentioned above, widget configuration requires a user\n    to select a single entity type(Country) and supply group-by\n    properties(Region and Subregion).\n</p>\n\n<p>\n    When the user clicks on a row, the widget refreshes to show a new state. We\n    call this operation "drilling down."\n</p>\n\n<p>\n    When the user drills down, we check the group-by property list. If there are\n    more properties below the last-selected property, we move to the next\n    property in the list. The list of values inherits any previously-applied\n    filters.\n</p>\n\n<p>If there are no more properties in the group-by list, we show entities.</p>\n\n<nui-message type="info">\n    DataSource is responsible for data preparation. Entities can be mocked, or\n    obtained once, or obtained on each drilldown. Therefore filtering can be\n    implemented locally or on the server-side.\n</nui-message>\n\n<nui-message type="info">\n    DataSource must have dataFieldsConfig field for the correct work of the\n    Drilldown widget. See\n    <a\n        target="_blank"\n        href="../additional-documentation/anatomy/data-sources.html"\n        >DataSource</a\n    >.\n</nui-message>\n\n<h2>Basic Drilldown</h2>\n\n<p>\n    The current example makes a request only once, and then apply grouping rules\n    for received data. You can easily predefine grouping rules and drilling\n    state in the widget config or set these properties using the Configurator.\n</p>\n\n<nui-message type="info">\n    Be aware, <code>groupBy</code> and <code>groups</code> contain keys of the\n    Entity. Value of the property must be a string.\n</nui-message>\n\n<nui-message type="info">\n    <code>groups</code> field contains possible <code>groupBy</code> options\n</nui-message>\n\n<nui-example-code language="typescript">{{\n    predefinedGroping\n}}</nui-example-code>\n\n<br />\n\n<nui-example-wrapper\n    filenamePrefix="drilldown-widget"\n    exampleTitle="Basic Drilldown Widget Example"\n>\n    <drilldown-widget-example></drilldown-widget-example>\n</nui-example-wrapper>\n\n<h2>Configuring the Data Source with search</h2>\n<p>\n    To use search within the Data Source you need to use data source Features.\n    Data Source should <em>implement</em>\n    <a\n        href="https://ux.solarwinds.io/nova/docs/nova-bits/latest/sdk/api-docs-ng2/interfaces/IDataSource.html"\n        target="_blank"\n        ><code>IDataSource</code></a\n    >\n    interface and have <em>features</em> property set.\n</p>\n<p>Default way to do that is to declare the features:</p>\n<nui-example-code language="typescript">\n    {{ featuredDeclaredText }}\n</nui-example-code>\n\n<p>\n    And then pass it to the\n    <a\n        href="https://ux.solarwinds.io/nova/docs/nova-bits/latest/sdk/api-docs-ng2/classes/DataSourceFeatures.html#source"\n        target="_blank"\n        ><code>DataSourceFeatures</code></a\n    >\n</p>\n<nui-example-code language="typescript">\n    {{ featuresUsedText }}\n</nui-example-code>\n\n<p>\n    This part shows the actual widget definition. It includes, among other\n    things, the components and providers that compose the widget itself.\n</p>\n\n<nui-example-code language="typescript">{{ widgetFileText }}</nui-example-code>\n\n<h2>Configurator</h2>\n\n<p>\n    This part shows the form that\'s used for configuring (creating/editing) the\n    widget.\n</p>\n\n<nui-example-code language="typescript">{{\n    configuratorFileText\n}}</nui-example-code>\n'},73952:(o,e,n)=>{"use strict";n.r(e),n.d(e,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport { Component } from "@angular/core";\n\n@Component({\n    selector: "nui-drilldown-docs",\n    templateUrl: "./drilldown-widget-docs.component.html",\n})\nexport class DrilldownDocsComponent {\n    public widgetFileText =\n        require("!!raw-loader!../../../../../../src/lib/widget-types/drilldown/drilldown-widget.ts")\n            .default;\n    public configuratorFileText =\n        require("!!raw-loader!../../../../../../src/lib/widget-types/drilldown/drilldown-configurator")\n            .default;\n    public predefinedGroping = `\nlistWidget: {\n    providers: {\n        [WellKnownProviders.Adapter]: {\n            providerId: NOVA_DRILLDOWN_DATASOURCE_ADAPTER,\n            properties: {\n                ...\n                // adapter props\n                drillstate: [],\n                groupBy: ["regionName", "subregionName"],\n                groups: ["regionName", "subregionName"],\n                ...\n            },\n        },\n    },\n},\n`;\n    public featuredDeclaredText = `\n        private supportedFeatures: IDataSourceFeatures = {\n        search: { enabled: true },\n    };`;\n    public featuresUsedText = `\n        this.features = new DataSourceFeatures(this.supportedFeatures);\n    `;\n}\n'},17583:(o,e,n)=>{"use strict";n.r(e),n.d(e,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport { NgModule } from "@angular/core";\nimport { RouterModule, Routes } from "@angular/router";\n\n// eslint-disable-next-line max-len\nimport {\n    NuiButtonModule,\n    NuiDocsModule,\n    NuiMessageModule,\n    NuiSwitchModule,\n    DEMO_PATH_TOKEN,\n} from "@nova-ui/bits";\nimport { NuiDashboardsModule } from "@nova-ui/dashboards";\n\nimport { getDemoFiles } from "../../../../demo-files-factory";\nimport { DrilldownDocsComponent } from "./drilldown-widget-docs.component";\nimport { DrilldownMultiRequestWidgetExampleComponent } from "./drilldown-multi-request-widget/drilldown-multi-request-widget-example.component";\nimport { DrilldownWidgetExampleComponent } from "./drilldown-widget/drilldown-widget-example.component";\n\nconst routes: Routes = [\n    {\n        path: "",\n        component: DrilldownDocsComponent,\n        data: {\n            srlc: {\n                hideIndicator: true,\n            },\n        },\n    },\n    {\n        path: "example",\n        component: DrilldownWidgetExampleComponent,\n        data: {\n            srlc: {\n                hideIndicator: true,\n            },\n        },\n    },\n    {\n        path: "multiple-requests",\n        component: DrilldownMultiRequestWidgetExampleComponent,\n        data: {\n            srlc: {\n                hideIndicator: true,\n            },\n        },\n    },\n];\n\n@NgModule({\n    imports: [\n        RouterModule.forChild(routes),\n        NuiButtonModule,\n        NuiDocsModule,\n        NuiMessageModule,\n        NuiDashboardsModule,\n        NuiSwitchModule,\n    ],\n    declarations: [\n        DrilldownDocsComponent,\n        DrilldownWidgetExampleComponent,\n        DrilldownMultiRequestWidgetExampleComponent,\n    ],\n    providers: [\n        {\n            provide: DEMO_PATH_TOKEN,\n            useValue: getDemoFiles("drilldown"),\n        },\n    ],\n})\nexport default class DrilldownDocsModule {}\n'},89751:(o,e,n)=>{"use strict";n.r(e),n.d(e,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport { IconStatus } from "@nova-ui/bits";\n\nexport const GRAPH_DATA_MOCK = {\n    data: {\n        countries: [\n            {\n                name: "Andorra",\n                code: "AD",\n                icon: "virtual-host",\n                icon_status: IconStatus.Up,\n                capital: "Andorra la Vella",\n                continent: {\n                    name: "Europe",\n                },\n                currency: "EUR",\n                languages: [\n                    {\n                        name: "Catalan",\n                    },\n                ],\n                url: "https://en.wikipedia.org/wiki/Andorra",\n            },\n            {\n                name: "United Arab Emirates",\n                code: "AE",\n                icon: "virtual-host",\n                icon_status: IconStatus.Up,\n                capital: "Abu Dhabi",\n                continent: {\n                    name: "Asia",\n                },\n                currency: "AED",\n                languages: [\n                    {\n                        name: "Arabic",\n                    },\n                ],\n                url: "https://en.wikipedia.org/wiki/United_Arab_Emirates",\n            },\n            {\n                name: "Afghanistan",\n                code: "AF",\n                icon: "virtual-host",\n                icon_status: IconStatus.Up,\n                capital: "Kabul",\n                continent: {\n                    name: "Asia",\n                },\n                currency: "AFN",\n                languages: [\n                    {\n                        name: "Pashto",\n                    },\n                    {\n                        name: "Uzbek",\n                    },\n                    {\n                        name: "Turkmen",\n                    },\n                ],\n                url: "https://en.wikipedia.org/wiki/Afghanistan",\n            },\n            {\n                name: "Antigua and Barbuda",\n                code: "AG",\n                icon: "virtual-host",\n                icon_status: IconStatus.Up,\n                capital: "Saint John\'s",\n                continent: {\n                    name: "North America",\n                },\n                currency: "XCD",\n                languages: [\n                    {\n                        name: "English",\n                    },\n                ],\n                url: "https://en.wikipedia.org/wiki/Antigua_and_Barbuda",\n            },\n            {\n                name: "Anguilla",\n                code: "AI",\n                icon: "virtual-host",\n                icon_status: IconStatus.Up,\n                capital: "The Valley",\n                continent: {\n                    name: "North America",\n                },\n                currency: "XCD",\n                languages: [\n                    {\n                        name: "English",\n                    },\n                ],\n                url: "https://en.wikipedia.org/wiki/Anguilla",\n            },\n            {\n                name: "Albania",\n                code: "AL",\n                icon: "virtual-host",\n                icon_status: IconStatus.Up,\n                capital: "Tirana",\n                continent: {\n                    name: "Europe",\n                },\n                currency: "ALL",\n                languages: [\n                    {\n                        name: "Albanian",\n                    },\n                ],\n                url: "https://en.wikipedia.org/wiki/Albania",\n            },\n            {\n                name: "Armenia",\n                code: "AM",\n                icon: "virtual-host",\n                icon_status: IconStatus.Up,\n                capital: "Yerevan",\n                continent: {\n                    name: "Asia",\n                },\n                currency: "AMD",\n                languages: [\n                    {\n                        name: "Armenian",\n                    },\n                    {\n                        name: "Russian",\n                    },\n                ],\n                url: "https://en.wikipedia.org/wiki/Armenia",\n            },\n            {\n                name: "Angola",\n                code: "AO",\n                icon: "virtual-host",\n                icon_status: IconStatus.Up,\n                capital: "Luanda",\n                continent: {\n                    name: "Africa",\n                },\n                currency: "AOA",\n                languages: [\n                    {\n                        name: "Portuguese",\n                    },\n                ],\n            },\n            {\n                name: "Antarctica",\n                code: "AQ",\n                icon: "virtual-host",\n                icon_status: IconStatus.Up,\n                capital: null,\n                continent: {\n                    name: "Antarctica",\n                },\n                currency: null,\n                languages: [],\n            },\n            {\n                name: "Argentina",\n                code: "AR",\n                icon: "virtual-host",\n                icon_status: IconStatus.Up,\n                capital: "Buenos Aires",\n                continent: {\n                    name: "South America",\n                },\n                currency: "ARS",\n                languages: [\n                    {\n                        name: "Spanish",\n                    },\n                    {\n                        name: "Guarani",\n                    },\n                ],\n            },\n            {\n                name: "American Samoa",\n                code: "AS",\n                icon: "virtual-host",\n                icon_status: IconStatus.Up,\n                capital: "Pago Pago",\n                continent: {\n                    name: "Oceania",\n                },\n                currency: "USD",\n                languages: [\n                    {\n                        name: "English",\n                    },\n                    {\n                        name: "Samoan",\n                    },\n                ],\n            },\n            {\n                name: "Austria",\n                code: "AT",\n                icon: "virtual-host",\n                icon_status: IconStatus.Up,\n                capital: "Vienna",\n                continent: {\n                    name: "Europe",\n                },\n                currency: "EUR",\n                languages: [\n                    {\n                        name: "German",\n                    },\n                ],\n            },\n            {\n                name: "Australia",\n                code: "AU",\n                icon: "virtual-host",\n                icon_status: IconStatus.Up,\n                capital: "Canberra",\n                continent: {\n                    name: "Oceania",\n                },\n                currency: "AUD",\n                languages: [\n                    {\n                        name: "English",\n                    },\n                ],\n            },\n            {\n                name: "Aruba",\n                code: "AW",\n                icon: "virtual-host",\n                icon_status: IconStatus.Up,\n                capital: "Oranjestad",\n                continent: {\n                    name: "North America",\n                },\n                currency: "AWG",\n                languages: [\n                    {\n                        name: "Dutch",\n                    },\n                    {\n                        name: "Panjabi / Punjabi",\n                    },\n                ],\n            },\n            {\n                name: "\xc5land",\n                code: "AX",\n                icon: "virtual-host",\n                icon_status: IconStatus.Up,\n                capital: "Mariehamn",\n                continent: {\n                    name: "Europe",\n                },\n                currency: "EUR",\n                languages: [\n                    {\n                        name: "Swedish",\n                    },\n                ],\n            },\n            {\n                name: "Azerbaijan",\n                code: "AZ",\n                icon: "virtual-host",\n                icon_status: IconStatus.Up,\n                capital: "Baku",\n                continent: {\n                    name: "Asia",\n                },\n                currency: "AZN",\n                languages: [\n                    {\n                        name: "Azerbaijani",\n                    },\n                ],\n            },\n            {\n                name: "Bosnia and Herzegovina",\n                code: "BA",\n                icon: "virtual-host",\n                icon_status: IconStatus.Up,\n                capital: "Sarajevo",\n                continent: {\n                    name: "Europe",\n                },\n                currency: "BAM",\n                languages: [\n                    {\n                        name: "Bosnian",\n                    },\n                    {\n                        name: "Croatian",\n                    },\n                    {\n                        name: "Serbian",\n                    },\n                ],\n            },\n            {\n                name: "Barbados",\n                code: "BB",\n                icon: "virtual-host",\n                icon_status: IconStatus.Up,\n                capital: "Bridgetown",\n                continent: {\n                    name: "North America",\n                },\n                currency: "BBD",\n                languages: [\n                    {\n                        name: "English",\n                    },\n                ],\n            },\n            {\n                name: "Bangladesh",\n                code: "BD",\n                icon: "virtual-host",\n                icon_status: IconStatus.Up,\n                capital: "Dhaka",\n                continent: {\n                    name: "Asia",\n                },\n                currency: "BDT",\n                languages: [\n                    {\n                        name: "Bengali",\n                    },\n                ],\n            },\n            {\n                name: "Belgium",\n                code: "BE",\n                icon: "virtual-host",\n                icon_status: IconStatus.Up,\n                capital: "Brussels",\n                continent: {\n                    name: "Europe",\n                },\n                currency: "EUR",\n                languages: [\n                    {\n                        name: "Dutch",\n                    },\n                    {\n                        name: "French",\n                    },\n                    {\n                        name: "German",\n                    },\n                ],\n            },\n            {\n                name: "Burkina Faso",\n                code: "BF",\n                icon: "virtual-host",\n                icon_status: IconStatus.Up,\n                capital: "Ouagadougou",\n                continent: {\n                    name: "Africa",\n                },\n                currency: "XOF",\n                languages: [\n                    {\n                        name: "French",\n                    },\n                    {\n                        name: "Peul",\n                    },\n                ],\n            },\n            {\n                name: "Bulgaria",\n                code: "BG",\n                icon: "virtual-host",\n                icon_status: IconStatus.Up,\n                capital: "Sofia",\n                continent: {\n                    name: "Europe",\n                },\n                currency: "BGN",\n                languages: [\n                    {\n                        name: "Bulgarian",\n                    },\n                ],\n            },\n            {\n                name: "Bahrain",\n                code: "BH",\n                icon: "virtual-host",\n                icon_status: IconStatus.Up,\n                capital: "Manama",\n                continent: {\n                    name: "Asia",\n                },\n                currency: "BHD",\n                languages: [\n                    {\n                        name: "Arabic",\n                    },\n                ],\n            },\n            {\n                name: "Burundi",\n                code: "BI",\n                icon: "virtual-host",\n                icon_status: IconStatus.Up,\n                capital: "Bujumbura",\n                continent: {\n                    name: "Africa",\n                },\n                currency: "BIF",\n                languages: [\n                    {\n                        name: "French",\n                    },\n                    {\n                        name: "Kirundi",\n                    },\n                ],\n            },\n            {\n                name: "Benin",\n                code: "BJ",\n                icon: "virtual-host",\n                icon_status: IconStatus.Up,\n                capital: "Porto-Novo",\n                continent: {\n                    name: "Africa",\n                },\n                currency: "XOF",\n                languages: [\n                    {\n                        name: "French",\n                    },\n                ],\n            },\n            {\n                name: "Saint Barth\xe9lemy",\n                code: "BL",\n                icon: "virtual-host",\n                icon_status: IconStatus.Up,\n                capital: "Gustavia",\n                continent: {\n                    name: "North America",\n                },\n                currency: "EUR",\n                languages: [\n                    {\n                        name: "French",\n                    },\n                ],\n            },\n            {\n                name: "Bermuda",\n                code: "BM",\n                icon: "virtual-host",\n                icon_status: IconStatus.Up,\n                capital: "Hamilton",\n                continent: {\n                    name: "North America",\n                },\n                currency: "BMD",\n                languages: [\n                    {\n                        name: "English",\n                    },\n                ],\n            },\n            {\n                name: "Brunei",\n                code: "BN",\n                icon: "virtual-host",\n                icon_status: IconStatus.Up,\n                capital: "Bandar Seri Begawan",\n                continent: {\n                    name: "Asia",\n                },\n                currency: "BND",\n                languages: [\n                    {\n                        name: "Malay",\n                    },\n                ],\n            },\n            {\n                name: "Bolivia",\n                code: "BO",\n                icon: "virtual-host",\n                icon_status: IconStatus.Up,\n                capital: "Sucre",\n                continent: {\n                    name: "South America",\n                },\n                currency: "BOB,BOV",\n                languages: [\n                    {\n                        name: "Spanish",\n                    },\n                    {\n                        name: "Aymara",\n                    },\n                    {\n                        name: "Quechua",\n                    },\n                ],\n            },\n            {\n                name: "Bonaire",\n                code: "BQ",\n                icon: "virtual-host",\n                icon_status: IconStatus.Up,\n                capital: "Kralendijk",\n                continent: {\n                    name: "North America",\n                },\n                currency: "USD",\n                languages: [\n                    {\n                        name: "Dutch",\n                    },\n                ],\n            },\n            {\n                name: "Brazil",\n                code: "BR",\n                icon: "virtual-host",\n                icon_status: IconStatus.Up,\n                capital: "Bras\xedlia",\n                continent: {\n                    name: "South America",\n                },\n                currency: "BRL",\n                languages: [\n                    {\n                        name: "Portuguese",\n                    },\n                ],\n            },\n            {\n                name: "Bahamas",\n                code: "BS",\n                icon: "virtual-host",\n                icon_status: IconStatus.Up,\n                capital: "Nassau",\n                continent: {\n                    name: "North America",\n                },\n                currency: "BSD",\n                languages: [\n                    {\n                        name: "English",\n                    },\n                ],\n            },\n            {\n                name: "Bhutan",\n                code: "BT",\n                icon: "virtual-host",\n                icon_status: IconStatus.Up,\n                capital: "Thimphu",\n                continent: {\n                    name: "Asia",\n                },\n                currency: "BTN,INR",\n                languages: [\n                    {\n                        name: "Dzongkha",\n                    },\n                ],\n            },\n            {\n                name: "Bouvet Island",\n                code: "BV",\n                icon: "virtual-host",\n                icon_status: IconStatus.Up,\n                capital: null,\n                continent: {\n                    name: "Antarctica",\n                },\n                currency: "NOK",\n                languages: [\n                    {\n                        name: "Norwegian",\n                    },\n                    {\n                        name: "Norwegian Bokm\xe5l",\n                    },\n                    {\n                        name: "Norwegian Nynorsk",\n                    },\n                ],\n            },\n            {\n                name: "Botswana",\n                code: "BW",\n                icon: "virtual-host",\n                icon_status: IconStatus.Up,\n                capital: "Gaborone",\n                continent: {\n                    name: "Africa",\n                },\n                currency: "BWP",\n                languages: [\n                    {\n                        name: "English",\n                    },\n                    {\n                        name: "Tswana",\n                    },\n                ],\n            },\n            {\n                name: "Belarus",\n                code: "BY",\n                icon: "virtual-host",\n                icon_status: IconStatus.Up,\n                capital: "Minsk",\n                continent: {\n                    name: "Europe",\n                },\n                currency: "BYN",\n                languages: [\n                    {\n                        name: "Belarusian",\n                    },\n                    {\n                        name: "Russian",\n                    },\n                ],\n            },\n            {\n                name: "Belize",\n                code: "BZ",\n                icon: "virtual-host",\n                icon_status: IconStatus.Up,\n                capital: "Belmopan",\n                continent: {\n                    name: "North America",\n                },\n                currency: "BZD",\n                languages: [\n                    {\n                        name: "English",\n                    },\n                    {\n                        name: "Spanish",\n                    },\n                ],\n            },\n            {\n                name: "Canada",\n                code: "CA",\n                icon: "virtual-host",\n                icon_status: IconStatus.Up,\n                capital: "Ottawa",\n                continent: {\n                    name: "North America",\n                },\n                currency: "CAD",\n                languages: [\n                    {\n                        name: "English",\n                    },\n                    {\n                        name: "French",\n                    },\n                ],\n            },\n            {\n                name: "Cocos [Keeling] Islands",\n                code: "CC",\n                icon: "virtual-host",\n                icon_status: IconStatus.Up,\n                capital: "West Island",\n                continent: {\n                    name: "Asia",\n                },\n                currency: "AUD",\n                languages: [\n                    {\n                        name: "English",\n                    },\n                ],\n            },\n            {\n                name: "Democratic Republic of the Congo",\n                code: "CD",\n                icon: "virtual-host",\n                icon_status: IconStatus.Up,\n                capital: "Kinshasa",\n                continent: {\n                    name: "Africa",\n                },\n                currency: "CDF",\n                languages: [\n                    {\n                        name: "French",\n                    },\n                    {\n                        name: "Lingala",\n                    },\n                    {\n                        name: "Kongo",\n                    },\n                    {\n                        name: "Swahili",\n                    },\n                    {\n                        name: "Luba-Katanga",\n                    },\n                ],\n            },\n            {\n                name: "Central African Republic",\n                code: "CF",\n                icon: "virtual-host",\n                icon_status: IconStatus.Up,\n                capital: "Bangui",\n                continent: {\n                    name: "Africa",\n                },\n                currency: "XAF",\n                languages: [\n                    {\n                        name: "French",\n                    },\n                    {\n                        name: "Sango",\n                    },\n                ],\n            },\n            {\n                name: "Republic of the Congo",\n                code: "CG",\n                icon: "virtual-host",\n                icon_status: IconStatus.Up,\n                capital: "Brazzaville",\n                continent: {\n                    name: "Africa",\n                },\n                currency: "XAF",\n                languages: [\n                    {\n                        name: "French",\n                    },\n                    {\n                        name: "Lingala",\n                    },\n                ],\n            },\n            {\n                name: "Switzerland",\n                code: "CH",\n                icon: "virtual-host",\n                icon_status: IconStatus.Up,\n                capital: "Bern",\n                continent: {\n                    name: "Europe",\n                },\n                currency: "CHE,CHF,CHW",\n                languages: [\n                    {\n                        name: "German",\n                    },\n                    {\n                        name: "French",\n                    },\n                    {\n                        name: "Italian",\n                    },\n                ],\n            },\n            {\n                name: "Ivory Coast",\n                code: "CI",\n                icon: "virtual-host",\n                icon_status: IconStatus.Up,\n                capital: "Yamoussoukro",\n                continent: {\n                    name: "Africa",\n                },\n                currency: "XOF",\n                languages: [\n                    {\n                        name: "French",\n                    },\n                ],\n            },\n            {\n                name: "Cook Islands",\n                code: "CK",\n                icon: "virtual-host",\n                icon_status: IconStatus.Up,\n                capital: "Avarua",\n                continent: {\n                    name: "Oceania",\n                },\n                currency: "NZD",\n                languages: [\n                    {\n                        name: "English",\n                    },\n                ],\n            },\n            {\n                name: "Chile",\n                code: "CL",\n                icon: "virtual-host",\n                icon_status: IconStatus.Up,\n                capital: "Santiago",\n                continent: {\n                    name: "South America",\n                },\n                currency: "CLF,CLP",\n                languages: [\n                    {\n                        name: "Spanish",\n                    },\n                ],\n            },\n            {\n                name: "Cameroon",\n                code: "CM",\n                icon: "virtual-host",\n                icon_status: IconStatus.Up,\n                capital: "Yaound\xe9",\n                continent: {\n                    name: "Africa",\n                },\n                currency: "XAF",\n                languages: [\n                    {\n                        name: "English",\n                    },\n                    {\n                        name: "French",\n                    },\n                ],\n            },\n            {\n                name: "China",\n                code: "CN",\n                icon: "virtual-host",\n                icon_status: IconStatus.Up,\n                capital: "Beijing",\n                continent: {\n                    name: "Asia",\n                },\n                currency: "CNY",\n                languages: [\n                    {\n                        name: "Chinese",\n                    },\n                ],\n            },\n            {\n                name: "Colombia",\n                code: "CO",\n                icon: "virtual-host",\n                icon_status: IconStatus.Up,\n                capital: "Bogot\xe1",\n                continent: {\n                    name: "South America",\n                },\n                currency: "COP",\n                languages: [\n                    {\n                        name: "Spanish",\n                    },\n                ],\n            },\n            {\n                name: "Costa Rica",\n                code: "CR",\n                icon: "virtual-host",\n                icon_status: IconStatus.Up,\n                capital: "San Jos\xe9",\n                continent: {\n                    name: "North America",\n                },\n                currency: "CRC",\n                languages: [\n                    {\n                        name: "Spanish",\n                    },\n                ],\n            },\n            {\n                name: "Cuba",\n                code: "CU",\n                icon: "virtual-host",\n                icon_status: IconStatus.Up,\n                capital: "Havana",\n                continent: {\n                    name: "North America",\n                },\n                currency: "CUC,CUP",\n                languages: [\n                    {\n                        name: "Spanish",\n                    },\n                ],\n            },\n            {\n                name: "Cape Verde",\n                code: "CV",\n                icon: "virtual-host",\n                icon_status: IconStatus.Up,\n                capital: "Praia",\n                continent: {\n                    name: "Africa",\n                },\n                currency: "CVE",\n                languages: [\n                    {\n                        name: "Portuguese",\n                    },\n                ],\n            },\n            {\n                name: "Curacao",\n                code: "CW",\n                icon: "virtual-host",\n                icon_status: IconStatus.Up,\n                capital: "Willemstad",\n                continent: {\n                    name: "North America",\n                },\n                currency: "ANG",\n                languages: [\n                    {\n                        name: "Dutch",\n                    },\n                    {\n                        name: "Panjabi / Punjabi",\n                    },\n                    {\n                        name: "English",\n                    },\n                ],\n            },\n            {\n                name: "Christmas Island",\n                code: "CX",\n                icon: "virtual-host",\n                icon_status: IconStatus.Up,\n                capital: "Flying Fish Cove",\n                continent: {\n                    name: "Asia",\n                },\n                currency: "AUD",\n                languages: [\n                    {\n                        name: "English",\n                    },\n                ],\n            },\n            {\n                name: "Cyprus",\n                code: "CY",\n                icon: "virtual-host",\n                icon_status: IconStatus.Up,\n                capital: "Nicosia",\n                continent: {\n                    name: "Europe",\n                },\n                currency: "EUR",\n                languages: [\n                    {\n                        name: "Greek",\n                    },\n                    {\n                        name: "Turkish",\n                    },\n                    {\n                        name: "Armenian",\n                    },\n                ],\n            },\n            {\n                name: "Czech Republic",\n                code: "CZ",\n                icon: "virtual-host",\n                icon_status: IconStatus.Up,\n                capital: "Prague",\n                continent: {\n                    name: "Europe",\n                },\n                currency: "CZK",\n                languages: [\n                    {\n                        name: "Czech",\n                    },\n                    {\n                        name: "Slovak",\n                    },\n                ],\n            },\n            {\n                name: "Germany",\n                code: "DE",\n                icon: "virtual-host",\n                icon_status: IconStatus.Up,\n                capital: "Berlin",\n                continent: {\n                    name: "Europe",\n                },\n                currency: "EUR",\n                languages: [\n                    {\n                        name: "German",\n                    },\n                ],\n            },\n            {\n                name: "Djibouti",\n                code: "DJ",\n                icon: "virtual-host",\n                icon_status: IconStatus.Up,\n                capital: "Djibouti",\n                continent: {\n                    name: "Africa",\n                },\n                currency: "DJF",\n                languages: [\n                    {\n                        name: "French",\n                    },\n                    {\n                        name: "Arabic",\n                    },\n                ],\n            },\n            {\n                name: "Denmark",\n                code: "DK",\n                icon: "virtual-host",\n                icon_status: IconStatus.Up,\n                capital: "Copenhagen",\n                continent: {\n                    name: "Europe",\n                },\n                currency: "DKK",\n                languages: [\n                    {\n                        name: "Danish",\n                    },\n                ],\n            },\n            {\n                name: "Dominica",\n                code: "DM",\n                icon: "virtual-host",\n                icon_status: IconStatus.Up,\n                capital: "Roseau",\n                continent: {\n                    name: "North America",\n                },\n                currency: "XCD",\n                languages: [\n                    {\n                        name: "English",\n                    },\n                ],\n            },\n            {\n                name: "Dominican Republic",\n                code: "DO",\n                icon: "virtual-host",\n                icon_status: IconStatus.Up,\n                capital: "Santo Domingo",\n                continent: {\n                    name: "North America",\n                },\n                currency: "DOP",\n                languages: [\n                    {\n                        name: "Spanish",\n                    },\n                ],\n            },\n            {\n                name: "Algeria",\n                code: "DZ",\n                icon: "virtual-host",\n                icon_status: IconStatus.Up,\n                capital: "Algiers",\n                continent: {\n                    name: "Africa",\n                },\n                currency: "DZD",\n                languages: [\n                    {\n                        name: "Arabic",\n                    },\n                ],\n            },\n            {\n                name: "Ecuador",\n                code: "EC",\n                icon: "virtual-host",\n                icon_status: IconStatus.Up,\n                capital: "Quito",\n                continent: {\n                    name: "South America",\n                },\n                currency: "USD",\n                languages: [\n                    {\n                        name: "Spanish",\n                    },\n                ],\n            },\n            {\n                name: "Estonia",\n                code: "EE",\n                icon: "virtual-host",\n                icon_status: IconStatus.Up,\n                capital: "Tallinn",\n                continent: {\n                    name: "Europe",\n                },\n                currency: "EUR",\n                languages: [\n                    {\n                        name: "Estonian",\n                    },\n                ],\n            },\n            {\n                name: "Egypt",\n                code: "EG",\n                icon: "virtual-host",\n                icon_status: IconStatus.Up,\n                capital: "Cairo",\n                continent: {\n                    name: "Africa",\n                },\n                currency: "EGP",\n                languages: [\n                    {\n                        name: "Arabic",\n                    },\n                ],\n            },\n            {\n                name: "Western Sahara",\n                code: "EH",\n                icon: "virtual-host",\n                icon_status: IconStatus.Up,\n                capital: "El Aai\xfan",\n                continent: {\n                    name: "Africa",\n                },\n                currency: "MAD,DZD,MRU",\n                languages: [\n                    {\n                        name: "Spanish",\n                    },\n                ],\n            },\n            {\n                name: "Eritrea",\n                code: "ER",\n                icon: "virtual-host",\n                icon_status: IconStatus.Up,\n                capital: "Asmara",\n                continent: {\n                    name: "Africa",\n                },\n                currency: "ERN",\n                languages: [\n                    {\n                        name: "Tigrinya",\n                    },\n                    {\n                        name: "Arabic",\n                    },\n                    {\n                        name: "English",\n                    },\n                ],\n            },\n            {\n                name: "Spain",\n                code: "ES",\n                icon: "virtual-host",\n                icon_status: IconStatus.Up,\n                capital: "Madrid",\n                continent: {\n                    name: "Europe",\n                },\n                currency: "EUR",\n                languages: [\n                    {\n                        name: "Spanish",\n                    },\n                    {\n                        name: "Basque",\n                    },\n                    {\n                        name: "Catalan",\n                    },\n                    {\n                        name: "Galician",\n                    },\n                    {\n                        name: "Occitan",\n                    },\n                ],\n            },\n            {\n                name: "Ethiopia",\n                code: "ET",\n                icon: "virtual-host",\n                icon_status: IconStatus.Up,\n                capital: "Addis Ababa",\n                continent: {\n                    name: "Africa",\n                },\n                currency: "ETB",\n                languages: [\n                    {\n                        name: "Amharic",\n                    },\n                ],\n            },\n            {\n                name: "Finland",\n                code: "FI",\n                icon: "virtual-host",\n                icon_status: IconStatus.Up,\n                capital: "Helsinki",\n                continent: {\n                    name: "Europe",\n                },\n                currency: "EUR",\n                languages: [\n                    {\n                        name: "Finnish",\n                    },\n                    {\n                        name: "Swedish",\n                    },\n                ],\n            },\n            {\n                name: "Fiji",\n                code: "FJ",\n                icon: "virtual-host",\n                icon_status: IconStatus.Up,\n                capital: "Suva",\n                continent: {\n                    name: "Oceania",\n                },\n                currency: "FJD",\n                languages: [\n                    {\n                        name: "English",\n                    },\n                    {\n                        name: "Fijian",\n                    },\n                    {\n                        name: "Hindi",\n                    },\n                    {\n                        name: "Urdu",\n                    },\n                ],\n            },\n            {\n                name: "Falkland Islands",\n                code: "FK",\n                icon: "virtual-host",\n                icon_status: IconStatus.Up,\n                capital: "Stanley",\n                continent: {\n                    name: "South America",\n                },\n                currency: "FKP",\n                languages: [\n                    {\n                        name: "English",\n                    },\n                ],\n            },\n            {\n                name: "Micronesia",\n                code: "FM",\n                icon: "virtual-host",\n                icon_status: IconStatus.Up,\n                capital: "Palikir",\n                continent: {\n                    name: "Oceania",\n                },\n                currency: "USD",\n                languages: [\n                    {\n                        name: "English",\n                    },\n                ],\n            },\n            {\n                name: "Faroe Islands",\n                code: "FO",\n                icon: "virtual-host",\n                icon_status: IconStatus.Up,\n                capital: "T\xf3rshavn",\n                continent: {\n                    name: "Europe",\n                },\n                currency: "DKK",\n                languages: [\n                    {\n                        name: "Faroese",\n                    },\n                ],\n            },\n            {\n                name: "France",\n                code: "FR",\n                icon: "virtual-host",\n                icon_status: IconStatus.Up,\n                capital: "Paris",\n                continent: {\n                    name: "Europe",\n                },\n                currency: "EUR",\n                languages: [\n                    {\n                        name: "French",\n                    },\n                ],\n            },\n            {\n                name: "Gabon",\n                code: "GA",\n                icon: "virtual-host",\n                icon_status: IconStatus.Up,\n                capital: "Libreville",\n                continent: {\n                    name: "Africa",\n                },\n                currency: "XAF",\n                languages: [\n                    {\n                        name: "French",\n                    },\n                ],\n            },\n            {\n                name: "United Kingdom",\n                code: "GB",\n                icon: "virtual-host",\n                icon_status: IconStatus.Up,\n                capital: "London",\n                continent: {\n                    name: "Europe",\n                },\n                currency: "GBP",\n                languages: [\n                    {\n                        name: "English",\n                    },\n                ],\n            },\n            {\n                name: "Grenada",\n                code: "GD",\n                icon: "virtual-host",\n                icon_status: IconStatus.Up,\n                capital: "St. George\'s",\n                continent: {\n                    name: "North America",\n                },\n                currency: "XCD",\n                languages: [\n                    {\n                        name: "English",\n                    },\n                ],\n            },\n            {\n                name: "Georgia",\n                code: "GE",\n                icon: "virtual-host",\n                icon_status: IconStatus.Up,\n                capital: "Tbilisi",\n                continent: {\n                    name: "Asia",\n                },\n                currency: "GEL",\n                languages: [\n                    {\n                        name: "Georgian",\n                    },\n                ],\n            },\n            {\n                name: "French Guiana",\n                code: "GF",\n                icon: "virtual-host",\n                icon_status: IconStatus.Up,\n                capital: "Cayenne",\n                continent: {\n                    name: "South America",\n                },\n                currency: "EUR",\n                languages: [\n                    {\n                        name: "French",\n                    },\n                ],\n            },\n            {\n                name: "Guernsey",\n                code: "GG",\n                icon: "virtual-host",\n                icon_status: IconStatus.Up,\n                capital: "St. Peter Port",\n                continent: {\n                    name: "Europe",\n                },\n                currency: "GBP",\n                languages: [\n                    {\n                        name: "English",\n                    },\n                    {\n                        name: "French",\n                    },\n                ],\n            },\n            {\n                name: "Ghana",\n                code: "GH",\n                icon: "virtual-host",\n                icon_status: IconStatus.Up,\n                capital: "Accra",\n                continent: {\n                    name: "Africa",\n                },\n                currency: "GHS",\n                languages: [\n                    {\n                        name: "English",\n                    },\n                ],\n            },\n            {\n                name: "Gibraltar",\n                code: "GI",\n                icon: "virtual-host",\n                icon_status: IconStatus.Up,\n                capital: "Gibraltar",\n                continent: {\n                    name: "Europe",\n                },\n                currency: "GIP",\n                languages: [\n                    {\n                        name: "English",\n                    },\n                ],\n            },\n            {\n                name: "Greenland",\n                code: "GL",\n                icon: "virtual-host",\n                icon_status: IconStatus.Up,\n                capital: "Nuuk",\n                continent: {\n                    name: "North America",\n                },\n                currency: "DKK",\n                languages: [\n                    {\n                        name: "Greenlandic",\n                    },\n                ],\n            },\n            {\n                name: "Gambia",\n                code: "GM",\n                icon: "virtual-host",\n                icon_status: IconStatus.Up,\n                capital: "Banjul",\n                continent: {\n                    name: "Africa",\n                },\n                currency: "GMD",\n                languages: [\n                    {\n                        name: "English",\n                    },\n                ],\n            },\n            {\n                name: "Guinea",\n                code: "GN",\n                icon: "virtual-host",\n                icon_status: IconStatus.Up,\n                capital: "Conakry",\n                continent: {\n                    name: "Africa",\n                },\n                currency: "GNF",\n                languages: [\n                    {\n                        name: "French",\n                    },\n                    {\n                        name: "Peul",\n                    },\n                ],\n            },\n            {\n                name: "Guadeloupe",\n                code: "GP",\n                icon: "virtual-host",\n                icon_status: IconStatus.Up,\n                capital: "Basse-Terre",\n                continent: {\n                    name: "North America",\n                },\n                currency: "EUR",\n                languages: [\n                    {\n                        name: "French",\n                    },\n                ],\n            },\n            {\n                name: "Equatorial Guinea",\n                code: "GQ",\n                icon: "virtual-host",\n                icon_status: IconStatus.Up,\n                capital: "Malabo",\n                continent: {\n                    name: "Africa",\n                },\n                currency: "XAF",\n                languages: [\n                    {\n                        name: "Spanish",\n                    },\n                    {\n                        name: "French",\n                    },\n                ],\n            },\n            {\n                name: "Greece",\n                code: "GR",\n                icon: "virtual-host",\n                icon_status: IconStatus.Up,\n                capital: "Athens",\n                continent: {\n                    name: "Europe",\n                },\n                currency: "EUR",\n                languages: [\n                    {\n                        name: "Greek",\n                    },\n                ],\n            },\n            {\n                name: "South Georgia and the South Sandwich Islands",\n                code: "GS",\n                icon: "virtual-host",\n                icon_status: IconStatus.Up,\n                capital: "King Edward Point",\n                continent: {\n                    name: "Antarctica",\n                },\n                currency: "GBP",\n                languages: [\n                    {\n                        name: "English",\n                    },\n                ],\n            },\n            {\n                name: "Guatemala",\n                code: "GT",\n                icon: "virtual-host",\n                icon_status: IconStatus.Up,\n                capital: "Guatemala City",\n                continent: {\n                    name: "North America",\n                },\n                currency: "GTQ",\n                languages: [\n                    {\n                        name: "Spanish",\n                    },\n                ],\n            },\n            {\n                name: "Guam",\n                code: "GU",\n                icon: "virtual-host",\n                icon_status: IconStatus.Up,\n                capital: "Hag\xe5t\xf1a",\n                continent: {\n                    name: "Oceania",\n                },\n                currency: "USD",\n                languages: [\n                    {\n                        name: "English",\n                    },\n                    {\n                        name: "Chamorro",\n                    },\n                    {\n                        name: "Spanish",\n                    },\n                ],\n            },\n            {\n                name: "Guinea-Bissau",\n                code: "GW",\n                icon: "virtual-host",\n                icon_status: IconStatus.Up,\n                capital: "Bissau",\n                continent: {\n                    name: "Africa",\n                },\n                currency: "XOF",\n                languages: [\n                    {\n                        name: "Portuguese",\n                    },\n                ],\n            },\n            {\n                name: "Guyana",\n                code: "GY",\n                icon: "virtual-host",\n                icon_status: IconStatus.Up,\n                capital: "Georgetown",\n                continent: {\n                    name: "South America",\n                },\n                currency: "GYD",\n                languages: [\n                    {\n                        name: "English",\n                    },\n                ],\n            },\n            {\n                name: "Hong Kong",\n                code: "HK",\n                icon: "virtual-host",\n                icon_status: IconStatus.Up,\n                capital: "City of Victoria",\n                continent: {\n                    name: "Asia",\n                },\n                currency: "HKD",\n                languages: [\n                    {\n                        name: "Chinese",\n                    },\n                    {\n                        name: "English",\n                    },\n                ],\n            },\n            {\n                name: "Heard Island and McDonald Islands",\n                code: "HM",\n                icon: "virtual-host",\n                icon_status: IconStatus.Up,\n                capital: null,\n                continent: {\n                    name: "Antarctica",\n                },\n                currency: "AUD",\n                languages: [\n                    {\n                        name: "English",\n                    },\n                ],\n            },\n            {\n                name: "Honduras",\n                code: "HN",\n                icon: "virtual-host",\n                icon_status: IconStatus.Up,\n                capital: "Tegucigalpa",\n                continent: {\n                    name: "North America",\n                },\n                currency: "HNL",\n                languages: [\n                    {\n                        name: "Spanish",\n                    },\n                ],\n            },\n            {\n                name: "Croatia",\n                code: "HR",\n                icon: "virtual-host",\n                icon_status: IconStatus.Up,\n                capital: "Zagreb",\n                continent: {\n                    name: "Europe",\n                },\n                currency: "HRK",\n                languages: [\n                    {\n                        name: "Croatian",\n                    },\n                ],\n            },\n            {\n                name: "Haiti",\n                code: "HT",\n                icon: "virtual-host",\n                icon_status: IconStatus.Up,\n                capital: "Port-au-Prince",\n                continent: {\n                    name: "North America",\n                },\n                currency: "HTG,USD",\n                languages: [\n                    {\n                        name: "French",\n                    },\n                    {\n                        name: "Haitian",\n                    },\n                ],\n            },\n            {\n                name: "Hungary",\n                code: "HU",\n                icon: "virtual-host",\n                icon_status: IconStatus.Up,\n                capital: "Budapest",\n                continent: {\n                    name: "Europe",\n                },\n                currency: "HUF",\n                languages: [\n                    {\n                        name: "Hungarian",\n                    },\n                ],\n            },\n            {\n                name: "Indonesia",\n                code: "ID",\n                icon: "virtual-host",\n                icon_status: IconStatus.Up,\n                capital: "Jakarta",\n                continent: {\n                    name: "Asia",\n                },\n                currency: "IDR",\n                languages: [\n                    {\n                        name: "Indonesian",\n                    },\n                ],\n            },\n            {\n                name: "Ireland",\n                code: "IE",\n                icon: "virtual-host",\n                icon_status: IconStatus.Up,\n                capital: "Dublin",\n                continent: {\n                    name: "Europe",\n                },\n                currency: "EUR",\n                languages: [\n                    {\n                        name: "Irish",\n                    },\n                    {\n                        name: "English",\n                    },\n                ],\n            },\n            {\n                name: "Israel",\n                code: "IL",\n                icon: "virtual-host",\n                icon_status: IconStatus.Up,\n                capital: "Jerusalem",\n                continent: {\n                    name: "Asia",\n                },\n                currency: "ILS",\n                languages: [\n                    {\n                        name: "Hebrew",\n                    },\n                    {\n                        name: "Arabic",\n                    },\n                ],\n            },\n            {\n                name: "Isle of Man",\n                code: "IM",\n                icon: "virtual-host",\n                icon_status: IconStatus.Up,\n                capital: "Douglas",\n                continent: {\n                    name: "Europe",\n                },\n                currency: "GBP",\n                languages: [\n                    {\n                        name: "English",\n                    },\n                    {\n                        name: "Manx",\n                    },\n                ],\n            },\n            {\n                name: "India",\n                code: "IN",\n                icon: "virtual-host",\n                icon_status: IconStatus.Up,\n                capital: "New Delhi",\n                continent: {\n                    name: "Asia",\n                },\n                currency: "INR",\n                languages: [\n                    {\n                        name: "Hindi",\n                    },\n                    {\n                        name: "English",\n                    },\n                ],\n            },\n            {\n                name: "British Indian Ocean Territory",\n                code: "IO",\n                icon: "virtual-host",\n                icon_status: IconStatus.Up,\n                capital: "Diego Garcia",\n                continent: {\n                    name: "Asia",\n                },\n                currency: "USD",\n                languages: [\n                    {\n                        name: "English",\n                    },\n                ],\n            },\n            {\n                name: "Iraq",\n                code: "IQ",\n                icon: "virtual-host",\n                icon_status: IconStatus.Up,\n                capital: "Baghdad",\n                continent: {\n                    name: "Asia",\n                },\n                currency: "IQD",\n                languages: [\n                    {\n                        name: "Arabic",\n                    },\n                    {\n                        name: "Kurdish",\n                    },\n                ],\n            },\n            {\n                name: "Iran",\n                code: "IR",\n                icon: "virtual-host",\n                icon_status: IconStatus.Up,\n                capital: "Tehran",\n                continent: {\n                    name: "Asia",\n                },\n                currency: "IRR",\n                languages: [\n                    {\n                        name: "Persian",\n                    },\n                ],\n            },\n            {\n                name: "Iceland",\n                code: "IS",\n                icon: "virtual-host",\n                icon_status: IconStatus.Up,\n                capital: "Reykjavik",\n                continent: {\n                    name: "Europe",\n                },\n                currency: "ISK",\n                languages: [\n                    {\n                        name: "Icelandic",\n                    },\n                ],\n            },\n            {\n                name: "Italy",\n                code: "IT",\n                icon: "virtual-host",\n                icon_status: IconStatus.Up,\n                capital: "Rome",\n                continent: {\n                    name: "Europe",\n                },\n                currency: "EUR",\n                languages: [\n                    {\n                        name: "Italian",\n                    },\n                ],\n            },\n            {\n                name: "Jersey",\n                code: "JE",\n                icon: "virtual-host",\n                icon_status: IconStatus.Up,\n                capital: "Saint Helier",\n                continent: {\n                    name: "Europe",\n                },\n                currency: "GBP",\n                languages: [\n                    {\n                        name: "English",\n                    },\n                    {\n                        name: "French",\n                    },\n                ],\n            },\n            {\n                name: "Jamaica",\n                code: "JM",\n                icon: "virtual-host",\n                icon_status: IconStatus.Up,\n                capital: "Kingston",\n                continent: {\n                    name: "North America",\n                },\n                currency: "JMD",\n                languages: [\n                    {\n                        name: "English",\n                    },\n                ],\n            },\n            {\n                name: "Jordan",\n                code: "JO",\n                icon: "virtual-host",\n                icon_status: IconStatus.Up,\n                capital: "Amman",\n                continent: {\n                    name: "Asia",\n                },\n                currency: "JOD",\n                languages: [\n                    {\n                        name: "Arabic",\n                    },\n                ],\n            },\n            {\n                name: "Japan",\n                code: "JP",\n                icon: "virtual-host",\n                icon_status: IconStatus.Up,\n                capital: "Tokyo",\n                continent: {\n                    name: "Asia",\n                },\n                currency: "JPY",\n                languages: [\n                    {\n                        name: "Japanese",\n                    },\n                ],\n            },\n            {\n                name: "Kenya",\n                code: "KE",\n                icon: "virtual-host",\n                icon_status: IconStatus.Up,\n                capital: "Nairobi",\n                continent: {\n                    name: "Africa",\n                },\n                currency: "KES",\n                languages: [\n                    {\n                        name: "English",\n                    },\n                    {\n                        name: "Swahili",\n                    },\n                ],\n            },\n            {\n                name: "Kyrgyzstan",\n                code: "KG",\n                icon: "virtual-host",\n                icon_status: IconStatus.Up,\n                capital: "Bishkek",\n                continent: {\n                    name: "Asia",\n                },\n                currency: "KGS",\n                languages: [\n                    {\n                        name: "Kirghiz",\n                    },\n                    {\n                        name: "Russian",\n                    },\n                ],\n            },\n            {\n                name: "Cambodia",\n                code: "KH",\n                icon: "virtual-host",\n                icon_status: IconStatus.Up,\n                capital: "Phnom Penh",\n                continent: {\n                    name: "Asia",\n                },\n                currency: "KHR",\n                languages: [\n                    {\n                        name: "Cambodian",\n                    },\n                ],\n            },\n            {\n                name: "Kiribati",\n                code: "KI",\n                icon: "virtual-host",\n                icon_status: IconStatus.Up,\n                capital: "South Tarawa",\n                continent: {\n                    name: "Oceania",\n                },\n                currency: "AUD",\n                languages: [\n                    {\n                        name: "English",\n                    },\n                ],\n            },\n            {\n                name: "Comoros",\n                code: "KM",\n                icon: "virtual-host",\n                icon_status: IconStatus.Up,\n                capital: "Moroni",\n                continent: {\n                    name: "Africa",\n                },\n                currency: "KMF",\n                languages: [\n                    {\n                        name: "Arabic",\n                    },\n                    {\n                        name: "French",\n                    },\n                ],\n            },\n            {\n                name: "Saint Kitts and Nevis",\n                code: "KN",\n                icon: "virtual-host",\n                icon_status: IconStatus.Up,\n                capital: "Basseterre",\n                continent: {\n                    name: "North America",\n                },\n                currency: "XCD",\n                languages: [\n                    {\n                        name: "English",\n                    },\n                ],\n            },\n            {\n                name: "North Korea",\n                code: "KP",\n                icon: "virtual-host",\n                icon_status: IconStatus.Up,\n                capital: "Pyongyang",\n                continent: {\n                    name: "Asia",\n                },\n                currency: "KPW",\n                languages: [\n                    {\n                        name: "Korean",\n                    },\n                ],\n            },\n            {\n                name: "South Korea",\n                code: "KR",\n                icon: "virtual-host",\n                icon_status: IconStatus.Up,\n                capital: "Seoul",\n                continent: {\n                    name: "Asia",\n                },\n                currency: "KRW",\n                languages: [\n                    {\n                        name: "Korean",\n                    },\n                ],\n            },\n            {\n                name: "Kuwait",\n                code: "KW",\n                icon: "virtual-host",\n                icon_status: IconStatus.Up,\n                capital: "Kuwait City",\n                continent: {\n                    name: "Asia",\n                },\n                currency: "KWD",\n                languages: [\n                    {\n                        name: "Arabic",\n                    },\n                ],\n            },\n            {\n                name: "Cayman Islands",\n                code: "KY",\n                icon: "virtual-host",\n                icon_status: IconStatus.Up,\n                capital: "George Town",\n                continent: {\n                    name: "North America",\n                },\n                currency: "KYD",\n                languages: [\n                    {\n                        name: "English",\n                    },\n                ],\n            },\n            {\n                name: "Kazakhstan",\n                code: "KZ",\n                icon: "virtual-host",\n                icon_status: IconStatus.Up,\n                capital: "Astana",\n                continent: {\n                    name: "Asia",\n                },\n                currency: "KZT",\n                languages: [\n                    {\n                        name: "Kazakh",\n                    },\n                    {\n                        name: "Russian",\n                    },\n                ],\n            },\n            {\n                name: "Laos",\n                code: "LA",\n                icon: "virtual-host",\n                icon_status: IconStatus.Up,\n                capital: "Vientiane",\n                continent: {\n                    name: "Asia",\n                },\n                currency: "LAK",\n                languages: [\n                    {\n                        name: "Laotian",\n                    },\n                ],\n            },\n            {\n                name: "Lebanon",\n                code: "LB",\n                icon: "virtual-host",\n                icon_status: IconStatus.Up,\n                capital: "Beirut",\n                continent: {\n                    name: "Asia",\n                },\n                currency: "LBP",\n                languages: [\n                    {\n                        name: "Arabic",\n                    },\n                    {\n                        name: "French",\n                    },\n                ],\n            },\n            {\n                name: "Saint Lucia",\n                code: "LC",\n                icon: "virtual-host",\n                icon_status: IconStatus.Up,\n                capital: "Castries",\n                continent: {\n                    name: "North America",\n                },\n                currency: "XCD",\n                languages: [\n                    {\n                        name: "English",\n                    },\n                ],\n            },\n            {\n                name: "Liechtenstein",\n                code: "LI",\n                icon: "virtual-host",\n                icon_status: IconStatus.Up,\n                capital: "Vaduz",\n                continent: {\n                    name: "Europe",\n                },\n                currency: "CHF",\n                languages: [\n                    {\n                        name: "German",\n                    },\n                ],\n            },\n            {\n                name: "Sri Lanka",\n                code: "LK",\n                icon: "virtual-host",\n                icon_status: IconStatus.Up,\n                capital: "Colombo",\n                continent: {\n                    name: "Asia",\n                },\n                currency: "LKR",\n                languages: [\n                    {\n                        name: "Sinhalese",\n                    },\n                    {\n                        name: "Tamil",\n                    },\n                ],\n            },\n            {\n                name: "Liberia",\n                code: "LR",\n                icon: "virtual-host",\n                icon_status: IconStatus.Up,\n                capital: "Monrovia",\n                continent: {\n                    name: "Africa",\n                },\n                currency: "LRD",\n                languages: [\n                    {\n                        name: "English",\n                    },\n                ],\n            },\n            {\n                name: "Lesotho",\n                code: "LS",\n                icon: "virtual-host",\n                icon_status: IconStatus.Up,\n                capital: "Maseru",\n                continent: {\n                    name: "Africa",\n                },\n                currency: "LSL,ZAR",\n                languages: [\n                    {\n                        name: "English",\n                    },\n                    {\n                        name: "Southern Sotho",\n                    },\n                ],\n            },\n            {\n                name: "Lithuania",\n                code: "LT",\n                icon: "virtual-host",\n                icon_status: IconStatus.Up,\n                capital: "Vilnius",\n                continent: {\n                    name: "Europe",\n                },\n                currency: "EUR",\n                languages: [\n                    {\n                        name: "Lithuanian",\n                    },\n                ],\n            },\n            {\n                name: "Luxembourg",\n                code: "LU",\n                icon: "virtual-host",\n                icon_status: IconStatus.Up,\n                capital: "Luxembourg",\n                continent: {\n                    name: "Europe",\n                },\n                currency: "EUR",\n                languages: [\n                    {\n                        name: "French",\n                    },\n                    {\n                        name: "German",\n                    },\n                    {\n                        name: "Luxembourgish",\n                    },\n                ],\n            },\n            {\n                name: "Latvia",\n                code: "LV",\n                icon: "virtual-host",\n                icon_status: IconStatus.Up,\n                capital: "Riga",\n                continent: {\n                    name: "Europe",\n                },\n                currency: "EUR",\n                languages: [\n                    {\n                        name: "Latvian",\n                    },\n                ],\n            },\n            {\n                name: "Libya",\n                code: "LY",\n                icon: "virtual-host",\n                icon_status: IconStatus.Up,\n                capital: "Tripoli",\n                continent: {\n                    name: "Africa",\n                },\n                currency: "LYD",\n                languages: [\n                    {\n                        name: "Arabic",\n                    },\n                ],\n            },\n            {\n                name: "Morocco",\n                code: "MA",\n                icon: "virtual-host",\n                icon_status: IconStatus.Up,\n                capital: "Rabat",\n                continent: {\n                    name: "Africa",\n                },\n                currency: "MAD",\n                languages: [\n                    {\n                        name: "Arabic",\n                    },\n                ],\n            },\n            {\n                name: "Monaco",\n                code: "MC",\n                icon: "virtual-host",\n                icon_status: IconStatus.Up,\n                capital: "Monaco",\n                continent: {\n                    name: "Europe",\n                },\n                currency: "EUR",\n                languages: [\n                    {\n                        name: "French",\n                    },\n                ],\n            },\n            {\n                name: "Moldova",\n                code: "MD",\n                icon: "virtual-host",\n                icon_status: IconStatus.Up,\n                capital: "Chi\u0219in\u0103u",\n                continent: {\n                    name: "Europe",\n                },\n                currency: "MDL",\n                languages: [\n                    {\n                        name: "Romanian",\n                    },\n                ],\n            },\n            {\n                name: "Montenegro",\n                code: "ME",\n                icon: "virtual-host",\n                icon_status: IconStatus.Up,\n                capital: "Podgorica",\n                continent: {\n                    name: "Europe",\n                },\n                currency: "EUR",\n                languages: [\n                    {\n                        name: "Serbian",\n                    },\n                    {\n                        name: "Bosnian",\n                    },\n                    {\n                        name: "Albanian",\n                    },\n                    {\n                        name: "Croatian",\n                    },\n                ],\n            },\n            {\n                name: "Saint Martin",\n                code: "MF",\n                icon: "virtual-host",\n                icon_status: IconStatus.Up,\n                capital: "Marigot",\n                continent: {\n                    name: "North America",\n                },\n                currency: "EUR",\n                languages: [\n                    {\n                        name: "English",\n                    },\n                    {\n                        name: "French",\n                    },\n                    {\n                        name: "Dutch",\n                    },\n                ],\n            },\n            {\n                name: "Madagascar",\n                code: "MG",\n                icon: "virtual-host",\n                icon_status: IconStatus.Up,\n                capital: "Antananarivo",\n                continent: {\n                    name: "Africa",\n                },\n                currency: "MGA",\n                languages: [\n                    {\n                        name: "French",\n                    },\n                    {\n                        name: "Malagasy",\n                    },\n                ],\n            },\n            {\n                name: "Marshall Islands",\n                code: "MH",\n                icon: "virtual-host",\n                icon_status: IconStatus.Up,\n                capital: "Majuro",\n                continent: {\n                    name: "Oceania",\n                },\n                currency: "USD",\n                languages: [\n                    {\n                        name: "English",\n                    },\n                    {\n                        name: "Marshallese",\n                    },\n                ],\n            },\n            {\n                name: "North Macedonia",\n                code: "MK",\n                icon: "virtual-host",\n                icon_status: IconStatus.Up,\n                capital: "Skopje",\n                continent: {\n                    name: "Europe",\n                },\n                currency: "MKD",\n                languages: [\n                    {\n                        name: "Macedonian",\n                    },\n                ],\n            },\n            {\n                name: "Mali",\n                code: "ML",\n                icon: "virtual-host",\n                icon_status: IconStatus.Up,\n                capital: "Bamako",\n                continent: {\n                    name: "Africa",\n                },\n                currency: "XOF",\n                languages: [\n                    {\n                        name: "French",\n                    },\n                ],\n            },\n            {\n                name: "Myanmar [Burma]",\n                code: "MM",\n                icon: "virtual-host",\n                icon_status: IconStatus.Up,\n                capital: "Naypyidaw",\n                continent: {\n                    name: "Asia",\n                },\n                currency: "MMK",\n                languages: [\n                    {\n                        name: "Burmese",\n                    },\n                ],\n            },\n            {\n                name: "Mongolia",\n                code: "MN",\n                icon: "virtual-host",\n                icon_status: IconStatus.Up,\n                capital: "Ulan Bator",\n                continent: {\n                    name: "Asia",\n                },\n                currency: "MNT",\n                languages: [\n                    {\n                        name: "Mongolian",\n                    },\n                ],\n            },\n            {\n                name: "Macao",\n                code: "MO",\n                icon: "virtual-host",\n                icon_status: IconStatus.Up,\n                capital: null,\n                continent: {\n                    name: "Asia",\n                },\n                currency: "MOP",\n                languages: [\n                    {\n                        name: "Chinese",\n                    },\n                    {\n                        name: "Portuguese",\n                    },\n                ],\n            },\n            {\n                name: "Northern Mariana Islands",\n                code: "MP",\n                icon: "virtual-host",\n                icon_status: IconStatus.Up,\n                capital: "Saipan",\n                continent: {\n                    name: "Oceania",\n                },\n                currency: "USD",\n                languages: [\n                    {\n                        name: "English",\n                    },\n                    {\n                        name: "Chamorro",\n                    },\n                ],\n            },\n            {\n                name: "Martinique",\n                code: "MQ",\n                icon: "virtual-host",\n                icon_status: IconStatus.Up,\n                capital: "Fort-de-France",\n                continent: {\n                    name: "North America",\n                },\n                currency: "EUR",\n                languages: [\n                    {\n                        name: "French",\n                    },\n                ],\n            },\n            {\n                name: "Mauritania",\n                code: "MR",\n                icon: "virtual-host",\n                icon_status: IconStatus.Up,\n                capital: "Nouakchott",\n                continent: {\n                    name: "Africa",\n                },\n                currency: "MRU",\n                languages: [\n                    {\n                        name: "Arabic",\n                    },\n                ],\n            },\n            {\n                name: "Montserrat",\n                code: "MS",\n                icon: "virtual-host",\n                icon_status: IconStatus.Up,\n                capital: "Plymouth",\n                continent: {\n                    name: "North America",\n                },\n                currency: "XCD",\n                languages: [\n                    {\n                        name: "English",\n                    },\n                ],\n            },\n            {\n                name: "Malta",\n                code: "MT",\n                icon: "virtual-host",\n                icon_status: IconStatus.Up,\n                capital: "Valletta",\n                continent: {\n                    name: "Europe",\n                },\n                currency: "EUR",\n                languages: [\n                    {\n                        name: "Maltese",\n                    },\n                    {\n                        name: "English",\n                    },\n                ],\n            },\n            {\n                name: "Mauritius",\n                code: "MU",\n                icon: "virtual-host",\n                icon_status: IconStatus.Up,\n                capital: "Port Louis",\n                continent: {\n                    name: "Africa",\n                },\n                currency: "MUR",\n                languages: [\n                    {\n                        name: "English",\n                    },\n                ],\n            },\n            {\n                name: "Maldives",\n                code: "MV",\n                icon: "virtual-host",\n                icon_status: IconStatus.Up,\n                capital: "Mal\xe9",\n                continent: {\n                    name: "Asia",\n                },\n                currency: "MVR",\n                languages: [\n                    {\n                        name: "Divehi",\n                    },\n                ],\n            },\n            {\n                name: "Malawi",\n                code: "MW",\n                icon: "virtual-host",\n                icon_status: IconStatus.Up,\n                capital: "Lilongwe",\n                continent: {\n                    name: "Africa",\n                },\n                currency: "MWK",\n                languages: [\n                    {\n                        name: "English",\n                    },\n                    {\n                        name: "Chichewa",\n                    },\n                ],\n            },\n            {\n                name: "Mexico",\n                code: "MX",\n                icon: "virtual-host",\n                icon_status: IconStatus.Up,\n                capital: "Mexico City",\n                continent: {\n                    name: "North America",\n                },\n                currency: "MXN",\n                languages: [\n                    {\n                        name: "Spanish",\n                    },\n                ],\n            },\n            {\n                name: "Malaysia",\n                code: "MY",\n                icon: "virtual-host",\n                icon_status: IconStatus.Up,\n                capital: "Kuala Lumpur",\n                continent: {\n                    name: "Asia",\n                },\n                currency: "MYR",\n                languages: [\n                    {\n                        name: "Malay",\n                    },\n                ],\n            },\n            {\n                name: "Mozambique",\n                code: "MZ",\n                icon: "virtual-host",\n                icon_status: IconStatus.Up,\n                capital: "Maputo",\n                continent: {\n                    name: "Africa",\n                },\n                currency: "MZN",\n                languages: [\n                    {\n                        name: "Portuguese",\n                    },\n                ],\n            },\n            {\n                name: "Namibia",\n                code: "NA",\n                icon: "virtual-host",\n                icon_status: IconStatus.Up,\n                capital: "Windhoek",\n                continent: {\n                    name: "Africa",\n                },\n                currency: "NAD,ZAR",\n                languages: [\n                    {\n                        name: "English",\n                    },\n                    {\n                        name: "Afrikaans",\n                    },\n                ],\n            },\n            {\n                name: "New Caledonia",\n                code: "NC",\n                icon: "virtual-host",\n                icon_status: IconStatus.Up,\n                capital: "Noum\xe9a",\n                continent: {\n                    name: "Oceania",\n                },\n                currency: "XPF",\n                languages: [\n                    {\n                        name: "French",\n                    },\n                ],\n            },\n            {\n                name: "Niger",\n                code: "NE",\n                icon: "virtual-host",\n                icon_status: IconStatus.Up,\n                capital: "Niamey",\n                continent: {\n                    name: "Africa",\n                },\n                currency: "XOF",\n                languages: [\n                    {\n                        name: "French",\n                    },\n                ],\n            },\n            {\n                name: "Norfolk Island",\n                code: "NF",\n                icon: "virtual-host",\n                icon_status: IconStatus.Up,\n                capital: "Kingston",\n                continent: {\n                    name: "Oceania",\n                },\n                currency: "AUD",\n                languages: [\n                    {\n                        name: "English",\n                    },\n                ],\n            },\n            {\n                name: "Nigeria",\n                code: "NG",\n                icon: "virtual-host",\n                icon_status: IconStatus.Up,\n                capital: "Abuja",\n                continent: {\n                    name: "Africa",\n                },\n                currency: "NGN",\n                languages: [\n                    {\n                        name: "English",\n                    },\n                ],\n            },\n            {\n                name: "Nicaragua",\n                code: "NI",\n                icon: "virtual-host",\n                icon_status: IconStatus.Up,\n                capital: "Managua",\n                continent: {\n                    name: "North America",\n                },\n                currency: "NIO",\n                languages: [\n                    {\n                        name: "Spanish",\n                    },\n                ],\n            },\n            {\n                name: "Netherlands",\n                code: "NL",\n                icon: "virtual-host",\n                icon_status: IconStatus.Up,\n                capital: "Amsterdam",\n                continent: {\n                    name: "Europe",\n                },\n                currency: "EUR",\n                languages: [\n                    {\n                        name: "Dutch",\n                    },\n                ],\n            },\n            {\n                name: "Norway",\n                code: "NO",\n                icon: "virtual-host",\n                icon_status: IconStatus.Up,\n                capital: "Oslo",\n                continent: {\n                    name: "Europe",\n                },\n                currency: "NOK",\n                languages: [\n                    {\n                        name: "Norwegian",\n                    },\n                    {\n                        name: "Norwegian Bokm\xe5l",\n                    },\n                    {\n                        name: "Norwegian Nynorsk",\n                    },\n                ],\n            },\n            {\n                name: "Nepal",\n                code: "NP",\n                icon: "virtual-host",\n                icon_status: IconStatus.Up,\n                capital: "Kathmandu",\n                continent: {\n                    name: "Asia",\n                },\n                currency: "NPR",\n                languages: [\n                    {\n                        name: "Nepali",\n                    },\n                ],\n            },\n            {\n                name: "Nauru",\n                code: "NR",\n                icon: "virtual-host",\n                icon_status: IconStatus.Up,\n                capital: "Yaren",\n                continent: {\n                    name: "Oceania",\n                },\n                currency: "AUD",\n                languages: [\n                    {\n                        name: "English",\n                    },\n                    {\n                        name: "Nauruan",\n                    },\n                ],\n            },\n            {\n                name: "Niue",\n                code: "NU",\n                icon: "virtual-host",\n                icon_status: IconStatus.Up,\n                capital: "Alofi",\n                continent: {\n                    name: "Oceania",\n                },\n                currency: "NZD",\n                languages: [\n                    {\n                        name: "English",\n                    },\n                ],\n            },\n            {\n                name: "New Zealand",\n                code: "NZ",\n                icon: "virtual-host",\n                icon_status: IconStatus.Up,\n                capital: "Wellington",\n                continent: {\n                    name: "Oceania",\n                },\n                currency: "NZD",\n                languages: [\n                    {\n                        name: "English",\n                    },\n                    {\n                        name: "Maori",\n                    },\n                ],\n            },\n            {\n                name: "Oman",\n                code: "OM",\n                icon: "virtual-host",\n                icon_status: IconStatus.Up,\n                capital: "Muscat",\n                continent: {\n                    name: "Asia",\n                },\n                currency: "OMR",\n                languages: [\n                    {\n                        name: "Arabic",\n                    },\n                ],\n            },\n            {\n                name: "Panama",\n                code: "PA",\n                icon: "virtual-host",\n                icon_status: IconStatus.Up,\n                capital: "Panama City",\n                continent: {\n                    name: "North America",\n                },\n                currency: "PAB,USD",\n                languages: [\n                    {\n                        name: "Spanish",\n                    },\n                ],\n            },\n            {\n                name: "Peru",\n                code: "PE",\n                icon: "virtual-host",\n                icon_status: IconStatus.Up,\n                capital: "Lima",\n                continent: {\n                    name: "South America",\n                },\n                currency: "PEN",\n                languages: [\n                    {\n                        name: "Spanish",\n                    },\n                ],\n            },\n            {\n                name: "French Polynesia",\n                code: "PF",\n                icon: "virtual-host",\n                icon_status: IconStatus.Up,\n                capital: "Papeet\u0113",\n                continent: {\n                    name: "Oceania",\n                },\n                currency: "XPF",\n                languages: [\n                    {\n                        name: "French",\n                    },\n                ],\n            },\n            {\n                name: "Papua New Guinea",\n                code: "PG",\n                icon: "virtual-host",\n                icon_status: IconStatus.Up,\n                capital: "Port Moresby",\n                continent: {\n                    name: "Oceania",\n                },\n                currency: "PGK",\n                languages: [\n                    {\n                        name: "English",\n                    },\n                ],\n            },\n            {\n                name: "Philippines",\n                code: "PH",\n                icon: "virtual-host",\n                icon_status: IconStatus.Up,\n                capital: "Manila",\n                continent: {\n                    name: "Asia",\n                },\n                currency: "PHP",\n                languages: [\n                    {\n                        name: "English",\n                    },\n                ],\n            },\n            {\n                name: "Pakistan",\n                code: "PK",\n                icon: "virtual-host",\n                icon_status: IconStatus.Up,\n                capital: "Islamabad",\n                continent: {\n                    name: "Asia",\n                },\n                currency: "PKR",\n                languages: [\n                    {\n                        name: "English",\n                    },\n                    {\n                        name: "Urdu",\n                    },\n                ],\n            },\n            {\n                name: "Poland",\n                code: "PL",\n                icon: "virtual-host",\n                icon_status: IconStatus.Up,\n                capital: "Warsaw",\n                continent: {\n                    name: "Europe",\n                },\n                currency: "PLN",\n                languages: [\n                    {\n                        name: "Polish",\n                    },\n                ],\n            },\n            {\n                name: "Saint Pierre and Miquelon",\n                code: "PM",\n                icon: "virtual-host",\n                icon_status: IconStatus.Up,\n                capital: "Saint-Pierre",\n                continent: {\n                    name: "North America",\n                },\n                currency: "EUR",\n                languages: [\n                    {\n                        name: "French",\n                    },\n                ],\n            },\n            {\n                name: "Pitcairn Islands",\n                code: "PN",\n                icon: "virtual-host",\n                icon_status: IconStatus.Up,\n                capital: "Adamstown",\n                continent: {\n                    name: "Oceania",\n                },\n                currency: "NZD",\n                languages: [\n                    {\n                        name: "English",\n                    },\n                ],\n            },\n            {\n                name: "Puerto Rico",\n                code: "PR",\n                icon: "virtual-host",\n                icon_status: IconStatus.Up,\n                capital: "San Juan",\n                continent: {\n                    name: "North America",\n                },\n                currency: "USD",\n                languages: [\n                    {\n                        name: "Spanish",\n                    },\n                    {\n                        name: "English",\n                    },\n                ],\n            },\n            {\n                name: "Palestine",\n                code: "PS",\n                icon: "virtual-host",\n                icon_status: IconStatus.Up,\n                capital: "Ramallah",\n                continent: {\n                    name: "Asia",\n                },\n                currency: "ILS",\n                languages: [\n                    {\n                        name: "Arabic",\n                    },\n                ],\n            },\n            {\n                name: "Portugal",\n                code: "PT",\n                icon: "virtual-host",\n                icon_status: IconStatus.Up,\n                capital: "Lisbon",\n                continent: {\n                    name: "Europe",\n                },\n                currency: "EUR",\n                languages: [\n                    {\n                        name: "Portuguese",\n                    },\n                ],\n            },\n            {\n                name: "Palau",\n                code: "PW",\n                icon: "virtual-host",\n                icon_status: IconStatus.Up,\n                capital: "Ngerulmud",\n                continent: {\n                    name: "Oceania",\n                },\n                currency: "USD",\n                languages: [\n                    {\n                        name: "English",\n                    },\n                ],\n            },\n            {\n                name: "Paraguay",\n                code: "PY",\n                icon: "virtual-host",\n                icon_status: IconStatus.Up,\n                capital: "Asunci\xf3n",\n                continent: {\n                    name: "South America",\n                },\n                currency: "PYG",\n                languages: [\n                    {\n                        name: "Spanish",\n                    },\n                    {\n                        name: "Guarani",\n                    },\n                ],\n            },\n            {\n                name: "Qatar",\n                code: "QA",\n                icon: "virtual-host",\n                icon_status: IconStatus.Up,\n                capital: "Doha",\n                continent: {\n                    name: "Asia",\n                },\n                currency: "QAR",\n                languages: [\n                    {\n                        name: "Arabic",\n                    },\n                ],\n            },\n            {\n                name: "R\xe9union",\n                code: "RE",\n                icon: "virtual-host",\n                icon_status: IconStatus.Up,\n                capital: "Saint-Denis",\n                continent: {\n                    name: "Africa",\n                },\n                currency: "EUR",\n                languages: [\n                    {\n                        name: "French",\n                    },\n                ],\n            },\n            {\n                name: "Romania",\n                code: "RO",\n                icon: "virtual-host",\n                icon_status: IconStatus.Up,\n                capital: "Bucharest",\n                continent: {\n                    name: "Europe",\n                },\n                currency: "RON",\n                languages: [\n                    {\n                        name: "Romanian",\n                    },\n                ],\n            },\n            {\n                name: "Serbia",\n                code: "RS",\n                icon: "virtual-host",\n                icon_status: IconStatus.Up,\n                capital: "Belgrade",\n                continent: {\n                    name: "Europe",\n                },\n                currency: "RSD",\n                languages: [\n                    {\n                        name: "Serbian",\n                    },\n                ],\n            },\n            {\n                name: "Russia",\n                code: "RU",\n                icon: "virtual-host",\n                icon_status: IconStatus.Up,\n                capital: "Moscow",\n                continent: {\n                    name: "Europe",\n                },\n                currency: "RUB",\n                languages: [\n                    {\n                        name: "Russian",\n                    },\n                ],\n            },\n            {\n                name: "Rwanda",\n                code: "RW",\n                icon: "virtual-host",\n                icon_status: IconStatus.Up,\n                capital: "Kigali",\n                continent: {\n                    name: "Africa",\n                },\n                currency: "RWF",\n                languages: [\n                    {\n                        name: "Rwandi",\n                    },\n                    {\n                        name: "English",\n                    },\n                    {\n                        name: "French",\n                    },\n                ],\n            },\n            {\n                name: "Saudi Arabia",\n                code: "SA",\n                icon: "virtual-host",\n                icon_status: IconStatus.Up,\n                capital: "Riyadh",\n                continent: {\n                    name: "Asia",\n                },\n                currency: "SAR",\n                languages: [\n                    {\n                        name: "Arabic",\n                    },\n                ],\n            },\n            {\n                name: "Solomon Islands",\n                code: "SB",\n                icon: "virtual-host",\n                icon_status: IconStatus.Up,\n                capital: "Honiara",\n                continent: {\n                    name: "Oceania",\n                },\n                currency: "SBD",\n                languages: [\n                    {\n                        name: "English",\n                    },\n                ],\n            },\n            {\n                name: "Seychelles",\n                code: "SC",\n                icon: "virtual-host",\n                icon_status: IconStatus.Up,\n                capital: "Victoria",\n                continent: {\n                    name: "Africa",\n                },\n                currency: "SCR",\n                languages: [\n                    {\n                        name: "French",\n                    },\n                    {\n                        name: "English",\n                    },\n                ],\n            },\n            {\n                name: "Sudan",\n                code: "SD",\n                icon: "virtual-host",\n                icon_status: IconStatus.Up,\n                capital: "Khartoum",\n                continent: {\n                    name: "Africa",\n                },\n                currency: "SDG",\n                languages: [\n                    {\n                        name: "Arabic",\n                    },\n                    {\n                        name: "English",\n                    },\n                ],\n            },\n            {\n                name: "Sweden",\n                code: "SE",\n                icon: "virtual-host",\n                icon_status: IconStatus.Up,\n                capital: "Stockholm",\n                continent: {\n                    name: "Europe",\n                },\n                currency: "SEK",\n                languages: [\n                    {\n                        name: "Swedish",\n                    },\n                ],\n            },\n            {\n                name: "Singapore",\n                code: "SG",\n                icon: "virtual-host",\n                icon_status: IconStatus.Up,\n                capital: "Singapore",\n                continent: {\n                    name: "Asia",\n                },\n                currency: "SGD",\n                languages: [\n                    {\n                        name: "English",\n                    },\n                    {\n                        name: "Malay",\n                    },\n                    {\n                        name: "Tamil",\n                    },\n                    {\n                        name: "Chinese",\n                    },\n                ],\n            },\n            {\n                name: "Saint Helena",\n                code: "SH",\n                icon: "virtual-host",\n                icon_status: IconStatus.Up,\n                capital: "Jamestown",\n                continent: {\n                    name: "Africa",\n                },\n                currency: "SHP",\n                languages: [\n                    {\n                        name: "English",\n                    },\n                ],\n            },\n            {\n                name: "Slovenia",\n                code: "SI",\n                icon: "virtual-host",\n                icon_status: IconStatus.Up,\n                capital: "Ljubljana",\n                continent: {\n                    name: "Europe",\n                },\n                currency: "EUR",\n                languages: [\n                    {\n                        name: "Slovenian",\n                    },\n                ],\n            },\n            {\n                name: "Svalbard and Jan Mayen",\n                code: "SJ",\n                icon: "virtual-host",\n                icon_status: IconStatus.Up,\n                capital: "Longyearbyen",\n                continent: {\n                    name: "Europe",\n                },\n                currency: "NOK",\n                languages: [\n                    {\n                        name: "Norwegian",\n                    },\n                ],\n            },\n            {\n                name: "Slovakia",\n                code: "SK",\n                icon: "virtual-host",\n                icon_status: IconStatus.Up,\n                capital: "Bratislava",\n                continent: {\n                    name: "Europe",\n                },\n                currency: "EUR",\n                languages: [\n                    {\n                        name: "Slovak",\n                    },\n                ],\n            },\n            {\n                name: "Sierra Leone",\n                code: "SL",\n                icon: "virtual-host",\n                icon_status: IconStatus.Up,\n                capital: "Freetown",\n                continent: {\n                    name: "Africa",\n                },\n                currency: "SLL",\n                languages: [\n                    {\n                        name: "English",\n                    },\n                ],\n            },\n            {\n                name: "San Marino",\n                code: "SM",\n                icon: "virtual-host",\n                icon_status: IconStatus.Up,\n                capital: "City of San Marino",\n                continent: {\n                    name: "Europe",\n                },\n                currency: "EUR",\n                languages: [\n                    {\n                        name: "Italian",\n                    },\n                ],\n            },\n            {\n                name: "Senegal",\n                code: "SN",\n                icon: "virtual-host",\n                icon_status: IconStatus.Up,\n                capital: "Dakar",\n                continent: {\n                    name: "Africa",\n                },\n                currency: "XOF",\n                languages: [\n                    {\n                        name: "French",\n                    },\n                ],\n            },\n            {\n                name: "Somalia",\n                code: "SO",\n                icon: "virtual-host",\n                icon_status: IconStatus.Up,\n                capital: "Mogadishu",\n                continent: {\n                    name: "Africa",\n                },\n                currency: "SOS",\n                languages: [\n                    {\n                        name: "Somalia",\n                    },\n                    {\n                        name: "Arabic",\n                    },\n                ],\n            },\n            {\n                name: "Suriname",\n                code: "SR",\n                icon: "virtual-host",\n                icon_status: IconStatus.Up,\n                capital: "Paramaribo",\n                continent: {\n                    name: "South America",\n                },\n                currency: "SRD",\n                languages: [\n                    {\n                        name: "Dutch",\n                    },\n                ],\n            },\n            {\n                name: "South Sudan",\n                code: "SS",\n                icon: "virtual-host",\n                icon_status: IconStatus.Up,\n                capital: "Juba",\n                continent: {\n                    name: "Africa",\n                },\n                currency: "SSP",\n                languages: [\n                    {\n                        name: "English",\n                    },\n                ],\n            },\n            {\n                name: "S\xe3o Tom\xe9 and Pr\xedncipe",\n                code: "ST",\n                icon: "virtual-host",\n                icon_status: IconStatus.Up,\n                capital: "S\xe3o Tom\xe9",\n                continent: {\n                    name: "Africa",\n                },\n                currency: "STN",\n                languages: [\n                    {\n                        name: "Portuguese",\n                    },\n                ],\n            },\n            {\n                name: "El Salvador",\n                code: "SV",\n                icon: "virtual-host",\n                icon_status: IconStatus.Up,\n                capital: "San Salvador",\n                continent: {\n                    name: "North America",\n                },\n                currency: "SVC,USD",\n                languages: [\n                    {\n                        name: "Spanish",\n                    },\n                ],\n            },\n            {\n                name: "Sint Maarten",\n                code: "SX",\n                icon: "virtual-host",\n                icon_status: IconStatus.Up,\n                capital: "Philipsburg",\n                continent: {\n                    name: "North America",\n                },\n                currency: "ANG",\n                languages: [\n                    {\n                        name: "Dutch",\n                    },\n                    {\n                        name: "English",\n                    },\n                ],\n            },\n            {\n                name: "Syria",\n                code: "SY",\n                icon: "virtual-host",\n                icon_status: IconStatus.Up,\n                capital: "Damascus",\n                continent: {\n                    name: "Asia",\n                },\n                currency: "SYP",\n                languages: [\n                    {\n                        name: "Arabic",\n                    },\n                ],\n            },\n            {\n                name: "Swaziland",\n                code: "SZ",\n                icon: "virtual-host",\n                icon_status: IconStatus.Up,\n                capital: "Lobamba",\n                continent: {\n                    name: "Africa",\n                },\n                currency: "SZL",\n                languages: [\n                    {\n                        name: "English",\n                    },\n                    {\n                        name: "Swati",\n                    },\n                ],\n            },\n            {\n                name: "Turks and Caicos Islands",\n                code: "TC",\n                icon: "virtual-host",\n                icon_status: IconStatus.Up,\n                capital: "Cockburn Town",\n                continent: {\n                    name: "North America",\n                },\n                currency: "USD",\n                languages: [\n                    {\n                        name: "English",\n                    },\n                ],\n            },\n            {\n                name: "Chad",\n                code: "TD",\n                icon: "virtual-host",\n                icon_status: IconStatus.Up,\n                capital: "N\'Djamena",\n                continent: {\n                    name: "Africa",\n                },\n                currency: "XAF",\n                languages: [\n                    {\n                        name: "French",\n                    },\n                    {\n                        name: "Arabic",\n                    },\n                ],\n            },\n            {\n                name: "French Southern Territories",\n                code: "TF",\n                icon: "virtual-host",\n                icon_status: IconStatus.Up,\n                capital: "Port-aux-Fran\xe7ais",\n                continent: {\n                    name: "Antarctica",\n                },\n                currency: "EUR",\n                languages: [\n                    {\n                        name: "French",\n                    },\n                ],\n            },\n            {\n                name: "Togo",\n                code: "TG",\n                icon: "virtual-host",\n                icon_status: IconStatus.Up,\n                capital: "Lom\xe9",\n                continent: {\n                    name: "Africa",\n                },\n                currency: "XOF",\n                languages: [\n                    {\n                        name: "French",\n                    },\n                ],\n            },\n            {\n                name: "Thailand",\n                code: "TH",\n                icon: "virtual-host",\n                icon_status: IconStatus.Up,\n                capital: "Bangkok",\n                continent: {\n                    name: "Asia",\n                },\n                currency: "THB",\n                languages: [\n                    {\n                        name: "Thai",\n                    },\n                ],\n            },\n            {\n                name: "Tajikistan",\n                code: "TJ",\n                icon: "virtual-host",\n                icon_status: IconStatus.Up,\n                capital: "Dushanbe",\n                continent: {\n                    name: "Asia",\n                },\n                currency: "TJS",\n                languages: [\n                    {\n                        name: "Tajik",\n                    },\n                    {\n                        name: "Russian",\n                    },\n                ],\n            },\n            {\n                name: "Tokelau",\n                code: "TK",\n                icon: "virtual-host",\n                icon_status: IconStatus.Up,\n                capital: "Fakaofo",\n                continent: {\n                    name: "Oceania",\n                },\n                currency: "NZD",\n                languages: [\n                    {\n                        name: "English",\n                    },\n                ],\n            },\n            {\n                name: "East Timor",\n                code: "TL",\n                icon: "virtual-host",\n                icon_status: IconStatus.Up,\n                capital: "Dili",\n                continent: {\n                    name: "Oceania",\n                },\n                currency: "USD",\n                languages: [\n                    {\n                        name: "Portuguese",\n                    },\n                ],\n            },\n            {\n                name: "Turkmenistan",\n                code: "TM",\n                icon: "virtual-host",\n                icon_status: IconStatus.Up,\n                capital: "Ashgabat",\n                continent: {\n                    name: "Asia",\n                },\n                currency: "TMT",\n                languages: [\n                    {\n                        name: "Turkmen",\n                    },\n                    {\n                        name: "Russian",\n                    },\n                ],\n            },\n            {\n                name: "Tunisia",\n                code: "TN",\n                icon: "virtual-host",\n                icon_status: IconStatus.Up,\n                capital: "Tunis",\n                continent: {\n                    name: "Africa",\n                },\n                currency: "TND",\n                languages: [\n                    {\n                        name: "Arabic",\n                    },\n                ],\n            },\n            {\n                name: "Tonga",\n                code: "TO",\n                icon: "virtual-host",\n                icon_status: IconStatus.Up,\n                capital: "Nuku\'alofa",\n                continent: {\n                    name: "Oceania",\n                },\n                currency: "TOP",\n                languages: [\n                    {\n                        name: "English",\n                    },\n                    {\n                        name: "Tonga",\n                    },\n                ],\n            },\n            {\n                name: "Turkey",\n                code: "TR",\n                icon: "virtual-host",\n                icon_status: IconStatus.Up,\n                capital: "Ankara",\n                continent: {\n                    name: "Asia",\n                },\n                currency: "TRY",\n                languages: [\n                    {\n                        name: "Turkish",\n                    },\n                ],\n            },\n            {\n                name: "Trinidad and Tobago",\n                code: "TT",\n                icon: "virtual-host",\n                icon_status: IconStatus.Up,\n                capital: "Port of Spain",\n                continent: {\n                    name: "North America",\n                },\n                currency: "TTD",\n                languages: [\n                    {\n                        name: "English",\n                    },\n                ],\n            },\n            {\n                name: "Tuvalu",\n                code: "TV",\n                icon: "virtual-host",\n                icon_status: IconStatus.Up,\n                capital: "Funafuti",\n                continent: {\n                    name: "Oceania",\n                },\n                currency: "AUD",\n                languages: [\n                    {\n                        name: "English",\n                    },\n                ],\n            },\n            {\n                name: "Taiwan",\n                code: "TW",\n                icon: "virtual-host",\n                icon_status: IconStatus.Up,\n                capital: "Taipei",\n                continent: {\n                    name: "Asia",\n                },\n                currency: "TWD",\n                languages: [\n                    {\n                        name: "Chinese",\n                    },\n                ],\n            },\n            {\n                name: "Tanzania",\n                code: "TZ",\n                icon: "virtual-host",\n                icon_status: IconStatus.Up,\n                capital: "Dodoma",\n                continent: {\n                    name: "Africa",\n                },\n                currency: "TZS",\n                languages: [\n                    {\n                        name: "Swahili",\n                    },\n                    {\n                        name: "English",\n                    },\n                ],\n            },\n            {\n                name: "Ukraine",\n                code: "UA",\n                icon: "virtual-host",\n                icon_status: IconStatus.Up,\n                capital: "Kyiv",\n                continent: {\n                    name: "Europe",\n                },\n                currency: "UAH",\n                languages: [\n                    {\n                        name: "Ukrainian",\n                    },\n                ],\n            },\n            {\n                name: "Uganda",\n                code: "UG",\n                icon: "virtual-host",\n                icon_status: IconStatus.Up,\n                capital: "Kampala",\n                continent: {\n                    name: "Africa",\n                },\n                currency: "UGX",\n                languages: [\n                    {\n                        name: "English",\n                    },\n                    {\n                        name: "Swahili",\n                    },\n                ],\n            },\n            {\n                name: "U.S. Minor Outlying Islands",\n                code: "UM",\n                icon: "virtual-host",\n                icon_status: IconStatus.Up,\n                capital: null,\n                continent: {\n                    name: "Oceania",\n                },\n                currency: "USD",\n                languages: [\n                    {\n                        name: "English",\n                    },\n                ],\n            },\n            {\n                name: "United States",\n                code: "US",\n                icon: "virtual-host",\n                icon_status: IconStatus.Up,\n                capital: "Washington D.C.",\n                continent: {\n                    name: "North America",\n                },\n                currency: "USD,USN,USS",\n                languages: [\n                    {\n                        name: "English",\n                    },\n                ],\n            },\n            {\n                name: "Uruguay",\n                code: "UY",\n                icon: "virtual-host",\n                icon_status: IconStatus.Up,\n                capital: "Montevideo",\n                continent: {\n                    name: "South America",\n                },\n                currency: "UYI,UYU",\n                languages: [\n                    {\n                        name: "Spanish",\n                    },\n                ],\n            },\n            {\n                name: "Uzbekistan",\n                code: "UZ",\n                icon: "virtual-host",\n                icon_status: IconStatus.Up,\n                capital: "Tashkent",\n                continent: {\n                    name: "Asia",\n                },\n                currency: "UZS",\n                languages: [\n                    {\n                        name: "Uzbek",\n                    },\n                    {\n                        name: "Russian",\n                    },\n                ],\n            },\n            {\n                name: "Vatican City",\n                code: "VA",\n                icon: "virtual-host",\n                icon_status: IconStatus.Up,\n                capital: "Vatican City",\n                continent: {\n                    name: "Europe",\n                },\n                currency: "EUR",\n                languages: [\n                    {\n                        name: "Italian",\n                    },\n                    {\n                        name: "Latin",\n                    },\n                ],\n            },\n            {\n                name: "Saint Vincent and the Grenadines",\n                code: "VC",\n                icon: "virtual-host",\n                icon_status: IconStatus.Up,\n                capital: "Kingstown",\n                continent: {\n                    name: "North America",\n                },\n                currency: "XCD",\n                languages: [\n                    {\n                        name: "English",\n                    },\n                ],\n            },\n            {\n                name: "Venezuela",\n                code: "VE",\n                icon: "virtual-host",\n                icon_status: IconStatus.Up,\n                capital: "Caracas",\n                continent: {\n                    name: "South America",\n                },\n                currency: "VES",\n                languages: [\n                    {\n                        name: "Spanish",\n                    },\n                ],\n            },\n            {\n                name: "British Virgin Islands",\n                code: "VG",\n                icon: "virtual-host",\n                icon_status: IconStatus.Up,\n                capital: "Road Town",\n                continent: {\n                    name: "North America",\n                },\n                currency: "USD",\n                languages: [\n                    {\n                        name: "English",\n                    },\n                ],\n            },\n            {\n                name: "U.S. Virgin Islands",\n                code: "VI",\n                icon: "virtual-host",\n                icon_status: IconStatus.Up,\n                capital: "Charlotte Amalie",\n                continent: {\n                    name: "North America",\n                },\n                currency: "USD",\n                languages: [\n                    {\n                        name: "English",\n                    },\n                ],\n            },\n            {\n                name: "Vietnam",\n                code: "VN",\n                icon: "virtual-host",\n                icon_status: IconStatus.Up,\n                capital: "Hanoi",\n                continent: {\n                    name: "Asia",\n                },\n                currency: "VND",\n                languages: [\n                    {\n                        name: "Vietnamese",\n                    },\n                ],\n            },\n            {\n                name: "Vanuatu",\n                code: "VU",\n                icon: "virtual-host",\n                icon_status: IconStatus.Up,\n                capital: "Port Vila",\n                continent: {\n                    name: "Oceania",\n                },\n                currency: "VUV",\n                languages: [\n                    {\n                        name: "Bislama",\n                    },\n                    {\n                        name: "English",\n                    },\n                    {\n                        name: "French",\n                    },\n                ],\n            },\n            {\n                name: "Wallis and Futuna",\n                code: "WF",\n                icon: "virtual-host",\n                icon_status: IconStatus.Up,\n                capital: "Mata-Utu",\n                continent: {\n                    name: "Oceania",\n                },\n                currency: "XPF",\n                languages: [\n                    {\n                        name: "French",\n                    },\n                ],\n            },\n            {\n                name: "Samoa",\n                code: "WS",\n                icon: "virtual-host",\n                icon_status: IconStatus.Up,\n                capital: "Apia",\n                continent: {\n                    name: "Oceania",\n                },\n                currency: "WST",\n                languages: [\n                    {\n                        name: "Samoan",\n                    },\n                    {\n                        name: "English",\n                    },\n                ],\n            },\n            {\n                name: "Kosovo",\n                code: "XK",\n                icon: "virtual-host",\n                icon_status: IconStatus.Up,\n                capital: "Pristina",\n                continent: {\n                    name: "Europe",\n                },\n                currency: "EUR",\n                languages: [\n                    {\n                        name: "Albanian",\n                    },\n                    {\n                        name: "Serbian",\n                    },\n                ],\n            },\n            {\n                name: "Yemen",\n                code: "YE",\n                icon: "virtual-host",\n                icon_status: IconStatus.Up,\n                capital: "Sana\'a",\n                continent: {\n                    name: "Asia",\n                },\n                currency: "YER",\n                languages: [\n                    {\n                        name: "Arabic",\n                    },\n                ],\n            },\n            {\n                name: "Mayotte",\n                code: "YT",\n                icon: "virtual-host",\n                icon_status: IconStatus.Up,\n                capital: "Mamoudzou",\n                continent: {\n                    name: "Africa",\n                },\n                currency: "EUR",\n                languages: [\n                    {\n                        name: "French",\n                    },\n                ],\n            },\n            {\n                name: "South Africa",\n                code: "ZA",\n                icon: "virtual-host",\n                icon_status: IconStatus.Up,\n                capital: "Pretoria",\n                continent: {\n                    name: "Africa",\n                },\n                currency: "ZAR",\n                languages: [\n                    {\n                        name: "Afrikaans",\n                    },\n                    {\n                        name: "English",\n                    },\n                    {\n                        name: "South Ndebele",\n                    },\n                    {\n                        name: "Southern Sotho",\n                    },\n                    {\n                        name: "Swati",\n                    },\n                    {\n                        name: "Tswana",\n                    },\n                    {\n                        name: "Tsonga",\n                    },\n                    {\n                        name: "Venda",\n                    },\n                    {\n                        name: "Xhosa",\n                    },\n                    {\n                        name: "Zulu",\n                    },\n                ],\n            },\n            {\n                name: "Zambia",\n                code: "ZM",\n                icon: "virtual-host",\n                icon_status: IconStatus.Up,\n                capital: "Lusaka",\n                continent: {\n                    name: "Africa",\n                },\n                currency: "ZMW",\n                languages: [\n                    {\n                        name: "English",\n                    },\n                ],\n            },\n            {\n                name: "Zimbabwe",\n                code: "ZW",\n                icon: "virtual-host",\n                icon_status: IconStatus.Up,\n                capital: "Harare",\n                continent: {\n                    name: "Africa",\n                },\n                currency: "USD,ZAR,BWP,GBP,AUD,CNY,INR,JPY",\n                languages: [\n                    {\n                        name: "English",\n                    },\n                    {\n                        name: "Shona",\n                    },\n                    {\n                        name: "North Ndebele",\n                    },\n                ],\n            },\n        ],\n    },\n};\n'},38038:(o,e,n)=>{"use strict";n.r(e),n.d(e,{default:()=>t});const t='<div class="my-3 d-flex align-items-center">\n    <nui-switch class="ml-3" [(value)]="editMode" i18n> Edit Mode </nui-switch>\n    <button\n        *ngIf="!dashboard?.widgets[\'embeddedContentWidgetId\']"\n        type="button"\n        displayStyle="action"\n        (click)="reInitializeDashboard()"\n        nui-button\n    >\n        Restore Widget\n    </button>\n</div>\n\n<div class="w-100 dashboard">\n    \x3c!--\n        Note: The dashboard and gridsterConfig input assignments must use banana-in-a-box notation to keep\n        the dashboard state updated with changes to the pizzagna.\n    --\x3e\n    <nui-dashboard\n        *ngIf="dashboard"\n        [(dashboard)]="dashboard"\n        [(gridsterConfig)]="gridsterConfig"\n        [editMode]="editMode"\n        nuiWidgetEditor\n    >\n    </nui-dashboard>\n</div>\n'},13158:(o,e,n)=>{"use strict";n.r(e),n.d(e,{default:()=>t});const t=".dashboard {\n    height: 700px;\n}\n"},48834:(o,e,n)=>{"use strict";n.r(e),n.d(e,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport { HttpClient } from "@angular/common/http";\nimport {\n    ChangeDetectorRef,\n    Component,\n    Injectable,\n    OnDestroy,\n    OnInit,\n} from "@angular/core";\nimport { GridsterConfig, GridsterItem } from "angular-gridster2";\nimport { Apollo, gql } from "apollo-angular";\nimport groupBy from "lodash/groupBy";\nimport { BehaviorSubject, Observable, of } from "rxjs";\nimport { catchError, delay, filter, map } from "rxjs/operators";\n\nimport {\n    DataSourceFeatures,\n    IconStatus,\n    IDataField,\n    IDataSource,\n    IDataSourceFeatures,\n    IDataSourceFeaturesConfiguration,\n    INovaFilters,\n    LoggerService,\n    ServerSideDataSource,\n    IFilters,\n} from "@nova-ui/bits";\nimport {\n    DATA_SOURCE,\n    DEFAULT_PIZZAGNA_ROOT,\n    IDashboard,\n    IDrilldownComponentsConfiguration,\n    IListWidgetConfiguration,\n    IProviderConfiguration,\n    IWidget,\n    IWidgets,\n    ListGroupItemComponent,\n    ListLeafItemComponent,\n    NOVA_DRILLDOWN_DATASOURCE_ADAPTER,\n    PizzagnaLayer,\n    ProviderRegistryService,\n    WellKnownPathKey,\n    WellKnownProviders,\n    WidgetTypesService,\n} from "@nova-ui/dashboards";\n\nimport { APOLLO_API_NAMESPACE } from "../../../types";\nimport { DrilldownDataSource } from "./mock-data-source";\n\n/**\n * A simple KPI data source to retrieve the average rating of Harry Potter and the Sorcerer\'s Stone (book) via googleapis\n */\n@Injectable()\nexport class DrilldownDataSourceRealApi<T = any>\n    extends ServerSideDataSource<T>\n    implements OnDestroy, IDataSource\n{\n    // This is the ID we\'ll use to identify the provider\n    public static providerId = "DrilldownDataSourceRealApi";\n\n    // Use this subject to communicate the data source\'s busy state\n    public busy = new BehaviorSubject<boolean>(false);\n    public dataFields: Partial<IDataField>[] = [\n        { id: "regionName", label: "Region name" },\n        { id: "subregionName", label: "Subregion name" },\n    ];\n\n    public features: IDataSourceFeaturesConfiguration;\n    private supportedFeatures: IDataSourceFeatures = {\n        search: { enabled: true },\n    };\n\n    private drillState: string[] = [];\n    private groupBy: string[];\n\n    constructor(\n        private logger: LoggerService,\n        private http: HttpClient,\n        private apollo: Apollo\n    ) {\n        super();\n        this.features = new DataSourceFeatures(this.supportedFeatures);\n        // TODO: remove Partial in vNext after marking dataType field as optional - NUI-5838\n        (\n            this.dataFieldsConfig.dataFields$ as BehaviorSubject<\n                Partial<IDataField>[]\n            >\n        ).next(this.dataFields);\n    }\n\n    private groupedDataHistory: Array<Record<string, T[]>> = [];\n\n    // In this example, getFilteredData is invoked every 10 minutes (Take a look at the refresher\n    // provider definition in the widget configuration below to see how the interval is set)\n    public async getFilteredData(data: IFilters): Promise<any> {\n        return of(data)\n            .pipe(\n                filter(() => !!this.drillState),\n                map((countries) => {\n                    const lastHistory = () => getLast(this.groupedDataHistory);\n\n                    if (!this.drillState.length && !this.groupBy.length) {\n                        return countries;\n                    }\n\n                    // adding "ROOT" as a root level for drilling\n                    const fullDrillState = ["ROOT", ...this.drillState];\n                    const activeDrillLvl = fullDrillState.length;\n                    const historyLvl = this.groupedDataHistory.length;\n\n                    // checking how many lvls we have to group for drilling, in case some are missed\n                    const drillLvlDiff = activeDrillLvl - historyLvl;\n\n                    if (!drillLvlDiff) {\n                        return lastHistory() || countries;\n                    }\n\n                    const drillToGroup = fullDrillState.slice(\n                        fullDrillState.length - drillLvlDiff\n                    );\n\n                    for (const drill of drillToGroup) {\n                        const drillIdx = fullDrillState.findIndex(\n                            (v) => v === drill\n                        );\n                        const group = this.groupBy[drillIdx];\n\n                        if (group) {\n                            const dataToGroup = lastHistory()\n                                ? lastHistory()[drill]\n                                : countries;\n                            const lastGroupedValue = groupBy(\n                                dataToGroup,\n                                group\n                            );\n\n                            this.groupedDataHistory.push(lastGroupedValue);\n                        }\n                    }\n\n                    // take last if we have all data grouped\n                    if (this.groupBy.length === this.drillState.length) {\n                        return lastHistory()[getLast(this.drillState)];\n                    }\n\n                    // get groping and transform to raw data format\n                    return this.getGroupsWidgetData(lastHistory());\n                })\n            )\n            .toPromise();\n    }\n\n    public ngOnDestroy(): void {\n        this.outputsSubject.complete();\n    }\n\n    // This method is expected to return all data needed for repeat/paginator/filterGroups in order to work.\n    // In case of custom filtering participants feel free to extend INovaFilteringOutputs.\n    protected getBackendData(filters: INovaFilters): Observable<any> {\n        const mainRequest = this.apollo.watchQuery<{ countries: any }>({\n            query: this.generateQuery(filters),\n        });\n\n        return mainRequest.valueChanges.pipe(\n            // mock delay\n            delay(300),\n            // data mapping, !DS specific!\n            map((res: any) => res.data.Country),\n            // adds mock icons to be displayed on leaf nodes !DS specific!\n            map((res: any[]) =>\n                res.map((v) => ({\n                    ...v,\n                    icon: "virtual-host",\n                    icon_status: IconStatus.Up,\n                    subregionName:\n                        v.subregion?.name || "No Subregion Specified",\n                    regionName:\n                        v.subregion?.region?.name || "No Region Specified",\n                }))\n            ),\n            catchError((e) => {\n                this.logger.error(e);\n                return of({} as any);\n            })\n        );\n    }\n\n    private generateQuery(filters: INovaFilters) {\n        const { search } = filters;\n        const searchValue = search?.value ?? "";\n\n        const queryString = `\n            query {\n                Country(filter: {\n                    OR: [\n                      { name_contains: "${searchValue}" },\n                      { capital_contains: "${searchValue}" }\n                    ],\n                }) {\n                    name\n                    capital\n                    population\n                    officialLanguages {\n                        name\n                    }\n                    currencies {\n                        name\n                    }\n                    subregion {\n                        name\n                        region {\n                            name\n                        }\n                    }\n                }\n            }\n        `;\n\n        return gql`\n            ${queryString}\n        `;\n    }\n\n    // Overrides default ServerSideDataSource.beforeApplyFilters implementation\n    // to save some filters that are used internally\n    // -- !DS specific\n    protected beforeApplyFilters(filters: INovaFilters): void {\n        this.busy.next(true);\n\n        this.drillState = filters.drillstate?.value;\n        this.groupBy = filters.group?.value;\n\n        if (this.isHome()) {\n            this.groupedDataHistory.length = 0;\n        }\n\n        if (this.isBack()) {\n            this.groupedDataHistory.length = this.groupedDataHistory.length - 1;\n        }\n\n        if (this.getFilters()["search"] && this.filterChanged("search")) {\n            this.groupedDataHistory.length = 0;\n        }\n    }\n\n    private getGroupsWidgetData(groupByObj: Record<string, T[]>) {\n        return Object.keys(groupByObj).map((property) => ({\n            id: property,\n            label: property,\n            // statuses that will be displayed on group item\n            statuses: [\n                { key: "virtual-host", value: groupByObj[property].length },\n                {\n                    key: "acknowledge",\n                    value: this.getPopulation(groupByObj[property]),\n                },\n            ],\n        }));\n    }\n\n    private isHome(): boolean {\n        return this.drillState?.length === 0;\n    }\n\n    private isBack(): boolean {\n        return (\n            this.groupedDataHistory?.length > this.drillState?.length &&\n            !this.isHome()\n        );\n    }\n\n    /**\n     * Gets population for the country(ies)\n     */\n    private getPopulation(countries: any[]) {\n        const totalPopulation = countries.reduce(\n            (acc, next) => (acc += next.population),\n            0\n        );\n        return `${totalPopulation * Math.pow(10, -3)} k`;\n    }\n}\n\n@Component({\n    selector: "drilldown-widget-example",\n    templateUrl: "./drilldown-widget-example.component.html",\n    styleUrls: ["./drilldown-widget-example.component.less"],\n})\nexport class DrilldownWidgetExampleComponent implements OnInit {\n    // This variable will hold all the data needed to define the layout and behavior of the widgets.\n    // Pass this to the dashboard component\'s dashboard input in the template.\n    public dashboard: IDashboard | undefined;\n\n    // Angular gridster requires a configuration object even if it\'s empty.\n    // Pass this to the dashboard component\'s gridsterConfig input in the template.\n    public gridsterConfig: GridsterConfig = {};\n\n    // Boolean passed as an input to the dashboard. When true, widgets can be moved, resized, removed, or edited\n    public editMode: boolean = false;\n\n    constructor(\n        // WidgetTypesService provides the widget\'s necessary structure information\n        private widgetTypesService: WidgetTypesService,\n        private providerRegistry: ProviderRegistryService,\n        private changeDetectorRef: ChangeDetectorRef\n    ) {}\n\n    public ngOnInit(): void {\n        // Registering the data source for injection into the KPI tile.\n        // Note: Each tile of a KPI widget is assigned its own instance of the data source\n        this.providerRegistry.setProviders({\n            [DrilldownDataSource.providerId]: {\n                provide: DATA_SOURCE,\n                useClass: DrilldownDataSource,\n                // Any dependencies that need to be injected into the provider must be listed here\n                deps: [HttpClient],\n            },\n            [DrilldownDataSourceRealApi.providerId]: {\n                provide: DATA_SOURCE,\n                useClass: DrilldownDataSourceRealApi,\n                // Any dependencies that need to be injected into the provider must be listed here\n                deps: [LoggerService, HttpClient, Apollo],\n            },\n        });\n\n        this.initializeDashboard();\n        const widgetTemplate = this.widgetTypesService.getWidgetType(\n            "drilldown",\n            1\n        );\n        this.widgetTypesService.setNode(\n            widgetTemplate,\n            "configurator",\n            WellKnownPathKey.DataSourceProviders,\n            [\n                DrilldownDataSourceRealApi.providerId,\n                DrilldownDataSource.providerId,\n            ]\n        );\n    }\n\n    public initializeDashboard(): void {\n        // We\'re using a static configuration object for this example, but this is where\n        // the widget\'s configuration could potentially be populated from a database\n        const drilldownWidget = widgetConfig;\n        const widgets: IWidgets = {\n            // Complete the widget with information coming from its type definition\n            [drilldownWidget.id]:\n                this.widgetTypesService.mergeWithWidgetType(drilldownWidget),\n        };\n\n        // Setting the widget dimensions and position (this is for gridster)\n        const positions: Record<string, GridsterItem> = {\n            [drilldownWidget.id]: {\n                cols: 10,\n                rows: 10,\n                y: 0,\n                x: 0,\n            },\n        };\n\n        // Finally, assigning the variables we created above to the dashboard\n        this.dashboard = { positions, widgets };\n    }\n\n    public reInitializeDashboard(): void {\n        // destroys the components and their providers so the dashboard can re init data\n        this.dashboard = undefined;\n        this.changeDetectorRef.detectChanges();\n\n        const adapterProperties =\n            widgetConfig.pizzagna[PizzagnaLayer.Configuration].listWidget\n                .providers?.adapter?.properties;\n\n        if (adapterProperties) {\n            adapterProperties.drillstate = [];\n        }\n\n        this.initializeDashboard();\n    }\n}\n\nconst widgetConfig: IWidget = {\n    id: "drilldown",\n    type: "drilldown",\n    pizzagna: {\n        [PizzagnaLayer.Configuration]: {\n            [DEFAULT_PIZZAGNA_ROOT]: {\n                providers: {\n                    [WellKnownProviders.DataSource]: {\n                        // Setting the data source providerId for the tile with id "kpi1"\n                        providerId: DrilldownDataSourceRealApi.providerId,\n                        properties: {},\n                    } as IProviderConfiguration,\n                },\n            },\n            header: {\n                properties: {\n                    title: "Drilldown Widget",\n                    subtitle: "Search is case sensitive!",\n                },\n            },\n            listWidget: {\n                providers: {\n                    [WellKnownProviders.Adapter]: {\n                        providerId: NOVA_DRILLDOWN_DATASOURCE_ADAPTER,\n                        properties: {\n                            // widget\n                            navigationBarId: "navigationBar",\n                            componentId: "listWidget",\n                            dataPath: "data",\n\n                            // adapter props\n                            drillstate: [],\n                            groupBy: ["regionName", "subregionName"],\n                            groups: ["regionName", "subregionName"],\n\n                            // components\n                            componentsConfig: {\n                                group: {\n                                    componentType:\n                                        ListGroupItemComponent.lateLoadKey,\n                                    properties: {\n                                        dataFieldIds: {\n                                            id: "id",\n                                            label: "label",\n                                            statuses: "statuses",\n                                        },\n                                    },\n                                    itemProperties: {\n                                        canNavigate: true,\n                                    },\n                                },\n                                leaf: {\n                                    componentType:\n                                        ListLeafItemComponent.lateLoadKey,\n                                    properties: {\n                                        dataFieldIds: {\n                                            icon: "icon",\n                                            status: "icon_status",\n                                            detailedUrl: "capital",\n                                            label: "name",\n                                        },\n                                    },\n                                    itemProperties: {\n                                        canNavigate: false,\n                                    },\n                                },\n                            } as IDrilldownComponentsConfiguration,\n                        },\n                    },\n                },\n                properties: {\n                    configuration: {\n                        // FORMAT:\n                        // componentType: ListLeafItemComponent.lateLoadKey,\n                        // properties: {\n                        //   dataFieldIds: {\n                        //     icon: "",\n                        //     status: "code",\n                        //     detailedUrl: "capital",\n                        //     label: "name",\n                        //   },\n                        // },\n                        //\n                    } as IListWidgetConfiguration,\n                },\n            },\n        },\n    },\n};\n\nconst getLast = (arr: any[]) => arr[arr.length - 1];\n'},35321:(o,e,n)=>{"use strict";n.r(e),n.d(e,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport { Injectable, OnDestroy } from "@angular/core";\nimport groupBy from "lodash/groupBy";\nimport { BehaviorSubject, Observable, of, Subject } from "rxjs";\nimport {\n    catchError,\n    delay,\n    finalize,\n    map,\n    // eslint-disable-next-line import/no-deprecated\n    switchMap,\n    tap,\n} from "rxjs/operators";\n\nimport {\n    DataSourceService,\n    IDataField,\n    IDataSource,\n    IFilters,\n    INovaFilters,\n} from "@nova-ui/bits";\n\nimport { GRAPH_DATA_MOCK } from "./data-mock";\n\n/**\n * A simple KPI data source to retrieve the average rating of Harry Potter and the Sorcerer\'s Stone (book) via googleapis\n */\n@Injectable()\nexport class DrilldownDataSource\n    extends DataSourceService<any>\n    implements IDataSource, OnDestroy\n{\n    // This is the ID we\'ll use to identify the provider\n    public static providerId = "DrilldownDataSource";\n\n    // Use this subject to communicate the data source\'s busy state\n    public busy = new BehaviorSubject<boolean>(false);\n    public dataFields: Partial<IDataField>[] = [\n        { id: "continent.name", label: "Continent name" },\n        { id: "currency", label: "Currency" },\n    ];\n\n    private drillState: string[] = [];\n    private groupBy: string[];\n    private cache: any;\n    private applyFilters$ = new Subject<IFilters>();\n\n    constructor() {\n        super();\n\n        // TODO: remove Partial in vNext after marking dataType field as optional - NUI-5838\n        (\n            this.dataFieldsConfig.dataFields$ as BehaviorSubject<\n                Partial<IDataField>[]\n            >\n        ).next(this.dataFields);\n\n        this.applyFilters$\n            // eslint-disable-next-line import/no-deprecated\n            .pipe(switchMap((filters) => this.getData(filters)))\n            .subscribe(async (res) => {\n                this.outputsSubject.next(await this.getFilteredData(res));\n            });\n    }\n\n    private groupedDataHistory: any[] = [];\n\n    // In this example, getFilteredData is invoked every 10 minutes (Take a look at the refresher\n    // provider definition in the widget configuration below to see how the interval is set)\n    public async getFilteredData(data: any): Promise<any> {\n        return of(data)\n            .pipe(\n                map((countries) => {\n                    const widgetInput = this.getOutput(countries);\n\n                    if (this.isDrillDown()) {\n                        const activeDrillLvl = this.drillState.length;\n                        const group = this.groupBy[activeDrillLvl];\n                        const [lastGroupedValue, groupedData] =\n                            this.getTransformedDataForGroup(widgetInput, group);\n\n                        this.groupedDataHistory.push(lastGroupedValue);\n\n                        return groupedData;\n                    }\n\n                    return widgetInput;\n                })\n            )\n            .toPromise();\n    }\n\n    public ngOnDestroy(): void {\n        this.outputsSubject.complete();\n    }\n\n    // redefine parent method\n    public async applyFilters(): Promise<void> {\n        this.applyFilters$.next(this.getFilters());\n    }\n\n    private getData(filters: INovaFilters): Observable<any> {\n        this.drillState = filters.drillstate?.value;\n        this.groupBy = filters.group?.value;\n\n        this.busy.next(true);\n\n        return of(this.cache || GRAPH_DATA_MOCK).pipe(\n            delay(1000),\n            tap((data) => (this.cache = data)),\n            map((data) => data.data.countries),\n            catchError((e) => of([])),\n            finalize(() => this.busy.next(false))\n        );\n    }\n\n    private getTransformedDataForGroup(data: any, groupName: string) {\n        const groupedDict = groupBy(data, groupName);\n        const dataArr = Object.keys(groupedDict).map((property) => ({\n            id: property,\n            label: property,\n            // TODO: apply groups mapping here\n            statuses: [\n                { key: "state_ok", value: groupedDict[property].length },\n                {\n                    key: "status_unreachable",\n                    value: generateNumberUpTo(100000),\n                },\n                { key: "status_warning", value: generateNumberUpTo(10000) },\n                { key: "status_unknown", value: generateNumberUpTo(1000) },\n            ],\n        }));\n\n        return [groupedDict, dataArr];\n    }\n\n    private isHome(): boolean {\n        return !this.drillState || this.drillState.length === 0;\n    }\n\n    private isBack(): boolean {\n        return (\n            this.groupedDataHistory.length > this.drillState?.length &&\n            !this.isHome()\n        );\n    }\n\n    private isDrillDown(): boolean {\n        return this.drillState?.length !== this.groupBy?.length;\n    }\n\n    private getOutput(data: any) {\n        if (this.isHome()) {\n            this.groupedDataHistory.length = 0;\n        }\n\n        if (this.isBack()) {\n            this.groupedDataHistory.length = this.groupedDataHistory.length - 1;\n        }\n\n        const lastHistoryValue = getLast(this.groupedDataHistory);\n\n        if (!lastHistoryValue) {\n            return data;\n        }\n\n        return lastHistoryValue[getLast(this.drillState)] || lastHistoryValue;\n    }\n}\n\nconst getLast = (arr: any[]) => arr[arr.length - 1];\nconst generateNumberUpTo = (upperLimit: number): number =>\n    Math.floor(Math.random() * upperLimit + 1);\n'},35085:(o,e,n)=>{"use strict";n.r(e),n.d(e,{default:()=>t});const t='<h1>Embedded Content Widget</h1>\n\n<p>\n    An Embedded Content Widget is used to embed content from an external site to\n    a widget. You can integrate the contents of another web page into your own\n    by two approaches: show the extract HTML or content of URL.\n</p>\n\n<nui-message type="info" [allowDismiss]="false">\n    For details on how to instantiate a Embedded Content Widget, take a look at\n    the inline comments under the source expander of the following example.\n</nui-message>\n<nui-example-wrapper\n    filenamePrefix="embedded-content-widget-example"\n    exampleTitle="Embedded Content widget"\n>\n    <embedded-content-widget-example></embedded-content-widget-example>\n</nui-example-wrapper>\n\n<h2>Widget Schema</h2>\n\n<p>\n    The code listings below are the source files for the Embedded Content Widget\n    definition with inline comments describing the parts that compose the\n    standard Embedded Content Widget type. It includes the widget\'s definition\n    as well as its corresponding configurator form for defining how to configure\n    (create/edit) the widget.\n</p>\n\n<h2>Widget</h2>\n\n<p>\n    This part shows the actual widget definition. It includes, among other\n    things, the components and providers that compose the widget itself.\n</p>\n\n<nui-example-code language="typescript">{{\n    embeddedContentWidgetFileText\n}}</nui-example-code>\n\n<h2>Configurator</h2>\n\n<p>\n    This part shows the form that\'s used for configuring (creating/editing) the\n    widget.\n</p>\n\n<nui-example-code language="typescript">{{\n    embeddedContentConfiguratorFileText\n}}</nui-example-code>\n'},89593:(o,e,n)=>{"use strict";n.r(e),n.d(e,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport { Component } from "@angular/core";\n\n@Component({\n    selector: "nui-embedded-content-docs",\n    templateUrl: "./embedded-content-docs.component.html",\n})\nexport class EmbeddedContentDocsComponent {\n    public embeddedContentWidgetFileText =\n        require("!!raw-loader!../../../../../../src/lib/widget-types/embedded-content/embedded-content-widget.ts")\n            .default;\n    // eslint-disable-next-line max-len\n    public embeddedContentConfiguratorFileText =\n        require("!!raw-loader!../../../../../../src/lib/widget-types/embedded-content/embedded-content-configurator.ts")\n            .default;\n}\n'},93132:(o,e,n)=>{"use strict";n.r(e),n.d(e,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport { NgModule } from "@angular/core";\nimport { RouterModule, Routes } from "@angular/router";\n\n// eslint-disable-next-line max-len\nimport {\n    NuiButtonModule,\n    NuiDocsModule,\n    NuiMessageModule,\n    NuiSwitchModule,\n    DEMO_PATH_TOKEN,\n} from "@nova-ui/bits";\nimport { NuiDashboardsModule } from "@nova-ui/dashboards";\n\nimport { getDemoFiles } from "../../../../demo-files-factory";\nimport { EmbeddedContentDocsComponent } from "./embedded-content-docs.component";\nimport { EmbeddedContentWidgetExampleComponent } from "./embedded-content-widget-example/embedded-content-widget-example.component";\n\nconst routes: Routes = [\n    {\n        path: "",\n        component: EmbeddedContentDocsComponent,\n        data: {\n            srlc: {\n                hideIndicator: true,\n            },\n        },\n    },\n    {\n        path: "example",\n        component: EmbeddedContentWidgetExampleComponent,\n        data: {\n            srlc: {\n                hideIndicator: true,\n            },\n        },\n    },\n];\n\n@NgModule({\n    imports: [\n        RouterModule.forChild(routes),\n        NuiButtonModule,\n        NuiDocsModule,\n        NuiMessageModule,\n        NuiDashboardsModule,\n        NuiSwitchModule,\n    ],\n    declarations: [\n        EmbeddedContentDocsComponent,\n        EmbeddedContentWidgetExampleComponent,\n    ],\n    providers: [\n        {\n            provide: DEMO_PATH_TOKEN,\n            useValue: getDemoFiles("embedded-content"),\n        },\n    ],\n})\nexport default class EmbeddedContentDocsModule {}\n'},41608:(o,e,n)=>{"use strict";n.r(e),n.d(e,{default:()=>t});const t='<div class="my-3 d-flex align-items-center">\n    <nui-switch class="ml-3" [(value)]="editMode" i18n> Edit Mode </nui-switch>\n    <button\n        *ngIf="!dashboard?.widgets[\'embeddedContentWidgetId\']"\n        type="button"\n        displayStyle="action"\n        (click)="reInitializeDashboard()"\n        nui-button\n    >\n        Restore Widget\n    </button>\n</div>\n\n<div class="w-100 dashboard">\n    \x3c!--\n        Note: The dashboard and gridsterConfig input assignments must use banana-in-a-box notation to keep\n        the dashboard state updated with changes to the pizzagna.\n    --\x3e\n    <nui-dashboard\n        *ngIf="dashboard"\n        [(dashboard)]="dashboard"\n        [(gridsterConfig)]="gridsterConfig"\n        [editMode]="editMode"\n        nuiWidgetEditor\n    >\n    </nui-dashboard>\n</div>\n'},15872:(o,e,n)=>{"use strict";n.r(e),n.d(e,{default:()=>t});const t=".dashboard {\n    height: 700px;\n}\n"},56952:(o,e,n)=>{"use strict";n.r(e),n.d(e,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport { ChangeDetectorRef, Component, OnInit } from "@angular/core";\nimport { GridsterConfig, GridsterItem } from "angular-gridster2";\n\nimport {\n    ComponentRegistryService,\n    EmbeddedContentComponent,\n    EmbeddedContentConfigurationComponent,\n    EmbeddedContentMode,\n    IDashboard,\n    IWidget,\n    IWidgets,\n    PizzagnaLayer,\n    WidgetTypesService,\n} from "@nova-ui/dashboards";\n\n@Component({\n    selector: "embedded-content-widget-example",\n    templateUrl: "./embedded-content-widget-example.component.html",\n    styleUrls: ["./embedded-content-widget-example.component.less"],\n})\nexport class EmbeddedContentWidgetExampleComponent implements OnInit {\n    // This variable will hold all the data needed to define the layout and behavior of the widgets.\n    // Pass this to the dashboard component\'s dashboard input in the template.\n    public dashboard: IDashboard | undefined;\n\n    // Angular gridster requires a configuration object even if it\'s empty.\n    // Pass this to the dashboard component\'s gridsterConfig input in the template.\n    public gridsterConfig: GridsterConfig = {};\n\n    // Boolean passed as an input to the dashboard. When true, widgets can be moved, resized, removed, or edited\n    public editMode: boolean = false;\n\n    constructor(\n        // WidgetTypesService provides the widget\'s necessary structure information\n        private widgetTypesService: WidgetTypesService,\n\n        private componentRegistry: ComponentRegistryService,\n        private changeDetectorRef: ChangeDetectorRef\n    ) {}\n\n    public ngOnInit(): void {\n        this.prepareNovaDashboards();\n        this.initializeDashboard();\n    }\n\n    /** Used for restoring widgets state */\n    public reInitializeDashboard(): void {\n        // destroys the components and their providers so the dashboard can re init data\n        this.dashboard = undefined;\n        this.changeDetectorRef.detectChanges();\n\n        this.initializeDashboard();\n    }\n\n    public initializeDashboard(): void {\n        // We\'re using a static configuration object for this example, but this is where\n        // the widget\'s configuration could potentially be populated from a database\n        const embeddedContentWidget = widgetConfig;\n        const widgets: IWidgets = {\n            // Complete the widget with information coming from its type definition\n            [embeddedContentWidget.id]:\n                this.widgetTypesService.mergeWithWidgetType(\n                    embeddedContentWidget\n                ),\n        };\n\n        // Setting the widget dimensions and position (this is for gridster)\n        const positions: Record<string, GridsterItem> = {\n            [embeddedContentWidget.id]: {\n                cols: 10,\n                rows: 10,\n                y: 0,\n                x: 0,\n            },\n        };\n\n        // Finally, assigning the variables we created above to the dashboard\n        this.dashboard = { positions, widgets };\n    }\n\n    private prepareNovaDashboards() {\n        this.componentRegistry.registerByLateLoadKey(EmbeddedContentComponent);\n        this.componentRegistry.registerByLateLoadKey(\n            EmbeddedContentConfigurationComponent\n        );\n    }\n}\n\nconst widgetConfig: IWidget = {\n    id: "embeddedContentWidgetId",\n    type: "embedded-content",\n    pizzagna: {\n        [PizzagnaLayer.Configuration]: {\n            header: {\n                properties: {\n                    title: "Embedded Content Widget",\n                    subtitle: "",\n                },\n            },\n            mainContent: {\n                properties: {\n                    sanitized: true,\n                    mode: EmbeddedContentMode.URL,\n                    customEmbeddedContent: "https://www.ventusky.com/",\n                },\n            },\n        },\n    },\n};\n'},21479:(o,e,n)=>{"use strict";n.r(e),n.d(e,{default:()=>t});const t='<h1>KPI Widget</h1>\n\n<p>\n    Key performance indicators (KPIs) are quantifiable measures designed to\n    track any metrics of a monitored system. The KPI widget displays the current\n    measurement of a KPI as a single numeric value and can display one or more\n    individual metrics within a single widget instance. It\'s useful for\n    highlighting and promoting easy comprehension of key metrics. Additionally,\n    each KPI within a widget instance can visualize associated thresholds via a\n    dynamic background color indicating whether a certain threshold has been\n    reached.\n</p>\n\n<nui-message type="info" [allowDismiss]="false">\n    For details on how to instantiate a KPI widget, take a look at the inline\n    comments under the source expander of the following example.\n</nui-message>\n<nui-example-wrapper filenamePrefix="kpi-widget" exampleTitle="KPI widget">\n    <kpi-widget-example></kpi-widget-example>\n</nui-example-wrapper>\n\n<h3>Interaction Handling</h3>\n<p>\n    The example below has the\n    <code\n        ><a href="../injectables/UrlInteractionHandler.html" target="_blank"\n            >UrlInteractionHandler</a\n        ></code\n    >\n    configured to handle the interactions that occur on the tile. Look at the\n    inline comments in the source expander to see how it is configured.\n</p>\n\n<nui-example-wrapper\n    filenamePrefix="kpi-widget-interactive"\n    exampleTitle="KPI with Interaction"\n>\n    <kpi-widget-interactive-example></kpi-widget-interactive-example>\n</nui-example-wrapper>\n\n<h2>Widget Schema</h2>\n\n<p>\n    The code listings below are the source files for the KPI widget definition\n    with inline comments describing the parts that compose the standard KPI\n    widget type. It includes the widget\'s definition as well as its\n    corresponding configurator form for defining how to configure (create/edit)\n    the widget.\n</p>\n\n<h2>Widget</h2>\n\n<p>\n    This part shows the actual widget definition. It includes, among other\n    things, the components and providers that compose the widget itself.\n</p>\n\n<nui-example-code language="typescript">{{\n    kpiWidgetFileText\n}}</nui-example-code>\n\n<h2>Configurator</h2>\n\n<p>\n    This part shows the form that\'s used for configuring (creating/editing) the\n    widget.\n</p>\n\n<nui-example-code language="typescript">{{\n    kpiConfiguratorFileText\n}}</nui-example-code>\n'},52607:(o,e,n)=>{"use strict";n.r(e),n.d(e,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport { Component } from "@angular/core";\n\n@Component({\n    selector: "nui-kpi-docs",\n    templateUrl: "./kpi-docs.component.html",\n})\nexport class KpiDocsComponent {\n    public kpiWidgetFileText =\n        require("!!raw-loader!../../../../../../src/lib/widget-types/kpi/kpi-widget.ts")\n            .default;\n    public kpiConfiguratorFileText =\n        require("!!raw-loader!../../../../../../src/lib/widget-types/kpi/kpi-configurator.ts")\n            .default;\n}\n'},5758:(o,e,n)=>{"use strict";n.r(e),n.d(e,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport { NgModule } from "@angular/core";\nimport { RouterModule, Routes } from "@angular/router";\n\nimport {\n    NuiButtonModule,\n    NuiDocsModule,\n    NuiMessageModule,\n    NuiSwitchModule,\n    DEMO_PATH_TOKEN,\n} from "@nova-ui/bits";\nimport {\n    KpiColorComparatorsRegistryService,\n    NuiDashboardsModule,\n} from "@nova-ui/dashboards";\n\nimport { getDemoFiles } from "../../../../demo-files-factory";\nimport { KpiWidgetBackgroundColorDocsComponent } from "./kpi-widget-background-color-docs.component";\nimport { KpiWidgetBackgroundColorExampleComponent } from "./kpi-widget-background-color/kpi-widget-background-color-example.component";\nimport { KpiDocsComponent } from "./kpi-docs.component";\nimport { KpiSyncBrokerDocsComponent } from "./kpi-sync-broker-docs.component";\nimport { KpiSyncBrokerExampleComponent } from "./kpi-sync-broker/kpi-sync-broker-example.component";\nimport { KpiSyncBrokerForAllTilesExampleComponent } from "./kpi-sync-broker-for-all-tiles/kpi-sync-broker-for-all-tiles-example.component";\nimport { KpiWidgetExampleComponent } from "./kpi-widget/kpi-widget-example.component";\nimport { KpiWidgetInteractiveExampleComponent } from "./kpi-widget-interactive/kpi-widget-interactive-example.component";\n\nconst routes: Routes = [\n    {\n        path: "",\n        component: KpiDocsComponent,\n        data: {\n            srlc: {\n                hideIndicator: true,\n            },\n            showThemeSwitcher: true,\n        },\n    },\n    {\n        path: "example",\n        component: KpiWidgetExampleComponent,\n        data: {\n            srlc: {\n                hideIndicator: true,\n            },\n        },\n    },\n    {\n        path: "background-color",\n        component: KpiWidgetBackgroundColorDocsComponent,\n        data: {\n            srlc: {\n                hideIndicator: true,\n            },\n        },\n    },\n    {\n        path: "sync-broker",\n        component: KpiSyncBrokerDocsComponent,\n        data: {\n            srlc: {\n                hideIndicator: true,\n            },\n        },\n    },\n];\n\n@NgModule({\n    imports: [\n        RouterModule.forChild(routes),\n        NuiButtonModule,\n        NuiDocsModule,\n        NuiMessageModule,\n        NuiDashboardsModule,\n        NuiSwitchModule,\n    ],\n    declarations: [\n        KpiDocsComponent,\n        KpiWidgetExampleComponent,\n        KpiWidgetInteractiveExampleComponent,\n        KpiWidgetBackgroundColorDocsComponent,\n        KpiWidgetBackgroundColorExampleComponent,\n        KpiSyncBrokerDocsComponent,\n        KpiSyncBrokerExampleComponent,\n        KpiSyncBrokerForAllTilesExampleComponent,\n    ],\n    providers: [\n        KpiColorComparatorsRegistryService,\n        {\n            provide: DEMO_PATH_TOKEN,\n            useValue: getDemoFiles("kpi"),\n        },\n    ],\n})\nexport default class KpiDocsModule {\n    constructor(\n        private comparatorsRegistry: KpiColorComparatorsRegistryService\n    ) {\n        this.backgroundColorDocsSetup();\n    }\n\n    private backgroundColorDocsSetup() {\n        this.comparatorsRegistry.registerComparators({\n            "!=": {\n                comparatorFn: (actual: any, reference: any) =>\n                    // eslint-disable-next-line eqeqeq\n                    actual != reference,\n                label: "Not equal",\n            },\n        });\n    }\n}\n'},66901:(o,e,n)=>{"use strict";n.r(e),n.d(e,{default:()=>t});const t='<h1>Syncing the Scale Values of the KPI tiles</h1>\n<p>\n    KPI widget may contain multiple tiles displaying different data which comes\n    from various data sources. It is often the case that the values are of\n    different sizes, and the ZoomDirective then takes care of fitting the big\n    values into the KPI tile container in case the values overflow it. This\n    results in KPI tiles values sized differently across the tiles of the same\n    KPI widget, which is not pretty.\n</p>\n\n<p>\n    <code>kpiScaleSyncBroker</code> provider solves this problem. This is a\n    special type of provider which works specifically with the KPI widgets to\n    sync the scale values of all, or some of the the KPI tiles values, like\n    <code>label</code>, <code>units</code>, and <code>value</code>\n    across all the tiles of the same widget.\n</p>\n\n<p>\n    To keep all the values of the KPI tiles in sync, add the\n    <code>kpiScaleSyncBroker</code> to your widget\'s\n    <code>tiles</code> configuration as a provider with the list of values to\n    sync. It is not mandatory to sync all of the values, you can only leave\n    some, in case you do not want to sync all three.\n    <nui-example-code language="typescript">\n        {{ kpiScaleSyncBroker }}\n    </nui-example-code>\n</p>\n\n<p>\n    In the example below, you can see that the widget on the right uses the sync\n    broker and gets its tiles values synchronized gradually, even if the data\n    comes with a significant delay.\n</p>\n\n<nui-example-wrapper filenamePrefix="kpi-sync-broker" exampleTitle="KPI widget">\n    <kpi-sync-broker-example></kpi-sync-broker-example>\n</nui-example-wrapper>\n\n<h1>Apply the Sync Broker for All KPI Widgets across the Dashboards</h1>\n\n<p>\n    The example above shows how to apply the <code>kpiScaleSyncBroker</code> to\n    only one widget in the configuration. What if we want to apply it to all the\n    KPI widgets on the entire dashboards? In this case it is possible to set the\n    sync broker for all KPI widgets on the dashboard to sync some values by\n    default. To do so consider adding the sync broker provider on the dashboard\n    setup and initialization step using the <code>widgetTypesService</code>,\n    like this:\n\n    <nui-example-code language="typescript">\n        {{ defineScaleBrokerOnDashboardSetup }}\n    </nui-example-code>\n</p>\n\n<p>\n    It is possible to override this setting later for each individual KPI widget\n    in the configuration by setting the sync broker provider and identifying the\n    needed value ids to sync the scale for.\n</p>\n\n<p>\n    On the example below you can see how all the KPI widget values, labels and\n    units scales have been synchronized, except of the last widget with no sync\n    for the tile value, because this was overridden in the configuration for\n    this particular widget to not keep the values sizes in sync.\n</p>\n\n<nui-example-wrapper\n    filenamePrefix="kpi-sync-broker-for-all-tiles"\n    exampleTitle="KPI widget"\n>\n    <kpi-sync-broker-for-all-tiles-example></kpi-sync-broker-for-all-tiles-example>\n</nui-example-wrapper>\n'},18833:(o,e,n)=>{"use strict";n.r(e),n.d(e,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport { Component } from "@angular/core";\n\n@Component({\n    selector: "kpi-sync-broker-docs",\n    templateUrl: "./kpi-sync-broker-docs.component.html",\n})\nexport class KpiSyncBrokerDocsComponent {\n    public kpiScaleSyncBroker = `\n"tiles": {\n    "providers": {\n        kpiScaleSyncBroker: {\n            providerId: NOVA_KPI_SCALE_SYNC_BROKER,\n            properties: {\n                scaleSyncConfig: [\n                    { id: "value" },\n                    { id: "label" },\n                    { id: "units" },\n                ],\n            },\n        },\n    },\n},\n`;\n\n    public defineScaleBrokerOnDashboardSetup = `\n// To add the sync broker globally to all the kpi tiles you may start with setting up the broker config\n// Here you define which values to keep in sync\nconst brokerConfig = {\n            providerId: NOVA_KPI_SCALE_SYNC_BROKER,\n            properties: {\n                scaleSyncConfig: [\n                    { id: "value" },\n                    { id: "label" },\n                    { id: "units" },\n                ],\n            },\n        };\n\n// And here is how you set the sync broker for every KPI widget in the dashboard.\n// Later, you will be able to override this setting for each separate KPI widget in the configuration (just like it is shown in the third\n// width of the example with the \'kpiWidgetId3\')\nthis.widgetTypesService.setNode(\n    widgetTemplate,\n    "widget",\n    "tiles.providers.kpiScaleSyncBroker",\n    brokerConfig\n);\n`;\n}\n'},24435:(o,e,n)=>{"use strict";n.r(e),n.d(e,{default:()=>t});const t='<div class="mb-2 d-flex align-items-center">\n    <nui-switch class="ml-3 py-2" [(value)]="editMode" i18n>\n        Edit Mode\n    </nui-switch>\n    <button\n        *ngIf="!dashboard?.widgets[\'kpiWidgetId\']"\n        type="button"\n        displayStyle="action"\n        (click)="reInitializeDashboard()"\n        nui-button\n    >\n        Restore Widget\n    </button>\n</div>\n\n<div class="w-100 dashboard">\n    \x3c!--\n        Note: The dashboard and gridsterConfig input assignments must use banana-in-a-box notation to keep\n        the dashboard state updated with changes to the pizzagna.\n    --\x3e\n    <nui-dashboard\n        *ngIf="dashboard"\n        [(dashboard)]="dashboard"\n        [editMode]="editMode"\n        [(gridsterConfig)]="gridsterConfig"\n        nuiWidgetEditor\n    >\n    </nui-dashboard>\n</div>\n'},33623:(o,e,n)=>{"use strict";n.r(e),n.d(e,{default:()=>t});const t=".dashboard {\n    height: 400px;\n}\n"},6379:(o,e,n)=>{"use strict";n.r(e),n.d(e,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport { HttpClient, HttpErrorResponse } from "@angular/common/http";\nimport {\n    ChangeDetectorRef,\n    Component,\n    Injectable,\n    OnDestroy,\n    OnInit,\n} from "@angular/core";\nimport { GridsterConfig, GridsterItem } from "angular-gridster2";\nimport keyBy from "lodash/keyBy";\nimport { BehaviorSubject, of } from "rxjs";\nimport { delay, finalize, take } from "rxjs/operators";\n\nimport { DataSourceService, IFilteringOutputs } from "@nova-ui/bits";\nimport {\n    DATA_SOURCE,\n    IDashboard,\n    IKpiData,\n    IProviderConfiguration,\n    IWidget,\n    KpiComponent,\n    NOVA_KPI_DATASOURCE_ADAPTER,\n    NOVA_KPI_SCALE_SYNC_BROKER,\n    PizzagnaLayer,\n    ProviderRegistryService,\n    WellKnownPathKey,\n    WellKnownProviders,\n    WidgetTypesService,\n} from "@nova-ui/dashboards";\n\n/**\n * A simple KPI data source to retrieve the average rating of Harry Potter and the Sorcerer\'s Stone (book) via googleapis\n */\n@Injectable()\nexport class AverageRatingKpiDataSource\n    extends DataSourceService<IKpiData>\n    implements OnDestroy\n{\n    public static providerId = "AverageRatingKpiDataSource";\n    public busy = new BehaviorSubject<boolean>(false);\n\n    constructor(private http: HttpClient) {\n        super();\n    }\n\n    public async getFilteredData(): Promise<IFilteringOutputs> {\n        this.busy.next(true);\n        return new Promise((resolve) => {\n            // *** Make a resource request to an external API (if needed)\n            this.http\n                .get("https://www.googleapis.com/books/v1/volumes/5MQFrgEACAAJ")\n                .pipe(finalize(() => this.busy.next(false)))\n                .subscribe({\n                    next: (data: any) => {\n                        resolve({\n                            result: {\n                                value: data.volumeInfo.averageRating,\n                            },\n                        });\n                    },\n                    error: (error: HttpErrorResponse) => {\n                        resolve({\n                            result: null,\n                            error: {\n                                type: error.status,\n                            },\n                        });\n                    },\n                });\n        });\n    }\n\n    public ngOnDestroy(): void {\n        this.outputsSubject.complete();\n    }\n}\n\n/**\n * A simple KPI data source to retrieve the ratings count of Harry Potter and the Sorcerer\'s Stone (book) via googleapis\n */\n@Injectable()\nexport class RatingsCountKpiDataSource\n    extends DataSourceService<IKpiData>\n    implements OnDestroy\n{\n    public static providerId = "RatingsCountKpiDataSource";\n\n    // Use this subject to communicate the data source\'s busy state\n    public busy = new BehaviorSubject<boolean>(false);\n\n    constructor(private http: HttpClient) {\n        super();\n    }\n\n    public async getFilteredData(): Promise<IFilteringOutputs> {\n        this.busy.next(true);\n        return new Promise((resolve) => {\n            this.http\n                .get("https://www.googleapis.com/books/v1/volumes/5MQFrgEACAAJ")\n                .pipe(\n                    delay(2000),\n                    finalize(() => this.busy.next(false))\n                )\n                .subscribe({\n                    next: (data: any) => {\n                        resolve({\n                            result: {\n                                value: data.volumeInfo.ratingsCount,\n                            },\n                        });\n                    },\n                    error: (error: HttpErrorResponse) => {\n                        resolve({\n                            result: null,\n                            error: {\n                                type: error.status,\n                            },\n                        });\n                    },\n                });\n        });\n    }\n\n    public ngOnDestroy(): void {\n        this.outputsSubject.complete();\n    }\n}\n/**\n * A simple KPI data source to retrieve the ratings count of Harry Potter and the Sorcerer\'s Stone (book) via googleapis\n */\n@Injectable()\nexport class MockKpiDataSource\n    extends DataSourceService<IKpiData>\n    implements OnDestroy\n{\n    public static providerId = "MockKpiDataSource";\n\n    // Use this subject to communicate the data source\'s busy state\n    public busy = new BehaviorSubject<boolean>(false);\n    public value: number = 3381342;\n\n    constructor() {\n        super();\n    }\n\n    public async getFilteredData(): Promise<IFilteringOutputs> {\n        this.busy.next(true);\n        return new Promise((resolve) => {\n            of(this.value)\n                .pipe(\n                    delay(5000),\n                    take(1),\n                    finalize(() => this.busy.next(false))\n                )\n                .subscribe({\n                    next: (data: any) => {\n                        resolve({\n                            result: {\n                                value: data,\n                            },\n                        });\n                    },\n                });\n        });\n    }\n\n    public ngOnDestroy(): void {\n        this.outputsSubject.complete();\n    }\n}\n\n/**\n * A component that instantiates the dashboard\n */\n@Component({\n    selector: "kpi-sync-broker-for-all-tiles-example",\n    templateUrl: "./kpi-sync-broker-for-all-tiles-example.component.html",\n    styleUrls: ["./kpi-sync-broker-for-all-tiles-example.component.less"],\n})\nexport class KpiSyncBrokerForAllTilesExampleComponent implements OnInit {\n    public dashboard: IDashboard | undefined;\n    public gridsterConfig: GridsterConfig = {};\n    public editMode: boolean = false;\n\n    constructor(\n        private widgetTypesService: WidgetTypesService,\n        private providerRegistry: ProviderRegistryService,\n        private changeDetectorRef: ChangeDetectorRef\n    ) {}\n\n    public ngOnInit(): void {\n        this.setupDashboard();\n\n        this.initializeDashboard();\n    }\n\n    /** Used for restoring widgets state */\n    public reInitializeDashboard(): void {\n        // destroys the components and their providers so the dashboard can re init data\n        this.dashboard = undefined;\n        this.changeDetectorRef.detectChanges();\n\n        this.initializeDashboard();\n    }\n\n    private setupDashboard() {\n        // To add the sync broker globally to all the kpi tiles you may start with setting up the broker config\n        // Here you define which values to keep in sync\n        const brokerConfig = {\n            providerId: NOVA_KPI_SCALE_SYNC_BROKER,\n            properties: {\n                scaleSyncConfig: [\n                    { id: "value" },\n                    { id: "label" },\n                    { id: "units" },\n                ],\n            },\n        };\n        const widgetTemplate = this.widgetTypesService.getWidgetType("kpi", 1);\n\n        this.widgetTypesService.setNode(\n            widgetTemplate,\n            "configurator",\n            WellKnownPathKey.DataSourceProviders,\n            [\n                AverageRatingKpiDataSource.providerId,\n                RatingsCountKpiDataSource.providerId,\n                MockKpiDataSource.providerId,\n            ]\n        );\n\n        // And here is how you set the sync broker for every KPI widget in the dashboard.\n        // Later, you will be able to override this setting for each separate KPI widget in the configuration (just like it is shown in the third\n        // width of the example with the \'kpiWidgetId3\')\n        this.widgetTypesService.setNode(\n            widgetTemplate,\n            "widget",\n            "tiles.providers.kpiScaleSyncBroker",\n            brokerConfig\n        );\n\n        this.providerRegistry.setProviders({\n            [AverageRatingKpiDataSource.providerId]: {\n                provide: DATA_SOURCE,\n                useClass: AverageRatingKpiDataSource,\n                deps: [HttpClient],\n            },\n            [RatingsCountKpiDataSource.providerId]: {\n                provide: DATA_SOURCE,\n                useClass: RatingsCountKpiDataSource,\n                deps: [HttpClient],\n            },\n            [MockKpiDataSource.providerId]: {\n                provide: DATA_SOURCE,\n                useClass: MockKpiDataSource,\n                deps: [],\n            },\n        });\n    }\n\n    private initializeDashboard(): void {\n        const widgetsWithStructure = widgetsConfig.map((w) =>\n            this.widgetTypesService.mergeWithWidgetType(w)\n        );\n        const widgetsIndex = keyBy(widgetsWithStructure, (w: IWidget) => w.id);\n\n        const positions: Record<string, GridsterItem> = {\n            kpiWidgetId: {\n                cols: 3,\n                rows: 6,\n                y: 0,\n                x: 0,\n            },\n            kpiWidgetId2: {\n                cols: 3,\n                rows: 6,\n                y: 0,\n                x: 3,\n            },\n            kpiWidgetId3: {\n                cols: 3,\n                rows: 6,\n                y: 0,\n                x: 6,\n            },\n        };\n\n        this.dashboard = {\n            positions,\n            widgets: widgetsIndex,\n        };\n    }\n}\n\nconst widgetsConfig: IWidget[] = [\n    {\n        id: "kpiWidgetId",\n        type: "kpi",\n        pizzagna: {\n            [PizzagnaLayer.Configuration]: {\n                header: {\n                    properties: {\n                        title: "Sync Broker Applied for ALL Widgets",\n                        subtitle: "Values are being synced",\n                    },\n                },\n                tiles: {\n                    properties: {\n                        nodes: ["kpi1", "kpi2", "kpi3"],\n                    },\n                },\n                kpi1: {\n                    id: "kpi1",\n                    componentType: KpiComponent.lateLoadKey,\n                    properties: {\n                        widgetData: {\n                            units: `out of 5 Stars`,\n                            label: `Average Rating`,\n                            backgroundColor: "lightpink",\n                        },\n                    },\n                    providers: {\n                        [WellKnownProviders.DataSource]: {\n                            providerId: AverageRatingKpiDataSource.providerId,\n                        } as IProviderConfiguration,\n                        [WellKnownProviders.Adapter]: {\n                            providerId: NOVA_KPI_DATASOURCE_ADAPTER,\n                            properties: {\n                                componentId: "kpi1",\n                                propertyPath: "widgetData",\n                            },\n                        } as IProviderConfiguration,\n                    },\n                },\n                kpi2: {\n                    id: "kpi2",\n                    componentType: KpiComponent.lateLoadKey,\n                    properties: {\n                        widgetData: {\n                            label: `Another label which might be a pretty long one`,\n                            units: `Which comes from somewhere`,\n                            backgroundColor: "skyblue",\n                        },\n                    },\n                    providers: {\n                        [WellKnownProviders.DataSource]: {\n                            providerId: RatingsCountKpiDataSource.providerId,\n                        } as IProviderConfiguration,\n                        [WellKnownProviders.Adapter]: {\n                            providerId: NOVA_KPI_DATASOURCE_ADAPTER,\n                            properties: {\n                                componentId: "kpi2",\n                                propertyPath: "widgetData",\n                            },\n                        } as IProviderConfiguration,\n                    },\n                },\n                kpi3: {\n                    id: "kpi3",\n                    componentType: KpiComponent.lateLoadKey,\n                    properties: {\n                        widgetData: {\n                            label: `Random`,\n                            units: `Data`,\n                        },\n                    },\n                    providers: {\n                        [WellKnownProviders.DataSource]: {\n                            providerId: MockKpiDataSource.providerId,\n                        } as IProviderConfiguration,\n                        [WellKnownProviders.Adapter]: {\n                            providerId: NOVA_KPI_DATASOURCE_ADAPTER,\n                            properties: {\n                                componentId: "kpi3",\n                                propertyPath: "widgetData",\n                            },\n                        } as IProviderConfiguration,\n                    },\n                },\n            },\n        },\n    },\n    {\n        id: "kpiWidgetId2",\n        type: "kpi",\n        pizzagna: {\n            [PizzagnaLayer.Configuration]: {\n                header: {\n                    properties: {\n                        title: "Sync Broker Applied for ALL Widgets",\n                        subtitle:\n                            "Now the values of label, units, and value are being synced",\n                    },\n                },\n                tiles: {\n                    properties: {\n                        nodes: ["kpi1", "kpi2", "kpi3"],\n                    },\n                },\n                kpi1: {\n                    id: "kpi1",\n                    componentType: KpiComponent.lateLoadKey,\n                    properties: {\n                        widgetData: {\n                            units: `out of 5 Stars`,\n                            label: `Average Rating`,\n                            backgroundColor: "lightpink",\n                        },\n                    },\n                    providers: {\n                        [WellKnownProviders.DataSource]: {\n                            providerId: AverageRatingKpiDataSource.providerId,\n                        } as IProviderConfiguration,\n                        [WellKnownProviders.Adapter]: {\n                            providerId: NOVA_KPI_DATASOURCE_ADAPTER,\n                            properties: {\n                                componentId: "kpi1",\n                                propertyPath: "widgetData",\n                            },\n                        } as IProviderConfiguration,\n                    },\n                },\n                kpi2: {\n                    id: "kpi2",\n                    componentType: KpiComponent.lateLoadKey,\n                    properties: {\n                        widgetData: {\n                            label: `Another label which might be a pretty long one`,\n                            units: `Which comes from somewhere`,\n                            backgroundColor: "skyblue",\n                        },\n                    },\n                    providers: {\n                        [WellKnownProviders.DataSource]: {\n                            providerId: RatingsCountKpiDataSource.providerId,\n                        } as IProviderConfiguration,\n                        [WellKnownProviders.Adapter]: {\n                            providerId: NOVA_KPI_DATASOURCE_ADAPTER,\n                            properties: {\n                                componentId: "kpi2",\n                                propertyPath: "widgetData",\n                            },\n                        } as IProviderConfiguration,\n                    },\n                },\n                kpi3: {\n                    id: "kpi3",\n                    componentType: KpiComponent.lateLoadKey,\n                    properties: {\n                        widgetData: {\n                            label: `Random`,\n                            units: `Data`,\n                        },\n                    },\n                    providers: {\n                        [WellKnownProviders.DataSource]: {\n                            providerId: MockKpiDataSource.providerId,\n                        } as IProviderConfiguration,\n                        [WellKnownProviders.Adapter]: {\n                            providerId: NOVA_KPI_DATASOURCE_ADAPTER,\n                            properties: {\n                                componentId: "kpi3",\n                                propertyPath: "widgetData",\n                            },\n                        } as IProviderConfiguration,\n                    },\n                },\n            },\n        },\n    },\n    {\n        id: "kpiWidgetId3",\n        type: "kpi",\n        pizzagna: {\n            [PizzagnaLayer.Configuration]: {\n                header: {\n                    properties: {\n                        title: "Here We Sync Only Labels and Units",\n                        subtitle:\n                            "Now only the label, and units are being synced",\n                    },\n                },\n                tiles: {\n                    properties: {\n                        nodes: ["kpi1", "kpi2", "kpi3"],\n                    },\n                    providers: {\n                        // This is where and how you can override the globally set broker config\n                        kpiScaleSyncBroker: {\n                            providerId: NOVA_KPI_SCALE_SYNC_BROKER,\n                            properties: {\n                                scaleSyncConfig: [\n                                    { id: "label" },\n                                    { id: "units" },\n                                ],\n                            },\n                        },\n                    },\n                },\n                kpi1: {\n                    id: "kpi1",\n                    componentType: KpiComponent.lateLoadKey,\n                    properties: {\n                        widgetData: {\n                            units: `out of 5 Stars`,\n                            label: `Average Rating`,\n                            backgroundColor: "lightpink",\n                        },\n                    },\n                    providers: {\n                        [WellKnownProviders.DataSource]: {\n                            providerId: AverageRatingKpiDataSource.providerId,\n                        } as IProviderConfiguration,\n                        [WellKnownProviders.Adapter]: {\n                            providerId: NOVA_KPI_DATASOURCE_ADAPTER,\n                            properties: {\n                                componentId: "kpi1",\n                                propertyPath: "widgetData",\n                            },\n                        } as IProviderConfiguration,\n                    },\n                },\n                kpi2: {\n                    id: "kpi2",\n                    componentType: KpiComponent.lateLoadKey,\n                    properties: {\n                        widgetData: {\n                            label: `Another label which might be a pretty long one`,\n                            units: `Which comes from somewhere`,\n                            backgroundColor: "skyblue",\n                        },\n                    },\n                    providers: {\n                        [WellKnownProviders.DataSource]: {\n                            providerId: RatingsCountKpiDataSource.providerId,\n                        } as IProviderConfiguration,\n                        [WellKnownProviders.Adapter]: {\n                            providerId: NOVA_KPI_DATASOURCE_ADAPTER,\n                            properties: {\n                                componentId: "kpi2",\n                                propertyPath: "widgetData",\n                            },\n                        } as IProviderConfiguration,\n                    },\n                },\n                kpi3: {\n                    id: "kpi3",\n                    componentType: KpiComponent.lateLoadKey,\n                    properties: {\n                        widgetData: {\n                            label: `Random`,\n                            units: `Data`,\n                        },\n                    },\n                    providers: {\n                        [WellKnownProviders.DataSource]: {\n                            providerId: MockKpiDataSource.providerId,\n                        } as IProviderConfiguration,\n                        [WellKnownProviders.Adapter]: {\n                            providerId: NOVA_KPI_DATASOURCE_ADAPTER,\n                            properties: {\n                                componentId: "kpi3",\n                                propertyPath: "widgetData",\n                            },\n                        } as IProviderConfiguration,\n                    },\n                },\n            },\n        },\n    },\n];\n'},61735:(o,e,n)=>{"use strict";n.r(e),n.d(e,{default:()=>t});const t='<div class="mb-2 d-flex align-items-center">\n    <nui-switch class="ml-3 py-2" [(value)]="editMode" i18n>\n        Edit Mode\n    </nui-switch>\n    <button\n        *ngIf="!dashboard?.widgets[\'kpiWidgetId\']"\n        type="button"\n        displayStyle="action"\n        (click)="reInitializeDashboard()"\n        nui-button\n    >\n        Restore Widget\n    </button>\n</div>\n\n<div class="w-100 dashboard">\n    \x3c!--\n        Note: The dashboard and gridsterConfig input assignments must use banana-in-a-box notation to keep\n        the dashboard state updated with changes to the pizzagna.\n    --\x3e\n    <nui-dashboard\n        *ngIf="dashboard"\n        [(dashboard)]="dashboard"\n        [editMode]="editMode"\n        [(gridsterConfig)]="gridsterConfig"\n        nuiWidgetEditor\n    >\n    </nui-dashboard>\n</div>\n'},84691:(o,e,n)=>{"use strict";n.r(e),n.d(e,{default:()=>t});const t=".dashboard {\n    height: 400px;\n}\n"},48767:(o,e,n)=>{"use strict";n.r(e),n.d(e,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport { HttpClient, HttpErrorResponse } from "@angular/common/http";\nimport {\n    ChangeDetectorRef,\n    Component,\n    Injectable,\n    OnDestroy,\n    OnInit,\n} from "@angular/core";\nimport { GridsterConfig, GridsterItem } from "angular-gridster2";\nimport keyBy from "lodash/keyBy";\nimport { BehaviorSubject, of } from "rxjs";\nimport { delay, finalize, take } from "rxjs/operators";\n\nimport { DataSourceService, IFilteringOutputs } from "@nova-ui/bits";\nimport {\n    DATA_SOURCE,\n    IDashboard,\n    IKpiData,\n    IProviderConfiguration,\n    IWidget,\n    KpiComponent,\n    NOVA_KPI_DATASOURCE_ADAPTER,\n    NOVA_KPI_SCALE_SYNC_BROKER,\n    PizzagnaLayer,\n    ProviderRegistryService,\n    WellKnownPathKey,\n    WellKnownProviders,\n    WidgetTypesService,\n} from "@nova-ui/dashboards";\n\n/**\n * A simple KPI data source to retrieve the average rating of Harry Potter and the Sorcerer\'s Stone (book) via googleapis\n */\n@Injectable()\nexport class AverageRatingKpiDataSource\n    extends DataSourceService<IKpiData>\n    implements OnDestroy\n{\n    public static providerId = "AverageRatingKpiDataSource";\n    public busy = new BehaviorSubject<boolean>(false);\n\n    constructor(private http: HttpClient) {\n        super();\n    }\n\n    public async getFilteredData(): Promise<IFilteringOutputs> {\n        this.busy.next(true);\n        return new Promise((resolve) => {\n            // *** Make a resource request to an external API (if needed)\n            this.http\n                .get("https://www.googleapis.com/books/v1/volumes/5MQFrgEACAAJ")\n                .pipe(finalize(() => this.busy.next(false)))\n                .subscribe({\n                    next: (data: any) => {\n                        resolve({\n                            result: {\n                                value: data.volumeInfo.averageRating,\n                            },\n                        });\n                    },\n                    error: (error: HttpErrorResponse) => {\n                        resolve({\n                            result: null,\n                            error: {\n                                type: error.status,\n                            },\n                        });\n                    },\n                });\n        });\n    }\n\n    public ngOnDestroy(): void {\n        this.outputsSubject.complete();\n    }\n}\n\n/**\n * A simple KPI data source to retrieve the ratings count of Harry Potter and the Sorcerer\'s Stone (book) via googleapis\n */\n@Injectable()\nexport class RatingsCountKpiDataSource\n    extends DataSourceService<IKpiData>\n    implements OnDestroy\n{\n    public static providerId = "RatingsCountKpiDataSource";\n\n    // Use this subject to communicate the data source\'s busy state\n    public busy = new BehaviorSubject<boolean>(false);\n\n    constructor(private http: HttpClient) {\n        super();\n    }\n\n    public async getFilteredData(): Promise<IFilteringOutputs> {\n        this.busy.next(true);\n        return new Promise((resolve) => {\n            this.http\n                .get("https://www.googleapis.com/books/v1/volumes/5MQFrgEACAAJ")\n                .pipe(\n                    delay(2000),\n                    finalize(() => this.busy.next(false))\n                )\n                .subscribe({\n                    next: (data: any) => {\n                        resolve({\n                            result: {\n                                value: data.volumeInfo.ratingsCount,\n                            },\n                        });\n                    },\n                    error: (error: HttpErrorResponse) => {\n                        resolve({\n                            result: null,\n                            error: {\n                                type: error.status,\n                            },\n                        });\n                    },\n                });\n        });\n    }\n\n    public ngOnDestroy(): void {\n        this.outputsSubject.complete();\n    }\n}\n/**\n * A simple KPI data source to retrieve the ratings count of Harry Potter and the Sorcerer\'s Stone (book) via googleapis\n */\n@Injectable()\nexport class MockKpiDataSource\n    extends DataSourceService<IKpiData>\n    implements OnDestroy\n{\n    public static providerId = "MockKpiDataSource";\n\n    // Use this subject to communicate the data source\'s busy state\n    public busy = new BehaviorSubject<boolean>(false);\n\n    constructor() {\n        super();\n    }\n\n    public async getFilteredData(): Promise<IFilteringOutputs> {\n        this.busy.next(true);\n        return new Promise((resolve) => {\n            of(3381342)\n                .pipe(\n                    delay(5000),\n                    take(1),\n                    finalize(() => this.busy.next(false))\n                )\n                .subscribe({\n                    next: (data: any) => {\n                        resolve({\n                            result: {\n                                value: data,\n                            },\n                        });\n                    },\n                });\n        });\n    }\n\n    public ngOnDestroy(): void {\n        this.outputsSubject.complete();\n    }\n}\n\n/**\n * A component that instantiates the dashboard\n */\n@Component({\n    selector: "kpi-sync-broker-example",\n    templateUrl: "./kpi-sync-broker-example.component.html",\n    styleUrls: ["./kpi-sync-broker-example.component.less"],\n})\nexport class KpiSyncBrokerExampleComponent implements OnInit {\n    public dashboard: IDashboard | undefined;\n    public gridsterConfig: GridsterConfig = {};\n    public editMode: boolean = false;\n\n    constructor(\n        private widgetTypesService: WidgetTypesService,\n        private providerRegistry: ProviderRegistryService,\n        private changeDetectorRef: ChangeDetectorRef\n    ) {}\n\n    public ngOnInit(): void {\n        this.setupDashboard();\n\n        this.initializeDashboard();\n    }\n\n    private setupDashboard() {\n        const widgetTemplate = this.widgetTypesService.getWidgetType("kpi", 1);\n\n        this.widgetTypesService.setNode(\n            widgetTemplate,\n            "configurator",\n            WellKnownPathKey.DataSourceProviders,\n            [\n                AverageRatingKpiDataSource.providerId,\n                RatingsCountKpiDataSource.providerId,\n                MockKpiDataSource.providerId,\n            ]\n        );\n\n        this.providerRegistry.setProviders({\n            [AverageRatingKpiDataSource.providerId]: {\n                provide: DATA_SOURCE,\n                useClass: AverageRatingKpiDataSource,\n                deps: [HttpClient],\n            },\n            [RatingsCountKpiDataSource.providerId]: {\n                provide: DATA_SOURCE,\n                useClass: RatingsCountKpiDataSource,\n                deps: [HttpClient],\n            },\n            [MockKpiDataSource.providerId]: {\n                provide: DATA_SOURCE,\n                useClass: MockKpiDataSource,\n                deps: [],\n            },\n        });\n    }\n\n    /** Used for restoring widgets state */\n    public reInitializeDashboard(): void {\n        // destroys the components and their providers so the dashboard can re init data\n        this.dashboard = undefined;\n        this.changeDetectorRef.detectChanges();\n\n        this.initializeDashboard();\n    }\n\n    private initializeDashboard(): void {\n        const widgetsWithStructure = widgetsConfig.map((w) =>\n            this.widgetTypesService.mergeWithWidgetType(w)\n        );\n        const widgetsIndex = keyBy(widgetsWithStructure, (w: IWidget) => w.id);\n\n        const positions: Record<string, GridsterItem> = {\n            kpiWidgetId: {\n                cols: 3,\n                rows: 6,\n                y: 0,\n                x: 0,\n            },\n            kpiWidgetId2: {\n                cols: 3,\n                rows: 6,\n                y: 0,\n                x: 0,\n            },\n        };\n\n        this.dashboard = {\n            positions,\n            widgets: widgetsIndex,\n        };\n    }\n}\n\nconst widgetsConfig: IWidget[] = [\n    {\n        id: "kpiWidgetId",\n        type: "kpi",\n        pizzagna: {\n            [PizzagnaLayer.Configuration]: {\n                header: {\n                    properties: {\n                        title: "NO Sync Broker",\n                        subtitle: "Values sizes are being not synced",\n                    },\n                },\n                tiles: {\n                    properties: {\n                        nodes: ["kpi1", "kpi2", "kpi3"],\n                    },\n                },\n                kpi1: {\n                    id: "kpi1",\n                    componentType: KpiComponent.lateLoadKey,\n                    properties: {\n                        widgetData: {\n                            units: `out of 5 Stars`,\n                            label: `Average Rating`,\n                            backgroundColor: "lightpink",\n                        },\n                    },\n                    providers: {\n                        [WellKnownProviders.DataSource]: {\n                            providerId: AverageRatingKpiDataSource.providerId,\n                        } as IProviderConfiguration,\n                        [WellKnownProviders.Adapter]: {\n                            providerId: NOVA_KPI_DATASOURCE_ADAPTER,\n                            properties: {\n                                componentId: "kpi1",\n                                propertyPath: "widgetData",\n                            },\n                        } as IProviderConfiguration,\n                    },\n                },\n                kpi2: {\n                    id: "kpi2",\n                    componentType: KpiComponent.lateLoadKey,\n                    properties: {\n                        widgetData: {\n                            label: `Another label which might be a pretty long one`,\n                            units: `Which comes from somewhere`,\n                            backgroundColor: "skyblue",\n                        },\n                    },\n                    providers: {\n                        [WellKnownProviders.DataSource]: {\n                            providerId: RatingsCountKpiDataSource.providerId,\n                        } as IProviderConfiguration,\n                        [WellKnownProviders.Adapter]: {\n                            providerId: NOVA_KPI_DATASOURCE_ADAPTER,\n                            properties: {\n                                componentId: "kpi2",\n                                propertyPath: "widgetData",\n                            },\n                        } as IProviderConfiguration,\n                    },\n                },\n                kpi3: {\n                    id: "kpi3",\n                    componentType: KpiComponent.lateLoadKey,\n                    properties: {\n                        widgetData: {\n                            label: `Random`,\n                            units: `Data`,\n                        },\n                    },\n                    providers: {\n                        [WellKnownProviders.DataSource]: {\n                            providerId: MockKpiDataSource.providerId,\n                        } as IProviderConfiguration,\n                        [WellKnownProviders.Adapter]: {\n                            providerId: NOVA_KPI_DATASOURCE_ADAPTER,\n                            properties: {\n                                componentId: "kpi3",\n                                propertyPath: "widgetData",\n                            },\n                        } as IProviderConfiguration,\n                    },\n                },\n            },\n        },\n    },\n    {\n        id: "kpiWidgetId2",\n        type: "kpi",\n        pizzagna: {\n            [PizzagnaLayer.Configuration]: {\n                header: {\n                    properties: {\n                        title: "WITH Sync Broker",\n                        subtitle:\n                            "Now the values of label, units, and value are being synced",\n                    },\n                },\n                tiles: {\n                    properties: {\n                        nodes: ["kpi4", "kpi5", "kpi6"],\n                    },\n                    providers: {\n                        // This is where and how you set the sync broker provider\n                        kpiScaleSyncBroker: {\n                            providerId: NOVA_KPI_SCALE_SYNC_BROKER,\n                            properties: {\n                                scaleSyncConfig: [\n                                    // You can decide which values to keep in sync. For instance, you can leave only \'label\' id in the array below\n                                    { id: "value" },\n                                    { id: "label" },\n                                    { id: "units" },\n                                ],\n                            },\n                        },\n                    },\n                },\n                kpi4: {\n                    id: "kpi4",\n                    componentType: KpiComponent.lateLoadKey,\n                    properties: {\n                        widgetData: {\n                            units: `out of 5 Stars`,\n                            label: `Average Rating`,\n                            backgroundColor: "lightpink",\n                        },\n                    },\n                    providers: {\n                        [WellKnownProviders.DataSource]: {\n                            providerId: AverageRatingKpiDataSource.providerId,\n                        } as IProviderConfiguration,\n                        [WellKnownProviders.Adapter]: {\n                            providerId: NOVA_KPI_DATASOURCE_ADAPTER,\n                            properties: {\n                                componentId: "kpi4",\n                                propertyPath: "widgetData",\n                            },\n                        } as IProviderConfiguration,\n                    },\n                },\n                kpi5: {\n                    id: "kpi5",\n                    componentType: KpiComponent.lateLoadKey,\n                    properties: {\n                        widgetData: {\n                            label: `Another label which might be a pretty long one`,\n                            units: `Which comes from somewhere`,\n                            backgroundColor: "skyblue",\n                        },\n                    },\n                    providers: {\n                        [WellKnownProviders.DataSource]: {\n                            providerId: RatingsCountKpiDataSource.providerId,\n                        } as IProviderConfiguration,\n                        [WellKnownProviders.Adapter]: {\n                            providerId: NOVA_KPI_DATASOURCE_ADAPTER,\n                            properties: {\n                                componentId: "kpi5",\n                                propertyPath: "widgetData",\n                            },\n                        } as IProviderConfiguration,\n                    },\n                },\n                kpi6: {\n                    id: "kpi6",\n                    componentType: KpiComponent.lateLoadKey,\n                    properties: {\n                        widgetData: {\n                            label: `Random`,\n                            units: `Data`,\n                        },\n                    },\n                    providers: {\n                        [WellKnownProviders.DataSource]: {\n                            providerId: MockKpiDataSource.providerId,\n                        } as IProviderConfiguration,\n                        [WellKnownProviders.Adapter]: {\n                            providerId: NOVA_KPI_DATASOURCE_ADAPTER,\n                            properties: {\n                                componentId: "kpi6",\n                                propertyPath: "widgetData",\n                            },\n                        } as IProviderConfiguration,\n                    },\n                },\n            },\n        },\n    },\n];\n'},55939:(o,e,n)=>{"use strict";n.r(e),n.d(e,{default:()=>t});const t='<h1>Setting a background color for a KPI tile</h1>\n<p>\n    As it\'s essential for the pizzagna, it\'s possible to set background the\n    color on the all its layers.\n</p>\n<ul>\n    <li>Structure</li>\n    <li>Configuration</li>\n    <li>Data</li>\n</ul>\n\n<h3><strong>Color setting priority:</strong></h3>\n<ol>\n    <li>Data (dataSource)</li>\n    <li>Color Prioritizer Rules</li>\n    <li>Configuration</li>\n    <li>Default color</li>\n</ol>\n\n<h2>Structure</h2>\n<p>\n    Using <i>Structure</i> layer, you can set KPI tiles default color. For that,\n    you have to use <code>WidgetTypesService</code>, as in the example.\n</p>\n<p>\n    Path for setting the default color -\n    <code\n        >"tiles.properties.template.properties.widgetData.backgroundColor"</code\n    >\n</p>\n\n<h2>Configuration</h2>\n<p>\n    It\'s possible to specify the tile color on the widget\n    <code>configuration</code> layer config.\n</p>\n<p>\n    Picking the color from the UI using KPI configurator, the background color\n    is set on this layer.\n</p>\n\n<h2>Data</h2>\n<p>\n    It\'s also possible to set the color on the <code>data</code> layer, for that\n    the dataSource should return <code>backgroundColor</code> property in the\n    data object and KPI tile will receive that.\n</p>\n\n<h3>Color Prioritizer Rules - dynamic change depending on data</h3>\n<p>\n    It\'s possible to configure the background color so that it will have\n    different value depending on the received value.\n</p>\n<p>\n    In order to do that, you have to configure the\n    <code>KpiColorPrioritizer</code>. To do that, put the\n    <code>KpiColorPrioritizer</code> in the <code>providers</code> sections.\n</p>\n\n<p>\n    Also, you can configure the color rules for that. You have to configure\n    following properties for each\n</p>\n<ul>\n    <li><code>comparisonType</code> - type of the value comparison,</li>\n    <li><code>value</code> - value to compare with</li>\n    <li><code>color</code> - color to set</li>\n</ul>\n<h3>Color rules comparators:</h3>\n<p>There\'re default comparators:</p>\n<ul>\n    <li><code>">"</code> - a > b comparison</li>\n    <li><code>"<"</code> - a < b comparison</li>\n    <li><code>">="</code> - a >= b comparison</li>\n    <li><code>"<="</code> - a <= b comparison</li>\n    <li><code>"=="</code> - a == b comparison</li>\n</ul>\n<h4>Custom comparators</h4>\n<p>\n    You can also use custom comparators, in case you want to have another value\n    comparison logic. To use custom formatters, use\n    <code>KpiColorComparatorsRegistryService</code>.\n</p>\n<p>It\'s highly recommended to put this logic in the <strong>module</strong>.</p>\n<p>For example, this is how to configure <i>not equal</i> comparator:</p>\n<nui-example-code language="typescript">\n    {{ comparatorsRegistryCode }}\n</nui-example-code>\n<p>\n    <strong>Note: </strong><code>KpiColorComparatorsRegistryService</code> is\n    provided in <code>root</code>, if you want to isolate comparators, please\n    declare it in the desired <code>providers</code> section.\n</p>\n\n<h2>Setting a custom pallette in the color pickers</h2>\n<p>\n    By default, KPI color pickers have a predefined set of colors. You can use\n    <code>DEFAULT_KPI_BACKGROUND_COLORS</code> variable if you need.\n</p>\n<p>\n    To use a custom color pallette, you have to set it to the pizzagna using the\n    <code>WidgetTypesService</code>.\n</p>\n<p>\n    To set the pallette to the <i>Description</i> section, use\n    <code>WellKnownPathKey.TileDescriptionBackgroundColors</code> path.\n</p>\n<p>\n    To set the pallette to the <i>Background Color Rules</i> section, use\n    <code>WellKnownPathKey.TileBackgroundColorRulesBackgroundColors</code> path.\n</p>\n<p>Check the example code for more details.</p>\n\n<nui-example-wrapper\n    filenamePrefix="kpi-widget-background-color"\n    exampleTitle="KPI widget"\n>\n    <kpi-widget-background-color-example></kpi-widget-background-color-example>\n</nui-example-wrapper>\n'},5339:(o,e,n)=>{"use strict";n.r(e),n.d(e,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport { Component } from "@angular/core";\n\n@Component({\n    selector: "nui-kpi-background-color-docs",\n    templateUrl: "./kpi-widget-background-color-docs.component.html",\n})\nexport class KpiWidgetBackgroundColorDocsComponent {\n    public comparatorsRegistryCode = `\n        this.comparatorsRegistry.registerComparators({\n            "!=": {\n                comparatorFn: (actual: any, reference: any) => actual != reference,\n                label: "Not equal",\n            },\n        });\n    `;\n}\n'},3067:(o,e,n)=>{"use strict";n.r(e),n.d(e,{default:()=>t});const t='<div class="mb-2 d-flex align-items-center">\n    <nui-switch class="ml-3 py-2" [(value)]="editMode" i18n>\n        Edit Mode\n    </nui-switch>\n    <button\n        *ngIf="!dashboard?.widgets[\'kpiWidgetId\']"\n        type="button"\n        displayStyle="action"\n        (click)="reInitializeDashboard()"\n        nui-button\n    >\n        Restore Widget\n    </button>\n</div>\n\n<div class="w-100 dashboard">\n    \x3c!--\n        Note: The dashboard and gridsterConfig input assignments must use banana-in-a-box notation to keep\n        the dashboard state updated with changes to the pizzagna.\n    --\x3e\n    <nui-dashboard\n        *ngIf="dashboard"\n        [(dashboard)]="dashboard"\n        [editMode]="editMode"\n        [(gridsterConfig)]="gridsterConfig"\n        nuiWidgetEditor\n    >\n    </nui-dashboard>\n</div>\n'},16223:(o,e,n)=>{"use strict";n.r(e),n.d(e,{default:()=>t});const t=".dashboard {\n    height: 400px;\n}\n"},16227:(o,e,n)=>{"use strict";n.r(e),n.d(e,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport { HttpClient, HttpErrorResponse } from "@angular/common/http";\nimport {\n    ChangeDetectorRef,\n    Component,\n    Injectable,\n    OnDestroy,\n    OnInit,\n} from "@angular/core";\nimport { GridsterConfig, GridsterItem } from "angular-gridster2";\nimport { BehaviorSubject } from "rxjs";\nimport { finalize } from "rxjs/operators";\n\nimport { DataSourceService, IFilteringOutputs } from "@nova-ui/bits";\nimport {\n    DATA_SOURCE,\n    DEFAULT_KPI_BACKGROUND_COLORS,\n    IDashboard,\n    IKpiColorRules,\n    IKpiData,\n    IProviderConfiguration,\n    IWidget,\n    IWidgets,\n    KpiComponent,\n    NOVA_KPI_COLOR_PRIORITIZER,\n    NOVA_KPI_DATASOURCE_ADAPTER,\n    PizzagnaLayer,\n    ProviderRegistryService,\n    WellKnownPathKey,\n    WellKnownProviders,\n    WidgetTypesService,\n} from "@nova-ui/dashboards";\n\n/**\n * A simple KPI data source to retrieve the average rating of Harry Potter and the Sorcerer\'s Stone (book) via googleapis\n */\n@Injectable()\nexport class AverageRatingKpiDataSource\n    extends DataSourceService<IKpiData>\n    implements OnDestroy\n{\n    public static providerId = "AverageRatingKpiDataSource";\n    public busy = new BehaviorSubject<boolean>(false);\n\n    constructor(private http: HttpClient) {\n        super();\n    }\n\n    public async getFilteredData(): Promise<IFilteringOutputs> {\n        this.busy.next(true);\n        return new Promise((resolve) => {\n            // *** Make a resource request to an external API (if needed)\n            this.http\n                .get("https://www.googleapis.com/books/v1/volumes/5MQFrgEACAAJ")\n                .pipe(finalize(() => this.busy.next(false)))\n                .subscribe({\n                    next: (data: any) => {\n                        resolve({\n                            result: {\n                                value: data.volumeInfo.averageRating,\n                                // setting the color on the dataSource "Sea Green",\n                                // uncomment to get the background color update from the "Data" layer\n                                // backgroundColor: "var(--nui-color-chart-three)",\n                            },\n                        });\n                    },\n                    error: (error: HttpErrorResponse) => {\n                        resolve({\n                            result: null,\n                            error: {\n                                type: error.status,\n                            },\n                        });\n                    },\n                });\n        });\n    }\n\n    public ngOnDestroy(): void {\n        this.outputsSubject.complete();\n    }\n}\n\n/**\n * A component that instantiates the dashboard\n */\n@Component({\n    selector: "kpi-widget-background-color-example",\n    templateUrl: "./kpi-widget-background-color-example.component.html",\n    styleUrls: ["./kpi-widget-background-color-example.component.less"],\n})\nexport class KpiWidgetBackgroundColorExampleComponent implements OnInit {\n    public dashboard: IDashboard | undefined;\n    public gridsterConfig: GridsterConfig = {};\n    public editMode: boolean = false;\n\n    constructor(\n        private widgetTypesService: WidgetTypesService,\n        private providerRegistry: ProviderRegistryService,\n        private changeDetectorRef: ChangeDetectorRef\n    ) {}\n\n    public ngOnInit(): void {\n        this.setupDashboard();\n\n        // KPI tile default color setup\n        this.setupDefaultColorStructure();\n\n        // Sets the custom pallette to the \'Description\' section\n        this.setupCustomPalletteDescription();\n\n        // Sets the custom pallette to the \'Background color rules\' section\n        this.setupCustomPalletteRules();\n\n        this.initializeDashboard();\n    }\n\n    /** Used for restoring widgets state */\n    public reInitializeDashboard(): void {\n        // destroys the components and their providers so the dashboard can re init data\n        this.dashboard = undefined;\n        this.changeDetectorRef.detectChanges();\n\n        this.initializeDashboard();\n    }\n\n    private setupCustomPalletteDescription() {\n        const kpiWidgetTemplate = this.widgetTypesService.getWidgetType(\n            "kpi",\n            1\n        );\n        this.widgetTypesService.setNode(\n            kpiWidgetTemplate,\n            "configurator",\n            WellKnownPathKey.TileDescriptionBackgroundColors,\n            [\n                { color: "var(--nui-color-chart-one)", label: "Blue" },\n                {\n                    color: "var(--nui-color-chart-one-light)",\n                    label: "Blue Light",\n                },\n                {\n                    color: "var(--nui-color-chart-one-dark)",\n                    label: "Blue Dark",\n                },\n            ]\n        );\n    }\n\n    private setupCustomPalletteRules() {\n        const kpiWidgetTemplate = this.widgetTypesService.getWidgetType(\n            "kpi",\n            1\n        );\n        this.widgetTypesService.setNode(\n            kpiWidgetTemplate,\n            "configurator",\n            WellKnownPathKey.TileBackgroundColorRulesBackgroundColors,\n            [\n                { color: "red", label: "Native Red" },\n                ...DEFAULT_KPI_BACKGROUND_COLORS,\n            ]\n        );\n    }\n\n    private setupDefaultColorStructure() {\n        const widgetTemplate = this.widgetTypesService.getWidgetType("kpi", 1);\n        this.widgetTypesService.setNode(\n            widgetTemplate,\n            "widget",\n            "tiles.properties.template.properties.widgetData.backgroundColor",\n            "red"\n        );\n    }\n\n    private setupDashboard() {\n        const widgetTemplate = this.widgetTypesService.getWidgetType("kpi", 1);\n        this.widgetTypesService.setNode(\n            widgetTemplate,\n            "configurator",\n            WellKnownPathKey.DataSourceProviders,\n            [AverageRatingKpiDataSource.providerId]\n        );\n\n        this.providerRegistry.setProviders({\n            [AverageRatingKpiDataSource.providerId]: {\n                provide: DATA_SOURCE,\n                useClass: AverageRatingKpiDataSource,\n                deps: [HttpClient],\n            },\n        });\n    }\n\n    private initializeDashboard(): void {\n        const kpiWidget = widgetConfig;\n        const widgetIndex: IWidgets = {\n            [kpiWidget.id]:\n                this.widgetTypesService.mergeWithWidgetType(kpiWidget),\n        };\n\n        const positions: Record<string, GridsterItem> = {\n            [kpiWidget.id]: {\n                cols: 4,\n                rows: 6,\n                y: 0,\n                x: 0,\n            },\n        };\n\n        this.dashboard = {\n            positions,\n            widgets: widgetIndex,\n        };\n    }\n}\n\nconst widgetConfig: IWidget = {\n    id: "kpiWidgetId",\n    type: "kpi",\n    pizzagna: {\n        [PizzagnaLayer.Configuration]: {\n            header: {\n                properties: {\n                    title: "Harry Potter and the Sorcerer\'s Stone",\n                    subtitle: "By J. K. Rowling",\n                },\n            },\n            tiles: {\n                properties: {\n                    nodes: ["kpi1"],\n                },\n            },\n            kpi1: {\n                id: "kpi1",\n                componentType: KpiComponent.lateLoadKey,\n                properties: {\n                    widgetData: {\n                        units: `out of 5 Stars`,\n                        label: `Average Rating`,\n                        // Configuration color "Blue"\n                        backgroundColor: "var(--nui-color-chart-one)",\n                    },\n                },\n                providers: {\n                    [WellKnownProviders.DataSource]: {\n                        providerId: AverageRatingKpiDataSource.providerId,\n                    } as IProviderConfiguration,\n                    [WellKnownProviders.Adapter]: {\n                        providerId: NOVA_KPI_DATASOURCE_ADAPTER,\n                        properties: {\n                            componentId: "kpi1",\n                            propertyPath: "widgetData",\n                        },\n                    } as IProviderConfiguration,\n                    [WellKnownProviders.KpiColorPrioritizer]: {\n                        providerId: NOVA_KPI_COLOR_PRIORITIZER,\n                        properties: {\n                            // Color Prioritizer Rules\n                            // settings rules - if the value is more than "2" display "Violet" color\n                            rules: [\n                                {\n                                    comparisonType: ">",\n                                    value: 2,\n                                    color: "var(--nui-color-chart-four)",\n                                },\n                            ] as IKpiColorRules[],\n                        },\n                    } as IProviderConfiguration,\n                },\n            },\n        },\n    },\n};\n'},90909:(o,e,n)=>{"use strict";n.r(e),n.d(e,{default:()=>t});const t='<div class="mb-2 d-flex align-items-center">\n    <nui-switch class="ml-3 py-2" [(value)]="editMode" i18n>\n        Edit Mode\n    </nui-switch>\n    <button\n        *ngIf="!dashboard?.widgets[\'kpiWidgetId\']"\n        type="button"\n        displayStyle="action"\n        (click)="initializeDashboard()"\n        nui-button\n    >\n        Restore Widget\n    </button>\n</div>\n\n<div class="w-100 dashboard">\n    \x3c!--\n        Note: The dashboard and gridsterConfig input assignments must use banana-in-a-box notation to keep\n        the dashboard state updated with changes to the pizzagna.\n    --\x3e\n    <nui-dashboard\n        [(dashboard)]="dashboard"\n        [editMode]="editMode"\n        [(gridsterConfig)]="gridsterConfig"\n        nuiWidgetEditor\n    >\n    </nui-dashboard>\n</div>\n'},42417:(o,e,n)=>{"use strict";n.r(e),n.d(e,{default:()=>t});const t=".dashboard {\n    height: 375px;\n}\n"},46601:(o,e,n)=>{"use strict";n.r(e),n.d(e,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport { HttpClient, HttpErrorResponse } from "@angular/common/http";\nimport { Component, Injectable, OnDestroy, OnInit } from "@angular/core";\nimport { GridsterConfig, GridsterItem } from "angular-gridster2";\nimport { BehaviorSubject } from "rxjs";\nimport { finalize } from "rxjs/operators";\n\nimport { DataSourceService, IFilteringOutputs } from "@nova-ui/bits";\nimport {\n    DATA_SOURCE,\n    IDashboard,\n    IKpiData,\n    IProviderConfiguration,\n    IWidget,\n    IWidgets,\n    KpiComponent,\n    NOVA_KPI_DATASOURCE_ADAPTER,\n    NOVA_URL_INTERACTION_HANDLER,\n    PizzagnaLayer,\n    ProviderRegistryService,\n    WellKnownPathKey,\n    WellKnownProviders,\n    WidgetTypesService,\n} from "@nova-ui/dashboards";\n\n/**\n * A simple KPI data source to retrieve the average rating of Harry Potter and the Sorcerer\'s Stone (book) via googleapis\n */\n@Injectable()\nexport class BookRatingDataSource\n    extends DataSourceService<IKpiData>\n    implements OnDestroy\n{\n    // This is the ID we\'ll use to identify the provider\n    public static providerId = "BookRatingDataSource";\n\n    // Use this subject to communicate the data source\'s busy state\n    public busy = new BehaviorSubject<boolean>(false);\n\n    constructor(private http: HttpClient) {\n        super();\n    }\n\n    // In this example, getFilteredData is invoked every 10 minutes (Take a look at the refresher\n    // provider definition in the widget configuration below to see how the interval is set)\n    public async getFilteredData(): Promise<IFilteringOutputs> {\n        this.busy.next(true);\n        return new Promise((resolve) => {\n            // *** Make a resource request to an external API (if needed)\n            this.http\n                .get("https://www.googleapis.com/books/v1/volumes/zpvysRGsBlwC")\n                .pipe(finalize(() => this.busy.next(false)))\n                .subscribe({\n                    next: (data: any) => {\n                        resolve({\n                            result: {\n                                value: data.volumeInfo.averageRating,\n                                link: data.volumeInfo.infoLink,\n                            },\n                        });\n                    },\n                    error: (error: HttpErrorResponse) => {\n                        resolve({\n                            result: null,\n                            error: {\n                                type: error.status,\n                            },\n                        });\n                    },\n                });\n        });\n    }\n\n    public ngOnDestroy(): void {\n        this.outputsSubject.complete();\n    }\n}\n\n/**\n * A component that instantiates the dashboard\n */\n@Component({\n    selector: "kpi-widget-interactive-example",\n    templateUrl: "./kpi-widget-interactive-example.component.html",\n    styleUrls: ["./kpi-widget-interactive-example.component.less"],\n})\nexport class KpiWidgetInteractiveExampleComponent implements OnInit {\n    // This variable will hold all the data needed to define the layout and behavior of the widgets.\n    // Pass this to the dashboard component\'s dashboard input in the template.\n    public dashboard: IDashboard;\n\n    // Angular gridster requires a configuration object even if it\'s empty.\n    // Pass this to the dashboard component\'s gridsterConfig input in the template.\n    public gridsterConfig: GridsterConfig = {};\n\n    // Boolean passed as an input to the dashboard. When true, widgets can be moved, resized, removed, or edited\n    public editMode: boolean = false;\n\n    constructor(\n        // WidgetTypesService provides the widget\'s necessary structure information\n        private widgetTypesService: WidgetTypesService,\n\n        // In general, the ProviderRegistryService is used for making entities available for injection into dynamically loaded components.\n        private providerRegistry: ProviderRegistryService\n    ) {}\n\n    public ngOnInit(): void {\n        // Grabbing the widget\'s default template which will be needed as a parameter for setNode\n        const widgetTemplate = this.widgetTypesService.getWidgetType("kpi", 1);\n        // Registering our data sources as dropdown options in the widget editor/configurator\n        // Note: This could also be done in the parent module\'s constructor so that\n        // multiple dashboards could have access to the same widget template modification.\n        this.widgetTypesService.setNode(\n            // This is the template we grabbed above with getWidgetType\n            widgetTemplate,\n            // We are setting the editor/configurator part of the widget template\n            "configurator",\n            // This indicates which node you are changing and we want to change\n            // the data source providers available for selection in the editor.\n            WellKnownPathKey.DataSourceProviders,\n            // We are setting the data sources available for selection in the editor\n            [BookRatingDataSource.providerId]\n        );\n\n        // Registering the data source for injection into the KPI tile.\n        // Note: Each tile of a KPI widget is assigned its own instance of the data source\n        this.providerRegistry.setProviders({\n            [BookRatingDataSource.providerId]: {\n                provide: DATA_SOURCE,\n                useClass: BookRatingDataSource,\n                // Any dependencies that need to be injected into the provider must be listed here\n                deps: [HttpClient],\n            },\n        });\n\n        this.initializeDashboard();\n    }\n\n    public initializeDashboard(): void {\n        // We\'re using a static configuration object for this example, but this is where\n        // the widget\'s configuration could potentially be populated from a database\n        const kpiWidget = widgetConfig;\n        const widgetIndex: IWidgets = {\n            // Complete the KPI widget with information coming from its type definition\n            [kpiWidget.id]:\n                this.widgetTypesService.mergeWithWidgetType(kpiWidget),\n        };\n\n        // Setting the widget dimensions and position (this is for gridster)\n        const positions: Record<string, GridsterItem> = {\n            [kpiWidget.id]: {\n                cols: 4,\n                rows: 6,\n                y: 0,\n                x: 0,\n            },\n        };\n\n        // Finally, assigning the variables we created above to the dashboard\n        this.dashboard = {\n            positions,\n            widgets: widgetIndex,\n        };\n    }\n}\n\nconst widgetConfig: IWidget = {\n    id: "kpiWidgetId",\n    type: "kpi",\n    pizzagna: {\n        [PizzagnaLayer.Configuration]: {\n            header: {\n                properties: {\n                    title: "Harry Potter and the Order of the Phoenix",\n                    subtitle: "By: J. K. Rowling",\n                },\n            },\n            tiles: {\n                providers: {\n                    interaction: {\n                        // Configuring the UrlInteractionHandler for interactions on the tiles\n                        providerId: NOVA_URL_INTERACTION_HANDLER,\n                        properties: {\n                            // the \'url\' property tells the handler what link to use when interaction occurs on the series\n                            url: "${data.link}",\n                        },\n                    },\n                },\n                properties: {\n                    nodes: ["kpi1"],\n                },\n            },\n            kpi1: {\n                id: "kpi1",\n                componentType: KpiComponent.lateLoadKey,\n                properties: {\n                    widgetData: {\n                        units: `out of 5 stars`,\n                        label: `Average Rating`,\n                        value: 0,\n                        // the link property that is passed to the UrlInteractionHandler when the title is clicked\n                        // this will be updated in BookRatingDataSource\'s \'getFilteredData\' call.\n                        link: "http://www.google.com",\n                    },\n                },\n                providers: {\n                    [WellKnownProviders.DataSource]: {\n                        // Setting the data source providerId for the tile with id "kpi1"\n                        providerId: BookRatingDataSource.providerId,\n                    } as IProviderConfiguration,\n                    [WellKnownProviders.Adapter]: {\n                        providerId: NOVA_KPI_DATASOURCE_ADAPTER,\n                        properties: {\n                            componentId: "kpi1",\n                            propertyPath: "widgetData",\n                        },\n                    } as IProviderConfiguration,\n                },\n            },\n        },\n    },\n};\n'},32887:(o,e,n)=>{"use strict";n.r(e),n.d(e,{default:()=>t});const t='<div class="mb-2 d-flex align-items-center">\n    <nui-switch class="ml-3 py-2" [(value)]="editMode" i18n>\n        Edit Mode\n    </nui-switch>\n    <button\n        *ngIf="!dashboard?.widgets[\'kpiWidgetId\']"\n        type="button"\n        displayStyle="action"\n        (click)="initializeDashboard()"\n        nui-button\n    >\n        Restore Widget\n    </button>\n</div>\n\n<div class="w-100 dashboard">\n    \x3c!--\n        Note: The dashboard and gridsterConfig input assignments must use banana-in-a-box notation to keep\n        the dashboard state updated with changes to the pizzagna.\n    --\x3e\n    <nui-dashboard\n        [(dashboard)]="dashboard"\n        [editMode]="editMode"\n        [(gridsterConfig)]="gridsterConfig"\n        nuiWidgetEditor\n    >\n    </nui-dashboard>\n</div>\n'},2563:(o,e,n)=>{"use strict";n.r(e),n.d(e,{default:()=>t});const t=".dashboard {\n    height: 400px;\n}\n"},58735:(o,e,n)=>{"use strict";n.r(e),n.d(e,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport { HttpClient, HttpErrorResponse } from "@angular/common/http";\nimport { Component, Injectable, OnDestroy, OnInit } from "@angular/core";\nimport { GridsterConfig, GridsterItem } from "angular-gridster2";\nimport { BehaviorSubject } from "rxjs";\nimport { finalize } from "rxjs/operators";\n\nimport { DataSourceService, IFilteringOutputs } from "@nova-ui/bits";\nimport {\n    DATA_SOURCE,\n    DEFAULT_PIZZAGNA_ROOT,\n    IDashboard,\n    IKpiData,\n    IProviderConfiguration,\n    IRefresherProperties,\n    IWidget,\n    IWidgets,\n    KpiComponent,\n    NOVA_KPI_DATASOURCE_ADAPTER,\n    PizzagnaLayer,\n    ProviderRegistryService,\n    WellKnownPathKey,\n    WellKnownProviders,\n    WidgetTypesService,\n} from "@nova-ui/dashboards";\n\n/**\n * A simple KPI data source to retrieve the average rating of Harry Potter and the Sorcerer\'s Stone (book) via googleapis\n */\n@Injectable()\nexport class AverageRatingKpiDataSource\n    extends DataSourceService<IKpiData>\n    implements OnDestroy\n{\n    // This is the ID we\'ll use to identify the provider\n    public static providerId = "AverageRatingKpiDataSource";\n\n    // Use this subject to communicate the data source\'s busy state\n    public busy = new BehaviorSubject<boolean>(false);\n\n    constructor(private http: HttpClient) {\n        super();\n    }\n\n    // In this example, getFilteredData is invoked every 10 minutes (Take a look at the refresher\n    // provider definition in the widget configuration below to see how the interval is set)\n    public async getFilteredData(): Promise<IFilteringOutputs> {\n        this.busy.next(true);\n        return new Promise((resolve) => {\n            // *** Make a resource request to an external API (if needed)\n            this.http\n                .get("https://www.googleapis.com/books/v1/volumes/5MQFrgEACAAJ")\n                .pipe(finalize(() => this.busy.next(false)))\n                .subscribe({\n                    next: (data: any) => {\n                        resolve({\n                            result: {\n                                value: data.volumeInfo.averageRating,\n                            },\n                        });\n                    },\n                    error: (error: HttpErrorResponse) => {\n                        resolve({\n                            result: null,\n                            error: {\n                                type: error.status,\n                            },\n                        });\n                    },\n                });\n        });\n    }\n\n    public ngOnDestroy(): void {\n        this.outputsSubject.complete();\n    }\n}\n\n/**\n * A component that instantiates the dashboard\n */\n@Component({\n    selector: "kpi-widget-example",\n    templateUrl: "./kpi-widget-example.component.html",\n    styleUrls: ["./kpi-widget-example.component.less"],\n})\nexport class KpiWidgetExampleComponent implements OnInit {\n    // This variable will hold all the data needed to define the layout and behavior of the widgets.\n    // Pass this to the dashboard component\'s dashboard input in the template.\n    public dashboard: IDashboard;\n\n    // Angular gridster requires a configuration object even if it\'s empty.\n    // Pass this to the dashboard component\'s gridsterConfig input in the template.\n    public gridsterConfig: GridsterConfig = {};\n\n    // Boolean passed as an input to the dashboard. When true, widgets can be moved, resized, removed, or edited\n    public editMode: boolean = false;\n\n    constructor(\n        // WidgetTypesService provides the widget\'s necessary structure information\n        private widgetTypesService: WidgetTypesService,\n\n        // In general, the ProviderRegistryService is used for making entities available for injection into dynamically loaded components.\n        private providerRegistry: ProviderRegistryService\n    ) {}\n\n    public ngOnInit(): void {\n        // Grabbing the widget\'s default template which will be needed as a parameter for setNode\n        const widgetTemplate = this.widgetTypesService.getWidgetType("kpi", 1);\n        // Registering our data sources as dropdown options in the widget editor/configurator\n        // Note: This could also be done in the parent module\'s constructor so that\n        // multiple dashboards could have access to the same widget template modification.\n        this.widgetTypesService.setNode(\n            // This is the template we grabbed above with getWidgetType\n            widgetTemplate,\n            // We are setting the editor/configurator part of the widget template\n            "configurator",\n            // This indicates which node you are changing and we want to change\n            // the data source providers available for selection in the editor.\n            WellKnownPathKey.DataSourceProviders,\n            // We are setting the data sources available for selection in the editor\n            [AverageRatingKpiDataSource.providerId]\n        );\n\n        // Registering the data source for injection into the KPI tile.\n        // Note: Each tile of a KPI widget is assigned its own instance of the data source\n        this.providerRegistry.setProviders({\n            [AverageRatingKpiDataSource.providerId]: {\n                provide: DATA_SOURCE,\n                useClass: AverageRatingKpiDataSource,\n                // Any dependencies that need to be injected into the provider must be listed here\n                deps: [HttpClient],\n            },\n        });\n\n        this.initializeDashboard();\n    }\n\n    public initializeDashboard(): void {\n        // We\'re using a static configuration object for this example, but this is where\n        // the widget\'s configuration could potentially be populated from a database\n        const kpiWidget = widgetConfig;\n        const widgetIndex: IWidgets = {\n            // Complete the KPI widget with information coming from its type definition\n            [kpiWidget.id]:\n                this.widgetTypesService.mergeWithWidgetType(kpiWidget),\n        };\n\n        // Setting the widget dimensions and position (this is for gridster)\n        const positions: Record<string, GridsterItem> = {\n            [kpiWidget.id]: {\n                cols: 4,\n                rows: 6,\n                y: 0,\n                x: 0,\n            },\n        };\n\n        // Finally, assigning the variables we created above to the dashboard\n        this.dashboard = {\n            positions,\n            widgets: widgetIndex,\n        };\n    }\n}\n\nconst widgetConfig: IWidget = {\n    id: "kpiWidgetId",\n    type: "kpi",\n    pizzagna: {\n        [PizzagnaLayer.Configuration]: {\n            [DEFAULT_PIZZAGNA_ROOT]: {\n                providers: {\n                    [WellKnownProviders.Refresher]: {\n                        properties: {\n                            // Configuring the refresher interval so that our data source is invoked every ten minutes\n                            interval: 60 * 10,\n                            enabled: true,\n                        } as IRefresherProperties,\n                    } as Partial<IProviderConfiguration>,\n                },\n            },\n            header: {\n                properties: {\n                    title: "Harry Potter and the Sorcerer\'s Stone",\n                    subtitle: "By J. K. Rowling",\n                },\n            },\n            tiles: {\n                properties: {\n                    nodes: ["kpi1"],\n                },\n            },\n            kpi1: {\n                id: "kpi1",\n                componentType: KpiComponent.lateLoadKey,\n                properties: {\n                    widgetData: {\n                        units: `out of 5 Stars`,\n                        label: `Average Rating`,\n                    },\n                },\n                providers: {\n                    [WellKnownProviders.DataSource]: {\n                        // Setting the data source providerId for the tile with id "kpi1"\n                        providerId: AverageRatingKpiDataSource.providerId,\n                    } as IProviderConfiguration,\n                    [WellKnownProviders.Adapter]: {\n                        providerId: NOVA_KPI_DATASOURCE_ADAPTER,\n                        properties: {\n                            componentId: "kpi1",\n                            propertyPath: "widgetData",\n                        },\n                    } as IProviderConfiguration,\n                },\n            },\n        },\n    },\n};\n'},67693:(o,e,n)=>{"use strict";n.r(e),n.d(e,{default:()=>t});const t="export interface IMockBeerReview {\n    id: string;\n    name: string;\n    data: number[];\n    icon: string;\n    link?: string;\n    value: string;\n    color?: string;\n}\n"},16475:(o,e,n)=>{"use strict";n.r(e),n.d(e,{default:()=>t});const t='<h1>Proportional Widget</h1>\n\n<p>\n    The general use-case for a proportional widget is to visualize at a glance\n    how one data point compares to others in relation to the sum of all related\n    data points. In other words, it can be used to show proportional data as a\n    series of slices that make up a whole. The supported visualization modes\n    include pie chart, donut chart, and bar chart in either horizontal or\n    vertical orientation.\n</p>\n<p>\n    An example use-case might be if we have some categories of data such as node\n    statuses. Some of the nodes may have a status of "on" while the rest of them\n    have a status of "off". This data can be fed into the proportional widget to\n    let a user see at a glance how many of the nodes are "on" in relation to the\n    ones that are "off" and in relation to the total number of nodes. The\n    following example displays the number of Solarians who have reviewed beers\n    by city. The data is completely made up and makes no sense, but it\'s all in\n    good fun.\n</p>\n\n<nui-message type="info" [allowDismiss]="false">\n    For details on how to instantiate a proportional widget, take a look at the\n    inline comments under the source expander of the following example.\n</nui-message>\n\n<nui-example-wrapper\n    filenamePrefix="proportional-widget"\n    exampleTitle="Proportional Widget"\n>\n    <proportional-widget-example></proportional-widget-example>\n</nui-example-wrapper>\n\n<h3>Interaction Handling</h3>\n<p>\n    In the example below the first chart is using the\n    <code\n        ><a href="../injectables/UrlInteractionHandler.html" target="_blank"\n            >UrlInteractionHandler</a\n        ></code\n    >\n    to handle interactions that occur on the legend when the chart is set to\n    interactive. The second chart shows how individual series can be interactive\n    when the series data, that conform to\n    <code\n        ><a href="../interfaces/IProportionalWidgetData.html" target="_blank"\n            >IProportionalWidgetData</a\n        ></code\n    >\n    interface, and provide value for:\n</p>\n<ul>\n    <li><code>link</code>: string used for the legends label link.</li>\n</ul>\n<p>\n    Look at the inline comments in the source expander to see how the\n    <code\n        ><a href="../injectables/UrlInteractionHandler.html" target="_blank"\n            >UrlInteractionHandler</a\n        ></code\n    >\n    is configured.\n</p>\n\n<nui-example-wrapper\n    filenamePrefix="proportional-widget-interactive"\n    exampleTitle="Interactive Proportional Widget"\n>\n    <proportional-widget-interactive-example></proportional-widget-interactive-example>\n</nui-example-wrapper>\n\n<h2>Widget Schema</h2>\n\n<p>\n    The code listings below are the source files for the proportional widget\n    definition with inline comments describing the parts that compose the\n    standard proportional widget type. It includes the widget\'s definition as\n    well as its corresponding configurator form for defining how to configure\n    (create/edit) the widget.\n</p>\n\n<h2>Widget</h2>\n\n<p>\n    This part shows the actual widget definition. It includes, among other\n    things, the components and providers that compose the widget itself.\n</p>\n\n<nui-example-code language="typescript">{{\n    proportionalWidgetFileText\n}}</nui-example-code>\n\n<h2>Configurator</h2>\n\n<p>\n    This part shows the form that\'s used for configuring (creating/editing) the\n    widget.\n</p>\n\n<nui-example-code language="typescript">{{\n    proportionalConfiguratorFileText\n}}</nui-example-code>\n\n<h2>Additional Features</h2>\n<ul>\n    <li>\n        Define custom colors for the chart by assigning a string array of css\n        color variables, color keywords, or RGB hex values to the\n        <code>chartColors</code> property on the widget\'s\n        <code>configuration</code> input (<code\n            ><a\n                href="../interfaces/IProportionalWidgetConfig.html"\n                target="_blank"\n                >IProportionalWidgetConfig</a\n            ></code\n        >). Also, you can use data-driven approach for setting the colors - just\n        put the <code>color</code> property in the widget data series. You can\n        use <code>prioritizeWidgetColors</code> property if you want for widget\n        colors to override data colors. For all that, take a look at the example\n        under the source code expander above.\n    </li>\n</ul>\n'},14947:(o,e,n)=>{"use strict";n.r(e),n.d(e,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport { Component } from "@angular/core";\n\n@Component({\n    selector: "nui-proportional-docs",\n    templateUrl: "./proportional-docs.component.html",\n})\nexport class ProportionalDocsComponent {\n    public proportionalWidgetFileText =\n        require("!!raw-loader!../../../../../../src/lib/widget-types/proportional/proportional-widget.ts")\n            .default;\n    public proportionalConfiguratorFileText =\n        require("!!raw-loader!../../../../../../src/lib/widget-types/proportional/proportional-configurator.ts")\n            .default;\n}\n'},42661:(o,e,n)=>{"use strict";n.r(e),n.d(e,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport { NgModule } from "@angular/core";\nimport { RouterModule, Routes } from "@angular/router";\n\nimport {\n    NuiButtonModule,\n    NuiDocsModule,\n    NuiMessageModule,\n    NuiSwitchModule,\n    DEMO_PATH_TOKEN,\n} from "@nova-ui/bits";\nimport { NuiDashboardsModule } from "@nova-ui/dashboards";\n\nimport { getDemoFiles } from "../../../../demo-files-factory";\nimport { ProportionalDocsComponent } from "./proportional-docs.component";\nimport { ProportionalDonutContentDocsComponent } from "./proportional-donut-content-docs.component";\nimport { ProportionalWidgetDonutContentFormattersExampleComponent } from "./proportional-donut-content-formatters/proportional-donut-content-formatters-example.component";\nimport { ProportionalWidgetExampleComponent } from "./proportional-widget/proportional-widget-example.component";\nimport { ProportionalWidgetInteractiveExampleComponent } from "./proportional-widget-interactive/proportional-widget-interactive-example.component";\n\nconst routes: Routes = [\n    {\n        path: "",\n        component: ProportionalDocsComponent,\n        data: {\n            srlc: {\n                hideIndicator: true,\n            },\n            showThemeSwitcher: true,\n        },\n    },\n    {\n        path: "example",\n        component: ProportionalWidgetExampleComponent,\n        data: {\n            srlc: {\n                hideIndicator: true,\n            },\n        },\n    },\n    {\n        path: "donut-content-formatters",\n        component: ProportionalDonutContentDocsComponent,\n        data: {\n            srlc: {\n                hideIndicator: true,\n            },\n        },\n    },\n    {\n        path: "donut-content-formatters-example",\n        component: ProportionalWidgetDonutContentFormattersExampleComponent,\n        data: {\n            srlc: {\n                hideIndicator: true,\n            },\n        },\n    },\n    {\n        path: "proportional-widget-interactive-example",\n        component: ProportionalWidgetInteractiveExampleComponent,\n        data: {\n            srlc: {\n                hideIndicator: true,\n            },\n        },\n    },\n];\n\n@NgModule({\n    imports: [\n        RouterModule.forChild(routes),\n        NuiButtonModule,\n        NuiDocsModule,\n        NuiDashboardsModule,\n        NuiMessageModule,\n        NuiSwitchModule,\n    ],\n    declarations: [\n        ProportionalDocsComponent,\n        ProportionalWidgetExampleComponent,\n        ProportionalWidgetInteractiveExampleComponent,\n        ProportionalWidgetDonutContentFormattersExampleComponent,\n        ProportionalDonutContentDocsComponent,\n    ],\n    providers: [\n        {\n            provide: DEMO_PATH_TOKEN,\n            useValue: getDemoFiles("proportional"),\n        },\n    ],\n})\nexport default class ProportionalDocsModule {}\n'},68992:(o,e,n)=>{"use strict";n.r(e),n.d(e,{default:()=>t});const t='<h1>Proportional Widget Donut Chart Content Configuration</h1>\n\n<p>Donut Content configuration consists of two basic logic elements:</p>\n<ul>\n    <li>\n        <code>aggregator</code> - an element that is responsible for processing\n        ALL the metrics in chart and return a single value. For example,\n        <code>percentageAggregator</code> - processes all the metrics and takes\n        a percentage of a certain metric (configurable).\n    </li>\n    <li>\n        <code>formatter</code> - an element that changes the representation of a\n        single value. In terms of the proportional donut content, processes the\n        output of an <code>aggregator</code>.\n    </li>\n</ul>\n<h3>Default aggregators available</h3>\n<ul>\n    <li>\n        <strong>Sum Aggregator</strong> - Gets the sum of all the metrics in the\n        chart. <code>aggregatorType: sumAggregator</code>\n    </li>\n    <li>\n        <strong>Percentage Aggregator</strong> - Gets the percentage of a\n        specified metric among the other metrics.\n        <code>aggregatorType: percentageAggregator</code>\n    </li>\n    <li>\n        <strong>Field Mapper</strong> - Allows to map chart series fields to be\n        displayed in the donut center. For example, if you want to display some\n        value in the series data, you can use field mapper to get the value from\n        the chart series. Check the configuration section in the example for\n        more details. <code>aggregatorType: fieldMapper</code>.\n    </li>\n</ul>\n<h3>Default formatters available</h3>\n<ul>\n    <li>\n        <strong>Raw Formatter</strong> - displays the value as it.\n        <code>componentType: RawFormatterComponent</code>\n    </li>\n    <li>\n        <strong>Percentage Formatter</strong> - displays the value and the\n        <code>%</code> sign.\n        <code>componentType: PercentageFormatterComponent</code>\n    </li>\n    <li>\n        <strong>Si Units Formatter</strong> - displays the\n        <code>number</code> value using SI system prefixes (k, M, G etc.). For\n        example, <code>123456789</code> value will be displayed as\n        <code>123.5 M</code>.\n        <code>componentType: SiUnitsFormatterComponent</code>\n    </li>\n</ul>\n\n<nui-example-wrapper\n    filenamePrefix="proportional-donut-content-formatters"\n    exampleTitle="Proportional Widget with Donut Content"\n>\n    <proportional-widget-donut-content-formatters-example></proportional-widget-donut-content-formatters-example>\n</nui-example-wrapper>\n\n<h2>DataSource setup</h2>\n<p>\n    Before proceeding, to the widget configuration it\'s necessary to setup the\n    dataSource first. It\'s necessary for the correct work of the configurator.\n</p>\n<p>\n    DataSource should describe its <code>dataFields</code>, so be sure to check\n    the\n    <a\n        href="../additional-documentation/anatomy/data-sources.html"\n        target="_blank"\n        >DataSource Documentation</a\n    >\n    before proceeding. Moreover, for the Donut Content configuration it\'s\n    necessary that <code>dataFieldsConfig</code> to implement the\n    <a\n        href="../../interfaces/IProportionalDataFieldsConfig.html"\n        target="_blank"\n        >IProportionalDataFieldsConfig</a\n    >\n    interface, as follows:\n</p>\n<nui-example-code language="typescript">\n    {{ dataSourceDataFieldsConfig }}\n</nui-example-code>\n<p>Check the code under the source expander for more details.</p>\n\n<h2>Widget Configuration</h2>\n<p>\n    To configure the donut content you need to set\n    <a href="../../interfaces/IDonutContentConfig.html" target="_blank"\n        >donutContentConfig</a\n    >\n    in <code>donutContentConfig</code> in the <code>chartOptions</code> section.\n    Following config example shows the config for setting Sum aggregation with\n    Si Units Formatter applied to it.\n</p>\n<p>\n    <strong>Note: </strong> please be aware that this config has top priority\n    over\n</p>\n<nui-example-code language="typescript">\n    {{ widgetConfigSlice }}\n</nui-example-code>\n\n<h3>Setting up the Configurator</h3>\n<p>\n    Having such a configuration, involves having a different configurator\n    section configuration, otherwise the default configuration section\n    <strong>won\'t work!</strong>\n</p>\n<p>\n    To setup the Configurator, please check the\n    <strong>setupConfigurator</strong> dashboard method implementation. You can\n    find the sources under the dashboard source expander.\n</p>\n'},3712:(o,e,n)=>{"use strict";n.r(e),n.d(e,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport { Component } from "@angular/core";\n\n@Component({\n    selector: "nui-proportional-donut-content-docs",\n    templateUrl: "./proportional-donut-content-docs.component.html",\n})\nexport class ProportionalDonutContentDocsComponent {\n    public dataSourceDataFieldsConfig = `\npublic dataFieldsConfig: IProportionalDataFieldsConfig = {\n    dataFields$: new BehaviorSubject<IDataField[]>(this.dataFields),\n    chartSeriesDataFields$: new BehaviorSubject<IDataField[]>(this.chartSeriesDataFields),\n};\n    `;\n\n    public widgetConfigSlice = `\n"properties": {\n    "configuration": {\n        "chartOptions": {\n            donutContentConfig: {\n                formatter: {\n                    componentType: SiUnitsFormatterComponent.lateLoadKey,\n                },\n                aggregator: {\n                    aggregatorType: sumAggregator.aggregatorType,\n                },\n            },\n        }\n    }\n}\n\n    `;\n}\n'},86246:(o,e,n)=>{"use strict";n.r(e),n.d(e,{default:()=>t});const t='<div class="mb-2 d-flex align-items-center">\n    <nui-switch class="ml-3 py-2" [(value)]="editMode" i18n>\n        Edit Mode\n    </nui-switch>\n    <button\n        *ngIf="!dashboard?.widgets[\'proportionalWidgetId\']"\n        type="button"\n        displayStyle="action"\n        (click)="reInitializeDashboard()"\n        nui-button\n    >\n        Restore Widget\n    </button>\n</div>\n\n<div class="w-100 dashboard">\n    \x3c!--\n        Note: The dashboard and gridsterConfig input assignments must use banana-in-a-box notation to keep\n        the dashboard state updated with changes to the pizzagna.\n    --\x3e\n    <nui-dashboard\n        *ngIf="dashboard"\n        [(dashboard)]="dashboard"\n        [editMode]="editMode"\n        [(gridsterConfig)]="gridsterConfig"\n        nuiWidgetEditor\n    >\n    </nui-dashboard>\n</div>\n'},17206:(o,e,n)=>{"use strict";n.r(e),n.d(e,{default:()=>t});const t=".dashboard {\n    height: 370px;\n}\n"},70706:(o,e,n)=>{"use strict";n.r(e),n.d(e,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport {\n    ChangeDetectorRef,\n    Component,\n    Injectable,\n    OnDestroy,\n    OnInit,\n} from "@angular/core";\nimport { GridsterConfig, GridsterItem } from "angular-gridster2";\nimport { BehaviorSubject } from "rxjs";\n\nimport {\n    DataSourceService,\n    IDataField,\n    IDataSource,\n    IFilteringOutputs,\n} from "@nova-ui/bits";\nimport { IAccessors, IChartAssistSeries } from "@nova-ui/charts";\nimport {\n    DATA_SOURCE,\n    DEFAULT_LEGEND_FORMATTERS,\n    DEFAULT_PIZZAGNA_ROOT,\n    DEFAULT_PROPORTIONAL_CONTENT_AGGREGATORS,\n    DEFAULT_PROPORTIONAL_CONTENT_FORMATTERS,\n    DONUT_CONTENT_CONFIGURATION_SLICE,\n    IDashboard,\n    IDonutContentConfig,\n    IProportionalDataFieldsConfig,\n    IProportionalWidgetChartOptions,\n    IProportionalWidgetConfig,\n    IProviderConfiguration,\n    IWidget,\n    IWidgets,\n    LegendPlacement,\n    PizzagnaLayer,\n    ProportionalContentAggregatorsRegistryService,\n    ProportionalDonutContentFormattersRegistryService,\n    ProportionalLegendFormattersRegistryService,\n    ProportionalWidgetChartTypes,\n    ProviderRegistryService,\n    SiUnitsFormatterComponent,\n    sumAggregator,\n    WellKnownPathKey,\n    WellKnownProviders,\n    WidgetTypesService,\n} from "@nova-ui/dashboards";\n\nimport { IMockBeerReview } from "../models";\n\n/**\n * A simple proportional data source to retrieve beer review counts by city\n */\n@Injectable()\nexport class BeerReviewCountsByCityMockDataSource\n    extends DataSourceService<IChartAssistSeries<IAccessors>>\n    implements IDataSource<IChartAssistSeries<IAccessors>>, OnDestroy\n{\n    public static providerId = "BeerReviewCountsByCityMockDataSource";\n    public busy = new BehaviorSubject(false);\n\n    protected dataFields: IDataField[] = [\n        {\n            id: "Brno",\n            label: "Brno",\n            // @ts-ignore\n            dataType: null,\n        },\n        {\n            id: "kyiv",\n            label: "Kyiv",\n            // @ts-ignore\n            dataType: null,\n        },\n        {\n            id: "austin",\n            label: "Austin",\n            // @ts-ignore\n            dataType: null,\n        },\n        {\n            id: "lisbon",\n            label: "Lisbon",\n            // @ts-ignore\n            dataType: null,\n        },\n        {\n            id: "sydney",\n            label: "Sydney",\n            // @ts-ignore\n            dataType: null,\n        },\n        {\n            id: "nur-sultan",\n            label: "Nur-Sultan",\n            // @ts-ignore\n            dataType: null,\n        },\n    ];\n    protected chartSeriesDataFields: IDataField[] = [\n        // default field in the chart series that is used for the aggregation\n        {\n            id: "data[0]",\n            label: "data",\n            // @ts-ignore\n            dataType: null,\n        },\n        // any custom field in the chart series that is used for the aggregation\n        {\n            id: "customDonutContent",\n            label: "Custom Donut Content",\n            // @ts-ignore\n            dataType: null,\n        },\n    ];\n\n    /**\n     * DataSource needs to implement the "IDataFieldsConfig" for this scenario.\n     *\n     * It\'s necessary to provide the "chartSeriesDataFields",\n     * that\'s why proportional widget dataSource has it\'s own interface for that - IProportionalDataFieldsConfig.\n     *\n     * dataFields$ - stands for possible series fields\n     * chartSeriesDataFields$ - stands for the fields IN the series\n     *\n     * see declaration of "dataFields" and "chartSeriesDataFields" for the example.\n     */\n    public dataFieldsConfig: IProportionalDataFieldsConfig = {\n        dataFields$: new BehaviorSubject<IDataField[]>(this.dataFields),\n        chartSeriesDataFields$: new BehaviorSubject<IDataField[]>(\n            this.chartSeriesDataFields\n        ),\n    };\n\n    public async getFilteredData(): Promise<IFilteringOutputs> {\n        this.busy.next(true);\n        return new Promise((resolve) => {\n            setTimeout(() => {\n                this.outputsSubject.next({\n                    result: getMockBeerReviewCountsByCity(),\n                });\n                this.busy.next(false);\n            }, 300);\n        });\n    }\n\n    public ngOnDestroy(): void {\n        this.outputsSubject.complete();\n    }\n}\n\n/**\n * A component that instantiates the dashboard\n */\n@Component({\n    selector: "proportional-widget-donut-content-formatters-example",\n    templateUrl:\n        "./proportional-donut-content-formatters-example.component.html",\n    styleUrls: [\n        "./proportional-donut-content-formatters-example.component.less",\n    ],\n})\nexport class ProportionalWidgetDonutContentFormattersExampleComponent\n    implements OnInit\n{\n    public dashboard: IDashboard | undefined;\n\n    // Angular gridster requires a configuration object even if it\'s empty.\n    // Pass this to the dashboard component\'s gridsterConfig input in the template.\n    public gridsterConfig: GridsterConfig = {};\n\n    // Boolean passed as an input to the dashboard. When true, widgets can be moved, resized, removed, or edited\n    public editMode: boolean = false;\n\n    constructor(\n        // WidgetTypesService provides the widget\'s necessary structure information\n        private widgetTypesService: WidgetTypesService,\n        // In general, the ProviderRegistryService is used for making entities available for injection into dynamically loaded components.\n        private providerRegistry: ProviderRegistryService,\n        // registry for adding the formatter for donut content\n        contentFormattersRegistry: ProportionalDonutContentFormattersRegistryService,\n        // registry for adding the formatter for proportional legend\n        legendFormattersRegistry: ProportionalLegendFormattersRegistryService,\n        // registry for adding the aggregators for donut content\n        aggregatorRegistry: ProportionalContentAggregatorsRegistryService,\n        private changeDetectorRef: ChangeDetectorRef\n    ) {\n        // on the dashboard startup, it\'s necessary to add possible content formatters, legend formatters and content aggregators to the registry.\n        // using registry is a way for setting the available formatters.\n        legendFormattersRegistry.addItems(DEFAULT_LEGEND_FORMATTERS);\n        contentFormattersRegistry.addItems(\n            DEFAULT_PROPORTIONAL_CONTENT_FORMATTERS\n        );\n        aggregatorRegistry.addItems(DEFAULT_PROPORTIONAL_CONTENT_AGGREGATORS);\n    }\n\n    public ngOnInit(): void {\n        // Grabbing the widget\'s default template which will be needed as a parameter for setNode\n        const widgetTemplate = this.widgetTypesService.getWidgetType(\n            "proportional",\n            1\n        );\n\n        // Registering our data sources as dropdown options in the widget editor/configurator\n        // Note: This could also be done in the parent module\'s constructor so that\n        // multiple dashboards could have access to the same widget template modification.\n        this.widgetTypesService.setNode(\n            // This is the template we grabbed above with getWidgetType\n            widgetTemplate,\n            // We are setting the editor/configurator part of the widget template\n            "configurator",\n            // This indicates which node you are changing and we want to change\n            // the data source providers available for selection in the editor.\n            WellKnownPathKey.DataSourceProviders,\n            // We are setting the data sources available for selection in the editor\n            [BeerReviewCountsByCityMockDataSource.providerId]\n        );\n\n        // Setup of the configurator is done here\n        this.setupConfigurator();\n\n        // Registering the data source for injection into the Proportional widget.\n        this.providerRegistry.setProviders({\n            [BeerReviewCountsByCityMockDataSource.providerId]: {\n                provide: DATA_SOURCE,\n                useClass: BeerReviewCountsByCityMockDataSource,\n                deps: [],\n            },\n        });\n\n        this.initializeDashboard();\n    }\n\n    /** Used for restoring widgets state */\n    public reInitializeDashboard(): void {\n        // destroys the components and their providers so the dashboard can re init data\n        this.dashboard = undefined;\n        this.changeDetectorRef.detectChanges();\n\n        this.initializeDashboard();\n    }\n\n    private initializeDashboard(): void {\n        // We\'re using a static configuration object for this example, but this is where\n        // the widget\'s configuration could potentially be populated from a database\n        const widgetIndex: IWidgets = {\n            // Complete the proportional widget with information coming from its type definition\n            [widgetConfig.id]:\n                this.widgetTypesService.mergeWithWidgetType(widgetConfig),\n        };\n\n        // Setting the widget dimensions and position (this is for gridster)\n        const positions: Record<string, GridsterItem> = {\n            [widgetConfig.id]: {\n                cols: 6,\n                rows: 6,\n                y: 0,\n                x: 0,\n            },\n        };\n\n        // Finally, assigning the variables we created above to the dashboard\n        this.dashboard = {\n            positions,\n            widgets: widgetIndex,\n        };\n    }\n\n    /**\n     * Sets up the configurator sections for proportional donut\n     */\n    private setupConfigurator() {\n        const widgetTemplate = this.widgetTypesService.getWidgetType(\n            "proportional",\n            1\n        );\n\n        // remove old "presentation", "chartOptionsEditor" and "donutContentConfiguration" sections from the configurator\n        delete widgetTemplate.configurator?.structure?.presentation;\n        delete widgetTemplate.configurator?.structure?.chartOptionsEditor;\n        delete widgetTemplate.configurator?.structure\n            ?.donutContentConfiguration;\n\n        // add new "presentation" section\n        this.widgetTypesService.setNode(\n            widgetTemplate,\n            "configurator",\n            "presentation",\n            DONUT_CONTENT_CONFIGURATION_SLICE.presentation\n        );\n        // add new "chartOptionsEditor" section\n        this.widgetTypesService.setNode(\n            widgetTemplate,\n            "configurator",\n            "chartOptionsEditor",\n            DONUT_CONTENT_CONFIGURATION_SLICE.chartOptionsEditor\n        );\n        // add new "donutContentConfiguration" section\n        this.widgetTypesService.setNode(\n            widgetTemplate,\n            "configurator",\n            "donutContentConfiguration",\n            DONUT_CONTENT_CONFIGURATION_SLICE.donutContentConfiguration\n        );\n    }\n}\n\nconst widgetConfig: IWidget = {\n    id: "proportionalWidgetId",\n    type: "proportional",\n    pizzagna: {\n        [PizzagnaLayer.Configuration]: {\n            [DEFAULT_PIZZAGNA_ROOT]: {\n                providers: {},\n            },\n            header: {\n                properties: {\n                    title: "Beer Review Tally by City",\n                    subtitle: "These People Love Beer",\n                },\n            },\n            chart: {\n                providers: {\n                    [WellKnownProviders.DataSource]: {\n                        // Setting the data source providerId for the chart\n                        providerId:\n                            BeerReviewCountsByCityMockDataSource.providerId,\n                    } as IProviderConfiguration,\n                },\n                properties: {\n                    configuration: {\n                        chartOptions: {\n                            type: ProportionalWidgetChartTypes.DonutChart,\n                            legendPlacement: LegendPlacement.Right,\n                            // old configuration looks like this\n                            // contentFormatter: {\n                            //     componentType: DonutContentSumFormatterComponent.lateLoadKey,\n                            // },\n\n                            // NEW configuration looks like this\n                            donutContentConfig: {\n                                formatter: {\n                                    componentType:\n                                        SiUnitsFormatterComponent.lateLoadKey,\n                                },\n                                aggregator: {\n                                    aggregatorType:\n                                        sumAggregator.aggregatorType,\n                                    properties: {\n                                        // example of a default metric to be used for the percentage calculation\n                                        // activeMetricId: "austin",\n                                    },\n                                },\n                            } as IDonutContentConfig,\n                        } as IProportionalWidgetChartOptions,\n                    } as IProportionalWidgetConfig,\n                },\n            },\n        },\n    },\n};\n\nexport function getMockBeerReviewCountsByCity(): IMockBeerReview[] {\n    return [\n        {\n            id: "Brno",\n            name: "Brno",\n            data: [Math.round(Math.random() * 1000000)],\n            icon: "status_down",\n            link: "https://en.wikipedia.org/wiki/Brno",\n            value: "Brno",\n            customDonutContent: "Custom Brno",\n        },\n        {\n            id: "kyiv",\n            name: "Kyiv",\n            data: [Math.round(Math.random() * 1000000)],\n            icon: "status_critical",\n            link: "https://en.wikipedia.org/wiki/Kyiv",\n            value: "Kyiv",\n            customDonutContent: "Custom Kyiv",\n        },\n        {\n            id: "austin",\n            name: "Austin",\n            data: [Math.round(Math.random() * 1000000)],\n            icon: "status_warning",\n            link: "https://en.wikipedia.org/wiki/Austin",\n            value: "Austin",\n            customDonutContent: "Custom Austin",\n        },\n        {\n            id: "lisbon",\n            name: "Lisbon",\n            data: [Math.round(Math.random() * 1000000)],\n            icon: "status_unknown",\n            link: "https://en.wikipedia.org/wiki/Lisbon",\n            value: "Lisbon",\n            customDonutContent: "Custom Lisbon",\n        },\n        {\n            id: "sydney",\n            name: "Sydney",\n            data: [Math.round(Math.random() * 1000000)],\n            icon: "status_up",\n            link: "https://en.wikipedia.org/wiki/Sydney",\n            value: "Sydney",\n            customDonutContent: "Custom Sydney",\n        },\n        {\n            id: "nur-sultan",\n            name: "Nur-Sultan",\n            data: [Math.round(Math.random() * 1000000)],\n            icon: "status_unmanaged",\n            link: "https://en.wikipedia.org/wiki/Nur-Sultan",\n            value: "Nur-Sultan",\n            customDonutContent: "Custom Nur-Sultan",\n        },\n    ].sort((a, b) => a.data[0] - b.data[0]);\n}\n'},61446:(o,e,n)=>{"use strict";n.r(e),n.d(e,{default:()=>t});const t='<div class="mb-2 d-flex align-items-center">\n    <nui-switch class="ml-3 py-2" [(value)]="editMode" i18n>\n        Edit Mode\n    </nui-switch>\n    <button\n        *ngIf="!dashboard?.widgets[\'proportionalWidgetId\']"\n        type="button"\n        displayStyle="action"\n        (click)="reInitializeDashboard()"\n        nui-button\n    >\n        Restore Widget\n    </button>\n</div>\n\n<div class="w-100 dashboard">\n    \x3c!--\n        Note: The dashboard and gridsterConfig input assignments must use banana-in-a-box notation to keep\n        the dashboard state updated with changes to the pizzagna.\n    --\x3e\n    <nui-dashboard\n        *ngIf="dashboard"\n        [(dashboard)]="dashboard"\n        [editMode]="editMode"\n        [(gridsterConfig)]="gridsterConfig"\n        nuiWidgetEditor\n    >\n    </nui-dashboard>\n</div>\n'},19254:(o,e,n)=>{"use strict";n.r(e),n.d(e,{default:()=>t});const t=".dashboard {\n    height: 375px;\n}\n"},19346:(o,e,n)=>{"use strict";n.r(e),n.d(e,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport {\n    ChangeDetectorRef,\n    Component,\n    Injectable,\n    OnDestroy,\n    OnInit,\n} from "@angular/core";\nimport { GridsterConfig, GridsterItem } from "angular-gridster2";\nimport keyBy from "lodash/keyBy";\nimport { BehaviorSubject } from "rxjs";\n\nimport {\n    DataSourceService,\n    IDataSource,\n    IFilteringOutputs,\n} from "@nova-ui/bits";\nimport {\n    DATA_SOURCE,\n    DEFAULT_PIZZAGNA_ROOT,\n    IDashboard,\n    IProportionalWidgetChartOptions,\n    IProportionalWidgetConfig,\n    IProportionalWidgetData,\n    IProviderConfiguration,\n    IWidget,\n    LegendPlacement,\n    NOVA_URL_INTERACTION_HANDLER,\n    PizzagnaLayer,\n    ProportionalWidgetChartTypes,\n    ProviderRegistryService,\n    WellKnownPathKey,\n    WellKnownProviders,\n    WidgetTypesService,\n} from "@nova-ui/dashboards";\n\nimport { IMockBeerReview } from "../models";\n\n/**\n * A simple proportional data source to retrieve beer review counts by city\n */\n@Injectable()\nexport class ReviewCountsByCityMockDataSource\n    extends DataSourceService<IProportionalWidgetData>\n    implements IDataSource<IProportionalWidgetData>, OnDestroy\n{\n    // This is the ID we\'ll use to identify the provider\n    public static providerId = "ReviewCountsByCityMockDataSource";\n    public busy = new BehaviorSubject(false);\n\n    public async getFilteredData(): Promise<IFilteringOutputs> {\n        this.busy.next(true);\n        return new Promise((resolve) => {\n            setTimeout(() => {\n                this.outputsSubject.next({\n                    result: getMockBeerReviewCountsByCity(),\n                });\n                this.busy.next(false);\n            }, 300);\n        });\n    }\n\n    public ngOnDestroy(): void {\n        this.outputsSubject.complete();\n    }\n}\n\n/**\n * A component that instantiates the dashboard\n */\n@Component({\n    selector: "proportional-widget-interactive-example",\n    templateUrl: "./proportional-widget-interactive-example.component.html",\n    styleUrls: ["./proportional-widget-interactive-example.component.less"],\n})\nexport class ProportionalWidgetInteractiveExampleComponent implements OnInit {\n    // This variable will hold all the data needed to define the layout and behavior of the widgets.\n    // Pass this to the dashboard component\'s dashboard input in the template.\n    public dashboard: IDashboard | undefined;\n\n    // Angular gridster requires a configuration object even if it\'s empty.\n    // Pass this to the dashboard component\'s gridsterConfig input in the template.\n    public gridsterConfig: GridsterConfig = {};\n\n    // Boolean passed as an input to the dashboard. When true, widgets can be moved, resized, removed, or edited\n    public editMode: boolean = false;\n\n    constructor(\n        // WidgetTypesService provides the widget\'s necessary structure information\n        private widgetTypesService: WidgetTypesService,\n        // In general, the ProviderRegistryService is used for making entities available for injection into dynamically loaded components.\n        private providerRegistry: ProviderRegistryService,\n        private changeDetectorRef: ChangeDetectorRef\n    ) {}\n\n    public ngOnInit(): void {\n        // Grabbing the widget\'s default template which will be needed as a parameter for setNode\n        const widgetTemplate = this.widgetTypesService.getWidgetType(\n            "proportional",\n            1\n        );\n\n        // Registering our data sources as dropdown options in the widget editor/configurator\n        // Note: This could also be done in the parent module\'s constructor so that\n        // multiple dashboards could have access to the same widget template modification.\n        this.widgetTypesService.setNode(\n            // This is the template we grabbed above with getWidgetType\n            widgetTemplate,\n            // We are setting the editor/configurator part of the widget template\n            "configurator",\n            // This indicates which node you are changing and we want to change\n            // the data source providers available for selection in the editor.\n            WellKnownPathKey.DataSourceProviders,\n            // We are setting the data sources available for selection in the editor\n            [ReviewCountsByCityMockDataSource.providerId]\n        );\n\n        // Registering the data source for injection into the Proportional widget.\n        this.providerRegistry.setProviders({\n            [ReviewCountsByCityMockDataSource.providerId]: {\n                provide: DATA_SOURCE,\n                useClass: ReviewCountsByCityMockDataSource,\n                deps: [],\n            },\n        });\n\n        this.initializeDashboard();\n    }\n\n    /** Used for restoring widgets state */\n    public reInitializeDashboard(): void {\n        // destroys the components and their providers so the dashboard can re init data\n        this.dashboard = undefined;\n        this.changeDetectorRef.detectChanges();\n\n        this.initializeDashboard();\n    }\n\n    public initializeDashboard(): void {\n        // We\'re using a static configuration object for this example, but this is where\n        // the widget\'s configuration could potentially be populated from a database\n        const widgetsWithStructure = widgetConfigs.map((w) =>\n            this.widgetTypesService.mergeWithWidgetType(w)\n        );\n        const widgetsIndex = keyBy(widgetsWithStructure, (w: IWidget) => w.id);\n\n        // Setting the widget dimensions and position (this is for gridster)\n        const positions: Record<string, GridsterItem> = {\n            [widgetConfigs[0].id]: {\n                cols: 6,\n                rows: 6,\n                y: 0,\n                x: 0,\n            },\n            [widgetConfigs[1].id]: {\n                cols: 6,\n                rows: 6,\n                y: 0,\n                x: 6,\n            },\n        };\n\n        // Finally, assigning the variables we created above to the dashboard\n        this.dashboard = {\n            positions,\n            widgets: widgetsIndex,\n        };\n    }\n}\n\nconst widgetConfigs: IWidget[] = [\n    {\n        id: "widget1",\n        type: "proportional",\n        pizzagna: {\n            [PizzagnaLayer.Configuration]: {\n                [DEFAULT_PIZZAGNA_ROOT]: {\n                    providers: {\n                        // Configuring the UrlInteractionHandler to handle interactions\n                        [WellKnownProviders.InteractionHandler]: {\n                            providerId: NOVA_URL_INTERACTION_HANDLER,\n                            properties: {\n                                // the \'url\' property tells the handler what link to use when interaction occurs on the series\n                                // if the series does not have a link we are passing one to the handler\n                                url: "${data.link || \'https://en.wikipedia.org/wiki/\'+data.id}",\n                                // by default the link is opened in the current window, set \'newWindow\' to true to open in a new tab instead\n                                // newWindow: true,\n                            },\n                        },\n                    },\n                },\n                header: {\n                    properties: {\n                        title: "Proportional Widget",\n                        subtitle: "With interaction handler",\n                    },\n                },\n                chart: {\n                    providers: {\n                        [WellKnownProviders.DataSource]: {\n                            // Setting the data source providerId for the chart\n                            providerId:\n                                ReviewCountsByCityMockDataSource.providerId,\n                        } as IProviderConfiguration,\n                    },\n                    properties: {\n                        configuration: {\n                            // Setting the interactive to true\n                            interactive: true,\n                            chartOptions: {\n                                type: ProportionalWidgetChartTypes.VerticalBarChart,\n                                legendPlacement: LegendPlacement.Bottom,\n                            } as IProportionalWidgetChartOptions,\n                            prioritizeWidgetColors: false,\n                        } as IProportionalWidgetConfig,\n                    },\n                },\n            },\n        },\n    },\n    {\n        id: "widget2",\n        type: "proportional",\n        pizzagna: {\n            [PizzagnaLayer.Configuration]: {\n                header: {\n                    properties: {\n                        title: "Proportional Widget",\n                        subtitle: "Without interaction handler",\n                    },\n                },\n                chart: {\n                    providers: {\n                        [WellKnownProviders.DataSource]: {\n                            // Setting the data source providerId for the chart\n                            providerId:\n                                ReviewCountsByCityMockDataSource.providerId,\n                        } as IProviderConfiguration,\n                    },\n                    properties: {\n                        configuration: {\n                            // interactive set to false so series without links are not styled like a link\n                            interactive: false,\n                            chartOptions: {\n                                type: ProportionalWidgetChartTypes.HorizontalBarChart,\n                                legendPlacement: LegendPlacement.Bottom,\n                            } as IProportionalWidgetChartOptions,\n                            prioritizeWidgetColors: false,\n                        } as IProportionalWidgetConfig,\n                    },\n                },\n            },\n        },\n    },\n];\n\nexport function getMockBeerReviewCountsByCity(): IMockBeerReview[] {\n    return [\n        {\n            id: "Brno",\n            name: "Brno",\n            data: [Math.round(Math.random() * 100000)],\n            icon: "status_down",\n            link: "https://en.wikipedia.org/wiki/Brno",\n            value: "Brno",\n            color: "var(--nui-color-chart-one)",\n        },\n        {\n            id: "kyiv",\n            name: "Kyiv",\n            data: [Math.round(Math.random() * 100000)],\n            icon: "status_critical",\n            link: "https://en.wikipedia.org/wiki/Kyiv",\n            value: "Kyiv",\n            color: "var(--nui-color-chart-two)",\n        },\n        {\n            id: "austin",\n            name: "Austin",\n            data: [Math.round(Math.random() * 100000)],\n            icon: "status_warning",\n            value: "Austin",\n            color: "var(--nui-color-chart-three)",\n        },\n        {\n            id: "lisbon",\n            name: "Lisbon",\n            data: [Math.round(Math.random() * 100000)],\n            icon: "status_unknown",\n            link: "https://en.wikipedia.org/wiki/Lisbon",\n            value: "Lisbon",\n            color: "var(--nui-color-chart-four)",\n        },\n        {\n            id: "sydney",\n            name: "Sydney",\n            data: [Math.round(Math.random() * 100000)],\n            icon: "status_up",\n            value: "Sydney",\n            color: "var(--nui-color-chart-five)",\n        },\n        {\n            id: "nur-sultan",\n            name: "Nur-Sultan",\n            data: [Math.round(Math.random() * 100000)],\n            icon: "status_unmanaged",\n            value: "Nur-Sultan",\n            color: "var(--nui-color-chart-six)",\n        },\n    ].sort((a, b) => a.data[0] - b.data[0]);\n}\n'},6226:(o,e,n)=>{"use strict";n.r(e),n.d(e,{default:()=>t});const t='<div class="mb-2 d-flex align-items-center">\n    <nui-switch class="ml-3 py-2" [(value)]="editMode" i18n>\n        Edit Mode\n    </nui-switch>\n    <button\n        *ngIf="!dashboard?.widgets[\'proportionalWidgetId\']"\n        type="button"\n        displayStyle="action"\n        (click)="reInitializeDashboard()"\n        nui-button\n    >\n        Restore Widget\n    </button>\n</div>\n\n<div class="w-100 dashboard">\n    \x3c!--\n        Note: The dashboard and gridsterConfig input assignments must use banana-in-a-box notation to keep\n        the dashboard state updated with changes to the pizzagna.\n    --\x3e\n    <nui-dashboard\n        *ngIf="dashboard"\n        [(dashboard)]="dashboard"\n        [editMode]="editMode"\n        [(gridsterConfig)]="gridsterConfig"\n        nuiWidgetEditor\n    >\n    </nui-dashboard>\n</div>\n'},96714:(o,e,n)=>{"use strict";n.r(e),n.d(e,{default:()=>t});const t=".dashboard {\n    height: 400px;\n}\n"},47534:(o,e,n)=>{"use strict";n.r(e),n.d(e,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport {\n    ChangeDetectorRef,\n    Component,\n    Injectable,\n    OnDestroy,\n    OnInit,\n} from "@angular/core";\nimport { GridsterConfig, GridsterItem } from "angular-gridster2";\nimport { BehaviorSubject } from "rxjs";\n\nimport {\n    DataSourceService,\n    IDataSource,\n    IFilteringOutputs,\n} from "@nova-ui/bits";\nimport {\n    DATA_SOURCE,\n    DEFAULT_PIZZAGNA_ROOT,\n    IDashboard,\n    IProportionalWidgetChartOptions,\n    IProportionalWidgetConfig,\n    IProportionalWidgetData,\n    IProviderConfiguration,\n    IRefresherProperties,\n    IWidget,\n    IWidgets,\n    LegendPlacement,\n    PizzagnaLayer,\n    ProportionalWidgetChartTypes,\n    ProviderRegistryService,\n    WellKnownPathKey,\n    WellKnownProviders,\n    WidgetTypesService,\n} from "@nova-ui/dashboards";\n\nimport { IMockBeerReview } from "../models";\n\n/**\n * A simple proportional data source to retrieve beer review counts by city\n */\n@Injectable()\nexport class BeerReviewCountsByCityMockDataSource\n    extends DataSourceService<IProportionalWidgetData>\n    implements IDataSource<IProportionalWidgetData>, OnDestroy\n{\n    // This is the ID we\'ll use to identify the provider\n    public static providerId = "BeerReviewCountsByCityMockDataSource";\n    public busy = new BehaviorSubject(false);\n\n    public async getFilteredData(): Promise<IFilteringOutputs> {\n        this.busy.next(true);\n        return new Promise((resolve) => {\n            setTimeout(() => {\n                this.outputsSubject.next({\n                    result: getMockBeerReviewCountsByCity(),\n                });\n                this.busy.next(false);\n            }, 300);\n        });\n    }\n\n    public ngOnDestroy(): void {\n        this.outputsSubject.complete();\n    }\n}\n\n/**\n * A component that instantiates the dashboard\n */\n@Component({\n    selector: "proportional-widget-example",\n    templateUrl: "./proportional-widget-example.component.html",\n    styleUrls: ["./proportional-widget-example.component.less"],\n})\nexport class ProportionalWidgetExampleComponent implements OnInit {\n    // This variable will hold all the data needed to define the layout and behavior of the widgets.\n    // Pass this to the dashboard component\'s dashboard input in the template.\n    public dashboard: IDashboard | undefined;\n\n    // Angular gridster requires a configuration object even if it\'s empty.\n    // Pass this to the dashboard component\'s gridsterConfig input in the template.\n    public gridsterConfig: GridsterConfig = {};\n\n    // Boolean passed as an input to the dashboard. When true, widgets can be moved, resized, removed, or edited\n    public editMode: boolean = false;\n\n    constructor(\n        // WidgetTypesService provides the widget\'s necessary structure information\n        private widgetTypesService: WidgetTypesService,\n        // In general, the ProviderRegistryService is used for making entities available for injection into dynamically loaded components.\n        private providerRegistry: ProviderRegistryService,\n        private changeDetectorRef: ChangeDetectorRef\n    ) {}\n\n    public ngOnInit(): void {\n        // Grabbing the widget\'s default template which will be needed as a parameter for setNode\n        const widgetTemplate = this.widgetTypesService.getWidgetType(\n            "proportional",\n            1\n        );\n\n        // Registering our data sources as dropdown options in the widget editor/configurator\n        // Note: This could also be done in the parent module\'s constructor so that\n        // multiple dashboards could have access to the same widget template modification.\n        this.widgetTypesService.setNode(\n            // This is the template we grabbed above with getWidgetType\n            widgetTemplate,\n            // We are setting the editor/configurator part of the widget template\n            "configurator",\n            // This indicates which node you are changing and we want to change\n            // the data source providers available for selection in the editor.\n            WellKnownPathKey.DataSourceProviders,\n            // We are setting the data sources available for selection in the editor\n            [BeerReviewCountsByCityMockDataSource.providerId]\n        );\n\n        // Registering the data source for injection into the Proportional widget.\n        this.providerRegistry.setProviders({\n            [BeerReviewCountsByCityMockDataSource.providerId]: {\n                provide: DATA_SOURCE,\n                useClass: BeerReviewCountsByCityMockDataSource,\n                deps: [],\n            },\n        });\n\n        this.initializeDashboard();\n    }\n\n    /** Used for restoring widgets state */\n    public reInitializeDashboard(): void {\n        // destroys the components and their providers so the dashboard can re init data\n        this.dashboard = undefined;\n        this.changeDetectorRef.detectChanges();\n\n        this.initializeDashboard();\n    }\n\n    public initializeDashboard(): void {\n        // We\'re using a static configuration object for this example, but this is where\n        // the widget\'s configuration could potentially be populated from a database\n        const widgetIndex: IWidgets = {\n            // Complete the proportional widget with information coming from its type definition\n            [widgetConfig.id]:\n                this.widgetTypesService.mergeWithWidgetType(widgetConfig),\n        };\n\n        // Setting the widget dimensions and position (this is for gridster)\n        const positions: Record<string, GridsterItem> = {\n            [widgetConfig.id]: {\n                cols: 5,\n                rows: 6,\n                y: 0,\n                x: 0,\n            },\n        };\n\n        // Finally, assigning the variables we created above to the dashboard\n        this.dashboard = {\n            positions,\n            widgets: widgetIndex,\n        };\n    }\n}\n\nconst widgetConfig: IWidget = {\n    id: "proportionalWidgetId",\n    type: "proportional",\n    pizzagna: {\n        [PizzagnaLayer.Configuration]: {\n            [DEFAULT_PIZZAGNA_ROOT]: {\n                providers: {\n                    [WellKnownProviders.Refresher]: {\n                        properties: {\n                            // Configuring the refresher interval so that our data source is invoked every ten minutes\n                            interval: 60 * 10,\n                            enabled: true,\n                        } as IRefresherProperties,\n                    } as Partial<IProviderConfiguration>,\n                },\n            },\n            header: {\n                properties: {\n                    title: "Beer Review Tally by City",\n                    subtitle: "These People Love Beer",\n                },\n            },\n            chart: {\n                providers: {\n                    [WellKnownProviders.DataSource]: {\n                        // Setting the data source providerId for the chart\n                        providerId:\n                            BeerReviewCountsByCityMockDataSource.providerId,\n                    } as IProviderConfiguration,\n                },\n                properties: {\n                    configuration: {\n                        chartOptions: {\n                            type: ProportionalWidgetChartTypes.DonutChart,\n                            legendPlacement: LegendPlacement.Right,\n                        } as IProportionalWidgetChartOptions,\n                        // You can optionally define custom colors for the chart by setting the \'chartColors\' configuration property\n                        // "chartColors": [\n                        //     "var(--nui-color-chart-five)",\n                        //     "var(--nui-color-chart-six)",\n                        //     "var(--nui-color-chart-seven)",\n                        //     "var(--nui-color-chart-eight)",\n                        //     "var(--nui-color-chart-nine)",\n                        //     "var(--nui-color-chart-ten)",\n                        // ],\n                        // or use-mapped structure\n                        chartColors: {\n                            Brno: "var(--nui-color-chart-five)",\n                            kyiv: "var(--nui-color-chart-six)",\n                            austin: "var(--nui-color-chart-seven)",\n                            lisbon: "var(--nui-color-chart-eight)",\n                            sydney: "var(--nui-color-chart-nine)",\n                            "nur-sultan": "var(--nui-color-chart-ten)",\n                        },\n                        prioritizeWidgetColors: false,\n                    } as IProportionalWidgetConfig,\n                },\n            },\n        },\n    },\n};\n\nexport function getMockBeerReviewCountsByCity(): IMockBeerReview[] {\n    return [\n        {\n            id: "Brno",\n            name: "Brno",\n            data: [Math.round(Math.random() * 100000)],\n            icon: "status_down",\n            link: "https://en.wikipedia.org/wiki/Brno",\n            value: "Brno",\n            color: "var(--nui-color-chart-one)",\n        },\n        {\n            id: "kyiv",\n            name: "Kyiv",\n            data: [Math.round(Math.random() * 100000)],\n            icon: "status_critical",\n            link: "https://en.wikipedia.org/wiki/Kyiv",\n            value: "Kyiv",\n            color: "var(--nui-color-chart-two)",\n        },\n        {\n            id: "austin",\n            name: "Austin",\n            data: [Math.round(Math.random() * 100000)],\n            icon: "status_warning",\n            link: "https://en.wikipedia.org/wiki/Austin",\n            value: "Austin",\n            color: "var(--nui-color-chart-three)",\n        },\n        {\n            id: "lisbon",\n            name: "Lisbon",\n            data: [Math.round(Math.random() * 100000)],\n            icon: "status_unknown",\n            link: "https://en.wikipedia.org/wiki/Lisbon",\n            value: "Lisbon",\n            color: "var(--nui-color-chart-four)",\n        },\n        {\n            id: "sydney",\n            name: "Sydney",\n            data: [Math.round(Math.random() * 100000)],\n            icon: "status_up",\n            link: "https://en.wikipedia.org/wiki/Sydney",\n            value: "Sydney",\n            color: "var(--nui-color-chart-five)",\n        },\n        {\n            id: "nur-sultan",\n            name: "Nur-Sultan",\n            data: [Math.round(Math.random() * 100000)],\n            icon: "status_unmanaged",\n            link: "https://en.wikipedia.org/wiki/Nur-Sultan",\n            value: "Nur-Sultan",\n            color: "var(--nui-color-chart-six)",\n        },\n    ].sort((a, b) => a.data[0] - b.data[0]);\n}\n'},74901:(o,e,n)=>{"use strict";n.r(e),n.d(e,{default:()=>t});const t='<h1>Risk Score Widget</h1>\n\n<p>\n    Risk Score indicators are quantifiable measures designed to track any\n    metrics of a monitored system. The Risk Score widget displays the current\n    measurement of a Risk Score as a color level value on a gradient scale from\n    green to red and can display one or more individual metrics within a single\n    widget instance. It\'s useful for highlighting and promoting easy\n    comprehension of key metrics.\n</p>\n\n<nui-message type="info" [allowDismiss]="false">\n    For details on how to instantiate a Risk Score widget, take a look at the\n    inline comments under the source expander of the following example.\n</nui-message>\n<nui-example-wrapper\n    filenamePrefix="risk-score-widget-example"\n    exampleTitle="Risk Score widget"\n>\n    <risk-score-widget-example></risk-score-widget-example>\n</nui-example-wrapper>\n\n<h2>Widget Schema</h2>\n\n<p>\n    The code listings below are the source files for the Risk Score widget\n    definition with inline comments describing the parts that compose the\n    standard Risk Score widget type. It includes the widget\'s definition as well\n    as its corresponding configurator form for defining how to configure\n    (create/edit) the widget.\n</p>\n\n<h2>Widget</h2>\n\n<p>\n    This part shows the actual widget definition. It includes, among other\n    things, the components and providers that compose the widget itself.\n</p>\n\n<nui-example-code language="typescript">{{\n    riskScoreWidgetFileText\n}}</nui-example-code>\n\n<h2>Configurator</h2>\n\n<p>\n    This part shows the form that\'s used for configuring (creating/editing) the\n    widget.\n</p>\n\n<nui-example-code language="typescript">{{\n    riskScoreConfiguratorFileText\n}}</nui-example-code>\n'},34865:(o,e,n)=>{"use strict";n.r(e),n.d(e,{default:()=>t});const t='// \xa9 2023 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport { Component } from "@angular/core";\n\n@Component({\n    selector: "nui-risk-score-docs",\n    templateUrl: "./risk-score-docs.component.html",\n})\nexport class RiskScoreDocsComponent {\n    public riskScoreWidgetFileText =\n        require("!!raw-loader!../../../../../../src/lib/widget-types/risk-score/risk-score-widget.ts")\n            .default;\n    public riskScoreConfiguratorFileText =\n        require("!!raw-loader!../../../../../../src/lib/widget-types/risk-score/risk-score-configurator.ts")\n            .default;\n}\n'},80884:(o,e,n)=>{"use strict";n.r(e),n.d(e,{default:()=>t});const t='// \xa9 2023 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport { NgModule } from "@angular/core";\nimport { RouterModule, Routes } from "@angular/router";\n\nimport {\n    DEMO_PATH_TOKEN,\n    NuiButtonModule,\n    NuiDocsModule,\n    NuiMessageModule,\n    NuiSwitchModule,\n} from "@nova-ui/bits";\nimport { NuiDashboardsModule } from "@nova-ui/dashboards";\n\nimport { RiskScoreDocsComponent } from "./risk-score-docs.component";\nimport { RiskScoreWidgetExampleComponent } from "./risk-score-widget-example/risk-score-widget-example.component";\nimport { getDemoFiles } from "../../../../demo-files-factory";\n\nconst routes: Routes = [\n    {\n        path: "",\n        component: RiskScoreDocsComponent,\n        data: {\n            srlc: {\n                hideIndicator: true,\n            },\n            showThemeSwitcher: true,\n        },\n    },\n    {\n        path: "example",\n        component: RiskScoreWidgetExampleComponent,\n        data: {\n            srlc: {\n                hideIndicator: true,\n            },\n        },\n    },\n];\n\n@NgModule({\n    imports: [\n        RouterModule.forChild(routes),\n        NuiButtonModule,\n        NuiDocsModule,\n        NuiMessageModule,\n        NuiDashboardsModule,\n        NuiSwitchModule,\n    ],\n    declarations: [RiskScoreDocsComponent, RiskScoreWidgetExampleComponent],\n    providers: [\n        {\n            provide: DEMO_PATH_TOKEN,\n            useValue: getDemoFiles("risk-score"),\n        },\n    ],\n})\nexport default class RiskScoreDocsModule {}\n'},34638:(o,e,n)=>{"use strict";n.r(e),n.d(e,{default:()=>t});const t='<div class="mb-2 d-flex align-items-center">\n    <nui-switch class="ml-3 py-2" [(value)]="editMode" i18n>\n        Edit Mode\n    </nui-switch>\n    <button\n        *ngIf="!dashboard?.widgets[\'riskScoreWidgetId\']"\n        type="button"\n        displayStyle="action"\n        (click)="initializeDashboard()"\n        nui-button\n    >\n        Restore Widget\n    </button>\n</div>\n\n<div class="w-100 dashboard">\n    \x3c!--\n        Note: The dashboard and gridsterConfig input assignments must use banana-in-a-box notation to keep\n        the dashboard state updated with changes to the pizzagna.\n    --\x3e\n    <nui-dashboard\n        [(dashboard)]="dashboard"\n        [editMode]="editMode"\n        [(gridsterConfig)]="gridsterConfig"\n        nuiWidgetEditor\n    >\n    </nui-dashboard>\n</div>\n'},92062:(o,e,n)=>{"use strict";n.r(e),n.d(e,{default:()=>t});const t=".dashboard {\n    height: 400px;\n}\n"},89258:(o,e,n)=>{"use strict";n.r(e),n.d(e,{default:()=>t});const t='// \xa9 2023 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport { HttpClient, HttpErrorResponse } from "@angular/common/http";\nimport { Component, Injectable, OnDestroy, OnInit } from "@angular/core";\nimport { GridsterConfig, GridsterItem } from "angular-gridster2";\nimport { BehaviorSubject } from "rxjs";\nimport { finalize } from "rxjs/operators";\n\nimport { DataSourceService, IFilteringOutputs } from "@nova-ui/bits";\nimport {\n    DATA_SOURCE,\n    DEFAULT_PIZZAGNA_ROOT,\n    IDashboard,\n    IRiskScoreData,\n    IProviderConfiguration,\n    IRefresherProperties,\n    IWidget,\n    IWidgets,\n    RiskScoreTileComponent,\n    NOVA_KPI_DATASOURCE_ADAPTER,\n    PizzagnaLayer,\n    ProviderRegistryService,\n    WellKnownPathKey,\n    WellKnownProviders,\n    WidgetTypesService,\n} from "@nova-ui/dashboards";\n\n/**\n * A simple KPI data source to retrieve the average rating of Harry Potter and the Sorcerer\'s Stone (book) via googleapis\n */\n@Injectable()\nexport class AverageRatingRiskScoreDataSource\n    extends DataSourceService<IRiskScoreData>\n    implements OnDestroy\n{\n    // This is the ID we\'ll use to identify the provider\n    public static providerId = "AverageRatingRiskScoreDataSource";\n\n    // Use this subject to communicate the data source\'s busy state\n    public busy = new BehaviorSubject<boolean>(false);\n\n    constructor(private http: HttpClient) {\n        super();\n    }\n\n    // In this example, getFilteredData is invoked every 10 minutes (Take a look at the refresher\n    // provider definition in the widget configuration below to see how the interval is set)\n    public async getFilteredData(): Promise<IFilteringOutputs> {\n        this.busy.next(true);\n        return new Promise((resolve) => {\n            // *** Make a resource request to an external API (if needed)\n            this.http\n                .get("https://www.googleapis.com/books/v1/volumes/5MQFrgEACAAJ")\n                .pipe(finalize(() => this.busy.next(false)))\n                .subscribe({\n                    next: (data: any) => {\n                        resolve({\n                            result: {\n                                value: data.volumeInfo.averageRating,\n                            },\n                        });\n                    },\n                    error: (error: HttpErrorResponse) => {\n                        resolve({\n                            result: null,\n                            error: {\n                                type: error.status,\n                            },\n                        });\n                    },\n                });\n        });\n    }\n\n    public ngOnDestroy(): void {\n        this.outputsSubject.complete();\n    }\n}\n\n/**\n * A component that instantiates the dashboard\n */\n@Component({\n    selector: "risk-score-widget-example",\n    templateUrl: "./risk-score-widget-example.component.html",\n    styleUrls: ["./risk-score-widget-example.component.less"],\n})\nexport class RiskScoreWidgetExampleComponent implements OnInit {\n    // This variable will hold all the data needed to define the layout and behavior of the widgets.\n    // Pass this to the dashboard component\'s dashboard input in the template.\n    public dashboard: IDashboard;\n\n    // Angular gridster requires a configuration object even if it\'s empty.\n    // Pass this to the dashboard component\'s gridsterConfig input in the template.\n    public gridsterConfig: GridsterConfig = {};\n\n    // Boolean passed as an input to the dashboard. When true, widgets can be moved, resized, removed, or edited\n    public editMode: boolean = false;\n\n    constructor(\n        // WidgetTypesService provides the widget\'s necessary structure information\n        private widgetTypesService: WidgetTypesService,\n\n        // In general, the ProviderRegistryService is used for making entities available for injection into dynamically loaded components.\n        private providerRegistry: ProviderRegistryService\n    ) {}\n\n    public ngOnInit(): void {\n        // Grabbing the widget\'s default template which will be needed as a parameter for setNode\n        const widgetTemplate = this.widgetTypesService.getWidgetType(\n            "risk-score",\n            1\n        );\n        // Registering our data sources as dropdown options in the widget editor/configurator\n        // Note: This could also be done in the parent module\'s constructor so that\n        // multiple dashboards could have access to the same widget template modification.\n        this.widgetTypesService.setNode(\n            // This is the template we grabbed above with getWidgetType\n            widgetTemplate,\n            // We are setting the editor/configurator part of the widget template\n            "configurator",\n            // This indicates which node you are changing and we want to change\n            // the data source providers available for selection in the editor.\n            WellKnownPathKey.DataSourceProviders,\n            // We are setting the data sources available for selection in the editor\n            [AverageRatingRiskScoreDataSource.providerId]\n        );\n\n        // Registering the data source for injection into the KPI tile.\n        // Note: Each tile of a KPI widget is assigned its own instance of the data source\n        this.providerRegistry.setProviders({\n            [AverageRatingRiskScoreDataSource.providerId]: {\n                provide: DATA_SOURCE,\n                useClass: AverageRatingRiskScoreDataSource,\n                // Any dependencies that need to be injected into the provider must be listed here\n                deps: [HttpClient],\n            },\n        });\n\n        this.initializeDashboard();\n    }\n\n    public initializeDashboard(): void {\n        // We\'re using a static configuration object for this example, but this is where\n        // the widget\'s configuration could potentially be populated from a database\n        const riskScoreWidget = widgetConfig;\n        const widgetIndex: IWidgets = {\n            // Complete the KPI widget with information coming from its type definition\n            [riskScoreWidget.id]:\n                this.widgetTypesService.mergeWithWidgetType(riskScoreWidget),\n        };\n\n        // Setting the widget dimensions and position (this is for gridster)\n        const positions: Record<string, GridsterItem> = {\n            [riskScoreWidget.id]: {\n                cols: 4,\n                rows: 6,\n                y: 0,\n                x: 0,\n            },\n        };\n\n        // Finally, assigning the variables we created above to the dashboard\n        this.dashboard = {\n            positions,\n            widgets: widgetIndex,\n        };\n    }\n}\n\nconst widgetConfig: IWidget = {\n    id: "riskScoreWidgetId",\n    type: "risk-score",\n    pizzagna: {\n        [PizzagnaLayer.Configuration]: {\n            [DEFAULT_PIZZAGNA_ROOT]: {\n                providers: {\n                    [WellKnownProviders.Refresher]: {\n                        properties: {\n                            // Configuring the refresher interval so that our data source is invoked every ten minutes\n                            interval: 60 * 10,\n                            enabled: true,\n                        } as IRefresherProperties,\n                    } as Partial<IProviderConfiguration>,\n                },\n            },\n            header: {\n                properties: {\n                    title: "Harry Potter and the Sorcerer\'s Stone",\n                    subtitle: "By J. K. Rowling",\n                },\n            },\n            tiles: {\n                properties: {\n                    nodes: ["riskScore1"],\n                },\n            },\n            riskScore1: {\n                id: "riskScore1",\n                componentType: RiskScoreTileComponent.lateLoadKey,\n                properties: {\n                    widgetData: {\n                        minValue: 0,\n                        maxValue: 5,\n                        useStaticLabel: false,\n                        staticLabel: undefined,\n                        label: `Average Rating`,\n                        description: `Harry Potter and the Sorcerer\'s Stone By J. K. Rowling Average Rating Risk Score`,\n                    },\n                },\n                providers: {\n                    [WellKnownProviders.DataSource]: {\n                        // Setting the data source providerId for the tile with id "kpi1"\n                        providerId: AverageRatingRiskScoreDataSource.providerId,\n                    } as IProviderConfiguration,\n                    [WellKnownProviders.Adapter]: {\n                        providerId: NOVA_KPI_DATASOURCE_ADAPTER,\n                        properties: {\n                            componentId: "riskScore1",\n                            propertyPath: "widgetData",\n                        },\n                    } as IProviderConfiguration,\n                },\n            },\n        },\n    },\n};\n'},20863:(o,e,n)=>{"use strict";n.r(e),n.d(e,{default:()=>t});const t='<h1>Table Widget</h1>\n\n<p>\n    A Table widget displays data in tabular format, i.e. in rows and columns.\n    Each row in the table represents an item, and each column shows a selected\n    attribute of that item. You can scroll and sort this data using the controls\n    on the widget.\n</p>\n\n<h2>Column Formatters</h2>\n\n<p>\n    To present table values in a way that makes the most sense for users, it\'s\n    necessary to specify an appropriate way to format the values of each column.\n    With that in mind, a column formatter component can be used to format given\n    data in a specific way. As such, the default formatter will format any given\n    value as a simple string. But, data often need to be transformed beyond\n    their raw value in some way to correctly display data types such as numbers,\n    times, dates, pictures, links, etc. In those cases, a formatter specialized\n    in formatting the particular data type must be used.\n</p>\n\n<nui-message type="info" [allowDismiss]="false">\n    For details on how to instantiate a table widget, take a look at the inline\n    comments under the source expander of the following example.\n</nui-message>\n\n<nui-example-wrapper filenamePrefix="table-widget" exampleTitle="Table widget">\n    <table-widget-example></table-widget-example>\n</nui-example-wrapper>\n\n<h3>Interaction Handling</h3>\n<p>\n    The example below has the\n    <code\n        ><a href="../injectables/UrlInteractionHandler.html" target="_blank"\n            >UrlInteractionHandler</a\n        ></code\n    >\n    configured to handle the interactions that occur on the table\'s columns.\n    Look at the inline comments in the source expander to see how it is\n    configured.\n</p>\n\n<nui-example-wrapper\n    filenamePrefix="table-widget-interactive"\n    exampleTitle="Table Interactive widget"\n>\n    <table-widget-interactive-example></table-widget-interactive-example>\n</nui-example-wrapper>\n\n<h2>Data source features</h2>\n<p>\n    There are table specific data source features that are useful only when\n    given data source is used in the context of a table widget. These are:\n</p>\n<ul>\n    <li>\n        <b>Search</b> -\n        <a\n            target="parent"\n            href="../additional-documentation/widget-types/table/table-with-search.html"\n            >described on a dedicated page</a\n        >\n    </li>\n    <li>\n        <b>Disabling automatic column generation</b> - turning on the feature\n        called\n        <a href="../miscellaneous/enumerations.html#WellKnownDataSourceFeatures"\n            ><code>DisableTableColumnGeneration</code></a\n        >\n        disables automatic column generation in the table widget editor. This\n        was introduced to maintain backward compatibility with previous\n        implementations of the table widget.\n    </li>\n</ul>\n\n<h2>Widget Schema</h2>\n\n<p>\n    The code listings below are the source files for the Table widget definition\n    with inline comments describing the parts that compose the standard Table\n    widget type. It includes the widget\'s definition as well as its\n    corresponding configurator form for defining how to configure (create/edit)\n    the widget.\n</p>\n\n<h2>Widget</h2>\n\n<p>\n    This part shows the actual widget definition. It includes, among other\n    things, the components and providers that compose the widget itself.\n</p>\n\n<nui-example-code language="typescript">{{ widgetFileText }}</nui-example-code>\n\n<h2>Configurator</h2>\n\n<p>\n    This part shows the form that\'s used for configuring (creating/editing) the\n    widget.\n</p>\n\n<nui-example-code language="typescript">{{\n    configuratorFileText\n}}</nui-example-code>\n\n<h2>Additional Features</h2>\n<ul>\n    <li>\n        <p>\n            <strong>Scroll Activation Delay:</strong> By default, the table\n            widget delays scroll activation for a short period of time after\n            <code>mouseenter</code> to mitigate accidental scrolling of the\n            table while scrolling through the dashboard. To disable this\n            feature, follow these steps:\n        </p>\n        <ol>\n            <li>\n                Go to your initialization of the dashboard and grab the\n                reference to the table widget type:\n                <br />\n                <code>\n                    const table =\n                    this.widgetTypesService.getWidgetType("table");\n                </code>\n            </li>\n            <li>\n                Change this property value to false:\n                <br />\n                <code>\n                    table.widget.structure.table.properties.delayedMousePresenceDetectionEnabled\n                    = false;\n                </code>\n            </li>\n        </ol>\n        <br />\n        <p>Additionally, you can override the default delay of 500 ms:</p>\n        <ol>\n            <li>\n                Grab the reference to the table widget type in your dashboard\n                initialization similar to above:\n                <br />\n                <code>\n                    const table =\n                    this.widgetTypesService.getWidgetType("table");\n                </code>\n            </li>\n            <li>\n                Change this property to the desired value in ms:\n                <br />\n                <code>\n                    table.widget.structure.table.properties.configuration.scrollActivationDelayMs\n                    = 750\n                </code>\n            </li>\n        </ol>\n    </li>\n</ul>\n'},36007:(o,e,n)=>{"use strict";n.r(e),n.d(e,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport { Component } from "@angular/core";\n\n@Component({\n    selector: "nui-table-docs",\n    templateUrl: "./table-docs.component.html",\n})\nexport class TableDocsComponent {\n    public widgetFileText =\n        require("!!raw-loader!../../../../../../src/lib/widget-types/table/table-widget.ts")\n            .default;\n    public configuratorFileText =\n        require("!!raw-loader!../../../../../../src/lib/widget-types/table/table-configurator.ts")\n            .default;\n}\n'},79158:(o,e,n)=>{"use strict";n.r(e),n.d(e,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport { NgModule } from "@angular/core";\nimport { RouterModule, Routes } from "@angular/router";\n\nimport { DEMO_PATH_TOKEN } from "@nova-ui/bits";\nimport {\n    NuiButtonModule,\n    NuiDocsModule,\n    NuiMessageModule,\n    NuiSwitchModule,\n} from "@nova-ui/bits";\nimport {\n    NuiDashboardsModule,\n    TableFormatterRegistryService,\n} from "@nova-ui/dashboards";\n\nimport { DEFAULT_TABLE_FORMATTERS } from "../../../../../../src/lib/widget-types/table/default-table-formatters";\nimport { getDemoFiles } from "../../../../demo-files-factory";\nimport { TableDocsComponent } from "./table-docs.component";\nimport { TableWidgetInteractiveExampleComponent } from "./table-widget-interactive/table-widget-interactive-example.component";\nimport { TableSearchDocsComponent } from "./table-widget-search-docs.component";\nimport { TableWidgetSearchExampleComponent } from "./table-widget-search/table-widget-search-example.component";\nimport { TableWidgetExampleComponent } from "./table-widget/table-widget-example.component";\nimport { TableSelectableDocsComponent } from "./table-selectable-docs.component";\nimport { TableWidgetSelectableExampleComponent } from "./table-widget-selectable/table-widget-selectable.example.component";\nimport { TablePaginatorDocsComponent } from "./table-paginator-docs.component";\nimport { TableWidgetPaginatorExampleComponent } from "./table-widget-paginator/table-widget-paginator-example.component";\nimport { TableWidgetSelectableMultiExampleComponent } from "./table-widget-selectable/table-widget-selectable-multi/table-widget-selectable-multi.example.component";\nimport { TableWidgetSelectableSingleExampleComponent } from "./table-widget-selectable/table-widget-selectable-single/table-widget-selectable-single.example.component";\nimport { TableWidgetSelectableRadioExampleComponent } from "./table-widget-selectable/table-widget-selectable-radio/table-widget-selectable-radio.example.component";\n\nconst routes: Routes = [\n    {\n        path: "",\n        component: TableDocsComponent,\n        data: {\n            srlc: {\n                hideIndicator: true,\n            },\n            showThemeSwitcher: true,\n        },\n    },\n    {\n        path: "example",\n        component: TableWidgetExampleComponent,\n        data: {\n            srlc: {\n                hideIndicator: true,\n            },\n        },\n    },\n    {\n        path: "table-search",\n        component: TableSearchDocsComponent,\n        data: {\n            srlc: {\n                hideIndicator: true,\n            },\n            showThemeSwitcher: true,\n        },\n    },\n    {\n        path: "table-paginator",\n        component: TablePaginatorDocsComponent,\n        data: {\n            srlc: {\n                hideIndicator: true,\n            },\n            showThemeSwitcher: true,\n        },\n    },\n    {\n        path: "table-select",\n        component: TableSelectableDocsComponent,\n        data: {\n            srlc: {\n                hideIndicator: true,\n            },\n            showThemeSwitcher: true,\n        },\n    },\n];\n\n@NgModule({\n    imports: [\n        RouterModule.forChild(routes),\n        NuiButtonModule,\n        NuiDocsModule,\n        NuiMessageModule,\n        NuiSwitchModule,\n        NuiDashboardsModule,\n    ],\n    declarations: [\n        TableDocsComponent,\n        TableSearchDocsComponent,\n        TablePaginatorDocsComponent,\n        TableWidgetPaginatorExampleComponent,\n        TableSelectableDocsComponent,\n        TableWidgetInteractiveExampleComponent,\n        TableWidgetExampleComponent,\n        TableWidgetSearchExampleComponent,\n        TableWidgetSelectableExampleComponent,\n        TableWidgetSelectableMultiExampleComponent,\n        TableWidgetSelectableSingleExampleComponent,\n        TableWidgetSelectableRadioExampleComponent,\n    ],\n    providers: [\n        {\n            provide: DEMO_PATH_TOKEN,\n            useValue: getDemoFiles("table"),\n        },\n    ],\n})\nexport default class TableDocsModule {\n    constructor(tableFormattersRegistryService: TableFormatterRegistryService) {\n        tableFormattersRegistryService.addItems(DEFAULT_TABLE_FORMATTERS);\n    }\n}\n'},865:(o,e,n)=>{"use strict";n.r(e),n.d(e,{default:()=>t});const t='<h1>Table Widget with paginator</h1>\n\n<p>\n    Table Widget can have pagination functionality. This page contains\n    information only about setting up the pagination, so before proceeding get\n    familiar with the following:\n</p>\n<ul>\n    <li>\n        <a\n            href="../additional-documentation/anatomy/data-sources.html"\n            target="_blank"\n            ><code>Data Sources</code></a\n        >\n        - for information about Data Sources and their Features.\n    </li>\n    <li>\n        <a\n            href="../additional-documentation/widget-types/table.html"\n            target="_blank"\n            ><code>Table Widget</code></a\n        >\n        - for configuring a table widget itself.\n    </li>\n</ul>\n\n<nui-example-wrapper\n    filenamePrefix="table-widget-paginator"\n    exampleTitle="Table widget with Paginator"\n>\n    <table-widget-paginator-example></table-widget-paginator-example>\n</nui-example-wrapper>\n\n<h2>Configuring the Widget</h2>\n<p>\n    To configure the widget you have to enable paginator in the widget\n    configuration:\n</p>\n<nui-example-code language="typescript">\n    {{ tableConfigurationText }}\n</nui-example-code>\n'},6701:(o,e,n)=>{"use strict";n.r(e),n.d(e,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport { Component } from "@angular/core";\n\n@Component({\n    selector: "nui-table-paginator-docs",\n    templateUrl: "./table-paginator-docs.component.html",\n})\nexport class TablePaginatorDocsComponent {\n    public tableConfigurationText = `\n        "table": {\n            ...\n            properties: {\n                configuration: {\n                    // define paginator configuration here\n                    scrollType: ScrollType.paginator,\n                    paginatorConfiguration: {\n                        pageSize: 10, // Value have to be one of pageSizeSet values\n                        pageSizeSet: [10, 20, 30],\n                    },\n                    // If not specified, default is set to \n                    // pageSize: 10,\n                    // pageSizeSet: [10, 20, 50], \n                    hasVirtualScroll: false, // Has to be speciefied because of backward compatibility\n                } as ITableWidgetConfig,\n            },\n        },\n    `;\n}\n'},39528:(o,e,n)=>{"use strict";n.r(e),n.d(e,{default:()=>t});const t='<h1>Table Widget with Select Functionality</h1>\n<p>\n    Table Widget can have select functionality. This page contains information\n    only about setting up the select, so before proceeding get familiar with the\n    following:\n</p>\n<ul>\n    <li>\n        <a\n            href="../additional-documentation/anatomy/data-sources.html"\n            target="_blank"\n            ><code>Data Sources</code></a\n        >\n        - for information about Data Sources and their Features.\n    </li>\n    <li>\n        <a\n            href="../additional-documentation/widget-types/table.html"\n            target="_blank"\n            ><code>Table Widget</code></a\n        >\n        - for configuring a table widget itself.\n    </li>\n</ul>\n\n<h2>Types of Select</h2>\n<p>Table widget can be configured with 4 different types of select:</p>\n<ul>\n    <li>\n        <b> Multi: </b>\n        <p>\n            Allows to pick multiple table rows. Each row displays a checkbox in\n            this mode and a selector for all items on the given page/all pages\n            is displayed as well.\n        </p>\n    </li>\n    <li>\n        <b> Radio: </b>\n        <p>\n            Allows to pick only one table row. Each row displays a radio button\n            and the selector for all items is hidden.\n        </p>\n    </li>\n    <li>\n        <b> Single: </b>\n        <p>\n            Same behavior as <b>Radio</b> mode but without buttons. Row is\n            clickable by default.\n        </p>\n    </li>\n</ul>\n<nui-example-wrapper\n    filenamePrefix="table-widget-selectable-multi"\n    exampleTitle="Table widget with multi select"\n>\n    <table-widget-selectable-multi-example></table-widget-selectable-multi-example>\n</nui-example-wrapper>\n\n<nui-example-wrapper\n    filenamePrefix="table-widget-selectable-radio"\n    exampleTitle="Table widget with radio select"\n>\n    <table-widget-selectable-radio-example></table-widget-selectable-radio-example>\n</nui-example-wrapper>\n\n<nui-example-wrapper\n    filenamePrefix="table-widget-selectable-single"\n    exampleTitle="Table widget with single select"\n>\n    <table-widget-selectable-single-example></table-widget-selectable-single-example>\n</nui-example-wrapper>\n\n<h2>Configuring the Widget</h2>\n<p>\n    To configure the widget you have to enable selection in the widget\n    configuration. The configuration is of type\n    <code>TableWidgetSelectionConfig</code>.\n</p>\n<nui-example-code language="typescript">\n    {{ tableConfigurationText }}\n</nui-example-code>\n\n<h2>Accessing the Selection</h2>\n<p>\n    On selection a <code>SELECTION</code> pizzagna event is being triggered. You\n    can access it in the following way:\n</p>\n<nui-example-code language="typescript">\n    {{ eventSubscriptionText }}\n</nui-example-code>\n'},59832:(o,e,n)=>{"use strict";n.r(e),n.d(e,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport { Component } from "@angular/core";\n\n@Component({\n    selector: "nui-table-selectable-docs",\n    templateUrl: "./table-selectable-docs.component.html",\n})\nexport class TableSelectableDocsComponent {\n    public tableConfigurationText = `\n        "table": {\n            ...\n            properties: {\n                // enabling selection here\n                selectionConfiguration: {\n                    // whether the selection is enabled or disabled\n                    enabled: true,\n                    // can be Multi | Radio | Single\n                    selectionMode: TableSelectionMode.Multi,\n                    // property that uniquely identifies row in a table\n                    trackByProperty: "id",\n                    // whether clicking on row should select it\n                    clickableRow: true,\n                },\n            },\n        },\n    `;\n\n    public eventSubscriptionText = `\n...\nconstructor(Inject(PIZZAGNA_EVENT_BUS) eventBus: EventBus<IEvent>) {\n    eventBus\n    .getStream(SELECTION)\n    // don\'t forget to unsubscribe!\n    .subscribe((selection: ISelection) => ...)\n}\n...\n    `;\n}\n'},61051:(o,e,n)=>{"use strict";n.r(e),n.d(e,{default:()=>t});const t='<div class="mb-2 d-flex align-items-center">\n    <nui-switch class="ml-3 py-2" [(value)]="editMode" i18n>\n        Edit Mode\n    </nui-switch>\n    <button\n        *ngIf="!dashboard?.widgets[\'tableWidgetId\']"\n        type="button"\n        displayStyle="action"\n        (click)="reInitializeDashboard()"\n        nui-button\n    >\n        Restore Widget\n    </button>\n</div>\n\n<div class="w-100 dashboard">\n    \x3c!--\n        Note: The dashboard and gridsterConfig input assignments must use banana-in-a-box notation to keep\n        the dashboard state updated with changes to the pizzagna.\n    --\x3e\n    <nui-dashboard\n        *ngIf="dashboard"\n        [(dashboard)]="dashboard"\n        [editMode]="editMode"\n        [(gridsterConfig)]="gridsterConfig"\n        nuiWidgetEditor\n    >\n    </nui-dashboard>\n</div>\n'},72767:(o,e,n)=>{"use strict";n.r(e),n.d(e,{default:()=>t});const t=".dashboard {\n    height: 400px;\n}\n"},29635:(o,e,n)=>{"use strict";n.r(e),n.d(e,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport { ChangeDetectorRef, Component, OnInit } from "@angular/core";\nimport { GridsterConfig, GridsterItem } from "angular-gridster2";\nimport orderBy from "lodash/orderBy";\nimport { BehaviorSubject, firstValueFrom, from } from "rxjs";\nimport { map, tap } from "rxjs/operators";\n\nimport {\n    DataSourceService,\n    IDataField,\n    INovaFilteringOutputs,\n    INovaFilters,\n    nameof,\n} from "@nova-ui/bits";\nimport {\n    DATA_SOURCE,\n    DEFAULT_PIZZAGNA_ROOT,\n    IDashboard,\n    ITableWidgetColumnConfig,\n    IWidget,\n    IWidgets,\n    NOVA_URL_INTERACTION_HANDLER,\n    ProviderRegistryService,\n    WellKnownPathKey,\n    WellKnownProviders,\n    WidgetTypesService,\n} from "@nova-ui/dashboards";\n\nexport const BREW_API_URL = "https://api.punkapi.com/v2/beers";\n\nexport interface IBrewInfo {\n    id: string;\n    name: string;\n    tagline: string;\n    first_brewed: string;\n    description: string;\n    brewers_tips: string;\n}\n\nexport interface IBrewDatasourceResponse {\n    brewInfo: IBrewInfo[];\n    total: number;\n}\n\nexport class MockBeerDataSource extends DataSourceService<IBrewInfo> {\n    public static providerId = "MockBeerDataSource";\n\n    private cache: IBrewInfo[] = [];\n\n    public busy = new BehaviorSubject(false);\n\n    public dataFields: Array<IDataField> = [\n        {\n            id: nameof<IBrewInfo>("id"),\n            label: "No",\n            dataType: "number",\n            sortable: true,\n        },\n        // To indicate that a column should not be sortable, set the optional IDataField \'sortable\' property to false\n        {\n            id: nameof<IBrewInfo>("name"),\n            label: "Name",\n            dataType: "string",\n            sortable: true,\n        },\n        {\n            id: nameof<IBrewInfo>("tagline"),\n            label: "Tagline",\n            dataType: "string",\n            sortable: true,\n        },\n        {\n            id: nameof<IBrewInfo>("first_brewed"),\n            label: "First Brewed",\n            dataType: "string",\n            sortable: true,\n        },\n        {\n            id: nameof<IBrewInfo>("description"),\n            label: "Description",\n            dataType: "string",\n            sortable: false,\n        },\n        {\n            id: nameof<IBrewInfo>("brewers_tips"),\n            label: "Brewer\'s Tips",\n            dataType: "string",\n            sortable: false,\n        },\n    ];\n\n    public async getFilteredData(\n        filters: INovaFilters\n    ): Promise<INovaFilteringOutputs> {\n        const start = filters.virtualScroll?.value?.start ?? 0;\n        const end = filters.virtualScroll?.value?.end ?? 0;\n\n        // Resetting cache on first page request\n        if (start === 0) {\n            this.cache = [];\n        }\n\n        // extract sorter settings to send to the backend\n        // filters.sorterValue.sortBy; filters.sorterValue.direction\n        return firstValueFrom(\n            from(this.fetch(start, end)).pipe(\n                tap((response) => {\n                    if (!response) {\n                        return;\n                    }\n                    this.cache = this.sortData(\n                        this.cache.concat(response.brewInfo),\n                        filters\n                    );\n                    this.dataSubject.next(this.cache);\n                }),\n                map(() => ({\n                    repeat: { itemsSource: this.cache },\n                    dataFields: this.dataFields,\n                }))\n            )\n        );\n    }\n\n    public async fetch(\n        start: number,\n        end: number\n    ): Promise<IBrewDatasourceResponse | undefined> {\n        const delta: number = end - start;\n        const currentPage: number = end / delta || 0;\n        const response: Object | Array<IBrewInfo> = await (\n            await fetch(\n                `${BREW_API_URL}/?page=${currentPage}&per_page=${delta}`\n            )\n        ).json();\n        console.log(\n            "\u{1f4d8} table-widget-interactive-example.component: 85# -> response:",\n            response\n        );\n\n        // Note: In case request fails we should not proceed with mapping\n        if (!Array.isArray(response)) {\n            return undefined;\n        }\n\n        return {\n            brewInfo: response.map((result: IBrewInfo) => ({\n                id: result.id,\n                name: result.name,\n                tagline: result.tagline,\n                first_brewed: result.first_brewed,\n                description: result.description,\n                brewers_tips: result.brewers_tips,\n            })),\n            total: response.length,\n        };\n    }\n\n    private sortData(data: IBrewInfo[], filters: INovaFilters): IBrewInfo[] {\n        return orderBy(\n            data,\n            filters.sorter?.value?.sortBy,\n            filters.sorter?.value?.direction as "desc" | "asc"\n        );\n    }\n}\n\n/**\n * A component that instantiates the dashboard\n */\n@Component({\n    selector: "table-widget-interactive-example",\n    templateUrl: "./table-widget-interactive-example.component.html",\n    styleUrls: ["./table-widget-interactive-example.component.less"],\n})\nexport class TableWidgetInteractiveExampleComponent implements OnInit {\n    // This variable will hold all the data needed to define the layout and behavior of the widgets.\n    // Pass this to the dashboard component\'s dashboard input in the template.\n    public dashboard: IDashboard | undefined;\n\n    // Angular gridster requires a configuration object even if it\'s empty.\n    // Pass this to the dashboard component\'s gridsterConfig input in the template.\n    public gridsterConfig: GridsterConfig = {};\n\n    // Boolean passed as an input to the dashboard. When true, widgets can be moved, resized, removed, or edited\n    public editMode: boolean = false;\n\n    constructor(\n        // WidgetTypesService provides the widget\'s necessary structure information\n        private widgetTypesService: WidgetTypesService,\n        // In general, the ProviderRegistryService is used for making entities available for injection into dynamically loaded components.\n        private providerRegistry: ProviderRegistryService,\n        private changeDetectorRef: ChangeDetectorRef\n    ) {}\n\n    public ngOnInit(): void {\n        // Grabbing the widget\'s default template which will be needed as a parameter for setNode\n        const widgetTemplate = this.widgetTypesService.getWidgetType(\n            "table",\n            1\n        );\n\n        // Registering our data sources as dropdown options in the widget editor/configurator\n        // Note: This could also be done in the parent module\'s constructor so that\n        // multiple dashboards could have access to the same widget template modification.\n        this.widgetTypesService.setNode(\n            // This is the template we grabbed above with getWidgetType\n            widgetTemplate,\n            // We are setting the editor/configurator part of the widget template\n            "configurator",\n            // This indicates which node you are changing and we want to change\n            // the data source providers available for selection in the editor.\n            WellKnownPathKey.DataSourceProviders,\n            // We are setting the data sources available for selection in the editor\n            [MockBeerDataSource.providerId]\n        );\n\n        // Registering the data source for injection into the widget.\n        this.providerRegistry.setProviders({\n            [MockBeerDataSource.providerId]: {\n                provide: DATA_SOURCE,\n                useClass: MockBeerDataSource,\n                // Any dependencies that need to be injected into the provider must be listed here\n                deps: [],\n            },\n        });\n\n        this.initializeDashboard();\n    }\n\n    /** Used for restoring widgets state */\n    public reInitializeDashboard(): void {\n        // destroys the components and their providers so the dashboard can re init data\n        this.dashboard = undefined;\n        this.changeDetectorRef.detectChanges();\n\n        this.initializeDashboard();\n    }\n\n    public initializeDashboard(): void {\n        // We\'re using a static configuration object for this example, but this is where\n        // the widget\'s configuration could potentially be populated from a database\n        const tableWidget = widgetConfig;\n        const widgetIndex: IWidgets = {\n            // Enhance the widget with information coming from it\'s type definition\n            [tableWidget.id]:\n                this.widgetTypesService.mergeWithWidgetType(tableWidget),\n        };\n\n        // Setting the widget dimensions and position (this is for gridster)\n        const positions: Record<string, GridsterItem> = {\n            [tableWidget.id]: {\n                cols: 12,\n                rows: 6,\n                y: 0,\n                x: 0,\n            },\n        };\n\n        // Finally, assigning the variables we created above to the dashboard\n        this.dashboard = {\n            positions,\n            widgets: widgetIndex,\n        };\n    }\n}\n\nconst TABLE_COLUMNS: ITableWidgetColumnConfig[] = [\n    {\n        id: "column1",\n        label: $localize`Beer Name`,\n        isActive: true,\n        width: 185,\n        formatter: {\n            componentType: "RawFormatterComponent",\n            properties: {\n                dataFieldIds: {\n                    value: "name",\n                },\n            },\n        },\n    },\n    {\n        id: "column2",\n        label: $localize`Tagline`,\n        isActive: true,\n        width: 250,\n        formatter: {\n            componentType: "RawFormatterComponent",\n            properties: {\n                dataFieldIds: {\n                    value: "tagline",\n                },\n            },\n        },\n    },\n    {\n        id: "column3",\n        label: $localize`First Brewed`,\n        isActive: true,\n        width: 100,\n        formatter: {\n            componentType: "RawFormatterComponent",\n            properties: {\n                dataFieldIds: {\n                    value: "first_brewed",\n                },\n            },\n        },\n    },\n    {\n        id: "column4",\n        label: $localize`Description`,\n        isActive: true,\n        formatter: {\n            componentType: "RawFormatterComponent",\n            properties: {\n                dataFieldIds: {\n                    value: "description",\n                },\n            },\n        },\n    },\n];\n\nexport const widgetConfig: IWidget = {\n    id: "tableWidgetId",\n    type: "table",\n    pizzagna: {\n        configuration: {\n            [DEFAULT_PIZZAGNA_ROOT]: {\n                providers: {\n                    [WellKnownProviders.InteractionHandler]: {\n                        // Configuring the UrlInteractionHandler to handle interactions\n                        providerId: NOVA_URL_INTERACTION_HANDLER,\n                        properties: {\n                            // the \'url\' property tells the handler what link to use when interaction occurs on the series\n                            url: "${\'https://untappd.com/search?q=\'+data.name}",\n                            // by default the link is opened in the current window, set \'newWindow\' to true to open in a new tab instead\n                            newWindow: true,\n                        },\n                    },\n                },\n            },\n            header: {\n                properties: {\n                    title: "Stupendous Suds",\n                    subtitle: "Try These Brilliant Brews",\n                },\n            },\n            table: {\n                providers: {\n                    [WellKnownProviders.DataSource]: {\n                        providerId: MockBeerDataSource.providerId,\n                    },\n                },\n                properties: {\n                    configuration: {\n                        // set interactions to true on the table\n                        interactive: true,\n                        columns: TABLE_COLUMNS,\n                        sortable: true,\n                        sorterConfiguration: {\n                            descendantSorting: false,\n                            sortBy: "",\n                        },\n                        hasVirtualScroll: true,\n                    },\n                },\n            },\n        },\n    },\n};\n'},47825:(o,e,n)=>{"use strict";n.r(e),n.d(e,{default:()=>t});const t='<div class="mb-2 d-flex align-items-center">\n    <nui-switch class="ml-3 py-2" [(value)]="editMode" i18n>\n        Edit Mode\n    </nui-switch>\n    <button\n        *ngIf="!dashboard?.widgets[\'tableWidgetId\']"\n        type="button"\n        displayStyle="action"\n        (click)="reInitializeDashboard()"\n        nui-button\n    >\n        Restore Widget\n    </button>\n</div>\n\n<div class="w-100 dashboard">\n    \x3c!--\n        Note: The dashboard and gridsterConfig input assignments must use banana-in-a-box notation to keep\n        the dashboard state updated with changes to the pizzagna.\n    --\x3e\n    <nui-dashboard\n        *ngIf="dashboard"\n        [(dashboard)]="dashboard"\n        [editMode]="editMode"\n        [(gridsterConfig)]="gridsterConfig"\n        nuiWidgetEditor\n    >\n    </nui-dashboard>\n</div>\n'},41021:(o,e,n)=>{"use strict";n.r(e),n.d(e,{default:()=>t});const t=".dashboard {\n    height: 400px;\n}\n"},67325:(o,e,n)=>{"use strict";n.r(e),n.d(e,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport { HttpClient } from "@angular/common/http";\nimport { ChangeDetectorRef, Component, OnInit } from "@angular/core";\nimport { GridsterConfig, GridsterItem } from "angular-gridster2";\n\nimport { LoggerService } from "@nova-ui/bits";\nimport {\n    DATA_SOURCE,\n    DEFAULT_PIZZAGNA_ROOT,\n    IDashboard,\n    IProviderConfiguration,\n    ITableWidgetConfig,\n    IWidget,\n    IWidgets,\n    NOVA_URL_INTERACTION_HANDLER,\n    PizzagnaLayer,\n    ProviderRegistryService,\n    RawFormatterComponent,\n    ScrollType,\n    WellKnownPathKey,\n    WellKnownProviders,\n    WidgetTypesService,\n} from "@nova-ui/dashboards";\n\nimport { AcmeTableMockDataSource } from "../../../../prototypes/data/table/acme-table-mock-data-source.service";\n\n/**\n * A component that instantiates the dashboard\n */\n@Component({\n    selector: "table-widget-paginator-example",\n    templateUrl: "./table-widget-paginator-example.component.html",\n    styleUrls: ["./table-widget-paginator-example.component.less"],\n})\nexport class TableWidgetPaginatorExampleComponent implements OnInit {\n    public dashboard: IDashboard | undefined;\n    public gridsterConfig: GridsterConfig = {};\n    public editMode: boolean = false;\n\n    constructor(\n        private widgetTypesService: WidgetTypesService,\n        private providerRegistry: ProviderRegistryService,\n        private changeDetectorRef: ChangeDetectorRef\n    ) {}\n\n    public ngOnInit(): void {\n        const widgetTemplate = this.widgetTypesService.getWidgetType(\n            "table",\n            1\n        );\n        this.widgetTypesService.setNode(\n            widgetTemplate,\n            "configurator",\n            WellKnownPathKey.DataSourceProviders,\n            [AcmeTableMockDataSource.providerId]\n        );\n\n        this.providerRegistry.setProviders({\n            [AcmeTableMockDataSource.providerId]: {\n                provide: DATA_SOURCE,\n                useClass: AcmeTableMockDataSource,\n                deps: [LoggerService, HttpClient],\n            },\n        });\n\n        this.initializeDashboard();\n    }\n\n    /** Used for restoring widgets state */\n    public reInitializeDashboard(): void {\n        // destroys the components and their providers so the dashboard can re init data\n        this.dashboard = undefined;\n        this.changeDetectorRef.detectChanges();\n\n        this.initializeDashboard();\n    }\n\n    public initializeDashboard(): void {\n        const tableWithPaginator = tableWidgetWithPaginator;\n        const tableWithVirtualScroll = tableWidgetWithVirtualScroll;\n\n        const widgetIndex: IWidgets = {\n            [tableWithPaginator.id]:\n                this.widgetTypesService.mergeWithWidgetType(tableWithPaginator),\n            [tableWithVirtualScroll.id]:\n                this.widgetTypesService.mergeWithWidgetType(\n                    tableWithVirtualScroll\n                ),\n        };\n\n        const positions: Record<string, GridsterItem> = {\n            [tableWithPaginator.id]: {\n                cols: 6,\n                rows: 6,\n                y: 0,\n                x: 0,\n            },\n            [tableWithVirtualScroll.id]: {\n                cols: 6,\n                rows: 6,\n                y: 0,\n                x: 0,\n            },\n        };\n\n        this.dashboard = {\n            positions,\n            widgets: widgetIndex,\n        };\n    }\n}\n\nexport const tableWidgetWithPaginator: IWidget = {\n    id: "widget1",\n    type: "table",\n    pizzagna: {\n        [PizzagnaLayer.Configuration]: {\n            [DEFAULT_PIZZAGNA_ROOT]: {\n                providers: {\n                    [WellKnownProviders.InteractionHandler]: {\n                        providerId: NOVA_URL_INTERACTION_HANDLER,\n                    },\n                },\n            },\n            header: {\n                properties: {\n                    title: "Table Widget with paginator!",\n                    subtitle: "Basic table widget",\n                    collapsible: true,\n                },\n            },\n            table: {\n                providers: {\n                    [WellKnownProviders.DataSource]: {\n                        providerId: AcmeTableMockDataSource.providerId,\n                    } as IProviderConfiguration,\n                },\n                properties: {\n                    configuration: {\n                        interactive: true,\n                        columns: [\n                            {\n                                id: "column1",\n                                label: "No.",\n                                isActive: true,\n                                formatter: {\n                                    componentType:\n                                        RawFormatterComponent.lateLoadKey,\n                                    properties: {\n                                        dataFieldIds: {\n                                            value: "position",\n                                        },\n                                    },\n                                },\n                            },\n                            {\n                                id: "column2",\n                                label: "Name",\n                                isActive: true,\n                                formatter: {\n                                    componentType:\n                                        RawFormatterComponent.lateLoadKey,\n                                    properties: {\n                                        dataFieldIds: {\n                                            value: "name",\n                                        },\n                                    },\n                                },\n                            },\n                            {\n                                id: "column3",\n                                label: "Status",\n                                isActive: true,\n                                formatter: {\n                                    componentType:\n                                        RawFormatterComponent.lateLoadKey,\n                                    properties: {\n                                        dataFieldIds: {\n                                            value: "status",\n                                        },\n                                    },\n                                },\n                            },\n                        ],\n                        sorterConfiguration: {\n                            descendantSorting: false,\n                            sortBy: "column1",\n                        },\n                        scrollType: ScrollType.paginator,\n                        paginatorConfiguration: {\n                            pageSize: 5,\n                            pageSizeSet: [5, 10, 20, 30],\n                        },\n                        hasVirtualScroll: false,\n                        searchConfiguration: {\n                            enabled: true,\n                        },\n                    } as ITableWidgetConfig,\n                },\n            },\n        },\n    },\n};\n\nexport const tableWidgetWithVirtualScroll: IWidget = {\n    id: "widget2",\n    type: "table",\n    pizzagna: {\n        [PizzagnaLayer.Configuration]: {\n            [DEFAULT_PIZZAGNA_ROOT]: {\n                providers: {\n                    [WellKnownProviders.InteractionHandler]: {\n                        providerId: NOVA_URL_INTERACTION_HANDLER,\n                    },\n                },\n            },\n            header: {\n                properties: {\n                    title: "Table Widget with virtual scroll!",\n                    subtitle: "Basic table widget",\n                    collapsible: true,\n                },\n            },\n            table: {\n                providers: {\n                    [WellKnownProviders.DataSource]: {\n                        providerId: AcmeTableMockDataSource.providerId,\n                    } as IProviderConfiguration,\n                },\n                properties: {\n                    configuration: {\n                        interactive: true,\n                        columns: [\n                            {\n                                id: "column1",\n                                label: "No.",\n                                isActive: true,\n                                formatter: {\n                                    componentType:\n                                        RawFormatterComponent.lateLoadKey,\n                                    properties: {\n                                        dataFieldIds: {\n                                            value: "position",\n                                        },\n                                    },\n                                },\n                            },\n                            {\n                                id: "column2",\n                                label: "Name",\n                                isActive: true,\n                                formatter: {\n                                    componentType:\n                                        RawFormatterComponent.lateLoadKey,\n                                    properties: {\n                                        dataFieldIds: {\n                                            value: "name",\n                                        },\n                                    },\n                                },\n                            },\n                            {\n                                id: "column3",\n                                label: "Status",\n                                isActive: true,\n                                formatter: {\n                                    componentType:\n                                        RawFormatterComponent.lateLoadKey,\n                                    properties: {\n                                        dataFieldIds: {\n                                            value: "status",\n                                        },\n                                    },\n                                },\n                            },\n                        ],\n                        sorterConfiguration: {\n                            descendantSorting: false,\n                            sortBy: "column1",\n                        },\n                        hasVirtualScroll: true,\n                        searchConfiguration: {\n                            enabled: true,\n                        },\n                    } as ITableWidgetConfig,\n                },\n            },\n        },\n    },\n};\n'},39905:(o,e,n)=>{"use strict";n.r(e),n.d(e,{default:()=>t});const t='<h1>Table Widget with Search Functionality</h1>\n<p>\n    Table Widget can have search functionality. This page contains information\n    only about setting up the search, so before proceeding get familiar with the\n    following:\n</p>\n<ul>\n    <li>\n        <a\n            href="../additional-documentation/anatomy/data-sources.html"\n            target="_blank"\n            ><code>Data Sources</code></a\n        >\n        - for information about Data Sources and their Features.\n    </li>\n    <li>\n        <a\n            href="../additional-documentation/widget-types/table.html"\n            target="_blank"\n            ><code>Table Widget</code></a\n        >\n        - for configuring a table widget itself.\n    </li>\n</ul>\n<nui-example-wrapper\n    filenamePrefix="table-widget-search"\n    exampleTitle="Table widget with Search"\n>\n    <table-widget-search-example></table-widget-search-example>\n</nui-example-wrapper>\n\n<h2>Configuring the Data Source</h2>\n<p>\n    To use search within the Data Source you need to use data source Features.\n    Data Source should <em>implement</em>\n    <a\n        href="https://ux.solarwinds.io/nova/docs/nova-bits/latest/sdk/api-docs-ng2/interfaces/IDataSource.html"\n        target="_blank"\n        ><code>IDataSource</code></a\n    >\n    interface and have <em>features</em> property set.\n</p>\n<p>Default way to do that is to declare the features:</p>\n<nui-example-code language="typescript">\n    {{ featuredDeclaredText }}\n</nui-example-code>\n\n<p>\n    And then pass it to the\n    <a\n        href="https://ux.solarwinds.io/nova/docs/nova-bits/latest/sdk/api-docs-ng2/classes/DataSourceFeatures.html#source"\n        target="_blank"\n        ><code>DataSourceFeatures</code></a\n    >\n</p>\n<nui-example-code language="typescript">\n    {{ featuresUsedText }}\n</nui-example-code>\n\n<h2>Configuring the Widget</h2>\n<p>\n    To configure the widget you have to enable search in the widget\n    configuration:\n</p>\n<nui-example-code language="typescript">\n    {{ tableConfigurationText }}\n</nui-example-code>\n'},49069:(o,e,n)=>{"use strict";n.r(e),n.d(e,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport { Component } from "@angular/core";\n\n@Component({\n    selector: "nui-table-search-docs",\n    templateUrl: "./table-widget-search-docs.component.html",\n})\nexport class TableSearchDocsComponent {\n    public featuredDeclaredText = `\n        private supportedFeatures: IDataSourceFeatures = {\n        search: { enabled: true },\n        pagination: { enabled: true },\n    };`;\n    public featuresUsedText = `\n        this.features = new DataSourceFeatures(this.supportedFeatures);\n    `;\n    public tableConfigurationText = `\n        "table": {\n            ...\n            properties: {\n                configuration: {\n                    // define search configuration here\n                    searchConfiguration: {\n                        enabled: true,\n                        // following optional properties below can be configured as well\n                        // searchTerm: "search criteria here",\n                        // searchDebounce: 300,\n                    },\n                } as ITableWidgetConfig,\n            },\n        },\n    `;\n}\n'},37257:(o,e,n)=>{"use strict";n.r(e),n.d(e,{default:()=>t});const t='<div class="mb-2 d-flex align-items-center">\n    <nui-switch class="ml-3 py-2" [(value)]="editMode" i18n>\n        Edit Mode\n    </nui-switch>\n    <button\n        *ngIf="!dashboard?.widgets[\'tableWidgetId\']"\n        type="button"\n        displayStyle="action"\n        (click)="reInitializeDashboard()"\n        nui-button\n    >\n        Restore Widget\n    </button>\n</div>\n\n<div class="w-100 dashboard">\n    \x3c!--\n        Note: The dashboard and gridsterConfig input assignments must use banana-in-a-box notation to keep\n        the dashboard state updated with changes to the pizzagna.\n    --\x3e\n    <nui-dashboard\n        *ngIf="dashboard"\n        [(dashboard)]="dashboard"\n        [editMode]="editMode"\n        [(gridsterConfig)]="gridsterConfig"\n        nuiWidgetEditor\n    >\n    </nui-dashboard>\n</div>\n'},77173:(o,e,n)=>{"use strict";n.r(e),n.d(e,{default:()=>t});const t=".dashboard {\n    height: 400px;\n}\n"},48549:(o,e,n)=>{"use strict";n.r(e),n.d(e,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport { HttpClient } from "@angular/common/http";\nimport {\n    ChangeDetectorRef,\n    Component,\n    Injectable,\n    OnInit,\n} from "@angular/core";\nimport { GridsterConfig, GridsterItem } from "angular-gridster2";\nimport isEqual from "lodash/isEqual";\nimport isNil from "lodash/isNil";\nimport { BehaviorSubject, firstValueFrom, Observable, of, Subject } from "rxjs";\nimport {\n    catchError,\n    delay,\n    finalize,\n    map,\n    // eslint-disable-next-line import/no-deprecated\n    switchMap,\n    tap,\n} from "rxjs/operators";\n\nimport {\n    DataSourceFeatures,\n    DataSourceService,\n    IDataField,\n    IDataSource,\n    IDataSourceFeatures,\n    IDataSourceFeaturesConfiguration,\n    IDataSourceOutput,\n    IFilter,\n    IFilters,\n    INovaFilteringOutputs,\n    INovaFilters,\n    LoggerService,\n} from "@nova-ui/bits";\nimport {\n    DATA_SOURCE,\n    IDashboard,\n    ITableWidgetConfig,\n    IWidget,\n    IWidgets,\n    ProviderRegistryService,\n    WellKnownPathKey,\n    WellKnownProviders,\n    WidgetTypesService,\n} from "@nova-ui/dashboards";\n\nimport { GBOOKS_API_URL } from "../../../../prototypes/data/table/constants";\n\ninterface IGBooksApiResponse {\n    kind: string;\n    totalItems: number;\n    items: IGBooksItemModel[];\n    [key: string]: any;\n}\n\ninterface IGBooksItemModel {\n    id: string;\n    volumeInfo: {\n        title: string;\n        subtitle: string;\n        authors: string[];\n        [key: string]: any;\n    };\n    accessInfo: { [key: string]: any };\n    saleInfo: { [key: string]: any };\n}\n\ninterface IGBooksData {\n    books: IGBooksVolume[];\n    totalItems: number;\n}\n\ninterface IGBooksVolume {\n    title: string;\n    authors: string;\n}\n\ntype searchableColumnType = "title" | "authors";\n\n@Injectable()\nexport class AcmeTableGBooksDataSource\n    extends DataSourceService<IGBooksVolume>\n    implements IDataSource\n{\n    public static providerId = "AcmeTableGBooksDataSource";\n    public static mockError = false;\n\n    public searchableColumn: searchableColumnType = "title";\n\n    public page: number = 1;\n    public busy = new BehaviorSubject(false);\n    public features: IDataSourceFeaturesConfiguration;\n\n    private cache = Array.from<IGBooksVolume>({ length: 0 });\n    private previousFilters: INovaFilters;\n    // DataSource Features declared\n    private supportedFeatures: IDataSourceFeatures = {\n        search: { enabled: true },\n        pagination: { enabled: true },\n    };\n    private columnToQueryParamMap: { [k in searchableColumnType]: string } = {\n        title: "intitle",\n        authors: "inauthor",\n    };\n\n    private applyFilters$ = new Subject<IFilters>();\n\n    public dataFields: Array<IDataField> = [\n        {\n            id: "title",\n            label: $localize`Title`,\n            dataType: "string",\n            sortable: false,\n        },\n        {\n            id: "authors",\n            label: $localize`Authors`,\n            dataType: "string",\n            sortable: false,\n        },\n    ];\n\n    constructor(private logger: LoggerService, private http: HttpClient) {\n        super();\n        // Using Nova DataSourceFeatures implementation for the features\n        this.features = new DataSourceFeatures(this.supportedFeatures);\n\n        this.applyFilters$\n            // eslint-disable-next-line import/no-deprecated\n            .pipe(switchMap((filters) => this.getData(filters)))\n            .subscribe(async (res) => {\n                this.outputsSubject.next(await this.getFilteredData(res));\n            });\n    }\n\n    public async getFilteredData(\n        booksData: IGBooksData\n    ): Promise<IDataSourceOutput<INovaFilteringOutputs>> {\n        return firstValueFrom(\n            of(booksData).pipe(\n                tap((response) => {\n                    this.cache = this.cache.concat(response.books);\n                }),\n                map((response) => ({\n                    result: {\n                        repeat: { itemsSource: this.cache },\n                        paginator: { total: response.totalItems },\n                        dataFields: this.dataFields,\n                    },\n                }))\n            )\n        );\n    }\n\n    private getData(filters: INovaFilters): Observable<IGBooksData> {\n        if (\n            this.isNewSearchTerm(filters.search) &&\n            filters.virtualScroll?.value.start === 0\n        ) {\n            this.cache = [];\n        }\n\n        return this.http\n            .get<IGBooksApiResponse>(this.getComposedUrl(filters))\n            .pipe(\n                tap(() => this.busy.next(true)),\n                delay(300), // mock\n                map((response) => ({\n                    books:\n                        response.items?.map((volume) => ({\n                            title: volume.volumeInfo.title,\n                            authors:\n                                volume.volumeInfo.authors?.join(", ") || "",\n                        })) || [],\n                    totalItems: response.totalItems,\n                })),\n                catchError((e) => {\n                    this.logger.error(e);\n                    return of({\n                        books: [],\n                        totalItems: 0,\n                    });\n                }),\n                finalize(() => {\n                    this.busy.next(false);\n                    this.previousFilters = filters;\n                })\n            );\n    }\n\n    private getComposedUrl(filters: INovaFilters) {\n        const initialUrl = `${GBOOKS_API_URL}?q=`;\n        const maxResults = `maxResults=${\n            (filters.virtualScroll?.value.end || 0) -\n            (filters.virtualScroll?.value.start || 0)\n        }`;\n\n        const virtualScrollPart = filters.virtualScroll\n            ? `startIndex=${filters.virtualScroll.value.start}`\n            : "";\n\n        const searchQueryParam =\n            this.columnToQueryParamMap[this.searchableColumn];\n        const searchPart = filters.search\n            ? `${searchQueryParam}:${filters.search.value}`\n            : "_"; // google books api requires some criteria to do the search\n\n        return `${initialUrl}${searchPart}&${maxResults}&${virtualScrollPart}&filter=full`;\n    }\n\n    private isNewSearchTerm(search: IFilter<string> | undefined) {\n        return (\n            !isNil(search?.value) &&\n            !isEqual(search?.value, this.previousFilters?.search?.value)\n        );\n    }\n\n    // redefine parent method\n    public async applyFilters(): Promise<void> {\n        this.applyFilters$.next(this.getFilters());\n    }\n}\n\n/**\n * A component that instantiates the dashboard\n */\n@Component({\n    selector: "table-widget-search-example",\n    templateUrl: "./table-widget-search-example.component.html",\n    styleUrls: ["./table-widget-search-example.component.less"],\n})\nexport class TableWidgetSearchExampleComponent implements OnInit {\n    public dashboard: IDashboard | undefined;\n    public gridsterConfig: GridsterConfig = {};\n    public editMode: boolean = false;\n\n    constructor(\n        private widgetTypesService: WidgetTypesService,\n        private providerRegistry: ProviderRegistryService,\n        private changeDetectorRef: ChangeDetectorRef\n    ) {}\n\n    public ngOnInit(): void {\n        const widgetTemplate = this.widgetTypesService.getWidgetType(\n            "table",\n            1\n        );\n        this.widgetTypesService.setNode(\n            widgetTemplate,\n            "configurator",\n            WellKnownPathKey.DataSourceProviders,\n            [AcmeTableGBooksDataSource.providerId]\n        );\n\n        this.providerRegistry.setProviders({\n            [AcmeTableGBooksDataSource.providerId]: {\n                provide: DATA_SOURCE,\n                useClass: AcmeTableGBooksDataSource,\n                deps: [LoggerService, HttpClient],\n            },\n        });\n\n        this.initializeDashboard();\n    }\n\n    /** Used for restoring widgets state */\n    public reInitializeDashboard(): void {\n        // destroys the components and their providers so the dashboard can re init data\n        this.dashboard = undefined;\n        this.changeDetectorRef.detectChanges();\n\n        this.initializeDashboard();\n    }\n\n    public initializeDashboard(): void {\n        const tableWidget = widgetConfig;\n        const widgetIndex: IWidgets = {\n            [tableWidget.id]:\n                this.widgetTypesService.mergeWithWidgetType(tableWidget),\n        };\n\n        const positions: Record<string, GridsterItem> = {\n            [tableWidget.id]: {\n                cols: 12,\n                rows: 6,\n                y: 0,\n                x: 0,\n            },\n        };\n\n        this.dashboard = {\n            positions,\n            widgets: widgetIndex,\n        };\n    }\n}\n\nexport const widgetConfig: IWidget = {\n    id: "tableWidgetId",\n    type: "table",\n    pizzagna: {\n        configuration: {\n            header: {\n                properties: {\n                    title: "Google Books",\n                },\n            },\n            table: {\n                providers: {\n                    [WellKnownProviders.DataSource]: {\n                        providerId: AcmeTableGBooksDataSource.providerId,\n                    },\n                },\n                properties: {\n                    configuration: {\n                        columns: [\n                            {\n                                id: "column1",\n                                label: $localize`Title`,\n                                isActive: true,\n                                formatter: {\n                                    componentType: "RawFormatterComponent",\n                                    properties: {\n                                        dataFieldIds: {\n                                            value: "title",\n                                        },\n                                    },\n                                },\n                            },\n                            {\n                                id: "column2",\n                                label: $localize`Author`,\n                                isActive: true,\n                                formatter: {\n                                    componentType: "RawFormatterComponent",\n                                    properties: {\n                                        dataFieldIds: {\n                                            value: "authors",\n                                        },\n                                    },\n                                },\n                            },\n                        ],\n                        sortable: false,\n                        // define search configuration here\n                        searchConfiguration: {\n                            enabled: true,\n                            // following properties below can be configured as well\n                            // searchTerm: "search criteria here",\n                            // searchDebounce: 300,\n                        },\n                        hasVirtualScroll: true,\n                    } as ITableWidgetConfig,\n                },\n            },\n        },\n    },\n};\n'},42371:(o,e,n)=>{"use strict";n.r(e),n.d(e,{default:()=>t});const t='<table-widget-selectable-example\n    [selectionConfiguration]="selectionConfiguration"\n></table-widget-selectable-example>\n'},74503:(o,e,n)=>{"use strict";n.r(e),n.d(e,{default:()=>t});const t=".dashboard {\n    height: 400px;\n}\n"},17019:(o,e,n)=>{"use strict";n.r(e),n.d(e,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport { Component } from "@angular/core";\nimport { TableSelectionMode } from "@nova-ui/bits";\nimport { TableWidgetSelectionConfig } from "@nova-ui/dashboards";\n\n/**\n * A component that instantiates the dashboard\n */\n@Component({\n    selector: "table-widget-selectable-multi-example",\n    templateUrl: "./table-widget-selectable-multi.example.component.html",\n    styleUrls: ["./table-widget-selectable-multi.example.component.less"],\n})\nexport class TableWidgetSelectableMultiExampleComponent {\n    public selectionConfiguration: TableWidgetSelectionConfig = {\n        enabled: true,\n        selectionMode: TableSelectionMode.Multi,\n        trackByProperty: "id",\n        clickableRow: true,\n    };\n}\n'},69007:(o,e,n)=>{"use strict";n.r(e),n.d(e,{default:()=>t});const t='<table-widget-selectable-example\n    [selectionConfiguration]="selectionConfiguration"\n></table-widget-selectable-example>\n'},24475:(o,e,n)=>{"use strict";n.r(e),n.d(e,{default:()=>t});const t=".dashboard {\n    height: 400px;\n}\n"},95927:(o,e,n)=>{"use strict";n.r(e),n.d(e,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport { Component } from "@angular/core";\nimport { TableSelectionMode } from "@nova-ui/bits";\nimport { TableWidgetSelectionConfig } from "@nova-ui/dashboards";\n\n/**\n * A component that instantiates the dashboard\n */\n@Component({\n    selector: "table-widget-selectable-radio-example",\n    templateUrl: "./table-widget-selectable-radio.example.component.html",\n    styleUrls: ["./table-widget-selectable-radio.example.component.less"],\n})\nexport class TableWidgetSelectableRadioExampleComponent {\n    public selectionConfiguration: TableWidgetSelectionConfig = {\n        enabled: true,\n        selectionMode: TableSelectionMode.Radio,\n        trackByProperty: "id",\n        clickableRow: true,\n    };\n}\n'},46227:(o,e,n)=>{"use strict";n.r(e),n.d(e,{default:()=>t});const t='<table-widget-selectable-example\n    [selectionConfiguration]="selectionConfiguration"\n></table-widget-selectable-example>\n'},64471:(o,e,n)=>{"use strict";n.r(e),n.d(e,{default:()=>t});const t=".dashboard {\n    height: 400px;\n}\n"},74923:(o,e,n)=>{"use strict";n.r(e),n.d(e,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport { Component } from "@angular/core";\nimport { TableSelectionMode } from "@nova-ui/bits";\nimport { TableWidgetSelectionConfig } from "@nova-ui/dashboards";\n\n/**\n * A component that instantiates the dashboard\n */\n@Component({\n    selector: "table-widget-selectable-single-example",\n    templateUrl: "./table-widget-selectable-single.example.component.html",\n    styleUrls: ["./table-widget-selectable-single.example.component.less"],\n})\nexport class TableWidgetSelectableSingleExampleComponent {\n    public selectionConfiguration: TableWidgetSelectionConfig = {\n        enabled: true,\n        selectionMode: TableSelectionMode.Single,\n        trackByProperty: "id",\n    };\n}\n'},76130:(o,e,n)=>{"use strict";n.r(e),n.d(e,{default:()=>t});const t='<div class="mb-2 d-flex align-items-center">\n    <nui-switch class="ml-3 py-2" [(value)]="editMode" i18n>\n        Edit Mode\n    </nui-switch>\n    <button\n        *ngIf="!dashboard?.widgets[\'tableWidgetId\']"\n        type="button"\n        displayStyle="action"\n        (click)="reInitializeDashboard()"\n        nui-button\n    >\n        Restore Widget\n    </button>\n</div>\n\n<div class="w-100 dashboard">\n    \x3c!--\n        Note: The dashboard and gridsterConfig input assignments must use banana-in-a-box notation to keep\n        the dashboard state updated with changes to the pizzagna.\n    --\x3e\n    <nui-dashboard\n        *ngIf="dashboard"\n        [(dashboard)]="dashboard"\n        [editMode]="editMode"\n        [(gridsterConfig)]="gridsterConfig"\n        nuiWidgetEditor\n    >\n    </nui-dashboard>\n</div>\n'},52986:(o,e,n)=>{"use strict";n.r(e),n.d(e,{default:()=>t});const t=".dashboard {\n    height: 400px;\n}\n"},95102:(o,e,n)=>{"use strict";n.r(e),n.d(e,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport { HttpClient } from "@angular/common/http";\nimport { ChangeDetectorRef, Component, Input, OnInit } from "@angular/core";\nimport { GridsterConfig, GridsterItem } from "angular-gridster2";\nimport { LoggerService, TableSelectionMode } from "@nova-ui/bits";\nimport {\n    DATA_SOURCE,\n    DEFAULT_PIZZAGNA_ROOT,\n    IDashboard,\n    IProviderConfiguration,\n    ITableWidgetConfig,\n    IWidget,\n    IWidgets,\n    NOVA_URL_INTERACTION_HANDLER,\n    PizzagnaLayer,\n    ProviderRegistryService,\n    RawFormatterComponent,\n    TableWidgetSelectionConfig,\n    WellKnownPathKey,\n    WellKnownProviders,\n    WidgetTypesService,\n} from "@nova-ui/dashboards";\n\nimport { AcmeTableMockDataSource } from "../../../../prototypes/data/table/acme-table-mock-data-source.service";\n\n/**\n * A component that instantiates the dashboard\n */\n@Component({\n    selector: "table-widget-selectable-example",\n    templateUrl: "./table-widget-selectable.example.component.html",\n    styleUrls: ["./table-widget-selectable.example.component.less"],\n})\nexport class TableWidgetSelectableExampleComponent implements OnInit {\n    public dashboard: IDashboard | undefined;\n    public gridsterConfig: GridsterConfig = {};\n    public editMode: boolean = false;\n\n    @Input() public selectionConfiguration: TableWidgetSelectionConfig = {\n        enabled: false,\n        selectionMode: TableSelectionMode.None,\n    };\n\n    constructor(\n        private widgetTypesService: WidgetTypesService,\n        private providerRegistry: ProviderRegistryService,\n        private changeDetectorRef: ChangeDetectorRef\n    ) {}\n\n    public ngOnInit(): void {\n        const widgetTemplate = this.widgetTypesService.getWidgetType(\n            "table",\n            1\n        );\n        this.widgetTypesService.setNode(\n            widgetTemplate,\n            "configurator",\n            WellKnownPathKey.DataSourceProviders,\n            [AcmeTableMockDataSource.providerId]\n        );\n\n        this.providerRegistry.setProviders({\n            [AcmeTableMockDataSource.providerId]: {\n                provide: DATA_SOURCE,\n                useClass: AcmeTableMockDataSource,\n                deps: [LoggerService, HttpClient],\n            },\n        });\n\n        this.initializeDashboard();\n    }\n\n    /** Used for restoring widgets state */\n    public reInitializeDashboard(): void {\n        // destroys the components and their providers so the dashboard can re init data\n        this.dashboard = undefined;\n        this.changeDetectorRef.detectChanges();\n\n        this.initializeDashboard();\n    }\n\n    public initializeDashboard(): void {\n        const tableWidget = this.widgetConfig;\n        const widgetIndex: IWidgets = {\n            [tableWidget.id]:\n                this.widgetTypesService.mergeWithWidgetType(tableWidget),\n        };\n\n        const positions: Record<string, GridsterItem> = {\n            [tableWidget.id]: {\n                cols: 12,\n                rows: 6,\n                y: 0,\n                x: 0,\n            },\n        };\n\n        this.dashboard = {\n            positions,\n            widgets: widgetIndex,\n        };\n    }\n\n    private get widgetConfig(): IWidget {\n        return {\n            id: "widget1",\n            type: "table",\n            pizzagna: {\n                [PizzagnaLayer.Configuration]: {\n                    [DEFAULT_PIZZAGNA_ROOT]: {\n                        providers: {\n                            [WellKnownProviders.InteractionHandler]: {\n                                providerId: NOVA_URL_INTERACTION_HANDLER,\n                            },\n                        },\n                    },\n                    header: {\n                        properties: {\n                            title: "Table Widget with Selection!",\n                            subtitle: "Basic table widget",\n                            collapsible: true,\n                        },\n                    },\n                    table: {\n                        providers: {\n                            [WellKnownProviders.DataSource]: {\n                                providerId: AcmeTableMockDataSource.providerId,\n                            } as IProviderConfiguration,\n                        },\n                        properties: {\n                            configuration: {\n                                // enabling selection here\n                                selectionConfiguration:\n                                    this.selectionConfiguration,\n                                columns: [\n                                    {\n                                        id: "column1",\n                                        label: "No.",\n                                        isActive: true,\n                                        formatter: {\n                                            componentType:\n                                                RawFormatterComponent.lateLoadKey,\n                                            properties: {\n                                                dataFieldIds: {\n                                                    value: "position",\n                                                },\n                                            },\n                                        },\n                                    },\n                                    {\n                                        id: "column2",\n                                        label: "Name",\n                                        isActive: true,\n                                        formatter: {\n                                            componentType:\n                                                RawFormatterComponent.lateLoadKey,\n                                            properties: {\n                                                dataFieldIds: {\n                                                    value: "name",\n                                                },\n                                            },\n                                        },\n                                    },\n                                    {\n                                        id: "column3",\n                                        label: "Status",\n                                        isActive: true,\n                                        formatter: {\n                                            componentType:\n                                                RawFormatterComponent.lateLoadKey,\n                                            properties: {\n                                                dataFieldIds: {\n                                                    value: "status",\n                                                },\n                                            },\n                                        },\n                                    },\n                                ],\n                            } as ITableWidgetConfig,\n                        },\n                    },\n                },\n            },\n        };\n    }\n}\n'},36457:(o,e,n)=>{"use strict";n.r(e),n.d(e,{default:()=>t});const t='<div class="mb-2 d-flex align-items-center">\n    <nui-switch class="ml-3 py-2" [(value)]="editMode" i18n>\n        Edit Mode\n    </nui-switch>\n    <button\n        *ngIf="!dashboard?.widgets[\'tableWidgetId\']"\n        type="button"\n        displayStyle="action"\n        (click)="reInitializeDashboard()"\n        nui-button\n    >\n        Restore Widget\n    </button>\n</div>\n\n<div class="w-100 dashboard">\n    \x3c!--\n        Note: The dashboard and gridsterConfig input assignments must use banana-in-a-box notation to keep\n        the dashboard state updated with changes to the pizzagna.\n    --\x3e\n    <nui-dashboard\n        *ngIf="dashboard"\n        [(dashboard)]="dashboard"\n        [editMode]="editMode"\n        [(gridsterConfig)]="gridsterConfig"\n        nuiWidgetEditor\n    >\n    </nui-dashboard>\n</div>\n'},70485:(o,e,n)=>{"use strict";n.r(e),n.d(e,{default:()=>t});const t=".dashboard {\n    height: 400px;\n}\n"},11429:(o,e,n)=>{"use strict";n.r(e),n.d(e,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport { ChangeDetectorRef, Component, OnInit } from "@angular/core";\nimport { GridsterConfig, GridsterItem } from "angular-gridster2";\nimport orderBy from "lodash/orderBy";\nimport { BehaviorSubject, firstValueFrom, from } from "rxjs";\nimport { map, tap } from "rxjs/operators";\n\nimport {\n    DataSourceService,\n    IDataField,\n    INovaFilteringOutputs,\n    INovaFilters,\n    nameof,\n} from "@nova-ui/bits";\nimport {\n    DATA_SOURCE,\n    IDashboard,\n    ITableWidgetColumnConfig,\n    IWidget,\n    IWidgets,\n    ProviderRegistryService,\n    WellKnownPathKey,\n    WellKnownProviders,\n    WidgetTypesService,\n} from "@nova-ui/dashboards";\n\nexport const BREW_API_URL = "https://api.punkapi.com/v2/beers";\n\nexport interface IBrewInfo {\n    id: string;\n    name: string;\n    tagline: string;\n    first_brewed: string;\n    description: string;\n    brewers_tips: string;\n}\n\nexport interface IBrewDatasourceResponse {\n    brewInfo: IBrewInfo[];\n    total: number;\n}\n\nexport class BeerDataSource extends DataSourceService<IBrewInfo> {\n    public static providerId = "BeerDataSource";\n\n    private cache: IBrewInfo[] = [];\n\n    public busy = new BehaviorSubject(false);\n\n    public dataFields: Array<IDataField> = [\n        {\n            id: nameof<IBrewInfo>("id"),\n            label: "No",\n            dataType: "number",\n            sortable: true,\n        },\n        // To indicate that a column should not be sortable, set the optional IDataField \'sortable\' property to false\n        {\n            id: nameof<IBrewInfo>("name"),\n            label: "Name",\n            dataType: "string",\n            sortable: true,\n        },\n        {\n            id: nameof<IBrewInfo>("tagline"),\n            label: "Tagline",\n            dataType: "string",\n            sortable: true,\n        },\n        {\n            id: nameof<IBrewInfo>("first_brewed"),\n            label: "First Brewed",\n            dataType: "string",\n            sortable: true,\n        },\n        {\n            id: nameof<IBrewInfo>("description"),\n            label: "Description",\n            dataType: "string",\n            sortable: false,\n        },\n        {\n            id: nameof<IBrewInfo>("brewers_tips"),\n            label: "Brewer\'s Tips",\n            dataType: "string",\n            sortable: false,\n        },\n    ];\n\n    public async getFilteredData(\n        filters: INovaFilters\n    ): Promise<INovaFilteringOutputs> {\n        const start = filters.virtualScroll?.value?.start ?? 0;\n        const end = filters.virtualScroll?.value?.end ?? 0;\n\n        // Resetting cache on first page request\n        if (start === 0) {\n            this.cache = [];\n        }\n\n        // extract sorter settings to send to the backend\n        // filters.sorterValue.sortBy; filters.sorterValue.direction\n        return firstValueFrom(\n            from(this.fetch(start, end)).pipe(\n                tap((response: IBrewDatasourceResponse | undefined) => {\n                    if (!response) {\n                        return;\n                    }\n                    this.cache = this.sortData(\n                        this.cache.concat(response.brewInfo),\n                        filters\n                    );\n                    this.dataSubject.next(this.cache);\n                }),\n                map(() => ({\n                    repeat: { itemsSource: this.cache },\n                    dataFields: this.dataFields,\n                }))\n            )\n        );\n    }\n\n    public async fetch(\n        start: number,\n        end: number\n    ): Promise<IBrewDatasourceResponse | undefined> {\n        const delta: number = end - start;\n        const currentPage: number = end / delta || 0;\n        const response: Object | Array<IBrewInfo> = await (\n            await fetch(\n                `${BREW_API_URL}/?page=${currentPage}&per_page=${delta}`\n            )\n        ).json();\n\n        // Note: In case request fails we should not proceed with mapping\n        if (!Array.isArray(response)) {\n            return undefined;\n        }\n\n        return {\n            brewInfo: response.map((result: IBrewInfo) => ({\n                id: result.id,\n                name: result.name,\n                tagline: result.tagline,\n                first_brewed: result.first_brewed,\n                description: result.description,\n                brewers_tips: result.brewers_tips,\n            })),\n            total: response.length,\n        };\n    }\n\n    private sortData(data: IBrewInfo[], filters: INovaFilters): IBrewInfo[] {\n        return orderBy(\n            data,\n            filters.sorter?.value?.sortBy,\n            filters.sorter?.value?.direction as "desc" | "asc"\n        );\n    }\n}\n\n/**\n * A component that instantiates the dashboard\n */\n@Component({\n    selector: "table-widget-example",\n    templateUrl: "./table-widget-example.component.html",\n    styleUrls: ["./table-widget-example.component.less"],\n})\nexport class TableWidgetExampleComponent implements OnInit {\n    // This variable will hold all the data needed to define the layout and behavior of the widgets.\n    // Pass this to the dashboard component\'s dashboard input in the template.\n    public dashboard: IDashboard | undefined;\n\n    // Angular gridster requires a configuration object even if it\'s empty.\n    // Pass this to the dashboard component\'s gridsterConfig input in the template.\n    public gridsterConfig: GridsterConfig = {};\n\n    // Boolean passed as an input to the dashboard. When true, widgets can be moved, resized, removed, or edited\n    public editMode: boolean = false;\n\n    constructor(\n        // WidgetTypesService provides the widget\'s necessary structure information\n        private widgetTypesService: WidgetTypesService,\n        // In general, the ProviderRegistryService is used for making entities available for injection into dynamically loaded components.\n        private providerRegistry: ProviderRegistryService,\n        private changeDetectorRef: ChangeDetectorRef\n    ) {}\n\n    public ngOnInit(): void {\n        // Grabbing the widget\'s default template which will be needed as a parameter for setNode\n        const widgetTemplate = this.widgetTypesService.getWidgetType(\n            "table",\n            1\n        );\n\n        // Registering our data sources as dropdown options in the widget editor/configurator\n        // Note: This could also be done in the parent module\'s constructor so that\n        // multiple dashboards could have access to the same widget template modification.\n        this.widgetTypesService.setNode(\n            // This is the template we grabbed above with getWidgetType\n            widgetTemplate,\n            // We are setting the editor/configurator part of the widget template\n            "configurator",\n            // This indicates which node you are changing and we want to change\n            // the data source providers available for selection in the editor.\n            WellKnownPathKey.DataSourceProviders,\n            // We are setting the data sources available for selection in the editor\n            [BeerDataSource.providerId]\n        );\n\n        // Registering the data source for injection into the widget.\n        this.providerRegistry.setProviders({\n            [BeerDataSource.providerId]: {\n                provide: DATA_SOURCE,\n                useClass: BeerDataSource,\n                // Any dependencies that need to be injected into the provider must be listed here\n                deps: [],\n            },\n        });\n\n        this.initializeDashboard();\n    }\n\n    /** Used for restoring widgets state */\n    public reInitializeDashboard(): void {\n        // destroys the components and their providers so the dashboard can re init data\n        this.dashboard = undefined;\n        this.changeDetectorRef.detectChanges();\n\n        this.initializeDashboard();\n    }\n\n    public initializeDashboard(): void {\n        // We\'re using a static configuration object for this example, but this is where\n        // the widget\'s configuration could potentially be populated from a database\n        const tableWidget = widgetConfig;\n        const widgetIndex: IWidgets = {\n            // Enhance the widget with information coming from it\'s type definition\n            [tableWidget.id]:\n                this.widgetTypesService.mergeWithWidgetType(tableWidget),\n        };\n\n        // Setting the widget dimensions and position (this is for gridster)\n        const positions: Record<string, GridsterItem> = {\n            [tableWidget.id]: {\n                cols: 12,\n                rows: 6,\n                y: 0,\n                x: 0,\n            },\n        };\n\n        // Finally, assigning the variables we created above to the dashboard\n        this.dashboard = {\n            positions,\n            widgets: widgetIndex,\n        };\n    }\n}\n\nconst TABLE_COLUMNS: ITableWidgetColumnConfig[] = [\n    {\n        id: "column1",\n        label: $localize`Beer Name`,\n        isActive: true,\n        width: 185,\n        formatter: {\n            componentType: "RawFormatterComponent",\n            properties: {\n                dataFieldIds: {\n                    value: "name",\n                },\n            },\n        },\n    },\n    {\n        id: "column2",\n        label: $localize`Tagline`,\n        isActive: true,\n        width: 250,\n        formatter: {\n            componentType: "RawFormatterComponent",\n            properties: {\n                dataFieldIds: {\n                    value: "tagline",\n                },\n            },\n        },\n    },\n    {\n        id: "column3",\n        label: $localize`First Brewed`,\n        isActive: true,\n        width: 100,\n        formatter: {\n            componentType: "RawFormatterComponent",\n            properties: {\n                dataFieldIds: {\n                    value: "first_brewed",\n                },\n            },\n        },\n    },\n    {\n        id: "column4",\n        label: $localize`Description`,\n        isActive: true,\n        formatter: {\n            componentType: "RawFormatterComponent",\n            properties: {\n                dataFieldIds: {\n                    value: "description",\n                },\n            },\n        },\n    },\n];\n\nexport const widgetConfig: IWidget = {\n    id: "tableWidgetId",\n    type: "table",\n    pizzagna: {\n        configuration: {\n            header: {\n                properties: {\n                    title: "Stupendous Suds",\n                    subtitle: "Try These Brilliant Brews",\n                },\n            },\n            table: {\n                providers: {\n                    [WellKnownProviders.DataSource]: {\n                        providerId: BeerDataSource.providerId,\n                    },\n                },\n                properties: {\n                    configuration: {\n                        columns: TABLE_COLUMNS,\n                        sortable: true,\n                        sorterConfiguration: {\n                            descendantSorting: false,\n                            sortBy: "",\n                        },\n                        hasVirtualScroll: true,\n                    },\n                },\n            },\n        },\n    },\n};\n'},42477:(o,e,n)=>{"use strict";n.r(e),n.d(e,{default:()=>t});const t='<h1>Timeseries Widget</h1>\n\n<p>\n    A timeseries widget is, as its name suggests, used for visualizing changes\n    in one or more numeric values over a specified period of time. It\n    essentially brings a second dimension to the KPI widget use-case of\n    displaying values of one or more metrics at a specific moment in time, i.e.\n    the present. The following example exhibits an admittedly contrived scenario\n    of comparing the reported primary leisure activity of Solarians over a\n    seven-day period. The data is made up and makes absolutely no sense, but\n    it\'s all in good fun.\n</p>\n\n<nui-message type="info" [allowDismiss]="false">\n    For details on how to instantiate a timeseries widget, take a look at the\n    inline comments under the source expander of the following example.\n</nui-message>\n\n<h2>Supported Visualizations</h2>\n<ul>\n    <li>Line</li>\n    <li>Stacked Area</li>\n    <li>Stacked Percentage Area</li>\n    <li>Stacked Bar</li>\n    <li>Status Bar</li>\n</ul>\n\n<p>\n    The default visualization for the timeseries widget is Line. To change the\n    visualization presented by the widget, set the widget\'s\n    <code>pizzagna.configuration.chart.properties.configuration.preset</code>\n    property to a value of type\n    <code\n        ><a\n            href="../miscellaneous/enumerations.html#TimeseriesChartPreset"\n            target="_blank"\n            >TimeseriesChartPreset</a\n        ></code\n    >. For a look at how to configure it in the context of a functioning widget,\n    see the widget configurations in the source expanders of the examples on\n    this page.\n</p>\n\n<h3>Visualizations for Continuous Numeric Values</h3>\n\n<p>\n    Continuous numeric values can be visualized as lines, areas, or bars along a\n    time progression. Data sources for these visualizations should provide\n    series data that conform to the\n    <code\n        ><a\n            href="../interfaces/ITimeseriesWidgetSeriesData.html"\n            target="_blank"\n            >ITimeseriesWidgetSeriesData</a\n        ></code\n    >\n    interface in their output. Open the source expander of the following example\n    to see how this looks.\n</p>\n\n<nui-example-wrapper\n    filenamePrefix="timeseries-widget-example"\n    exampleTitle="Numeric Value Visualizations"\n>\n    <timeseries-widget-example></timeseries-widget-example>\n</nui-example-wrapper>\n\n<h3>Visualizing Discrete State Values</h3>\n\n<p>\n    Discrete state values can be visualized as horizontal bars of variable\n    length and color along a time progression. Data sources for the Status Bar\n    visualization must provide their series data in a slightly different format\n    from that of the other timeseries visualization types shown above. In this\n    case, the series data should conform to the\n    <code\n        ><a\n            href="../interfaces/ITimeseriesWidgetStatusData.html"\n            target="_blank"\n            >ITimeseriesWidgetStatusData</a\n        ></code\n    >\n    interface which extends\n    <code\n        ><a\n            href="../interfaces/ITimeseriesWidgetSeriesData.html"\n            target="_blank"\n            >ITimeseriesWidgetSeriesData</a\n        ></code\n    >\n    with three additional properties:\n</p>\n<ul>\n    <li>\n        <code>color</code>: string or css variable for the color to use for the\n        fill color of the associated bar\n    </li>\n    <li>\n        <code>icon</code>: string value for the name of the icon to display on\n        the bar as well as the legend\n    </li>\n    <li>\n        <code>thick</code>: boolean for whether or not to display a "thick" bar\n        ("false" is typically used for an "ok" status)\n    </li>\n</ul>\n\n<h4>Usage Notes</h4>\n<ul>\n    <li>\n        <strong\n            >Continuous (Non-Interval) Scale (<code\n                ><a\n                    href="../miscellaneous/enumerations.html#TimeseriesScaleType"\n                    target="_blank"\n                    >TimeseriesScaleType.Time</a\n                ></code\n            >)</strong\n        >\n        <ul>\n            <li>\n                To display the last data point correctly, your data must include\n                a final data point that indicates the endpoint for the most\n                recent status value in the data set.\n            </li>\n            <li>\n                To accommodate proper zooming of the chart, use the\n                <code\n                    ><a\n                        href="../miscellaneous/functions.html#applyStatusEndpoints"\n                        target="_blank"\n                        >applyStatusEndpoints</a\n                    ></code\n                >\n                function to prepend and append the filtered status data with\n                endpoints that match the start and end datetimes of the zoomed\n                time period. This will ensure that each status visualization has\n                valid start and end values after the chart is zoomed.\n            </li>\n        </ul>\n    </li>\n    <li>\n        <strong\n            >Interval Scale (<code\n                ><a\n                    href="../miscellaneous/enumerations.html#TimeseriesScaleType"\n                    target="_blank"\n                    >TimeseriesScaleType.TimeInterval</a\n                ></code\n            >)</strong\n        >\n        <ul>\n            <li>\n                Unlike a continuous scale <strong>no</strong> additional data\n                point is needed at the end of the data set since the status\n                values are visualized at regular intervals.\n            </li>\n            <li>\n                Unlike a continuous scale, endpoints do not need to be applied\n                to the data since the values are simply visualized at regular\n                intervals. In other words, the\n                <code>applyStatusEndpoints</code> function mentioned for\n                continuous scales above does not need to be used.\n            </li>\n        </ul>\n    </li>\n</ul>\n\n<p>\n    For better clarity on these usage notes, see the inline comments in the\n    source expander of the example below.\n</p>\n\n<nui-example-wrapper\n    filenamePrefix="timeseries-widget-status-bar-example"\n    exampleTitle="State Values Visualization"\n>\n    <timeseries-widget-status-bar-example></timeseries-widget-status-bar-example>\n</nui-example-wrapper>\n\n<h3>Interaction Handling</h3>\n<p>\n    The line chart below show how to use the\n    <code\n        ><a href="../injectables/UrlInteractionHandler.html" target="_blank"\n            >UrlInteractionHandler</a\n        ></code\n    >\n    to handle interactions that occur on the legend when the chart is set to\n    interactive. The stacked bar chart below shows how individual series can be\n    interactive when the series data has value for:\n</p>\n<ul>\n    <li><code>link</code>: string used for the legends label link.</li>\n    <li>\n        <code>secondaryLink</code>: string used for the legends secondary\n        description link.\n    </li>\n</ul>\n<p>\n    Look at the inline comments in the source expander to see how the\n    <code\n        ><a href="../injectables/UrlInteractionHandler.html" target="_blank"\n            >UrlInteractionHandler</a\n        ></code\n    >\n    is set up and configured.\n</p>\n\n<nui-example-wrapper\n    filenamePrefix="timeseries-widget-interactive-example"\n    exampleTitle="Timeseries with Interaction Examples"\n>\n    <timeseries-widget-interactive-example></timeseries-widget-interactive-example>\n</nui-example-wrapper>\n\n<h2>Widget Schema</h2>\n\n<p>\n    The code listings below are the source files for the Timeseries widget\n    definition with inline comments describing the parts that compose the\n    standard Timeseries widget type. It includes the widget\'s definition as well\n    as its corresponding configurator form for defining how to configure\n    (create/edit) the widget.\n</p>\n\n<h2>Widget</h2>\n<p>\n    This part shows the actual widget definition. It includes, among other\n    things, the components and providers that compose the widget itself.\n</p>\n\n<nui-example-code language="typescript">{{\n    timeseriesWidgetFileText\n}}</nui-example-code>\n\n<h2>Configurator</h2>\n<p>\n    This part shows the form that\'s used for configuring (creating/editing) the\n    widget.\n</p>\n\n<nui-example-code language="typescript">{{\n    timeseriesConfiguratorFileText\n}}</nui-example-code>\n\n<h2>Additional Features</h2>\n<ul>\n    <li>\n        Define custom colors for the chart by assigning a string array of css\n        color variables, color keywords, or RGB hex values to the\n        <code>chartColors</code> property on the widget\'s\n        <code>configuration</code> input (<code\n            ><a\n                href="../interfaces/ITimeseriesWidgetConfig.html"\n                target="_blank"\n                >ITimeseriesWidgetConfig</a\n            ></code\n        >). For how to do this, take a look at the inline comment in the\n        example\'s source expander above.\n    </li>\n    <li>\n        Apart from the aforementioned configuration options, you can also\n        configure the chart scale types using the <code>scales</code> property\n        of the <code>configuration</code> input. Supported scales are enumerated\n        in the\n        <code\n            ><a href="../miscellaneous/enumerations.html#TimeseriesScaleType"\n                >TimeseriesScaleType</a\n            ></code\n        >\n        type.\n    </li>\n</ul>\n'},8825:(o,e,n)=>{"use strict";n.r(e),n.d(e,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport { Component } from "@angular/core";\n\n@Component({\n    selector: "nui-timeseries-docs",\n    templateUrl: "./timeseries-docs.component.html",\n})\nexport class TimeseriesDocsComponent {\n    public timeseriesWidgetFileText =\n        require("!!raw-loader!../../../../../../src/lib/widget-types/timeseries/timeseries-widget.ts")\n            .default;\n    public timeseriesConfiguratorFileText =\n        require("!!raw-loader!../../../../../../src/lib/widget-types/timeseries/timeseries-configurator.ts")\n            .default;\n}\n'},65004:(o,e,n)=>{"use strict";n.r(e),n.d(e,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport { NgModule } from "@angular/core";\nimport { RouterModule, Routes } from "@angular/router";\n\nimport { DEMO_PATH_TOKEN } from "@nova-ui/bits";\nimport {\n    NuiButtonModule,\n    NuiDocsModule,\n    NuiMessageModule,\n    NuiSwitchModule,\n} from "@nova-ui/bits";\nimport { NuiDashboardsModule } from "@nova-ui/dashboards";\n\nimport { getDemoFiles } from "../../../../demo-files-factory";\nimport { TimeseriesDocsComponent } from "./timeseries-docs.component";\nimport { TimeseriesWidgetExampleComponent } from "./timeseries-widget-example/timeseries-widget-example.component";\nimport { TimeseriesWidgetInteractiveExampleComponent } from "./timeseries-widget-interactive-example/timeseries-widget-interactive-example.component";\nimport { TimeseriesWidgetStatusBarExampleComponent } from "./timeseries-widget-status-bar-example/timeseries-widget-status-bar-example.component";\n\nconst routes: Routes = [\n    {\n        path: "",\n        component: TimeseriesDocsComponent,\n        data: {\n            srlc: {\n                hideIndicator: true,\n            },\n            showThemeSwitcher: true,\n        },\n    },\n    {\n        path: "example",\n        component: TimeseriesWidgetExampleComponent,\n        data: {\n            srlc: {\n                hideIndicator: true,\n            },\n        },\n    },\n];\n\n@NgModule({\n    imports: [\n        RouterModule.forChild(routes),\n        NuiButtonModule,\n        NuiDocsModule,\n        NuiMessageModule,\n        NuiSwitchModule,\n        NuiDashboardsModule,\n    ],\n    declarations: [\n        TimeseriesDocsComponent,\n        TimeseriesWidgetExampleComponent,\n        TimeseriesWidgetInteractiveExampleComponent,\n        TimeseriesWidgetStatusBarExampleComponent,\n    ],\n    providers: [\n        {\n            provide: DEMO_PATH_TOKEN,\n            useValue: getDemoFiles("timeseries"),\n        },\n    ],\n})\nexport default class TimeseriesDocsModule {}\n'},9290:(o,e,n)=>{"use strict";n.r(e),n.d(e,{default:()=>t});const t='<div class="mb-2 d-flex align-items-center">\n    <nui-switch class="ml-3 py-2" [(value)]="editMode" i18n>\n        Edit Mode\n    </nui-switch>\n    <button\n        *ngIf="!dashboard?.widgets[\'timeseriesWidgetId\']"\n        type="button"\n        displayStyle="action"\n        (click)="reInitializeDashboard()"\n        nui-button\n    >\n        Restore Widget\n    </button>\n</div>\n\n<div class="w-100 dashboard">\n    \x3c!--\n        Note: The dashboard and gridsterConfig input assignments must use banana-in-a-box notation to keep\n        the dashboard state updated with changes to the pizzagna.\n    --\x3e\n    <nui-dashboard\n        *ngIf="dashboard"\n        [(dashboard)]="dashboard"\n        [editMode]="editMode"\n        [(gridsterConfig)]="gridsterConfig"\n        nuiWidgetEditor\n    >\n    </nui-dashboard>\n</div>\n'},18690:(o,e,n)=>{"use strict";n.r(e),n.d(e,{default:()=>t});const t=".dashboard {\n    height: 725px;\n}\n"},16694:(o,e,n)=>{"use strict";n.r(e),n.d(e,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport {\n    ChangeDetectorRef,\n    Component,\n    Injectable,\n    OnInit,\n} from "@angular/core";\nimport { GridsterConfig, GridsterItem } from "angular-gridster2";\nimport cloneDeep from "lodash/cloneDeep";\nimport keyBy from "lodash/keyBy";\nimport moment, { Moment } from "moment/moment";\nimport { BehaviorSubject } from "rxjs";\n\nimport {\n    DataSourceService,\n    IDataSource,\n    INovaFilters,\n    ITimeframe,\n} from "@nova-ui/bits";\nimport {\n    DATA_SOURCE,\n    DEFAULT_PIZZAGNA_ROOT,\n    IDashboard,\n    IDataSourceOutput,\n    IProviderConfiguration,\n    ISerializableTimeframe,\n    ITimeseriesItemConfiguration,\n    ITimeseriesOutput,\n    ITimeseriesScaleConfig,\n    ITimeseriesWidgetConfig,\n    ITimeseriesWidgetData,\n    ITimeseriesWidgetSeriesData,\n    IWidget,\n    LegendPlacement,\n    PizzagnaLayer,\n    ProviderRegistryService,\n    TimeseriesChartPreset,\n    TimeseriesScaleType,\n    WellKnownPathKey,\n    WellKnownProviders,\n    WidgetTypesService,\n} from "@nova-ui/dashboards";\n\n/**\n * A simple Timeseries data source implementation\n */\n@Injectable()\nexport class BeerVsReadingMockDataSource\n    extends DataSourceService<ITimeseriesWidgetData>\n    implements IDataSource<ITimeseriesOutput>\n{\n    public static providerId = "BeerVsReadingMockDataSource";\n\n    public busy = new BehaviorSubject<boolean>(false);\n\n    public async getFilteredData(\n        filters: INovaFilters\n    ): Promise<IDataSourceOutput<ITimeseriesOutput>> {\n        // In this example we\'re using some static mock data located at the bottom of this file. In a real-world\n        // scenario, the data for the chart would likely be retrieved via an asynchronous backend call.\n        let filteredData = getData();\n\n        this.busy.next(true);\n\n        // Filtering using the filter registered by the TimeFrameBar\n        const timeframeFilter = filters.timeframe?.value as ITimeframe;\n        if (timeframeFilter) {\n            filteredData = filteredData.map((item: ITimeseriesWidgetData) => ({\n                id: item.id,\n                name: item.name,\n                description: item.description,\n                data: item.data.filter(\n                    (seriesData: ITimeseriesWidgetSeriesData) =>\n                        filterDates(\n                            seriesData.x,\n                            timeframeFilter.startDatetime,\n                            timeframeFilter.endDatetime\n                        )\n                ),\n            }));\n        }\n\n        this.busy.next(false);\n\n        return { result: { series: filteredData } };\n    }\n}\n\nfunction filterDates(dateToCheck: Date, startDate: Moment, endDate: Moment) {\n    const mom = moment(dateToCheck);\n    return (\n        mom.isBetween(startDate, endDate) ||\n        mom.isSame(startDate) ||\n        mom.isSame(endDate)\n    );\n}\n\n/**\n * A component that instantiates the dashboard\n */\n@Component({\n    selector: "timeseries-widget-example",\n    templateUrl: "./timeseries-widget-example.component.html",\n    styleUrls: ["./timeseries-widget-example.component.less"],\n})\nexport class TimeseriesWidgetExampleComponent implements OnInit {\n    // This variable will hold all the data needed to define the layout and behavior of the widgets.\n    // Pass this to the dashboard component\'s dashboard input in the template.\n    public dashboard: IDashboard | undefined;\n\n    // Angular gridster requires a configuration object even if it\'s empty.\n    // Pass this to the dashboard component\'s gridsterConfig input in the template.\n    public gridsterConfig: GridsterConfig = {};\n\n    // Boolean passed as an input to the dashboard. When true, widgets can be moved, resized, removed, or edited\n    public editMode: boolean = false;\n\n    constructor(\n        // WidgetTypesService provides the widget\'s necessary structure information\n        private widgetTypesService: WidgetTypesService,\n\n        // In general, the ProviderRegistryService is used for making entities available for injection into dynamically loaded components.\n        private providerRegistry: ProviderRegistryService,\n\n        // Angular\'s ChangeDetectorRef\n        private changeDetectorRef: ChangeDetectorRef\n    ) {}\n\n    public ngOnInit(): void {\n        // Grabbing the widget\'s default template which will be needed as a parameter for setNode\n        const widgetTemplate = this.widgetTypesService.getWidgetType(\n            "timeseries",\n            1\n        );\n        // Registering our data sources as dropdown options in the widget editor/configurator\n        // Note: This could also be done in the parent module\'s constructor so that\n        // multiple dashboards could have access to the same widget template modification.\n        this.widgetTypesService.setNode(\n            // This is the template we grabbed above with getWidgetType\n            widgetTemplate,\n            // We are setting the editor/configurator part of the widget template\n            "configurator",\n            // This indicates which node you are changing and we want to change\n            // the data source providers available for selection in the editor.\n            WellKnownPathKey.DataSourceProviders,\n            // We are setting the data sources available for selection in the editor\n            [BeerVsReadingMockDataSource.providerId]\n        );\n\n        // Registering the data source for injection into the widget.\n        this.providerRegistry.setProviders({\n            [BeerVsReadingMockDataSource.providerId]: {\n                provide: DATA_SOURCE,\n                useClass: BeerVsReadingMockDataSource,\n                deps: [],\n            },\n        });\n\n        this.initializeDashboard();\n    }\n\n    public initializeDashboard(): void {\n        // We\'re using a static configuration object for this example, but this is where\n        // the widget\'s configuration could potentially be populated from a database\n        const widgetsWithStructure = widgetConfigs.map((w) =>\n            this.widgetTypesService.mergeWithWidgetType(w)\n        );\n        const widgetsIndex = keyBy(widgetsWithStructure, (w: IWidget) => w.id);\n\n        // Finally, assigning the variables we created above to the dashboard\n        this.dashboard = {\n            positions: cloneDeep(positions),\n            widgets: widgetsIndex,\n        };\n    }\n\n    /** Used for restoring widgets state */\n    public reInitializeDashboard(): void {\n        // destroys the components and their providers so the dashboard can re init data\n        this.dashboard = undefined;\n        this.changeDetectorRef.detectChanges();\n\n        this.initializeDashboard();\n    }\n}\n\nconst widgetConfigs: IWidget[] = [\n    {\n        id: "lineWidgetId",\n        type: "timeseries",\n        pizzagna: {\n            [PizzagnaLayer.Configuration]: {\n                [DEFAULT_PIZZAGNA_ROOT]: {\n                    providers: {\n                        [WellKnownProviders.DataSource]: {\n                            // Setting the initially selected data source providerId\n                            providerId: BeerVsReadingMockDataSource.providerId,\n                        } as IProviderConfiguration,\n                    },\n                },\n                header: {\n                    properties: {\n                        title: "Line Chart",\n                        subtitle: "Survey of 1000 Solarians",\n                    },\n                },\n                chart: {\n                    providers: {\n                        [WellKnownProviders.Adapter]: {\n                            properties: {\n                                // Setting the series and corresponding labels to initially display on the chart\n                                series: [\n                                    {\n                                        id: "series-1",\n                                        label: "Beer Tasting",\n                                        selectedSeriesId: "series-1",\n                                    },\n                                    {\n                                        id: "series-2",\n                                        label: "Reading",\n                                        selectedSeriesId: "series-2",\n                                    },\n                                ] as ITimeseriesItemConfiguration[],\n                            },\n                        } as Partial<IProviderConfiguration>,\n                    },\n                    properties: {\n                        // Setting the general chart configuration\n                        configuration: {\n                            legendPlacement: LegendPlacement.Right,\n                            enableZoom: true,\n                            leftAxisLabel: "Solarians (%)",\n                            // You can optionally define custom colors for the chart by setting the \'chartColors\' configuration property\n                            // "chartColors": [\n                            //     "var(--nui-color-chart-eight)",\n                            //     "var(--nui-color-chart-nine)",\n                            //     "var(--nui-color-chart-ten)",\n                            // ],\n                        } as ITimeseriesWidgetConfig,\n                    },\n                },\n                timeframeSelection: {\n                    properties: {\n                        // Setting the initial timeframe selected in the timeframe bar\n                        timeframe: {\n                            selectedPresetId: "last7Days",\n                        } as ISerializableTimeframe,\n                        minDate: moment().subtract(60, "days").format(),\n                        maxDate: moment().format(),\n                    },\n                },\n            },\n        },\n    },\n    {\n        id: "stackedAreaWidgetId",\n        type: "timeseries",\n        pizzagna: {\n            [PizzagnaLayer.Configuration]: {\n                [DEFAULT_PIZZAGNA_ROOT]: {\n                    providers: {\n                        [WellKnownProviders.DataSource]: {\n                            // Setting the initially selected data source providerId\n                            providerId: BeerVsReadingMockDataSource.providerId,\n                        } as IProviderConfiguration,\n                    },\n                },\n                header: {\n                    properties: {\n                        title: "Stacked Area Chart",\n                        subtitle: "Survey of 1000 Solarians",\n                    },\n                },\n                chart: {\n                    providers: {\n                        [WellKnownProviders.Adapter]: {\n                            properties: {\n                                // Setting the series and corresponding labels to initially display on the chart\n                                series: [\n                                    {\n                                        id: "series-1",\n                                        label: "Beer Tasting",\n                                        selectedSeriesId: "series-1",\n                                    },\n                                    {\n                                        id: "series-2",\n                                        label: "Reading",\n                                        selectedSeriesId: "series-2",\n                                    },\n                                ] as ITimeseriesItemConfiguration[],\n                            },\n                        } as Partial<IProviderConfiguration>,\n                    },\n                    properties: {\n                        // Setting the general chart configuration\n                        configuration: {\n                            legendPlacement: LegendPlacement.Right,\n                            enableZoom: true,\n                            // Setting the preset to stacked area\n                            preset: TimeseriesChartPreset.StackedArea,\n                            leftAxisLabel: "Solarians (%)",\n                            // You can optionally define custom colors for the chart by setting the \'chartColors\' configuration property\n                            // "chartColors": [\n                            //     "var(--nui-color-chart-eight)",\n                            //     "var(--nui-color-chart-nine)",\n                            //     "var(--nui-color-chart-ten)",\n                            // ],\n                        } as ITimeseriesWidgetConfig,\n                    },\n                },\n                timeframeSelection: {\n                    properties: {\n                        // Setting the initial timeframe selected in the timeframe bar\n                        timeframe: {\n                            selectedPresetId: "last7Days",\n                        } as ISerializableTimeframe,\n                        minDate: moment().subtract(60, "days").format(),\n                        maxDate: moment().format(),\n                    },\n                },\n            },\n        },\n    },\n    {\n        id: "stackedPercentageAreaWidgetId",\n        type: "timeseries",\n        pizzagna: {\n            [PizzagnaLayer.Configuration]: {\n                [DEFAULT_PIZZAGNA_ROOT]: {\n                    providers: {\n                        [WellKnownProviders.DataSource]: {\n                            // Setting the initially selected data source providerId\n                            providerId: BeerVsReadingMockDataSource.providerId,\n                        } as IProviderConfiguration,\n                    },\n                },\n                header: {\n                    properties: {\n                        title: "Stacked Percentage Area Chart",\n                        subtitle: "Survey of 1000 Solarians",\n                    },\n                },\n                chart: {\n                    providers: {\n                        [WellKnownProviders.Adapter]: {\n                            properties: {\n                                // Setting the series and corresponding labels to initially display on the chart\n                                series: [\n                                    {\n                                        id: "series-1",\n                                        label: "Beer Tasting",\n                                        selectedSeriesId: "series-1",\n                                    },\n                                    {\n                                        id: "series-2",\n                                        label: "Reading",\n                                        selectedSeriesId: "series-2",\n                                    },\n                                ] as ITimeseriesItemConfiguration[],\n                            },\n                        } as Partial<IProviderConfiguration>,\n                    },\n                    properties: {\n                        // Setting the general chart configuration\n                        configuration: {\n                            legendPlacement: LegendPlacement.Right,\n                            enableZoom: true,\n                            // Setting the preset to stacked percentage area\n                            preset: TimeseriesChartPreset.StackedPercentageArea,\n                            leftAxisLabel: "Solarians (%)",\n                            // You can optionally define custom colors for the chart by setting the \'chartColors\' configuration property\n                            // "chartColors": [\n                            //     "var(--nui-color-chart-eight)",\n                            //     "var(--nui-color-chart-nine)",\n                            //     "var(--nui-color-chart-ten)",\n                            // ],\n                        } as ITimeseriesWidgetConfig,\n                    },\n                },\n                timeframeSelection: {\n                    properties: {\n                        // Setting the initial timeframe selected in the timeframe bar\n                        timeframe: {\n                            selectedPresetId: "last7Days",\n                        } as ISerializableTimeframe,\n                        minDate: moment().subtract(60, "days").format(),\n                        maxDate: moment().format(),\n                    },\n                },\n            },\n        },\n    },\n    {\n        id: "stackedBarWidgetId",\n        type: "timeseries",\n        pizzagna: {\n            [PizzagnaLayer.Configuration]: {\n                [DEFAULT_PIZZAGNA_ROOT]: {\n                    providers: {\n                        [WellKnownProviders.DataSource]: {\n                            // Setting the initially selected data source providerId\n                            providerId: BeerVsReadingMockDataSource.providerId,\n                        } as IProviderConfiguration,\n                    },\n                },\n                header: {\n                    properties: {\n                        title: "Stacked Bar Chart",\n                        subtitle: "Survey of 1000 Solarians",\n                    },\n                },\n                chart: {\n                    providers: {\n                        [WellKnownProviders.Adapter]: {\n                            properties: {\n                                // Setting the series and corresponding labels to initially display on the chart\n                                series: [\n                                    {\n                                        id: "series-1",\n                                        label: "Beer Tasting",\n                                        selectedSeriesId: "series-1",\n                                    },\n                                    {\n                                        id: "series-2",\n                                        label: "Reading",\n                                        selectedSeriesId: "series-2",\n                                    },\n                                ] as ITimeseriesItemConfiguration[],\n                            },\n                        } as Partial<IProviderConfiguration>,\n                    },\n                    properties: {\n                        configuration: {\n                            legendPlacement: LegendPlacement.Right,\n                            enableZoom: true,\n                            leftAxisLabel: "Solarians (%)",\n                            // Setting the preset to stacked bar\n                            preset: TimeseriesChartPreset.StackedBar,\n                            scales: {\n                                x: {\n                                    type: TimeseriesScaleType.TimeInterval,\n                                    properties: {\n                                        interval: 24 * 60 * 60,\n                                    },\n                                } as ITimeseriesScaleConfig,\n                            },\n                        } as ITimeseriesWidgetConfig,\n                    },\n                },\n                timeframeSelection: {\n                    properties: {\n                        // Setting the initial timeframe selected in the timeframe bar\n                        timeframe: {\n                            selectedPresetId: "last7Days",\n                        } as ISerializableTimeframe,\n                        minDate: moment().subtract(60, "days").format(),\n                        maxDate: moment().format(),\n                    },\n                },\n            },\n        },\n    },\n];\n\n// using startOf("day") so that each band for the bar chart corresponds to a calendar day\nconst now = moment().startOf("day");\n\nexport const getData = (): ITimeseriesWidgetData[] => [\n    {\n        id: "series-1",\n        name: "Beer Tasting",\n        description: "Havin\' some suds",\n        data: [\n            { x: now.clone().subtract(20, "day").toDate(), y: 30 },\n            { x: now.clone().subtract(19, "day").toDate(), y: 35 },\n            { x: now.clone().subtract(18, "day").toDate(), y: 33 },\n            { x: now.clone().subtract(17, "day").toDate(), y: 40 },\n            { x: now.clone().subtract(16, "day").toDate(), y: 35 },\n            { x: now.clone().subtract(15, "day").toDate(), y: 30 },\n            { x: now.clone().subtract(14, "day").toDate(), y: 35 },\n            { x: now.clone().subtract(13, "day").toDate(), y: 15 },\n            { x: now.clone().subtract(12, "day").toDate(), y: 30 },\n            { x: now.clone().subtract(11, "day").toDate(), y: 45 },\n            { x: now.clone().subtract(10, "day").toDate(), y: 60 },\n            { x: now.clone().subtract(9, "day").toDate(), y: 54 },\n            { x: now.clone().subtract(8, "day").toDate(), y: 42 },\n            { x: now.clone().subtract(7, "day").toDate(), y: 44 },\n            { x: now.clone().subtract(6, "day").toDate(), y: 54 },\n            { x: now.clone().subtract(5, "day").toDate(), y: 43 },\n            { x: now.clone().subtract(4, "day").toDate(), y: 76 },\n            { x: now.clone().subtract(3, "day").toDate(), y: 54 },\n            { x: now.clone().subtract(2, "day").toDate(), y: 42 },\n            { x: now.clone().subtract(1, "day").toDate(), y: 34 },\n        ],\n    },\n    {\n        id: "series-2",\n        name: "Reading",\n        description: "Hittin\' the books",\n        data: [\n            { x: now.clone().subtract(20, "day").toDate(), y: 60 },\n            { x: now.clone().subtract(19, "day").toDate(), y: 64 },\n            { x: now.clone().subtract(18, "day").toDate(), y: 70 },\n            { x: now.clone().subtract(17, "day").toDate(), y: 55 },\n            { x: now.clone().subtract(16, "day").toDate(), y: 55 },\n            { x: now.clone().subtract(15, "day").toDate(), y: 45 },\n            { x: now.clone().subtract(14, "day").toDate(), y: 60 },\n            { x: now.clone().subtract(13, "day").toDate(), y: 65 },\n            { x: now.clone().subtract(12, "day").toDate(), y: 63 },\n            { x: now.clone().subtract(11, "day").toDate(), y: 60 },\n            { x: now.clone().subtract(10, "day").toDate(), y: 61 },\n            { x: now.clone().subtract(9, "day").toDate(), y: 65 },\n            { x: now.clone().subtract(8, "day").toDate(), y: 63 },\n            { x: now.clone().subtract(7, "day").toDate(), y: 58 },\n            { x: now.clone().subtract(6, "day").toDate(), y: 64 },\n            { x: now.clone().subtract(5, "day").toDate(), y: 63 },\n            { x: now.clone().subtract(4, "day").toDate(), y: 60 },\n            { x: now.clone().subtract(3, "day").toDate(), y: 62 },\n            { x: now.clone().subtract(2, "day").toDate(), y: 61 },\n            { x: now.clone().subtract(1, "day").toDate(), y: 62 },\n        ],\n    },\n];\n\n// Setting the widget dimensions and position (this is for gridster)\nconst positions: Record<string, GridsterItem> = {\n    [widgetConfigs[0].id]: {\n        cols: 6,\n        rows: 6,\n        y: 0,\n        x: 0,\n    },\n    [widgetConfigs[1].id]: {\n        cols: 6,\n        rows: 6,\n        y: 0,\n        x: 6,\n    },\n    [widgetConfigs[3].id]: {\n        cols: 6,\n        rows: 6,\n        y: 6,\n        x: 0,\n    },\n    [widgetConfigs[2].id]: {\n        cols: 6,\n        rows: 6,\n        y: 6,\n        x: 6,\n    },\n};\n'},2946:(o,e,n)=>{"use strict";n.r(e),n.d(e,{default:()=>t});const t='<div class="mb-2 d-flex align-items-center">\n    <nui-switch class="ml-3 py-2" [(value)]="editMode" i18n>\n        Edit Mode\n    </nui-switch>\n    <button\n        *ngIf="!dashboard?.widgets[\'timeseriesWidgetId\']"\n        type="button"\n        displayStyle="action"\n        (click)="reInitializeDashboard()"\n        nui-button\n    >\n        Restore Widget\n    </button>\n</div>\n\n<div class="w-100 dashboard">\n    \x3c!--\n        Note: The dashboard and gridsterConfig input assignments must use banana-in-a-box notation to keep\n        the dashboard state updated with changes to the pizzagna.\n    --\x3e\n    <nui-dashboard\n        *ngIf="dashboard"\n        [(dashboard)]="dashboard"\n        [editMode]="editMode"\n        [(gridsterConfig)]="gridsterConfig"\n        nuiWidgetEditor\n    >\n    </nui-dashboard>\n</div>\n'},79802:(o,e,n)=>{"use strict";n.r(e),n.d(e,{default:()=>t});const t=".dashboard {\n    height: 375px;\n}\n"},84350:(o,e,n)=>{"use strict";n.r(e),n.d(e,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport {\n    ChangeDetectorRef,\n    Component,\n    Injectable,\n    OnInit,\n} from "@angular/core";\nimport { GridsterConfig, GridsterItem } from "angular-gridster2";\nimport cloneDeep from "lodash/cloneDeep";\nimport keyBy from "lodash/keyBy";\nimport moment, { Moment } from "moment/moment";\nimport { BehaviorSubject } from "rxjs";\n\nimport {\n    DataSourceService,\n    IDataSource,\n    INovaFilters,\n    ITimeframe,\n} from "@nova-ui/bits";\nimport {\n    DATA_SOURCE,\n    DEFAULT_PIZZAGNA_ROOT,\n    IDashboard,\n    IDataSourceOutput,\n    IProviderConfiguration,\n    ISerializableTimeframe,\n    ITimeseriesItemConfiguration,\n    ITimeseriesOutput,\n    ITimeseriesScaleConfig,\n    ITimeseriesWidgetConfig,\n    ITimeseriesWidgetData,\n    ITimeseriesWidgetSeriesData,\n    IWidget,\n    NOVA_URL_INTERACTION_HANDLER,\n    LegendPlacement,\n    PizzagnaLayer,\n    ProviderRegistryService,\n    TimeseriesChartPreset,\n    TimeseriesScaleType,\n    WellKnownPathKey,\n    WellKnownProviders,\n    WidgetTypesService,\n} from "@nova-ui/dashboards";\n\n/**\n * A simple Timeseries data source implementation\n */\n@Injectable()\nexport class TimeseriesMockDataSource\n    extends DataSourceService<ITimeseriesWidgetData>\n    implements IDataSource<ITimeseriesOutput>\n{\n    public static providerId = "TimeseriesMockDataSource";\n\n    public busy = new BehaviorSubject<boolean>(false);\n\n    public async getFilteredData(\n        filters: INovaFilters\n    ): Promise<IDataSourceOutput<ITimeseriesOutput>> {\n        // In this example we\'re using some static mock data located at the bottom of this file. In a real-world\n        // scenario, the data for the chart would likely be retrieved via an asynchronous backend call.\n        let filteredData = getData();\n\n        this.busy.next(true);\n\n        // Filtering using the filter registered by the TimeFrameBar\n        const timeframeFilter = filters.timeframe?.value as ITimeframe;\n        if (timeframeFilter) {\n            filteredData = filteredData.map((item: ITimeseriesWidgetData) => ({\n                id: item.id,\n                name: item.name,\n                description: item.description,\n                // the filtered data should return the provided links if they are set.\n                link: item?.link,\n                secondaryLink: item?.secondaryLink,\n                data: item.data.filter(\n                    (seriesData: ITimeseriesWidgetSeriesData) =>\n                        filterDates(\n                            seriesData.x,\n                            timeframeFilter.startDatetime,\n                            timeframeFilter.endDatetime\n                        )\n                ),\n            }));\n        }\n\n        this.busy.next(false);\n\n        return { result: { series: filteredData } };\n    }\n}\n\nfunction filterDates(dateToCheck: Date, startDate: Moment, endDate: Moment) {\n    const mom = moment(dateToCheck);\n    return (\n        mom.isBetween(startDate, endDate) ||\n        mom.isSame(startDate) ||\n        mom.isSame(endDate)\n    );\n}\n\n/**\n * A component that instantiates the dashboard\n */\n@Component({\n    selector: "timeseries-widget-interactive-example",\n    templateUrl: "./timeseries-widget-interactive-example.component.html",\n    styleUrls: ["./timeseries-widget-interactive-example.component.less"],\n})\nexport class TimeseriesWidgetInteractiveExampleComponent implements OnInit {\n    // This variable will hold all the data needed to define the layout and behavior of the widgets.\n    // Pass this to the dashboard component\'s dashboard input in the template.\n    public dashboard: IDashboard | undefined;\n\n    // Angular gridster requires a configuration object even if it\'s empty.\n    // Pass this to the dashboard component\'s gridsterConfig input in the template.\n    public gridsterConfig: GridsterConfig = {};\n\n    // Boolean passed as an input to the dashboard. When true, widgets can be moved, resized, removed, or edited\n    public editMode: boolean = false;\n\n    constructor(\n        // WidgetTypesService provides the widget\'s necessary structure information\n        private widgetTypesService: WidgetTypesService,\n\n        // In general, the ProviderRegistryService is used for making entities available for injection into dynamically loaded components.\n        private providerRegistry: ProviderRegistryService,\n\n        // Angular\'s ChangeDetectorRef\n        private changeDetectorRef: ChangeDetectorRef\n    ) {}\n\n    public ngOnInit(): void {\n        // Grabbing the widget\'s default template which will be needed as a parameter for setNode\n        const widgetTemplate = this.widgetTypesService.getWidgetType(\n            "timeseries",\n            1\n        );\n        // Registering our data sources as dropdown options in the widget editor/configurator\n        // Note: This could also be done in the parent module\'s constructor so that\n        // multiple dashboards could have access to the same widget template modification.\n        this.widgetTypesService.setNode(\n            // This is the template we grabbed above with getWidgetType\n            widgetTemplate,\n            // We are setting the editor/configurator part of the widget template\n            "configurator",\n            // This indicates which node you are changing and we want to change\n            // the data source providers available for selection in the editor.\n            WellKnownPathKey.DataSourceProviders,\n            // We are setting the data sources available for selection in the editor\n            [TimeseriesMockDataSource.providerId]\n        );\n\n        // Registering the data source for injection into the widget.\n        this.providerRegistry.setProviders({\n            [TimeseriesMockDataSource.providerId]: {\n                provide: DATA_SOURCE,\n                useClass: TimeseriesMockDataSource,\n                deps: [],\n            },\n        });\n\n        this.initializeDashboard();\n    }\n\n    public initializeDashboard(): void {\n        // We\'re using a static configuration object for this example, but this is where\n        // the widget\'s configuration could potentially be populated from a database\n        const widgetsWithStructure = widgetConfigs.map((w) =>\n            this.widgetTypesService.mergeWithWidgetType(w)\n        );\n        const widgetsIndex = keyBy(widgetsWithStructure, (w: IWidget) => w.id);\n\n        // Finally, assigning the variables we created above to the dashboard\n        this.dashboard = {\n            positions: cloneDeep(positions),\n            widgets: widgetsIndex,\n        };\n    }\n\n    /** Used for restoring widgets state */\n    public reInitializeDashboard(): void {\n        // destroys the components and their providers so the dashboard can re init data\n        this.dashboard = undefined;\n        this.changeDetectorRef.detectChanges();\n\n        this.initializeDashboard();\n    }\n}\n\nconst widgetConfigs: IWidget[] = [\n    {\n        id: "lineWidgetId",\n        type: "timeseries",\n        pizzagna: {\n            [PizzagnaLayer.Configuration]: {\n                [DEFAULT_PIZZAGNA_ROOT]: {\n                    providers: {\n                        [WellKnownProviders.DataSource]: {\n                            // Setting the initially selected data source providerId\n                            providerId: TimeseriesMockDataSource.providerId,\n                        } as IProviderConfiguration,\n                        [WellKnownProviders.InteractionHandler]: {\n                            // Setting the UrlInteractionHandler as an interactionHandler\n                            providerId: NOVA_URL_INTERACTION_HANDLER,\n                            properties: {\n                                // the \'url\' property tells the handler what link to use when interaction occurs on the series\n                                url: "${data.link || \'https://en.wikipedia.org/wiki/\'+data.legendDescriptionPrimary}",\n                                // by default the link is opened in the current window, set \'newWindow\' to true to open in a new tab instead\n                                // newWindow: true,\n                            },\n                        },\n                    },\n                },\n                header: {\n                    properties: {\n                        title: "Line Chart",\n                        subtitle: "Basic Timeseries with Interaction",\n                    },\n                },\n                chart: {\n                    providers: {\n                        [WellKnownProviders.Adapter]: {\n                            properties: {\n                                // Setting the series and corresponding labels to initially display on the chart\n                                series: [\n                                    {\n                                        id: "series-1",\n                                        label: "Nur-Sultan",\n                                        selectedSeriesId: "series-1",\n                                    },\n                                    {\n                                        id: "series-2",\n                                        label: "Brno",\n                                        selectedSeriesId: "series-2",\n                                    },\n                                    {\n                                        id: "series-3",\n                                        label: "Lisbon",\n                                        selectedSeriesId: "series-3",\n                                    },\n                                    {\n                                        id: "series-4",\n                                        label: "Austin",\n                                        selectedSeriesId: "series-4",\n                                    },\n                                ] as ITimeseriesItemConfiguration[],\n                            },\n                        } as Partial<IProviderConfiguration>,\n                    },\n                    properties: {\n                        // Setting the general chart configuration\n                        configuration: {\n                            // setting interaction to \'series\' will make all series in the chart interactable\n                            interaction: "series",\n                            legendPlacement: LegendPlacement.Right,\n                            enableZoom: true,\n                        } as ITimeseriesWidgetConfig,\n                    },\n                },\n                timeframeSelection: {\n                    properties: {\n                        timeframe: {\n                            selectedPresetId: "last7Days",\n                        } as ISerializableTimeframe,\n                        minDate: moment().subtract(60, "days").format(),\n                        maxDate: moment().format(),\n                    },\n                },\n            },\n        },\n    },\n    {\n        id: "stackedBarWidgetId",\n        type: "timeseries",\n        pizzagna: {\n            [PizzagnaLayer.Configuration]: {\n                [DEFAULT_PIZZAGNA_ROOT]: {\n                    providers: {\n                        [WellKnownProviders.DataSource]: {\n                            // Setting the initially selected data source providerId\n                            providerId: TimeseriesMockDataSource.providerId,\n                        } as IProviderConfiguration,\n                    },\n                },\n                header: {\n                    properties: {\n                        title: "Stacked Bar Chart",\n                        subtitle:\n                            "Basic Timeseries without Interaction Handler",\n                    },\n                },\n                chart: {\n                    providers: {\n                        [WellKnownProviders.Adapter]: {\n                            properties: {\n                                // Setting the series and corresponding labels to initially display on the chart\n                                series: [\n                                    {\n                                        id: "series-1",\n                                        label: "Nur-Sultan",\n                                        selectedSeriesId: "series-1",\n                                    },\n                                    {\n                                        id: "series-2",\n                                        label: "Brno",\n                                        selectedSeriesId: "series-2",\n                                    },\n                                    {\n                                        id: "series-3",\n                                        label: "Lisbon",\n                                        selectedSeriesId: "series-3",\n                                    },\n                                    {\n                                        id: "series-4",\n                                        label: "Austin",\n                                        selectedSeriesId: "series-4",\n                                    },\n                                ] as ITimeseriesItemConfiguration[],\n                            },\n                        } as Partial<IProviderConfiguration>,\n                    },\n                    properties: {\n                        // Setting the general chart configuration\n                        configuration: {\n                            legendPlacement: LegendPlacement.Right,\n                            enableZoom: true,\n                            // Setting the preset to stacked bar\n                            preset: TimeseriesChartPreset.StackedBar,\n                            scales: {\n                                x: {\n                                    type: TimeseriesScaleType.TimeInterval,\n                                    properties: {\n                                        interval: 24 * 60 * 60,\n                                    },\n                                } as ITimeseriesScaleConfig,\n                            },\n                        } as ITimeseriesWidgetConfig,\n                    },\n                },\n                timeframeSelection: {\n                    properties: {\n                        // Setting the initial timeframe selected in the timeframe bar\n                        timeframe: {\n                            selectedPresetId: "last7Days",\n                        } as ISerializableTimeframe,\n                        minDate: moment().subtract(60, "days").format(),\n                        maxDate: moment().format(),\n                    },\n                },\n            },\n        },\n    },\n];\n\n// using startOf("day") so that each band for the bar chart corresponds to a calendar day\nconst startOfToday = moment().startOf("day").toDate();\n\nexport const getData = (): ITimeseriesWidgetData[] => [\n    {\n        id: "series-1",\n        name: "Nur-Sultan",\n        description: "\'link\' only",\n        link: "https://en.wikipedia.org/wiki/Nur-Sultan",\n        data: [\n            { x: moment(startOfToday).subtract(59, "day").toDate(), y: 35 },\n            { x: moment(startOfToday).subtract(58, "day").toDate(), y: 33 },\n            { x: moment(startOfToday).subtract(57, "day").toDate(), y: 40 },\n            { x: moment(startOfToday).subtract(56, "day").toDate(), y: 35 },\n            { x: moment(startOfToday).subtract(55, "day").toDate(), y: 30 },\n            { x: moment(startOfToday).subtract(54, "day").toDate(), y: 35 },\n            { x: moment(startOfToday).subtract(53, "day").toDate(), y: 15 },\n            { x: moment(startOfToday).subtract(52, "day").toDate(), y: 30 },\n            { x: moment(startOfToday).subtract(51, "day").toDate(), y: 35 },\n            { x: moment(startOfToday).subtract(50, "day").toDate(), y: 34 },\n            { x: moment(startOfToday).subtract(49, "day").toDate(), y: 35 },\n            { x: moment(startOfToday).subtract(48, "day").toDate(), y: 33 },\n            { x: moment(startOfToday).subtract(47, "day").toDate(), y: 40 },\n            { x: moment(startOfToday).subtract(46, "day").toDate(), y: 35 },\n            { x: moment(startOfToday).subtract(45, "day").toDate(), y: 30 },\n            { x: moment(startOfToday).subtract(44, "day").toDate(), y: 35 },\n            { x: moment(startOfToday).subtract(43, "day").toDate(), y: 15 },\n            { x: moment(startOfToday).subtract(42, "day").toDate(), y: 30 },\n            { x: moment(startOfToday).subtract(41, "day").toDate(), y: 35 },\n            { x: moment(startOfToday).subtract(40, "day").toDate(), y: 34 },\n            { x: moment(startOfToday).subtract(39, "day").toDate(), y: 35 },\n            { x: moment(startOfToday).subtract(38, "day").toDate(), y: 33 },\n            { x: moment(startOfToday).subtract(37, "day").toDate(), y: 40 },\n            { x: moment(startOfToday).subtract(36, "day").toDate(), y: 35 },\n            { x: moment(startOfToday).subtract(35, "day").toDate(), y: 30 },\n            { x: moment(startOfToday).subtract(34, "day").toDate(), y: 35 },\n            { x: moment(startOfToday).subtract(33, "day").toDate(), y: 15 },\n            { x: moment(startOfToday).subtract(32, "day").toDate(), y: 30 },\n            { x: moment(startOfToday).subtract(31, "day").toDate(), y: 35 },\n            { x: moment(startOfToday).subtract(30, "day").toDate(), y: 34 },\n            { x: moment(startOfToday).subtract(29, "day").toDate(), y: 35 },\n            { x: moment(startOfToday).subtract(28, "day").toDate(), y: 33 },\n            { x: moment(startOfToday).subtract(27, "day").toDate(), y: 40 },\n            { x: moment(startOfToday).subtract(26, "day").toDate(), y: 35 },\n            { x: moment(startOfToday).subtract(25, "day").toDate(), y: 30 },\n            { x: moment(startOfToday).subtract(24, "day").toDate(), y: 35 },\n            { x: moment(startOfToday).subtract(23, "day").toDate(), y: 15 },\n            { x: moment(startOfToday).subtract(22, "day").toDate(), y: 30 },\n            { x: moment(startOfToday).subtract(21, "day").toDate(), y: 35 },\n            { x: moment(startOfToday).subtract(20, "day").toDate(), y: 34 },\n            { x: moment(startOfToday).subtract(19, "day").toDate(), y: 35 },\n            { x: moment(startOfToday).subtract(18, "day").toDate(), y: 33 },\n            { x: moment(startOfToday).subtract(17, "day").toDate(), y: 40 },\n            { x: moment(startOfToday).subtract(16, "day").toDate(), y: 35 },\n            { x: moment(startOfToday).subtract(15, "day").toDate(), y: 30 },\n            { x: moment(startOfToday).subtract(14, "day").toDate(), y: 35 },\n            { x: moment(startOfToday).subtract(13, "day").toDate(), y: 15 },\n            { x: moment(startOfToday).subtract(12, "day").toDate(), y: 30 },\n            { x: moment(startOfToday).subtract(11, "day").toDate(), y: 35 },\n            { x: moment(startOfToday).subtract(10, "day").toDate(), y: 34 },\n            { x: moment(startOfToday).subtract(9, "day").toDate(), y: 33 },\n            { x: moment(startOfToday).subtract(8, "day").toDate(), y: 35 },\n            { x: moment(startOfToday).subtract(7, "day").toDate(), y: 36 },\n            { x: moment(startOfToday).subtract(6, "day").toDate(), y: 34 },\n            { x: moment(startOfToday).subtract(5, "day").toDate(), y: 33 },\n            { x: moment(startOfToday).subtract(4, "day").toDate(), y: 30 },\n            { x: moment(startOfToday).subtract(3, "day").toDate(), y: 32 },\n            { x: moment(startOfToday).subtract(2, "day").toDate(), y: 31 },\n            { x: moment(startOfToday).subtract(1, "day").toDate(), y: 34 },\n            { x: moment(startOfToday).toDate(), y: 25 },\n        ],\n    },\n    {\n        id: "series-2",\n        name: "Brno",\n        description: "\'link\' and \'secondaryLink\'",\n        link: "https://en.wikipedia.org/wiki/Brno",\n        secondaryLink: "https://en.wikipedia.org/wiki/Europe",\n        data: [\n            { x: moment(startOfToday).subtract(59, "day").toDate(), y: 35 },\n            { x: moment(startOfToday).subtract(58, "day").toDate(), y: 33 },\n            { x: moment(startOfToday).subtract(57, "day").toDate(), y: 40 },\n            { x: moment(startOfToday).subtract(56, "day").toDate(), y: 35 },\n            { x: moment(startOfToday).subtract(55, "day").toDate(), y: 30 },\n            { x: moment(startOfToday).subtract(54, "day").toDate(), y: 35 },\n            { x: moment(startOfToday).subtract(53, "day").toDate(), y: 15 },\n            { x: moment(startOfToday).subtract(52, "day").toDate(), y: 30 },\n            { x: moment(startOfToday).subtract(51, "day").toDate(), y: 35 },\n            { x: moment(startOfToday).subtract(50, "day").toDate(), y: 34 },\n            { x: moment(startOfToday).subtract(49, "day").toDate(), y: 35 },\n            { x: moment(startOfToday).subtract(48, "day").toDate(), y: 33 },\n            { x: moment(startOfToday).subtract(47, "day").toDate(), y: 40 },\n            { x: moment(startOfToday).subtract(46, "day").toDate(), y: 35 },\n            { x: moment(startOfToday).subtract(45, "day").toDate(), y: 30 },\n            { x: moment(startOfToday).subtract(44, "day").toDate(), y: 35 },\n            { x: moment(startOfToday).subtract(43, "day").toDate(), y: 15 },\n            { x: moment(startOfToday).subtract(42, "day").toDate(), y: 30 },\n            { x: moment(startOfToday).subtract(41, "day").toDate(), y: 35 },\n            { x: moment(startOfToday).subtract(40, "day").toDate(), y: 34 },\n            { x: moment(startOfToday).subtract(39, "day").toDate(), y: 35 },\n            { x: moment(startOfToday).subtract(38, "day").toDate(), y: 33 },\n            { x: moment(startOfToday).subtract(37, "day").toDate(), y: 40 },\n            { x: moment(startOfToday).subtract(36, "day").toDate(), y: 35 },\n            { x: moment(startOfToday).subtract(35, "day").toDate(), y: 30 },\n            { x: moment(startOfToday).subtract(34, "day").toDate(), y: 35 },\n            { x: moment(startOfToday).subtract(33, "day").toDate(), y: 15 },\n            { x: moment(startOfToday).subtract(32, "day").toDate(), y: 30 },\n            { x: moment(startOfToday).subtract(31, "day").toDate(), y: 35 },\n            { x: moment(startOfToday).subtract(30, "day").toDate(), y: 34 },\n            { x: moment(startOfToday).subtract(29, "day").toDate(), y: 35 },\n            { x: moment(startOfToday).subtract(28, "day").toDate(), y: 33 },\n            { x: moment(startOfToday).subtract(27, "day").toDate(), y: 40 },\n            { x: moment(startOfToday).subtract(26, "day").toDate(), y: 35 },\n            { x: moment(startOfToday).subtract(25, "day").toDate(), y: 30 },\n            { x: moment(startOfToday).subtract(24, "day").toDate(), y: 35 },\n            { x: moment(startOfToday).subtract(23, "day").toDate(), y: 15 },\n            { x: moment(startOfToday).subtract(22, "day").toDate(), y: 30 },\n            { x: moment(startOfToday).subtract(21, "day").toDate(), y: 35 },\n            { x: moment(startOfToday).subtract(20, "day").toDate(), y: 34 },\n            { x: moment(startOfToday).subtract(19, "day").toDate(), y: 64 },\n            { x: moment(startOfToday).subtract(18, "day").toDate(), y: 70 },\n            { x: moment(startOfToday).subtract(17, "day").toDate(), y: 55 },\n            { x: moment(startOfToday).subtract(16, "day").toDate(), y: 55 },\n            { x: moment(startOfToday).subtract(15, "day").toDate(), y: 45 },\n            { x: moment(startOfToday).subtract(14, "day").toDate(), y: 10 },\n            { x: moment(startOfToday).subtract(13, "day").toDate(), y: 65 },\n            { x: moment(startOfToday).subtract(12, "day").toDate(), y: 35 },\n            { x: moment(startOfToday).subtract(11, "day").toDate(), y: 60 },\n            { x: moment(startOfToday).subtract(10, "day").toDate(), y: 61 },\n            { x: moment(startOfToday).subtract(9, "day").toDate(), y: 65 },\n            { x: moment(startOfToday).subtract(8, "day").toDate(), y: 63 },\n            { x: moment(startOfToday).subtract(7, "day").toDate(), y: 58 },\n            { x: moment(startOfToday).subtract(6, "day").toDate(), y: 64 },\n            { x: moment(startOfToday).subtract(5, "day").toDate(), y: 63 },\n            { x: moment(startOfToday).subtract(4, "day").toDate(), y: 60 },\n            { x: moment(startOfToday).subtract(3, "day").toDate(), y: 62 },\n            { x: moment(startOfToday).subtract(2, "day").toDate(), y: 61 },\n            { x: moment(startOfToday).subtract(1, "day").toDate(), y: 62 },\n            { x: moment(startOfToday).toDate(), y: 55 },\n        ],\n    },\n    {\n        id: "series-3",\n        name: "Lisbon",\n        description: "\'secondaryLink\' only",\n        secondaryLink: "https://en.wikipedia.org/wiki/Lisbon",\n        data: [\n            { x: moment(startOfToday).subtract(59, "day").toDate(), y: 35 },\n            { x: moment(startOfToday).subtract(58, "day").toDate(), y: 33 },\n            { x: moment(startOfToday).subtract(57, "day").toDate(), y: 40 },\n            { x: moment(startOfToday).subtract(56, "day").toDate(), y: 35 },\n            { x: moment(startOfToday).subtract(55, "day").toDate(), y: 30 },\n            { x: moment(startOfToday).subtract(54, "day").toDate(), y: 35 },\n            { x: moment(startOfToday).subtract(53, "day").toDate(), y: 15 },\n            { x: moment(startOfToday).subtract(52, "day").toDate(), y: 30 },\n            { x: moment(startOfToday).subtract(51, "day").toDate(), y: 35 },\n            { x: moment(startOfToday).subtract(50, "day").toDate(), y: 34 },\n            { x: moment(startOfToday).subtract(49, "day").toDate(), y: 35 },\n            { x: moment(startOfToday).subtract(48, "day").toDate(), y: 33 },\n            { x: moment(startOfToday).subtract(47, "day").toDate(), y: 40 },\n            { x: moment(startOfToday).subtract(46, "day").toDate(), y: 35 },\n            { x: moment(startOfToday).subtract(45, "day").toDate(), y: 30 },\n            { x: moment(startOfToday).subtract(44, "day").toDate(), y: 35 },\n            { x: moment(startOfToday).subtract(43, "day").toDate(), y: 15 },\n            { x: moment(startOfToday).subtract(42, "day").toDate(), y: 30 },\n            { x: moment(startOfToday).subtract(41, "day").toDate(), y: 35 },\n            { x: moment(startOfToday).subtract(40, "day").toDate(), y: 34 },\n            { x: moment(startOfToday).subtract(39, "day").toDate(), y: 35 },\n            { x: moment(startOfToday).subtract(38, "day").toDate(), y: 33 },\n            { x: moment(startOfToday).subtract(37, "day").toDate(), y: 40 },\n            { x: moment(startOfToday).subtract(36, "day").toDate(), y: 35 },\n            { x: moment(startOfToday).subtract(35, "day").toDate(), y: 30 },\n            { x: moment(startOfToday).subtract(34, "day").toDate(), y: 35 },\n            { x: moment(startOfToday).subtract(33, "day").toDate(), y: 15 },\n            { x: moment(startOfToday).subtract(32, "day").toDate(), y: 30 },\n            { x: moment(startOfToday).subtract(31, "day").toDate(), y: 35 },\n            { x: moment(startOfToday).subtract(30, "day").toDate(), y: 34 },\n            { x: moment(startOfToday).subtract(29, "day").toDate(), y: 35 },\n            { x: moment(startOfToday).subtract(28, "day").toDate(), y: 33 },\n            { x: moment(startOfToday).subtract(27, "day").toDate(), y: 40 },\n            { x: moment(startOfToday).subtract(26, "day").toDate(), y: 35 },\n            { x: moment(startOfToday).subtract(25, "day").toDate(), y: 30 },\n            { x: moment(startOfToday).subtract(24, "day").toDate(), y: 35 },\n            { x: moment(startOfToday).subtract(23, "day").toDate(), y: 15 },\n            { x: moment(startOfToday).subtract(22, "day").toDate(), y: 30 },\n            { x: moment(startOfToday).subtract(21, "day").toDate(), y: 35 },\n            { x: moment(startOfToday).subtract(20, "day").toDate(), y: 34 },\n            { x: moment(startOfToday).subtract(19, "day").toDate(), y: 80 },\n            { x: moment(startOfToday).subtract(18, "day").toDate(), y: 70 },\n            { x: moment(startOfToday).subtract(17, "day").toDate(), y: 95 },\n            { x: moment(startOfToday).subtract(16, "day").toDate(), y: 90 },\n            { x: moment(startOfToday).subtract(15, "day").toDate(), y: 85 },\n            { x: moment(startOfToday).subtract(14, "day").toDate(), y: 70 },\n            { x: moment(startOfToday).subtract(13, "day").toDate(), y: 75 },\n            { x: moment(startOfToday).subtract(12, "day").toDate(), y: 69 },\n            { x: moment(startOfToday).subtract(11, "day").toDate(), y: 75 },\n            { x: moment(startOfToday).subtract(10, "day").toDate(), y: 81 },\n            { x: moment(startOfToday).subtract(9, "day").toDate(), y: 93 },\n            { x: moment(startOfToday).subtract(8, "day").toDate(), y: 83 },\n            { x: moment(startOfToday).subtract(7, "day").toDate(), y: 70 },\n            { x: moment(startOfToday).subtract(6, "day").toDate(), y: 74 },\n            { x: moment(startOfToday).subtract(5, "day").toDate(), y: 73 },\n            { x: moment(startOfToday).subtract(4, "day").toDate(), y: 68 },\n            { x: moment(startOfToday).subtract(3, "day").toDate(), y: 72 },\n            { x: moment(startOfToday).subtract(2, "day").toDate(), y: 61 },\n            { x: moment(startOfToday).subtract(1, "day").toDate(), y: 69 },\n            { x: moment(startOfToday).toDate(), y: 60 },\n        ],\n    },\n    {\n        id: "series-4",\n        name: "Austin",\n        description: "No links",\n        data: [\n            { x: moment(startOfToday).subtract(59, "day").toDate(), y: 25 },\n            { x: moment(startOfToday).subtract(58, "day").toDate(), y: 43 },\n            { x: moment(startOfToday).subtract(57, "day").toDate(), y: 40 },\n            { x: moment(startOfToday).subtract(56, "day").toDate(), y: 65 },\n            { x: moment(startOfToday).subtract(55, "day").toDate(), y: 30 },\n            { x: moment(startOfToday).subtract(54, "day").toDate(), y: 25 },\n            { x: moment(startOfToday).subtract(53, "day").toDate(), y: 45 },\n            { x: moment(startOfToday).subtract(52, "day").toDate(), y: 30 },\n            { x: moment(startOfToday).subtract(51, "day").toDate(), y: 85 },\n            { x: moment(startOfToday).subtract(50, "day").toDate(), y: 74 },\n            { x: moment(startOfToday).subtract(49, "day").toDate(), y: 55 },\n            { x: moment(startOfToday).subtract(48, "day").toDate(), y: 23 },\n            { x: moment(startOfToday).subtract(47, "day").toDate(), y: 40 },\n            { x: moment(startOfToday).subtract(46, "day").toDate(), y: 15 },\n            { x: moment(startOfToday).subtract(45, "day").toDate(), y: 20 },\n            { x: moment(startOfToday).subtract(44, "day").toDate(), y: 65 },\n            { x: moment(startOfToday).subtract(43, "day").toDate(), y: 25 },\n            { x: moment(startOfToday).subtract(42, "day").toDate(), y: 40 },\n            { x: moment(startOfToday).subtract(41, "day").toDate(), y: 25 },\n            { x: moment(startOfToday).subtract(40, "day").toDate(), y: 54 },\n            { x: moment(startOfToday).subtract(39, "day").toDate(), y: 65 },\n            { x: moment(startOfToday).subtract(38, "day").toDate(), y: 33 },\n            { x: moment(startOfToday).subtract(37, "day").toDate(), y: 50 },\n            { x: moment(startOfToday).subtract(36, "day").toDate(), y: 45 },\n            { x: moment(startOfToday).subtract(35, "day").toDate(), y: 20 },\n            { x: moment(startOfToday).subtract(34, "day").toDate(), y: 25 },\n            { x: moment(startOfToday).subtract(33, "day").toDate(), y: 35 },\n            { x: moment(startOfToday).subtract(32, "day").toDate(), y: 20 },\n            { x: moment(startOfToday).subtract(31, "day").toDate(), y: 35 },\n            { x: moment(startOfToday).subtract(30, "day").toDate(), y: 14 },\n            { x: moment(startOfToday).subtract(29, "day").toDate(), y: 55 },\n            { x: moment(startOfToday).subtract(28, "day").toDate(), y: 23 },\n            { x: moment(startOfToday).subtract(27, "day").toDate(), y: 10 },\n            { x: moment(startOfToday).subtract(26, "day").toDate(), y: 5 },\n            { x: moment(startOfToday).subtract(25, "day").toDate(), y: 20 },\n            { x: moment(startOfToday).subtract(24, "day").toDate(), y: 35 },\n            { x: moment(startOfToday).subtract(23, "day").toDate(), y: 15 },\n            { x: moment(startOfToday).subtract(22, "day").toDate(), y: 30 },\n            { x: moment(startOfToday).subtract(21, "day").toDate(), y: 35 },\n            { x: moment(startOfToday).subtract(20, "day").toDate(), y: 34 },\n            { x: moment(startOfToday).subtract(19, "day").toDate(), y: 50 },\n            { x: moment(startOfToday).subtract(18, "day").toDate(), y: 60 },\n            { x: moment(startOfToday).subtract(17, "day").toDate(), y: 95 },\n            { x: moment(startOfToday).subtract(16, "day").toDate(), y: 80 },\n            { x: moment(startOfToday).subtract(15, "day").toDate(), y: 65 },\n            { x: moment(startOfToday).subtract(14, "day").toDate(), y: 80 },\n            { x: moment(startOfToday).subtract(13, "day").toDate(), y: 85 },\n            { x: moment(startOfToday).subtract(12, "day").toDate(), y: 69 },\n            { x: moment(startOfToday).subtract(11, "day").toDate(), y: 65 },\n            { x: moment(startOfToday).subtract(10, "day").toDate(), y: 71 },\n            { x: moment(startOfToday).subtract(9, "day").toDate(), y: 73 },\n            { x: moment(startOfToday).subtract(8, "day").toDate(), y: 43 },\n            { x: moment(startOfToday).subtract(7, "day").toDate(), y: 70 },\n            { x: moment(startOfToday).subtract(6, "day").toDate(), y: 84 },\n            { x: moment(startOfToday).subtract(5, "day").toDate(), y: 73 },\n            { x: moment(startOfToday).subtract(4, "day").toDate(), y: 38 },\n            { x: moment(startOfToday).subtract(3, "day").toDate(), y: 72 },\n            { x: moment(startOfToday).subtract(2, "day").toDate(), y: 81 },\n            { x: moment(startOfToday).subtract(1, "day").toDate(), y: 59 },\n            { x: moment(startOfToday).toDate(), y: 60 },\n        ],\n    },\n];\n// Setting the widget dimensions and position (this is for gridster)\nconst positions: Record<string, GridsterItem> = {\n    [widgetConfigs[0].id]: {\n        cols: 6,\n        rows: 6,\n        y: 0,\n        x: 0,\n    },\n    [widgetConfigs[1].id]: {\n        cols: 6,\n        rows: 6,\n        y: 0,\n        x: 6,\n    },\n};\n'},37038:(o,e,n)=>{"use strict";n.r(e),n.d(e,{default:()=>t});const t='<div class="mb-2 d-flex align-items-center">\n    <nui-switch class="ml-3 py-2" [(value)]="editMode" i18n>\n        Edit Mode\n    </nui-switch>\n    <button\n        *ngIf="!dashboard?.widgets[\'timeseriesWidgetId\']"\n        type="button"\n        displayStyle="action"\n        (click)="reInitializeDashboard()"\n        nui-button\n    >\n        Restore Widget\n    </button>\n</div>\n\n<div class="w-100 dashboard">\n    \x3c!--\n        Note: The dashboard and gridsterConfig input assignments must use banana-in-a-box notation to keep\n        the dashboard state updated with changes to the pizzagna.\n    --\x3e\n    <nui-dashboard\n        *ngIf="dashboard"\n        [(dashboard)]="dashboard"\n        [editMode]="editMode"\n        [(gridsterConfig)]="gridsterConfig"\n        nuiWidgetEditor\n    >\n    </nui-dashboard>\n</div>\n'},68286:(o,e,n)=>{"use strict";n.r(e),n.d(e,{default:()=>t});const t=".dashboard {\n    height: 485px;\n}\n"},86058:(o,e,n)=>{"use strict";n.r(e),n.d(e,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport {\n    ChangeDetectorRef,\n    Component,\n    Injectable,\n    OnInit,\n} from "@angular/core";\nimport { GridsterConfig, GridsterItem } from "angular-gridster2";\nimport keyBy from "lodash/keyBy";\nimport moment, { Moment } from "moment/moment";\nimport { BehaviorSubject } from "rxjs";\n\nimport {\n    DataSourceService,\n    IDataSource,\n    IDataSourceOutput,\n    INovaFilters,\n    ITimeframe,\n} from "@nova-ui/bits";\nimport { CHART_PALETTE_CS_S_EXTENDED } from "@nova-ui/charts";\nimport {\n    applyStatusEndpoints,\n    DATA_SOURCE,\n    DEFAULT_PIZZAGNA_ROOT,\n    IDashboard,\n    IProviderConfiguration,\n    ISerializableTimeframe,\n    ITimeseriesItemConfiguration,\n    ITimeseriesOutput,\n    ITimeseriesScaleConfig,\n    ITimeseriesWidgetConfig,\n    ITimeseriesWidgetData,\n    ITimeseriesWidgetSeriesData,\n    ITimeseriesWidgetStatusData,\n    IWidget,\n    LegendPlacement,\n    PizzagnaLayer,\n    ProviderRegistryService,\n    TimeseriesChartPreset,\n    TimeseriesScaleType,\n    WellKnownPathKey,\n    WellKnownProviders,\n    WidgetTypesService,\n} from "@nova-ui/dashboards";\n\n/**\n * A simple Timeseries data source implementation with continuous (non-interval-based) output\n */\n@Injectable()\nexport class TimeseriesStatusContinuousDataSource\n    extends DataSourceService<ITimeseriesWidgetData>\n    implements IDataSource<ITimeseriesOutput<ITimeseriesWidgetStatusData>>\n{\n    public static providerId = "TimeseriesStatusContinuousDataSource";\n\n    public busy = new BehaviorSubject(false);\n\n    public async getFilteredData(\n        filters: INovaFilters\n    ): Promise<\n        IDataSourceOutput<ITimeseriesOutput<ITimeseriesWidgetStatusData>>\n    > {\n        // In this example we\'re using some static mock data located at the bottom of this file. In a real-world\n        // scenario, the data for the chart would likely be retrieved via an asynchronous backend call.\n        const data = getContinuousData();\n        let filteredData = data;\n\n        this.busy.next(true);\n\n        // Filtering using the filter registered by the TimeFrameBar\n        const timeframeFilter = filters.timeframe?.value as ITimeframe;\n        if (timeframeFilter) {\n            filteredData = filteredData.map((item: ITimeseriesWidgetData) => ({\n                id: item.id,\n                name: item.name,\n                description: item.description,\n                data: item.data.filter(\n                    (seriesData: ITimeseriesWidgetSeriesData) =>\n                        filterDates(\n                            seriesData.x,\n                            timeframeFilter.startDatetime,\n                            timeframeFilter.endDatetime\n                        )\n                ),\n            }));\n\n            // apply endpoints on the filtered status data so that when the status chart is zoomed (filtered),\n            // each status visualizations is ensured to have valid start and end values\n            filteredData = applyStatusEndpoints(\n                timeframeFilter,\n                filteredData,\n                data\n            );\n        }\n\n        this.busy.next(false);\n        return { result: { series: filteredData } };\n    }\n}\n\n/**\n * A simple Timeseries data source implementation with interval-based output\n */\n@Injectable()\nexport class TimeseriesStatusIntervalDataSource\n    extends DataSourceService<ITimeseriesWidgetData>\n    implements IDataSource<ITimeseriesOutput<ITimeseriesWidgetStatusData>>\n{\n    public static providerId = "TimeseriesStatusIntervalDataSource";\n\n    public busy = new BehaviorSubject(false);\n\n    public async getFilteredData(\n        filters: INovaFilters\n    ): Promise<\n        IDataSourceOutput<ITimeseriesOutput<ITimeseriesWidgetStatusData>>\n    > {\n        // In this example we\'re using some static mock data located at the bottom of this file. In a real-world\n        // scenario, the data for the chart would likely be retrieved via an asynchronous backend call.\n        const data = getIntervalData();\n        let filteredData = data;\n\n        this.busy.next(true);\n\n        // Filtering using the filter registered by the TimeFrameBar\n        const timeframeFilter = filters.timeframe?.value as ITimeframe;\n        if (timeframeFilter) {\n            filteredData = filteredData.map((item: ITimeseriesWidgetData) => ({\n                id: item.id,\n                name: item.name,\n                description: item.description,\n                data: item.data.filter(\n                    (seriesData: ITimeseriesWidgetSeriesData) =>\n                        filterDates(\n                            seriesData.x,\n                            timeframeFilter.startDatetime,\n                            timeframeFilter.endDatetime\n                        )\n                ),\n            }));\n\n            // Note: There\'s no need to apply filter endpoints to the status data in this case since we know it\'s visualized in regular intervals\n        }\n\n        this.busy.next(false);\n        return { result: { series: filteredData } };\n    }\n}\n\nfunction filterDates(dateToCheck: Date, startDate: Moment, endDate: Moment) {\n    const mom = moment(dateToCheck);\n    return (\n        mom.isBetween(startDate, endDate) ||\n        mom.isSame(startDate) ||\n        mom.isSame(endDate)\n    );\n}\n\n/**\n * A component that instantiates the dashboard\n */\n@Component({\n    selector: "timeseries-widget-status-bar-example",\n    templateUrl: "./timeseries-widget-status-bar-example.component.html",\n    styleUrls: ["./timeseries-widget-status-bar-example.component.less"],\n})\nexport class TimeseriesWidgetStatusBarExampleComponent implements OnInit {\n    // This variable will hold all the data needed to define the layout and behavior of the widgets.\n    // Pass this to the dashboard component\'s dashboard input in the template.\n    public dashboard: IDashboard | undefined;\n\n    // Angular gridster requires a configuration object even if it\'s empty.\n    // Pass this to the dashboard component\'s gridsterConfig input in the template.\n    public gridsterConfig: GridsterConfig = {};\n\n    // Boolean passed as an input to the dashboard. When true, widgets can be moved, resized, removed, or edited\n    public editMode: boolean = false;\n\n    constructor(\n        // WidgetTypesService provides the widget\'s necessary structure information\n        private widgetTypesService: WidgetTypesService,\n\n        // In general, the ProviderRegistryService is used for making entities available for injection into dynamically loaded components.\n        private providerRegistry: ProviderRegistryService,\n        private changeDetectorRef: ChangeDetectorRef\n    ) {}\n\n    public ngOnInit(): void {\n        // Grabbing the widget\'s default template which will be needed as a parameter for setNode\n        const widgetTemplate = this.widgetTypesService.getWidgetType(\n            "timeseries",\n            1\n        );\n        // Registering our data sources as dropdown options in the widget editor/configurator\n        // Note: This could also be done in the parent module\'s constructor so that\n        // multiple dashboards could have access to the same widget template modification.\n        this.widgetTypesService.setNode(\n            // This is the template we grabbed above with getWidgetType\n            widgetTemplate,\n            // We are setting the editor/configurator part of the widget template\n            "configurator",\n            // This indicates which node you are changing and we want to change\n            // the data source providers available for selection in the editor.\n            WellKnownPathKey.DataSourceProviders,\n            // We are setting the data sources available for selection in the editor\n            [\n                TimeseriesStatusContinuousDataSource.providerId,\n                TimeseriesStatusIntervalDataSource.providerId,\n            ]\n        );\n\n        // Registering the data source for injection into the widget.\n        this.providerRegistry.setProviders({\n            [TimeseriesStatusContinuousDataSource.providerId]: {\n                provide: DATA_SOURCE,\n                useClass: TimeseriesStatusContinuousDataSource,\n                deps: [],\n            },\n            [TimeseriesStatusIntervalDataSource.providerId]: {\n                provide: DATA_SOURCE,\n                useClass: TimeseriesStatusIntervalDataSource,\n                deps: [],\n            },\n        });\n\n        this.initializeDashboard();\n    }\n\n    /** Used for restoring widgets state */\n    public reInitializeDashboard(): void {\n        // destroys the components and their providers so the dashboard can re init data\n        this.dashboard = undefined;\n        this.changeDetectorRef.detectChanges();\n\n        this.initializeDashboard();\n    }\n\n    public initializeDashboard(): void {\n        // We\'re using a static configuration object for this example, but this is where\n        // the widget\'s configuration could potentially be populated from a database\n        const widgetsWithStructure = widgetConfigs.map((w) =>\n            this.widgetTypesService.mergeWithWidgetType(w)\n        );\n        const widgetsIndex = keyBy(widgetsWithStructure, (w: IWidget) => w.id);\n\n        // Finally, assigning the variables we created above to the dashboard\n        this.dashboard = {\n            positions,\n            widgets: widgetsIndex,\n        };\n    }\n}\n\nconst widgetConfigs: IWidget[] = [\n    {\n        id: "statusChartWidgetId",\n        type: "timeseries",\n        pizzagna: {\n            [PizzagnaLayer.Configuration]: {\n                [DEFAULT_PIZZAGNA_ROOT]: {\n                    providers: {\n                        [WellKnownProviders.DataSource]: {\n                            // Setting the initially selected data source providerId\n                            providerId:\n                                TimeseriesStatusContinuousDataSource.providerId,\n                        } as IProviderConfiguration,\n                    },\n                },\n                header: {\n                    properties: {\n                        title: "Status Bar Chart with Continuous (Non-Interval) Scale",\n                        subtitle: "Basic Timeseries Widget",\n                    },\n                },\n                chart: {\n                    providers: {\n                        [WellKnownProviders.Adapter]: {\n                            properties: {\n                                // Setting the series and corresponding labels to initially display on the chart\n                                series: [\n                                    {\n                                        id: "series-1",\n                                        label: "Node Status",\n                                        selectedSeriesId: "series-1",\n                                    },\n                                    {\n                                        id: "series-2",\n                                        label: "Node Status",\n                                        selectedSeriesId: "series-2",\n                                    },\n                                ] as ITimeseriesItemConfiguration[],\n                            },\n                        } as Partial<IProviderConfiguration>,\n                    },\n                    properties: {\n                        configuration: {\n                            legendPlacement: LegendPlacement.Right,\n                            enableZoom: true,\n                            // Setting the preset to status bar\n                            preset: TimeseriesChartPreset.StatusBar,\n                        } as ITimeseriesWidgetConfig,\n                    },\n                },\n                timeframeSelection: {\n                    properties: {\n                        // Setting the initial timeframe selected in the timeframe bar\n                        timeframe: {\n                            selectedPresetId: "last7Days",\n                        } as ISerializableTimeframe,\n                        maxDate: moment().format(),\n                    },\n                },\n            },\n        },\n    },\n    {\n        id: "statusIntervalChartWidgetId",\n        type: "timeseries",\n        pizzagna: {\n            [PizzagnaLayer.Configuration]: {\n                [DEFAULT_PIZZAGNA_ROOT]: {\n                    providers: {\n                        [WellKnownProviders.DataSource]: {\n                            // Setting the initially selected data source providerId\n                            providerId:\n                                TimeseriesStatusIntervalDataSource.providerId,\n                        } as IProviderConfiguration,\n                    },\n                },\n                header: {\n                    properties: {\n                        title: "Status Bar Chart with Interval Scale",\n                        subtitle: "Basic Timeseries Widget",\n                    },\n                },\n                chart: {\n                    providers: {\n                        [WellKnownProviders.Adapter]: {\n                            properties: {\n                                // Setting the series and corresponding labels to initially display on the chart\n                                series: [\n                                    {\n                                        id: "series-1",\n                                        label: "Node Status",\n                                        selectedSeriesId: "series-1",\n                                    },\n                                    {\n                                        id: "series-2",\n                                        label: "Node Status",\n                                        selectedSeriesId: "series-2",\n                                    },\n                                ] as ITimeseriesItemConfiguration[],\n                            },\n                        } as Partial<IProviderConfiguration>,\n                    },\n                    properties: {\n                        configuration: {\n                            legendPlacement: LegendPlacement.Right,\n                            enableZoom: true,\n                            // Setting the preset to status bar\n                            preset: TimeseriesChartPreset.StatusBar,\n                            scales: {\n                                x: {\n                                    type: TimeseriesScaleType.TimeInterval,\n                                    properties: {\n                                        // one-day interval in seconds\n                                        interval: 24 * 60 * 60,\n                                    },\n                                } as ITimeseriesScaleConfig,\n                            },\n                        } as ITimeseriesWidgetConfig,\n                    },\n                },\n                timeframeSelection: {\n                    properties: {\n                        // Setting the initial timeframe selected in the timeframe bar\n                        timeframe: {\n                            selectedPresetId: "last7Days",\n                        } as ISerializableTimeframe,\n                        maxDate: moment().format(),\n                    },\n                },\n            },\n        },\n    },\n];\n\nexport const startOfToday = (): Moment => moment().startOf("day");\n\nexport const getContinuousData =\n    (): ITimeseriesWidgetData<ITimeseriesWidgetStatusData>[] => {\n        const series: ITimeseriesWidgetData<any>[] = [\n            {\n                id: "series-1",\n                name: "Node Status",\n                description: "lastchance.demo.lab",\n                data: [\n                    // the \'x\' value is set to the time and \'y\' to the status at that given time\n                    {\n                        x: startOfToday().subtract(20, "day").toDate(),\n                        y: Status.Warning,\n                    },\n                    {\n                        x: startOfToday().subtract(19, "day").toDate(),\n                        y: Status.Down,\n                    },\n                    {\n                        x: startOfToday().subtract(17, "day").toDate(),\n                        y: Status.Critical,\n                    },\n                    {\n                        x: startOfToday().subtract(16, "day").toDate(),\n                        y: Status.Warning,\n                    },\n                    {\n                        x: startOfToday().subtract(15, "day").toDate(),\n                        y: Status.Down,\n                    },\n                    {\n                        x: startOfToday().subtract(14, "day").toDate(),\n                        y: Status.Critical,\n                    },\n                    {\n                        x: startOfToday().subtract(12, "day").toDate(),\n                        y: Status.Unknown,\n                    },\n                    {\n                        x: startOfToday().subtract(10, "day").toDate(),\n                        y: Status.Up,\n                    },\n                    {\n                        x: startOfToday().subtract(9, "day").toDate(),\n                        y: Status.Critical,\n                    },\n                    {\n                        x: startOfToday().subtract(6, "day").toDate(),\n                        y: Status.Up,\n                    },\n                    {\n                        x: startOfToday().subtract(3, "day").toDate(),\n                        y: Status.Warning,\n                    },\n                    {\n                        x: startOfToday().subtract(2, "day").toDate(),\n                        y: Status.Critical,\n                    },\n                    {\n                        x: startOfToday().subtract(1, "day").toDate(),\n                        y: Status.Up,\n                    },\n                    // This data point will be ignored and is only here to provide an endpoint for the previous status.\n                    { x: moment().toDate(), y: Status.Up },\n                ],\n            },\n            {\n                id: "series-2",\n                name: "Node Status",\n                description: "newhope.demo.lab",\n                data: [\n                    {\n                        x: startOfToday().subtract(19, "day").toDate(),\n                        y: Status.Critical,\n                    },\n                    {\n                        x: startOfToday().subtract(18, "day").toDate(),\n                        y: Status.Unknown,\n                    },\n                    {\n                        x: startOfToday().subtract(17, "day").toDate(),\n                        y: Status.Warning,\n                    },\n                    {\n                        x: startOfToday().subtract(15, "day").toDate(),\n                        y: Status.Down,\n                    },\n                    {\n                        x: startOfToday().subtract(8, "day").toDate(),\n                        y: Status.Critical,\n                    },\n                    {\n                        x: startOfToday().subtract(7, "day").toDate(),\n                        y: Status.Down,\n                    },\n                    {\n                        x: startOfToday().subtract(6, "day").toDate(),\n                        y: Status.Up,\n                    },\n                    {\n                        x: startOfToday().subtract(5, "day").toDate(),\n                        y: Status.Critical,\n                    },\n                    {\n                        x: startOfToday().subtract(4, "day").toDate(),\n                        y: Status.Up,\n                    },\n                    {\n                        x: startOfToday().subtract(3, "day").toDate(),\n                        y: Status.Warning,\n                    },\n                    {\n                        x: startOfToday().subtract(2, "day").toDate(),\n                        y: Status.Up,\n                    },\n                    {\n                        x: startOfToday().subtract(1, "day").toDate(),\n                        y: Status.Down,\n                    },\n                    // This data point will be ignored and is only here to provide an endpoint for the previous status.\n                    { x: moment().toDate(), y: Status.Down },\n                ],\n            },\n        ];\n\n        for (const s of series) {\n            // here are we setting the color and icon associated to the status for each data point\n            s.data = s.data.map((d: any, i: number) => ({\n                ...d,\n                color: statusColors[d.y as Status],\n                // The thickness of the line is dependant on the status. If the status equals \'Up\' then \'thick\' is set to false.\n                thick: d.y !== Status.Up,\n                icon: "status_" + d.y,\n            }));\n        }\n\n        return series;\n    };\n\n// Note that the output of this function is spaced evenly at one-day intervals\nexport const getIntervalData =\n    (): ITimeseriesWidgetData<ITimeseriesWidgetStatusData>[] => {\n        const series: ITimeseriesWidgetData<any>[] = [\n            {\n                id: "series-1",\n                name: "Node Status",\n                description: "lastchance.demo.lab",\n                data: [\n                    // the \'x\' value is set to the time and \'y\' to the status at that given time\n                    {\n                        x: startOfToday().subtract(20, "day").toDate(),\n                        y: Status.Up,\n                    },\n                    {\n                        x: startOfToday().subtract(19, "day").toDate(),\n                        y: Status.Critical,\n                    },\n                    {\n                        x: startOfToday().subtract(18, "day").toDate(),\n                        y: Status.Warning,\n                    },\n                    {\n                        x: startOfToday().subtract(17, "day").toDate(),\n                        y: Status.Down,\n                    },\n                    {\n                        x: startOfToday().subtract(16, "day").toDate(),\n                        y: Status.Critical,\n                    },\n                    {\n                        x: startOfToday().subtract(15, "day").toDate(),\n                        y: Status.Down,\n                    },\n                    {\n                        x: startOfToday().subtract(14, "day").toDate(),\n                        y: Status.Up,\n                    },\n                    {\n                        x: startOfToday().subtract(13, "day").toDate(),\n                        y: Status.Warning,\n                    },\n                    {\n                        x: startOfToday().subtract(12, "day").toDate(),\n                        y: Status.Up,\n                    },\n                    {\n                        x: startOfToday().subtract(11, "day").toDate(),\n                        y: Status.Critical,\n                    },\n                    {\n                        x: startOfToday().subtract(10, "day").toDate(),\n                        y: Status.Up,\n                    },\n                    {\n                        x: startOfToday().subtract(9, "day").toDate(),\n                        y: Status.Down,\n                    },\n                    {\n                        x: startOfToday().subtract(8, "day").toDate(),\n                        y: Status.Critical,\n                    },\n                    {\n                        x: startOfToday().subtract(7, "day").toDate(),\n                        y: Status.Warning,\n                    },\n                    {\n                        x: startOfToday().subtract(6, "day").toDate(),\n                        y: Status.Down,\n                    },\n                    {\n                        x: startOfToday().subtract(5, "day").toDate(),\n                        y: Status.Critical,\n                    },\n                    {\n                        x: startOfToday().subtract(4, "day").toDate(),\n                        y: Status.Down,\n                    },\n                    {\n                        x: startOfToday().subtract(3, "day").toDate(),\n                        y: Status.Up,\n                    },\n                    {\n                        x: startOfToday().subtract(2, "day").toDate(),\n                        y: Status.Warning,\n                    },\n                    {\n                        x: startOfToday().subtract(1, "day").toDate(),\n                        y: Status.Critical,\n                    },\n                    { x: startOfToday().toDate(), y: Status.Up },\n                ],\n            },\n            {\n                id: "series-2",\n                name: "Node Status",\n                description: "newhope.demo.lab",\n                data: [\n                    {\n                        x: startOfToday().subtract(20, "day").toDate(),\n                        y: Status.Up,\n                    },\n                    {\n                        x: startOfToday().subtract(19, "day").toDate(),\n                        y: Status.Up,\n                    },\n                    {\n                        x: startOfToday().subtract(18, "day").toDate(),\n                        y: Status.Down,\n                    },\n                    {\n                        x: startOfToday().subtract(17, "day").toDate(),\n                        y: Status.Critical,\n                    },\n                    {\n                        x: startOfToday().subtract(16, "day").toDate(),\n                        y: Status.Down,\n                    },\n                    {\n                        x: startOfToday().subtract(15, "day").toDate(),\n                        y: Status.Up,\n                    },\n                    {\n                        x: startOfToday().subtract(14, "day").toDate(),\n                        y: Status.Critical,\n                    },\n                    {\n                        x: startOfToday().subtract(13, "day").toDate(),\n                        y: Status.Up,\n                    },\n                    {\n                        x: startOfToday().subtract(12, "day").toDate(),\n                        y: Status.Critical,\n                    },\n                    {\n                        x: startOfToday().subtract(11, "day").toDate(),\n                        y: Status.Warning,\n                    },\n                    {\n                        x: startOfToday().subtract(10, "day").toDate(),\n                        y: Status.Up,\n                    },\n                    {\n                        x: startOfToday().subtract(9, "day").toDate(),\n                        y: Status.Down,\n                    },\n                    {\n                        x: startOfToday().subtract(8, "day").toDate(),\n                        y: Status.Up,\n                    },\n                    {\n                        x: startOfToday().subtract(7, "day").toDate(),\n                        y: Status.Down,\n                    },\n                    {\n                        x: startOfToday().subtract(6, "day").toDate(),\n                        y: Status.Critical,\n                    },\n                    {\n                        x: startOfToday().subtract(5, "day").toDate(),\n                        y: Status.Down,\n                    },\n                    {\n                        x: startOfToday().subtract(4, "day").toDate(),\n                        y: Status.Up,\n                    },\n                    {\n                        x: startOfToday().subtract(3, "day").toDate(),\n                        y: Status.Critical,\n                    },\n                    {\n                        x: startOfToday().subtract(2, "day").toDate(),\n                        y: Status.Up,\n                    },\n                    {\n                        x: startOfToday().subtract(1, "day").toDate(),\n                        y: Status.Warning,\n                    },\n                    { x: startOfToday().toDate(), y: Status.Critical },\n                ],\n            },\n        ];\n\n        for (const s of series) {\n            // here are we setting the color and icon associated to the status for each data point\n            s.data = s.data.map((d: any, i: number) => ({\n                ...d,\n                color: statusColors[d.y as Status],\n                // The thickness of the line is dependant on the status. If the status equals \'Up\' then \'thick\' is set to false.\n                thick: d.y !== Status.Up,\n                icon: "status_" + d.y,\n            }));\n        }\n\n        return series;\n    };\n\n// An enumeration of statuses\nenum Status {\n    Unknown = "unknown",\n    Up = "up",\n    Warning = "warning",\n    Down = "down",\n    Critical = "critical",\n}\n\n// This is the map used for setting the color of each status bar\nconst statusColors: Record<Status, string> = {\n    [Status.Unknown]: CHART_PALETTE_CS_S_EXTENDED[6],\n    [Status.Up]: CHART_PALETTE_CS_S_EXTENDED[8],\n    [Status.Warning]: CHART_PALETTE_CS_S_EXTENDED[4],\n    [Status.Down]: CHART_PALETTE_CS_S_EXTENDED[0],\n    [Status.Critical]: CHART_PALETTE_CS_S_EXTENDED[2],\n};\n\n// Setting the widget dimensions and position (this is for gridster)\nconst positions: Record<string, GridsterItem> = {\n    [widgetConfigs[0].id]: {\n        cols: 12,\n        rows: 4,\n        y: 0,\n        x: 0,\n    },\n    [widgetConfigs[1].id]: {\n        cols: 12,\n        rows: 4,\n        y: 4,\n        x: 0,\n    },\n};\n'},729:(o,e,n)=>{"use strict";n.r(e),n.d(e,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport { NgModule, Type } from "@angular/core";\nimport { RouterModule, Routes } from "@angular/router";\n\nimport { NuiDocsModule } from "@nova-ui/bits";\nimport {\n    ConfiguratorHeadingService,\n    NuiDashboardsModule,\n} from "@nova-ui/dashboards";\n\nexport enum WidgetTypesRoute {\n    kpi = "kpi",\n    riskScore = "risk-score",\n    timeseries = "timeseries",\n    table = "table",\n    proportional = "proportional",\n    embedded = "embedded",\n    drilldown = "drilldown",\n}\n\nconst routes: Routes = [\n    {\n        path: WidgetTypesRoute.kpi,\n        loadChildren: async () =>\n            import("./kpi/kpi-docs.module") as object as Promise<Type<any>>,\n        data: {\n            srlc: {\n                hideIndicator: true,\n            },\n        },\n    },\n    {\n        path: WidgetTypesRoute.riskScore,\n        loadChildren: async () =>\n            import("./risk-score/risk-score-docs.module") as object as Promise<\n                Type<any>\n            >,\n        data: {\n            srlc: {\n                hideIndicator: true,\n            },\n        },\n    },\n    {\n        path: WidgetTypesRoute.timeseries,\n        loadChildren: async () =>\n            import("./timeseries/timeseries-docs.module") as object as Promise<\n                Type<any>\n            >,\n        data: {\n            srlc: {\n                hideIndicator: true,\n            },\n        },\n    },\n    {\n        path: WidgetTypesRoute.table,\n        loadChildren: async () =>\n            import("./table/table-docs.module") as object as Promise<Type<any>>,\n        data: {\n            srlc: {\n                hideIndicator: true,\n            },\n        },\n    },\n    {\n        path: WidgetTypesRoute.proportional,\n        loadChildren: async () =>\n            import(\n                "./proportional/proportional-docs.module"\n            ) as object as Promise<Type<any>>,\n        data: {\n            srlc: {\n                hideIndicator: true,\n            },\n        },\n    },\n    {\n        path: WidgetTypesRoute.embedded,\n        loadChildren: async () =>\n            import(\n                "./embedded-content/embedded-content-docs.module"\n            ) as object as Promise<Type<any>>,\n        data: {\n            srlc: {\n                hideIndicator: true,\n            },\n        },\n    },\n    {\n        path: WidgetTypesRoute.drilldown,\n        loadChildren: async () =>\n            import(\n                "./drilldown/drilldown-widget-docs.module"\n            ) as object as Promise<Type<any>>,\n        data: {\n            srlc: {\n                hideIndicator: true,\n            },\n        },\n    },\n];\n\n@NgModule({\n    imports: [\n        RouterModule.forChild(routes),\n        NuiDocsModule,\n        NuiDashboardsModule,\n    ],\n    providers: [ConfiguratorHeadingService],\n})\nexport default class WidgetTypesModule {}\n'},8677:(o,e,n)=>{"use strict";n.d(e,{A:()=>t});const t='{\n  "author": "SolarWinds <nova-ui@solarwinds.com>",\n  "contributors": [\n    {\n      "name": "SolarWinds Nova Team"\n    }\n  ],\n  "dependencies": {},\n  "devDependencies": {\n    "@apollo/client": "^3.7.3",\n    "@types/d3": "^5.7.2",\n    "@types/d3-selection-multi": "^1.0.7",\n    "@yarnpkg/lockfile": "^1.1.0",\n    "angular-gridster2": "^16.0.0",\n    "apollo-angular": "^5.0.2",\n    "d3": "^5.9.2",\n    "d3-color": "3.1.0",\n    "d3-selection-multi": "^1.0.1",\n    "d3-time-format": "2.1.3",\n    "graphql": "^16.6.0"\n  },\n  "exports": {\n    "./sdk/atoms": {\n      "default": "./sdk/atoms/index.js",\n      "types": "./sdk/atmos/index.d.ts"\n    },\n    "./sdk/atoms/*": {\n      "default": "./sdk/atoms/*.js",\n      "types": "./sdk/atoms/*.d.ts"\n    },\n    "./sdk/schematics": {\n      "default": "./sdk/schematics/index.js",\n      "types": "./sdk/schematics/index.d.ts"\n    },\n    "./sdk/schematics/*": {\n      "default": "./sdk/schematics/*.js",\n      "types": "./sdk/schematics/*.d.ts"\n    },\n    "./sdk/*": "./sdk/*"\n  },\n  "keywords": [\n    "dashboard",\n    "nova",\n    "nova-ui",\n    "solarwinds"\n  ],\n  "license": "Apache-2.0",\n  "name": "@nova-ui/dashboards",\n  "peerDependencies": {\n    "@nova-ui/bits": "~16.0.2",\n    "@nova-ui/charts": "~16.0.2",\n    "angular-gridster2": "^15.0.0",\n    "d3": "^5.9.2",\n    "d3-selection-multi": "^1.0.1"\n  },\n  "repository": {\n    "type": "git",\n    "url": "https://github.com/solarwinds/nova.git"\n  },\n  "resolutions": {\n    "moment": "^2.29.4"\n  },\n  "schematics": "./sdk/schematics/collection.json",\n  "scripts": {\n    "assemble": "run-s lint build-lib:locl build-lib:prod compodoc build-examples:prod build-schematics",\n    "assemble-dev": "run-s build-lib:prod",\n    "build-examples": "ng b examples",\n    "build-examples:prod": "yarn run build-examples -c production",\n    "build-examples:watch": "yarn run build-examples -c dev",\n    "build-lib": "ng b lib",\n    "build-lib:locl": "run-s \\"build-lib -c locl\\" i18n-locl-extract",\n    "build-lib:prod": "run-s \\"build-lib -c production\\" dist-copy",\n    "build-lib:watch": "run-s dist-copy \\"build-lib -c dev\\"",\n    "build-schematics": "yarn run --cwd=schematics assemble",\n    "compile-demo-paths": "node scripts/compile-demo-paths.js",\n    "compodoc": "compodoc --extTheme src/docs/styles/",\n    "compodoc:serve": "yarn run compodoc -s -w --port 8090 --includes ./src/docs/development",\n    "dist-copy": "run-s dist-copy:*",\n    "dist-copy:atoms": "tsc -p spec/tsconfig.atom.json",\n    "dist-copy:locl": "npx copyfiles -f sdk/locale/* dist/sdk/locale",\n    "e2e": "start-server-and-test serve-examples:prod 4200 e2e:base",\n    "e2e:base": "ng e2e",\n    "e2e:ci": "ng e2e",\n    "e2e:debug": "yarn run pree2e:base && node --inspect-brk ./node_modules/protractor/bin/protractor",\n    "e2e:full": "run-s \\"e2e:base -c full\\"",\n    "e2e:gui": "run-s \\"e2e:base -c gui\\"",\n    "e2e:serve": "run-s \\"e2e:base -c serve\\"",\n    "e2e:watch": "npx watch \\"npm run e2e:base\\" src examples spec --watch=1",\n    "i18n-locl-extract": "ng extract-i18n lib --format=xlf --output-path=./sdk/locale/ --out-file=messages.en.xlf",\n    "lint": "ng lint",\n    "lint:fix": "ng lint --fix",\n    "ng": "ng",\n    "percy": "percy exec -- npm run visual",\n    "percy:ci": "npm run visual:ci && percy upload -v _snapshots",\n    "percy:gui": "percy exec -- npm run visual:gui",\n    "prebuild-examples": "yarn run compile-demo-paths",\n    "pree2e:base": "webdriver-manager update --gecko=false --standalone=false",\n    "prettier": "prettier --config ./.prettierrc.js",\n    "prettier-check": "yarn run prettier --check .",\n    "prettier-fix": "yarn run prettier --write .",\n    "serve-examples": "ng s examples",\n    "serve-examples:prod": "npx local-web-server -p 4200 -d sdk/api-docs-ng2/examples --spa index.html",\n    "start": "run-p -lr compodoc:serve build-examples:watch",\n    "symlink": "run-s symlink:*",\n    "symlink:bits": "yarn rimraf node_modules/@nova-ui/bits && yarn symlink-dir ../bits/dist/ node_modules/@nova-ui/bits",\n    "symlink:charts": "yarn rimraf node_modules/@nova-ui/charts && yarn symlink-dir ../charts/dist/ node_modules/@nova-ui/charts",\n    "symunlink": "run-s symunlink:*",\n    "symunlink:bits": "yarn rimraf node_modules/@nova-ui/bits && yarn --check",\n    "symunlink:charts": "yarn rimraf node_modules/@nova-ui/charts && yarn --check",\n    "test": "ng t lib -c coverage",\n    "test:dev": "ng t lib -c dev",\n    "visual": "npx start-server-and-test serve-examples:prod 4200 visual:base",\n    "visual:base": "yarn run e2e:base --suite visual",\n    "visual:ci": "yarn run e2e:ci --suite visual",\n    "visual:full": "yarn run visual:base -c full",\n    "visual:gui": "yarn run visual:base -c gui",\n    "visual:serve": "yarn run visual:base -c serve"\n  },\n  "version": "16.0.2"\n}'},25934:(o,e,n)=>{var t={"./dashboard-docs.module":2192,"./dashboard-docs.module.ts":2192,"./demo.files":36054,"./demo.files.ts":36054,"./overview/hero/dashboard/hero-dashboard.component":61680,"./overview/hero/dashboard/hero-dashboard.component.html":15152,"./overview/hero/dashboard/hero-dashboard.component.less":44968,"./overview/hero/dashboard/hero-dashboard.component.ts":61680,"./overview/hero/dashboard/widget-configs":35894,"./overview/hero/dashboard/widget-configs.ts":35894,"./overview/hero/data/kpi-datasources":62439,"./overview/hero/data/kpi-datasources.ts":62439,"./overview/hero/data/proportional-datasources":88892,"./overview/hero/data/proportional-datasources.ts":88892,"./overview/hero/data/table/beer-data-source":96472,"./overview/hero/data/table/beer-data-source.ts":96472,"./overview/hero/data/table/constants":73184,"./overview/hero/data/table/constants.ts":73184,"./overview/hero/data/table/random-user-data-source":32427,"./overview/hero/data/table/random-user-data-source.ts":32427,"./overview/hero/data/table/types":93028,"./overview/hero/data/table/types.ts":93028,"./overview/hero/data/timeseries-data-sources":42914,"./overview/hero/data/timeseries-data-sources.ts":42914,"./overview/hero/data/types":68831,"./overview/hero/data/types.ts":68831,"./overview/hero/data/widget-data":60845,"./overview/hero/data/widget-data.ts":60845,"./overview/hero/widget-configs/kpi":45294,"./overview/hero/widget-configs/kpi.ts":45294,"./overview/hero/widget-configs/proportional":73157,"./overview/hero/widget-configs/proportional.ts":73157,"./overview/hero/widget-configs/risk-score":84898,"./overview/hero/widget-configs/risk-score.ts":84898,"./overview/hero/widget-configs/table":87384,"./overview/hero/widget-configs/table.ts":87384,"./overview/hero/widget-configs/timeseries":13262,"./overview/hero/widget-configs/timeseries.ts":13262,"./overview/overview-docs.component":87648,"./overview/overview-docs.component.html":54880,"./overview/overview-docs.component.ts":87648,"./overview/overview.module":48927,"./overview/overview.module.ts":48927,"./tutorials/customization/configurator-section/custom-configurator-section-docs.component":95002,"./tutorials/customization/configurator-section/custom-configurator-section-docs.component.html":43966,"./tutorials/customization/configurator-section/custom-configurator-section-docs.component.ts":95002,"./tutorials/customization/configurator-section/custom-configurator-section.module":11013,"./tutorials/customization/configurator-section/custom-configurator-section.module.ts":11013,"./tutorials/customization/configurator-section/custom-configurator-section/custom-configurator-section.example.component":68020,"./tutorials/customization/configurator-section/custom-configurator-section/custom-configurator-section.example.component.html":64692,"./tutorials/customization/configurator-section/custom-configurator-section/custom-configurator-section.example.component.less":5460,"./tutorials/customization/configurator-section/custom-configurator-section/custom-configurator-section.example.component.ts":68020,"./tutorials/customization/customization.module":18179,"./tutorials/customization/customization.module.ts":18179,"./tutorials/customization/data-source-configurator/custom-data-source-configurator-docs.component":13854,"./tutorials/customization/data-source-configurator/custom-data-source-configurator-docs.component.html":74114,"./tutorials/customization/data-source-configurator/custom-data-source-configurator-docs.component.ts":13854,"./tutorials/customization/data-source-configurator/custom-data-source-configurator.module":37897,"./tutorials/customization/data-source-configurator/custom-data-source-configurator.module.ts":37897,"./tutorials/customization/data-source-configurator/example/custom-data-source-configurator-example.component":24768,"./tutorials/customization/data-source-configurator/example/custom-data-source-configurator-example.component.html":11424,"./tutorials/customization/data-source-configurator/example/custom-data-source-configurator-example.component.less":46648,"./tutorials/customization/data-source-configurator/example/custom-data-source-configurator-example.component.ts":24768,"./tutorials/customization/formatter/custom-formatter.module":1983,"./tutorials/customization/formatter/custom-formatter.module.ts":1983,"./tutorials/customization/formatter/donut-content-formatter-example/custom-donut-content-formatter-docs.component":11968,"./tutorials/customization/formatter/donut-content-formatter-example/custom-donut-content-formatter-docs.component.html":37792,"./tutorials/customization/formatter/donut-content-formatter-example/custom-donut-content-formatter-docs.component.ts":11968,"./tutorials/customization/formatter/donut-content-formatter-example/custom-donut-content-formatter-example.component":34615,"./tutorials/customization/formatter/donut-content-formatter-example/custom-donut-content-formatter-example.component.html":40591,"./tutorials/customization/formatter/donut-content-formatter-example/custom-donut-content-formatter-example.component.less":96059,"./tutorials/customization/formatter/donut-content-formatter-example/custom-donut-content-formatter-example.component.ts":34615,"./tutorials/customization/formatter/formatter-example/custom-formatter-docs.component":15706,"./tutorials/customization/formatter/formatter-example/custom-formatter-docs.component.html":97758,"./tutorials/customization/formatter/formatter-example/custom-formatter-docs.component.ts":15706,"./tutorials/customization/formatter/formatter-example/custom-formatter-example.component":10761,"./tutorials/customization/formatter/formatter-example/custom-formatter-example.component.html":4317,"./tutorials/customization/formatter/formatter-example/custom-formatter-example.component.less":55825,"./tutorials/customization/formatter/formatter-example/custom-formatter-example.component.ts":10761,"./tutorials/customization/widget/custom-widget-docs.component":26646,"./tutorials/customization/widget/custom-widget-docs.component.html":3530,"./tutorials/customization/widget/custom-widget-docs.component.ts":26646,"./tutorials/customization/widget/custom-widget.component":23150,"./tutorials/customization/widget/custom-widget.component.html":67986,"./tutorials/customization/widget/custom-widget.component.less":26410,"./tutorials/customization/widget/custom-widget.component.ts":23150,"./tutorials/customization/widget/custom-widget.module":83745,"./tutorials/customization/widget/custom-widget.module.ts":83745,"./tutorials/data-source-setup/data-source-setup-docs.component":37240,"./tutorials/data-source-setup/data-source-setup-docs.component.html":60776,"./tutorials/data-source-setup/data-source-setup-docs.component.ts":37240,"./tutorials/data-source-setup/data-source-setup.component":18680,"./tutorials/data-source-setup/data-source-setup.component.html":79208,"./tutorials/data-source-setup/data-source-setup.component.less":84096,"./tutorials/data-source-setup/data-source-setup.component.ts":18680,"./tutorials/data-source-setup/data-source-setup.module":68599,"./tutorials/data-source-setup/data-source-setup.module.ts":68599,"./tutorials/dynamic-header-links/dynamic-header-links-docs.component":55524,"./tutorials/dynamic-header-links/dynamic-header-links-docs.component.html":6340,"./tutorials/dynamic-header-links/dynamic-header-links-docs.component.ts":55524,"./tutorials/dynamic-header-links/dynamic-header-links-docs.module":94531,"./tutorials/dynamic-header-links/dynamic-header-links-docs.module.ts":94531,"./tutorials/hello-dashboards/hello-dashboards-docs.component":90134,"./tutorials/hello-dashboards/hello-dashboards-docs.component.html":88842,"./tutorials/hello-dashboards/hello-dashboards-docs.component.ts":90134,"./tutorials/hello-dashboards/hello-dashboards-example/hello-dashboards-example.component":68003,"./tutorials/hello-dashboards/hello-dashboards-example/hello-dashboards-example.component.html":45499,"./tutorials/hello-dashboards/hello-dashboards-example/hello-dashboards-example.component.less":84063,"./tutorials/hello-dashboards/hello-dashboards-example/hello-dashboards-example.component.ts":68003,"./tutorials/hello-dashboards/hello-dashboards.module":89633,"./tutorials/hello-dashboards/hello-dashboards.module.ts":89633,"./tutorials/persistence-handler-setup/persistence-handler-setup-docs.component":96076,"./tutorials/persistence-handler-setup/persistence-handler-setup-docs.component.html":81020,"./tutorials/persistence-handler-setup/persistence-handler-setup-docs.component.ts":96076,"./tutorials/persistence-handler-setup/persistence-handler-setup.component":53772,"./tutorials/persistence-handler-setup/persistence-handler-setup.component.html":6236,"./tutorials/persistence-handler-setup/persistence-handler-setup.component.less":86236,"./tutorials/persistence-handler-setup/persistence-handler-setup.component.ts":53772,"./tutorials/persistence-handler-setup/persistence-handler-setup.module":77179,"./tutorials/persistence-handler-setup/persistence-handler-setup.module.ts":77179,"./tutorials/tutorials.module":35783,"./tutorials/tutorials.module.ts":35783,"./tutorials/widget-creation/widget-creation-docs.component":35204,"./tutorials/widget-creation/widget-creation-docs.component.html":74948,"./tutorials/widget-creation/widget-creation-docs.component.ts":35204,"./tutorials/widget-creation/widget-creation.component":29844,"./tutorials/widget-creation/widget-creation.component.html":26516,"./tutorials/widget-creation/widget-creation.component.less":18868,"./tutorials/widget-creation/widget-creation.component.ts":29844,"./tutorials/widget-creation/widget-creation.module":5043,"./tutorials/widget-creation/widget-creation.module.ts":5043,"./tutorials/widget-editor-setup/widget-editor-setup-docs.component":65776,"./tutorials/widget-editor-setup/widget-editor-setup-docs.component.html":40592,"./tutorials/widget-editor-setup/widget-editor-setup-docs.component.ts":65776,"./tutorials/widget-editor-setup/widget-editor-setup.component":66720,"./tutorials/widget-editor-setup/widget-editor-setup.component.html":63552,"./tutorials/widget-editor-setup/widget-editor-setup.component.less":98776,"./tutorials/widget-editor-setup/widget-editor-setup.component.ts":66720,"./tutorials/widget-editor-setup/widget-editor-setup.module":85519,"./tutorials/widget-editor-setup/widget-editor-setup.module.ts":85519,"./tutorials/widget-error-handling/widget-error-handling-docs.component":66876,"./tutorials/widget-error-handling/widget-error-handling-docs.component.html":54508,"./tutorials/widget-error-handling/widget-error-handling-docs.component.ts":66876,"./tutorials/widget-error-handling/widget-error-handling.component":32188,"./tutorials/widget-error-handling/widget-error-handling.component.html":4812,"./tutorials/widget-error-handling/widget-error-handling.component.less":7628,"./tutorials/widget-error-handling/widget-error-handling.component.ts":32188,"./tutorials/widget-error-handling/widget-error-handling.module":86251,"./tutorials/widget-error-handling/widget-error-handling.module.ts":86251,"./types":89163,"./types.ts":89163,"./widget-types/drilldown/drilldown-multi-request-widget/drilldown-multi-request-widget-example.component":51382,"./widget-types/drilldown/drilldown-multi-request-widget/drilldown-multi-request-widget-example.component.html":68842,"./widget-types/drilldown/drilldown-multi-request-widget/drilldown-multi-request-widget-example.component.less":67746,"./widget-types/drilldown/drilldown-multi-request-widget/drilldown-multi-request-widget-example.component.ts":51382,"./widget-types/drilldown/drilldown-widget-docs.component":73952,"./widget-types/drilldown/drilldown-widget-docs.component.html":84448,"./widget-types/drilldown/drilldown-widget-docs.component.ts":73952,"./widget-types/drilldown/drilldown-widget-docs.module":17583,"./widget-types/drilldown/drilldown-widget-docs.module.ts":17583,"./widget-types/drilldown/drilldown-widget/data-mock":89751,"./widget-types/drilldown/drilldown-widget/data-mock.ts":89751,"./widget-types/drilldown/drilldown-widget/drilldown-widget-example.component":48834,"./widget-types/drilldown/drilldown-widget/drilldown-widget-example.component.html":38038,"./widget-types/drilldown/drilldown-widget/drilldown-widget-example.component.less":13158,"./widget-types/drilldown/drilldown-widget/drilldown-widget-example.component.ts":48834,"./widget-types/drilldown/drilldown-widget/mock-data-source":35321,"./widget-types/drilldown/drilldown-widget/mock-data-source.ts":35321,"./widget-types/embedded-content/embedded-content-docs.component":89593,"./widget-types/embedded-content/embedded-content-docs.component.html":35085,"./widget-types/embedded-content/embedded-content-docs.component.ts":89593,"./widget-types/embedded-content/embedded-content-docs.module":93132,"./widget-types/embedded-content/embedded-content-docs.module.ts":93132,"./widget-types/embedded-content/embedded-content-widget-example/embedded-content-widget-example.component":56952,"./widget-types/embedded-content/embedded-content-widget-example/embedded-content-widget-example.component.html":41608,"./widget-types/embedded-content/embedded-content-widget-example/embedded-content-widget-example.component.less":15872,"./widget-types/embedded-content/embedded-content-widget-example/embedded-content-widget-example.component.ts":56952,"./widget-types/kpi/kpi-docs.component":52607,"./widget-types/kpi/kpi-docs.component.html":21479,"./widget-types/kpi/kpi-docs.component.ts":52607,"./widget-types/kpi/kpi-docs.module":5758,"./widget-types/kpi/kpi-docs.module.ts":5758,"./widget-types/kpi/kpi-sync-broker-docs.component":18833,"./widget-types/kpi/kpi-sync-broker-docs.component.html":66901,"./widget-types/kpi/kpi-sync-broker-docs.component.ts":18833,"./widget-types/kpi/kpi-sync-broker-for-all-tiles/kpi-sync-broker-for-all-tiles-example.component":6379,"./widget-types/kpi/kpi-sync-broker-for-all-tiles/kpi-sync-broker-for-all-tiles-example.component.html":24435,"./widget-types/kpi/kpi-sync-broker-for-all-tiles/kpi-sync-broker-for-all-tiles-example.component.less":33623,"./widget-types/kpi/kpi-sync-broker-for-all-tiles/kpi-sync-broker-for-all-tiles-example.component.ts":6379,"./widget-types/kpi/kpi-sync-broker/kpi-sync-broker-example.component":48767,"./widget-types/kpi/kpi-sync-broker/kpi-sync-broker-example.component.html":61735,"./widget-types/kpi/kpi-sync-broker/kpi-sync-broker-example.component.less":84691,"./widget-types/kpi/kpi-sync-broker/kpi-sync-broker-example.component.ts":48767,"./widget-types/kpi/kpi-widget-background-color-docs.component":5339,"./widget-types/kpi/kpi-widget-background-color-docs.component.html":55939,"./widget-types/kpi/kpi-widget-background-color-docs.component.ts":5339,"./widget-types/kpi/kpi-widget-background-color/kpi-widget-background-color-example.component":16227,"./widget-types/kpi/kpi-widget-background-color/kpi-widget-background-color-example.component.html":3067,"./widget-types/kpi/kpi-widget-background-color/kpi-widget-background-color-example.component.less":16223,"./widget-types/kpi/kpi-widget-background-color/kpi-widget-background-color-example.component.ts":16227,"./widget-types/kpi/kpi-widget-interactive/kpi-widget-interactive-example.component":46601,"./widget-types/kpi/kpi-widget-interactive/kpi-widget-interactive-example.component.html":90909,"./widget-types/kpi/kpi-widget-interactive/kpi-widget-interactive-example.component.less":42417,"./widget-types/kpi/kpi-widget-interactive/kpi-widget-interactive-example.component.ts":46601,"./widget-types/kpi/kpi-widget/kpi-widget-example.component":58735,"./widget-types/kpi/kpi-widget/kpi-widget-example.component.html":32887,"./widget-types/kpi/kpi-widget/kpi-widget-example.component.less":2563,"./widget-types/kpi/kpi-widget/kpi-widget-example.component.ts":58735,"./widget-types/proportional/models":67693,"./widget-types/proportional/models.ts":67693,"./widget-types/proportional/proportional-docs.component":14947,"./widget-types/proportional/proportional-docs.component.html":16475,"./widget-types/proportional/proportional-docs.component.ts":14947,"./widget-types/proportional/proportional-docs.module":42661,"./widget-types/proportional/proportional-docs.module.ts":42661,"./widget-types/proportional/proportional-donut-content-docs.component":3712,"./widget-types/proportional/proportional-donut-content-docs.component.html":68992,"./widget-types/proportional/proportional-donut-content-docs.component.ts":3712,"./widget-types/proportional/proportional-donut-content-formatters/proportional-donut-content-formatters-example.component":70706,"./widget-types/proportional/proportional-donut-content-formatters/proportional-donut-content-formatters-example.component.html":86246,"./widget-types/proportional/proportional-donut-content-formatters/proportional-donut-content-formatters-example.component.less":17206,"./widget-types/proportional/proportional-donut-content-formatters/proportional-donut-content-formatters-example.component.ts":70706,"./widget-types/proportional/proportional-widget-interactive/proportional-widget-interactive-example.component":19346,"./widget-types/proportional/proportional-widget-interactive/proportional-widget-interactive-example.component.html":61446,"./widget-types/proportional/proportional-widget-interactive/proportional-widget-interactive-example.component.less":19254,"./widget-types/proportional/proportional-widget-interactive/proportional-widget-interactive-example.component.ts":19346,"./widget-types/proportional/proportional-widget/proportional-widget-example.component":47534,"./widget-types/proportional/proportional-widget/proportional-widget-example.component.html":6226,"./widget-types/proportional/proportional-widget/proportional-widget-example.component.less":96714,"./widget-types/proportional/proportional-widget/proportional-widget-example.component.ts":47534,"./widget-types/risk-score/risk-score-docs.component":34865,"./widget-types/risk-score/risk-score-docs.component.html":74901,"./widget-types/risk-score/risk-score-docs.component.ts":34865,"./widget-types/risk-score/risk-score-docs.module":80884,"./widget-types/risk-score/risk-score-docs.module.ts":80884,"./widget-types/risk-score/risk-score-widget-example/risk-score-widget-example.component":89258,"./widget-types/risk-score/risk-score-widget-example/risk-score-widget-example.component.html":34638,"./widget-types/risk-score/risk-score-widget-example/risk-score-widget-example.component.less":92062,"./widget-types/risk-score/risk-score-widget-example/risk-score-widget-example.component.ts":89258,"./widget-types/table/table-docs.component":36007,"./widget-types/table/table-docs.component.html":20863,"./widget-types/table/table-docs.component.ts":36007,"./widget-types/table/table-docs.module":79158,"./widget-types/table/table-docs.module.ts":79158,"./widget-types/table/table-paginator-docs.component":6701,"./widget-types/table/table-paginator-docs.component.html":865,"./widget-types/table/table-paginator-docs.component.ts":6701,"./widget-types/table/table-selectable-docs.component":59832,"./widget-types/table/table-selectable-docs.component.html":39528,"./widget-types/table/table-selectable-docs.component.ts":59832,"./widget-types/table/table-widget-interactive/table-widget-interactive-example.component":29635,"./widget-types/table/table-widget-interactive/table-widget-interactive-example.component.html":61051,"./widget-types/table/table-widget-interactive/table-widget-interactive-example.component.less":72767,"./widget-types/table/table-widget-interactive/table-widget-interactive-example.component.ts":29635,"./widget-types/table/table-widget-paginator/table-widget-paginator-example.component":67325,"./widget-types/table/table-widget-paginator/table-widget-paginator-example.component.html":47825,"./widget-types/table/table-widget-paginator/table-widget-paginator-example.component.less":41021,"./widget-types/table/table-widget-paginator/table-widget-paginator-example.component.ts":67325,"./widget-types/table/table-widget-search-docs.component":49069,"./widget-types/table/table-widget-search-docs.component.html":39905,"./widget-types/table/table-widget-search-docs.component.ts":49069,"./widget-types/table/table-widget-search/table-widget-search-example.component":48549,"./widget-types/table/table-widget-search/table-widget-search-example.component.html":37257,"./widget-types/table/table-widget-search/table-widget-search-example.component.less":77173,"./widget-types/table/table-widget-search/table-widget-search-example.component.ts":48549,"./widget-types/table/table-widget-selectable/table-widget-selectable-multi/table-widget-selectable-multi.example.component":17019,"./widget-types/table/table-widget-selectable/table-widget-selectable-multi/table-widget-selectable-multi.example.component.html":42371,"./widget-types/table/table-widget-selectable/table-widget-selectable-multi/table-widget-selectable-multi.example.component.less":74503,"./widget-types/table/table-widget-selectable/table-widget-selectable-multi/table-widget-selectable-multi.example.component.ts":17019,"./widget-types/table/table-widget-selectable/table-widget-selectable-radio/table-widget-selectable-radio.example.component":95927,"./widget-types/table/table-widget-selectable/table-widget-selectable-radio/table-widget-selectable-radio.example.component.html":69007,"./widget-types/table/table-widget-selectable/table-widget-selectable-radio/table-widget-selectable-radio.example.component.less":24475,"./widget-types/table/table-widget-selectable/table-widget-selectable-radio/table-widget-selectable-radio.example.component.ts":95927,"./widget-types/table/table-widget-selectable/table-widget-selectable-single/table-widget-selectable-single.example.component":74923,"./widget-types/table/table-widget-selectable/table-widget-selectable-single/table-widget-selectable-single.example.component.html":46227,"./widget-types/table/table-widget-selectable/table-widget-selectable-single/table-widget-selectable-single.example.component.less":64471,"./widget-types/table/table-widget-selectable/table-widget-selectable-single/table-widget-selectable-single.example.component.ts":74923,"./widget-types/table/table-widget-selectable/table-widget-selectable.example.component":95102,"./widget-types/table/table-widget-selectable/table-widget-selectable.example.component.html":76130,"./widget-types/table/table-widget-selectable/table-widget-selectable.example.component.less":52986,"./widget-types/table/table-widget-selectable/table-widget-selectable.example.component.ts":95102,"./widget-types/table/table-widget/table-widget-example.component":11429,"./widget-types/table/table-widget/table-widget-example.component.html":36457,"./widget-types/table/table-widget/table-widget-example.component.less":70485,"./widget-types/table/table-widget/table-widget-example.component.ts":11429,"./widget-types/timeseries/timeseries-docs.component":8825,"./widget-types/timeseries/timeseries-docs.component.html":42477,"./widget-types/timeseries/timeseries-docs.component.ts":8825,"./widget-types/timeseries/timeseries-docs.module":65004,"./widget-types/timeseries/timeseries-docs.module.ts":65004,"./widget-types/timeseries/timeseries-widget-example/timeseries-widget-example.component":16694,"./widget-types/timeseries/timeseries-widget-example/timeseries-widget-example.component.html":9290,"./widget-types/timeseries/timeseries-widget-example/timeseries-widget-example.component.less":18690,"./widget-types/timeseries/timeseries-widget-example/timeseries-widget-example.component.ts":16694,"./widget-types/timeseries/timeseries-widget-interactive-example/timeseries-widget-interactive-example.component":84350,"./widget-types/timeseries/timeseries-widget-interactive-example/timeseries-widget-interactive-example.component.html":2946,"./widget-types/timeseries/timeseries-widget-interactive-example/timeseries-widget-interactive-example.component.less":79802,"./widget-types/timeseries/timeseries-widget-interactive-example/timeseries-widget-interactive-example.component.ts":84350,"./widget-types/timeseries/timeseries-widget-status-bar-example/timeseries-widget-status-bar-example.component":86058,"./widget-types/timeseries/timeseries-widget-status-bar-example/timeseries-widget-status-bar-example.component.html":37038,"./widget-types/timeseries/timeseries-widget-status-bar-example/timeseries-widget-status-bar-example.component.less":68286,"./widget-types/timeseries/timeseries-widget-status-bar-example/timeseries-widget-status-bar-example.component.ts":86058,"./widget-types/widget-types.module":729,"./widget-types/widget-types.module.ts":729};function a(i){var s=r(i);return n(s)}function r(i){if(!n.o(t,i)){var s=new Error("Cannot find module '"+i+"'");throw s.code="MODULE_NOT_FOUND",s}return t[i]}a.keys=function(){return Object.keys(t)},a.resolve=r,o.exports=a,a.id=25934}}]);