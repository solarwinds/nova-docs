import{b as c}from"./chunk-72ASSOLF.js";import{Nc as d,re as m}from"./chunk-DKNPFPFG.js";import{Ha as l,Pb as a,Vb as t,Wb as i,Xb as s,tc as e,wb as n}from"./chunk-FGVILFLG.js";var x=(()=>{class o{static{this.\u0275fac=function(r){return new(r||o)}}static{this.\u0275cmp=l({type:o,selectors:[["nui-dashboard-data-source-docs"]],decls:86,vars:4,consts:[["href","../components/DashboardComponent.html","target","_blank"],["href","../injectables/ProviderRegistryService.html","target","_blank"],["href","../classes/WidgetTypesService.html","target","_blank"],["href","../additional-documentation/getting-started.html","target","_parent"],["href","../additional-documentation/tutorials/hello-dashboards.html","target","_parent"],["type","info",3,"allowDismiss"],["href","https://angular.io/guide/http#setup","target","_blank"],["type","warning",3,"allowDismiss"],["filenamePrefix","data-source-setup.component","exampleTitle","Adding a Data Source"]],template:function(r,p){r&1&&(t(0,"h1"),e(1,"Adding a Data Source"),i(),t(2,"p"),e(3,` In basic terms, a data source is an entity from which a widget on the dashboard gets its data. In the context of the dashboards framework, a data source is a dependency that gets injected just like any other provider for use by a widget via Angular's built-in dependency injection (DI) mechanism. As we'll see, the DI for a dependency in Nova Dashboards is very similar to that used in Nova Bits and other Angular-based libraries with one major difference: a dependency must be registered with a provider registry to make the dashboard framework aware of its availability for injection. In this tutorial, we'll go into some detail about this and other basics of how to set up a data source.
`),i(),t(4,"h2"),e(5,"Fundamental Concepts"),i(),t(6,"ul")(7,"li")(8,"a",0)(9,"code"),e(10,"DashboardComponent"),i()()(),t(11,"li")(12,"a",1)(13,"code"),e(14,"ProviderRegistryService"),i()()(),t(15,"li")(16,"a",2)(17,"code"),e(18,"WidgetTypesService"),i()()(),t(19,"li"),e(20,"Custom data source component"),i(),t(21,"li"),e(22,"Widget configuration (including its associated data)"),i(),t(23,"li"),e(24,"Widget position definition"),i()(),t(25,"h2"),e(26,"Basic Steps"),i(),t(27,"ol")(28,"li"),e(29," Follow the instructions "),t(30,"a",3),e(31,"here"),i(),e(32," to set up your environment for dashboard development. "),i(),t(33,"li"),e(34," Follow the instructions from the "),t(35,"a",4),e(36,"Hello Dashboards"),i(),e(37," tutorial to get a basic dashboard up and running. "),i(),t(38,"li"),e(39," Implement your data source (See the example source below for a basic implementation). "),t(40,"nui-message",5)(41,"strong"),e(42,"Note:"),i(),e(43," It's recommended to have the data source in a separate file. If you do put it in a separate file, don't forget to add "),t(44,"code"),e(45,"@Injectable()"),i(),e(46," to the top of the data source class. This lets Angular know that you plan on injecting dependencies into it. "),i()(),t(47,"li"),e(48," Ensure that Angular's "),t(49,"code"),e(50,"HttpClientModule"),i(),e(51," is included in the imports of the module that contains the data source. You can go "),t(52,"a",6),e(53,"here"),i(),e(54," for more information about http setup. "),t(55,"nui-message",5)(56,"strong"),e(57,"Note:"),i(),e(58," Importing "),t(59,"code"),e(60,"HttpClientModule"),i(),e(61," is required in this example because the data source depends on the "),t(62,"code"),e(63,"HttpClient"),i(),e(64," service. "),i()(),t(65,"li"),e(66," Register the data source as a dynamically injectable provider using the "),t(67,"a",1)(68,"code"),e(69,"ProviderRegistryService"),i()(),e(70,". "),t(71,"nui-message",7)(72,"strong"),e(73,"Note:"),i(),e(74," When registering a class provider using the ProviderRegistryService, be sure to include in the "),t(75,"code"),e(76,"deps"),i(),e(77," array any dependencies that need to be injected into the provider. This is demonstrated in the example below. "),i()(),t(78,"li"),e(79,"Set the data source's provider ID in the widget configuration."),i()(),t(80,"p"),e(81,` In the example below, we're statically setting the data source providerId for the tile inside the KPI widget. In a real-world scenario, the tile configuration would more likely come from a database or from the widget configurator output. We'll cover configurator usage in the Widget Editing and Widget Cloning tutorials.
`),i(),t(82,"nui-message",5),e(83,` For more detailed information about adding a data source, take a look at the inline comments under the source expander of the following example.
`),i(),t(84,"nui-example-wrapper",8),s(85,"data-source-setup"),i()),r&2&&(n(40),a("allowDismiss",!1),n(15),a("allowDismiss",!1),n(16),a("allowDismiss",!1),n(11),a("allowDismiss",!1))},dependencies:[m,d,c],encapsulation:2})}}return o})();export{x as a};
