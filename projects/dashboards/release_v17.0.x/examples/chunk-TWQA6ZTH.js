import{c as g}from"./chunk-TWBC67EQ.js";import{c as f}from"./chunk-LMXQEE5P.js";import{b as s}from"./chunk-4H25JFL6.js";import{Mc as h,oe as p,qe as u}from"./chunk-VVYJCL6H.js";import{Ac as e,Cb as c,Tb as r,ac as t,bc as i,cc as n,qb as o}from"./chunk-7LLRMBML.js";import{i as m}from"./chunk-VBFW7A5V.js";var T=(()=>{class a{constructor(){this.widgetFileText="",this.configuratorFileText=""}ngOnInit(){return m(this,null,function*(){this.widgetFileText=yield import("./chunk-D2Q6WT6U.js").then(s),this.configuratorFileText=yield import("./chunk-SFE2XAQ7.js").then(s)})}static{this.\u0275fac=function(l){return new(l||a)}}static{this.\u0275cmp=c({type:a,selectors:[["nui-table-docs"]],standalone:!1,decls:91,vars:3,consts:[["type","info",3,"allowDismiss"],["filenamePrefix","table-widget","exampleTitle","Table widget"],["href","../injectables/UrlInteractionHandler.html","target","_blank"],["filenamePrefix","table-widget-interactive","exampleTitle","Table Interactive widget"],["target","parent","href","../additional-documentation/widget-types/table/table-with-search.html"],["href","../miscellaneous/enumerations.html#WellKnownDataSourceFeatures"],["language","typescript",3,"code"]],template:function(l,d){l&1&&(t(0,"h1"),e(1,"Table Widget"),i(),t(2,"p"),e(3,` A Table widget displays data in tabular format, i.e. in rows and columns. Each row in the table represents an item, and each column shows a selected attribute of that item. You can scroll and sort this data using the controls on the widget.
`),i(),t(4,"h2"),e(5,"Column Formatters"),i(),t(6,"p"),e(7,` To present table values in a way that makes the most sense for users, it's necessary to specify an appropriate way to format the values of each column. With that in mind, a column formatter component can be used to format given data in a specific way. As such, the default formatter will format any given value as a simple string. But, data often need to be transformed beyond their raw value in some way to correctly display data types such as numbers, times, dates, pictures, links, etc. In those cases, a formatter specialized in formatting the particular data type must be used.
`),i(),t(8,"nui-message",0),e(9,` For details on how to instantiate a table widget, take a look at the inline comments under the source expander of the following example.
`),i(),t(10,"nui-example-wrapper",1),n(11,"table-widget-example"),i(),t(12,"h3"),e(13,"Interaction Handling"),i(),t(14,"p"),e(15," The example below has the "),t(16,"code")(17,"a",2),e(18,"UrlInteractionHandler"),i()(),e(19,` configured to handle the interactions that occur on the table's columns. Look at the inline comments in the source expander to see how it is configured.
`),i(),t(20,"nui-example-wrapper",3),n(21,"table-widget-interactive-example"),i(),t(22,"h2"),e(23,"Data source features"),i(),t(24,"p"),e(25,` There are table specific data source features that are useful only when given data source is used in the context of a table widget. These are:
`),i(),t(26,"ul")(27,"li")(28,"b"),e(29,"Search"),i(),e(30," - "),t(31,"a",4),e(32,"described on a dedicated page"),i()(),t(33,"li")(34,"b"),e(35,"Disabling automatic column generation"),i(),e(36," - turning on the feature called "),t(37,"a",5)(38,"code"),e(39,"DisableTableColumnGeneration"),i()(),e(40," disables automatic column generation in the table widget editor. This was introduced to maintain backward compatibility with previous implementations of the table widget. "),i()(),t(41,"h2"),e(42,"Widget Schema"),i(),t(43,"p"),e(44,` The code listings below are the source files for the Table widget definition with inline comments describing the parts that compose the standard Table widget type. It includes the widget's definition as well as its corresponding configurator form for defining how to configure (create/edit) the widget.
`),i(),t(45,"h2"),e(46,"Widget"),i(),t(47,"p"),e(48,` This part shows the actual widget definition. It includes, among other things, the components and providers that compose the widget itself.
`),i(),n(49,"nui-example-code",6),t(50,"h2"),e(51,"Configurator"),i(),t(52,"p"),e(53,` This part shows the form that's used for configuring (creating/editing) the widget.
`),i(),n(54,"nui-example-code",6),t(55,"h2"),e(56,"Additional Features"),i(),t(57,"ul")(58,"li")(59,"p")(60,"strong"),e(61,"Scroll Activation Delay:"),i(),e(62," By default, the table widget delays scroll activation for a short period of time after "),t(63,"code"),e(64,"mouseenter"),i(),e(65," to mitigate accidental scrolling of the table while scrolling through the dashboard. To disable this feature, follow these steps: "),i(),t(66,"ol")(67,"li"),e(68," Go to your initialization of the dashboard and grab the reference to the table widget type: "),n(69,"br"),t(70,"code"),e(71,' const table = this.widgetTypesService.getWidgetType("table"); '),i()(),t(72,"li"),e(73," Change this property value to false: "),n(74,"br"),t(75,"code"),e(76," table.widget.structure.table.properties.delayedMousePresenceDetectionEnabled = false; "),i()()(),n(77,"br"),t(78,"p"),e(79,"Additionally, you can override the default delay of 500 ms:"),i(),t(80,"ol")(81,"li"),e(82," Grab the reference to the table widget type in your dashboard initialization similar to above: "),n(83,"br"),t(84,"code"),e(85,' const table = this.widgetTypesService.getWidgetType("table"); '),i()(),t(86,"li"),e(87," Change this property to the desired value in ms: "),n(88,"br"),t(89,"code"),e(90," table.widget.structure.table.properties.configuration.scrollActivationDelayMs = 750 "),i()()()()()),l&2&&(o(8),r("allowDismiss",!1),o(41),r("code",d.widgetFileText),o(5),r("code",d.configuratorFileText))},dependencies:[u,p,h,g,f],encapsulation:2})}}return a})();export{T as a};
