import{d}from"./chunk-4E6Q2H27.js";import{Nc as m,re as c}from"./chunk-3HSEZOBQ.js";import{Ha as l,Rb as r,Xb as t,Yb as i,Zb as s,vc as e,yb as a}from"./chunk-NNMBFNDY.js";var x=(()=>{class n{static{this.\u0275fac=function(o){return new(o||n)}}static{this.\u0275cmp=l({type:n,selectors:[["custom-configurator-section-docs"]],decls:113,vars:2,consts:[["href","../additional-documentation/tutorials/customization/widget.html","target","_parent"],["href","../classes/WidgetTypesService.html","target","_blank"],["href","../injectables/ComponentRegistryService.html","target","_blank"],["href","../additional-documentation/getting-started.html","target","_parent"],["href","../components/KpiDescriptionConfigurationComponent.html","target","_blank"],["href","../modules/NuiDashboardConfiguratorModule.html","target","_blank"],["href","https://angular.io/api/forms/ReactiveFormsModule","target","_blank"],["type","info",3,"allowDismiss"],["href","../injectables/ConfiguratorHeadingService.html","target","_blank"],["filenamePrefix","custom-configurator-section","exampleTitle","Custom Configurator Section"]],template:function(o,h){o&1&&(t(0,"h1"),e(1,"Implementing a Custom Configurator Section"),i(),t(2,"p"),e(3,` While developing a dashboard, you may find yourself wanting to give users the ability to configure a widget behavior or layout that's not configurable out of the box. For example, you may want to provide a product-specific way for users to configure a data source. The first step to achieving something like this is to replace an existing widget configurator (editor) section with your own implementation. In this tutorial, we'll do our best to give you an understanding of what's needed to accomplish this first step.
`),i(),t(4,"p"),e(5," For now, we'll keep things simple and create a custom version of the KPI description configuration component to replace the background color selector with some static text content. This will serve mainly as a proof-of-concept for the configurator side. In a later tutorial, we'll create a "),t(6,"a",0),e(7,"custom widget"),i(),e(8,` that can actually be configured via a custom configurator section. And, in another tutorial beyond that, we'll go over the small amount of additional wiring required to give users the ability to change the configuration of a data source.
`),i(),t(9,"h2"),e(10,"Fundamental Concepts"),i(),t(11,"ul")(12,"li")(13,"code")(14,"a",1),e(15,"WidgetTypesService"),i()()(),t(16,"li")(17,"code")(18,"a",2),e(19,"ComponentRegistryService"),i()()(),t(20,"li"),e(21,"Custom configurator section component"),i()(),t(22,"h2"),e(23,"Basic Steps"),i(),t(24,"ol")(25,"li"),e(26," Follow the instructions "),t(27,"a",3),e(28,"here"),i(),e(29," to set up your environment for dashboard development. "),i(),t(30,"li"),e(31," Follow the instructions from previous tutorials to get a basic dashboard up and running. "),i(),t(32,"li"),e(33," Create a component that will be used to replace an existing framework-provided configurator section. In this tutorial, we'll replace the existing "),t(34,"code")(35,"a",4),e(36,"KpiDescriptionConfigurationComponent"),i()(),e(37," with a custom one. Our version will insert custom content where there would normally be a tile color selection dropdown. "),i(),t(38,"li"),e(39," Ensure that the following modules are included in the imports of the custom configurator section component's parent module: "),t(40,"code")(41,"a",5),e(42,"NuiDashboardConfiguratorModule"),i()(),e(43,", "),t(44,"code"),e(45,"NuiFormFieldModule"),i(),e(46,", "),t(47,"code"),e(48,"NuiTextboxModule"),i(),e(49,", "),t(50,"code"),e(51,"NuiIconModule"),i(),e(52,", and Angular's "),t(53,"code")(54,"a",6),e(55,"ReactiveFormsModule"),i()(),e(56,". "),i(),t(57,"li"),e(58," Add the custom configurator section component class name to the declarations of the module in which it's implemented. In this example, the class name is "),t(59,"code"),e(60,"CustomKpiDescriptionConfigurationComponent"),i()(),t(61,"li"),e(62," Prepare the dashboard framework to use our custom configurator section by doing the following: "),t(63,"ol")(64,"li"),e(65," Use the "),t(66,"code")(67,"a",1),e(68,"WidgetTypesService"),i()(),e(69," to replace the existing configurator section component with our custom one. "),i(),t(70,"li"),e(71," Register the custom configurator section component using the "),t(72,"code")(73,"a",2),e(74,"ComponentRegistryService"),i()(),e(75," to make it available for late load by the dashboard framework. "),i()(),t(76,"nui-message",7)(77,"strong"),e(78,"Note:"),i(),e(79," In this tutorial, the above two steps are performed in the component's "),t(80,"code"),e(81,"ngOnInit"),i(),e(82,". But, in a real-world app, widget type modifications and component registrations like this may make more sense in a parent module's constructor. Moving framework initialization procedures such as these to a higher level in an app's hierarchy ensures that multiple dashboard instances within a common parent module have access to the same modifications. "),i()(),t(83,"li"),e(84," At this point you should be able to open the widget editor using the Edit button in the menu at the top-right corner of the widget. Once the editor is open, expand the KPI tile's Description section. The custom component we created should now be displayed in that section of the editor. "),i(),t(85,"li"),e(86," In case you have custom content, like formatters etc., and you use "),t(87,"code"),e(88,"nui-select-v2"),i(),e(89," and "),t(90,"code"),e(91,"nui-combobox-v2"),i(),e(92," components, it is possible that in case of large lists the component overlay may go beyond the configurator heading due to its high z-index. To fix this, use the "),t(93,"code"),e(94,"nui-select-v2"),i(),e(95," and "),t(96,"code"),e(97,"nui-combobox-v2"),i(),e(98," components input "),t(99,"code"),e(100,"popupViewportMargin"),i(),e(101," and pass the height of the configurator heading into it. You can get the height of the configurator heading by simply injecting the "),t(102,"code")(103,"a",8),e(104,"ConfiguratorHeadingService"),i()(),e(105," and use its "),t(106,"code"),e(107,"height$"),i(),e(108," observable and async pipe to instantly get the current height of the configurator heading. "),i()(),t(109,"nui-message",7),e(110,` For more detailed information about implementing a custom configurator section, take a look at the inline comments under the source expander of the following example.
`),i(),t(111,"nui-example-wrapper",9),s(112,"custom-configurator-section-example"),i()),o&2&&(a(76),r("allowDismiss",!1),a(33),r("allowDismiss",!1))},dependencies:[c,m,d],encapsulation:2})}}return n})();export{x as a};
