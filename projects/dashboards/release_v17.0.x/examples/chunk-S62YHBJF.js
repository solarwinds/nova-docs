import{c}from"./chunk-KVV6PBBG.js";import{Nc as m,re as s}from"./chunk-3HSEZOBQ.js";import{Ha as l,Rb as r,Xb as t,Yb as i,Zb as d,vc as e,yb as a}from"./chunk-NNMBFNDY.js";var w=(()=>{class n{static{this.\u0275fac=function(o){return new(o||n)}}static{this.\u0275cmp=l({type:n,selectors:[["nui-dashboard-widget-creation-docs"]],decls:87,vars:3,consts:[["href","../injectables/ProviderRegistryService.html","target","_blank"],["href","../injectables/WidgetClonerService.html","target","_blank"],["href","../additional-documentation/getting-started.html","target","_parent"],["href","../interfaces/IWidgetTemplateSelector.html","target","_blank"],["href","../interfaces/IWidgetMetadata.html#needsConfiguration","target","_blank"],["type","info",3,"allowDismiss"],["href","../interfaces/IWidgetSelector.html","target","_blank"],["href","../injectables/WidgetClonerService.html#open","target","_blank"],["filenamePrefix","widget-creation.component","exampleTitle","Widget Creation"]],template:function(o,p){o&1&&(t(0,"h1"),e(1,"Widget Creation"),i(),t(2,"p"),e(3,` In this tutorial we'll cover how to add a widget creation wizard which allows end-users to create new widget instances based on existing widget configurations. The wizard's first step, or page, will use a custom component that lets users choose a widget to create. In the example below we'll implement a sample widget selection component that provides a proportional widget and a kpi widget as options.
`),i(),t(4,"h2"),e(5,"Fundamental Concepts"),i(),t(6,"ul")(7,"li")(8,"a",0)(9,"code"),e(10,"ProviderRegistryService"),i()()(),t(11,"li")(12,"a",1)(13,"code"),e(14,"WidgetClonerService"),i()()(),t(15,"li"),e(16,"Widget configurations"),i(),t(17,"li"),e(18,"Custom component for widget selection"),i()(),t(19,"h2"),e(20,"Basic Steps"),i(),t(21,"ol")(22,"li"),e(23," Follow the instructions "),t(24,"a",2),e(25,"here"),i(),e(26," to set up your environment for dashboard development. "),i(),t(27,"li"),e(28," Follow the instructions from previous tutorials to get a basic dashboard up and running. "),i(),t(29,"li"),e(30," Create a widget template selector component which will act as the first step in the wizard. The selector component should implement the "),t(31,"a",3)(32,"code"),e(33,"IWidgetTemplateSelector"),i()(),e(34," interface which requires a widgetSelected output that should emit a widget to be cloned. For any widgets that require further configuration before they should be placed on the dashboard, set the widget's "),t(35,"code")(36,"a",4),e(37,"metadata.needsConfiguration"),i()(),e(38," property to "),t(39,"code"),e(40,"true"),i(),e(41,'. This will hide the "Create Widget" button whenever an unconfigured widget is selected. '),t(42,"nui-message",5)(43,"strong"),e(44,"Note:"),i(),e(45," In the example below, the widget selector is implemented in the same file as the dashboard component, but it's recommended to define it in a separate file. Additionally, after implementing it, remember to add it to your module declarations. "),i()(),t(46,"li"),e(47," Ensure that "),t(48,"code"),e(49,"NuiRepeatModule"),i(),e(50," and "),t(51,"code"),e(52,"NuiImageModule"),i(),e(53," are included in the imports of the widget template selector component's parent module. "),t(54,"nui-message",5)(55,"strong"),e(56,"Note:"),i(),e(57," Importing these modules is required in this example because, in this case, the widget template selector uses the Nova repeat component and a couple of images from the Nova image repository. "),i()(),t(58,"li"),e(59," Invoke the "),t(60,"code"),e(61,"open"),i(),e(62," method on the "),t(63,"a",1)(64,"code"),e(65,"WidgetClonerService"),i()(),e(66," with an argument of type "),t(67,"a",6)(68,"code"),e(69,"IWidgetSelector"),i()(),e(70,". Only two things are required in that object: a reference to the dashboardComponent instance and the typename of the widget selector created in the previous step. Optionally, the argument object may also contain a "),t(71,"code"),e(72,"trySubmit"),i(),e(73," function with logic for persisting the new widget on a backend. "),i(),t(74,"li"),e(75," Subscribe to the "),t(76,"code"),e(77,"Observable"),i(),e(78," returned by the "),t(79,"a",7)(80,"code"),e(81,"widgetClonerService.open"),i()(),e(82," method in order to activate the handling of form submission and the subsequent updating of the dashboard with a newly created widget. "),i()(),t(83,"nui-message",5),e(84,` For more detailed information about widget creation, take a look at the inline comments under the source expander of the following example.
`),i(),t(85,"nui-example-wrapper",8),d(86,"widget-creation"),i()),o&2&&(a(42),r("allowDismiss",!1),a(12),r("allowDismiss",!1),a(29),r("allowDismiss",!1))},dependencies:[s,m,c],encapsulation:2})}}return n})();export{w as a};
