import{d as c}from"./chunk-B7ETQ5LT.js";import{Nc as s,re as d}from"./chunk-NZZJTGI5.js";import{Ha as l,Rb as r,Xb as i,Yb as t,Zb as m,vc as e,yb as a}from"./chunk-NNMBFNDY.js";var x=(()=>{class n{static{this.\u0275fac=function(o){return new(o||n)}}static{this.\u0275cmp=l({type:n,selectors:[["nui-custom-formatter-docs"]],decls:149,vars:3,consts:[["href","../additional-documentation/tutorials/customization/configurator-section.html","target","_parent"],["type","info",3,"allowDismiss"],["href","../components/LinkConfiguratorComponent.html","target","_blank"],["href","../components/LinkFormatterComponent.html","target","_blank"],["href","../classes/WidgetTypesService.html","target","_blank"],["href","../injectables/ComponentRegistryService.html","target","_blank"],["href","../additional-documentation/getting-started.html","target","_parent"],["href","../classes/FormatterConfiguratorComponent.html","target","_blank"],["href","../interfaces/ITableFormatterDefinition.html","target","_blank"],["href","../injectables/TableFormatterRegistryService.html","target","_blank"],["href","../classes/FormatterRegistryService.html","target","_blank"],["href","../injectables/ConfiguratorHeadingService.html","target","_blank"],["filenamePrefix","custom-formatter-example","exampleTitle","Custom Table Formatter"]],template:function(o,u){o&1&&(i(0,"h1"),e(1,"Implementing a Custom Formatter"),t(),i(2,"p"),e(3," In the "),i(4,"a",0),e(5,"Custom Configurator Section"),t(),e(6,` tutorial, we talked about giving users the ability to configure a widget behavior or layout that's not configurable out of the box. While developing a dashboard, you may discover a need to give users the ability to add some special layout or styling to the contents of a table cell beyond raw text display or a link. In this tutorial, we'll create a custom formatter and a custom configurator component to conditionally add an icon to the contents of a specified column.
`),t(),i(7,"nui-message",1)(8,"strong"),e(9,"Note:"),t(),e(10," Off the shelf, the Nova Dashboards framework provides a "),i(11,"code")(12,"a",2),e(13,"LinkConfiguratorComponent"),t()(),e(14," which allows users pair a value and url to be displayed as a link in a specified column. The corresponding "),i(15,"code")(16,"a",3),e(17,"LinkFormatterComponent"),t()(),e(18,` uses the configurator's output to determine which value to use for display and which value to use for the url. The formatter then displays the formatted link in each table cell within the configured column.
`),t(),i(19,"h2"),e(20,"Fundamental Concepts"),t(),i(21,"ul")(22,"li")(23,"code")(24,"a",4),e(25,"WidgetTypesService"),t()()(),i(26,"li")(27,"code")(28,"a",5),e(29,"ComponentRegistryService"),t()()(),i(30,"li"),e(31,"Custom configurator section component"),t(),i(32,"li"),e(33,"Custom formatter"),t()(),i(34,"h2"),e(35,"Basic Steps"),t(),i(36,"ol")(37,"li"),e(38," Follow the instructions "),i(39,"a",6),e(40,"here"),t(),e(41," to set up your environment for dashboard development. "),t(),i(42,"li"),e(43," Follow the instructions from previous tutorials to get a basic dashboard up and running. "),t(),i(44,"li"),e(45," Create a component that will format the contents of a table cell. It will take as an input the data that's normally displayed as a raw value in the cell. In this tutorial, our formatter will prepend the data with an icon if the value meets a certain threshold. "),t(),i(46,"li"),e(47," Create a component that extends "),i(48,"code")(49,"a",7),e(50,"FormatterConfiguratorComponent"),t()(),e(51,". This component will serve as the custom configurator section. If you have any custom form controls make sure to override "),i(52,"code"),e(53,"FormatterConfiguratorComponent"),t(),e(54,"'s "),i(55,"code"),e(56,"addCustomFormControls"),t(),e(57," method and add the custom form controls using the form group argument. The controls in this form group will each correspond to an input on the formatter. "),t(),i(58,"li"),e(59," Ensure that the following modules are included in the imports of the custom configurator section component's parent module: "),i(60,"code"),e(61,"NuiFormFieldModule"),t(),e(62,", "),i(63,"code"),e(64,"NuiIconModule"),t(),e(65,", "),i(66,"code"),e(67,"NuiTextboxModule "),t(),e(68,", "),i(69,"code"),e(70,"NuiValidationMessageModule"),t(),e(71,", and "),i(72,"code"),e(73,"NuiSelectV2Module"),t()(),i(74,"li"),e(75," Ensure that the "),i(76,"code"),e(77,"NuiIconModule"),t(),e(78," is included in the imports of the custom formatter component's parent module. "),t(),i(79,"li"),e(80," Add the custom formatter and configurator section component class names to the declarations of the module(s) in which they're implemented. In this example, the class names are "),i(81,"code"),e(82,"CustomFormatterComponent"),t(),e(83," and "),i(84,"code"),e(85,"CustomFormatterConfiguratorComponent"),t(),e(86," respectively. "),t(),i(87,"li"),e(88," Prepare the dashboard framework to use our custom components by doing the following: "),i(89,"ol")(90,"li"),e(91," Register the custom formatter and custom configurator section components using the "),i(92,"code")(93,"a",5),e(94,"ComponentRegistryService"),t()(),e(95,". This will make them available for late load by the dashboard framework. "),t(),i(96,"li"),e(97," Register the formatter definitions of type "),i(98,"code")(99,"a",8),e(100,"ITableFormatterDefinition"),t()(),e(101," using the "),i(102,"code")(103,"a",9),e(104,"TableFormatterRegistryService"),t(),e(105," which is extending ("),i(106,"a",10),e(107,"FormatterRegistryService"),t(),e(108,")"),t(),e(109,". "),t(),i(110,"nui-message",1)(111,"strong"),e(112,"Note:"),t(),e(113," In this tutorial, the above two steps are performed in the component's "),i(114,"code"),e(115,"constructor"),t(),e(116,". But, in a real-world app, widget type modifications and component registrations like this might make more sense in a parent module's constructor. Moving framework initialization procedures such as these to a higher level in an app's hierarchy ensures that multiple dashboard instances within a common parent module have access to the same modifications. "),t()()(),i(117,"li"),e(118," At this point you should be able to open the widget editor using the Edit button in the menu at the top-right corner of the widget. Once the editor is open, expand any of the column sections. The custom component we created should be displayed in that section of the editor. "),t(),i(119,"li"),e(120," Select the custom formatter from the Format dropdown and choose an icon and threshold. The selected icon should now be shown on the left side of the corresponding column in the table widget preview if the value is above the threshold. "),t(),i(121,"li"),e(122," In case you use "),i(123,"code"),e(124,"nui-select-v2"),t(),e(125," and "),i(126,"code"),e(127,"nui-combobox-v2"),t(),e(128," components, it is possible that in case of large lists the component overlay may go beyond the configurator heading due to its high z-index. To fix this, use the "),i(129,"code"),e(130,"nui-select-v2"),t(),e(131," and "),i(132,"code"),e(133,"nui-combobox-v2"),t(),e(134," components input "),i(135,"code"),e(136,"popupViewportMargin"),t(),e(137," and pass the height of the configurator heading into it. You can get the height of the configurator heading by simply injecting the "),i(138,"code")(139,"a",11),e(140,"ConfiguratorHeadingService"),t()(),e(141," and use its "),i(142,"code"),e(143,"height$"),t(),e(144," observable and async pipe to instantly get the current height of the configurator heading. "),t()(),i(145,"nui-message",1),e(146,` For details on how to create a custom formatter, take a look at the inline comments under the source expander of the following example.
`),t(),i(147,"nui-example-wrapper",12),m(148,"custom-formatter-example"),t()),o&2&&(a(7),r("allowDismiss",!1),a(103),r("allowDismiss",!1),a(35),r("allowDismiss",!1))},dependencies:[d,s,c],encapsulation:2})}}return n})();export{x as a};
