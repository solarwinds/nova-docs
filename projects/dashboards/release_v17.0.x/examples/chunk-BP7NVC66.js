import{c}from"./chunk-7IMZ3BE6.js";import{Nc as m,re as d}from"./chunk-3HSEZOBQ.js";import{Ha as l,Rb as r,Xb as t,Yb as i,Zb as s,vc as e,yb as a}from"./chunk-NNMBFNDY.js";var x=(()=>{class n{static{this.\u0275fac=function(o){return new(o||n)}}static{this.\u0275cmp=l({type:n,selectors:[["custom-widget-docs"]],decls:124,vars:3,consts:[["href","../additional-documentation/tutorials/customization/configurator-section.html","target","_parent"],["href","../components/WidgetHeaderComponent.html","target","_blank"],["href","https://nova-ui.solarwinds.io/bits/release_v12.x/components/ImageComponent.html","target","_blank"],["type","critical",3,"allowDismiss"],["href","../classes/WidgetTypesService.html","target","_blank"],["href","../injectables/ComponentRegistryService.html","target","_blank"],["href","../additional-documentation/getting-started.html","target","_parent"],["href","../modules/NuiDashboardConfiguratorModule.html","target","_blank"],["href","https://angular.io/api/forms/ReactiveFormsModule","target","_blank"],["type","info",3,"allowDismiss"],["filenamePrefix","custom-widget.component","exampleTitle","Custom Widget"]],template:function(o,h){o&1&&(t(0,"h1"),e(1,"Implementing a Custom Widget"),i(),t(2,"p"),e(3," In the "),t(4,"a",0),e(5,"Custom Configurator Section"),i(),e(6,` tutorial, we talked about giving users the ability to configure a widget behavior or layout that's not configurable out of the box. This includes such things as providing a product-specific way for users to configure a data source. That tutorial covered the first step to achieving something like this by demonstrating how to replace an existing widget configurator (editor) section with your own implementation. In this tutorial, we'll go a step further and create a custom widget that actually reacts to changes triggered by users as they interact with the custom configurator section.
`),i(),t(7,"p"),e(8," To keep things simple we'll create a custom widget body and reuse the standard "),t(9,"code")(10,"a",1),e(11,"WidgetHeaderComponent"),i()(),e(12," as our header. The widget body will consist of a "),t(13,"code")(14,"a",2),e(15,"nui-image"),i()(),e(16,`, and we'll create a custom configurator section that can be used to update the source url of the image. In a later tutorial, we'll create a custom data source configurator section and go over the small amount of additional wiring required to give users the ability to change the configuration of a data source.
`),i(),t(17,"nui-message",3)(18,"strong"),e(19,"Note:"),i(),e(20,` Implementing a custom widget should be an extremely rare occurrence, and it should be done only with the utmost caution. If you or someone on your team is thinking about implementing one, please discuss it with UX leadership and the Nova development team before proceeding.
`),i(),t(21,"h2"),e(22,"Fundamental Concepts"),i(),t(23,"ul")(24,"li")(25,"code")(26,"a",4),e(27,"WidgetTypesService"),i()()(),t(28,"li")(29,"code")(30,"a",5),e(31,"ComponentRegistryService"),i()()(),t(32,"li"),e(33,"Custom configurator section component"),i(),t(34,"li"),e(35,"Custom widget body"),i()(),t(36,"h2"),e(37,"Basic Steps"),i(),t(38,"ol")(39,"li"),e(40," Follow the instructions "),t(41,"a",6),e(42,"here"),i(),e(43," to set up your environment for dashboard development. "),i(),t(44,"li"),e(45," Follow the instructions from previous tutorials to get a basic dashboard up and running. "),i(),t(46,"li"),e(47," Create a component that will serve as the custom widget body. In this tutorial, the widget body will consist of a simple "),t(48,"code"),e(49,"nui-image"),i(),e(50,". "),i(),t(51,"li"),e(52," Create a component that will serve as the custom configurator section. In this tutorial, the custom configurator section will allow users to update the source url for the image in the custom widget. "),i(),t(53,"li"),e(54," Ensure that "),t(55,"code"),e(56,"NuiImageModule"),i(),e(57," is included in the imports of the custom widget component's parent module. "),i(),t(58,"li"),e(59," Ensure that the following modules are included in the imports of the custom configurator section component's parent module: "),t(60,"code")(61,"a",7),e(62,"NuiDashboardConfiguratorModule"),i()(),e(63,", "),t(64,"code"),e(65,"NuiFormFieldModule"),i(),e(66,", "),t(67,"code"),e(68,"NuiSelectV2Module"),i(),e(69,", "),t(70,"code"),e(71,"NuiIconModule"),i(),e(72,", and Angular's "),t(73,"code")(74,"a",8),e(75,"ReactiveFormsModule"),i()(),e(76,". "),i(),t(77,"li"),e(78," Add the custom widget body and configurator section component class names to the declarations of the module(s) in which they're implemented. In this example, the class names are "),t(79,"code"),e(80,"CustomWidgetBodyContentComponent"),i(),e(81," and "),t(82,"code"),e(83,"CustomConfiguratorSectionComponent"),i(),e(84," respectively. "),i(),t(85,"li"),e(86," Prepare the dashboard framework to use our custom components by doing the following: "),t(87,"ol")(88,"li"),e(89," Register the new widget type using the "),t(90,"code")(91,"a",4),e(92,"WidgetTypesService"),i()(),e(93,". "),i(),t(94,"li"),e(95," Register the custom widget body and custom configurator section components using the "),t(96,"code")(97,"a",5),e(98,"ComponentRegistryService"),i()(),e(99,". This will make them available for late load by the dashboard framework. "),i(),t(100,"li"),e(101," Initialize the image source url options to be displayed in the custom configurator section dropdown using the "),t(102,"code")(103,"a",4),e(104,"WidgetTypesService"),i()()()(),t(105,"nui-message",9)(106,"strong"),e(107,"Note:"),i(),e(108," In this tutorial, the above three steps are performed in the component's "),t(109,"code"),e(110,"ngOnInit"),i(),e(111,". But, in a real-world app, widget type modifications and component registrations like this may make more sense in a parent module's constructor. Moving framework initialization procedures such as these to a higher level in an app's hierarchy ensures that multiple dashboard instances within a common parent module have access to the same modifications. "),i()(),t(112,"li"),e(113," At this point you should have a custom widget on the dashboard that displays an image. "),i(),t(114,"li"),e(115," You should also be able to open the widget editor using the Edit button in the menu at the top-right corner of the widget and see the custom configurator section in the editor. "),i(),t(116,"li"),e(117," Changing the image selection in the dropdown should update the image in the widget preview. "),i(),t(118,"li"),e(119," Clicking the Save Changes button in the editor should update the widget on the dashboard to show the newly selected image. "),i()(),t(120,"nui-message",9),e(121,` For more detailed information about implementing a custom widget, take a look at the inline comments under the source expander of the following example.
`),i(),t(122,"nui-example-wrapper",10),s(123,"custom-widget"),i()),o&2&&(a(17),r("allowDismiss",!1),a(88),r("allowDismiss",!1),a(15),r("allowDismiss",!1))},dependencies:[d,m,c],encapsulation:2})}}return n})();export{x as a};
