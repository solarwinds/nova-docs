{"version":3,"sources":["webpack:///examples/components/demo/chart-types/line/line-chart-interrupted-calculated/line-chart-interrupted-calculated-example.component.ts","webpack:///examples/components/demo/chart-types/line/line-chart-with-axis-labels/line-chart-with-axis-labels.example.component.ts","webpack:///examples/components/demo/chart-types/line/line-chart-with-2y-axes/line-chart-with-2y-axes-example.component.ts","webpack:///examples/components/demo/chart-types/line/line-chart-visual-test/line-chart-visual-test.component.ts","webpack:///examples/components/demo/chart-types/line/chart-docs-line.module.ts","webpack:///examples/components/demo/chart-types/line/line-chart-with-rich-tile-legend/line-chart-with-rich-tile-legend.example.component.ts","webpack:///examples/components/demo/chart-types/line/line-chart-interrupted-path-terminus/line-chart-interrupted-path-terminus-example.component.ts","webpack:///examples/components/demo/chart-types/line/line-chart-with-legend/line-chart-with-legend.example.component.ts","webpack:///examples/components/demo/chart-types/line/line-chart-test/line-chart-test.component.ts","webpack:///examples/components/demo/chart-types/line/line-chart-basic/line-chart-basic.example.component.ts","webpack:///examples/components/demo/chart-types/line/chart-docs-line.component.ts","webpack:///node_modules/raw-loader/dist/cjs.js .*\\.(ts|html|less)$?7cb5","webpack:///examples/components/demo/chart-types/line/line-chart-interrupted-basic/line-chart-interrupted-basic-example.component.ts"],"names":["LineChartInterruptedCalculatedExampleComponent","chart","chartAssist","interval","xScale","scales","x","y","incomingSeries","getData","seriesSet","renderer","accessors","palette","standardColors","markers","rendererMissing","accessorsMissing","origColorAccessor","series","color","seriesId","split","origDefinedAccessor","data","defined","d","i","dataSeries","s","cs","push","id","showInLegend","update","selector","template","name","Date","LineChartWithAxisLabelsExampleComponent","map","format","LineChartWith2YAxesExampleComponent","changeDetector","destroy$","axesOpacity","yLeftScale","yRightScale","formatters","tick","value","xyGrid","leftScaleId","rightScaleId","config","axis","left","fit","unitLabel","eventBus","getStream","subscribe","event","markForCheck","next","complete","LineChartVisualTestComponent","exampleRoutes","path","component","beta","showThemeSwitcher","ChartDocsLineModule","declarations","imports","forChild","providers","provide","useFactory","LineChartWithRichTileLegendExampleComponent","interactionStrategy","LineChartInterruptedPathTerminusExampleComponent","toDate","LineChartWithLegendExampleComponent","LineChartTestComponent","initialInput","input","JSON","stringify","configureChart","buildSeriesSet","parse","forEach","seriesInput","datum","j","newValue","gridConfig","dimension","autoHeight","autoWidth","height","width","colors","dates","yScale","fixDomain","LineChartBasicExampleComponent","ChartDocsLineComponent","key","webpackContext","req","webpackContextResolve","__webpack_require__","o","e","Error","code","keys","webpackContextKeys","Object","resolve","module","exports","LineChartInterruptedBasicExampleComponent"],"mappings":"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","file":"line-chart-docs-line-module-es5.js","sourcesContent":["import { Component, OnInit } from \"@angular/core\";\nimport {\n    calculateMissingData,\n    Chart,\n    ChartAssist,\n    IChartAssistSeries,\n    IChartSeries,\n    ILineAccessors,\n    IXYScales,\n    LineAccessors,\n    LinearScale,\n    LineRenderer,\n    MissingDataLineRendererConfig,\n    TimeIntervalScale,\n    XYGrid\n} from \"@nova-ui/charts\";\nimport { duration } from \"moment/moment\";\n\n@Component({\n    selector: \"line-chart-interrupted-calculated-example\",\n    templateUrl: \"./line-chart-interrupted-calculated-example.component.html\",\n})\nexport class LineChartInterruptedCalculatedExampleComponent implements OnInit {\n    // XYGrid is used for rendering axes as well as other grid elements\n    public chart = new Chart(new XYGrid());\n    public chartAssist: ChartAssist = new ChartAssist(this.chart);\n\n    public ngOnInit() {\n        // In case of a line chart, the scale definitions are flexible.\n        // This example demonstrates a scenario with time on the X scale and a numeric value on the Y scale.\n        const interval = duration(1, \"hour\");\n        const xScale = new TimeIntervalScale(interval);\n        const scales: IXYScales = {\n            x: xScale,\n            y: new LinearScale(),\n        };\n\n        const incomingSeries = getData();\n\n        // Here we assemble the complete chart series.\n        const seriesSet: IChartAssistSeries<ILineAccessors>[] = [];\n\n        // The line renderer will make the chart look like a line chart.\n        const renderer = new LineRenderer();\n        // Line accessors let the renderer know how to access x and y domain data respectively from a chart's input data set(s).\n        const accessors = new LineAccessors(this.chartAssist.palette.standardColors, this.chartAssist.markers);\n\n        // Renderer for the missing dataSeries\n        const rendererMissing = new LineRenderer(new MissingDataLineRendererConfig());\n        const accessorsMissing = new LineAccessors(this.chartAssist.palette.standardColors, this.chartAssist.markers);\n        // Link the colors from 'parent' series\n        const origColorAccessor = accessorsMissing.series.color;\n        accessorsMissing.series.color = (seriesId, series) => origColorAccessor?.(seriesId.split(\"__\")[0], series);\n\n        // We need to store the original value of the 'defined' accessor\n        const origDefinedAccessor = accessorsMissing.data.defined;\n        // We're calling the original 'defined' accessor implementation, but inverting it's logic because, from the missing data\n        // series point of view, the undefined data are actually visualized as defined.\n        accessorsMissing.data.defined = (d, i, data, dataSeries) =>\n            !origDefinedAccessor?.(d, i, data, dataSeries) ?? true;\n\n        for (const s of incomingSeries) {\n            // The first data series is for rendering the valid data\n            const cs: IChartSeries<ILineAccessors> = {\n                ...s,\n                accessors,\n                renderer,\n                scales,\n            };\n            // We're using this convenience function to calculate the missing data according to the scale's interval\n            const data = calculateMissingData(cs, \"x\", xScale.interval());\n            // We have to use data that includes the missing data points for the first series as well\n            cs.data = data;\n            seriesSet.push(cs);\n\n            // This series will be used to visualize the missing data points\n            seriesSet.push({\n                // This naming convention will connect these two series and their interaction will be synchronized\n                id: s.id + \"__missing\",\n                data: data,\n                accessors: accessorsMissing,\n                renderer: rendererMissing,\n                scales,\n                showInLegend: false, // We don't want to show this in the legend\n            });\n        }\n\n        // Finally, pass the series set to the chart's update method\n        this.chartAssist.update(seriesSet);\n    }\n}\n\n/* Chart data */\nfunction getData() {\n    return [\n        {\n            id: \"series-1\",\n            name: \"Series 1\",\n            data: [\n                { x: new Date(2016, 11, 25, 5), y: 30 },\n                { x: new Date(2016, 11, 25, 6), y: 95 },\n                { x: new Date(2016, 11, 25, 7), y: 60 },\n                { x: new Date(2016, 11, 25, 10), y: 75 },\n                { x: new Date(2016, 11, 25, 12), y: 35 },\n                { x: new Date(2016, 11, 25, 13), y: 20 },\n            ],\n        },\n    ];\n}\n","import { Component, OnInit } from \"@angular/core\";\nimport {\n    Chart, ChartAssist, IChartSeries, ILineAccessors, IXYScales, LineAccessors, LinearScale, LineRenderer, TimeScale, XYGrid\n} from \"@nova-ui/charts\";\nimport moment from \"moment/moment\";\n\n@Component({\n    selector: \"line-chart-with-axis-labels-example\",\n    templateUrl: \"./line-chart-with-axis-labels.example.component.html\",\n})\nexport class LineChartWithAxisLabelsExampleComponent implements OnInit {\n    public chart = new Chart(new XYGrid());\n\n    public chartAssist: ChartAssist = new ChartAssist(this.chart);\n\n    public ngOnInit() {\n        // providing chartAssist colors and markers to LineAccessors will share them with the line chart\n        const accessors = new LineAccessors(this.chartAssist.palette.standardColors, this.chartAssist.markers);\n        const renderer = new LineRenderer();\n        const scales: IXYScales = {\n            x: new TimeScale(),\n            y: new LinearScale(),\n        };\n\n        const seriesSet: IChartSeries<ILineAccessors>[] = getData().map(d => ({\n            ...d,\n            accessors,\n            renderer,\n            scales,\n        }));\n\n        // chart assist needs to be used to update data\n        this.chartAssist.update(seriesSet);\n    }\n}\n\n/* Chart data */\nfunction getData() {\n    const format = \"YYYY-MM-DDTHH:mm:ssZ\";\n\n    return [\n        {\n            id: \"series-1\",\n            name: \"Series 1\",\n            data: [\n                { x: moment(\"2016-12-25T15:14:29.909Z\", format), y: 30 },\n                { x: moment(\"2016-12-27T15:14:29.909Z\", format), y: 95 },\n                { x: moment(\"2016-12-29T15:14:29.909Z\", format), y: 15 },\n                { x: moment(\"2016-12-31T15:14:29.909Z\", format), y: 60 },\n                { x: moment(\"2017-01-03T15:14:29.909Z\", format), y: 35 },\n            ],\n        },\n        {\n            id: \"series-2\",\n            name: \"Series 2\",\n            data: [\n                { x: moment(\"2016-12-25T15:14:29.909Z\", format), y: 60 },\n                { x: moment(\"2016-12-27T15:14:29.909Z\", format), y: 40 },\n                { x: moment(\"2016-12-29T15:14:29.909Z\", format), y: 70 },\n                { x: moment(\"2016-12-31T15:14:29.909Z\", format), y: 45 },\n                { x: moment(\"2017-01-03T15:14:29.909Z\", format), y: 90 },\n            ],\n        },\n    ];\n}\n","import { ChangeDetectorRef, Component, OnDestroy, OnInit } from \"@angular/core\";\nimport {\n    Chart,\n    ChartAssist,\n    IChartEvent,\n    IChartSeries,\n    ILineAccessors,\n    IXYGridOpacityEventPayload,\n    LineAccessors,\n    LinearScale,\n    LineRenderer,\n    TimeScale, XYGrid, XY_GRID_AXES_OPACITY_EVENT\n} from \"@nova-ui/charts\";\nimport moment from \"moment/moment\";\nimport { Subject } from \"rxjs\";\n\n@Component({\n    selector: \"line-chart-with-2y-axes-example\",\n    templateUrl: \"./line-chart-with-2y-axes-example.component.html\",\n})\nexport class LineChartWith2YAxesExampleComponent implements OnInit, OnDestroy {\n    public chart: Chart;\n    public chartAssist: ChartAssist;\n\n    public yLeftScale: LinearScale;\n    public yRightScale: LinearScale;\n    public axesOpacity: IXYGridOpacityEventPayload;\n\n    private destroy$ = new Subject();\n\n    public get leftAxisOpacity() {\n        return this.axesOpacity?.[this.yLeftScale.id] ?? 1;\n    }\n\n    public get rightAxisOpacity() {\n        return this.axesOpacity?.[this.yRightScale.id] ?? 1;\n    }\n\n    constructor(public changeDetector: ChangeDetectorRef) {\n    }\n\n    public ngOnInit() {\n        const xScale = new TimeScale();\n        this.yLeftScale = new LinearScale();\n        this.yLeftScale.formatters.tick = (value: Number) => `${value}%`;\n\n        this.yRightScale = new LinearScale();\n        this.yRightScale.formatters.tick = (value: Number) => `${value}G`;\n\n        const xyGrid = new XYGrid();\n\n        // Set the grid's left and right scale id's using the id's of the corresponding scales\n        xyGrid.leftScaleId = this.yLeftScale.id;\n        xyGrid.rightScaleId = this.yRightScale.id;\n\n        // Set the grid's 'axis.left.fit' property to 'true' to accommodate the extra label width required by the\n        // left scale's tick formatter output (Note: 'axis.right.fit' is true by default.).\n        xyGrid.config().axis.left.fit = true;\n\n        this.chart = new Chart(xyGrid);\n        this.chartAssist = new ChartAssist(this.chart);\n\n        const accessors = new LineAccessors();\n        const renderer = new LineRenderer();\n        const seriesSet: IChartSeries<ILineAccessors>[] = getData().map(d => ({\n            ...d,\n            accessors,\n            renderer,\n            scales: {\n                x: xScale,\n                // In this case, we're using the right-hand scale only for \"series-3\"\n                y: d.id === \"series-3\" ? this.yRightScale : this.yLeftScale,\n            },\n            unitLabel: d.id === \"series-3\" ? \"GB\" : \"%\",\n        }));\n\n        // chart assist needs to be used to update data\n        this.chartAssist.update(seriesSet);\n\n        //\n        this.chart.eventBus.getStream(XY_GRID_AXES_OPACITY_EVENT).subscribe((event: IChartEvent<IXYGridOpacityEventPayload>) => {\n            this.axesOpacity = event.data;\n            this.changeDetector.markForCheck();\n        });\n    }\n\n    public ngOnDestroy(): void {\n        this.destroy$.next();\n        this.destroy$.complete();\n    }\n}\n\n/* Chart data */\nfunction getData() {\n    const format = \"YYYY-MM-DDTHH:mm:ssZ\";\n\n    return [\n        {\n            id: \"series-1\",\n            name: \"Average CPU Load\",\n            data: [\n                { x: moment(\"2016-12-25T15:14:29.909Z\", format), y: 30 },\n                { x: moment(\"2016-12-27T15:14:29.909Z\", format), y: 95 },\n                { x: moment(\"2016-12-29T15:14:29.909Z\", format), y: 15 },\n                { x: moment(\"2016-12-31T15:14:29.909Z\", format), y: 60 },\n                { x: moment(\"2017-01-03T15:14:29.909Z\", format), y: 35 },\n            ],\n        },\n        {\n            id: \"series-2\",\n            name: \"Packet Loss\",\n            data: [\n                { x: moment(\"2016-12-25T15:14:29.909Z\", format), y: 60 },\n                { x: moment(\"2016-12-27T15:14:29.909Z\", format), y: 40 },\n                { x: moment(\"2016-12-29T15:14:29.909Z\", format), y: 70 },\n                { x: moment(\"2016-12-31T15:14:29.909Z\", format), y: 45 },\n                { x: moment(\"2017-01-03T15:14:29.909Z\", format), y: 90 },\n            ],\n        },\n        {\n            id: \"series-3\",\n            name: \"Average Memory Used\",\n            data: [\n                { x: moment(\"2016-12-25T15:14:29.909Z\", format), y: 30 },\n                { x: moment(\"2016-12-27T15:14:29.909Z\", format), y: 10 },\n                { x: moment(\"2016-12-29T15:14:29.909Z\", format), y: 75 },\n                { x: moment(\"2016-12-31T15:14:29.909Z\", format), y: 22 },\n                { x: moment(\"2017-01-03T15:14:29.909Z\", format), y: 90 },\n            ],\n        },\n    ];\n}\n","import { Component } from \"@angular/core\";\n\n@Component({\n    templateUrl: \"./line-chart-visual-test.component.html\",\n})\nexport class LineChartVisualTestComponent { }\n","import { NgModule } from \"@angular/core\";\nimport { FormsModule } from \"@angular/forms\";\nimport { RouterModule, Routes } from \"@angular/router\";\nimport { DEMO_PATH_TOKEN, NuiDocsModule, NuiIconModule, NuiMessageModule, SrlcStage } from \"@nova-ui/bits\";\nimport { NuiChartsModule } from \"@nova-ui/charts\";\n\nimport { DemoCommonModule } from \"../../common/demo-common.module\";\n\nimport { ChartDocsLineComponent } from \"./chart-docs-line.component\";\nimport { LineChartBasicExampleComponent } from \"./line-chart-basic/line-chart-basic.example.component\";\nimport { LineChartInterruptedBasicExampleComponent } from \"./line-chart-interrupted-basic/line-chart-interrupted-basic-example.component\";\nimport { LineChartInterruptedCalculatedExampleComponent } from \"./line-chart-interrupted-calculated/line-chart-interrupted-calculated-example.component\";\n// tslint:disable-next-line: max-line-length\nimport { LineChartInterruptedPathTerminusExampleComponent } from \"./line-chart-interrupted-path-terminus/line-chart-interrupted-path-terminus-example.component\";\nimport { LineChartTestComponent } from \"./line-chart-test/line-chart-test.component\";\nimport { LineChartVisualTestComponent } from \"./line-chart-visual-test/line-chart-visual-test.component\";\nimport { LineChartWith2YAxesExampleComponent } from \"./line-chart-with-2y-axes/line-chart-with-2y-axes-example.component\";\nimport { LineChartWithAxisLabelsExampleComponent } from \"./line-chart-with-axis-labels/line-chart-with-axis-labels.example.component\";\nimport { LineChartWithLegendExampleComponent } from \"./line-chart-with-legend/line-chart-with-legend.example.component\";\nimport { LineChartWithRichTileLegendExampleComponent } from \"./line-chart-with-rich-tile-legend/line-chart-with-rich-tile-legend.example.component\";\n\nconst exampleRoutes: Routes = [\n    {\n        path: \"\",\n        component: ChartDocsLineComponent,\n        data: {\n            \"srlc\": {\n                \"stage\": SrlcStage.beta,\n            },\n            showThemeSwitcher: true,\n        },\n    },\n    {\n        path: \"axis-labels\",\n        component: LineChartWithAxisLabelsExampleComponent,\n    },\n    {\n        path: \"two-y-axes\",\n        component: LineChartWith2YAxesExampleComponent,\n        data: {\n            \"srlc\": {\n                \"hideIndicator\": true,\n            },\n        },\n    },\n    {\n        path: \"basic\",\n        component: LineChartBasicExampleComponent,\n        data: {\n            \"srlc\": {\n                \"hideIndicator\": true,\n            },\n        },\n    },\n    {\n        path: \"interrupted\",\n        component: LineChartInterruptedBasicExampleComponent,\n        data: {\n            \"srlc\": {\n                \"hideIndicator\": true,\n            },\n        },\n    },\n    {\n        path: \"interrupted-calculated\",\n        component: LineChartInterruptedCalculatedExampleComponent,\n        data: {\n            \"srlc\": {\n                \"hideIndicator\": true,\n            },\n        },\n    },\n    {\n        path: \"interrupted-path-terminus\",\n        component: LineChartInterruptedPathTerminusExampleComponent,\n        data: {\n            \"srlc\": {\n                \"hideIndicator\": true,\n            },\n        },\n    },\n    {\n        path: \"test\",\n        component: LineChartTestComponent,\n        data: {\n            \"srlc\": {\n                \"hideIndicator\": true,\n            },\n        },\n    },\n    {\n        path: \"visual-test\",\n        component: LineChartVisualTestComponent,\n        data: {\n            \"srlc\": {\n                \"hideIndicator\": true,\n            },\n        },\n    },\n];\n\n@NgModule({\n    declarations: [\n        ChartDocsLineComponent,\n        LineChartWithAxisLabelsExampleComponent,\n        LineChartBasicExampleComponent,\n        LineChartTestComponent,\n        LineChartVisualTestComponent,\n        LineChartWithLegendExampleComponent,\n        LineChartWithRichTileLegendExampleComponent,\n        LineChartWith2YAxesExampleComponent,\n        LineChartInterruptedBasicExampleComponent,\n        LineChartInterruptedPathTerminusExampleComponent,\n        LineChartInterruptedCalculatedExampleComponent,\n    ],\n    imports: [\n        DemoCommonModule,\n        FormsModule,\n        NuiChartsModule,\n        NuiIconModule,\n        NuiDocsModule,\n        NuiMessageModule,\n        RouterModule.forChild(exampleRoutes),\n    ],\n    providers: [\n        { provide: DEMO_PATH_TOKEN, useFactory: () => (<any>require).context(`!!raw-loader!./`, true, /.*\\.(ts|html|less)$/) },\n    ],\n})\nexport class ChartDocsLineModule {\n}\n","import { Component, OnInit } from \"@angular/core\";\nimport {\n    Chart, ChartAssist, IChartSeries, ILineAccessors, IXYScales, LineAccessors, LinearScale, LineRenderer, LineSelectSeriesInteractionStrategy, TimeScale,\n    XYGrid\n} from \"@nova-ui/charts\";\nimport moment from \"moment/moment\";\n\n@Component({\n    selector: \"nui-line-chart-with-rich-tile-legend-example\",\n    templateUrl: \"./line-chart-with-rich-tile-legend.example.component.html\",\n})\nexport class LineChartWithRichTileLegendExampleComponent implements OnInit {\n    public chart = new Chart(new XYGrid());\n    public chartAssist: ChartAssist = new ChartAssist(this.chart);\n\n    public ngOnInit() {\n        // providing chartAssist colors and markers to LineAccessors will share them with the line chart\n        const accessors = new LineAccessors(this.chartAssist.palette.standardColors, this.chartAssist.markers);\n        const renderer = new LineRenderer({\n            // for series interaction and ability to handle click configure renderer with interactionStrategy\n            interactionStrategy: new LineSelectSeriesInteractionStrategy(),\n        });\n        const scales: IXYScales = {\n            x: new TimeScale(),\n            y: new LinearScale(),\n        };\n\n        const seriesSet: IChartSeries<ILineAccessors>[] = getData().map(d => ({\n            ...d,\n            scales,\n            renderer,\n            accessors,\n        }));\n\n        // chart assist needs to be used to update data\n        this.chartAssist.update(seriesSet);\n    }\n}\n\n/* Chart data */\nfunction getData() {\n    const format = \"YYYY-MM-DDTHH:mm:ssZ\";\n\n    return [\n        {\n            id: \"series-1\",\n            name: \"Series 1\",\n            data: [\n                { x: moment(\"2016-12-25T15:14:29.909Z\", format), y: 30 },\n                { x: moment(\"2016-12-27T15:14:29.909Z\", format), y: 95 },\n                { x: moment(\"2016-12-29T15:14:29.909Z\", format), y: 15 },\n                { x: moment(\"2016-12-31T15:14:29.909Z\", format), y: 60 },\n                { x: moment(\"2017-01-03T15:14:29.909Z\", format), y: 35 },\n            ],\n        },\n        {\n            id: \"series-2\",\n            name: \"Series 2\",\n            data: [\n                { x: moment(\"2016-12-25T15:14:29.909Z\", format), y: 60 },\n                { x: moment(\"2016-12-27T15:14:29.909Z\", format), y: 40 },\n                { x: moment(\"2016-12-29T15:14:29.909Z\", format), y: 70 },\n                { x: moment(\"2016-12-31T15:14:29.909Z\", format), y: 45 },\n                { x: moment(\"2017-01-03T15:14:29.909Z\", format), y: 90 },\n            ],\n        },\n    ];\n}\n","import { Component, OnInit } from \"@angular/core\";\nimport {\n    Chart,\n    ChartAssist,\n    IChartAssistSeries,\n    IChartSeries,\n    ILineAccessors,\n    IXYScales,\n    LineAccessors,\n    LinearScale,\n    LineRenderer,\n    MissingDataLineRendererConfig,\n    TimeScale,\n    XYGrid\n} from \"@nova-ui/charts\";\nimport moment from \"moment/moment\";\n\n@Component({\n    selector: \"line-chart-interrupted-path-terminus-example\",\n    templateUrl: \"./line-chart-interrupted-path-terminus-example.component.html\",\n})\nexport class LineChartInterruptedPathTerminusExampleComponent implements OnInit {\n    // XYGrid is used for rendering axes as well as other grid elements\n    public chart = new Chart(new XYGrid());\n    public chartAssist: ChartAssist = new ChartAssist(this.chart);\n\n    public ngOnInit() {\n        // In case of a line chart, the scale definitions are flexible.\n        // This example demonstrates a scenario with time on the X scale and a numeric value on the Y scale.\n        const scales: IXYScales = {\n            x: new TimeScale(),\n            y: new LinearScale(),\n        };\n\n        const incomingSeries = getData();\n\n        // Here we assemble the complete chart series.\n        const seriesSet: IChartAssistSeries<ILineAccessors>[] = [];\n\n        // The line renderer will make the chart look like a line chart.\n        const renderer = new LineRenderer();\n        // Line accessors let the renderer know how to access x and y domain data respectively from a chart's input data set(s).\n        const accessors = new LineAccessors(this.chartAssist.palette.standardColors, this.chartAssist.markers);\n\n        // Renderer for the missing dataSeries\n        const rendererMissing = new LineRenderer(new MissingDataLineRendererConfig());\n        const accessorsMissing = new LineAccessors();\n        // we need to store the original value of the `defined` accessor\n        const origDefinedAccessor = accessorsMissing.data.defined;\n        // we're calling the original accessor implementation, but inverting it's logic\n        accessorsMissing.data.defined = (d, i, data, dataSeries) =>\n            !origDefinedAccessor?.(d, i, data, dataSeries) ?? true;\n\n        for (const s of incomingSeries) {\n            const cs: IChartSeries<ILineAccessors> = {\n                ...s,\n                accessors,\n                renderer,\n                scales,\n            };\n            seriesSet.push(cs);\n\n            // this series will be used to visualize the missing data points\n            seriesSet.push({\n                // this naming convention will connect these two series and their interaction will be synchronized\n                id: s.id + \"__missing\",\n                data: s.data,\n                accessors: accessorsMissing,\n                renderer: rendererMissing,\n                scales,\n                showInLegend: false, // we don't want to show this in the legend\n            });\n        }\n\n        // Finally, pass the series set to the chart's update method\n        this.chartAssist.update(seriesSet);\n    }\n}\n\n/* Chart data */\nfunction getData() {\n    const format = \"YYYY-MM-DDTHH:mm:ssZ\";\n\n    return [\n        {\n            id: \"series-1\",\n            name: \"Series 1\",\n            data: [\n                { x: moment(\"2016-12-25T15:14:29.909Z\", format).toDate(), y: 30, defined: false },\n                { x: moment(\"2016-12-27T15:14:29.909Z\", format).toDate(), y: 95, defined: false },\n                { x: moment(\"2016-12-27T15:14:29.909Z\", format).toDate(), y: 95 },\n                { x: moment(\"2016-12-28T15:14:29.909Z\", format).toDate(), y: 35 },\n                { x: moment(\"2016-12-31T15:14:29.909Z\", format).toDate(), y: 60 },\n                { x: moment(\"2017-01-03T15:14:29.909Z\", format).toDate(), y: 35 },\n                { x: moment(\"2017-01-04T15:14:29.909Z\", format).toDate(), y: 20 },\n                { x: moment(\"2017-01-04T15:14:29.909Z\", format).toDate(), y: 20, defined: false },\n                { x: moment(\"2017-01-05T15:14:29.909Z\", format).toDate(), y: 35, defined: false },\n            ],\n        },\n    ];\n}\n","import { Component, OnInit } from \"@angular/core\";\nimport {\n    Chart, ChartAssist, IChartSeries, ILineAccessors, IXYScales, LineAccessors, LinearScale, LineRenderer, TimeScale, XYGrid\n} from \"@nova-ui/charts\";\nimport moment from \"moment/moment\";\n\n@Component({\n    selector: \"nui-line-chart-with-legend-example\",\n    templateUrl: \"./line-chart-with-legend.example.component.html\",\n})\nexport class LineChartWithLegendExampleComponent implements OnInit {\n    public chart = new Chart(new XYGrid());\n    public chartAssist: ChartAssist = new ChartAssist(this.chart);\n\n    public ngOnInit() {\n        // providing chartAssist colors and markers to LineAccessors will share them with the line chart\n        const accessors = new LineAccessors(this.chartAssist.palette.standardColors, this.chartAssist.markers);\n        const renderer = new LineRenderer();\n        const scales: IXYScales = {\n            x: new TimeScale(),\n            y: new LinearScale(),\n        };\n\n        const seriesSet: IChartSeries<ILineAccessors>[] = getData().map(d => ({\n            ...d,\n            scales,\n            renderer,\n            accessors,\n        }));\n\n        // chart assist needs to be used to update data\n        this.chartAssist.update(seriesSet);\n    }\n}\n\n/* Chart data */\nfunction getData() {\n    const format = \"YYYY-MM-DDTHH:mm:ssZ\";\n\n    return [\n        {\n            id: \"series-1\",\n            name: \"Series 1\",\n            data: [\n                { x: moment(\"2016-12-25T15:14:29.909Z\", format), y: 30 },\n                { x: moment(\"2016-12-27T15:14:29.909Z\", format), y: 95 },\n                { x: moment(\"2016-12-29T15:14:29.909Z\", format), y: 15 },\n                { x: moment(\"2016-12-31T15:14:29.909Z\", format), y: 60 },\n                { x: moment(\"2017-01-03T15:14:29.909Z\", format), y: 35 },\n            ],\n        },\n        {\n            id: \"series-2\",\n            name: \"Series 2\",\n            data: [\n                { x: moment(\"2016-12-25T15:14:29.909Z\", format), y: 60 },\n                { x: moment(\"2016-12-27T15:14:29.909Z\", format), y: 40 },\n                { x: moment(\"2016-12-29T15:14:29.909Z\", format), y: 70 },\n                { x: moment(\"2016-12-31T15:14:29.909Z\", format), y: 45 },\n                { x: moment(\"2017-01-03T15:14:29.909Z\", format), y: 90 },\n            ],\n        },\n    ];\n}\n","import { Component, OnInit } from \"@angular/core\";\nimport {\n    Chart, IChartSeries, ILineAccessors, IXYScales, LineAccessors, LinearScale, LineRenderer, SequentialColorProvider, TimeScale, XYGrid, XYGridConfig\n} from \"@nova-ui/charts\";\nimport moment from \"moment/moment\";\n\ninterface ChartDatum {\n    x: moment.Moment;\n    y: number;\n}\n\n@Component({\n    selector: \"nui-line-chart-test\",\n    templateUrl: \"./line-chart-test.component.html\",\n})\nexport class LineChartTestComponent implements OnInit {\n\n    public input: string;\n    public chart: Chart;\n    private seriesSet: IChartSeries<ILineAccessors>[];\n    private initialInput = [[30, 95, 15, 60, 35], [60, 40, 70, 45, 90]];\n\n    public ngOnInit() {\n        this.input = JSON.stringify(this.initialInput);\n        this.configureChart();\n        this.buildSeriesSet();\n\n        this.update(this.initialInput);\n    }\n\n    public inputChanged(value: string) {\n        this.update(JSON.parse(value));\n    }\n\n    private update(input: number[][]) {\n        this.seriesSet.forEach((s: IChartSeries<ILineAccessors>, i: number) => {\n            const seriesInput = input[i] || [];\n            s.data.forEach((datum: ChartDatum, j: number) => {\n                const newValue = seriesInput[j] || 0;\n                datum.y = newValue;\n            });\n        });\n\n        this.chart.update(this.seriesSet);\n    }\n\n    private configureChart() {\n        const gridConfig = new XYGridConfig();\n        gridConfig.dimension.autoHeight = false;\n        gridConfig.dimension.autoWidth = false;\n        gridConfig.dimension.height(110);\n        gridConfig.dimension.width(400);\n        this.chart = new Chart(new XYGrid(gridConfig));\n    }\n\n    private buildSeriesSet() {\n        const colors = [\"red\", \"orange\", \"yellow\", \"green\", \"blue\", \"purple\", \"black\", \"white\"];\n        const dates = [\"2016-12-25\", \"2016-12-26\", \"2016-12-27\", \"2016-12-28\", \"2016-12-29\"];\n        const format = \"YYYY-MM-DD\";\n        const renderer = new LineRenderer();\n        const accessors = new LineAccessors(new SequentialColorProvider(colors));\n        const yScale = new LinearScale();\n        yScale.fixDomain([0, 100]);\n        const scales: IXYScales = {\n            x: new TimeScale(),\n            y: yScale,\n        };\n\n        this.seriesSet = [\n            {\n                id: \"1\",\n                name: \"Series 1\",\n                data: dates.map((d: string) => ({ x: moment(d, format), y: 0 })),\n            },\n            {\n                id: \"2\",\n                name: \"Series 2\",\n                data: dates.map((d: string) => ({ x: moment(d, format), y: 0 })),\n            },\n        ].map(s => ({ ...s, scales, renderer, accessors }));\n    }\n}\n","import { Component, OnInit } from \"@angular/core\";\nimport { Chart, IChartSeries, ILineAccessors, IXYScales, LineAccessors, LinearScale, LineRenderer, TimeScale, XYGrid } from \"@nova-ui/charts\";\nimport moment from \"moment/moment\";\n\n@Component({\n    selector: \"nui-line-chart-basic-example\",\n    templateUrl: \"./line-chart-basic.example.component.html\",\n})\nexport class LineChartBasicExampleComponent implements OnInit {\n    // XYGrid is used for rendering axes and other grid elements\n    public chart = new Chart(new XYGrid());\n\n    public ngOnInit() {\n        // Line accessors let the renderer know how to access x and y domain data respectively from a chart's input data set(s).\n        const accessors = new LineAccessors();\n\n        // The line renderer will make the chart look like a line chart.\n        const renderer = new LineRenderer();\n\n        // In case of a line chart, the scale definitions are flexible.\n        // This example demonstrates a scenario with time on the X scale and a numeric value on the Y scale.\n        const scales: IXYScales = {\n            x: new TimeScale(),\n            y: new LinearScale(),\n        };\n\n        // Here we assemble the complete chart series.\n        const seriesSet: IChartSeries<ILineAccessors>[] = getData().map(d => ({\n            ...d,\n            accessors,\n            renderer,\n            scales,\n        }));\n\n        // Finally, pass the series set to the chart's update method\n        this.chart.update(seriesSet);\n    }\n}\n\n/* Chart data */\nfunction getData() {\n    const format = \"YYYY-MM-DDTHH:mm:ssZ\";\n\n    return [\n        {\n            id: \"series-1\",\n            name: \"Series 1\",\n            data: [\n                { x: moment(\"2016-12-25T15:14:29.909Z\", format), y: 30 },\n                { x: moment(\"2016-12-27T15:14:29.909Z\", format), y: 95 },\n                { x: moment(\"2016-12-29T15:14:29.909Z\", format), y: 15 },\n                { x: moment(\"2016-12-31T15:14:29.909Z\", format), y: 60 },\n                { x: moment(\"2017-01-03T15:14:29.909Z\", format), y: 35 },\n            ],\n        },\n        {\n            id: \"series-2\",\n            name: \"Series 2\",\n            data: [\n                { x: moment(\"2016-12-25T15:14:29.909Z\", format), y: 60 },\n                { x: moment(\"2016-12-27T15:14:29.909Z\", format), y: 40 },\n                { x: moment(\"2016-12-29T15:14:29.909Z\", format), y: 70 },\n                { x: moment(\"2016-12-31T15:14:29.909Z\", format), y: 45 },\n                { x: moment(\"2017-01-03T15:14:29.909Z\", format), y: 90 },\n            ],\n        },\n    ];\n}\n","import { Component } from \"@angular/core\";\nimport { IEnhancedLineCapConfig, ILineRendererConfig, LineRenderer } from \"@nova-ui/charts\";\n\n@Component({\n    selector: \"nui-chart-docs-line\",\n    templateUrl: \"./chart-docs-line.component.html\",\n})\nexport class ChartDocsLineComponent {\n    getEnhancedLineCapConfigPropKey(key: keyof IEnhancedLineCapConfig): string {\n        return key;\n    }\n\n    getLineRendererConfigPropKey(key: keyof ILineRendererConfig): string {\n        return key;\n    }\n\n    getLineRendererPropKey(key: keyof LineRenderer): string {\n        return key;\n    }\n}\n","var map = {\n\t\"./chart-docs-line.component.html\": \"z/RP\",\n\t\"./chart-docs-line.component.ts\": \"gHhF\",\n\t\"./chart-docs-line.module.ts\": \"FHSh\",\n\t\"./line-chart-basic/line-chart-basic.example.component.html\": \"vEm8\",\n\t\"./line-chart-basic/line-chart-basic.example.component.ts\": \"8a5L\",\n\t\"./line-chart-interrupted-basic/line-chart-interrupted-basic-example.component.html\": \"XZqO\",\n\t\"./line-chart-interrupted-basic/line-chart-interrupted-basic-example.component.ts\": \"X3ST\",\n\t\"./line-chart-interrupted-calculated/line-chart-interrupted-calculated-example.component.html\": \"NmCU\",\n\t\"./line-chart-interrupted-calculated/line-chart-interrupted-calculated-example.component.ts\": \"3dis\",\n\t\"./line-chart-interrupted-path-terminus/line-chart-interrupted-path-terminus-example.component.html\": \"YODk\",\n\t\"./line-chart-interrupted-path-terminus/line-chart-interrupted-path-terminus-example.component.ts\": \"EIZE\",\n\t\"./line-chart-test/line-chart-test.component.html\": \"F/E+\",\n\t\"./line-chart-test/line-chart-test.component.ts\": \"PW6j\",\n\t\"./line-chart-visual-test/line-chart-visual-test.component.html\": \"y8gy\",\n\t\"./line-chart-visual-test/line-chart-visual-test.component.ts\": \"W6rv\",\n\t\"./line-chart-with-2y-axes/line-chart-with-2y-axes-example.component.html\": \"Vd4P\",\n\t\"./line-chart-with-2y-axes/line-chart-with-2y-axes-example.component.ts\": \"TxwX\",\n\t\"./line-chart-with-axis-labels/line-chart-with-axis-labels.example.component.html\": \"5b7l\",\n\t\"./line-chart-with-axis-labels/line-chart-with-axis-labels.example.component.ts\": \"IyFi\",\n\t\"./line-chart-with-legend/line-chart-with-legend.example.component.html\": \"rG87\",\n\t\"./line-chart-with-legend/line-chart-with-legend.example.component.ts\": \"2Waz\",\n\t\"./line-chart-with-rich-tile-legend/line-chart-with-rich-tile-legend.example.component.html\": \"0X5f\",\n\t\"./line-chart-with-rich-tile-legend/line-chart-with-rich-tile-legend.example.component.ts\": \"xW1a\"\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = \"vIrG\";","import { Component, OnInit } from \"@angular/core\";\nimport {\n    Chart,\n    ChartAssist,\n    IChartAssistSeries,\n    IChartSeries,\n    ILineAccessors,\n    IXYScales,\n    LineAccessors,\n    LinearScale,\n    LineRenderer,\n    MissingDataLineRendererConfig,\n    TimeScale,\n    XYGrid\n} from \"@nova-ui/charts\";\nimport moment from \"moment/moment\";\n\n@Component({\n    selector: \"line-chart-interrupted-basic-example\",\n    templateUrl: \"./line-chart-interrupted-basic-example.component.html\",\n})\nexport class LineChartInterruptedBasicExampleComponent implements OnInit {\n    // XYGrid is used for rendering axes as well as other grid elements\n    public chart = new Chart(new XYGrid());\n    public chartAssist: ChartAssist = new ChartAssist(this.chart);\n\n    public ngOnInit() {\n        // In case of a line chart, the scale definitions are flexible.\n        // This example demonstrates a scenario with time on the X scale and a numeric value on the Y scale.\n        const scales: IXYScales = {\n            x: new TimeScale(),\n            y: new LinearScale(),\n        };\n\n        const incomingSeries = getData();\n\n        // Here we assemble the complete chart series.\n        const seriesSet: IChartAssistSeries<ILineAccessors>[] = [];\n\n        // The line renderer will make the chart look like a line chart.\n        const renderer = new LineRenderer();\n        // Line accessors let the renderer know how to access x and y domain data respectively from a chart's input data set(s).\n        const accessors = new LineAccessors(this.chartAssist.palette.standardColors, this.chartAssist.markers);\n\n        // Renderer for the missing dataSeries\n        const rendererMissing = new LineRenderer(new MissingDataLineRendererConfig());\n        const accessorsMissing = new LineAccessors();\n        // We need to store the original value of the 'defined' accessor\n        const origDefinedAccessor = accessorsMissing.data.defined;\n        // We're calling the original 'defined' accessor implementation, but inverting it's logic because, from the missing data\n        // series point of view, the undefined data are actually visualized as defined.\n        accessorsMissing.data.defined = (d, i, data, dataSeries) =>\n            !origDefinedAccessor?.(d, i, data, dataSeries) ?? true;\n\n        for (const s of incomingSeries) {\n            // The first data series is for rendering the valid data\n            const cs: IChartSeries<ILineAccessors> = {\n                ...s,\n                accessors,\n                renderer,\n                scales,\n            };\n            seriesSet.push(cs);\n\n            // This series will be used to visualize the missing data points\n            seriesSet.push({\n                // This naming convention will connect these two series and their interaction will be synchronized\n                id: s.id + \"__missing\",\n                data: s.data,\n                accessors: accessorsMissing,\n                renderer: rendererMissing,\n                scales,\n                showInLegend: false, // We don't want to show this in the legend\n            });\n        }\n\n        // Finally, pass the series set to the chart's update method\n        this.chartAssist.update(seriesSet);\n    }\n}\n\n/* Chart data */\nfunction getData() {\n    const format = \"YYYY-MM-DDTHH:mm:ssZ\";\n\n    return [\n        {\n            id: \"series-1\",\n            name: \"Series 1\",\n            data: [\n                { x: moment(\"2016-12-25T15:14:29.909Z\", format).toDate(), y: 30 },\n                { x: moment(\"2016-12-27T15:14:29.909Z\", format).toDate(), y: 95 },\n\n                // missing data segment\n                { x: moment(\"2016-12-27T15:14:29.909Z\", format).toDate(), y: 95, defined: false },\n                { x: moment(\"2016-12-29T15:14:29.909Z\", format).toDate(), y: 30, defined: false  },\n\n                // single defined data point surrounded by missing data segments\n                { x: moment(\"2016-12-29T15:14:29.909Z\", format).toDate(), y: 30 },\n\n                // missing data segment\n                { x: moment(\"2016-12-29T15:14:29.909Z\", format).toDate(), y: 30, defined: false  },\n                { x: moment(\"2016-12-31T15:14:29.909Z\", format).toDate(), y: 60, defined: false },\n\n                { x: moment(\"2016-12-31T15:14:29.909Z\", format).toDate(), y: 60 },\n                { x: moment(\"2017-01-03T15:14:29.909Z\", format).toDate(), y: 35 },\n\n                // missing data segment\n                { x: moment(\"2017-01-03T15:14:29.909Z\", format).toDate(), y: 35, defined: false },\n                { x: moment(\"2017-01-04T15:14:29.909Z\", format).toDate(), y: 20, defined: false },\n\n                { x: moment(\"2017-01-04T15:14:29.909Z\", format).toDate(), y: 20 },\n                { x: moment(\"2017-01-05T15:14:29.909Z\", format).toDate(), y: 35 },\n            ],\n        },\n        {\n            id: \"series-2\",\n            name: \"Series 2\",\n            data: [\n                { x: moment(\"2016-12-25T15:14:29.909Z\", format).toDate(), y: 60 },\n                { x: moment(\"2016-12-27T15:14:29.909Z\", format).toDate(), y: 40 },\n                { x: moment(\"2016-12-29T15:14:29.909Z\", format).toDate(), y: 70 },\n                { x: moment(\"2016-12-31T15:14:29.909Z\", format).toDate(), y: 45 },\n                { x: moment(\"2017-01-03T15:14:29.909Z\", format).toDate(), y: 90 },\n            ],\n        },\n    ];\n}\n"]}