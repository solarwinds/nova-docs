{"version":3,"sources":["webpack:///examples/components/demo/chart-types/area/test/area-chart-test.component.ts","webpack:///examples/components/demo/chart-types/area/area-chart-basic/area-chart-basic-example.component.ts","webpack:///examples/components/demo/chart-types/area/area-chart-stack/area-chart-stack-example.component.ts","webpack:///examples/components/demo/chart-types/area/area-chart-vertical/area-chart-vertical-example.component.ts","webpack:///node_modules/raw-loader/dist/cjs.js .*\\.(ts|html|less)$?5b63","webpack:///examples/components/demo/chart-types/area/area-chart-stack-percentage/area-chart-stack-percentage-example.component.ts","webpack:///examples/components/demo/chart-types/area/area-chart-vertical/area-chart-vertical-example.component.less?2b82","webpack:///examples/components/demo/chart-types/area/chart-docs-area.module.ts","webpack:///examples/components/demo/chart-types/area/area-chart-variable-baseline/area-chart-variable-baseline-example.component.ts","webpack:///examples/components/demo/chart-types/area/area-chart-bi-directional/area-chart-bi-directional-example.component.ts","webpack:///examples/components/demo/chart-types/area/chart-docs-area.component.ts"],"names":["AreaChartTestComponent","selector","template","AreaChartBasicExampleComponent","chart","accessors","data","x","d","timeStamp","y0","y1","value","y","absoluteY1","renderer","scales","fixDomain","seriesSet","getData","map","update","format","id","name","AreaChartStackExampleComponent","chartAssist","AreaChartVerticalExampleComponent","gridConfig","interactionPlugins","axis","left","gridTicks","tickSize","bottom","fit","dimension","padding","borders","visible","i","x0","x1","webpackContext","req","webpackContextResolve","__webpack_require__","o","e","Error","code","keys","webpackContextKeys","Object","resolve","module","exports","AreaChartStackPercentageExampleComponent","exampleRoutes","path","component","srlc","stage","beta","showThemeSwitcher","hideIndicator","ChartDocsAreaModule","declarations","imports","forChild","providers","provide","useFactory","AreaChartVariableBaselineExampleComponent","grid","config","start","end","AreaChartBiDirectionalExampleComponent","accessors1","series","marker","markers","get","accessors2","color","formatters","tick","Math","abs","ChartDocsAreaComponent"],"mappings":"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","file":"area-chart-docs-area-module-es5.js","sourcesContent":["import { Component } from \"@angular/core\";\n\n@Component({\n    selector: \"area-chart-test\",\n    templateUrl: \"./area-chart-test.component.html\",\n})\nexport class AreaChartTestComponent {\n\n}\n","import { Component, OnInit } from \"@angular/core\";\nimport { AreaAccessors, areaGrid, AreaRenderer, Chart, IAreaAccessors, IChartSeries, IXYScales, LinearScale, TimeScale } from \"@nova-ui/charts\";\nimport moment from \"moment/moment\";\n\n@Component({\n    selector: \"area-chart-basic-example\",\n    templateUrl: \"./area-chart-basic-example.component.html\",\n})\nexport class AreaChartBasicExampleComponent implements OnInit {\n    public chart: Chart;\n\n    public ngOnInit() {\n        // areaGrid returns an XYGrid configured for displaying an area chart's axes and other grid elements\n        this.chart = new Chart(areaGrid());\n\n        // Area accessors let the renderer know how to access x and y domain data respectively from a chart's input data set(s).\n        const accessors = new AreaAccessors();\n        // 'x' defines access for values in the data that correspond to the horizontal axis\n        accessors.data.x = (d) => d.timeStamp;\n        // 'y0' defines the baseline, in other words, where the area starts\n        accessors.data.y0 = () => 0;\n        // 'y1' defines access to the numeric values we want to visualize, in other words, where the area ends\n        accessors.data.y1 = (d) => d.value;\n        // 'x' and 'y' accessors define the position of the marker. 'x' was already defined, so now we need to define 'y' as well.\n        // Notice that the 'y' is assigned the 'absoluteY1' accessor which takes into account areas that may be stacked below\n        // the current area and retrieves the absolute distance from the baseline to the area's value line.\n        accessors.data.y = accessors.data.absoluteY1;\n\n        // The area renderer will make the chart look like an area chart.\n        const renderer = new AreaRenderer();\n\n        // In case of a area chart, the scale definitions are flexible.\n        // This example demonstrates a scenario with time on the X scale and a numeric value on the Y scale.\n        const scales: IXYScales = {\n            x: new TimeScale(),\n            y: new LinearScale(),\n        };\n\n        // Fixing the domain is optional.\n        scales.y.fixDomain([0, 100]);\n\n        // Here we assemble the complete chart series.\n        const seriesSet: IChartSeries<IAreaAccessors>[] = getData().map(d => ({\n            ...d,\n            accessors,\n            renderer,\n            scales,\n        }));\n\n        // Finally, pass the series set to the chart's update method.\n        this.chart.update(seriesSet);\n    }\n}\n\n/* Chart data */\nfunction getData() {\n    const format = \"YYYY-MM-DDTHH:mm:ssZ\";\n\n    return [\n        {\n            id: \"series-1\",\n            name: \"Series 1\",\n            data: [\n                { timeStamp: moment(\"2016-12-25T11:45:29.909Z\", format), value: 12 },\n                { timeStamp: moment(\"2016-12-25T12:10:29.909Z\", format), value: 65 },\n                { timeStamp: moment(\"2016-12-25T12:50:29.909Z\", format), value: 30 },\n                { timeStamp: moment(\"2016-12-25T13:15:29.909Z\", format), value: 40 },\n                { timeStamp: moment(\"2016-12-25T13:40:29.909Z\", format), value: 60 },\n                { timeStamp: moment(\"2016-12-25T13:55:29.909Z\", format), value: 23 },\n                { timeStamp: moment(\"2016-12-25T14:20:29.909Z\", format), value: 12 },\n                { timeStamp: moment(\"2016-12-25T14:40:29.909Z\", format), value: 70 },\n                { timeStamp: moment(\"2016-12-25T15:00:29.909Z\", format), value: 45 },\n                { timeStamp: moment(\"2016-12-25T15:25:29.909Z\", format), value: 50 },\n                { timeStamp: moment(\"2016-12-25T15:45:29.909Z\", format), value: 75 },\n                { timeStamp: moment(\"2016-12-25T16:10:29.909Z\", format), value: 50 },\n                { timeStamp: moment(\"2016-12-25T16:30:29.909Z\", format), value: 85 },\n                { timeStamp: moment(\"2016-12-25T16:45:29.909Z\", format), value: 55 },\n            ],\n        },\n    ];\n}\n","import { Component, OnInit } from \"@angular/core\";\nimport {\n    AreaAccessors,\n    areaGrid,\n    AreaRenderer,\n    Chart,\n    ChartAssist,\n    IAreaAccessors,\n    IChartSeries,\n    IXYScales,\n    LinearScale,\n    stackedArea,\n    stackedAreaAccessors,\n    TimeScale,\n} from \"@nova-ui/charts\";\nimport moment from \"moment/moment\";\n\n@Component({\n    selector: \"area-chart-stack-example\",\n    templateUrl: \"./area-chart-stack-example.component.html\",\n})\nexport class AreaChartStackExampleComponent implements OnInit {\n    public chart: Chart;\n    public chartAssist: ChartAssist;\n\n    public ngOnInit() {\n        // areaGrid returns an XYGrid configured for displaying an area chart's axes and other grid elements.\n        this.chart = new Chart(areaGrid());\n        // ChartAssist will use the preprocessor to stack the series' numeric values on the same progression domain\n        this.chartAssist = new ChartAssist(this.chart, stackedArea);\n\n        // Stacked Area accessors let the renderer know how to access x and y domain data respectively from a chart's input data set(s).\n        const accessors =  stackedAreaAccessors();\n        // 'y1' defines access to the numeric values we want to visualize.\n        // The items in the data array of this example have a property named 'value',so we'll use that.\n        accessors.data.y1 = (d) => d.value;\n\n        // The area renderer will make the chart look like a area chart.\n        const renderer = new AreaRenderer();\n\n        // In case of a area chart, the scale definitions are flexible.\n        // This example demonstrates a scenario with time on the X scale and a numeric value on the Y scale.\n        const scales: IXYScales = {\n            x: new TimeScale(),\n            y: new LinearScale(),\n        };\n\n        // Here we assemble the complete chart series.\n        const seriesSet: IChartSeries<IAreaAccessors>[] = getData().map(d => ({\n            ...d,\n            accessors,\n            renderer,\n            scales,\n        }));\n\n        // Finally, pass the series set to the chart's update method\n        this.chartAssist.update(seriesSet);\n    }\n}\n\n/* Chart data */\nfunction getData() {\n    const format = \"YYYY-MM-DDTHH:mm:ssZ\";\n\n    return [\n        {\n            id: \"series-1\",\n            name: \"Series 1\",\n            data: [\n                { x: moment(\"2016-12-25T11:45:29.909Z\", format), value: 6 },\n                { x: moment(\"2016-12-25T12:10:29.909Z\", format), value: 33 },\n                { x: moment(\"2016-12-25T12:50:29.909Z\", format), value: 15 },\n                { x: moment(\"2016-12-25T13:15:29.909Z\", format), value: 20 },\n                { x: moment(\"2016-12-25T13:40:29.909Z\", format), value: 30 },\n                { x: moment(\"2016-12-25T13:55:29.909Z\", format), value: 12 },\n                { x: moment(\"2016-12-25T14:20:29.909Z\", format), value: 6 },\n                { x: moment(\"2016-12-25T14:40:29.909Z\", format), value: 35 },\n                { x: moment(\"2016-12-25T15:00:29.909Z\", format), value: 23 },\n                { x: moment(\"2016-12-25T15:25:29.909Z\", format), value: 25 },\n                { x: moment(\"2016-12-25T15:45:29.909Z\", format), value: 38 },\n                { x: moment(\"2016-12-25T16:10:29.909Z\", format), value: 25 },\n                { x: moment(\"2016-12-25T16:30:29.909Z\", format), value: 43 },\n                { x: moment(\"2016-12-25T16:45:29.909Z\", format), value: 28 },\n            ],\n        },\n        {\n            id: \"series-2\",\n            name: \"Series 2\",\n            data: [\n                { x: moment(\"2016-12-25T11:45:29.909Z\", format), value: 12 },\n                { x: moment(\"2016-12-25T12:10:29.909Z\", format), value: 65 },\n                { x: moment(\"2016-12-25T12:50:29.909Z\", format), value: 30 },\n                { x: moment(\"2016-12-25T13:15:29.909Z\", format), value: 40 },\n                { x: moment(\"2016-12-25T13:40:29.909Z\", format), value: 60 },\n                { x: moment(\"2016-12-25T13:55:29.909Z\", format), value: 23 },\n                { x: moment(\"2016-12-25T14:20:29.909Z\", format), value: 12 },\n                { x: moment(\"2016-12-25T14:40:29.909Z\", format), value: 70 },\n                { x: moment(\"2016-12-25T15:00:29.909Z\", format), value: 45 },\n                { x: moment(\"2016-12-25T15:25:29.909Z\", format), value: 50 },\n                { x: moment(\"2016-12-25T15:45:29.909Z\", format), value: 75 },\n                { x: moment(\"2016-12-25T16:10:29.909Z\", format), value: 50 },\n                { x: moment(\"2016-12-25T16:30:29.909Z\", format), value: 85 },\n                { x: moment(\"2016-12-25T16:45:29.909Z\", format), value: 55 },\n            ],\n        },\n    ];\n}\n","import { Component, OnInit } from \"@angular/core\";\nimport {\n    AreaAccessors,\n    AreaRenderer,\n    Chart,\n    IAreaAccessors,\n    IChartSeries,\n    IXYScales,\n    LinearScale,\n    XYGrid,\n    XYGridConfig\n} from \"@nova-ui/charts\";\n\n@Component({\n    selector: \"area-chart-vertical-example\",\n    templateUrl: \"./area-chart-vertical-example.component.html\",\n    styleUrls: [\"./area-chart-vertical-example.component.less\"],\n})\nexport class AreaChartVerticalExampleComponent implements OnInit {\n    public chart: Chart;\n\n    public ngOnInit() {\n        const gridConfig = new XYGridConfig();\n        // Disable interaction because we don't support a horizontal interaction line yet\n        gridConfig.interactionPlugins = false;\n        gridConfig.axis.left.gridTicks = false;\n        gridConfig.axis.left.tickSize = 0;\n        gridConfig.axis.bottom.gridTicks = true;\n        gridConfig.axis.left.fit = true;\n        gridConfig.axis.bottom.fit = true;\n        gridConfig.axis.bottom.tickSize = 0;\n        gridConfig.axis.left.tickSize = 5;\n        gridConfig.dimension.padding.left = 2; // 2 for border\n        gridConfig.borders.left.visible = true;\n        gridConfig.borders.bottom.visible = false;\n\n        this.chart = new Chart(new XYGrid(gridConfig));\n\n        // Area accessors let the renderer know how to access x and y domain data respectively from a chart's input data set(s).\n        const accessors = new AreaAccessors();\n        accessors.data.y = (d, i) => i;\n        accessors.data.x0 = () => 0;\n        accessors.data.x1 = (d) => d.value;\n\n        // The area renderer will make the chart look like an area chart.\n        const renderer = new AreaRenderer();\n\n        // In case of a area chart, the scale definitions are flexible.\n        // This example demonstrates a scenario with time on the X scale and a numeric value on the Y scale.\n        const scales: IXYScales = {\n            x: new LinearScale(),\n            y: new LinearScale(),\n        };\n\n        scales.x.fixDomain([0, 100]);\n\n        // Here we assemble the complete chart series.\n        const seriesSet: IChartSeries<IAreaAccessors>[] = getData().map(d => ({\n            ...d,\n            accessors,\n            renderer,\n            scales,\n        }));\n\n        // Finally, pass the series set to the chart's update method\n        this.chart.update(seriesSet);\n    }\n}\n\n/* Chart data */\nfunction getData() {\n    return [\n        {\n            id: \"series-1\",\n            name: \"Series 1\",\n            data: [\n                { value: 12 },\n                { value: 65 },\n                { value: 30 },\n                { value: 40 },\n                { value: 90 },\n                { value: 23 },\n                { value: 12 },\n            ],\n        },\n    ];\n}\n","var map = {\n\t\"./area-chart-basic/area-chart-basic-example.component.html\": \"piB5\",\n\t\"./area-chart-basic/area-chart-basic-example.component.ts\": \"MjEx\",\n\t\"./area-chart-bi-directional/area-chart-bi-directional-example.component.html\": \"gPTH\",\n\t\"./area-chart-bi-directional/area-chart-bi-directional-example.component.ts\": \"bkcT\",\n\t\"./area-chart-stack-percentage/area-chart-stack-percentage-example.component.html\": \"+NPZ\",\n\t\"./area-chart-stack-percentage/area-chart-stack-percentage-example.component.ts\": \"Mr0e\",\n\t\"./area-chart-stack/area-chart-stack-example.component.html\": \"cOoB\",\n\t\"./area-chart-stack/area-chart-stack-example.component.ts\": \"5qbj\",\n\t\"./area-chart-variable-baseline/area-chart-variable-baseline-example.component.html\": \"2+7X\",\n\t\"./area-chart-variable-baseline/area-chart-variable-baseline-example.component.ts\": \"3OzY\",\n\t\"./area-chart-vertical/area-chart-vertical-example.component.html\": \"gtoS\",\n\t\"./area-chart-vertical/area-chart-vertical-example.component.less\": \"kxlW\",\n\t\"./area-chart-vertical/area-chart-vertical-example.component.ts\": \"ahTr\",\n\t\"./chart-docs-area.component.html\": \"e7Ie\",\n\t\"./chart-docs-area.component.ts\": \"TdCo\",\n\t\"./chart-docs-area.module.ts\": \"VNrK\",\n\t\"./test/area-chart-test.component.html\": \"Hyit\",\n\t\"./test/area-chart-test.component.ts\": \"zWfn\"\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = \"QNbB\";","import { Component, OnInit } from \"@angular/core\";\nimport {\n    AreaAccessors,\n    areaGrid,\n    AreaRenderer,\n    Chart,\n    ChartAssist,\n    IAreaAccessors,\n    IChartSeries,\n    IXYScales,\n    LinearScale,\n    stackedAreaAccessors,\n    stackedPercentageArea,\n    TimeScale,\n} from \"@nova-ui/charts\";\nimport moment from \"moment/moment\";\n\n@Component({\n    selector: \"area-chart-stack-percentage-example\",\n    templateUrl: \"./area-chart-stack-percentage-example.component.html\",\n})\nexport class AreaChartStackPercentageExampleComponent implements OnInit {\n    public chart: Chart;\n    public chartAssist: ChartAssist;\n\n    public ngOnInit() {\n        // areaGrid returns an XYGrid configured for displaying an area chart's axes and other grid elements.\n        this.chart = new Chart(areaGrid());\n        // ChartAssist will use the preprocessor to stack the series' numeric values on the same progression domain.\n        // In this case we use the 'stackedPercentageArea' preprocessor to scale each series area as a percentage of the sum of all corresponding series values.\n        this.chartAssist = new ChartAssist(this.chart, stackedPercentageArea);\n\n        // Stacked Area accessors let the renderer know how to access x and y domain data respectively from a chart's input data set(s).\n        const accessors =  stackedAreaAccessors();\n        // 'y1' defines access to the numeric values we want to visualize.\n        // The items in the data array of this example have a property named 'value',so we'll use that.\n        accessors.data.y1 = (d) => d.value;\n\n        // The area renderer will make the chart look like a area chart.\n        const renderer = new AreaRenderer();\n\n        // In case of a area chart, the scale definitions are flexible.\n        // This example demonstrates a scenario with time on the X scale and a numeric value on the Y scale.\n        const scales: IXYScales = {\n            x: new TimeScale(),\n            y: new LinearScale(),\n        };\n\n        // Here we assemble the complete chart series.\n        const seriesSet: IChartSeries<IAreaAccessors>[] = getData().map(d => ({\n            ...d,\n            accessors,\n            renderer,\n            scales,\n        }));\n\n        // Finally, pass the series set to the chart's update method\n        this.chartAssist.update(seriesSet);\n    }\n}\n\n/* Chart data */\nfunction getData() {\n    const format = \"YYYY-MM-DDTHH:mm:ssZ\";\n\n    return [\n        {\n            id: \"series-1\",\n            name: \"Series 1\",\n            data: [\n                { x: moment(\"2016-12-25T11:45:29.909Z\", format), value: 6 },\n                { x: moment(\"2016-12-25T12:10:29.909Z\", format), value: 33 },\n                { x: moment(\"2016-12-25T12:50:29.909Z\", format), value: 15 },\n                { x: moment(\"2016-12-25T15:00:29.909Z\", format), value: 23 },\n                { x: moment(\"2016-12-25T15:25:29.909Z\", format), value: 25 },\n                { x: moment(\"2016-12-25T15:45:29.909Z\", format), value: 38 },\n                { x: moment(\"2016-12-25T16:10:29.909Z\", format), value: 25 },\n                { x: moment(\"2016-12-25T16:30:29.909Z\", format), value: 43 },\n                { x: moment(\"2016-12-25T16:45:29.909Z\", format), value: 28 },\n            ],\n        },\n        {\n            id: \"series-2\",\n            name: \"Series 2\",\n            data: [\n                { x: moment(\"2016-12-25T11:45:29.909Z\", format), value: 12 },\n                { x: moment(\"2016-12-25T12:10:29.909Z\", format), value: 65 },\n                { x: moment(\"2016-12-25T12:50:29.909Z\", format), value: 30 },\n                { x: moment(\"2016-12-25T13:15:29.909Z\", format), value: 40 },\n                { x: moment(\"2016-12-25T13:40:29.909Z\", format), value: 60 },\n                { x: moment(\"2016-12-25T13:55:29.909Z\", format), value: 23 },\n                { x: moment(\"2016-12-25T14:40:29.909Z\", format), value: 70 },\n                { x: moment(\"2016-12-25T15:00:29.909Z\", format), value: 45 },\n                { x: moment(\"2016-12-25T15:25:29.909Z\", format), value: 50 },\n                { x: moment(\"2016-12-25T15:45:29.909Z\", format), value: 75 },\n                { x: moment(\"2016-12-25T16:10:29.909Z\", format), value: 50 },\n                { x: moment(\"2016-12-25T16:30:29.909Z\", format), value: 85 },\n                { x: moment(\"2016-12-25T16:45:29.909Z\", format), value: 55 },\n            ],\n        },\n        {\n            id: \"series-3\",\n            name: \"Series 3\",\n            data: [\n                { x: moment(\"2016-12-25T11:45:29.909Z\", format), value: 17 },\n                { x: moment(\"2016-12-25T12:10:29.909Z\", format), value: 42 },\n                { x: moment(\"2016-12-25T12:50:29.909Z\", format), value: 12 },\n                { x: moment(\"2016-12-25T13:15:29.909Z\", format), value: 47 },\n                { x: moment(\"2016-12-25T13:40:29.909Z\", format), value: 90 },\n                { x: moment(\"2016-12-25T13:55:29.909Z\", format), value: 21 },\n                { x: moment(\"2016-12-25T14:20:29.909Z\", format), value: 12 },\n                { x: moment(\"2016-12-25T14:40:29.909Z\", format), value: 70 },\n                { x: moment(\"2016-12-25T15:00:29.909Z\", format), value: 454 },\n                { x: moment(\"2016-12-25T15:25:29.909Z\", format), value: 550 },\n                { x: moment(\"2016-12-25T15:45:29.909Z\", format), value: 7 },\n                { x: moment(\"2016-12-25T16:10:29.909Z\", format), value: 5 },\n                { x: moment(\"2016-12-25T16:30:29.909Z\", format), value: 110 },\n                { x: moment(\"2016-12-25T16:45:29.909Z\", format), value: 550 },\n            ],\n        },\n    ];\n}\n","export default \".chart {\\n  height: 275px;\\n  width: 300px;\\n}\\n\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFyZWEtY2hhcnQtdmVydGljYWwtZXhhbXBsZS5jb21wb25lbnQubGVzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUNJLGFBQUE7RUFDQSxZQUFBO0FBQ0oiLCJmaWxlIjoiYXJlYS1jaGFydC12ZXJ0aWNhbC1leGFtcGxlLmNvbXBvbmVudC5sZXNzIiwic291cmNlc0NvbnRlbnQiOlsiLmNoYXJ0IHtcbiAgICBoZWlnaHQ6IDI3NXB4O1xuICAgIHdpZHRoOiAzMDBweDtcbn1cbiJdfQ== */\";","import { NgModule } from \"@angular/core\";\nimport { FormsModule } from \"@angular/forms\";\nimport { RouterModule, Routes } from \"@angular/router\";\nimport { DEMO_PATH_TOKEN, NuiDocsModule, NuiIconModule, NuiMessageModule, SrlcStage } from \"@nova-ui/bits\";\nimport { NuiChartsModule } from \"@nova-ui/charts\";\n\nimport { DemoCommonModule } from \"../../common/demo-common.module\";\n\nimport { AreaChartBasicExampleComponent } from \"./area-chart-basic/area-chart-basic-example.component\";\nimport { AreaChartBiDirectionalExampleComponent } from \"./area-chart-bi-directional/area-chart-bi-directional-example.component\";\nimport { AreaChartStackPercentageExampleComponent } from \"./area-chart-stack-percentage/area-chart-stack-percentage-example.component\";\nimport { AreaChartStackExampleComponent } from \"./area-chart-stack/area-chart-stack-example.component\";\nimport { AreaChartVariableBaselineExampleComponent } from \"./area-chart-variable-baseline/area-chart-variable-baseline-example.component\";\nimport { AreaChartVerticalExampleComponent } from \"./area-chart-vertical/area-chart-vertical-example.component\";\nimport { ChartDocsAreaComponent } from \"./chart-docs-area.component\";\nimport { AreaChartTestComponent } from \"./test/area-chart-test.component\";\n\nconst exampleRoutes: Routes = [\n    {\n        path: \"\",\n        component: ChartDocsAreaComponent,\n        data: {\n            srlc: {\n                stage: SrlcStage.beta,\n            },\n            showThemeSwitcher: true,\n        },\n    },\n    {\n        path: \"basic\",\n        component: AreaChartBasicExampleComponent,\n        data: {\n            srlc: {\n                hideIndicator: true,\n            },\n        },\n    },\n    {\n        path: \"bi-directional\",\n        component: AreaChartBiDirectionalExampleComponent,\n        data: {\n            srlc: {\n                hideIndicator: true,\n            },\n        },\n    },\n    {\n        path: \"variable-baseline\",\n        component: AreaChartVariableBaselineExampleComponent,\n        data: {\n            srlc: {\n                hideIndicator: true,\n            },\n        },\n    },\n    {\n        path: \"vertical\",\n        component: AreaChartVerticalExampleComponent,\n        data: {\n            srlc: {\n                hideIndicator: true,\n            },\n        },\n    },\n    {\n        path: \"test\",\n        component: AreaChartTestComponent,\n        data: {\n            srlc: {\n                hideIndicator: true,\n            },\n        },\n    },\n    {\n        path: \"stacked\",\n        component: AreaChartStackExampleComponent,\n        data: {\n            srlc: {\n                hideIndicator: true,\n            },\n        },\n    },\n];\n\n@NgModule({\n    declarations: [\n        ChartDocsAreaComponent,\n        AreaChartBasicExampleComponent,\n        AreaChartBiDirectionalExampleComponent,\n        AreaChartVariableBaselineExampleComponent,\n        AreaChartVerticalExampleComponent,\n        AreaChartStackExampleComponent,\n        AreaChartStackPercentageExampleComponent,\n        AreaChartTestComponent,\n    ],\n    imports: [\n        DemoCommonModule,\n        FormsModule,\n        NuiChartsModule,\n        NuiIconModule,\n        NuiDocsModule,\n        NuiMessageModule,\n        RouterModule.forChild(exampleRoutes),\n    ],\n    providers: [\n        { provide: DEMO_PATH_TOKEN, useFactory: () => (<any>require).context(`!!raw-loader!./`, true, /.*\\.(ts|html|less)$/) },\n    ],\n})\nexport class ChartDocsAreaModule {\n}\n","import { Component, OnInit } from \"@angular/core\";\nimport { AreaAccessors, areaGrid, AreaRenderer, Chart, IAreaAccessors, IChartSeries, IXYScales, LinearScale, TimeScale } from \"@nova-ui/charts\";\nimport moment from \"moment/moment\";\n\n@Component({\n    selector: \"area-chart-variable-baseline-example\",\n    templateUrl: \"./area-chart-variable-baseline-example.component.html\",\n})\nexport class AreaChartVariableBaselineExampleComponent implements OnInit {\n    public chart: Chart;\n\n    public ngOnInit() {\n        // areaGrid returns an XYGrid configured for displaying an area chart's axes and other grid elements\n        const grid = areaGrid();\n        // set the 'axis.left.fit' property to 'true' to accommodate the extra width required by the negative sign on the left axis labels\n        grid.config().axis.left.fit = true;\n        // pass the configured grid to the chart's constructor\n        this.chart = new Chart(grid);\n\n        // Area accessors let the renderer know how to access x and y domain data respectively from a chart's input data set(s).\n        const accessors = new AreaAccessors();\n        // 'x' defines access for values in the data that correspond to the horizontal axis\n        accessors.data.x = (d) => d.timeStamp;\n        // 'y0' defines access to the baseline values we want to visualize, in other words, where the area starts\n        accessors.data.y0 = (d) => d.start;\n        // 'y1' defines access to the top line values we want to visualize, in other words, where the area ends\n        accessors.data.y1 = (d) => d.end;\n\n        // The area renderer will make the chart look like an area chart.\n        const renderer = new AreaRenderer();\n\n        // In case of a area chart, the scale definitions are flexible.\n        // This example demonstrates a scenario with time on the X scale and a numeric value on the Y scale.\n        const scales: IXYScales = {\n            x: new TimeScale(),\n            y: new LinearScale(),\n        };\n\n        // Fixing the domain is optional.\n        scales.y.fixDomain([-100, 100]);\n\n        // Here we assemble the complete chart series.\n        const seriesSet: IChartSeries<IAreaAccessors>[] = getData().map(d => ({\n            ...d,\n            accessors,\n            renderer,\n            scales,\n        }));\n\n        // Finally, pass the series set to the chart's update method.\n        this.chart.update(seriesSet);\n    }\n}\n\n/* Chart data */\nfunction getData() {\n    const format = \"YYYY-MM-DDTHH:mm:ssZ\";\n\n    return [\n        {\n            id: \"series-1\",\n            name: \"Series 1\",\n            data: [\n                { timeStamp: moment(\"2016-12-25T11:45:29.909Z\", format), start: -58, end: 12 },\n                { timeStamp: moment(\"2016-12-25T12:10:29.909Z\", format), start: -5, end: 65 },\n                { timeStamp: moment(\"2016-12-25T12:50:29.909Z\", format), start: -40, end: 30 },\n                { timeStamp: moment(\"2016-12-25T13:15:29.909Z\", format), start: -30, end: 40 },\n                { timeStamp: moment(\"2016-12-25T13:40:29.909Z\", format), start: -10, end: 60 },\n                { timeStamp: moment(\"2016-12-25T13:55:29.909Z\", format), start: -47, end: 23 },\n                { timeStamp: moment(\"2016-12-25T14:20:29.909Z\", format), start: -58, end: 12 },\n                { timeStamp: moment(\"2016-12-25T14:40:29.909Z\", format), start: 0, end: 70 },\n                { timeStamp: moment(\"2016-12-25T15:00:29.909Z\", format), start: -25, end: 45 },\n                { timeStamp: moment(\"2016-12-25T15:25:29.909Z\", format), start: -20, end: 50 },\n                { timeStamp: moment(\"2016-12-25T15:45:29.909Z\", format), start: 5, end: 75 },\n                { timeStamp: moment(\"2016-12-25T16:10:29.909Z\", format), start: -20, end: 50 },\n                { timeStamp: moment(\"2016-12-25T16:30:29.909Z\", format), start: 15, end: 85 },\n                { timeStamp: moment(\"2016-12-25T16:45:29.909Z\", format), start: -15, end: 55 },\n            ],\n        },\n    ];\n}\n","import { Component, OnInit } from \"@angular/core\";\nimport {\n    AreaAccessors, areaGrid, AreaRenderer, Chart, ChartAssist, IAreaAccessors, IChartSeries, IXYScales, LinearScale, TimeScale\n} from \"@nova-ui/charts\";\nimport moment from \"moment/moment\";\n\n@Component({\n    selector: \"area-chart-bi-directional-example\",\n    templateUrl: \"./area-chart-bi-directional-example.component.html\",\n})\nexport class AreaChartBiDirectionalExampleComponent implements OnInit {\n    public chart: Chart;\n    public chartAssist: ChartAssist;\n\n    public ngOnInit() {\n        // areaGrid returns an XYGrid configured for displaying an area chart's axes and other grid elements.\n        this.chart = new Chart(areaGrid());\n        // ChartAssist helps with synchronizing hover events between the chart and the legend\n        this.chartAssist = new ChartAssist(this.chart);\n\n        // Area accessors let the renderer know how to access x and y domain data respectively from a chart's input data set(s).\n        const accessors1 = new AreaAccessors();\n        // 'x' defines access for values in the data that correspond to the horizontal axis\n        accessors1.data.x = (d) => d.timeStamp;\n        // 'y0' defines the baseline, in other words, where the area starts\n        accessors1.data.y0 = () => 0;\n        // 'y1' defines access to the numeric values we want to visualize, in other words, where the area ends\n        accessors1.data.y1 = (d) => d.value;\n        // 'x' and 'y' accessors define the position of the marker. 'x' was already defined, so now we need to define 'y' as well.\n        // Notice that the 'y' is assigned the 'absoluteY1' accessor which takes into account areas that may be stacked below\n        // the current area and retrieves the absolute distance from the baseline to the area's value line.\n        accessors1.data.y = accessors1.data.absoluteY1;\n        // Even though we're using different accessor instances for each series, we want to use the same marker\n        // accessor so that each series is assigned a different marker shape from the same marker sequence.\n        // Take a look also at the marker assignment for the second accessors instance below.\n        accessors1.series.marker = this.chartAssist.markers.get;\n\n        /**\n         * This second AreaAccessors instance flips the sign of the value so that\n         * the area is displayed below the baseline.\n         */\n        const accessors2 = new AreaAccessors();\n        accessors2.data.x = (d) => d.timeStamp;\n        accessors2.data.y0 = () => 0;\n        // Here's where we flip the sign of the value so that the area is displayed below the baseline\n        accessors2.data.y1 = (d) => -d.value;\n        // Both series use the same color accessor so that the second series will use the second color in the sequence\n        accessors2.series.color = accessors1.series.color;\n        // 'y' defines the position of the marker\n        accessors2.data.y = accessors2.data.absoluteY1;\n        // Even though we're using different accessor instances for each series, we want to use the same marker\n        // accessor so that each series is assigned a different marker shape from the same marker sequence.\n        accessors2.series.marker = this.chartAssist.markers.get;\n\n        // The area renderer will make the chart look like an area chart.\n        const renderer = new AreaRenderer();\n\n        // In case of an area chart, the scale definitions are flexible.\n        // This example demonstrates a scenario with time on the X scale and a numeric value on the Y scale.\n        const scales: IXYScales = {\n            x: new TimeScale(),\n            y: new LinearScale(),\n        };\n\n        /**\n         * This tick formatter will format values on the left axis as positive both above and baseline as\n         * well as in the legend. For legend setup, see 'chartAssist.getHighlightedValue' usage in the\n         * template file.\n         */\n        scales.y.formatters.tick = (value: number) => `${Math.abs(value)}`;\n\n        // Fixing the domain is optional.\n        scales.y.fixDomain([-100, 100]);\n\n        // Here we assemble the complete chart series.\n        const seriesSet: Partial<IChartSeries<IAreaAccessors>>[] = getData().map(d => ({\n            ...d,\n            renderer,\n            scales,\n        }));\n\n        // In this case, each series has its own accessors instance.\n        seriesSet[0].accessors = accessors1;\n        seriesSet[1].accessors = accessors2;\n\n        // Finally, pass the series set to the chart's update method.\n        this.chartAssist.update(seriesSet as IChartSeries<IAreaAccessors>[]);\n    }\n}\n\n/* Chart data */\nfunction getData() {\n    const format = \"YYYY-MM-DDTHH:mm:ssZ\";\n\n    return [\n        {\n            id: \"up\",\n            name: \"Up Speed\",\n            data: [\n                { timeStamp: moment(\"2016-12-25T11:45:29.909Z\", format), value: 6 },\n                { timeStamp: moment(\"2016-12-25T12:10:29.909Z\", format), value: 33 },\n                { timeStamp: moment(\"2016-12-25T12:50:29.909Z\", format), value: 15 },\n                { timeStamp: moment(\"2016-12-25T13:15:29.909Z\", format), value: 20 },\n                { timeStamp: moment(\"2016-12-25T13:40:29.909Z\", format), value: 30 },\n                { timeStamp: moment(\"2016-12-25T13:55:29.909Z\", format), value: 12 },\n                { timeStamp: moment(\"2016-12-25T14:20:29.909Z\", format), value: 6 },\n                { timeStamp: moment(\"2016-12-25T14:40:29.909Z\", format), value: 35 },\n                { timeStamp: moment(\"2016-12-25T15:00:29.909Z\", format), value: 23 },\n                { timeStamp: moment(\"2016-12-25T15:25:29.909Z\", format), value: 25 },\n                { timeStamp: moment(\"2016-12-25T15:45:29.909Z\", format), value: 38 },\n                { timeStamp: moment(\"2016-12-25T16:10:29.909Z\", format), value: 25 },\n                { timeStamp: moment(\"2016-12-25T16:30:29.909Z\", format), value: 43 },\n                { timeStamp: moment(\"2016-12-25T16:45:29.909Z\", format), value: 28 },\n            ],\n        },\n        {\n            id: \"down\",\n            name: \"Dn Speed\",\n            data: [\n                { timeStamp: moment(\"2016-12-25T11:45:29.909Z\", format), value: 12 },\n                { timeStamp: moment(\"2016-12-25T12:10:29.909Z\", format), value: 65 },\n                { timeStamp: moment(\"2016-12-25T12:50:29.909Z\", format), value: 30 },\n                { timeStamp: moment(\"2016-12-25T13:15:29.909Z\", format), value: 40 },\n                { timeStamp: moment(\"2016-12-25T13:40:29.909Z\", format), value: 60 },\n                { timeStamp: moment(\"2016-12-25T13:55:29.909Z\", format), value: 23 },\n                { timeStamp: moment(\"2016-12-25T14:20:29.909Z\", format), value: 12 },\n                { timeStamp: moment(\"2016-12-25T14:40:29.909Z\", format), value: 70 },\n                { timeStamp: moment(\"2016-12-25T15:00:29.909Z\", format), value: 45 },\n                { timeStamp: moment(\"2016-12-25T15:25:29.909Z\", format), value: 50 },\n                { timeStamp: moment(\"2016-12-25T15:45:29.909Z\", format), value: 75 },\n                { timeStamp: moment(\"2016-12-25T16:10:29.909Z\", format), value: 50 },\n                { timeStamp: moment(\"2016-12-25T16:30:29.909Z\", format), value: 85 },\n                { timeStamp: moment(\"2016-12-25T16:45:29.909Z\", format), value: 55 },\n            ],\n        },\n    ];\n}\n","import { Component } from \"@angular/core\";\n\n@Component({\n    selector: \"nui-chart-docs-area\",\n    templateUrl: \"./chart-docs-area.component.html\",\n})\nexport class ChartDocsAreaComponent {\n}\n"]}