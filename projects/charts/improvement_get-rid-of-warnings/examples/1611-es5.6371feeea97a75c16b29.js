!function(){var e,t;function n(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null==n)return;var r,i,a=[],s=!0,o=!1;try{for(n=n.call(e);!(s=(r=n.next()).done)&&(a.push(r.value),!t||a.length!==t);s=!0);}catch(c){o=!0,i=c}finally{try{s||null==n.return||n.return()}finally{if(o)throw i}}return a}(e,t)||function(e,t){if(!e)return;if("string"==typeof e)return r(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return r(e,t)}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function r(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function i(e,t){return t||(t=e.slice(0)),Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(t)}}))}function a(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function s(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function o(e,t,n){return t&&s(e.prototype,t),n&&s(e,n),Object.defineProperty(e,"prototype",{writable:!1}),e}(self.webpackChunk_nova_ui_charts=self.webpackChunk_nova_ui_charts||[]).push([[1611],{13025:function(e,t,n){var r={"./chart-docs-time-frame-bar.component.html":47688,"./chart-docs-time-frame-bar.component.ts":19147,"./chart-docs-time-frame-bar.module.ts":32757,"./time-frame-bar-basic/time-frame-bar-basic.example.component.html":77460,"./time-frame-bar-basic/time-frame-bar-basic.example.component.ts":60883,"./time-frame-bar-test/time-frame-bar-data.service.ts":34988,"./time-frame-bar-test/time-frame-bar-test.component.html":5473,"./time-frame-bar-test/time-frame-bar-test.component.ts":38192,"components/demo/time-frame-bar/chart-docs-time-frame-bar.component.html":47688,"components/demo/time-frame-bar/chart-docs-time-frame-bar.component.ts":19147,"components/demo/time-frame-bar/chart-docs-time-frame-bar.module.ts":32757,"components/demo/time-frame-bar/time-frame-bar-basic/time-frame-bar-basic.example.component.html":77460,"components/demo/time-frame-bar/time-frame-bar-basic/time-frame-bar-basic.example.component.ts":60883,"components/demo/time-frame-bar/time-frame-bar-test/time-frame-bar-data.service.ts":34988,"components/demo/time-frame-bar/time-frame-bar-test/time-frame-bar-test.component.html":5473,"components/demo/time-frame-bar/time-frame-bar-test/time-frame-bar-test.component.ts":38192};function i(e){var t=a(e);return n(t)}function a(e){if(!n.o(r,e)){var t=new Error("Cannot find module '"+e+"'");throw t.code="MODULE_NOT_FOUND",t}return r[e]}i.keys=function(){return Object.keys(r)},i.resolve=a,e.exports=i,i.id=13025},81611:function(r,s,c){"use strict";c.r(s),c.d(s,{ChartDocsTimeFrameBarModule:function(){return O}});var m=c(66266),l=c(84797),u=c(72773),d=c(58490),h=c(33018),p=c(16738),f=c.n(p),v=c(13458),g=c(46743),b=c(38583),y=c(83063),S=c(87373),D=c(73943);function F(e,t){if(1&e){var n=h.EpF();h.TgZ(0,"nui-legend-series",11),h.NdJ("mouseenter",function(){var e=h.CHM(n).$implicit;return h.oxw().chartAssist.emphasizeSeries(e.id)})("isSelectedChange",function(e){var t=h.CHM(n).$implicit;return h.oxw().chartAssist.toggleSeries(t.id,e)}),h.TgZ(1,"nui-rich-legend-tile",12),h._UZ(2,"nui-chart-marker",13),h.qZA(),h.qZA()}if(2&e){var r=t.$implicit,i=h.oxw();h.Q6J("descriptionPrimary",r.name)("seriesRenderState",null==i.chartAssist.renderStatesIndex[r.id]?null:i.chartAssist.renderStatesIndex[r.id].state)("isSelected",!i.chartAssist.isSeriesHidden(r.id)),h.xp6(1),h.Q6J("value",i.chartAssist.getHighlightedValue(r,"y"))("backgroundColor",i.chartAssist.palette.standardColors.get(r.id))("color",i.chartAssist.palette.textColors.get(r.id)),h.xp6(1),h.Q6J("marker",i.chartAssist.markers.get(r.id))("color",i.chartAssist.palette.standardColors.get(r.id))}}var x,A=((x=function(){function e(t,n){a(this,e),this.history=t,this.dataSourceService=n,this.series={"Tex-lab-aus-2621":[18,27,35,33,26,50,36,47,58,66,65,50,40,31,42,62,57,99,75,55,73,69,77,57,61,68,82,81,78,67],"Cz-lab-brn-02":[41,50,56,40,44,35,27,42,38,23,20,13,29,42,84,93,71,60,54,79,64,49,48,59,76,63,52,84,89,80]},this.fromDate=f()("2018-05-01 15:00:00").subtract(5.2,"days"),this.toDate=f()("2019-01-01 15:00:00"),this.chart=new u.kL2(new u.Be5),this.chartAssist=new u.doR(this.chart),this.xScale=new u.FBd("time-scale"),this.yScale=new u.f$s,this.seriesSet=[]}return o(e,[{key:"ngOnInit",value:function(){var e=this,t=new u.qxh(this.chartAssist.palette.standardColors,this.chartAssist.markers),n=new u.Med;this.yScale.domainCalculator=(0,u._OB)([0,100]),this.seriesSet=Object.keys(this.series).map(function(r){return{id:r,name:r,data:T(e.fromDate,e.toDate,e.series[r]),accessors:t,renderer:n,scales:{x:e.xScale,y:e.yScale}}}),this.timeFrame=this.history.save({startDatetime:this.fromDate,endDatetime:this.toDate,selectedPresetId:void 0}),this.chart.addPlugins(new u.Rbc),this.chart.getEventBus().getStream(u.bdF).subscribe(function(t){var n=t.data[e.xScale.id];e.timeFrame=e.history.save({startDatetime:f()(n[0]),endDatetime:f()(n[1]),selectedPresetId:void 0}),e.dataSourceService.applyFilters()}),this.filteringSubscription=this.setUpFiltering(),this.dataSourceService.applyFilters()}},{key:"ngOnDestroy",value:function(){this.filteringSubscription&&this.filteringSubscription.unsubscribe()}},{key:"updateTimeFrame",value:function(e){this.timeFrame=this.history.restart(e),this.dataSourceService.applyFilters()}},{key:"zoomUndo",value:function(){this.timeFrame=this.history.undo(),this.dataSourceService.applyFilters()}},{key:"zoomReset",value:function(e){this.timeFrame=this.history.restart(e),this.dataSourceService.applyFilters()}},{key:"setUpFiltering",value:function(){var e=this;return this.dataSourceService.registerComponent({timeframe:{componentInstance:{getFilters:function(){return{type:"ITimeframe",value:e.timeFrame}}}}}),this.dataSourceService.outputsSubject.subscribe(function(t){e.xScale.fixDomain([t.timeframe.value.startDatetime.toDate(),t.timeframe.value.endDatetime.toDate()]),e.chartAssist.update(e.seriesSet)})}}]),e}()).\u0275fac=function(e){return new(e||x)(h.Y36(l.vpR),h.Y36(l.B3L))},x.\u0275cmp=h.Xpm({type:x,selectors:[["nui-time-frame-bar-example"]],features:[h._Bn([l.B3L,l.vpR])],decls:15,vars:12,consts:function(){return[[3,"timeFrame","historyIndex","minDate","maxDate","timeFrameChange","undo","clear"],["icon","calendar",1,"pr-3"],["timeFrameSelection",""],[1,"nui-chart-layout","p-3"],[1,"axis-label-left","nui-text-small"],$localize(e||(e=i([":\u241fa8a8afdb3773c92f866263dd8ceabcc3d92682fb\u241f8471193138456330657:Average CPU load (%)"]))),[1,"chart"],[1,"d-flex","w-100","h-100",3,"chart"],[1,"legend"],["seriesUnitLabel","%",3,"active","interactive","mouseleave"],[3,"descriptionPrimary","seriesRenderState","isSelected","mouseenter","isSelectedChange",4,"ngFor","ngForOf","ngForTrackBy"],[3,"descriptionPrimary","seriesRenderState","isSelected","mouseenter","isSelectedChange"],[3,"value","backgroundColor","color"],["rightEdge","",3,"marker","color"]]},template:function(e,t){1&e&&(h.TgZ(0,"nui-time-frame-bar",0),h.NdJ("timeFrameChange",function(e){return t.updateTimeFrame(e)})("undo",function(){return t.zoomUndo()})("clear",function(){return t.zoomReset()}),h._UZ(1,"nui-icon",1),h._uU(2),h.ALo(3,"timeFrame"),h.TgZ(4,"nui-quick-picker",2),h._UZ(5,"nui-time-frame-picker"),h.qZA(),h.qZA(),h.TgZ(6,"div",3),h.TgZ(7,"div",4),h.TgZ(8,"strong"),h.SDv(9,5),h.qZA(),h.qZA(),h.TgZ(10,"div",6),h._UZ(11,"nui-chart",7),h.qZA(),h.TgZ(12,"div",8),h.TgZ(13,"nui-legend",9),h.NdJ("mouseleave",function(){return t.chartAssist.resetVisibleSeries()}),h.YNc(14,F,3,8,"nui-legend-series",10),h.qZA(),h.qZA(),h.qZA()),2&e&&(h.Q6J("timeFrame",t.timeFrame)("historyIndex",t.history.index)("minDate",t.fromDate)("maxDate",t.toDate),h.xp6(2),h.hij(" ",h.lcZ(3,10,t.timeFrame)," "),h.xp6(9),h.Q6J("chart",t.chart),h.xp6(2),h.Q6J("active",t.chartAssist.isLegendActive)("interactive",!0),h.xp6(1),h.Q6J("ngForOf",t.chartAssist.legendSeriesSet)("ngForTrackBy",t.chartAssist.seriesTrackByFn))},directives:[l.y0H,l.oJW,l.mtp,l.xlZ,v.x,g.F,b.sg,y.k,S.w,D.s],pipes:[l.aEp],encapsulation:2}),x);function T(e,t,n){var r=n.length;if(!e||!t||0===r)return[];var i=r>1?t.diff(e)/(r-1):0;return n.map(function(t,n){return{x:e.clone().add(f().duration(n*i)),y:t}})}var C=function(){var e=o(function e(){a(this,e)});return e.\u0275fac=function(t){return new(t||e)},e.\u0275cmp=h.Xpm({type:e,selectors:[["nui-chart-docs-time-frame-bar"]],decls:6,vars:0,consts:[["filenamePrefix","time-frame-bar-basic","exampleTitle","Time Frame Bar"]],template:function(e,t){1&e&&(h.TgZ(0,"h1"),h._uU(1,"Time Frame Bar"),h.qZA(),h.TgZ(2,"p"),h._uU(3," This example shows the current way of implementing a chart with zooming capability and a time frame bar. We don't provide components that would encapsulate this logic, so it needs to be implemented from scratch like this. It takes advantage of the filtering session implementation to connect the filtering components on the page.\n"),h.qZA(),h.TgZ(4,"nui-example-wrapper",0),h._UZ(5,"nui-time-frame-bar-example"),h.qZA())},directives:[l.hD2,A],encapsulation:2}),e}(),k=c(25917),I=c(71289),w=function(){return(e=w||(w={}))[e.Poll=5]="Poll",e[e.Hour=60]="Hour",w;var e}(),Z=function(){function e(){a(this,e),this.factors={day:[42,7,63,33,10,16,57,16,88,44,35,85,46,73,29,35,51,52,100,51,40,87,42,90,75,90,70,16,4,43,18,63,28,15,86,81,48,86,91,89,15,89,66,35,65,18,59,75,69,64,55,67,60,76,29,81,87,73,10,19,29,83,16,72,80,43,28,53,38,24,88,81,14,68,80,44,72,56,89,83,6,1,1,11,66,39,42,81,31,48,11,76,41,60,40,15,75,33,90,80,37,40,39,58,69,31,61,80,85,57,38,3,45,36,71,66,36,58,82,70,90,78,33,72,98,36,32,61,44,13,22,90,66,87,55,21,63,70,41,61,19,42,65,79,17,14,85,69,79,77,99,86,5,31,94,2,37,54,79,32,63,83,64,52,59,35,18,45,58,23,58,99,61,60,78,95,63,35,27,93,46,86,51,80,73,6,66,72,96,7,90,94,3,66,1,38,30,11,58,91,84,100,90,70,51,77,56,53,49,42,84,10,76,11,66,41,38,68,24,84,89,72,74,54,29,18,36,13,17,18,82,14,50,10,47,12,1,4,63,59,62,78,83,5,25,8,59,59,28,56,35,33,31,37,5,67,34,93,25,66,69,64,23,69,60,24,26,81,88,66,80,45,91,68,83,8,83,43,96,85,8,47,67,14,64,26,96,45],year:[64,70,41,96,74,38,38,79,77,24,98,78,22,90,7,42,95,76,92,86,13,5,80,6,9,90,40,94,66,12,28,7,76,74,23,79,82,9,9,84,59,92,63,15,25,18,83,35,46,14,22,84,34,17,9,25,34,89,48,80,76,38,60,43,41,88,35,32,62,80,76,64,41,49,23,61,27,56,3,88,37,24,15,88,85,18,41,74,81,13,40,10,39,30,45,21,32,46,54,8,28,19,74,87,36,43,74,15,58,24,98,14,49,96,51,83,4,4,13,72,42,62,26,80,85,46,74,60,14,5,97,16,90,84,52,10,18,26,8,49,71,34,87,32,15,46,23,10,86,7,18,51,31,72,20,43,10,91,74,51,86,89,32,79,94,5,41,16,79,66,84,24,74,78,69,85,46,57,92,92,3,14,5,12,63,1,6,37,85,79,18,88,42,8,25,94,87,7,52,16,35,43,65,63,46,38,98,55,100,14,45,50,49,90,98,47,20,83,84,84,58,79,100,19,75,94,34,5,94,29,96,80,46,33,73,82,58,68,98,100,10,46,96,87,96,5,64,53,5,7,19,65,91,78,59,14,19,12,15,92,8,15,19,99,26,25,45,29,39,1,61,74,88,27,43,1,93,75,91,97,38,39,24,94,29,18,88,56,62,7,88,13,34,21,20,41,90,95,2,17,26,4,44,70,18,65,75,62,18,46,18,73,76,95,2,30,31,77,77,80,23,51,48,42,78,65,78,56,37,46,96,72,49,48,8,45,89,42,87,28,42,53,94,73,57,30,75,53,77,62,9,71,9,48,97,92,91,24,44,83,8,86,41,6,21,45],century:[85,83,87,82,77,65,67,72,75,76,82,87,91,93,94,90,84,89,86,88,86,85,82,84,81,77,77,77,80,97,18,6,25,85,90,25,72,99,61,79,62,7,50,41,40,6,60,65,1,98,90,31,57,74,50,57,68,20,12,16,33,1,32,53,76,57,89,33,48,28,89,35,15,3,33,77,10,1,36,4,36,88,26,66,50,3,66,37,77,70,9,40,20,14,55,96,88,14,9,54]},this.seriesValueFunctions={"Tex-lab-aus-2621":function(e){var t=n(e,3);return t[0]+.1*(t[1]-30)+(t[2]-50)},"Cz-lab-brn-02":function(e){var t=n(e,3),r=t[0],i=t[1],a=t[2];return r+.01*i*(i-50)+20*Math.cos(.02*a*Math.PI)}}}return o(e,[{key:"getChartData",value:function(e,t){for(var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:0,r=this.seriesValueFunctions,i={},a=f().duration(t.diff(e)).asHours()>12?w.Hour:w.Poll,s=0,o=Object.keys(r);s<o.length;s++){var c=o[s];i[c]=this.getData(e,t,r[c],a)}return(0,k.of)(i).pipe((0,I.g)(n))}},{key:"getData",value:function(e,t,n){for(var r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:w.Poll,i=e.minutes()%r,a=e.clone().subtract(i,"minutes").seconds(0),s=r-t.minutes()%r,o=t.clone().add(s,"minutes").seconds(0),c=Math.ceil(f().duration(o.diff(a)).asMinutes()/r),m=[],l=0;l<c;l++){var u=this.factors.day[Math.ceil((60*a.hours()+a.minutes())/5)],d=this.factors.year[a.dayOfYear()],h=this.factors.century[a.year()%100];m.push({x:a.clone(),y:n([h,d,u])}),a.add(r,"minutes")}return m}}]),e}(),M=c(94317);function B(e,t){if(1&e){var n=h.EpF();h.TgZ(0,"nui-legend-series",16),h.NdJ("mouseenter",function(){var e=h.CHM(n).$implicit;return h.oxw().chartAssist.emphasizeSeries(e.id)})("isSelectedChange",function(e){var t=h.CHM(n).$implicit;return h.oxw().chartAssist.toggleSeries(t.id,e)}),h.TgZ(1,"nui-rich-legend-tile",17),h._UZ(2,"nui-chart-marker",18),h.qZA(),h.qZA()}if(2&e){var r=t.$implicit,i=h.oxw();h.Q6J("descriptionPrimary",r.name)("seriesRenderState",null==i.chartAssist.renderStatesIndex[r.id]?null:i.chartAssist.renderStatesIndex[r.id].state)("isSelected",!i.chartAssist.isSeriesHidden(r.id)),h.xp6(1),h.Q6J("value",i.chartAssist.getHighlightedValue(r,"y"))("backgroundColor",i.chartAssist.palette.standardColors.get(r.id))("color",i.chartAssist.palette.textColors.get(r.id)),h.xp6(1),h.Q6J("marker",i.chartAssist.markers.get(r.id))("color",i.chartAssist.palette.standardColors.get(r.id))}}var N=[{path:"",component:C,data:{srlc:{stage:l.We9.beta},showThemeSwitcher:!0}},{path:"example",component:A,data:{srlc:{hideIndicator:!0}}},{path:"test",component:function(){var e=function(){function e(t,n){a(this,e),this.history=t,this.dataSourceService=n,this.fromDate=f()("2018-05-01 15:00:00").subtract(2,"days"),this.toDate=f()("2018-05-01 15:00:00"),this.chart=new u.kL2(new u.Be5),this.chartAssist=new u.doR(this.chart),this.addDelay=!0,this.xScale=new u.FBd("time-scale"),this.yScale=new u.f$s,this.accessors=new u.qxh(this.chartAssist.palette.standardColors,this.chartAssist.markers),this.renderer=new u.Med,this.dataService=new Z}return o(e,[{key:"ngAfterContentInit",value:function(){var e=this;this.yScale.domainCalculator=(0,u._OB)([0,100]),this.chart.addPlugins(new u.Rbc),this.filteringSubscription=this.setUpFiltering(),this.chart.getEventBus().getStream(u.bdF).subscribe(function(t){var n=t.data[e.xScale.id];e.applyFilters(e.history.save({startDatetime:f()(n[0]),endDatetime:f()(n[1]),selectedPresetId:void 0}))}),this.applyFilters(this.history.save({startDatetime:this.fromDate,endDatetime:this.toDate,selectedPresetId:void 0}))}},{key:"ngOnDestroy",value:function(){this.filteringSubscription&&this.filteringSubscription.unsubscribe()}},{key:"updateTimeFrame",value:function(e){this.applyFilters(this.history.restart(e))}},{key:"zoomUndo",value:function(){this.applyFilters(this.history.undo())}},{key:"applyFilters",value:function(e){this.busy=!0,this.timeFrame=e,this.xScale.fixDomain([e.startDatetime.toDate(),e.endDatetime.toDate()]),this.chart.updateDimensions(),this.dataSourceService.applyFilters()}},{key:"setUpFiltering",value:function(){var e=this;return this.dataSourceService.registerComponent({timeframe:{componentInstance:{getFilters:function(){return{type:"ITimeframe",value:e.timeFrame}}}}}),this.dataSourceService.outputsSubject.subscribe(function(t){e.dataService.getChartData(t.timeframe.value.startDatetime,t.timeframe.value.endDatetime,e.addDelay?1e3:0).subscribe(function(t){e.chartAssist.update(Object.keys(t).map(function(n){return{id:n,name:n,data:t[n],accessors:e.accessors,renderer:e.renderer,scales:{x:e.xScale,y:e.yScale}}})),e.busy=!1})})}}]),e}();return e.\u0275fac=function(t){return new(t||e)(h.Y36(l.vpR),h.Y36(l.B3L))},e.\u0275cmp=h.Xpm({type:e,selectors:[["nui-time-frame-bar-test"]],features:[h._Bn([l.B3L,l.vpR])],decls:22,vars:14,consts:function(){return[[1,"nui-time-frame-bar-test"],["nui-busy","",1,"m-5",2,"border","1px solid lightgrey",3,"busy"],[1,"time-frame-bar",2,"display","block","border-bottom","1px solid lightgrey",3,"timeFrame","historyIndex","minDate","maxDate","timeFrameChange","undo","clear"],["icon","calendar",1,"pr-3"],["timeFrameSelection",""],[1,"nui-chart-layout","p-3"],[1,"axis-label-left","nui-text-small"],$localize(t||(t=i([":\u241fa8a8afdb3773c92f866263dd8ceabcc3d92682fb\u241f8471193138456330657:Average CPU load (%)"]))),[1,"chart"],[1,"w-100",3,"chart"],[1,"legend"],["seriesUnitLabel","%",3,"active","interactive","mouseleave"],[3,"descriptionPrimary","seriesRenderState","isSelected","mouseenter","isSelectedChange",4,"ngFor","ngForOf","ngForTrackBy"],[1,"p-5"],["id","delay","name","delay","type","checkbox",3,"checked","change"],["for","delay",1,"pl-2"],[3,"descriptionPrimary","seriesRenderState","isSelected","mouseenter","isSelectedChange"],[3,"value","backgroundColor","color"],["rightEdge","",3,"marker","color"]]},template:function(e,t){1&e&&(h.TgZ(0,"charts-test-harness"),h.TgZ(1,"div",0),h.TgZ(2,"div",1),h.TgZ(3,"nui-time-frame-bar",2),h.NdJ("timeFrameChange",function(e){return t.updateTimeFrame(e)})("undo",function(){return t.zoomUndo()})("clear",function(){return t.updateTimeFrame()}),h._UZ(4,"nui-icon",3),h._uU(5),h.ALo(6,"timeFrame"),h.TgZ(7,"nui-quick-picker",4),h._UZ(8,"nui-time-frame-picker"),h.qZA(),h.qZA(),h.TgZ(9,"div",5),h.TgZ(10,"div",6),h.TgZ(11,"strong"),h.SDv(12,7),h.qZA(),h.qZA(),h.TgZ(13,"div",8),h._UZ(14,"nui-chart",9),h.qZA(),h.TgZ(15,"div",10),h.TgZ(16,"nui-legend",11),h.NdJ("mouseleave",function(){return t.chartAssist.resetVisibleSeries()}),h.YNc(17,B,3,8,"nui-legend-series",12),h.qZA(),h.qZA(),h.qZA(),h.qZA(),h.TgZ(18,"div",13),h.TgZ(19,"input",14),h.NdJ("change",function(){return t.addDelay=!t.addDelay}),h.qZA(),h.TgZ(20,"label",15),h._uU(21,"Add delay to server requests"),h.qZA(),h.qZA(),h.qZA(),h.qZA()),2&e&&(h.xp6(2),h.Q6J("busy",t.busy),h.xp6(1),h.Q6J("timeFrame",t.timeFrame)("historyIndex",t.history.index)("minDate",t.fromDate)("maxDate",t.toDate),h.xp6(2),h.hij(" ",h.lcZ(6,12,t.timeFrame)," "),h.xp6(9),h.Q6J("chart",t.chart),h.xp6(2),h.Q6J("active",t.chartAssist.isLegendActive)("interactive",!0),h.xp6(1),h.Q6J("ngForOf",t.chartAssist.legendSeriesSet)("ngForTrackBy",t.chartAssist.seriesTrackByFn),h.xp6(2),h.Q6J("checked",t.addDelay))},directives:[M.m,l.ERI,l.y0H,l.oJW,l.mtp,l.xlZ,v.x,g.F,b.sg,y.k,S.w,D.s],pipes:[l.aEp],encapsulation:2}),e}(),data:{srlc:{hideIndicator:!0}}}],O=function(){var e=o(function e(){a(this,e)});return e.\u0275fac=function(t){return new(t||e)},e.\u0275mod=h.oAB({type:e}),e.\u0275inj=h.cJS({providers:[{provide:l.V3$,useFactory:function(){return c(13025)}}],imports:[[d.l,l.Az_,l.Gsl,u.$y4,l.lam,l.F__,l.vvu,l.Ts3,l.DmU,l.S6I,l.JhO,l.l70,l.VSN,m.Bz.forChild(N)]]}),e}()},47688:function(e,t,n){"use strict";n.r(t),t.default='<h1>Time Frame Bar</h1>\n\n<p>\n    This example shows the current way of implementing a chart with zooming capability and a time frame bar.\n    We don\'t provide components that would encapsulate this logic, so it needs to be implemented from scratch like this. It takes advantage of the filtering\n    session implementation to connect the filtering components on the page.\n</p>\n\n<nui-example-wrapper filenamePrefix="time-frame-bar-basic"\n                     exampleTitle="Time Frame Bar">\n    <nui-time-frame-bar-example></nui-time-frame-bar-example>\n</nui-example-wrapper>\n'},19147:function(e,t,n){"use strict";n.r(t),t.default='import { Component } from "@angular/core";\n\n@Component({\n    selector: "nui-chart-docs-time-frame-bar",\n    templateUrl: "./chart-docs-time-frame-bar.component.html",\n})\nexport class ChartDocsTimeFrameBarComponent {\n}\n'},32757:function(e,t,n){"use strict";n.r(t),t.default='import { NgModule } from "@angular/core";\nimport { RouterModule, Routes } from "@angular/router";\nimport {\n    DEMO_PATH_TOKEN, NuiBusyModule, NuiButtonModule, NuiCommonModule, NuiDialogModule, NuiDocsModule, NuiIconModule, NuiLayoutModule, NuiPopoverModule,\n    NuiTimeFrameBarModule, NuiTimeFramePickerModule, NuiTooltipModule, SrlcStage,\n} from "@nova-ui/bits";\nimport { NuiChartsModule } from "@nova-ui/charts";\n\nimport { DemoCommonModule } from "../common/demo-common.module";\n\nimport { ChartDocsTimeFrameBarComponent } from "./chart-docs-time-frame-bar.component";\nimport { TimeFrameBarBasicExampleComponent } from "./time-frame-bar-basic/time-frame-bar-basic.example.component";\nimport { TimeFrameBarTestComponent } from "./time-frame-bar-test/time-frame-bar-test.component";\n\nconst exampleRoutes: Routes = [\n    {\n        path: "",\n        component: ChartDocsTimeFrameBarComponent,\n        data: {\n            "srlc": {\n                "stage": SrlcStage.beta,\n            },\n            showThemeSwitcher: true,\n        },\n    },\n    {\n        path: "example",\n        component: TimeFrameBarBasicExampleComponent,\n        data: {\n            "srlc": {\n                "hideIndicator": true,\n            },\n        },\n    },\n    {\n        path: "test",\n        component: TimeFrameBarTestComponent,\n        data: {\n            "srlc": {\n                "hideIndicator": true,\n            },\n        },\n    },\n];\n\n@NgModule({\n    declarations: [\n        ChartDocsTimeFrameBarComponent,\n        TimeFrameBarBasicExampleComponent,\n        TimeFrameBarTestComponent,\n    ],\n    imports: [\n        DemoCommonModule,\n        NuiButtonModule,\n        NuiBusyModule,\n        NuiChartsModule,\n        NuiCommonModule,\n        NuiDialogModule,\n        NuiDocsModule,\n        NuiIconModule,\n        NuiLayoutModule,\n        NuiPopoverModule,\n        NuiTimeFramePickerModule,\n        NuiTimeFrameBarModule,\n        NuiTooltipModule,\n        RouterModule.forChild(exampleRoutes),\n    ],\n    providers: [\n        { provide: DEMO_PATH_TOKEN, useFactory: () => (<any>require).context(`!!raw-loader!./`, true, /.*\\.(ts|html|less)$/) },\n    ],\n})\nexport class ChartDocsTimeFrameBarModule {\n}\n'},77460:function(e,t,n){"use strict";n.r(t),t.default='<nui-time-frame-bar [timeFrame]="timeFrame"\n                    (timeFrameChange)="updateTimeFrame($event)"\n                    [historyIndex]="history.index"\n                    [minDate]="fromDate"\n                    [maxDate]="toDate"\n                    (undo)="zoomUndo()"\n                    (clear)="zoomReset()">\n    <nui-icon icon="calendar" class="pr-3"></nui-icon>\n    {{timeFrame | timeFrame}}\n    <nui-quick-picker timeFrameSelection>\n        <nui-time-frame-picker></nui-time-frame-picker>\n    </nui-quick-picker>\n</nui-time-frame-bar>\n\n<div class="nui-chart-layout p-3">\n    <div class="axis-label-left nui-text-small"><strong i18n>Average CPU load (%)</strong></div>\n    <div class="chart">\n        <nui-chart class="d-flex w-100 h-100" [chart]="chart"></nui-chart>\n    </div>\n    <div class="legend">\n        <nui-legend seriesUnitLabel="%"\n                    [active]="chartAssist.isLegendActive"\n                    [interactive]="true"\n                    (mouseleave)="chartAssist.resetVisibleSeries()">\n            <nui-legend-series *ngFor="let legendSeries of chartAssist.legendSeriesSet; trackBy: chartAssist.seriesTrackByFn"\n                               [descriptionPrimary]="legendSeries[\'name\']"\n                               (mouseenter)="chartAssist.emphasizeSeries(legendSeries.id)"\n                               [seriesRenderState]="chartAssist.renderStatesIndex[legendSeries.id]?.state"\n                               [isSelected]="!chartAssist.isSeriesHidden(legendSeries.id)"\n                               (isSelectedChange)="chartAssist.toggleSeries(legendSeries.id, $event)">\n                <nui-rich-legend-tile [value]="chartAssist.getHighlightedValue(legendSeries, \'y\')"\n                                      [backgroundColor]="chartAssist.palette.standardColors.get(legendSeries.id)"\n                                      [color]="chartAssist.palette.textColors.get(legendSeries.id)">\n                    <nui-chart-marker rightEdge\n                                      [marker]="chartAssist.markers.get(legendSeries.id)"\n                                      [color]="chartAssist.palette.standardColors.get(legendSeries.id)">\n                    </nui-chart-marker>\n                </nui-rich-legend-tile>\n            </nui-legend-series>\n        </nui-legend>\n    </div>\n</div>\n'},60883:function(e,t,n){"use strict";n.r(t),t.default='import { Component, OnDestroy, OnInit } from "@angular/core";\nimport { HistoryStorage, IFilter, IFilteringOutputs, ITimeframe, NoopDataSourceService } from "@nova-ui/bits";\nimport {\n    Chart, ChartAssist, getAutomaticDomainWithIncludedInterval, IAccessors, IChartAssistSeries, ISetDomainEventPayload, LineAccessors, LinearScale,\n    LineRenderer, SET_DOMAIN_EVENT, TimeScale, XYGrid, ZoomPlugin,\n} from "@nova-ui/charts";\nimport moment, { Moment } from "moment/moment";\nimport { Subscription } from "rxjs";\n\n@Component({\n    selector: "nui-time-frame-bar-example",\n    templateUrl: "./time-frame-bar-basic.example.component.html",\n    providers: [NoopDataSourceService, HistoryStorage],\n})\nexport class TimeFrameBarBasicExampleComponent implements OnInit, OnDestroy {\n    private series = getData();\n    public fromDate = moment("2018-05-01 15:00:00").subtract(5.2, "days");\n    public toDate = moment("2019-01-01 15:00:00");\n\n    public chart = new Chart(new XYGrid());\n    public chartAssist: ChartAssist = new ChartAssist(this.chart);\n\n    public timeFrame: ITimeframe;\n\n    private xScale = new TimeScale("time-scale");\n    private yScale = new LinearScale();\n    private seriesSet: IChartAssistSeries<IAccessors>[] = [];\n    private filteringSubscription: Subscription;\n\n    constructor(\n        public history: HistoryStorage<ITimeframe>,\n        private dataSourceService: NoopDataSourceService<ITimeframe>\n    ) {}\n\n    public ngOnInit(): void {\n        const accessors = new LineAccessors(this.chartAssist.palette.standardColors, this.chartAssist.markers);\n        const renderer = new LineRenderer();\n        this.yScale.domainCalculator = getAutomaticDomainWithIncludedInterval([0, 100]);\n        this.seriesSet = Object.keys(this.series).map((key: string) => ({\n            id: key,\n            name: key,\n            data: buildTimeSeriesFromData(this.fromDate, this.toDate, this.series[key]),\n            accessors,\n            renderer,\n            scales: { x: this.xScale, y: this.yScale },\n        }));\n\n        this.timeFrame = this.history.save({\n            startDatetime: this.fromDate,\n            endDatetime: this.toDate,\n            selectedPresetId: undefined,\n        });\n\n        this.chart.addPlugins(new ZoomPlugin());\n\n        // Update Time Frame Bar when chart got zoomed\n        this.chart.getEventBus().getStream(SET_DOMAIN_EVENT).subscribe((event) => {\n            const payload = <ISetDomainEventPayload>event.data;\n            const newDomain = payload[this.xScale.id];\n            this.timeFrame = this.history.save({\n                startDatetime: moment(newDomain[0]),\n                endDatetime: moment(newDomain[1]),\n                selectedPresetId: undefined,\n            });\n\n            void this.dataSourceService.applyFilters();\n        });\n\n        this.filteringSubscription = this.setUpFiltering();\n\n        void this.dataSourceService.applyFilters();\n    }\n\n    public ngOnDestroy(): void {\n        if (this.filteringSubscription) {\n            this.filteringSubscription.unsubscribe();\n        }\n    }\n\n    public updateTimeFrame(value: ITimeframe): void {\n        this.timeFrame = this.history.restart(value);\n        this.dataSourceService.applyFilters();\n    }\n\n    // Use the history storage to go back one time frame\n    public zoomUndo(): void {\n        this.timeFrame = this.history.undo();\n        this.dataSourceService.applyFilters();\n    }\n\n    // Reset the history storage and save a new initial value if provided\n    // Otherwise preserve the previous one\n    public zoomReset(value?: ITimeframe): void {\n        this.timeFrame = this.history.restart(value);\n        this.dataSourceService.applyFilters();\n    }\n\n    private setUpFiltering(): Subscription {\n        this.dataSourceService.registerComponent({\n            timeframe: {\n                componentInstance: {\n                    getFilters: () => <IFilter<ITimeframe>>({\n                        type: "ITimeframe",\n                        value: this.timeFrame,\n                    }),\n                },\n            },\n        });\n\n        return this.dataSourceService.outputsSubject.subscribe((data: IFilteringOutputs) => {\n            this.xScale.fixDomain([data.timeframe.value.startDatetime.toDate(), data.timeframe.value.endDatetime.toDate()]);\n            this.chartAssist.update(this.seriesSet);\n        });\n    }\n}\n\n/* Chart data */\nfunction getData(): Record<string, number[]> {\n    return {\n        "Tex-lab-aus-2621": [18, 27, 35, 33, 26, 50, 36, 47, 58, 66, 65, 50, 40, 31, 42, 62, 57, 99, 75, 55, 73, 69, 77, 57, 61, 68, 82, 81, 78, 67],\n        "Cz-lab-brn-02": [41, 50, 56, 40, 44, 35, 27, 42, 38, 23, 20, 13, 29, 42, 84, 93, 71, 60, 54, 79, 64, 49, 48, 59, 76, 63, 52, 84, 89, 80],\n    };\n}\n\nfunction buildTimeSeriesFromData(from: Moment, to: Moment, data: number[]): { x: Moment, y: number }[] {\n    const count = data.length;\n    if (!from || !to || count === 0) {\n        return [];\n    }\n\n    const interval = count > 1 ? to.diff(from) / (count - 1) : 0;\n    return data.map((y, i) => ({\n        x: from.clone().add(moment.duration(i * interval)),\n        y,\n    }));\n}\n'},34988:function(e,t,n){"use strict";n.r(t),t.default='import moment, { Moment } from "moment/moment";\nimport { Observable, of } from "rxjs";\nimport { delay } from "rxjs/operators";\n\nenum DataInterval {\n    Poll = 5,\n    Hour = 60,\n    // Day = 24 * 60,\n    // Week = 7 * 24 * 60,\n}\n\nexport class TimeFrameBarDataService {\n    /* eslint-disable max-len */\n    private factors = {\n        "day": [42, 7, 63, 33, 10, 16, 57, 16, 88, 44, 35, 85, 46, 73, 29, 35, 51, 52, 100, 51, 40, 87, 42, 90, 75, 90, 70, 16, 4, 43, 18, 63, 28, 15, 86, 81, 48, 86, 91, 89, 15, 89, 66, 35, 65, 18, 59, 75, 69, 64, 55, 67, 60, 76, 29, 81, 87, 73, 10, 19, 29, 83, 16, 72, 80, 43, 28, 53, 38, 24, 88, 81, 14, 68, 80, 44, 72, 56, 89, 83, 6, 1, 1, 11, 66, 39, 42, 81, 31, 48, 11, 76, 41, 60, 40, 15, 75, 33, 90, 80, 37, 40, 39, 58, 69, 31, 61, 80, 85, 57, 38, 3, 45, 36, 71, 66, 36, 58, 82, 70, 90, 78, 33, 72, 98, 36, 32, 61, 44, 13, 22, 90, 66, 87, 55, 21, 63, 70, 41, 61, 19, 42, 65, 79, 17, 14, 85, 69, 79, 77, 99, 86, 5, 31, 94, 2, 37, 54, 79, 32, 63, 83, 64, 52, 59, 35, 18, 45, 58, 23, 58, 99, 61, 60, 78, 95, 63, 35, 27, 93, 46, 86, 51, 80, 73, 6, 66, 72, 96, 7, 90, 94, 3, 66, 1, 38, 30, 11, 58, 91, 84, 100, 90, 70, 51, 77, 56, 53, 49, 42, 84, 10, 76, 11, 66, 41, 38, 68, 24, 84, 89, 72, 74, 54, 29, 18, 36, 13, 17, 18, 82, 14, 50, 10, 47, 12, 1, 4, 63, 59, 62, 78, 83, 5, 25, 8, 59, 59, 28, 56, 35, 33, 31, 37, 5, 67, 34, 93, 25, 66, 69, 64, 23, 69, 60, 24, 26, 81, 88, 66, 80, 45, 91, 68, 83, 8, 83, 43, 96, 85, 8, 47, 67, 14, 64, 26, 96, 45],\n        "year": [64, 70, 41, 96, 74, 38, 38, 79, 77, 24, 98, 78, 22, 90, 7, 42, 95, 76, 92, 86, 13, 5, 80, 6, 9, 90, 40, 94, 66, 12, 28, 7, 76, 74, 23, 79, 82, 9, 9, 84, 59, 92, 63, 15, 25, 18, 83, 35, 46, 14, 22, 84, 34, 17, 9, 25, 34, 89, 48, 80, 76, 38, 60, 43, 41, 88, 35, 32, 62, 80, 76, 64, 41, 49, 23, 61, 27, 56, 3, 88, 37, 24, 15, 88, 85, 18, 41, 74, 81, 13, 40, 10, 39, 30, 45, 21, 32, 46, 54, 8, 28, 19, 74, 87, 36, 43, 74, 15, 58, 24, 98, 14, 49, 96, 51, 83, 4, 4, 13, 72, 42, 62, 26, 80, 85, 46, 74, 60, 14, 5, 97, 16, 90, 84, 52, 10, 18, 26, 8, 49, 71, 34, 87, 32, 15, 46, 23, 10, 86, 7, 18, 51, 31, 72, 20, 43, 10, 91, 74, 51, 86, 89, 32, 79, 94, 5, 41, 16, 79, 66, 84, 24, 74, 78, 69, 85, 46, 57, 92, 92, 3, 14, 5, 12, 63, 1, 6, 37, 85, 79, 18, 88, 42, 8, 25, 94, 87, 7, 52, 16, 35, 43, 65, 63, 46, 38, 98, 55, 100, 14, 45, 50, 49, 90, 98, 47, 20, 83, 84, 84, 58, 79, 100, 19, 75, 94, 34, 5, 94, 29, 96, 80, 46, 33, 73, 82, 58, 68, 98, 100, 10, 46, 96, 87, 96, 5, 64, 53, 5, 7, 19, 65, 91, 78, 59, 14, 19, 12, 15, 92, 8, 15, 19, 99, 26, 25, 45, 29, 39, 1, 61, 74, 88, 27, 43, 1, 93, 75, 91, 97, 38, 39, 24, 94, 29, 18, 88, 56, 62, 7, 88, 13, 34, 21, 20, 41, 90, 95, 2, 17, 26, 4, 44, 70, 18, 65, 75, 62, 18, 46, 18, 73, 76, 95, 2, 30, 31, 77, 77, 80, 23, 51, 48, 42, 78, 65, 78, 56, 37, 46, 96, 72, 49, 48, 8, 45, 89, 42, 87, 28, 42, 53, 94, 73, 57, 30, 75, 53, 77, 62, 9, 71, 9, 48, 97, 92, 91, 24, 44, 83, 8, 86, 41, 6, 21, 45],\n        "century": [85, 83, 87, 82, 77, 65, 67, 72, 75, 76, 82, 87, 91, 93, 94, 90, 84, 89, 86, 88, 86, 85, 82, 84, 81, 77, 77, 77, 80, 97, 18, 6, 25, 85, 90, 25, 72, 99, 61, 79, 62, 7, 50, 41, 40, 6, 60, 65, 1, 98, 90, 31, 57, 74, 50, 57, 68, 20, 12, 16, 33, 1, 32, 53, 76, 57, 89, 33, 48, 28, 89, 35, 15, 3, 33, 77, 10, 1, 36, 4, 36, 88, 26, 66, 50, 3, 66, 37, 77, 70, 9, 40, 20, 14, 55, 96, 88, 14, 9, 54],\n    };\n    /* eslint-enable max-len */\n\n    /* Chart data */\n    private seriesValueFunctions: Record<string, (fs: [number, number, number]) => number> = {\n        "Tex-lab-aus-2621": ([a, b, c]) => a + 0.1 * (b - 30) + (c - 50),\n        "Cz-lab-brn-02": ([a, b, c]) => a + 0.01 * b * (b - 50) + 20 * Math.cos(c * 0.02 * Math.PI),\n    };\n\n    public getChartData(from: Moment, to: Moment, delayInterval: number = 0): Observable<Record<string, { x: Moment, y: number }[]>> {\n        const rules = this.seriesValueFunctions;\n        const results: Record<string, { x: moment.Moment, y: number }[]> = {};\n\n        const duration = moment.duration(to.diff(from));\n        const dataInterval = duration.asHours() > 12 ? DataInterval.Hour : DataInterval.Poll;\n\n        for (const seriesId of Object.keys(rules)) {\n            results[seriesId] = this.getData(from, to, rules[seriesId], dataInterval);\n        }\n\n        return of(results).pipe(delay(delayInterval));\n    }\n\n    private getData(\n        start: Moment,\n        end: Moment,\n        valueFn: (fs: [number, number, number]) => number,\n        interval: DataInterval = DataInterval.Poll\n    ): { x: moment.Moment, y: number }[] {\n        const startCorrector = start.minutes() % interval;\n        const currentDate = start.clone().subtract(startCorrector, "minutes").seconds(0); // rounds to pollInterval\n        const endCorrector = interval - end.minutes() % interval;\n        const endDate = end.clone().add(endCorrector, "minutes").seconds(0); // rounds to 5 minutes pollInterval\n        const count = Math.ceil(moment.duration(endDate.diff(currentDate)).asMinutes() / interval);\n        const results = [];\n\n        for (let i = 0; i < count; i++) {\n            const fDay = this.factors.day[Math.ceil((60 * currentDate.hours() + currentDate.minutes()) / 5)];\n            const fYear = this.factors.year[currentDate.dayOfYear()];\n            const fCentury = this.factors.century[currentDate.year() % 100];\n            results.push({\n                x: currentDate.clone(),\n                y: valueFn([fCentury, fYear, fDay]),\n            });\n            currentDate.add(interval, "minutes");\n        }\n\n        return results;\n    }\n\n}\n'},5473:function(e,t,n){"use strict";n.r(t),t.default='<charts-test-harness>\n    <div class="nui-time-frame-bar-test">\n        <div class="m-5" nui-busy [busy]="busy" style="border: 1px solid lightgrey;">\n            <nui-time-frame-bar [timeFrame]="timeFrame"\n                                (timeFrameChange)="updateTimeFrame($event)"\n                                [historyIndex]="history.index"\n                                [minDate]="fromDate"\n                                [maxDate]="toDate"\n                                (undo)="zoomUndo()"\n                                (clear)="updateTimeFrame()"\n                                style="display: block; border-bottom: 1px solid lightgrey;"\n                                class="time-frame-bar">\n                <nui-icon icon="calendar" class="pr-3"></nui-icon>\n                {{timeFrame | timeFrame}}\n                <nui-quick-picker timeFrameSelection>\n                    <nui-time-frame-picker></nui-time-frame-picker>\n                </nui-quick-picker>\n            </nui-time-frame-bar>\n            <div class="nui-chart-layout p-3">\n                <div class="axis-label-left nui-text-small"><strong i18n>Average CPU load (%)</strong></div>\n                <div class="chart">\n                    <nui-chart class="w-100" [chart]="chart"></nui-chart>\n                </div>\n                <div class="legend">\n                    <nui-legend seriesUnitLabel="%"\n                                [active]="chartAssist.isLegendActive"\n                                [interactive]="true"\n                                (mouseleave)="chartAssist.resetVisibleSeries()">\n                        <nui-legend-series *ngFor="let legendSeries of chartAssist.legendSeriesSet; trackBy: chartAssist.seriesTrackByFn"\n                                           [descriptionPrimary]="legendSeries[\'name\']"\n                                           (mouseenter)="chartAssist.emphasizeSeries(legendSeries.id)"\n                                           [seriesRenderState]="chartAssist.renderStatesIndex[legendSeries.id]?.state"\n                                           [isSelected]="!chartAssist.isSeriesHidden(legendSeries.id)"\n                                           (isSelectedChange)="chartAssist.toggleSeries(legendSeries.id, $event)">\n                            <nui-rich-legend-tile [value]="chartAssist.getHighlightedValue(legendSeries, \'y\')"\n                                                  [backgroundColor]="chartAssist.palette.standardColors.get(legendSeries.id)"\n                                                  [color]="chartAssist.palette.textColors.get(legendSeries.id)">\n                                <nui-chart-marker rightEdge\n                                                  [marker]="chartAssist.markers.get(legendSeries.id)"\n                                                  [color]="chartAssist.palette.standardColors.get(legendSeries.id)">\n                                </nui-chart-marker>\n                            </nui-rich-legend-tile>\n                        </nui-legend-series>\n                    </nui-legend>\n                </div>\n            </div>\n        </div>\n        <div class="p-5">\n            <input id="delay" name="delay" type="checkbox" [checked]="addDelay" (change)="addDelay = !addDelay" />\n            <label for="delay" class="pl-2">Add delay to server requests</label>\n        </div>\n    </div>\n</charts-test-harness>\n'},38192:function(e,t,n){"use strict";n.r(t),t.default='import { AfterContentInit, Component, OnDestroy } from "@angular/core";\nimport {\n    HistoryStorage,\n    IFilter,\n    IFilteringOutputs,\n    ITimeframe,\n    NoopDataSourceService,\n} from "@nova-ui/bits";\nimport {\n    Chart,\n    ChartAssist,\n    getAutomaticDomainWithIncludedInterval,\n    ISetDomainEventPayload,\n    LineAccessors,\n    LinearScale,\n    LineRenderer,\n    SET_DOMAIN_EVENT,\n    TimeScale,\n    XYGrid,\n    ZoomPlugin,\n} from "@nova-ui/charts";\nimport moment from "moment/moment";\nimport { Subscription } from "rxjs";\n\nimport { TimeFrameBarDataService } from "./time-frame-bar-data.service";\n\n@Component({\n    selector: "nui-time-frame-bar-test",\n    templateUrl: "./time-frame-bar-test.component.html",\n    providers: [NoopDataSourceService, HistoryStorage],\n})\nexport class TimeFrameBarTestComponent implements AfterContentInit, OnDestroy {\n    public fromDate = moment("2018-05-01 15:00:00").subtract(2, "days");\n    public toDate = moment("2018-05-01 15:00:00");\n\n    public chart = new Chart(new XYGrid());\n    public chartAssist: ChartAssist = new ChartAssist(this.chart);\n\n    public timeFrame: ITimeframe;\n    public busy: boolean;\n    public addDelay: boolean = true;\n\n    private xScale = new TimeScale("time-scale");\n    private yScale = new LinearScale();\n    private accessors = new LineAccessors(\n        this.chartAssist.palette.standardColors,\n        this.chartAssist.markers\n    );\n    private renderer = new LineRenderer();\n    private filteringSubscription: Subscription;\n\n    private dataService = new TimeFrameBarDataService();\n\n    constructor(\n        public history: HistoryStorage<ITimeframe>,\n        private dataSourceService: NoopDataSourceService<ITimeframe>\n    ) {}\n\n    public ngAfterContentInit(): void {\n        this.yScale.domainCalculator = getAutomaticDomainWithIncludedInterval([\n            0, 100,\n        ]);\n        this.chart.addPlugins(new ZoomPlugin());\n\n        this.filteringSubscription = this.setUpFiltering();\n\n        this.chart\n            .getEventBus()\n            .getStream(SET_DOMAIN_EVENT)\n            .subscribe((event) => {\n                const payload = <ISetDomainEventPayload>event.data;\n                const newDomain = payload[this.xScale.id];\n\n                this.applyFilters(\n                    this.history.save({\n                        startDatetime: moment(newDomain[0]),\n                        endDatetime: moment(newDomain[1]),\n                        selectedPresetId: undefined,\n                    })\n                );\n            });\n\n        this.applyFilters(\n            this.history.save({\n                startDatetime: this.fromDate,\n                endDatetime: this.toDate,\n                selectedPresetId: undefined,\n            })\n        );\n    }\n\n    public ngOnDestroy(): void {\n        if (this.filteringSubscription) {\n            this.filteringSubscription.unsubscribe();\n        }\n    }\n\n    public updateTimeFrame(value?: ITimeframe): void {\n        this.applyFilters(this.history.restart(value));\n    }\n\n    public zoomUndo(): void {\n        this.applyFilters(this.history.undo());\n    }\n\n    private applyFilters(value: ITimeframe) {\n        this.busy = true;\n        this.timeFrame = value;\n        this.xScale.fixDomain([\n            value.startDatetime.toDate(),\n            value.endDatetime.toDate(),\n        ]);\n        this.chart.updateDimensions();\n        void this.dataSourceService.applyFilters();\n    }\n\n    private setUpFiltering(): any {\n        this.dataSourceService.registerComponent({\n            timeframe: {\n                componentInstance: {\n                    getFilters: () =>\n                        <IFilter<ITimeframe>>{\n                            type: "ITimeframe",\n                            value: this.timeFrame,\n                        },\n                },\n            },\n        });\n\n        return this.dataSourceService.outputsSubject.subscribe(\n            (data: IFilteringOutputs) => {\n                const start = data.timeframe.value.startDatetime;\n                const end = data.timeframe.value.endDatetime;\n                this.dataService\n                    .getChartData(start, end, this.addDelay ? 1000 : 0)\n                    .subscribe((series) => {\n                        this.chartAssist.update(\n                            Object.keys(series).map((key: string) => ({\n                                id: key,\n                                name: key,\n                                data: series[key],\n                                accessors: this.accessors,\n                                renderer: this.renderer,\n                                scales: { x: this.xScale, y: this.yScale },\n                            }))\n                        );\n                        this.busy = false;\n                    });\n            }\n        );\n    }\n}\n'}}])}();