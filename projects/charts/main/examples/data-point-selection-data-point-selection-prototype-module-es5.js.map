{"version":3,"sources":["webpack:///examples/components/demo/development/data-point-selection/data-point-selection-prototype.component.ts","webpack:///examples/components/demo/development/data-point-selection/data-point-selection-prototype.component.ts?1362","webpack:///examples/components/demo/development/data-point-selection/data-point-selection-prototype.component.html","webpack:///examples/components/demo/development/data-point-selection/data-point-selection-prototype.module.ts?3a7a","webpack:///node_modules/raw-loader/dist/cjs.js .*\\.(ts|html|less)$?446e","webpack:///examples/components/demo/development/data-point-selection/data-point-selection-prototype.module.ts","webpack:///examples/components/demo/development/data-point-selection/data-point-selection-prototype.component.less","webpack:///examples/components/demo/development/data-point-selection/data-point-selection-prototype.component.less?0a36"],"names":["format","baseDate","Status","DataPointSelectionPrototypeComponent","xScaleId","selectedDataPoints","labelPlugin","colorProvider","get","seriesId","reset","handleDataPointsInteraction","event","data","interactionType","Click","dataPoints","renderer","config","stateStyles","deemphasized","opacity","redrawCharts","selectedLabelPosition","calculateInteractionLabelPosition","barChart","getEventBus","getStream","next","MouseMove","values","handleInteractionLabelUpdates","areLabelUpdatesEnabled","broadcast","handleMouseActive","getDataManager","chartSeriesSet","length","statusChart","selectedDataPointIdxFn","index","cssClassAccessor","d","i","series","dataSeries","id","setUpBarChart","setUpStatusChart","undefined","configureBarGrid","addPlugin","subscribe","accessors","cssClass","scales","x","thickness","barThickness","rendererConfig","highlightStrategy","cursor","update","getData","map","s","configureStatusGrid","statusYScale","fixDomain","STATUS_DOMAIN","statusXScale","toDate","add","statusScales","y","myStatusAccessors","getStatusValueMap","status","Up","THIN","THICK","getStatusData","gridConfig","axis","left","visible","gridTicks","bottom","fit","borders","top","dimension","padding","margin","right","x1","x2","Math","abs","max","MIN_BAR_THICKNESS","sampleDataPoint","Object","keys","xScales","yScales","position","width","height","Error","xCoordinate","yCoordinate","getXYValues","template","encapsulation","None","category","value","Warning","Critical","name","start","end","webpackContext","req","webpackContextResolve","__webpack_require__","o","e","code","webpackContextKeys","resolve","module","exports","routes","path","component","DataPointSelectionPrototypeModule","declarations","imports","forChild","providers","provide","useFactory"],"mappings":"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","file":"data-point-selection-data-point-selection-prototype-module-es5.js","sourcesContent":["import { Component, OnInit, ViewEncapsulation } from \"@angular/core\";\nimport {\n    BandScale,\n    barAccessors,\n    BarGridConfig,\n    BarHighlightStrategy,\n    BarRenderer,\n    barScales,\n    BarStatusGridConfig,\n    BorderConfig,\n    Chart,\n    CHART_PALETTE_CS1,\n    CHART_PALETTE_CS_S,\n    convert,\n    DataAccessor,\n    DATA_POINT_NOT_FOUND,\n    IAccessors,\n    IBarRendererConfig,\n    IChartEvent,\n    IDataPoint,\n    IDataSeries,\n    IInteractionDataPointsEvent,\n    IInteractionValues,\n    IInteractionValuesPayload,\n    InteractionLabelPlugin,\n    InteractionLinePlugin,\n    InteractionType,\n    INTERACTION_DATA_POINTS_EVENT,\n    INTERACTION_VALUES_EVENT,\n    IXYScales,\n    MappedValueProvider,\n    MOUSE_ACTIVE_EVENT,\n    SelectedDatPointIdxFn,\n    StatusAccessors,\n    statusAccessors,\n    TimeIntervalScale,\n    UtilityService,\n    XYGrid,\n} from \"@nova-ui/charts\";\nimport isEmpty from \"lodash/isEmpty\";\nimport isUndefined from \"lodash/isUndefined\";\nimport moment, { duration } from \"moment/moment\";\n\nconst format = \"YYYY-MM-DDTHH:mm:ssZ\";\nconst baseDate = \"2016-12-25T15:05:00Z\";\n\nenum Status {\n    Up = \"up\",\n    Warning = \"warning\",\n    Critical = \"critical\",\n}\n\n@Component({\n    templateUrl: \"./data-point-selection-prototype.component.html\",\n    styleUrls: [\"./data-point-selection-prototype.component.less\"],\n    encapsulation: ViewEncapsulation.None,\n})\nexport class DataPointSelectionPrototypeComponent implements OnInit {\n    public barChart: Chart;\n    public statusChart: Chart;\n\n    // Use the same 'x' scale id for both charts to ensure that interaction events such as hover are shared between the charts\n    private xScaleId = \"xScale\";\n\n    private selectedDataPoints: Record<string, IDataPoint> = {};\n    private labelPlugin = new InteractionLabelPlugin();\n    private renderer: BarRenderer;\n    private selectedLabelPosition?: IInteractionValues;\n\n    private colorProvider = {\n        // sets the bars used to visualize the selection box to 'transparent'. All other bars just use the first color in the CS1 palette.\n        get: (seriesId: string) => seriesId === \"selection-box\" ? \"transparent\" : CHART_PALETTE_CS1[0],\n        reset: () => { },\n    };\n\n    public ngOnInit() {\n        this.setUpBarChart();\n        this.setUpStatusChart();\n    }\n\n    public onReset() {\n        // Reset the stored selection\n        this.selectedDataPoints = {};\n        this.selectedLabelPosition = undefined;\n\n        // Redraw the charts\n        this.redrawCharts();\n\n        // Re-enable interaction label updates and hide the label by emitting a mouse move 'INTERACTION_VALUES_EVENT' with empty values.\n        this.labelPlugin.areLabelUpdatesEnabled = true;\n        this.barChart.getEventBus().getStream(INTERACTION_VALUES_EVENT).next({ data: { interactionType: InteractionType.MouseMove, values: {} } });\n    }\n\n    private setUpBarChart() {\n        this.barChart = new Chart(this.configureBarGrid());\n        this.barChart.addPlugin(new InteractionLinePlugin());\n        this.barChart.addPlugin(this.labelPlugin);\n\n        // Setting up data point click handling\n        this.barChart.getEventBus().getStream(INTERACTION_DATA_POINTS_EVENT).subscribe(this.handleDataPointsInteraction);\n        // Setting up interaction label update handling\n        this.barChart.getEventBus().getStream(INTERACTION_VALUES_EVENT).subscribe(this.handleInteractionLabelUpdates);\n        // Setting up what happens on chart mouseenter and mouseleave\n        this.barChart.getEventBus().getStream(MOUSE_ACTIVE_EVENT).subscribe(this.handleMouseActive);\n\n        // The color provider sets the selection boxes to 'transparent'\n        const accessors = barAccessors({}, this.colorProvider);\n        // The 'cssClassAccessor' updates the stroke color of the selection box when a time interval is selected\n        accessors.data.cssClass = this.cssClassAccessor;\n\n        const scales = barScales();\n        // Use the same 'x' scale id as the status chart to ensure that interaction events such as hover are shared between the charts\n        scales.x = new TimeIntervalScale(duration(5, \"minutes\"), this.xScaleId);\n\n        // The 'barThickness' method sets the selection box width to be larger than the standard bars\n        accessors.data.thickness = this.barThickness(scales);\n\n        const rendererConfig: IBarRendererConfig = {\n            // Supply a 'selectedDataPointIdxFn' to the 'BarHighlightStrategy' to prevent the selected bar\n            // from being deemphasized/grayed out as the chart is hovered.\n            highlightStrategy: new BarHighlightStrategy(\"x\", 1, this.selectedDataPointIdxFn),\n            cursor: \"pointer\",\n        };\n        this.renderer = new BarRenderer(rendererConfig);\n\n        // Initialize the bar chart\n        this.barChart.update(getData().map(s => ({\n            ...s,\n            accessors,\n            renderer: this.renderer,\n            scales,\n        })));\n    }\n\n    private setUpStatusChart() {\n        this.statusChart = new Chart(this.configureStatusGrid());\n        this.statusChart.addPlugin(new InteractionLinePlugin());\n\n        // Setting up the status chart scales\n        const statusYScale = new BandScale();\n        statusYScale.fixDomain(StatusAccessors.STATUS_DOMAIN);\n        // Use the same 'x' scale id as the bar chart to ensure that interaction events such as hover are shared between the charts\n        const statusXScale = new TimeIntervalScale(duration(5, \"minutes\"), this.xScaleId);\n        statusXScale.fixDomain([moment(baseDate, format).toDate(), moment(baseDate, format).add(25, \"minutes\").toDate()]);\n        const statusScales = {\n            x: statusXScale,\n            y: statusYScale,\n        };\n\n        // Setting up the status chart accessors\n        const myStatusAccessors = statusAccessors(new MappedValueProvider<string>(getStatusValueMap()));\n        myStatusAccessors.data.thickness = (data: any) => data.status === Status.Up ? BarRenderer.THIN : BarRenderer.THICK;\n\n        // The 'cssClassAccessor' updates the stroke color of the selection box when a time interval is selected\n        // TODO: Implement 'selection-box' series for displaying the selection box on the status chart. For reference,\n        // see 'selection-box' data series on the bar chart.\n        myStatusAccessors.data.cssClass = this.cssClassAccessor;\n\n        // Initializing the status chart\n        this.statusChart.update(getStatusData()\n            .map(d => ({\n                ...d,\n                accessors: myStatusAccessors,\n                renderer: this.renderer,\n                scales: statusScales,\n            })));\n    }\n\n    private configureBarGrid() {\n        const gridConfig = new BarGridConfig();\n\n        gridConfig.axis.left.visible = false;\n        gridConfig.axis.left.gridTicks = false;\n        // Disable 'axis.bottom.fit' to set left and right margins manually\n        gridConfig.axis.bottom.fit = false;\n        gridConfig.borders.top = new BorderConfig();\n        gridConfig.cursor = \"pointer\";\n        gridConfig.dimension.padding.top = 0;\n        // Synchronize the left and right margins (left margin default is 30px)\n        gridConfig.dimension.margin.right = gridConfig.dimension.margin.left;\n\n        // Use these settings to make the bar chart the same height as the status chart\n        // gridConfig.dimension.autoHeight = false;\n        // gridConfig.dimension.height(30);\n\n        return new XYGrid(gridConfig);\n    }\n\n    private configureStatusGrid() {\n        const gridConfig = new BarStatusGridConfig();\n\n        gridConfig.axis.bottom.visible = false;\n        gridConfig.cursor = \"pointer\";\n        gridConfig.dimension.margin.bottom = 0;\n        // Synchronize the left and right margins (left margin default is 30px)\n        gridConfig.dimension.margin.right = gridConfig.dimension.margin.left;\n        gridConfig.borders.bottom.visible = false;\n\n        return new XYGrid(gridConfig);\n    }\n\n    private redrawCharts() {\n        this.barChart.update(this.barChart.getDataManager().chartSeriesSet);\n        this.statusChart.update(this.statusChart.getDataManager().chartSeriesSet);\n    }\n\n    private handleDataPointsInteraction = (event: IChartEvent) => {\n        const data: IInteractionDataPointsEvent = event.data;\n        // we're interested in data point click events here\n        if (data.interactionType === InteractionType.Click) {\n            // set the selected data points\n            this.selectedDataPoints = data.dataPoints;\n\n            if (this.renderer.config.stateStyles) {\n                // change the bar container opacity from 0.1 to 0.3\n                this.renderer.config.stateStyles.deemphasized = { opacity: 0.3 };\n            }\n\n            // redraw the charts to apply the selected data point style\n            this.redrawCharts();\n\n            // store the interaction label position for the selected data point\n            this.selectedLabelPosition = this.calculateInteractionLabelPosition(data);\n\n            // apply the label position based on the click\n            this.barChart.getEventBus().getStream(INTERACTION_VALUES_EVENT).next({\n                data: { interactionType: InteractionType.MouseMove, values: this.selectedLabelPosition },\n            });\n        }\n    }\n\n    private handleInteractionLabelUpdates = (event: IChartEvent) => {\n        const data: IInteractionValuesPayload = event.data;\n\n        // The condition checks whether the mouse has moved away from the chart and a selected label position is stored\n        if (data.interactionType === InteractionType.MouseMove && isEmpty(data.values) && this.selectedLabelPosition) {\n\n            // ensure label updates are enabled\n            this.labelPlugin.areLabelUpdatesEnabled = true;\n\n            // Update the label with the stored label position by manually emitting an 'INTERACTION_VALUES_EVENT'.\n            // Note that 'broadcast' is set to 'true' to let the 'nuiChartCollection' directive know that the event is\n            // coming from outside the chart and should not propagate to other charts in the collection.\n            this.barChart.getEventBus().getStream(INTERACTION_VALUES_EVENT).next({\n                data: { interactionType: InteractionType.MouseMove, values: this.selectedLabelPosition },\n                broadcast: true,\n            });\n\n            // disable further label updates\n            this.labelPlugin.areLabelUpdatesEnabled = false;\n\n        } else if (data.interactionType === InteractionType.MouseMove && !isEmpty(data.values)) {\n\n            // allow label updates while the mouse is hovering over the chart\n            this.labelPlugin.areLabelUpdatesEnabled = true;\n        }\n    }\n\n    private handleMouseActive = (event: IChartEvent) => {\n        if (this.renderer.config.stateStyles) {\n            if (!isEmpty(this.selectedDataPoints) && !event.data) {\n                // if there's a selected data point and the mouse has moved away\n                // from the chart, set the bar container opacity to 0.3\n                this.renderer.config.stateStyles.deemphasized = { opacity: 0.3 };\n            } else if (event.data) {\n                // if the mouse is over the chart set the bar container opacity to 0.3\n                this.renderer.config.stateStyles.deemphasized = { opacity: 0.1 };\n            }\n        }\n\n        if (this.barChart.getDataManager().chartSeriesSet.length > 0 && this.statusChart.getDataManager().chartSeriesSet.length > 0) {\n            // redraw the charts if we have data\n            this.redrawCharts();\n        }\n    }\n\n    /**\n     * Sets the width of the bars on the bar chart. (This is only necessary if you want the selection boxes\n     * to be wider than the standard bars).\n     */\n    private barThickness(scales: IXYScales): DataAccessor<any, any> {\n        return (d: any, i: number, series: any[], dataSeries: IDataSeries<IAccessors>) => {\n            let thickness: number;\n            const x1 = convert(scales.x, dataSeries.accessors.data?.[\"startX\"]?.(d, i, dataSeries.data, dataSeries), 0);\n            const x2 = convert(scales.x, dataSeries.accessors.data?.[\"endX\"]?.(d, i, dataSeries.data, dataSeries), 1);\n            thickness = Math.abs(x1 - x2);\n\n            // Allow the selection boxes to be a little wider than the data bars\n            thickness -= dataSeries.id === \"selection-box\" ? 2 : 6;\n            thickness = Math.max(thickness, BarRenderer.MIN_BAR_THICKNESS);\n            return thickness;\n        };\n    }\n\n    /**\n     * Allows the 'BarHighlightingStrategy' to know which data point (or bar) on a series is selected, if any.\n     * Return 'DATA_POINT_NOT_FOUND' if no data point is selected on the specified series.\n     */\n    private selectedDataPointIdxFn: SelectedDatPointIdxFn = (seriesId: string): number => this.selectedDataPoints?.[seriesId]?.index ?? DATA_POINT_NOT_FOUND;\n\n    /**\n     * Sets the stroke color of the selection box when a time interval is selected\n     *\n     * @returns The 'selected' class (see less file) if a bar is selected, the series id matches the selection box series, and the\n     * selected data point index matches the current index; otherwise, returns an empty string.\n     */\n    private cssClassAccessor = (d: any, i: number, series: any, dataSeries: any): string =>\n        !isEmpty(this.selectedDataPoints) && dataSeries.id === \"selection-box\" && this.selectedDataPoints[dataSeries.id]?.index === i ? \"selected\" : \"\"\n\n    /**\n     * Calculates the desired position of the interaction label based on the position of the first data point in the event payload\n     */\n    private calculateInteractionLabelPosition(data: IInteractionDataPointsEvent): IInteractionValues {\n        const sampleDataPoint = data.dataPoints[Object.keys(data.dataPoints)[0]];\n        const xScales = [sampleDataPoint.dataSeries.scales.x];\n        const yScales = [sampleDataPoint.dataSeries.scales.y];\n\n        if (!sampleDataPoint.position || isUndefined(sampleDataPoint.position.width) || isUndefined(sampleDataPoint.position.height)) {\n            throw new Error(\"Can't calculate x and y values\");\n        }\n\n        const xCoordinate = sampleDataPoint.position.x + sampleDataPoint.position.width / 2;\n        const yCoordinate = sampleDataPoint.position.y + sampleDataPoint.position.height / 2;\n\n        return UtilityService.getXYValues(xScales, yScales, xCoordinate, yCoordinate);\n    }\n}\n\n/* Chart data */\nfunction getData() {\n    return [\n        {\n            id: \"series-1\",\n            data: [\n                { category: moment(baseDate, format).toDate(), value: 66 },\n                { category: moment(baseDate, format).add(5, \"minutes\").toDate(), value: 14 },\n                { category: moment(baseDate, format).add(10, \"minutes\").toDate(), value: 25 },\n                { category: moment(baseDate, format).add(15, \"minutes\").toDate(), value: 55 },\n                { category: moment(baseDate, format).add(20, \"minutes\").toDate(), value: 33 },\n                { category: moment(baseDate, format).add(25, \"minutes\").toDate(), value: 5 },\n            ],\n        },\n\n        // The sole purpose of this series is to define the selection boxes that have a togglable selection\n        // outline. The 'fill' of the boxes is set to transparent by the 'colorProvider' in the component\n        // above. And, the blue outline of the selected time interval is toggled by the 'cssClassAccessor'\n        // method in the above component.\n        {\n            id: \"selection-box\",\n            data: [\n                { category: moment(baseDate, format).toDate(), value: 100 },\n                { category: moment(baseDate, format).add(5, \"minutes\").toDate(), value: 100 },\n                { category: moment(baseDate, format).add(10, \"minutes\").toDate(), value: 100 },\n                { category: moment(baseDate, format).add(15, \"minutes\").toDate(), value: 100 },\n                { category: moment(baseDate, format).add(20, \"minutes\").toDate(), value: 100 },\n                { category: moment(baseDate, format).add(25, \"minutes\").toDate(), value: 100 },\n            ],\n        },\n    ];\n}\n\nfunction getStatusValueMap() {\n    return {\n        [Status.Up]: CHART_PALETTE_CS_S[4],\n        [Status.Warning]: CHART_PALETTE_CS_S[2],\n        [Status.Critical]: CHART_PALETTE_CS_S[1],\n    };\n}\n\nfunction getStatusData() {\n    return [{\n        id: \"series-1\",\n        name: \"Series 1\",\n        data: [\n            {\n                status: Status.Up,\n                start: moment(baseDate, format).toDate(),\n                end: moment(baseDate, format).toDate(),\n            },\n            {\n                status: Status.Warning,\n                start: moment(baseDate, format).add(5, \"minutes\").toDate(),\n                end: moment(baseDate, format).add(5, \"minutes\").toDate(),\n            },\n            {\n                status: Status.Critical,\n                start: moment(baseDate, format).add(10, \"minutes\").toDate(),\n                end: moment(baseDate, format).add(10, \"minutes\").toDate(),\n            },\n            {\n                status: Status.Up,\n                start: moment(baseDate, format).add(15, \"minutes\").toDate(),\n                end: moment(baseDate, format).add(15, \"minutes\").toDate(),\n            },\n            {\n                status: Status.Critical,\n                start: moment(baseDate, format).add(20, \"minutes\").toDate(),\n                end: moment(baseDate, format).add(20, \"minutes\").toDate(),\n            },\n            {\n                status: Status.Up,\n                start: moment(baseDate, format).add(25, \"minutes\").toDate(),\n                end: moment(baseDate, format).add(25, \"minutes\").toDate(),\n            },\n        ],\n    }];\n\n}\n","export default \"import { Component, OnInit, ViewEncapsulation } from \\\"@angular/core\\\";\\nimport {\\n    BandScale,\\n    barAccessors,\\n    BarGridConfig,\\n    BarHighlightStrategy,\\n    BarRenderer,\\n    barScales,\\n    BarStatusGridConfig,\\n    BorderConfig,\\n    Chart,\\n    CHART_PALETTE_CS1,\\n    CHART_PALETTE_CS_S,\\n    convert,\\n    DataAccessor,\\n    DATA_POINT_NOT_FOUND,\\n    IAccessors,\\n    IBarRendererConfig,\\n    IChartEvent,\\n    IDataPoint,\\n    IDataSeries,\\n    IInteractionDataPointsEvent,\\n    IInteractionValues,\\n    IInteractionValuesPayload,\\n    InteractionLabelPlugin,\\n    InteractionLinePlugin,\\n    InteractionType,\\n    INTERACTION_DATA_POINTS_EVENT,\\n    INTERACTION_VALUES_EVENT,\\n    IXYScales,\\n    MappedValueProvider,\\n    MOUSE_ACTIVE_EVENT,\\n    SelectedDatPointIdxFn,\\n    StatusAccessors,\\n    statusAccessors,\\n    TimeIntervalScale,\\n    UtilityService,\\n    XYGrid,\\n} from \\\"@nova-ui/charts\\\";\\nimport isEmpty from \\\"lodash/isEmpty\\\";\\nimport isUndefined from \\\"lodash/isUndefined\\\";\\nimport moment, { duration } from \\\"moment/moment\\\";\\n\\nconst format = \\\"YYYY-MM-DDTHH:mm:ssZ\\\";\\nconst baseDate = \\\"2016-12-25T15:05:00Z\\\";\\n\\nenum Status {\\n    Up = \\\"up\\\",\\n    Warning = \\\"warning\\\",\\n    Critical = \\\"critical\\\",\\n}\\n\\n@Component({\\n    templateUrl: \\\"./data-point-selection-prototype.component.html\\\",\\n    styleUrls: [\\\"./data-point-selection-prototype.component.less\\\"],\\n    encapsulation: ViewEncapsulation.None,\\n})\\nexport class DataPointSelectionPrototypeComponent implements OnInit {\\n    public barChart: Chart;\\n    public statusChart: Chart;\\n\\n    // Use the same 'x' scale id for both charts to ensure that interaction events such as hover are shared between the charts\\n    private xScaleId = \\\"xScale\\\";\\n\\n    private selectedDataPoints: Record<string, IDataPoint> = {};\\n    private labelPlugin = new InteractionLabelPlugin();\\n    private renderer: BarRenderer;\\n    private selectedLabelPosition?: IInteractionValues;\\n\\n    private colorProvider = {\\n        // sets the bars used to visualize the selection box to 'transparent'. All other bars just use the first color in the CS1 palette.\\n        get: (seriesId: string) => seriesId === \\\"selection-box\\\" ? \\\"transparent\\\" : CHART_PALETTE_CS1[0],\\n        reset: () => { },\\n    };\\n\\n    public ngOnInit() {\\n        this.setUpBarChart();\\n        this.setUpStatusChart();\\n    }\\n\\n    public onReset() {\\n        // Reset the stored selection\\n        this.selectedDataPoints = {};\\n        this.selectedLabelPosition = undefined;\\n\\n        // Redraw the charts\\n        this.redrawCharts();\\n\\n        // Re-enable interaction label updates and hide the label by emitting a mouse move 'INTERACTION_VALUES_EVENT' with empty values.\\n        this.labelPlugin.areLabelUpdatesEnabled = true;\\n        this.barChart.getEventBus().getStream(INTERACTION_VALUES_EVENT).next({ data: { interactionType: InteractionType.MouseMove, values: {} } });\\n    }\\n\\n    private setUpBarChart() {\\n        this.barChart = new Chart(this.configureBarGrid());\\n        this.barChart.addPlugin(new InteractionLinePlugin());\\n        this.barChart.addPlugin(this.labelPlugin);\\n\\n        // Setting up data point click handling\\n        this.barChart.getEventBus().getStream(INTERACTION_DATA_POINTS_EVENT).subscribe(this.handleDataPointsInteraction);\\n        // Setting up interaction label update handling\\n        this.barChart.getEventBus().getStream(INTERACTION_VALUES_EVENT).subscribe(this.handleInteractionLabelUpdates);\\n        // Setting up what happens on chart mouseenter and mouseleave\\n        this.barChart.getEventBus().getStream(MOUSE_ACTIVE_EVENT).subscribe(this.handleMouseActive);\\n\\n        // The color provider sets the selection boxes to 'transparent'\\n        const accessors = barAccessors({}, this.colorProvider);\\n        // The 'cssClassAccessor' updates the stroke color of the selection box when a time interval is selected\\n        accessors.data.cssClass = this.cssClassAccessor;\\n\\n        const scales = barScales();\\n        // Use the same 'x' scale id as the status chart to ensure that interaction events such as hover are shared between the charts\\n        scales.x = new TimeIntervalScale(duration(5, \\\"minutes\\\"), this.xScaleId);\\n\\n        // The 'barThickness' method sets the selection box width to be larger than the standard bars\\n        accessors.data.thickness = this.barThickness(scales);\\n\\n        const rendererConfig: IBarRendererConfig = {\\n            // Supply a 'selectedDataPointIdxFn' to the 'BarHighlightStrategy' to prevent the selected bar\\n            // from being deemphasized/grayed out as the chart is hovered.\\n            highlightStrategy: new BarHighlightStrategy(\\\"x\\\", 1, this.selectedDataPointIdxFn),\\n            cursor: \\\"pointer\\\",\\n        };\\n        this.renderer = new BarRenderer(rendererConfig);\\n\\n        // Initialize the bar chart\\n        this.barChart.update(getData().map(s => ({\\n            ...s,\\n            accessors,\\n            renderer: this.renderer,\\n            scales,\\n        })));\\n    }\\n\\n    private setUpStatusChart() {\\n        this.statusChart = new Chart(this.configureStatusGrid());\\n        this.statusChart.addPlugin(new InteractionLinePlugin());\\n\\n        // Setting up the status chart scales\\n        const statusYScale = new BandScale();\\n        statusYScale.fixDomain(StatusAccessors.STATUS_DOMAIN);\\n        // Use the same 'x' scale id as the bar chart to ensure that interaction events such as hover are shared between the charts\\n        const statusXScale = new TimeIntervalScale(duration(5, \\\"minutes\\\"), this.xScaleId);\\n        statusXScale.fixDomain([moment(baseDate, format).toDate(), moment(baseDate, format).add(25, \\\"minutes\\\").toDate()]);\\n        const statusScales = {\\n            x: statusXScale,\\n            y: statusYScale,\\n        };\\n\\n        // Setting up the status chart accessors\\n        const myStatusAccessors = statusAccessors(new MappedValueProvider<string>(getStatusValueMap()));\\n        myStatusAccessors.data.thickness = (data: any) => data.status === Status.Up ? BarRenderer.THIN : BarRenderer.THICK;\\n\\n        // The 'cssClassAccessor' updates the stroke color of the selection box when a time interval is selected\\n        // TODO: Implement 'selection-box' series for displaying the selection box on the status chart. For reference,\\n        // see 'selection-box' data series on the bar chart.\\n        myStatusAccessors.data.cssClass = this.cssClassAccessor;\\n\\n        // Initializing the status chart\\n        this.statusChart.update(getStatusData()\\n            .map(d => ({\\n                ...d,\\n                accessors: myStatusAccessors,\\n                renderer: this.renderer,\\n                scales: statusScales,\\n            })));\\n    }\\n\\n    private configureBarGrid() {\\n        const gridConfig = new BarGridConfig();\\n\\n        gridConfig.axis.left.visible = false;\\n        gridConfig.axis.left.gridTicks = false;\\n        // Disable 'axis.bottom.fit' to set left and right margins manually\\n        gridConfig.axis.bottom.fit = false;\\n        gridConfig.borders.top = new BorderConfig();\\n        gridConfig.cursor = \\\"pointer\\\";\\n        gridConfig.dimension.padding.top = 0;\\n        // Synchronize the left and right margins (left margin default is 30px)\\n        gridConfig.dimension.margin.right = gridConfig.dimension.margin.left;\\n\\n        // Use these settings to make the bar chart the same height as the status chart\\n        // gridConfig.dimension.autoHeight = false;\\n        // gridConfig.dimension.height(30);\\n\\n        return new XYGrid(gridConfig);\\n    }\\n\\n    private configureStatusGrid() {\\n        const gridConfig = new BarStatusGridConfig();\\n\\n        gridConfig.axis.bottom.visible = false;\\n        gridConfig.cursor = \\\"pointer\\\";\\n        gridConfig.dimension.margin.bottom = 0;\\n        // Synchronize the left and right margins (left margin default is 30px)\\n        gridConfig.dimension.margin.right = gridConfig.dimension.margin.left;\\n        gridConfig.borders.bottom.visible = false;\\n\\n        return new XYGrid(gridConfig);\\n    }\\n\\n    private redrawCharts() {\\n        this.barChart.update(this.barChart.getDataManager().chartSeriesSet);\\n        this.statusChart.update(this.statusChart.getDataManager().chartSeriesSet);\\n    }\\n\\n    private handleDataPointsInteraction = (event: IChartEvent) => {\\n        const data: IInteractionDataPointsEvent = event.data;\\n        // we're interested in data point click events here\\n        if (data.interactionType === InteractionType.Click) {\\n            // set the selected data points\\n            this.selectedDataPoints = data.dataPoints;\\n\\n            if (this.renderer.config.stateStyles) {\\n                // change the bar container opacity from 0.1 to 0.3\\n                this.renderer.config.stateStyles.deemphasized = { opacity: 0.3 };\\n            }\\n\\n            // redraw the charts to apply the selected data point style\\n            this.redrawCharts();\\n\\n            // store the interaction label position for the selected data point\\n            this.selectedLabelPosition = this.calculateInteractionLabelPosition(data);\\n\\n            // apply the label position based on the click\\n            this.barChart.getEventBus().getStream(INTERACTION_VALUES_EVENT).next({\\n                data: { interactionType: InteractionType.MouseMove, values: this.selectedLabelPosition },\\n            });\\n        }\\n    }\\n\\n    private handleInteractionLabelUpdates = (event: IChartEvent) => {\\n        const data: IInteractionValuesPayload = event.data;\\n\\n        // The condition checks whether the mouse has moved away from the chart and a selected label position is stored\\n        if (data.interactionType === InteractionType.MouseMove && isEmpty(data.values) && this.selectedLabelPosition) {\\n\\n            // ensure label updates are enabled\\n            this.labelPlugin.areLabelUpdatesEnabled = true;\\n\\n            // Update the label with the stored label position by manually emitting an 'INTERACTION_VALUES_EVENT'.\\n            // Note that 'broadcast' is set to 'true' to let the 'nuiChartCollection' directive know that the event is\\n            // coming from outside the chart and should not propagate to other charts in the collection.\\n            this.barChart.getEventBus().getStream(INTERACTION_VALUES_EVENT).next({\\n                data: { interactionType: InteractionType.MouseMove, values: this.selectedLabelPosition },\\n                broadcast: true,\\n            });\\n\\n            // disable further label updates\\n            this.labelPlugin.areLabelUpdatesEnabled = false;\\n\\n        } else if (data.interactionType === InteractionType.MouseMove && !isEmpty(data.values)) {\\n\\n            // allow label updates while the mouse is hovering over the chart\\n            this.labelPlugin.areLabelUpdatesEnabled = true;\\n        }\\n    }\\n\\n    private handleMouseActive = (event: IChartEvent) => {\\n        if (this.renderer.config.stateStyles) {\\n            if (!isEmpty(this.selectedDataPoints) && !event.data) {\\n                // if there's a selected data point and the mouse has moved away\\n                // from the chart, set the bar container opacity to 0.3\\n                this.renderer.config.stateStyles.deemphasized = { opacity: 0.3 };\\n            } else if (event.data) {\\n                // if the mouse is over the chart set the bar container opacity to 0.3\\n                this.renderer.config.stateStyles.deemphasized = { opacity: 0.1 };\\n            }\\n        }\\n\\n        if (this.barChart.getDataManager().chartSeriesSet.length > 0 && this.statusChart.getDataManager().chartSeriesSet.length > 0) {\\n            // redraw the charts if we have data\\n            this.redrawCharts();\\n        }\\n    }\\n\\n    /**\\n     * Sets the width of the bars on the bar chart. (This is only necessary if you want the selection boxes\\n     * to be wider than the standard bars).\\n     */\\n    private barThickness(scales: IXYScales): DataAccessor<any, any> {\\n        return (d: any, i: number, series: any[], dataSeries: IDataSeries<IAccessors>) => {\\n            let thickness: number;\\n            const x1 = convert(scales.x, dataSeries.accessors.data?.[\\\"startX\\\"]?.(d, i, dataSeries.data, dataSeries), 0);\\n            const x2 = convert(scales.x, dataSeries.accessors.data?.[\\\"endX\\\"]?.(d, i, dataSeries.data, dataSeries), 1);\\n            thickness = Math.abs(x1 - x2);\\n\\n            // Allow the selection boxes to be a little wider than the data bars\\n            thickness -= dataSeries.id === \\\"selection-box\\\" ? 2 : 6;\\n            thickness = Math.max(thickness, BarRenderer.MIN_BAR_THICKNESS);\\n            return thickness;\\n        };\\n    }\\n\\n    /**\\n     * Allows the 'BarHighlightingStrategy' to know which data point (or bar) on a series is selected, if any.\\n     * Return 'DATA_POINT_NOT_FOUND' if no data point is selected on the specified series.\\n     */\\n    private selectedDataPointIdxFn: SelectedDatPointIdxFn = (seriesId: string): number => this.selectedDataPoints?.[seriesId]?.index ?? DATA_POINT_NOT_FOUND;\\n\\n    /**\\n     * Sets the stroke color of the selection box when a time interval is selected\\n     *\\n     * @returns The 'selected' class (see less file) if a bar is selected, the series id matches the selection box series, and the\\n     * selected data point index matches the current index; otherwise, returns an empty string.\\n     */\\n    private cssClassAccessor = (d: any, i: number, series: any, dataSeries: any): string =>\\n        !isEmpty(this.selectedDataPoints) && dataSeries.id === \\\"selection-box\\\" && this.selectedDataPoints[dataSeries.id]?.index === i ? \\\"selected\\\" : \\\"\\\"\\n\\n    /**\\n     * Calculates the desired position of the interaction label based on the position of the first data point in the event payload\\n     */\\n    private calculateInteractionLabelPosition(data: IInteractionDataPointsEvent): IInteractionValues {\\n        const sampleDataPoint = data.dataPoints[Object.keys(data.dataPoints)[0]];\\n        const xScales = [sampleDataPoint.dataSeries.scales.x];\\n        const yScales = [sampleDataPoint.dataSeries.scales.y];\\n\\n        if (!sampleDataPoint.position || isUndefined(sampleDataPoint.position.width) || isUndefined(sampleDataPoint.position.height)) {\\n            throw new Error(\\\"Can't calculate x and y values\\\");\\n        }\\n\\n        const xCoordinate = sampleDataPoint.position.x + sampleDataPoint.position.width / 2;\\n        const yCoordinate = sampleDataPoint.position.y + sampleDataPoint.position.height / 2;\\n\\n        return UtilityService.getXYValues(xScales, yScales, xCoordinate, yCoordinate);\\n    }\\n}\\n\\n/* Chart data */\\nfunction getData() {\\n    return [\\n        {\\n            id: \\\"series-1\\\",\\n            data: [\\n                { category: moment(baseDate, format).toDate(), value: 66 },\\n                { category: moment(baseDate, format).add(5, \\\"minutes\\\").toDate(), value: 14 },\\n                { category: moment(baseDate, format).add(10, \\\"minutes\\\").toDate(), value: 25 },\\n                { category: moment(baseDate, format).add(15, \\\"minutes\\\").toDate(), value: 55 },\\n                { category: moment(baseDate, format).add(20, \\\"minutes\\\").toDate(), value: 33 },\\n                { category: moment(baseDate, format).add(25, \\\"minutes\\\").toDate(), value: 5 },\\n            ],\\n        },\\n\\n        // The sole purpose of this series is to define the selection boxes that have a togglable selection\\n        // outline. The 'fill' of the boxes is set to transparent by the 'colorProvider' in the component\\n        // above. And, the blue outline of the selected time interval is toggled by the 'cssClassAccessor'\\n        // method in the above component.\\n        {\\n            id: \\\"selection-box\\\",\\n            data: [\\n                { category: moment(baseDate, format).toDate(), value: 100 },\\n                { category: moment(baseDate, format).add(5, \\\"minutes\\\").toDate(), value: 100 },\\n                { category: moment(baseDate, format).add(10, \\\"minutes\\\").toDate(), value: 100 },\\n                { category: moment(baseDate, format).add(15, \\\"minutes\\\").toDate(), value: 100 },\\n                { category: moment(baseDate, format).add(20, \\\"minutes\\\").toDate(), value: 100 },\\n                { category: moment(baseDate, format).add(25, \\\"minutes\\\").toDate(), value: 100 },\\n            ],\\n        },\\n    ];\\n}\\n\\nfunction getStatusValueMap() {\\n    return {\\n        [Status.Up]: CHART_PALETTE_CS_S[4],\\n        [Status.Warning]: CHART_PALETTE_CS_S[2],\\n        [Status.Critical]: CHART_PALETTE_CS_S[1],\\n    };\\n}\\n\\nfunction getStatusData() {\\n    return [{\\n        id: \\\"series-1\\\",\\n        name: \\\"Series 1\\\",\\n        data: [\\n            {\\n                status: Status.Up,\\n                start: moment(baseDate, format).toDate(),\\n                end: moment(baseDate, format).toDate(),\\n            },\\n            {\\n                status: Status.Warning,\\n                start: moment(baseDate, format).add(5, \\\"minutes\\\").toDate(),\\n                end: moment(baseDate, format).add(5, \\\"minutes\\\").toDate(),\\n            },\\n            {\\n                status: Status.Critical,\\n                start: moment(baseDate, format).add(10, \\\"minutes\\\").toDate(),\\n                end: moment(baseDate, format).add(10, \\\"minutes\\\").toDate(),\\n            },\\n            {\\n                status: Status.Up,\\n                start: moment(baseDate, format).add(15, \\\"minutes\\\").toDate(),\\n                end: moment(baseDate, format).add(15, \\\"minutes\\\").toDate(),\\n            },\\n            {\\n                status: Status.Critical,\\n                start: moment(baseDate, format).add(20, \\\"minutes\\\").toDate(),\\n                end: moment(baseDate, format).add(20, \\\"minutes\\\").toDate(),\\n            },\\n            {\\n                status: Status.Up,\\n                start: moment(baseDate, format).add(25, \\\"minutes\\\").toDate(),\\n                end: moment(baseDate, format).add(25, \\\"minutes\\\").toDate(),\\n            },\\n        ],\\n    }];\\n\\n}\\n\";","export default \"<nui-example-wrapper filenamePrefix=\\\"data-point-selection-prototype\\\" exampleTitle=\\\"Data Point Selection Prototype\\\">\\n    <nui-message type=\\\"critical\\\" [allowDismiss]=\\\"false\\\">\\n        <strong>Note:</strong> This is only a prototype, so its implementation is unpolished. Please\\n        use discretion when copying the code as there are likely solutions more concise and/or\\n        elegant than those presented here.\\n        <strong>For assistance, please contact Blake Simmon or Lukas Holcik.</strong>\\n    </nui-message>\\n    <hr>\\n    <nui-chart class=\\\"d-flex chart\\\" [chart]=\\\"statusChart\\\" nuiChartCollectionId=\\\"collection\\\"></nui-chart>\\n    <nui-chart class=\\\"d-flex chart\\\" [chart]=\\\"barChart\\\" nuiChartCollectionId=\\\"collection\\\"></nui-chart>\\n    <hr>\\n    <button type=\\\"button\\\" nui-button (click)=\\\"onReset()\\\">Reset</button>\\n</nui-example-wrapper>\\n\";","export default \"import { NgModule } from \\\"@angular/core\\\";\\nimport { RouterModule, Routes } from \\\"@angular/router\\\";\\nimport { DEMO_PATH_TOKEN, NuiButtonModule, NuiDocsModule, NuiIconModule, NuiMessageModule } from \\\"@nova-ui/bits\\\";\\nimport { NuiChartsModule } from \\\"@nova-ui/charts\\\";\\n\\nimport { DemoCommonModule } from \\\"../../common/demo-common.module\\\";\\n\\nimport { DataPointSelectionPrototypeComponent } from \\\"./data-point-selection-prototype.component\\\";\\n\\nconst routes: Routes = [\\n    {\\n        path: \\\"\\\",\\n        component: DataPointSelectionPrototypeComponent,\\n        data: {\\n            \\\"srlc\\\": {\\n                \\\"hideIndicator\\\": true,\\n            },\\n        },\\n    },\\n];\\n\\n@NgModule({\\n    declarations: [\\n        DataPointSelectionPrototypeComponent,\\n    ],\\n    imports: [\\n        DemoCommonModule,\\n        NuiButtonModule,\\n        NuiDocsModule,\\n        NuiMessageModule,\\n        NuiChartsModule,\\n        NuiIconModule,\\n        RouterModule.forChild(routes),\\n    ],\\n    providers: [\\n        { provide: DEMO_PATH_TOKEN, useFactory: () =>  (<any> require).context(`!!raw-loader!./`, true, /.*\\\\.(ts|html|less)$/)},\\n    ],\\n})\\nexport class DataPointSelectionPrototypeModule {\\n}\\n\";","var map = {\n\t\"./data-point-selection-prototype.component.html\": \"IPrL\",\n\t\"./data-point-selection-prototype.component.less\": \"emcV\",\n\t\"./data-point-selection-prototype.component.ts\": \"E2It\",\n\t\"./data-point-selection-prototype.module.ts\": \"Onqy\"\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = \"YAGT\";","import { NgModule } from \"@angular/core\";\nimport { RouterModule, Routes } from \"@angular/router\";\nimport { DEMO_PATH_TOKEN, NuiButtonModule, NuiDocsModule, NuiIconModule, NuiMessageModule } from \"@nova-ui/bits\";\nimport { NuiChartsModule } from \"@nova-ui/charts\";\n\nimport { DemoCommonModule } from \"../../common/demo-common.module\";\n\nimport { DataPointSelectionPrototypeComponent } from \"./data-point-selection-prototype.component\";\n\nconst routes: Routes = [\n    {\n        path: \"\",\n        component: DataPointSelectionPrototypeComponent,\n        data: {\n            \"srlc\": {\n                \"hideIndicator\": true,\n            },\n        },\n    },\n];\n\n@NgModule({\n    declarations: [\n        DataPointSelectionPrototypeComponent,\n    ],\n    imports: [\n        DemoCommonModule,\n        NuiButtonModule,\n        NuiDocsModule,\n        NuiMessageModule,\n        NuiChartsModule,\n        NuiIconModule,\n        RouterModule.forChild(routes),\n    ],\n    providers: [\n        { provide: DEMO_PATH_TOKEN, useFactory: () =>  (<any> require).context(`!!raw-loader!./`, true, /.*\\.(ts|html|less)$/)},\n    ],\n})\nexport class DataPointSelectionPrototypeModule {\n}\n","export default \".selected {\\n    stroke: #52d9e3 !important;\\n}\\n\\n.chart {\\n    max-width: 800px;\\n}\\n\";","export default \".selected {\\n  stroke: #52d9e3 !important;\\n}\\n.chart {\\n  max-width: 800px;\\n}\\n\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImRhdGEtcG9pbnQtc2VsZWN0aW9uLXByb3RvdHlwZS5jb21wb25lbnQubGVzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUNJLDBCQUFBO0FBQ0o7QUFFQTtFQUNJLGdCQUFBO0FBQUoiLCJmaWxlIjoiZGF0YS1wb2ludC1zZWxlY3Rpb24tcHJvdG90eXBlLmNvbXBvbmVudC5sZXNzIiwic291cmNlc0NvbnRlbnQiOlsiLnNlbGVjdGVkIHtcbiAgICBzdHJva2U6ICM1MmQ5ZTMgIWltcG9ydGFudDtcbn1cblxuLmNoYXJ0IHtcbiAgICBtYXgtd2lkdGg6IDgwMHB4O1xufVxuIl19 */\";"]}