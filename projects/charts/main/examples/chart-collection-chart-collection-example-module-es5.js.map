{"version":3,"sources":["webpack:///examples/components/demo/development/chart-collection/chart-collection-test/chart-collection-test.component.ts","webpack:///examples/components/demo/development/chart-collection/chart-collection-example.module.ts","webpack:///examples/components/demo/development/chart-collection/chart-collection-test/chart-collection-test.component.html"],"names":["ChartCollectionTestComponent","changeDetection","myCharts","chartCount","i","chart","myChart","chartAssist","scales","x","y","renderer","accessors","push","forEach","index","update","generateChartAssistSeriesSet","detectChanges","dataSeriesCount","timeLineSeriesSet","generateDataSeriesSet","map","dataSeries","showInLegend","chartIndex","chartNumber","Array","from","keys","seriesNumber","id","name","data","mockTimeLineData","selector","template","collectionRoutes","path","component","ChartCollectionExampleModule","declarations","imports","forChild"],"mappings":"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","file":"chart-collection-chart-collection-example-module-es5.js","sourcesContent":["import { AfterViewInit, ChangeDetectorRef, Component, OnInit, QueryList, ViewChildren } from \"@angular/core\";\nimport {\n    Chart, ChartAssist, ChartComponent, IAccessors, IChart, IChartAssistSeries, LineAccessors, LinearScale, LineRenderer, Scales, TimeScale, XYGrid,\n} from \"@nova-ui/charts\";\n\nimport { DataGenerator } from \"../../../../../data-generator\";\n\ninterface IMyChart {\n    chart: IChart;\n    chartAssist: ChartAssist;\n    scales: Scales;\n    renderer: LineRenderer;\n    accessors: LineAccessors;\n}\n\n/**\n * This is here just to test a prototype of angular component, that will use new chart core\n *\n * @ignore\n */\n@Component({\n    selector: \"nui-chart-collection-test\",\n    templateUrl: \"./chart-collection-test.component.html\",\n})\nexport class ChartCollectionTestComponent implements OnInit, AfterViewInit {\n    @ViewChildren(ChartComponent) charts: QueryList<ChartComponent>;\n\n    public myCharts: IMyChart[] = [];\n    private chartCount = 2;\n\n    constructor(private changeDetection: ChangeDetectorRef) {\n        for (let i = 0; i < this.chartCount; i++) {\n            const chart = new Chart(new XYGrid());\n\n            const myChart = {\n                chart,\n                chartAssist: new ChartAssist(chart),\n                scales: { x: new TimeScale(\"x\"), y: new LinearScale() },\n                renderer: new LineRenderer(),\n                accessors: new LineAccessors(),\n            };\n            this.myCharts.push(myChart);\n        }\n    }\n\n    public ngOnInit() {\n    }\n\n    public ngAfterViewInit() {\n        this.myCharts.forEach((myChart, index: number) => {\n            myChart.chartAssist.update(this.generateChartAssistSeriesSet(myChart, 4, index));\n        });\n        this.changeDetection.detectChanges();\n    }\n\n    private generateChartAssistSeriesSet(myChart: IMyChart, dataSeriesCount: number, index: number): IChartAssistSeries<IAccessors>[] {\n        const timeLineSeriesSet = this.generateDataSeriesSet(dataSeriesCount, index);\n\n        return timeLineSeriesSet.map(dataSeries => ({\n            ...dataSeries,\n            scales: myChart.scales,\n            renderer: myChart.renderer,\n            accessors: myChart.accessors,\n            showInLegend: true,\n        }));\n    }\n\n    private generateDataSeriesSet(dataSeriesCount: number, chartIndex: number) {\n        const chartNumber = chartIndex + 1;\n        return Array.from(Array(dataSeriesCount).keys()).map((i) => {\n            const seriesNumber = i + 1;\n            return {\n                id: `series-${chartNumber}-${seriesNumber}`,\n                name: `Series ${chartNumber}-${seriesNumber}`,\n                data: DataGenerator.mockTimeLineData(seriesNumber * 10),\n            };\n        });\n    }\n}\n","import { NgModule } from \"@angular/core\";\nimport { RouterModule, Routes } from \"@angular/router\";\nimport { NuiDividerModule } from \"@nova-ui/bits\";\nimport { NuiChartsModule } from \"@nova-ui/charts\";\n\nimport { DemoCommonModule } from \"../../common/demo-common.module\";\n\nimport { ChartCollectionTestComponent } from \"./chart-collection-test/chart-collection-test.component\";\n\nconst collectionRoutes: Routes = [\n    {\n        path: \"\",\n        component: ChartCollectionTestComponent,\n    },\n];\n\n@NgModule({\n    declarations: [\n        ChartCollectionTestComponent,\n    ],\n    imports: [\n        DemoCommonModule,\n        NuiChartsModule,\n        NuiDividerModule,\n        RouterModule.forChild(collectionRoutes),\n    ],\n})\nexport class ChartCollectionExampleModule {\n}\n","export default \"<div [style.min-height]=\\\"150\\\" *ngFor=\\\"let myChart of myCharts; let i = index\\\">\\n    <div class=\\\"d-flex w-100 h-100\\\">\\n        <nui-chart class=\\\"w-100\\\" nuiChartCollectionId=\\\"1\\\"\\n                   [chart]=\\\"myChart.chart\\\"></nui-chart>\\n    </div>\\n    <nui-divider *ngIf=\\\"myCharts.length - 1 > i\\\"></nui-divider>\\n</div>\\n\";"]}