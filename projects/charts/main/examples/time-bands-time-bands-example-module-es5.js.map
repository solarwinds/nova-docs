{"version":3,"sources":["webpack:///examples/components/demo/development/time-bands/time-bands-example.module.ts","webpack:///examples/components/demo/development/time-bands/line-time-series/line-time-series-test.component.html","webpack:///examples/components/demo/development/time-bands/line-time-series/line-time-series-test.component.ts"],"names":["collectionRoutes","path","component","TimeBandsExampleModule","declarations","imports","forChild","format","LineTimeSeriesTestComponent","chart","palette","addPlugin","scales","x","fixDomain","toDate","y","lines","getLines","bars","getBars","update","renderer","accessors","series","color","seriesId","standardColors","get","name","id","data","map","s","undefined","backgroundColors","start","d","value","end","category","selector","template"],"mappings":"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","file":"time-bands-time-bands-example-module-es5.js","sourcesContent":["import { NgModule } from \"@angular/core\";\nimport { RouterModule, Routes } from \"@angular/router\";\nimport { NuiChartsModule } from \"@nova-ui/charts\";\n\nimport { DemoCommonModule } from \"../../common/demo-common.module\";\n\nimport { LineTimeSeriesTestComponent } from \"./line-time-series/line-time-series-test.component\";\n\nconst collectionRoutes: Routes = [\n    {\n        path: \"line\",\n        component: LineTimeSeriesTestComponent,\n    },\n];\n\n@NgModule({\n    declarations: [\n        LineTimeSeriesTestComponent,\n    ],\n    imports: [\n        DemoCommonModule,\n        NuiChartsModule,\n        RouterModule.forChild(collectionRoutes),\n    ],\n})\nexport class TimeBandsExampleModule {\n}\n","export default \"<nui-chart class=\\\"d-flex\\\" [chart]=\\\"chart\\\"></nui-chart>\\n\";","import { Component, OnInit } from \"@angular/core\";\nimport {\n    barAccessors, BarRenderer, Chart, ChartPalette, CHART_PALETTE_CS1, LineAccessors, LinearScale, LineRenderer, Scales, TimeIntervalScale, XYGrid, ZoomPlugin,\n} from \"@nova-ui/charts\";\nimport moment, { duration } from \"moment/moment\";\n\nconst format = \"YYYY-MM-DDTHH:mm:ssZ\";\n\n@Component({\n    selector: \"nui-line-time-series-test\",\n    templateUrl: \"./line-time-series-test.component.html\",\n})\nexport class LineTimeSeriesTestComponent implements OnInit {\n\n    // XYGrid is used for rendering the axes\n    public chart = new Chart(new XYGrid());\n    public palette = new ChartPalette(CHART_PALETTE_CS1);\n\n    public ngOnInit() {\n        this.chart.addPlugin(new ZoomPlugin());\n\n        // In case of a line chart, the scale definitions are flexible.\n        // This example demonstrates a scenario with time on the X scale and a numeric value on the Y scale.\n        const scales: Scales = {\n            x: new TimeIntervalScale(duration(5, \"minutes\"))\n                .fixDomain([\n                    moment(\"2016-12-25T14:30:00Z\", format).toDate(),\n                    moment(\"2016-12-25T18:00:00Z\", format).toDate(),\n                ]),\n            y: new LinearScale(),\n        };\n        const lines = this.getLines(scales);\n        const bars = this.getBars(scales);\n\n        this.chart.update([...lines, ...bars]);\n    }\n\n    private getLines(scales: Scales) {\n        // The line renderer will make the chart look like a line chart.\n        const renderer = new LineRenderer();\n        const accessors = new LineAccessors();\n        accessors.series.color = (seriesId, series) => this.palette.standardColors.get(series.name);\n\n        return [\n            {\n                id: \"series-1\",\n                name: \"Series 1\",\n                data: [\n                    { x: moment(\"2016-12-25T15:00:00Z\", format).toDate(), y: 30 },\n                    { x: moment(\"2016-12-25T15:21:00Z\", format).toDate(), y: 95 },\n                    { x: moment(\"2016-12-25T15:44:00Z\", format).toDate(), y: 15 },\n                    { x: moment(\"2016-12-25T16:00:00Z\", format).toDate(), y: 60 },\n                    { x: moment(\"2016-12-25T17:30:00Z\", format).toDate(), y: 35 },\n                ],\n            },\n            {\n                id: \"series-2\",\n                name: \"Series 2\",\n                data: [\n                    { x: moment(\"2016-12-25T15:00:00Z\", format).toDate(), y: 60 },\n                    { x: moment(\"2016-12-25T15:10:00Z\", format).toDate(), y: 40 },\n                    { x: moment(\"2016-12-25T15:45:00Z\", format).toDate(), y: 70 },\n                    { x: moment(\"2016-12-25T16:15:00Z\", format).toDate(), y: 45 },\n                    { x: moment(\"2016-12-25T17:20:00Z\", format).toDate(), y: 90 },\n                ],\n            },\n        ].map(s => ({\n            ...s,\n            scales,\n            renderer,\n            accessors,\n        }));\n    }\n\n    private getBars(scales: Scales) {\n        // The line renderer will make the chart look like a line chart.\n        const renderer = new BarRenderer();\n        const accessors = barAccessors(undefined, this.palette.backgroundColors);\n        accessors.data.start = (d) => d.value / 2;\n        accessors.data.end = (d) => d.value * 1.5;\n\n        return [\n            {\n                id: \"bars-1\",\n                name: \"Series 1\",\n                data: [\n                    { category: moment(\"2016-12-25T15:00:00Z\", format).toDate(), value: 30 },\n                    { category: moment(\"2016-12-25T15:20:00Z\", format).toDate(), value: 95 },\n                    { category: moment(\"2016-12-25T15:40:00Z\", format).toDate(), value: 15 },\n                    { category: moment(\"2016-12-25T16:00:00Z\", format).toDate(), value: 60 },\n                    { category: moment(\"2016-12-25T17:30:00Z\", format).toDate(), value: 35 },\n                ],\n            },\n            {\n                id: \"bars-2\",\n                name: \"Series 2\",\n                data: [\n                    { category: moment(\"2016-12-25T15:00:00Z\", format).toDate(), value: 60 },\n                    { category: moment(\"2016-12-25T15:10:00Z\", format).toDate(), value: 40 },\n                    { category: moment(\"2016-12-25T15:45:00Z\", format).toDate(), value: 70 },\n                    { category: moment(\"2016-12-25T16:15:00Z\", format).toDate(), value: 45 },\n                    { category: moment(\"2016-12-25T17:20:00Z\", format).toDate(), value: 90 },\n                ],\n            },\n        ].map(s => ({\n            ...s,\n            scales,\n            renderer,\n            accessors,\n        }));\n    }\n}\n"]}