{"version":3,"sources":["./examples/components/demo/development/type-switch/one-dimensional-data-example/one-dimensional-data.example.component.ts","./examples/components/demo/development/type-switch/one-dimensional-data-example/one-dimensional-data.example.component.html","./examples/components/demo/development/type-switch/two-dimensional-data-example/two-dimensional-data.example.component.ts","./examples/components/demo/development/type-switch/type-switch-example.module.ts","./examples/components/demo/development/type-switch/two-dimensional-data-example/two-dimensional-data.example.component.html"],"names":[],"mappings":"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","file":"type-switch-type-switch-example-module-es2015.js","sourcesContent":["import { Component, OnInit } from \"@angular/core\";\nimport {\n    BandScale, barGrid, BarRenderer, Chart, ChartAssist, ChartDonutContentPlugin, CHART_PALETTE_CS_S, getAutomaticDomainWithIncludedInterval,\n    HorizontalBarAccessors, IAccessors, IScale, LinearScale, MappedValueProvider, PieRenderer, radial, RadialAccessors, radialGrid, RadialRenderer,\n    radialScales, Renderer, Scales, VerticalBarAccessors,\n} from \"@nova-ui/charts\";\nimport zipObject from \"lodash/zipObject\";\n\n@Component({\n    selector: \"nui-chart-one-dimensional-data-example\",\n    templateUrl: \"./one-dimensional-data.example.component.html\",\n})\nexport class OneDimensionalDataExampleComponent implements OnInit {\n    public chartTypes = [\"horizontal bar\", \"vertical bar\", \"pie\", \"donut\"];\n    public chartType = this.chartTypes[0];\n    public categories = [\"down\", \"critical\", \"warning\", \"unknown\", \"ok\", \"other\"];\n    public iconNames = [\"down\", \"critical\", \"warning\", \"unknown\", \"up\", \"unmanaged\"];\n    public values = [24, 16, 7, 6, 97, 4];\n    public iconMap = zipObject(this.categories, this.iconNames.map(n => `status_${n}`));\n    private colorProvider = new MappedValueProvider<string>(zipObject(this.categories, CHART_PALETTE_CS_S));\n\n    public chartAssist: ChartAssist;\n    public donutContentPlugin?: ChartDonutContentPlugin;\n\n    public ngOnInit() {\n        this.updateChartType();\n    }\n\n    public updateChartType() {\n        this.buildChart();\n        this.chartAssist.chart.updateDimensions();\n\n        this.updateChart();\n    }\n\n    private buildChart() {\n        this.donutContentPlugin = undefined;\n\n        switch (this.chartType) {\n            case \"horizontal bar\": {\n                this.chartAssist = new ChartAssist(new Chart(barGrid({ horizontal: true })));\n                break;\n            }\n            case \"vertical bar\": {\n                this.chartAssist = new ChartAssist(new Chart(barGrid({ horizontal: false })));\n                break;\n            }\n            case \"pie\": {\n                this.chartAssist = new ChartAssist(new Chart(radialGrid()), radial);\n                break;\n            }\n            case \"donut\": {\n                this.donutContentPlugin = new ChartDonutContentPlugin();\n                this.chartAssist = new ChartAssist(new Chart(radialGrid()), radial);\n                this.chartAssist.chart.addPlugin(this.donutContentPlugin);\n                break;\n            }\n        }\n    }\n\n    private getRenderer(): PieRenderer | BarRenderer | RadialRenderer | undefined {\n        switch (this.chartType) {\n            case \"horizontal bar\":\n            case \"vertical bar\": {\n                return new BarRenderer();\n            }\n            case \"pie\": {\n                return new PieRenderer();\n            }\n            case \"donut\": {\n                return new RadialRenderer();\n            }\n        }\n    }\n\n    private updateChart() {\n        const accessors: IAccessors<any> | undefined = this.getAccessors();\n        const renderer: PieRenderer | BarRenderer | RadialRenderer | undefined = this.getRenderer();\n        const scales: Record<string, IScale<any>> | undefined = this.getScales();\n        if (!accessors || !renderer || !scales) {\n            throw new Error(\"Accessors, renderer or scales are unavailable\");\n        }\n        this.chartAssist.update(this.getChartAssistSeries(\n            this.categories,\n            this.values,\n            accessors,\n            renderer,\n            scales\n        ));\n    }\n\n    private getScales(): Record<string, IScale<any>> | undefined {\n        const bandScale = new BandScale();\n        const linearScale = new LinearScale();\n        linearScale.domainCalculator = getAutomaticDomainWithIncludedInterval([0, 0]);\n\n        switch (this.chartType) {\n            case \"horizontal bar\":\n                return {\n                    x: linearScale,\n                    y: bandScale,\n                };\n            case \"vertical bar\":\n                return {\n                    x: bandScale,\n                    y: linearScale,\n                };\n            case \"pie\":\n            case \"donut\": {\n                return radialScales();\n            }\n        }\n    }\n\n    private getAccessors(): IAccessors | undefined {\n        switch (this.chartType) {\n            case \"horizontal bar\":\n                return new HorizontalBarAccessors(this.colorProvider);\n            case \"vertical bar\": {\n                return new VerticalBarAccessors(this.colorProvider);\n            }\n            case \"pie\":\n            case \"donut\": {\n                const accessors = new RadialAccessors();\n                accessors.series.color = this.colorProvider.get;\n                return accessors;\n            }\n        }\n        return;\n    }\n\n    private getChartAssistSeries(categories: string[], values: number[], accessors: IAccessors, renderer: Renderer<IAccessors>, scales: Scales) {\n        return categories.map((category, i) => {\n            const value = values[i] || 0;\n            return {\n                id: category,\n                data: [{ category, value }],\n                accessors,\n                renderer,\n                scales,\n            };\n        });\n    }\n\n}\n","export default \"<div class=\\\"nui-chart-layout\\\">\\n    <div class=\\\"chart\\\" style=\\\"position: relative;\\\">\\n        <nui-chart class=\\\"w-100\\\" [chart]=\\\"chartAssist.chart\\\"></nui-chart>\\n        <ng-container *ngIf=\\\"donutContentPlugin\\\">\\n            <nui-chart-donut-content [plugin]=\\\"donutContentPlugin\\\">\\n                <div class=\\\"nui-text-page\\\">57</div>\\n                <div class=\\\"nui-text-secondary\\\">donuts</div>\\n            </nui-chart-donut-content>\\n        </ng-container>\\n    </div>\\n    <div class=\\\"legend\\\">\\n        <nui-legend [active]=\\\"chartAssist.isLegendActive\\\"\\n                    [interactive]=\\\"false\\\"\\n                    (mouseleave)=\\\"chartAssist.resetVisibleSeries()\\\">\\n            <nui-legend-series *ngFor=\\\"let legendSeries of chartAssist.legendSeriesSet; trackBy: chartAssist.seriesTrackByFn\\\"\\n                               descriptionPrimary=\\\"{{legendSeries.id | titlecase}}\\\"\\n                               [seriesRenderState]=\\\"chartAssist.renderStatesIndex[legendSeries.id]?.state\\\"\\n                               (mouseenter)=\\\"chartAssist.emphasizeSeries(legendSeries.id)\\\"\\n                               [isSelected]=\\\"!chartAssist.isSeriesHidden(legendSeries.id)\\\"\\n                               (isSelectedChange)=\\\"chartAssist.toggleSeries(legendSeries.id, $event)\\\">\\n                <nui-rich-legend-tile [value]=\\\"legendSeries.data[0]?.value\\\"\\n                                      backgroundColor=\\\"transparent\\\">\\n                </nui-rich-legend-tile>\\n                <nui-icon [icon]=\\\"iconMap[legendSeries.id]\\\"></nui-icon>\\n            </nui-legend-series>\\n        </nui-legend>\\n    </div>\\n    <div class=\\\"legend-bottom\\\">\\n        <nui-radio-group class=\\\"nui-radio-group-inline\\\"\\n                         [(value)]=\\\"chartType\\\"\\n                         (valueChange)=\\\"updateChartType()\\\">\\n            <nui-radio *ngFor=\\\"let type of chartTypes\\\"\\n                       [value]=\\\"type\\\">\\n                {{type | titlecase}}\\n            </nui-radio>\\n        </nui-radio-group>\\n    </div>\\n</div>\\n\\n\";","import { Component, OnInit } from \"@angular/core\";\nimport {\n    BandScale,\n    barAccessors,\n    barGrid,\n    BarHighlightStrategy,\n    BarRenderer,\n    barScales,\n    Chart,\n    ChartAssist,\n    ChartPalette,\n    CHART_PALETTE_CS1,\n    CHART_PALETTE_CS_S,\n    IAccessors,\n    IBarAccessors,\n    IChartAssistSeries,\n    IChartMarker,\n    IChartSeries,\n    IGrid,\n    InteractionLabelPlugin,\n    IValueProvider,\n    LineAccessors,\n    LinearScale,\n    LineRenderer,\n    MappedValueProvider,\n    Renderer,\n    Scales,\n    stack,\n    XYGrid,\n} from \"@nova-ui/charts\";\nimport zipObject from \"lodash/zipObject\";\n\nenum ChartType {\n    StackedBar = \"stacked bar\",\n    GroupedBar = \"grouped bar\",\n    Line = \"line\",\n}\n\ntype PreprocessorType<T> = (this: ChartAssist, series: IChartAssistSeries<T>[]) => IChartAssistSeries<T>[];\n\ninterface IChartTools<T = IAccessors> {\n    preprocessor?: PreprocessorType<T>;\n    gridFunction: () => IGrid;\n    rendererFunction: () => Renderer<IAccessors>;\n    accessorFunction: (colors?: IValueProvider<string>, markers?: IValueProvider<IChartMarker>) => IAccessors;\n    scaleFunction: () => Scales;\n}\n\nexport interface IChartAttributes<T = IAccessors> {\n    grid: IGrid;\n    accessors: IAccessors;\n    renderer: Renderer<IAccessors>;\n    scales: Scales;\n    preprocessor?: PreprocessorType<T>;\n}\n\n@Component({\n    selector: \"nui-chart-two-dimensional-data-example\",\n    templateUrl: \"./two-dimensional-data.example.component.html\",\n})\nexport class TwoDimensionalDataExampleComponent implements OnInit {\n    public chartTypes = [ChartType.StackedBar, ChartType.GroupedBar, ChartType.Line];\n    public chartType = this.chartTypes[0];\n    public mainCategoryOptions = [\"quarters\", \"statuses\"];\n    public mainCategory = this.mainCategoryOptions[0];\n    public statuses = [\"down\", \"critical\", \"warning\", \"unknown\", \"ok\", \"other\"];\n    public quarters = [\"Q1\", \"Q2\", \"Q3\", \"Q4\"];\n    public iconNames = [\"down\", \"critical\", \"warning\", \"unknown\", \"up\", \"unmanaged\"];\n    public categories: string[];\n    public subCategories: string[];\n    public values = [\n        [24, 16, 7, 6, 97, 4],\n        [13, 8, 5, 17, 5, 25],\n        [97, 41, 24, 6, 7, 6],\n        [45, 87, 23, 48, 24, 9],\n    ];\n    public valueAccessor: (i: number, j: number) => number;\n\n    public iconMap = zipObject(this.statuses, this.iconNames.map(n => `status_${n}`));\n    public palette: ChartPalette;\n    public chartAssist: ChartAssist;\n    public accessors: IAccessors;\n\n    private renderer: Renderer<IAccessors>;\n    private scales: Scales;\n\n    public ngOnInit() {\n        this.updateMainCategory();\n    }\n\n    public updateMainCategory() {\n        const statusPalette = new ChartPalette(new MappedValueProvider<string>(zipObject(this.statuses, CHART_PALETTE_CS_S)));\n        const standardPalette = new ChartPalette(CHART_PALETTE_CS1);\n\n        const groupByQuarter = this.mainCategory === this.mainCategoryOptions[0];\n\n        this.categories = groupByQuarter ? this.statuses : this.quarters;\n        this.subCategories = groupByQuarter ? this.quarters : this.statuses;\n        this.valueAccessor = groupByQuarter ? (i, j) => this.values[i][j] : (i, j) => this.values[j][i];\n        this.palette = groupByQuarter ? standardPalette : statusPalette;\n\n        this.updateChartType();\n    }\n\n    public updateChartType() {\n        this.buildChart();\n        this.updateChart();\n    }\n\n    private buildChart() {\n        const {grid, accessors, renderer, scales, preprocessor} = this.getChartAttributes(this.chartType);\n\n        this.renderer = renderer;\n        this.accessors = accessors;\n        this.scales = scales;\n\n        const chart = new Chart(grid);\n        chart.addPlugin(new InteractionLabelPlugin());\n\n        this.chartAssist = new ChartAssist(chart, preprocessor, this.palette);\n\n        if (this.chartType === ChartType.StackedBar) {\n            this.chartAssist.seriesProcessor = stack;\n        }\n    }\n\n    private updateChart() {\n        this.chartAssist.update(this.buildChartSeries(this.categories, this.subCategories, this.valueAccessor));\n    }\n\n    private buildChartSeries(categories: string[], subCategories: string[], valueAccessor: (i: number, j: number) => number): IChartSeries<IAccessors>[] {\n        return subCategories.map((subCategory, i) => ({\n            id: subCategory,\n            name: subCategory,\n            data: categories.map((xCategory, j) => ({category: xCategory, value: valueAccessor(i, j) || 0})),\n            accessors: this.accessors,\n            renderer: this.renderer,\n            scales: this.scales,\n        }));\n    }\n\n    private getChartAttributes(chartType: ChartType): IChartAttributes<IBarAccessors> {\n        const t: IChartTools<IBarAccessors> = this.getChartTools(chartType);\n        const result: IChartAttributes<IBarAccessors> = {\n            grid: t.gridFunction(),\n            accessors: t.accessorFunction(),\n            renderer: t.rendererFunction(),\n            scales: t.scaleFunction(),\n        };\n\n        if (t.preprocessor) {\n            result.preprocessor = t.preprocessor as PreprocessorType<IBarAccessors>;\n        }\n        return result;\n    }\n\n    private getChartTools(chartType: ChartType): IChartTools<IBarAccessors> {\n        const chartTools: Record<ChartType, IChartTools<IBarAccessors>> = {\n            [ChartType.StackedBar]: {\n                preprocessor: stack,\n                gridFunction: barGrid,\n                rendererFunction: () => new BarRenderer({highlightStrategy: new BarHighlightStrategy(\"x\")}),\n                accessorFunction: () => barAccessors(undefined, this.palette.standardColors),\n                scaleFunction: barScales,\n            },\n            [ChartType.GroupedBar]: {\n                gridFunction: () => barGrid({grouped: true}),\n                rendererFunction: () => new BarRenderer({highlightStrategy: new BarHighlightStrategy(\"x\")}),\n                accessorFunction: () => {\n                    const accessors = barAccessors({grouped: true}, this.palette.standardColors);\n                    accessors.data.category = (data, i, series, dataSeries) => [data.category, dataSeries.name];\n                    return accessors;\n                },\n                scaleFunction: () => barScales({grouped: true}),\n            },\n            [ChartType.Line]: {\n                gridFunction: () => new XYGrid(),\n                rendererFunction: () => new LineRenderer(),\n                accessorFunction: () => {\n                    const accessors = new LineAccessors(this.palette.standardColors);\n                    accessors.data.x = d => d.category;\n                    accessors.data.y = d => d.value;\n                    accessors.data.value = d => d.value;\n                    return accessors;\n                },\n                scaleFunction: () => ({\n                    x: new BandScale().fixDomain(this.categories),\n                    y: new LinearScale(),\n                }),\n            },\n        };\n\n        return chartTools[chartType];\n    }\n\n}\n","import { NgModule } from \"@angular/core\";\nimport { RouterModule, Routes } from \"@angular/router\";\nimport { NuiIconModule, NuiRadioModule } from \"@nova-ui/bits\";\nimport { NuiChartsModule } from \"@nova-ui/charts\";\n\nimport { DemoCommonModule } from \"../../common/demo-common.module\";\n\nimport { OneDimensionalDataExampleComponent } from \"./one-dimensional-data-example/one-dimensional-data.example.component\";\nimport { TwoDimensionalDataExampleComponent } from \"./two-dimensional-data-example/two-dimensional-data.example.component\";\n\nconst routes: Routes = [\n    {\n        path: \"1d\",\n        component: OneDimensionalDataExampleComponent,\n    },\n    {\n        path: \"2d\",\n        component: TwoDimensionalDataExampleComponent,\n    },\n];\n\n@NgModule({\n    declarations: [\n        OneDimensionalDataExampleComponent,\n        TwoDimensionalDataExampleComponent,\n    ],\n    imports: [\n        DemoCommonModule,\n        NuiChartsModule,\n        NuiIconModule,\n        NuiRadioModule,\n        RouterModule.forChild(routes),\n    ],\n})\nexport class TypeSwitchExampleModule {\n}\n","export default \"<h3>\\n    Legend by\\n    <nui-radio-group class=\\\"nui-radio-group-inline\\\"\\n                     [(value)]=\\\"mainCategory\\\"\\n                     (valueChange)=\\\"updateMainCategory()\\\">\\n        <nui-radio *ngFor=\\\"let category of mainCategoryOptions\\\"\\n                   [value]=\\\"category\\\">\\n            {{category | titlecase}}\\n        </nui-radio>\\n    </nui-radio-group>\\n</h3>\\n<div class=\\\"nui-chart-layout\\\">\\n    <div class=\\\"chart\\\">\\n        <nui-chart class=\\\"w-100\\\" [chart]=\\\"chartAssist.chart\\\"></nui-chart>\\n    </div>\\n    <div class=\\\"legend\\\">\\n        <nui-legend [active]=\\\"chartAssist.isLegendActive\\\"\\n                    [interactive]=\\\"false\\\"\\n                    (mouseleave)=\\\"chartAssist.resetVisibleSeries()\\\">\\n            <nui-legend-series *ngFor=\\\"let legendSeries of chartAssist.legendSeriesSet; trackBy: chartAssist.seriesTrackByFn\\\"\\n                               descriptionPrimary=\\\"{{legendSeries.id | titlecase}}\\\"\\n                               [seriesRenderState]=\\\"chartAssist.renderStatesIndex[legendSeries.id]?.state\\\"\\n                               (mouseenter)=\\\"chartAssist.emphasizeSeries(legendSeries.id)\\\"\\n                               [isSelected]=\\\"!chartAssist.isSeriesHidden(legendSeries.id)\\\"\\n                               (isSelectedChange)=\\\"chartAssist.toggleSeries(legendSeries.id, $event)\\\">\\n                <nui-rich-legend-tile [value]=\\\"accessors.data['value'](legendSeries.data[0], 0, null, null)\\\"\\n                                      [backgroundColor]=\\\"chartAssist.palette.standardColors.get(legendSeries.id)\\\"\\n                                      [color]=\\\"chartAssist.palette.textColors.get(legendSeries.id)\\\">\\n                </nui-rich-legend-tile>\\n                <nui-icon [icon]=\\\"iconMap[legendSeries.id]\\\" *ngIf=\\\"iconMap[legendSeries.id]\\\" class=\\\"mt-1 ml-3\\\"></nui-icon>\\n            </nui-legend-series>\\n        </nui-legend>\\n    </div>\\n    <div class=\\\"legend-bottom\\\">\\n        <nui-radio-group class=\\\"nui-radio-group-inline\\\"\\n                         [(value)]=\\\"chartType\\\"\\n                         (valueChange)=\\\"updateChartType()\\\">\\n            <nui-radio *ngFor=\\\"let type of chartTypes\\\"\\n                       [value]=\\\"type\\\">\\n                {{type | titlecase}}\\n            </nui-radio>\\n        </nui-radio-group>\\n    </div>\\n</div>\\n\";"],"sourceRoot":"webpack:///"}