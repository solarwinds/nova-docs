{"version":3,"sources":["webpack:///examples/components/demo/development/pie-chart/pie-chart-test/pie-chart.example.component.html","webpack:///examples/components/demo/development/pie-chart/pie-chart-example.module.ts","webpack:///examples/components/demo/development/pie-chart/pie-chart-test/pie-chart.example.component.ts"],"names":["bubbleRoutes","path","component","PieChartExampleModule","declarations","imports","forChild","PieChartTestComponent","toastr","compact","chart","chartAssist","interactive","processSeries","chartSeriesSet","series","isSeriesHidden","id","gridConfig","getGrid","config","scales","r","fixDomain","contentPlugin","addPlugin","refreshPie","getEventBus","getStream","subscribe","event","info","title","message","data","options","timeOut","layers","donutSeriesSet","generateMockOrdinalSeriesSet","forEach","s","Math","round","random","map","dataSeries","accessors","value","d","color","palette","standardColors","get","renderer","showInLegend","update","generateSeriesSet","annularGrowth","updateDonut","maxThickness","interaction","arc","mouseover","mouseout","click","undefined","setTimeout","updateDimensions","selector","template"],"mappings":"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","file":"pie-chart-pie-chart-example-module-es5.js","sourcesContent":["export default \"<div class=\\\"d-flex flex-column\\\" [style.height]=\\\"compact ? '150px' : '500px'\\\">\\n    <nui-expander>\\n        <div class=\\\"d-flex flex-fill w-100 h-100\\\" style=\\\"position: relative;\\\">\\n            <nui-chart class=\\\"flex-fill w-100 h-100\\\"\\n                       [chart]=\\\"chart\\\">\\n            </nui-chart>\\n            <nui-chart-donut-content [plugin]=\\\"contentPlugin\\\">\\n                <div *ngIf=\\\"showContent()\\\">\\n                    <div class=\\\"nui-text-page\\\">57</div>\\n                    <div class=\\\"nui-text-secondary\\\">donuts</div>\\n                </div>\\n            </nui-chart-donut-content>\\n            <div class=\\\"d-flex flex-column pl-2\\\">\\n                <nui-legend seriesUnitLabel=\\\"Share\\\"\\n                            [active]=\\\"chartAssist.isLegendActive\\\"\\n                            [interactive]=\\\"true\\\"\\n                            (mouseleave)=\\\"chartAssist.resetVisibleSeries()\\\">\\n                    <nui-legend-series *ngFor=\\\"let legendSeries of chartAssist.legendSeriesSet; trackBy: chartAssist.seriesTrackByFn\\\"\\n                                       [descriptionPrimary]=\\\"legendSeries['name']\\\"\\n                                       [seriesRenderState]=\\\"chartAssist.renderStatesIndex[legendSeries.id]?.state\\\"\\n                                       (mouseenter)=\\\"chartAssist.emphasizeSeries(legendSeries.id)\\\"\\n                                       [isSelected]=\\\"!chartAssist.isSeriesHidden(legendSeries.id)\\\"\\n                                       (isSelectedChange)=\\\"chartAssist.toggleSeries(legendSeries.id, $event)\\\">\\n                        <nui-rich-legend-tile [value]=\\\"chartAssist.getHighlightedValue(legendSeries, 'y', 'value')\\\"\\n                                              [backgroundColor]=\\\"chartAssist.palette.standardColors.get(legendSeries.id)\\\"\\n                                              [color]=\\\"chartAssist.palette.textColors.get(legendSeries.id)\\\">\\n                        </nui-rich-legend-tile>\\n                    </nui-legend-series>\\n                </nui-legend>\\n            </div>\\n        </div>\\n    </nui-expander>\\n\\n    <div class=\\\"btn-group\\\">\\n        <button nui-button (click)=\\\"refreshDonut(1)\\\" type=\\\"button\\\">1 circle donut </button>\\n        <button nui-button (click)=\\\"refreshDonut(2)\\\" type=\\\"button\\\">2 circle donut </button>\\n        <button nui-button (click)=\\\"refreshPie()\\\" type=\\\"button\\\">Pie</button>\\n        <button nui-button (click)=\\\"refreshPieInteraction()\\\" type=\\\"button\\\">Refresh and toggle interaction</button>\\n        <button nui-button (click)=\\\"compact = !compact\\\" type=\\\"button\\\">Toggle Size</button>\\n    </div>\\n</div>\\n<div class=\\\"d-flex flex-column w-25\\\" *ngIf=\\\"showContent()\\\">\\n    <h3>Annular's params</h3>\\n    <p>\\n        Setting one of the parameters to 0 will force donut chart to use default annular width of 20px. Default width is also configurable.\\n    </p>\\n    <span>Donut's width in percents</span><nui-textbox-number [value]=\\\"15\\\" [maxValue]=\\\"80\\\" (valueChange)=\\\"updateWidth($event)\\\"></nui-textbox-number>\\n    <span>Max donut's width in px</span><nui-textbox-number [value]=\\\"renderer.config.maxThickness\\\" (valueChange)=\\\"updatemaxWidth($event)\\\"></nui-textbox-number>\\n</div>\\n\";","import { NgModule } from \"@angular/core\";\nimport { RouterModule, Routes } from \"@angular/router\";\nimport { NuiButtonModule, NuiCheckboxModule, NuiExpanderModule, NuiTextboxModule } from \"@nova-ui/bits\";\nimport { NuiChartsModule } from \"@nova-ui/charts\";\n\nimport { DemoCommonModule } from \"../../common/demo-common.module\";\n\nimport { PieChartTestComponent } from \"./pie-chart-test/pie-chart.example.component\";\n\nconst bubbleRoutes: Routes = [\n    {\n        path: \"\",\n        component: PieChartTestComponent,\n    },\n];\n\n@NgModule({\n    declarations: [\n        PieChartTestComponent,\n    ],\n    imports: [\n        DemoCommonModule,\n        NuiChartsModule,\n        NuiButtonModule,\n        NuiCheckboxModule,\n        NuiTextboxModule,\n        RouterModule.forChild(bubbleRoutes),\n        NuiExpanderModule,\n    ],\n})\nexport class PieChartExampleModule {\n}\n","import { Component, Inject, OnInit } from \"@angular/core\";\nimport { IToastService, ToastService } from \"@nova-ui/bits\";\nimport {\n    Chart, ChartAssist, ChartDonutContentPlugin, GridConfig, IAccessors, IChartAssistSeries, IChartEvent, IChartSeries, IRadialAccessors, LinearScale,\n    PieRenderer, RadialGrid, radialPreprocessor, RadialRenderer, Scales\n} from \"@nova-ui/charts\";\n\nimport { DataGenerator } from \"../../../../../data-generator\";\n\n/**\n * @ignore\n */\n@Component({\n    selector: \"nui-pie-chart-example\",\n    templateUrl: \"./pie-chart.example.component.html\",\n})\nexport class PieChartTestComponent implements OnInit {\n    public compact = false;\n    public chart = new Chart(new RadialGrid());\n    public chartAssist: ChartAssist = new ChartAssist(this.chart);\n    public contentPlugin: ChartDonutContentPlugin;\n\n    public renderer: RadialRenderer;\n    private scales: Scales;\n    private interactive: boolean = false;\n\n    constructor(@Inject(ToastService) private toastr: IToastService) {\n    }\n\n    ngOnInit() {\n        const gridConfig = new GridConfig();\n        gridConfig.interactive = false;\n        this.chart.getGrid().config(gridConfig);\n        this.scales = {\n            r: new LinearScale(), // radius can be linear or band (for donuts) scale. No need in radial scale\n        };\n        this.scales.r.fixDomain([0, 1]);\n\n        this.chartAssist = new ChartAssist(this.chart, this.processSeries);\n        this.contentPlugin = new ChartDonutContentPlugin();\n        this.chart.addPlugin(this.contentPlugin);\n        this.refreshPie();\n\n        this.chart.getEventBus().getStream(\"click\").subscribe((event: IChartEvent) => {\n            this.toastr.info({\n                title: \"Event Published\",\n                message: `event: click; data: ${event.data}`,\n                options: {\n                    timeOut: 1500,\n                },\n            });\n        });\n    }\n\n    private processSeries = (chartSeriesSet: IChartAssistSeries<IRadialAccessors>[]) =>\n        radialPreprocessor(chartSeriesSet, (series: IChartSeries<IAccessors>) => !this.chartAssist.isSeriesHidden(series.id))\n\n    private generateSeriesSet(layers = 1): IChartAssistSeries<IAccessors>[] {\n        const donutSeriesSet = DataGenerator.generateMockOrdinalSeriesSet([\"Chrome\", \"Firefox\", \"Edge\"], layers);\n        donutSeriesSet.forEach(s => {\n            s.id += `-${Math.round(Math.random() * 100)}`;\n        });\n\n        return donutSeriesSet.map(dataSeries => ({\n            ...dataSeries,\n            accessors: {\n                data: {\n                    value: (d: any) => d.value,\n                },\n                series: {\n                    color: this.chartAssist.palette.standardColors.get,\n                },\n            },\n            scales: this.scales,\n            renderer: this.renderer,\n            showInLegend: true,\n        }));\n    }\n\n    public refreshPie() {\n        this.renderer = new PieRenderer();\n        this.chartAssist.update(this.generateSeriesSet());\n    }\n\n    public updateWidth(value: number) {\n        this.renderer.config.annularGrowth = value / 100;\n        this.updateDonut();\n    }\n\n    public updatemaxWidth(value: number) {\n        this.renderer.config.maxThickness = value;\n        this.updateDonut();\n    }\n\n    public refreshPieInteraction() {\n        this.interactive = !this.interactive;\n        if (this.interactive) {\n            this.renderer.interaction = {\n                arc: {\n                    mouseover: \"\",\n                    mouseout: \"\",\n                    click: \"\",\n                },\n            };\n        } else {\n            // @ts-ignore: Preventing breaking flow\n            this.renderer.interaction = undefined;\n        }\n        this.chartAssist.update(this.generateSeriesSet());\n    }\n\n    public refreshDonut(layers: number) {\n        this.renderer = new RadialRenderer();\n        // Hack for demo page, since it loads pie first and we can switch between chart renderers\n        this.chartAssist.update(this.generateSeriesSet(layers));\n        setTimeout(() => {\n            this.chart.updateDimensions();\n        }, 0);\n    }\n\n    public showContent() {\n        return !(this.renderer instanceof PieRenderer);\n    }\n\n    private updateDonut() {\n        setTimeout(() => {\n            this.chart.updateDimensions();\n        }, 0);\n    }\n}\n"]}