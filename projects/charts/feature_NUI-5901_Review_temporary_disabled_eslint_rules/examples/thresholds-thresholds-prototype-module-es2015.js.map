{"version":3,"sources":["./examples/components/demo/development/thresholds/thresholds-prototype.module.ts","./examples/components/demo/development/thresholds/thresholds-prototype.component.ts","./examples/components/demo/development/thresholds/thresholds-prototype.component.html"],"names":[],"mappings":"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","file":"thresholds-thresholds-prototype-module-es2015.js","sourcesContent":["import { NgModule } from \"@angular/core\";\nimport { RouterModule, Routes } from \"@angular/router\";\nimport { NuiChartsModule } from \"@nova-ui/charts\";\n\nimport { DemoCommonModule } from \"../../common/demo-common.module\";\n\nimport { ThresholdsPrototypeComponent } from \"./thresholds-prototype.component\";\n\nconst routes: Routes = [\n    {\n        path: \"\",\n        component: ThresholdsPrototypeComponent,\n        data: {\n            \"srlc\": {\n                \"hideIndicator\": true,\n            },\n        },\n    },\n];\n\n@NgModule({\n    declarations: [\n        ThresholdsPrototypeComponent,\n    ],\n    imports: [\n        DemoCommonModule,\n        NuiChartsModule,\n        RouterModule.forChild(routes),\n    ],\n})\nexport class ThresholdsPrototypeModule {\n}\n","import { Component, OnInit } from \"@angular/core\";\nimport {\n    BandScale, Chart, ChartAssist, ChartPalette, CHART_PALETTE_CS_S, IAccessors, IChartAssistSeries, IChartSeries, ILineAccessors, ISimpleThresholdZone,\n    IXYScales, LineAccessors, LinearScale, LineRenderer, MappedValueProvider, StatusAccessors, ThresholdsService, TimeIntervalScale, TimeScale, XYGrid,\n} from \"@nova-ui/charts\";\nimport moment, { duration } from \"moment/moment\";\n\nenum Status {\n    Error = \"error\",\n    Warning = \"warning\",\n}\n\n@Component({\n    templateUrl: \"./thresholds-prototype.component.html\",\n})\nexport class ThresholdsPrototypeComponent implements OnInit {\n    public chart = new Chart(new XYGrid());\n    public reversedThresholdsChart = new Chart(new XYGrid());\n    public chartAssist = new ChartAssist(this.chart);\n    public reversedThresholdsChartAssist = new ChartAssist(this.reversedThresholdsChart);\n\n    private thresholdsPalette = new ChartPalette(new MappedValueProvider({\n        [Status.Error]: CHART_PALETTE_CS_S[1],\n        [Status.Warning]: CHART_PALETTE_CS_S[2],\n    }));\n\n    constructor(private thresholdsService: ThresholdsService) {\n    }\n\n    public ngOnInit() {\n        const accessors = new LineAccessors(this.chartAssist.palette.standardColors, this.chartAssist.markers);\n        const renderer = new LineRenderer();\n        const scales: IXYScales = {\n            x: new TimeIntervalScale(duration(5, \"minutes\")),\n            y: new LinearScale(),\n        };\n        scales.y.fixDomain([0, 100]);\n\n        const reversedThresholdScales: IXYScales = {\n            x: new TimeScale(),\n            y: new LinearScale(),\n        };\n        reversedThresholdScales.y.fixDomain([0, 100]);\n\n        // Backgrounds use the StatusBarRenderer which requires a special set of scales.\n        // Note that the x scale is shared between the foreground series and the background series.\n        // Also note that the y band scale fixes the domain to a single value of STATUS_DOMAIN\n        const bgScales: IXYScales = {\n            x: scales.x,\n            y: new BandScale().fixDomain(StatusAccessors.STATUS_DOMAIN),\n        };\n\n        const reversedThresholdBgScales: IXYScales = {\n            x: reversedThresholdScales.x,\n            y: new BandScale().fixDomain(StatusAccessors.STATUS_DOMAIN),\n        };\n\n        // Zone definitions tell the threshold service where threshold zones begin and end\n        const zoneDefinitions: ISimpleThresholdZone[] = getZoneDefinitions();\n        const reversedZoneDefinitions: ISimpleThresholdZone[] = getReversedZoneDefinitions();\n        // Here we define the main data series on the chart which will be visualized as lines\n        const seriesSet: IChartSeries<ILineAccessors>[] = getData().map(d => ({\n            ...d,\n            accessors,\n            renderer,\n            scales,\n        }));\n\n        const thresholds: IChartAssistSeries<IAccessors>[] = [];\n        for (const s of seriesSet) {\n            // It's possible to manually define zones by area-like data series with start/end values for every data point. We don't do that\n            // here, but what we do instead is use simplified zones that are defined by a start value and/or an end value. (A missing\n            // start or end value indicates an infinite zone.)\n            // Those values are then converted into a set of data series in this step.\n            const zones = this.thresholdsService.getThresholdZones(s, zoneDefinitions, this.thresholdsPalette.standardColors);\n\n            // This injects threshold data into every data point of the source series. It is important, because later we can\n            // access related threshold information from many different places like legend, tooltips or even when calculating\n            // other threshold related data series, which we do in the following step.\n            this.thresholdsService.injectThresholdsData(s, zones);\n\n            // Here we create all threshold related visuals for this series. The methods on the thresholdService are broken down and\n            // generate separate elements of the whole, because some situations only require, for example, the backgrounds to be applied.\n            const seriesThresholds = [\n                ...this.thresholdsService.getThresholdLines(zones),\n                this.thresholdsService.getBackgrounds(s, zones, bgScales, this.thresholdsPalette.backgroundColors),\n            ];\n\n            thresholds.push(...seriesThresholds);\n        }\n\n        const reversedThresholdsSeriesSet: IChartSeries<ILineAccessors>[] = getData().map(d => ({\n            ...d,\n            accessors,\n            renderer,\n            scales: reversedThresholdScales,\n        }));\n\n        const reversedThresholds: IChartAssistSeries<IAccessors>[] = [];\n        for (const s of reversedThresholdsSeriesSet) {\n            const zones = this.thresholdsService.getThresholdZones(s, reversedZoneDefinitions, this.thresholdsPalette.standardColors);\n            this.thresholdsService.injectThresholdsData(s, zones);\n            const seriesThresholds = [\n                ...this.thresholdsService.getThresholdLines(zones),\n                this.thresholdsService.getBackgrounds(s, zones, reversedThresholdBgScales, this.thresholdsPalette.backgroundColors),\n            ];\n\n            reversedThresholds.push(...seriesThresholds);\n        }\n\n        this.chartAssist.update([...thresholds, ...seriesSet]);\n        this.reversedThresholdsChartAssist.update([...reversedThresholds, ...reversedThresholdsSeriesSet]);\n    }\n}\n\n/* Chart data */\nfunction getZoneDefinitions() {\n    return [\n        { status: Status.Error, start: 70, end: 90 },\n        { status: Status.Warning, start: 40, end: 70 },\n    ];\n}\n\nfunction getReversedZoneDefinitions() {\n    return [\n        { status: Status.Error, end: 20 },\n        { status: Status.Warning, start: 20, end: 40 },\n    ];\n}\n\nfunction getData() {\n    const format = \"YYYY-MM-DDTHH:mm:ssZ\";\n    return [{\n        id: \"series-1\",\n        name: \"Series 1\",\n        data: [\n            { x: moment(\"2016-12-25T15:05:00Z\", format).toDate(), y: 20 },\n            { x: moment(\"2016-12-25T15:10:00Z\", format).toDate(), y: 80 },\n            { x: moment(\"2016-12-25T15:15:00Z\", format).toDate(), y: 10 },\n            { x: moment(\"2016-12-25T15:20:00Z\", format).toDate(), y: 0 },\n            { x: moment(\"2016-12-25T15:25:00Z\", format).toDate(), y: 50 },\n            { x: moment(\"2016-12-25T15:30:00Z\", format).toDate(), y: 20 },\n        ],\n    }];\n}\n","export default \"<div class=\\\"nui-chart-layout\\\">\\n    <div class=\\\"chart\\\">\\n        <nui-chart class=\\\"w-100\\\" [chart]=\\\"chart\\\"></nui-chart>\\n    </div>\\n    <div class=\\\"legend\\\">\\n        <nui-legend seriesUnitLabel=\\\"sec\\\"\\n                    [active]=\\\"chartAssist.isLegendActive\\\"\\n                    [interactive]=\\\"true\\\"\\n                    (mouseleave)=\\\"chartAssist.resetVisibleSeries()\\\">\\n            <nui-legend-series *ngFor=\\\"let legendSeries of chartAssist.legendSeriesSet; trackBy: chartAssist.seriesTrackByFn\\\"\\n                               [descriptionPrimary]=\\\"legendSeries['name']\\\"\\n                               (mouseenter)=\\\"chartAssist.emphasizeSeries(legendSeries.id)\\\"\\n                               [seriesRenderState]=\\\"chartAssist.renderStatesIndex[legendSeries.id]?.state\\\"\\n                               [isSelected]=\\\"!chartAssist.isSeriesHidden(legendSeries.id)\\\"\\n                               (isSelectedChange)=\\\"chartAssist.toggleSeries(legendSeries.id, $event)\\\">\\n                <nui-rich-legend-tile [value]=\\\"chartAssist.getHighlightedValue(legendSeries, 'y')\\\"\\n                                      [backgroundColor]=\\\"chartAssist.palette.standardColors.get(legendSeries.id)\\\"\\n                                      [color]=\\\"chartAssist.palette.textColors.get(legendSeries.id)\\\">\\n                    <nui-chart-marker rightEdge\\n                                      [marker]=\\\"chartAssist.markers.get(legendSeries.id)\\\"\\n                                      [color]=\\\"chartAssist.palette.standardColors.get(legendSeries.id)\\\">\\n                    </nui-chart-marker>\\n                </nui-rich-legend-tile>\\n            </nui-legend-series>\\n        </nui-legend>\\n    </div>\\n</div>\\n<br>\\n<div class=\\\"nui-chart-layout\\\">\\n    <div class=\\\"chart\\\">\\n        <nui-chart class=\\\"w-100\\\" [chart]=\\\"reversedThresholdsChart\\\"></nui-chart>\\n    </div>\\n    <div class=\\\"legend\\\">\\n        <nui-legend seriesUnitLabel=\\\"sec\\\"\\n                    [active]=\\\"reversedThresholdsChartAssist.isLegendActive\\\"\\n                    [interactive]=\\\"true\\\"\\n                    (mouseleave)=\\\"reversedThresholdsChartAssist.resetVisibleSeries()\\\">\\n            <nui-legend-series *ngFor=\\\"let legendSeries of reversedThresholdsChartAssist.legendSeriesSet; trackBy: reversedThresholdsChartAssist.seriesTrackByFn\\\"\\n                               [descriptionPrimary]=\\\"legendSeries['name']\\\"\\n                               (mouseenter)=\\\"reversedThresholdsChartAssist.emphasizeSeries(legendSeries.id)\\\"\\n                               [seriesRenderState]=\\\"reversedThresholdsChartAssist.renderStatesIndex[legendSeries.id]?.state\\\"\\n                               [isSelected]=\\\"!reversedThresholdsChartAssist.isSeriesHidden(legendSeries.id)\\\"\\n                               (isSelectedChange)=\\\"reversedThresholdsChartAssist.toggleSeries(legendSeries.id, $event)\\\">\\n                <nui-rich-legend-tile [value]=\\\"reversedThresholdsChartAssist.getHighlightedValue(legendSeries, 'y')\\\"\\n                                      [backgroundColor]=\\\"reversedThresholdsChartAssist.palette.standardColors.get(legendSeries.id)\\\"\\n                                      [color]=\\\"reversedThresholdsChartAssist.palette.textColors.get(legendSeries.id)\\\">\\n                    <nui-chart-marker rightEdge\\n                                      [marker]=\\\"reversedThresholdsChartAssist.markers.get(legendSeries.id)\\\"\\n                                      [color]=\\\"reversedThresholdsChartAssist.palette.standardColors.get(legendSeries.id)\\\">\\n                    </nui-chart-marker>\\n                </nui-rich-legend-tile>\\n            </nui-legend-series>\\n        </nui-legend>\\n    </div>\\n</div>\\n\";"],"sourceRoot":"webpack:///"}