{"version":3,"sources":["webpack:///examples/components/demo/development/thresholds/thresholds-prototype.module.ts","webpack:///examples/components/demo/development/thresholds/thresholds-prototype.component.ts","webpack:///examples/components/demo/development/thresholds/thresholds-prototype.component.html"],"names":["routes","path","component","data","ThresholdsPrototypeModule","declarations","imports","forChild","Status","ThresholdsPrototypeComponent","thresholdsService","chart","reversedThresholdsChart","chartAssist","reversedThresholdsChartAssist","thresholdsPalette","Error","Warning","accessors","palette","standardColors","markers","renderer","scales","x","y","fixDomain","reversedThresholdScales","bgScales","STATUS_DOMAIN","reversedThresholdBgScales","zoneDefinitions","getZoneDefinitions","reversedZoneDefinitions","getReversedZoneDefinitions","seriesSet","getData","map","d","thresholds","s","zones","getThresholdZones","injectThresholdsData","seriesThresholds","getThresholdLines","getBackgrounds","backgroundColors","push","reversedThresholdsSeriesSet","reversedThresholds","update","template","status","start","end","format","id","name","toDate"],"mappings":"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","file":"thresholds-thresholds-prototype-module-es5.js","sourcesContent":["import { NgModule } from \"@angular/core\";\nimport { RouterModule, Routes } from \"@angular/router\";\nimport { NuiChartsModule } from \"@nova-ui/charts\";\n\nimport { DemoCommonModule } from \"../../common/demo-common.module\";\n\nimport { ThresholdsPrototypeComponent } from \"./thresholds-prototype.component\";\n\nconst routes: Routes = [\n    {\n        path: \"\",\n        component: ThresholdsPrototypeComponent,\n        data: {\n            \"srlc\": {\n                \"hideIndicator\": true,\n            },\n        },\n    },\n];\n\n@NgModule({\n    declarations: [\n        ThresholdsPrototypeComponent,\n    ],\n    imports: [\n        DemoCommonModule,\n        NuiChartsModule,\n        RouterModule.forChild(routes),\n    ],\n})\nexport class ThresholdsPrototypeModule {\n}\n","import { Component, OnInit } from \"@angular/core\";\nimport {\n    BandScale, Chart, ChartAssist, ChartPalette, CHART_PALETTE_CS_S, IAccessors, IChartAssistSeries, IChartSeries, ILineAccessors, ISimpleThresholdZone,\n    IXYScales, LineAccessors, LinearScale, LineRenderer, MappedValueProvider, StatusAccessors, ThresholdsService, TimeIntervalScale, TimeScale, XYGrid,\n} from \"@nova-ui/charts\";\nimport moment, { duration } from \"moment/moment\";\n\nenum Status {\n    Error = \"error\",\n    Warning = \"warning\",\n}\n\n@Component({\n    templateUrl: \"./thresholds-prototype.component.html\",\n})\nexport class ThresholdsPrototypeComponent implements OnInit {\n    public chart = new Chart(new XYGrid());\n    public reversedThresholdsChart = new Chart(new XYGrid());\n    public chartAssist = new ChartAssist(this.chart);\n    public reversedThresholdsChartAssist = new ChartAssist(this.reversedThresholdsChart);\n\n    private thresholdsPalette = new ChartPalette(new MappedValueProvider({\n        [Status.Error]: CHART_PALETTE_CS_S[1],\n        [Status.Warning]: CHART_PALETTE_CS_S[2],\n    }));\n\n    constructor(private thresholdsService: ThresholdsService) {\n    }\n\n    public ngOnInit() {\n        const accessors = new LineAccessors(this.chartAssist.palette.standardColors, this.chartAssist.markers);\n        const renderer = new LineRenderer();\n        const scales: IXYScales = {\n            x: new TimeIntervalScale(duration(5, \"minutes\")),\n            y: new LinearScale(),\n        };\n        scales.y.fixDomain([0, 100]);\n\n        const reversedThresholdScales: IXYScales = {\n            x: new TimeScale(),\n            y: new LinearScale(),\n        };\n        reversedThresholdScales.y.fixDomain([0, 100]);\n\n        // Backgrounds use the StatusBarRenderer which requires a special set of scales.\n        // Note that the x scale is shared between the foreground series and the background series.\n        // Also note that the y band scale fixes the domain to a single value of STATUS_DOMAIN\n        const bgScales: IXYScales = {\n            x: scales.x,\n            y: new BandScale().fixDomain(StatusAccessors.STATUS_DOMAIN),\n        };\n\n        const reversedThresholdBgScales: IXYScales = {\n            x: reversedThresholdScales.x,\n            y: new BandScale().fixDomain(StatusAccessors.STATUS_DOMAIN),\n        };\n\n        // Zone definitions tell the threshold service where threshold zones begin and end\n        const zoneDefinitions: ISimpleThresholdZone[] = getZoneDefinitions();\n        const reversedZoneDefinitions: ISimpleThresholdZone[] = getReversedZoneDefinitions();\n        // Here we define the main data series on the chart which will be visualized as lines\n        const seriesSet: IChartSeries<ILineAccessors>[] = getData().map(d => ({\n            ...d,\n            accessors,\n            renderer,\n            scales,\n        }));\n\n        const thresholds: IChartAssistSeries<IAccessors>[] = [];\n        for (const s of seriesSet) {\n            // It's possible to manually define zones by area-like data series with start/end values for every data point. We don't do that\n            // here, but what we do instead is use simplified zones that are defined by a start value and/or an end value. (A missing\n            // start or end value indicates an infinite zone.)\n            // Those values are then converted into a set of data series in this step.\n            const zones = this.thresholdsService.getThresholdZones(s, zoneDefinitions, this.thresholdsPalette.standardColors);\n\n            // This injects threshold data into every data point of the source series. It is important, because later we can\n            // access related threshold information from many different places like legend, tooltips or even when calculating\n            // other threshold related data series, which we do in the following step.\n            this.thresholdsService.injectThresholdsData(s, zones);\n\n            // Here we create all threshold related visuals for this series. The methods on the thresholdService are broken down and\n            // generate separate elements of the whole, because some situations only require, for example, the backgrounds to be applied.\n            const seriesThresholds = [\n                ...this.thresholdsService.getThresholdLines(zones),\n                this.thresholdsService.getBackgrounds(s, zones, bgScales, this.thresholdsPalette.backgroundColors),\n            ];\n\n            thresholds.push(...seriesThresholds);\n        }\n\n        const reversedThresholdsSeriesSet: IChartSeries<ILineAccessors>[] = getData().map(d => ({\n            ...d,\n            accessors,\n            renderer,\n            scales: reversedThresholdScales,\n        }));\n\n        const reversedThresholds: IChartAssistSeries<IAccessors>[] = [];\n        for (const s of reversedThresholdsSeriesSet) {\n            const zones = this.thresholdsService.getThresholdZones(s, reversedZoneDefinitions, this.thresholdsPalette.standardColors);\n            this.thresholdsService.injectThresholdsData(s, zones);\n            const seriesThresholds = [\n                ...this.thresholdsService.getThresholdLines(zones),\n                this.thresholdsService.getBackgrounds(s, zones, reversedThresholdBgScales, this.thresholdsPalette.backgroundColors),\n            ];\n\n            reversedThresholds.push(...seriesThresholds);\n        }\n\n        this.chartAssist.update([...thresholds, ...seriesSet]);\n        this.reversedThresholdsChartAssist.update([...reversedThresholds, ...reversedThresholdsSeriesSet]);\n    }\n}\n\n/* Chart data */\nfunction getZoneDefinitions() {\n    return [\n        { status: Status.Error, start: 70, end: 90 },\n        { status: Status.Warning, start: 40, end: 70 },\n    ];\n}\n\nfunction getReversedZoneDefinitions() {\n    return [\n        { status: Status.Error, end: 20 },\n        { status: Status.Warning, start: 20, end: 40 },\n    ];\n}\n\nfunction getData() {\n    const format = \"YYYY-MM-DDTHH:mm:ssZ\";\n    return [{\n        id: \"series-1\",\n        name: \"Series 1\",\n        data: [\n            { x: moment(\"2016-12-25T15:05:00Z\", format).toDate(), y: 20 },\n            { x: moment(\"2016-12-25T15:10:00Z\", format).toDate(), y: 80 },\n            { x: moment(\"2016-12-25T15:15:00Z\", format).toDate(), y: 10 },\n            { x: moment(\"2016-12-25T15:20:00Z\", format).toDate(), y: 0 },\n            { x: moment(\"2016-12-25T15:25:00Z\", format).toDate(), y: 50 },\n            { x: moment(\"2016-12-25T15:30:00Z\", format).toDate(), y: 20 },\n        ],\n    }];\n}\n","export default \"<div class=\\\"nui-chart-layout\\\">\\n    <div class=\\\"chart\\\">\\n        <nui-chart class=\\\"w-100\\\" [chart]=\\\"chart\\\"></nui-chart>\\n    </div>\\n    <div class=\\\"legend\\\">\\n        <nui-legend seriesUnitLabel=\\\"sec\\\"\\n                    [active]=\\\"chartAssist.isLegendActive\\\"\\n                    [interactive]=\\\"true\\\"\\n                    (mouseleave)=\\\"chartAssist.resetVisibleSeries()\\\">\\n            <nui-legend-series *ngFor=\\\"let legendSeries of chartAssist.legendSeriesSet; trackBy: chartAssist.seriesTrackByFn\\\"\\n                               [descriptionPrimary]=\\\"legendSeries['name']\\\"\\n                               (mouseenter)=\\\"chartAssist.emphasizeSeries(legendSeries.id)\\\"\\n                               [seriesRenderState]=\\\"chartAssist.renderStatesIndex[legendSeries.id]?.state\\\"\\n                               [isSelected]=\\\"!chartAssist.isSeriesHidden(legendSeries.id)\\\"\\n                               (isSelectedChange)=\\\"chartAssist.toggleSeries(legendSeries.id, $event)\\\">\\n                <nui-rich-legend-tile [value]=\\\"chartAssist.getHighlightedValue(legendSeries, 'y')\\\"\\n                                      [backgroundColor]=\\\"chartAssist.palette.standardColors.get(legendSeries.id)\\\"\\n                                      [color]=\\\"chartAssist.palette.textColors.get(legendSeries.id)\\\">\\n                    <nui-chart-marker rightEdge\\n                                      [marker]=\\\"chartAssist.markers.get(legendSeries.id)\\\"\\n                                      [color]=\\\"chartAssist.palette.standardColors.get(legendSeries.id)\\\">\\n                    </nui-chart-marker>\\n                </nui-rich-legend-tile>\\n            </nui-legend-series>\\n        </nui-legend>\\n    </div>\\n</div>\\n<br>\\n<div class=\\\"nui-chart-layout\\\">\\n    <div class=\\\"chart\\\">\\n        <nui-chart class=\\\"w-100\\\" [chart]=\\\"reversedThresholdsChart\\\"></nui-chart>\\n    </div>\\n    <div class=\\\"legend\\\">\\n        <nui-legend seriesUnitLabel=\\\"sec\\\"\\n                    [active]=\\\"reversedThresholdsChartAssist.isLegendActive\\\"\\n                    [interactive]=\\\"true\\\"\\n                    (mouseleave)=\\\"reversedThresholdsChartAssist.resetVisibleSeries()\\\">\\n            <nui-legend-series *ngFor=\\\"let legendSeries of reversedThresholdsChartAssist.legendSeriesSet; trackBy: reversedThresholdsChartAssist.seriesTrackByFn\\\"\\n                               [descriptionPrimary]=\\\"legendSeries['name']\\\"\\n                               (mouseenter)=\\\"reversedThresholdsChartAssist.emphasizeSeries(legendSeries.id)\\\"\\n                               [seriesRenderState]=\\\"reversedThresholdsChartAssist.renderStatesIndex[legendSeries.id]?.state\\\"\\n                               [isSelected]=\\\"!reversedThresholdsChartAssist.isSeriesHidden(legendSeries.id)\\\"\\n                               (isSelectedChange)=\\\"reversedThresholdsChartAssist.toggleSeries(legendSeries.id, $event)\\\">\\n                <nui-rich-legend-tile [value]=\\\"reversedThresholdsChartAssist.getHighlightedValue(legendSeries, 'y')\\\"\\n                                      [backgroundColor]=\\\"reversedThresholdsChartAssist.palette.standardColors.get(legendSeries.id)\\\"\\n                                      [color]=\\\"reversedThresholdsChartAssist.palette.textColors.get(legendSeries.id)\\\">\\n                    <nui-chart-marker rightEdge\\n                                      [marker]=\\\"reversedThresholdsChartAssist.markers.get(legendSeries.id)\\\"\\n                                      [color]=\\\"reversedThresholdsChartAssist.palette.standardColors.get(legendSeries.id)\\\">\\n                    </nui-chart-marker>\\n                </nui-rich-legend-tile>\\n            </nui-legend-series>\\n        </nui-legend>\\n    </div>\\n</div>\\n\";"]}