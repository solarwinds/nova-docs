{"version":3,"sources":["./node_modules/lodash/_baseZipObject.js","./node_modules/lodash/zipObject.js","./examples/components/demo/common/charts-test-harness.component.ts","./examples/data-generator.ts","./examples/components/demo/common/demo-common.module.ts","./examples/components/demo/common/charts-test-harness.component.html"],"names":[],"mappings":"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","file":"common-es2015.js","sourcesContent":["/**\n * This base implementation of `_.zipObject` which assigns values using `assignFunc`.\n *\n * @private\n * @param {Array} props The property identifiers.\n * @param {Array} values The property values.\n * @param {Function} assignFunc The function to assign values.\n * @returns {Object} Returns the new object.\n */\nfunction baseZipObject(props, values, assignFunc) {\n  var index = -1,\n      length = props.length,\n      valsLength = values.length,\n      result = {};\n\n  while (++index < length) {\n    var value = index < valsLength ? values[index] : undefined;\n    assignFunc(result, props[index], value);\n  }\n  return result;\n}\n\nmodule.exports = baseZipObject;\n","var assignValue = require('./_assignValue'),\n    baseZipObject = require('./_baseZipObject');\n\n/**\n * This method is like `_.fromPairs` except that it accepts two arrays,\n * one of property identifiers and one of corresponding values.\n *\n * @static\n * @memberOf _\n * @since 0.4.0\n * @category Array\n * @param {Array} [props=[]] The property identifiers.\n * @param {Array} [values=[]] The property values.\n * @returns {Object} Returns the new object.\n * @example\n *\n * _.zipObject(['a', 'b'], [1, 2]);\n * // => { 'a': 1, 'b': 2 }\n */\nfunction zipObject(props, values) {\n  return baseZipObject(props || [], values || [], assignValue);\n}\n\nmodule.exports = zipObject;\n","import { Component, OnDestroy } from \"@angular/core\";\nimport { ThemeSwitchService } from \"@nova-ui/bits\";\n\n@Component({\n    selector: \"charts-test-harness\",\n    templateUrl: \"./charts-test-harness.component.html\",\n    host: { class: \"charts-test-harness\" },\n})\nexport class ChartsTestHarnessComponent implements OnDestroy {\n    public originalWithRefreshRoute: boolean;\n\n    constructor(public themeSwitcher: ThemeSwitchService) {\n        // disable route refreshing because the theme service currently always reverts to\n        // the light theme on route refresh unless route.data.showThemeSwitcher is 'true'\n        this.originalWithRefreshRoute = this.themeSwitcher.withRefreshRoute;\n        this.themeSwitcher.withRefreshRoute = false;\n    }\n\n    public ngOnDestroy() {\n        this.themeSwitcher.withRefreshRoute = this.originalWithRefreshRoute;\n    }\n}\n","import { IAccessors, IDataSeries } from \"@nova-ui/charts\";\nimport moment, { Moment } from \"moment/moment\";\n\nexport interface IDateValue {\n    x: Date;\n    y: number;\n}\n\nexport class DataGenerator {\n    public static generateMockStatusSeriesSet(seriesCount: number, pointCountPerSeries: number, statuses: string[]) {\n        const dataSet = [];\n        for (let i = 0; i < seriesCount; i++) {\n            dataSet.push({\n                id: `series-${i + 1}`,\n                name: `Series ${i + 1}`,\n                data: DataGenerator.mockStatusData(pointCountPerSeries, statuses),\n            });\n        }\n        return dataSet;\n    }\n\n    public static generateMockLineSeriesSet(seriesCount: number, pointCountPerSeries: number) {\n        const dataSet = [];\n        for (let i = 0; i < seriesCount; i++) {\n            dataSet.push({\n                id: `series-${i + 1}`,\n                name: `Series ${i + 1}`,\n                data: DataGenerator.mockLineData(pointCountPerSeries),\n            });\n        }\n        return dataSet;\n    }\n\n    public static generateMockTimeLineSeriesSet(seriesCount: number,\n                                                pointCountPerSeries: number,\n                                                startTime?: string,\n                                                endTime?: string) {\n        const dataSet = [];\n        for (let i = 0; i < seriesCount; i++) {\n            dataSet.push({\n                id: `series-${i + 1}`,\n                name: `Series ${i + 1}`,\n                data: DataGenerator.mockTimeLineData(pointCountPerSeries, startTime, endTime),\n            });\n        }\n        return dataSet;\n    }\n\n    /**\n     * With default seriesCount=1 it will generate groupNames.length series with one data point\n     * @param {string[]} groupNames\n     * @param {number} seriesCount\n     * @returns {IDataSeries[]}\n     */\n    public static generateMockOrdinalSeriesSet(groupNames: string[],\n        seriesCount: number = 1): IDataSeries<IAccessors>[] {\n        return groupNames.map((el, index) => ({\n            id: `series-${index + 1}`,\n            name: el,\n            // for ordinal scale it is useful to identify each data point here somehow\n            data: Array(seriesCount).fill(undefined).map((_: any, i: any) => ({\n                value: Math.floor(Math.random() * 100),\n                description: `Category ${i + 1}`,\n            })),\n            accessors: {\n                data: {\n                    category: (d: any) => d.description,\n                    value: (d: any) => d.value,\n                },\n            },\n        }));\n    }\n\n    public static mockTimeLineData = (\n        pointCount = 40,\n        startDatetime = \"2017-02-15T15:14:29.909Z\",\n        endDatetime = \"2017-02-15T16:14:29.909Z\"\n    ): IDateValue[] => {\n        const start = moment(startDatetime);\n        const end = moment(endDatetime);\n        const step = end.diff(start) / pointCount;\n        let prev: any;\n        const generateValue = () => Math.random() * 100 + 50;\n        const maxThreshold = 10;\n\n        return DataGenerator.range(0, pointCount).map((index: any) => {\n            let next = generateValue();\n            if (prev) {\n                while (Math.abs(next - prev) > maxThreshold) {\n                    next = generateValue();\n                }\n            }\n            prev = next;\n            return {\n                x: start.clone().add(step * index, \"ms\").toDate(),\n                y: next,\n            };\n        });\n    }\n\n    public static mockLineData = (\n        pointCount = 40,\n        startData = 0,\n        endData = 400\n    ) => {\n        const step = (endData - startData) / pointCount;\n        let prev: any;\n        const generateValue = () => Math.random() * 100 + 50;\n        const maxThreshold = 10;\n\n        return DataGenerator.range(0, pointCount).map((index: any) => {\n            let next = generateValue();\n            if (prev) {\n                while (Math.abs(next - prev) > maxThreshold) {\n                    next = generateValue();\n                }\n            }\n            prev = next;\n            return {\n                x: startData + (step * index),\n                y: next,\n            };\n        });\n    }\n\n    public static mockStatusData = (pointCount = 40, statuses: string[]) => {\n        const generateValue = () => statuses[Math.floor(Math.random() * statuses.length)];\n        return DataGenerator.range(0, pointCount).map((index: any) =>\n            ({\n                x: index,\n                y: generateValue(),\n            }));\n    }\n\n    public static buildTimeSeriesFromData(from: Moment, to: Moment, data: number[]): { x: Moment, y: number }[] {\n        const count = data.length;\n        if (!from || !to || count === 0) { return []; }\n\n        const interval = count > 1 ? to.diff(from) / (count - 1) : 0;\n        return data.map((y, i) => ({\n            x: from.clone().add(moment.duration(i * interval)),\n            y,\n        }));\n    }\n\n    private static range(start: number, end: number) {\n        return (new Array(end - start + 1)).fill(undefined).map((_, i) => i + start);\n    }\n}\n","import { CommonModule } from \"@angular/common\";\nimport { NgModule } from \"@angular/core\";\nimport { FormsModule } from \"@angular/forms\";\n\nimport { ChartsTestHarnessComponent } from \"./charts-test-harness.component\";\n\n@NgModule({\n    declarations: [\n        ChartsTestHarnessComponent,\n    ],\n    imports: [\n        FormsModule,\n        CommonModule,\n    ],\n    exports: [\n        ChartsTestHarnessComponent,\n        CommonModule,\n    ],\n})\nexport class DemoCommonModule { }\n","export default \"<ng-content></ng-content>\\n<div class=\\\"ml-3 mt-4\\\">\\n    <div class=\\\"d-flex align-items-center\\\">\\n        <input class=\\\"mb-2\\\"\\n               type=\\\"checkbox\\\"\\n               id=\\\"dark-theme\\\"\\n               [ngModel]=\\\"themeSwitcher.isDarkModeEnabledSubject | async\\\"\\n               (ngModelChange)=\\\"themeSwitcher.setDarkTheme($event)\\\"/>\\n        <label class=\\\"px-3\\\" for=\\\"dark-theme\\\">Dark Theme</label>\\n    </div>\\n</div>\\n\";"],"sourceRoot":"webpack:///"}