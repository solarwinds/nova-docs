{"version":3,"sources":["./examples/components/demo/development/pie-chart/pie-chart-test/pie-chart.example.component.html","./examples/components/demo/development/pie-chart/pie-chart-example.module.ts","./examples/components/demo/development/pie-chart/pie-chart-test/pie-chart.example.component.ts"],"names":[],"mappings":"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","file":"pie-chart-pie-chart-example-module-es2015.js","sourcesContent":["export default \"<div class=\\\"d-flex flex-column\\\" [style.height]=\\\"compact ? '150px' : '500px'\\\">\\n    <nui-expander>\\n        <div class=\\\"d-flex flex-fill w-100 h-100\\\" style=\\\"position: relative;\\\">\\n            <nui-chart class=\\\"flex-fill w-100 h-100\\\"\\n                       [chart]=\\\"chart\\\">\\n            </nui-chart>\\n            <nui-chart-donut-content [plugin]=\\\"contentPlugin\\\">\\n                <div *ngIf=\\\"showContent()\\\">\\n                    <div class=\\\"nui-text-page\\\">57</div>\\n                    <div class=\\\"nui-text-secondary\\\">donuts</div>\\n                </div>\\n            </nui-chart-donut-content>\\n            <div class=\\\"d-flex flex-column pl-2\\\">\\n                <nui-legend seriesUnitLabel=\\\"Share\\\"\\n                            [active]=\\\"chartAssist.isLegendActive\\\"\\n                            [interactive]=\\\"true\\\"\\n                            (mouseleave)=\\\"chartAssist.resetVisibleSeries()\\\">\\n                    <nui-legend-series *ngFor=\\\"let legendSeries of chartAssist.legendSeriesSet; trackBy: chartAssist.seriesTrackByFn\\\"\\n                                       [descriptionPrimary]=\\\"legendSeries['name']\\\"\\n                                       [seriesRenderState]=\\\"chartAssist.renderStatesIndex[legendSeries.id]?.state\\\"\\n                                       (mouseenter)=\\\"chartAssist.emphasizeSeries(legendSeries.id)\\\"\\n                                       [isSelected]=\\\"!chartAssist.isSeriesHidden(legendSeries.id)\\\"\\n                                       (isSelectedChange)=\\\"chartAssist.toggleSeries(legendSeries.id, $event)\\\">\\n                        <nui-rich-legend-tile [value]=\\\"chartAssist.getHighlightedValue(legendSeries, 'y', 'value')\\\"\\n                                              [backgroundColor]=\\\"chartAssist.palette.standardColors.get(legendSeries.id)\\\"\\n                                              [color]=\\\"chartAssist.palette.textColors.get(legendSeries.id)\\\">\\n                        </nui-rich-legend-tile>\\n                    </nui-legend-series>\\n                </nui-legend>\\n            </div>\\n        </div>\\n    </nui-expander>\\n\\n    <div class=\\\"btn-group\\\">\\n        <button nui-button (click)=\\\"refreshDonut(1)\\\" type=\\\"button\\\">1 circle donut </button>\\n        <button nui-button (click)=\\\"refreshDonut(2)\\\" type=\\\"button\\\">2 circle donut </button>\\n        <button nui-button (click)=\\\"refreshPie()\\\" type=\\\"button\\\">Pie</button>\\n        <button nui-button (click)=\\\"refreshPieInteraction()\\\" type=\\\"button\\\">Refresh and toggle interaction</button>\\n        <button nui-button (click)=\\\"compact = !compact\\\" type=\\\"button\\\">Toggle Size</button>\\n    </div>\\n</div>\\n<div class=\\\"d-flex flex-column w-25\\\" *ngIf=\\\"showContent()\\\">\\n    <h3>Annular's params</h3>\\n    <p>\\n        Setting one of the parameters to 0 will force donut chart to use default annular width of 20px. Default width is also configurable.\\n    </p>\\n    <span>Donut's width in percents</span><nui-textbox-number [value]=\\\"15\\\" [maxValue]=\\\"80\\\" (valueChange)=\\\"updateWidth($event)\\\"></nui-textbox-number>\\n    <span>Max donut's width in px</span><nui-textbox-number [value]=\\\"renderer.config.maxThickness\\\" (valueChange)=\\\"updatemaxWidth($event)\\\"></nui-textbox-number>\\n</div>\\n\";","import { NgModule } from \"@angular/core\";\nimport { RouterModule, Routes } from \"@angular/router\";\nimport { NuiButtonModule, NuiCheckboxModule, NuiExpanderModule, NuiTextboxModule } from \"@nova-ui/bits\";\nimport { NuiChartsModule } from \"@nova-ui/charts\";\n\nimport { DemoCommonModule } from \"../../common/demo-common.module\";\n\nimport { PieChartTestComponent } from \"./pie-chart-test/pie-chart.example.component\";\n\nconst bubbleRoutes: Routes = [\n    {\n        path: \"\",\n        component: PieChartTestComponent,\n    },\n];\n\n@NgModule({\n    declarations: [\n        PieChartTestComponent,\n    ],\n    imports: [\n        DemoCommonModule,\n        NuiChartsModule,\n        NuiButtonModule,\n        NuiCheckboxModule,\n        NuiTextboxModule,\n        RouterModule.forChild(bubbleRoutes),\n        NuiExpanderModule,\n    ],\n})\nexport class PieChartExampleModule {\n}\n","import { Component, Inject, OnInit } from \"@angular/core\";\nimport { IToastService, ToastService } from \"@nova-ui/bits\";\nimport {\n    Chart, ChartAssist, ChartDonutContentPlugin, GridConfig, IAccessors, IChartAssistSeries, IChartEvent, IChartSeries, IRadialAccessors, LinearScale,\n    PieRenderer, RadialGrid, radialPreprocessor, RadialRenderer, Scales,\n} from \"@nova-ui/charts\";\n\nimport { DataGenerator } from \"../../../../../data-generator\";\n\n/**\n * @ignore\n */\n@Component({\n    selector: \"nui-pie-chart-example\",\n    templateUrl: \"./pie-chart.example.component.html\",\n})\nexport class PieChartTestComponent implements OnInit {\n    public compact = false;\n    public chart = new Chart(new RadialGrid());\n    public chartAssist: ChartAssist = new ChartAssist(this.chart);\n    public contentPlugin: ChartDonutContentPlugin;\n\n    public renderer: RadialRenderer;\n    private scales: Scales;\n    private interactive: boolean = false;\n\n    constructor(@Inject(ToastService) private toastr: IToastService) {\n    }\n\n    ngOnInit() {\n        const gridConfig = new GridConfig();\n        gridConfig.interactive = false;\n        this.chart.getGrid().config(gridConfig);\n        this.scales = {\n            r: new LinearScale(), // radius can be linear or band (for donuts) scale. No need in radial scale\n        };\n        this.scales.r.fixDomain([0, 1]);\n\n        this.chartAssist = new ChartAssist(this.chart, this.processSeries);\n        this.contentPlugin = new ChartDonutContentPlugin();\n        this.chart.addPlugin(this.contentPlugin);\n        this.refreshPie();\n\n        this.chart.getEventBus().getStream(\"click\").subscribe((event: IChartEvent) => {\n            this.toastr.info({\n                title: \"Event Published\",\n                message: `event: click; data: ${event.data}`,\n                options: {\n                    timeOut: 1500,\n                },\n            });\n        });\n    }\n\n    private processSeries = (chartSeriesSet: IChartAssistSeries<IRadialAccessors>[]) =>\n        radialPreprocessor(chartSeriesSet, (series: IChartSeries<IAccessors>) => !this.chartAssist.isSeriesHidden(series.id))\n\n    private generateSeriesSet(layers = 1): IChartAssistSeries<IAccessors>[] {\n        const donutSeriesSet = DataGenerator.generateMockOrdinalSeriesSet([\"Chrome\", \"Firefox\", \"Edge\"], layers);\n        donutSeriesSet.forEach(s => {\n            s.id += `-${Math.round(Math.random() * 100)}`;\n        });\n\n        return donutSeriesSet.map(dataSeries => ({\n            ...dataSeries,\n            accessors: {\n                data: {\n                    value: (d: any) => d.value,\n                },\n                series: {\n                    color: this.chartAssist.palette.standardColors.get,\n                },\n            },\n            scales: this.scales,\n            renderer: this.renderer,\n            showInLegend: true,\n        }));\n    }\n\n    public refreshPie() {\n        this.renderer = new PieRenderer();\n        this.chartAssist.update(this.generateSeriesSet());\n    }\n\n    public updateWidth(value: number) {\n        this.renderer.config.annularGrowth = value / 100;\n        this.updateDonut();\n    }\n\n    public updatemaxWidth(value: number) {\n        this.renderer.config.maxThickness = value;\n        this.updateDonut();\n    }\n\n    public refreshPieInteraction() {\n        this.interactive = !this.interactive;\n        if (this.interactive) {\n            this.renderer.interaction = {\n                arc: {\n                    mouseover: \"\",\n                    mouseout: \"\",\n                    click: \"\",\n                },\n            };\n        } else {\n            // @ts-ignore: Preventing breaking flow\n            this.renderer.interaction = undefined;\n        }\n        this.chartAssist.update(this.generateSeriesSet());\n    }\n\n    public refreshDonut(layers: number) {\n        this.renderer = new RadialRenderer();\n        // Hack for demo page, since it loads pie first and we can switch between chart renderers\n        this.chartAssist.update(this.generateSeriesSet(layers));\n        setTimeout(() => {\n            this.chart.updateDimensions();\n        }, 0);\n    }\n\n    public showContent() {\n        return !(this.renderer instanceof PieRenderer);\n    }\n\n    private updateDonut() {\n        setTimeout(() => {\n            this.chart.updateDimensions();\n        }, 0);\n    }\n}\n"],"sourceRoot":"webpack:///"}